// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KNArchives.proto

#include "KNArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace KN {
PROTOBUF_CONSTEXPR AnimationAttributesArchive::AnimationAttributesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.animationtype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.effect_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.color_)*/nullptr
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_.delay_)*/0
  , /*decltype(_impl_.direction_)*/0u
  , /*decltype(_impl_.isautomatic_)*/false} {}
struct AnimationAttributesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnimationAttributesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnimationAttributesArchiveDefaultTypeInternal() {}
  union {
    AnimationAttributesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnimationAttributesArchiveDefaultTypeInternal _AnimationAttributesArchive_default_instance_;
PROTOBUF_CONSTEXPR TransitionAttributesArchive::TransitionAttributesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.database_animationtype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.database_effect_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.database_color_)*/nullptr
  , /*decltype(_impl_.animationattributes_)*/nullptr
  , /*decltype(_impl_.database_duration_)*/0
  , /*decltype(_impl_.database_direction_)*/0u
  , /*decltype(_impl_.database_delay_)*/0
  , /*decltype(_impl_.custom_twist_)*/0
  , /*decltype(_impl_.custom_mosaic_size_)*/0u
  , /*decltype(_impl_.isautomatic_)*/false
  , /*decltype(_impl_.custom_bounce_)*/false
  , /*decltype(_impl_.custom_magic_move_fade_unmatched_objects_)*/false
  , /*decltype(_impl_.custom_mosaic_type_)*/0u
  , /*decltype(_impl_.custom_timing_curve_)*/1
  , /*decltype(_impl_.custom_text_delivery_type_)*/1} {}
struct TransitionAttributesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransitionAttributesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransitionAttributesArchiveDefaultTypeInternal() {}
  union {
    TransitionAttributesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransitionAttributesArchiveDefaultTypeInternal _TransitionAttributesArchive_default_instance_;
PROTOBUF_CONSTEXPR TransitionArchive::TransitionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attributes_)*/nullptr} {}
struct TransitionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransitionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransitionArchiveDefaultTypeInternal() {}
  union {
    TransitionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransitionArchiveDefaultTypeInternal _TransitionArchive_default_instance_;
PROTOBUF_CONSTEXPR BuildChunkArchive::BuildChunkArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.build_)*/nullptr
  , /*decltype(_impl_.delay_)*/0
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.automatic_)*/false
  , /*decltype(_impl_.referent_)*/false} {}
struct BuildChunkArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuildChunkArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuildChunkArchiveDefaultTypeInternal() {}
  union {
    BuildChunkArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuildChunkArchiveDefaultTypeInternal _BuildChunkArchive_default_instance_;
PROTOBUF_CONSTEXPR BuildAttributesArchive::BuildAttributesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.database_animationtype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.database_effect_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.motionpathstring_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.database_color_)*/nullptr
  , /*decltype(_impl_.animationattributes_)*/nullptr
  , /*decltype(_impl_.action_motionpathsource_)*/nullptr
  , /*decltype(_impl_.database_direction_)*/0u
  , /*decltype(_impl_.eventtrigger_)*/0u
  , /*decltype(_impl_.database_delay_)*/0
  , /*decltype(_impl_.delayautomaticafter_)*/0
  , /*decltype(_impl_.delayautomaticwith_)*/0
  , /*decltype(_impl_.database_duration_)*/0
  , /*decltype(_impl_.action_rotationangle_)*/0
  , /*decltype(_impl_.action_scalesize_)*/0
  , /*decltype(_impl_.action_coloralpha_)*/0
  , /*decltype(_impl_.action_acceleration_)*/0
  , /*decltype(_impl_.curvestyle_)*/0
  , /*decltype(_impl_.chartrotation3d_)*/0
  , /*decltype(_impl_.custom_textdelivery_)*/0
  , /*decltype(_impl_.custom_deliveryoption_)*/0
  , /*decltype(_impl_.custom_bounce_)*/false
  , /*decltype(_impl_.custom_action_decay_)*/false
  , /*decltype(_impl_.custom_action_repeatcount_)*/0u
  , /*decltype(_impl_.custom_action_scale_)*/0
  , /*decltype(_impl_.custom_action_jiggleintensity_)*/0
  , /*decltype(_impl_.startoffset_)*/0u
  , /*decltype(_impl_.endoffset_)*/0u
  , /*decltype(_impl_.action_rotationdirection_)*/31} {}
struct BuildAttributesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuildAttributesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuildAttributesArchiveDefaultTypeInternal() {}
  union {
    BuildAttributesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuildAttributesArchiveDefaultTypeInternal _BuildAttributesArchive_default_instance_;
PROTOBUF_CONSTEXPR BuildArchive::BuildArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.delivery_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.drawable_)*/nullptr
  , /*decltype(_impl_.attributes_)*/nullptr
  , /*decltype(_impl_.duration_)*/0} {}
struct BuildArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuildArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuildArchiveDefaultTypeInternal() {}
  union {
    BuildArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuildArchiveDefaultTypeInternal _BuildArchive_default_instance_;
PROTOBUF_CONSTEXPR PlaceholderArchive::PlaceholderArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.kind_)*/0} {}
struct PlaceholderArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlaceholderArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlaceholderArchiveDefaultTypeInternal() {}
  union {
    PlaceholderArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlaceholderArchiveDefaultTypeInternal _PlaceholderArchive_default_instance_;
PROTOBUF_CONSTEXPR NoteArchive::NoteArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.containedstorage_)*/nullptr} {}
struct NoteArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NoteArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NoteArchiveDefaultTypeInternal() {}
  union {
    NoteArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NoteArchiveDefaultTypeInternal _NoteArchive_default_instance_;
PROTOBUF_CONSTEXPR ClassicStylesheetRecordArchive::ClassicStylesheetRecordArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.identifier_to_style_map_)*/{}
  , /*decltype(_impl_.theme_)*/nullptr} {}
struct ClassicStylesheetRecordArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClassicStylesheetRecordArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClassicStylesheetRecordArchiveDefaultTypeInternal() {}
  union {
    ClassicStylesheetRecordArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClassicStylesheetRecordArchiveDefaultTypeInternal _ClassicStylesheetRecordArchive_default_instance_;
PROTOBUF_CONSTEXPR ClassicThemeRecordArchive::ClassicThemeRecordArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.masters_)*/{}
  , /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stylesheetrecord_)*/nullptr} {}
struct ClassicThemeRecordArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClassicThemeRecordArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClassicThemeRecordArchiveDefaultTypeInternal() {}
  union {
    ClassicThemeRecordArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClassicThemeRecordArchiveDefaultTypeInternal _ClassicThemeRecordArchive_default_instance_;
PROTOBUF_CONSTEXPR SlideArchive_SageTagMapEntry::SlideArchive_SageTagMapEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.info_)*/nullptr} {}
struct SlideArchive_SageTagMapEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SlideArchive_SageTagMapEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SlideArchive_SageTagMapEntryDefaultTypeInternal() {}
  union {
    SlideArchive_SageTagMapEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SlideArchive_SageTagMapEntryDefaultTypeInternal _SlideArchive_SageTagMapEntry_default_instance_;
PROTOBUF_CONSTEXPR SlideArchive::SlideArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.builds_)*/{}
  , /*decltype(_impl_.buildchunks_)*/{}
  , /*decltype(_impl_.drawables_)*/{}
  , /*decltype(_impl_.staticguides_)*/{}
  , /*decltype(_impl_.sage_tag_to_info_map_)*/{}
  , /*decltype(_impl_.bodyparagraphstyles_)*/{}
  , /*decltype(_impl_.bodyliststyles_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnailtextfortitleplaceholder_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnailtextforbodyplaceholder_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.style_)*/nullptr
  , /*decltype(_impl_.transition_)*/nullptr
  , /*decltype(_impl_.titleplaceholder_)*/nullptr
  , /*decltype(_impl_.bodyplaceholder_)*/nullptr
  , /*decltype(_impl_.titleplaceholdergeometry_)*/nullptr
  , /*decltype(_impl_.bodyplaceholdergeometry_)*/nullptr
  , /*decltype(_impl_.master_)*/nullptr
  , /*decltype(_impl_.slidenumberplaceholder_)*/nullptr
  , /*decltype(_impl_.slidenumberplaceholdergeometry_)*/nullptr
  , /*decltype(_impl_.titlelayoutproperties_)*/nullptr
  , /*decltype(_impl_.bodylayoutproperties_)*/nullptr
  , /*decltype(_impl_.slidenumberlayoutproperties_)*/nullptr
  , /*decltype(_impl_.note_)*/nullptr
  , /*decltype(_impl_.classicstylesheetrecord_)*/nullptr
  , /*decltype(_impl_.objectplaceholder_)*/nullptr
  , /*decltype(_impl_.userdefinedguidestorage_)*/nullptr
  , /*decltype(_impl_.info_using_object_placeholder_geometry_)*/nullptr
  , /*decltype(_impl_.titleplaceholdershapestyleindex_)*/0u
  , /*decltype(_impl_.titleplaceholdertextstyleindex_)*/0u
  , /*decltype(_impl_.bodyplaceholdershapestyleindex_)*/0u
  , /*decltype(_impl_.bodyplaceholdertextstyleindex_)*/0u
  , /*decltype(_impl_.slidenumberplaceholdershapestyleindex_)*/0u
  , /*decltype(_impl_.slidenumberplaceholdertextstyleindex_)*/0u
  , /*decltype(_impl_.indocument_)*/false
  , /*decltype(_impl_.info_using_object_placeholder_geometry_matches_object_placeholder_geometry_)*/false
  , /*decltype(_impl_.deprecated_objectplaceholdervisibleforexport_)*/false} {}
struct SlideArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SlideArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SlideArchiveDefaultTypeInternal() {}
  union {
    SlideArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SlideArchiveDefaultTypeInternal _SlideArchive_default_instance_;
PROTOBUF_CONSTEXPR SlideNodeArchive::SlideNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.children_)*/{}
  , /*decltype(_impl_.database_thumbnails_)*/{}
  , /*decltype(_impl_.thumbnailsizes_)*/{}
  , /*decltype(_impl_.thumbnails_)*/{}
  , /*decltype(_impl_.uniqueidentifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.copyfromslideidentifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.slide_)*/nullptr
  , /*decltype(_impl_.database_thumbnail_)*/nullptr
  , /*decltype(_impl_.thumbnailsaredirty_)*/false
  , /*decltype(_impl_.ishidden_)*/false
  , /*decltype(_impl_.iscollapsed_)*/false
  , /*decltype(_impl_.iscollapsedinoutlineview_)*/false
  , /*decltype(_impl_.hasbodyinoutlineview_)*/false
  , /*decltype(_impl_.hasbuilds_)*/false
  , /*decltype(_impl_.hastransition_)*/false
  , /*decltype(_impl_.hasnote_)*/false
  , /*decltype(_impl_.slidespecifichyperlinkcount_)*/0u
  , /*decltype(_impl_.eventcount_)*/0u
  , /*decltype(_impl_.isslidenumbervisible_)*/false} {}
struct SlideNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SlideNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SlideNodeArchiveDefaultTypeInternal() {}
  union {
    SlideNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SlideNodeArchiveDefaultTypeInternal _SlideNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR DesktopUILayoutArchive::DesktopUILayoutArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sidebar_view_mode_)*/0
  , /*decltype(_impl_.sidebar_visible_)*/false
  , /*decltype(_impl_.notes_visible_)*/false
  , /*decltype(_impl_.light_table_visible_)*/false
  , /*decltype(_impl_.inspector_pane_view_mode_)*/0
  , /*decltype(_impl_.inspector_pane_visible_)*/true} {}
struct DesktopUILayoutArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DesktopUILayoutArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DesktopUILayoutArchiveDefaultTypeInternal() {}
  union {
    DesktopUILayoutArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DesktopUILayoutArchiveDefaultTypeInternal _DesktopUILayoutArchive_default_instance_;
PROTOBUF_CONSTEXPR UIStateArchive::UIStateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.selectedslidenodes_)*/{}
  , /*decltype(_impl_.chart_ui_state_)*/{}
  , /*decltype(_impl_.collapsed_slide_nodes_)*/{}
  , /*decltype(_impl_.slidenodetoedit_)*/nullptr
  , /*decltype(_impl_.deprecated_masterslidenodetoapply_)*/nullptr
  , /*decltype(_impl_.deprecated_slidethumbnailsize_)*/nullptr
  , /*decltype(_impl_.canvasoffset_)*/nullptr
  , /*decltype(_impl_.iphonecanvasoffset_)*/nullptr
  , /*decltype(_impl_.iphone568canvasoffset_)*/nullptr
  , /*decltype(_impl_.desktop_ui_layout_)*/nullptr
  , /*decltype(_impl_.desktop_canvas_offset_)*/nullptr
  , /*decltype(_impl_.desktop_main_content_size_)*/nullptr
  , /*decltype(_impl_.canvasviewscale_)*/0
  , /*decltype(_impl_.iphonecanvasviewscale_)*/0
  , /*decltype(_impl_.iphone568canvasviewscale_)*/0
  , /*decltype(_impl_.desktop_canvas_view_scale_)*/0
  , /*decltype(_impl_.light_table_zoom_scale_)*/0
  , /*decltype(_impl_.desktop_slide_view_content_fits_window_)*/false
  , /*decltype(_impl_.show_slide_guides_)*/false
  , /*decltype(_impl_.show_master_guides_)*/false
  , /*decltype(_impl_.shows_comments_)*/false
  , /*decltype(_impl_.shows_ruler_)*/false
  , /*decltype(_impl_.desktop_navigator_view_width_)*/0
  , /*decltype(_impl_.desktop_outline_view_width_)*/0} {}
struct UIStateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UIStateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UIStateArchiveDefaultTypeInternal() {}
  union {
    UIStateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UIStateArchiveDefaultTypeInternal _UIStateArchive_default_instance_;
PROTOBUF_CONSTEXPR CanvasSelectionArchive::CanvasSelectionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.infos_)*/{}
  , /*decltype(_impl_.database_action_ghost_indexes_)*/{}
  , /*decltype(_impl_.action_ghost_indexes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CanvasSelectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CanvasSelectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CanvasSelectionArchiveDefaultTypeInternal() {}
  union {
    CanvasSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CanvasSelectionArchiveDefaultTypeInternal _CanvasSelectionArchive_default_instance_;
PROTOBUF_CONSTEXPR ThemeArchive::ThemeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.masters_)*/{}
  , /*decltype(_impl_.classicthemerecords_)*/{}
  , /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.defaultmasterslidenode_)*/nullptr} {}
struct ThemeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThemeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThemeArchiveDefaultTypeInternal() {}
  union {
    ThemeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThemeArchiveDefaultTypeInternal _ThemeArchive_default_instance_;
PROTOBUF_CONSTEXPR SlideTreeArchive::SlideTreeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rootslidenode_)*/nullptr} {}
struct SlideTreeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SlideTreeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SlideTreeArchiveDefaultTypeInternal() {}
  union {
    SlideTreeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SlideTreeArchiveDefaultTypeInternal _SlideTreeArchive_default_instance_;
PROTOBUF_CONSTEXPR ShowArchive::ShowArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uistate_)*/nullptr
  , /*decltype(_impl_.theme_)*/nullptr
  , /*decltype(_impl_.slidetree_)*/nullptr
  , /*decltype(_impl_.size_)*/nullptr
  , /*decltype(_impl_.stylesheet_)*/nullptr
  , /*decltype(_impl_.recording_)*/nullptr
  , /*decltype(_impl_.soundtrack_)*/nullptr
  , /*decltype(_impl_.mode_)*/0
  , /*decltype(_impl_.slidenumbersvisible_)*/false
  , /*decltype(_impl_.loop_presentation_)*/false
  , /*decltype(_impl_.idle_timer_active_)*/false
  , /*decltype(_impl_.automatically_plays_upon_open_)*/false
  , /*decltype(_impl_.autoplay_transition_delay_)*/5
  , /*decltype(_impl_.autoplay_build_delay_)*/2
  , /*decltype(_impl_.idle_timer_delay_)*/900} {}
struct ShowArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShowArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShowArchiveDefaultTypeInternal() {}
  union {
    ShowArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShowArchiveDefaultTypeInternal _ShowArchive_default_instance_;
PROTOBUF_CONSTEXPR DocumentArchive::DocumentArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.show_)*/nullptr
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.tables_custom_format_list_)*/nullptr} {}
struct DocumentArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocumentArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocumentArchiveDefaultTypeInternal() {}
  union {
    DocumentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocumentArchiveDefaultTypeInternal _DocumentArchive_default_instance_;
PROTOBUF_CONSTEXPR SlideStylePropertiesArchive::SlideStylePropertiesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fill_)*/nullptr
  , /*decltype(_impl_.transition_)*/nullptr
  , /*decltype(_impl_.transition_null_)*/false
  , /*decltype(_impl_.titleplaceholdervisibility_)*/false
  , /*decltype(_impl_.bodyplaceholdervisibility_)*/false
  , /*decltype(_impl_.objectplaceholdervisibility_)*/false
  , /*decltype(_impl_.slidenumberplaceholdervisibility_)*/false} {}
struct SlideStylePropertiesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SlideStylePropertiesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SlideStylePropertiesArchiveDefaultTypeInternal() {}
  union {
    SlideStylePropertiesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SlideStylePropertiesArchiveDefaultTypeInternal _SlideStylePropertiesArchive_default_instance_;
PROTOBUF_CONSTEXPR SlideStyleArchive::SlideStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slide_properties_)*/nullptr
  , /*decltype(_impl_.override_count_)*/0u} {}
struct SlideStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SlideStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SlideStyleArchiveDefaultTypeInternal() {}
  union {
    SlideStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SlideStyleArchiveDefaultTypeInternal _SlideStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR PasteboardNativeStorageArchive::PasteboardNativeStorageArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.drawables_)*/{}
  , /*decltype(_impl_.builds_)*/{}
  , /*decltype(_impl_.buildchunks_)*/{}
  , /*decltype(_impl_.slidenodes_)*/{}
  , /*decltype(_impl_.titleranges_)*/{}
  , /*decltype(_impl_.originalshowsize_)*/nullptr} {}
struct PasteboardNativeStorageArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PasteboardNativeStorageArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PasteboardNativeStorageArchiveDefaultTypeInternal() {}
  union {
    PasteboardNativeStorageArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PasteboardNativeStorageArchiveDefaultTypeInternal _PasteboardNativeStorageArchive_default_instance_;
PROTOBUF_CONSTEXPR MasterChangeBlobArchive::MasterChangeBlobArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.drawables_)*/{}
  , /*decltype(_impl_.slide_)*/nullptr
  , /*decltype(_impl_.master_)*/nullptr
  , /*decltype(_impl_.slide_style_)*/nullptr
  , /*decltype(_impl_.title_placeholder_)*/nullptr
  , /*decltype(_impl_.body_placeholder_)*/nullptr
  , /*decltype(_impl_.object_placeholder_)*/nullptr} {}
struct MasterChangeBlobArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MasterChangeBlobArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MasterChangeBlobArchiveDefaultTypeInternal() {}
  union {
    MasterChangeBlobArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MasterChangeBlobArchiveDefaultTypeInternal _MasterChangeBlobArchive_default_instance_;
PROTOBUF_CONSTEXPR RecordingArchive::RecordingArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.event_tracks_)*/{}
  , /*decltype(_impl_.movie_track_)*/nullptr
  , /*decltype(_impl_.modification_date_)*/nullptr
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_.sync_state_)*/0} {}
struct RecordingArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordingArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordingArchiveDefaultTypeInternal() {}
  union {
    RecordingArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordingArchiveDefaultTypeInternal _RecordingArchive_default_instance_;
PROTOBUF_CONSTEXPR RecordingEventTrackArchive::RecordingEventTrackArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct RecordingEventTrackArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordingEventTrackArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordingEventTrackArchiveDefaultTypeInternal() {}
  union {
    RecordingEventTrackArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordingEventTrackArchiveDefaultTypeInternal _RecordingEventTrackArchive_default_instance_;
PROTOBUF_CONSTEXPR RecordingEventArchive::RecordingEventArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.navigation_event_archive_)*/nullptr
  , /*decltype(_impl_.laser_event_archive_)*/nullptr
  , /*decltype(_impl_.pause_event_archive_)*/nullptr
  , /*decltype(_impl_.movie_event_archive_)*/nullptr
  , /*decltype(_impl_.start_time_)*/-1} {}
struct RecordingEventArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordingEventArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordingEventArchiveDefaultTypeInternal() {}
  union {
    RecordingEventArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordingEventArchiveDefaultTypeInternal _RecordingEventArchive_default_instance_;
PROTOBUF_CONSTEXPR RecordingNavigationEventArchive::RecordingNavigationEventArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.target_slide_node_reference_)*/nullptr
  , /*decltype(_impl_.target_event_index_)*/0u
  , /*decltype(_impl_.animation_phase_)*/0} {}
struct RecordingNavigationEventArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordingNavigationEventArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordingNavigationEventArchiveDefaultTypeInternal() {}
  union {
    RecordingNavigationEventArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordingNavigationEventArchiveDefaultTypeInternal _RecordingNavigationEventArchive_default_instance_;
PROTOBUF_CONSTEXPR RecordingLaserEventArchive::RecordingLaserEventArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unscaled_location_)*/nullptr} {}
struct RecordingLaserEventArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordingLaserEventArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordingLaserEventArchiveDefaultTypeInternal() {}
  union {
    RecordingLaserEventArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordingLaserEventArchiveDefaultTypeInternal _RecordingLaserEventArchive_default_instance_;
PROTOBUF_CONSTEXPR RecordingPauseEventArchive::RecordingPauseEventArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pause_event_type_)*/0} {}
struct RecordingPauseEventArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordingPauseEventArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordingPauseEventArchiveDefaultTypeInternal() {}
  union {
    RecordingPauseEventArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordingPauseEventArchiveDefaultTypeInternal _RecordingPauseEventArchive_default_instance_;
PROTOBUF_CONSTEXPR RecordingMovieEventArchive::RecordingMovieEventArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.movie_info_reference_)*/nullptr
  , /*decltype(_impl_.movie_event_value_)*/0
  , /*decltype(_impl_.movie_event_type_)*/1} {}
struct RecordingMovieEventArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordingMovieEventArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordingMovieEventArchiveDefaultTypeInternal() {}
  union {
    RecordingMovieEventArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordingMovieEventArchiveDefaultTypeInternal _RecordingMovieEventArchive_default_instance_;
PROTOBUF_CONSTEXPR RecordingMovieTrackArchive::RecordingMovieTrackArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.movie_segments_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RecordingMovieTrackArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordingMovieTrackArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordingMovieTrackArchiveDefaultTypeInternal() {}
  union {
    RecordingMovieTrackArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordingMovieTrackArchiveDefaultTypeInternal _RecordingMovieTrackArchive_default_instance_;
PROTOBUF_CONSTEXPR MovieSegmentArchive::MovieSegmentArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.database_movie_data_)*/nullptr
  , /*decltype(_impl_.movie_data_)*/nullptr
  , /*decltype(_impl_.start_time_)*/-1} {}
struct MovieSegmentArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MovieSegmentArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MovieSegmentArchiveDefaultTypeInternal() {}
  union {
    MovieSegmentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MovieSegmentArchiveDefaultTypeInternal _MovieSegmentArchive_default_instance_;
PROTOBUF_CONSTEXPR Soundtrack::Soundtrack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.movie_media_)*/{}
  , /*decltype(_impl_.volume_)*/0
  , /*decltype(_impl_.mode_)*/0} {}
struct SoundtrackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SoundtrackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SoundtrackDefaultTypeInternal() {}
  union {
    Soundtrack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SoundtrackDefaultTypeInternal _Soundtrack_default_instance_;
PROTOBUF_CONSTEXPR SlideNumberAttachmentArchive::SlideNumberAttachmentArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct SlideNumberAttachmentArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SlideNumberAttachmentArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SlideNumberAttachmentArchiveDefaultTypeInternal() {}
  union {
    SlideNumberAttachmentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SlideNumberAttachmentArchiveDefaultTypeInternal _SlideNumberAttachmentArchive_default_instance_;
PROTOBUF_CONSTEXPR SlideCollectionSelectionArchive_OutlineSelection::SlideCollectionSelectionArchive_OutlineSelection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.slide_node_)*/nullptr
  , /*decltype(_impl_.selected_paragraph_indexes_)*/nullptr} {}
struct SlideCollectionSelectionArchive_OutlineSelectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SlideCollectionSelectionArchive_OutlineSelectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SlideCollectionSelectionArchive_OutlineSelectionDefaultTypeInternal() {}
  union {
    SlideCollectionSelectionArchive_OutlineSelection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SlideCollectionSelectionArchive_OutlineSelectionDefaultTypeInternal _SlideCollectionSelectionArchive_OutlineSelection_default_instance_;
PROTOBUF_CONSTEXPR SlideCollectionSelectionArchive::SlideCollectionSelectionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.slide_nodes_)*/{}
  , /*decltype(_impl_.selected_paragraph_indexes_for_slide_nodes_)*/{}
  , /*decltype(_impl_.slide_node_to_edit_)*/nullptr
  , /*decltype(_impl_.range_in_selected_paragraph_)*/nullptr} {}
struct SlideCollectionSelectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SlideCollectionSelectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SlideCollectionSelectionArchiveDefaultTypeInternal() {}
  union {
    SlideCollectionSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SlideCollectionSelectionArchiveDefaultTypeInternal _SlideCollectionSelectionArchive_default_instance_;
}  // namespace KN
static ::_pb::Metadata file_level_metadata_KNArchives_2eproto[37];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_KNArchives_2eproto[17];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_KNArchives_2eproto = nullptr;

const uint32_t TableStruct_KNArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, _impl_.animationtype_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, _impl_.effect_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, _impl_.delay_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, _impl_.isautomatic_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, _impl_.color_),
  0,
  1,
  3,
  5,
  4,
  6,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.animationattributes_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.isautomatic_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.custom_twist_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.custom_mosaic_size_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.custom_mosaic_type_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.custom_bounce_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.custom_magic_move_fade_unmatched_objects_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.custom_timing_curve_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.custom_text_delivery_type_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.database_animationtype_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.database_effect_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.database_duration_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.database_direction_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.database_delay_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.database_color_),
  3,
  9,
  7,
  8,
  12,
  10,
  11,
  13,
  14,
  0,
  1,
  4,
  5,
  6,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::TransitionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::TransitionArchive, _impl_.attributes_),
  0,
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkArchive, _impl_.build_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkArchive, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkArchive, _impl_.delay_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkArchive, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkArchive, _impl_.automatic_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkArchive, _impl_.referent_),
  0,
  3,
  1,
  2,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.animationattributes_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.eventtrigger_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.delayautomaticafter_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.delayautomaticwith_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.curvestyle_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.chartrotation3d_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.startoffset_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.endoffset_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.action_rotationangle_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.action_rotationdirection_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.action_scalesize_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.action_coloralpha_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.action_acceleration_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.action_motionpathsource_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.custom_bounce_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.custom_textdelivery_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.custom_deliveryoption_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.custom_action_decay_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.custom_action_repeatcount_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.custom_action_scale_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.custom_action_jiggleintensity_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.database_animationtype_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.database_effect_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.database_direction_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.database_delay_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.database_duration_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.database_color_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.motionpathstring_),
  4,
  7,
  9,
  10,
  16,
  17,
  25,
  26,
  12,
  27,
  13,
  14,
  15,
  5,
  20,
  18,
  19,
  21,
  22,
  23,
  24,
  0,
  1,
  6,
  8,
  11,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::BuildArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::BuildArchive, _impl_.drawable_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildArchive, _impl_.delivery_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildArchive, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildArchive, _impl_.attributes_),
  1,
  0,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::PlaceholderArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::PlaceholderArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::PlaceholderArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::PlaceholderArchive, _impl_.kind_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::NoteArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::NoteArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::NoteArchive, _impl_.containedstorage_),
  0,
  PROTOBUF_FIELD_OFFSET(::KN::ClassicStylesheetRecordArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::ClassicStylesheetRecordArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::ClassicStylesheetRecordArchive, _impl_.identifier_to_style_map_),
  PROTOBUF_FIELD_OFFSET(::KN::ClassicStylesheetRecordArchive, _impl_.theme_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::KN::ClassicThemeRecordArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::ClassicThemeRecordArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::ClassicThemeRecordArchive, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::KN::ClassicThemeRecordArchive, _impl_.stylesheetrecord_),
  PROTOBUF_FIELD_OFFSET(::KN::ClassicThemeRecordArchive, _impl_.masters_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive_SageTagMapEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive_SageTagMapEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive_SageTagMapEntry, _impl_.tag_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive_SageTagMapEntry, _impl_.info_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.style_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.builds_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.buildchunks_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.transition_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.titleplaceholder_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.bodyplaceholder_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.objectplaceholder_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.slidenumberplaceholder_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.drawables_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.sage_tag_to_info_map_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.titleplaceholdergeometry_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.titleplaceholdershapestyleindex_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.titleplaceholdertextstyleindex_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.titlelayoutproperties_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.bodyplaceholdergeometry_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.bodyplaceholdershapestyleindex_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.bodyplaceholdertextstyleindex_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.bodylayoutproperties_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.slidenumberplaceholdergeometry_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.slidenumberplaceholdershapestyleindex_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.slidenumberplaceholdertextstyleindex_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.slidenumberlayoutproperties_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.classicstylesheetrecord_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.bodyparagraphstyles_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.bodyliststyles_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.thumbnailtextfortitleplaceholder_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.thumbnailtextforbodyplaceholder_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.master_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.staticguides_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.userdefinedguidestorage_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.indocument_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.note_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.info_using_object_placeholder_geometry_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.info_using_object_placeholder_geometry_matches_object_placeholder_geometry_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.deprecated_objectplaceholdervisibleforexport_),
  3,
  ~0u,
  ~0u,
  4,
  5,
  6,
  17,
  10,
  ~0u,
  ~0u,
  0,
  7,
  20,
  21,
  12,
  8,
  22,
  23,
  13,
  11,
  24,
  25,
  14,
  16,
  ~0u,
  ~0u,
  1,
  2,
  9,
  ~0u,
  18,
  26,
  15,
  19,
  27,
  28,
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.children_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.slide_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.thumbnails_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.thumbnailsizes_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.thumbnailsaredirty_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.ishidden_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.iscollapsed_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.iscollapsedinoutlineview_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.hasbodyinoutlineview_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.hasbuilds_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.hastransition_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.hasnote_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.isslidenumbervisible_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.uniqueidentifier_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.copyfromslideidentifier_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.slidespecifichyperlinkcount_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.eventcount_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.database_thumbnail_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.database_thumbnails_),
  ~0u,
  2,
  ~0u,
  ~0u,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  14,
  0,
  1,
  12,
  13,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, _impl_.sidebar_visible_),
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, _impl_.sidebar_view_mode_),
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, _impl_.notes_visible_),
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, _impl_.light_table_visible_),
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, _impl_.inspector_pane_visible_),
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, _impl_.inspector_pane_view_mode_),
  1,
  0,
  2,
  3,
  5,
  4,
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.slidenodetoedit_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.deprecated_masterslidenodetoapply_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.deprecated_slidethumbnailsize_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.canvasviewscale_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.canvasoffset_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.selectedslidenodes_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.iphonecanvasviewscale_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.iphonecanvasoffset_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.iphone568canvasviewscale_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.iphone568canvasoffset_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.desktop_ui_layout_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.desktop_slide_view_content_fits_window_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.desktop_canvas_view_scale_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.desktop_canvas_offset_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.light_table_zoom_scale_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.chart_ui_state_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.show_slide_guides_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.show_master_guides_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.shows_comments_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.collapsed_slide_nodes_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.shows_ruler_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.desktop_navigator_view_width_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.desktop_outline_view_width_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.desktop_main_content_size_),
  0,
  1,
  2,
  9,
  3,
  ~0u,
  10,
  4,
  11,
  5,
  6,
  14,
  12,
  7,
  13,
  ~0u,
  15,
  16,
  17,
  ~0u,
  18,
  19,
  20,
  8,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KN::CanvasSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CanvasSelectionArchive, _impl_.infos_),
  PROTOBUF_FIELD_OFFSET(::KN::CanvasSelectionArchive, _impl_.action_ghost_indexes_),
  PROTOBUF_FIELD_OFFSET(::KN::CanvasSelectionArchive, _impl_.database_action_ghost_indexes_),
  PROTOBUF_FIELD_OFFSET(::KN::ThemeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::ThemeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::ThemeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::ThemeArchive, _impl_.masters_),
  PROTOBUF_FIELD_OFFSET(::KN::ThemeArchive, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::KN::ThemeArchive, _impl_.classicthemerecords_),
  PROTOBUF_FIELD_OFFSET(::KN::ThemeArchive, _impl_.defaultmasterslidenode_),
  1,
  ~0u,
  0,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::SlideTreeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideTreeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::SlideTreeArchive, _impl_.rootslidenode_),
  0,
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.uistate_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.theme_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.slidetree_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.stylesheet_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.slidenumbersvisible_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.recording_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.loop_presentation_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.autoplay_transition_delay_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.autoplay_build_delay_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.idle_timer_active_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.idle_timer_delay_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.soundtrack_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.automatically_plays_upon_open_),
  0,
  1,
  2,
  3,
  4,
  8,
  5,
  9,
  7,
  12,
  13,
  10,
  14,
  6,
  11,
  PROTOBUF_FIELD_OFFSET(::KN::DocumentArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::DocumentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::DocumentArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::DocumentArchive, _impl_.show_),
  PROTOBUF_FIELD_OFFSET(::KN::DocumentArchive, _impl_.tables_custom_format_list_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::SlideStylePropertiesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideStylePropertiesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::SlideStylePropertiesArchive, _impl_.fill_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideStylePropertiesArchive, _impl_.transition_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideStylePropertiesArchive, _impl_.transition_null_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideStylePropertiesArchive, _impl_.titleplaceholdervisibility_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideStylePropertiesArchive, _impl_.bodyplaceholdervisibility_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideStylePropertiesArchive, _impl_.objectplaceholdervisibility_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideStylePropertiesArchive, _impl_.slidenumberplaceholdervisibility_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::KN::SlideStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::SlideStyleArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideStyleArchive, _impl_.override_count_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideStyleArchive, _impl_.slide_properties_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, _impl_.drawables_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, _impl_.builds_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, _impl_.buildchunks_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, _impl_.slidenodes_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, _impl_.originalshowsize_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, _impl_.titleranges_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::MasterChangeBlobArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::MasterChangeBlobArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::MasterChangeBlobArchive, _impl_.slide_),
  PROTOBUF_FIELD_OFFSET(::KN::MasterChangeBlobArchive, _impl_.master_),
  PROTOBUF_FIELD_OFFSET(::KN::MasterChangeBlobArchive, _impl_.slide_style_),
  PROTOBUF_FIELD_OFFSET(::KN::MasterChangeBlobArchive, _impl_.title_placeholder_),
  PROTOBUF_FIELD_OFFSET(::KN::MasterChangeBlobArchive, _impl_.body_placeholder_),
  PROTOBUF_FIELD_OFFSET(::KN::MasterChangeBlobArchive, _impl_.object_placeholder_),
  PROTOBUF_FIELD_OFFSET(::KN::MasterChangeBlobArchive, _impl_.drawables_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::RecordingArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::RecordingArchive, _impl_.event_tracks_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingArchive, _impl_.movie_track_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingArchive, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingArchive, _impl_.sync_state_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingArchive, _impl_.modification_date_),
  ~0u,
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventTrackArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventTrackArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventTrackArchive, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventTrackArchive, _impl_.events_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventArchive, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventArchive, _impl_.navigation_event_archive_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventArchive, _impl_.laser_event_archive_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventArchive, _impl_.pause_event_archive_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventArchive, _impl_.movie_event_archive_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::RecordingNavigationEventArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingNavigationEventArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::RecordingNavigationEventArchive, _impl_.target_slide_node_reference_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingNavigationEventArchive, _impl_.target_event_index_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingNavigationEventArchive, _impl_.animation_phase_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::RecordingLaserEventArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingLaserEventArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::RecordingLaserEventArchive, _impl_.unscaled_location_),
  0,
  PROTOBUF_FIELD_OFFSET(::KN::RecordingPauseEventArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingPauseEventArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::RecordingPauseEventArchive, _impl_.pause_event_type_),
  0,
  PROTOBUF_FIELD_OFFSET(::KN::RecordingMovieEventArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingMovieEventArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::RecordingMovieEventArchive, _impl_.movie_info_reference_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingMovieEventArchive, _impl_.movie_event_type_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingMovieEventArchive, _impl_.movie_event_value_),
  0,
  2,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KN::RecordingMovieTrackArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::RecordingMovieTrackArchive, _impl_.movie_segments_),
  PROTOBUF_FIELD_OFFSET(::KN::MovieSegmentArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::MovieSegmentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::MovieSegmentArchive, _impl_.movie_data_),
  PROTOBUF_FIELD_OFFSET(::KN::MovieSegmentArchive, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::KN::MovieSegmentArchive, _impl_.database_movie_data_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::KN::Soundtrack, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::Soundtrack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::Soundtrack, _impl_.volume_),
  PROTOBUF_FIELD_OFFSET(::KN::Soundtrack, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::KN::Soundtrack, _impl_.movie_media_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::SlideNumberAttachmentArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNumberAttachmentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::SlideNumberAttachmentArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionArchive_OutlineSelection, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionArchive_OutlineSelection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionArchive_OutlineSelection, _impl_.slide_node_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionArchive_OutlineSelection, _impl_.selected_paragraph_indexes_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionArchive, _impl_.slide_nodes_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionArchive, _impl_.slide_node_to_edit_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionArchive, _impl_.selected_paragraph_indexes_for_slide_nodes_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionArchive, _impl_.range_in_selected_paragraph_),
  ~0u,
  0,
  ~0u,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, -1, sizeof(::KN::AnimationAttributesArchive)},
  { 20, 41, -1, sizeof(::KN::TransitionAttributesArchive)},
  { 56, 63, -1, sizeof(::KN::TransitionArchive)},
  { 64, 76, -1, sizeof(::KN::BuildChunkArchive)},
  { 82, 116, -1, sizeof(::KN::BuildAttributesArchive)},
  { 144, 154, -1, sizeof(::KN::BuildArchive)},
  { 158, 166, -1, sizeof(::KN::PlaceholderArchive)},
  { 168, 175, -1, sizeof(::KN::NoteArchive)},
  { 176, 184, -1, sizeof(::KN::ClassicStylesheetRecordArchive)},
  { 186, 195, -1, sizeof(::KN::ClassicThemeRecordArchive)},
  { 198, 206, -1, sizeof(::KN::SlideArchive_SageTagMapEntry)},
  { 208, 250, -1, sizeof(::KN::SlideArchive)},
  { 286, 311, -1, sizeof(::KN::SlideNodeArchive)},
  { 330, 342, -1, sizeof(::KN::DesktopUILayoutArchive)},
  { 348, 378, -1, sizeof(::KN::UIStateArchive)},
  { 402, -1, -1, sizeof(::KN::CanvasSelectionArchive)},
  { 411, 422, -1, sizeof(::KN::ThemeArchive)},
  { 427, 434, -1, sizeof(::KN::SlideTreeArchive)},
  { 435, 456, -1, sizeof(::KN::ShowArchive)},
  { 471, 480, -1, sizeof(::KN::DocumentArchive)},
  { 483, 496, -1, sizeof(::KN::SlideStylePropertiesArchive)},
  { 503, 512, -1, sizeof(::KN::SlideStyleArchive)},
  { 515, 527, -1, sizeof(::KN::PasteboardNativeStorageArchive)},
  { 533, 546, -1, sizeof(::KN::MasterChangeBlobArchive)},
  { 553, 564, -1, sizeof(::KN::RecordingArchive)},
  { 569, 577, -1, sizeof(::KN::RecordingEventTrackArchive)},
  { 579, 590, -1, sizeof(::KN::RecordingEventArchive)},
  { 595, 604, -1, sizeof(::KN::RecordingNavigationEventArchive)},
  { 607, 614, -1, sizeof(::KN::RecordingLaserEventArchive)},
  { 615, 622, -1, sizeof(::KN::RecordingPauseEventArchive)},
  { 623, 632, -1, sizeof(::KN::RecordingMovieEventArchive)},
  { 635, -1, -1, sizeof(::KN::RecordingMovieTrackArchive)},
  { 642, 651, -1, sizeof(::KN::MovieSegmentArchive)},
  { 654, 663, -1, sizeof(::KN::Soundtrack)},
  { 666, 673, -1, sizeof(::KN::SlideNumberAttachmentArchive)},
  { 674, 682, -1, sizeof(::KN::SlideCollectionSelectionArchive_OutlineSelection)},
  { 684, 694, -1, sizeof(::KN::SlideCollectionSelectionArchive)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::KN::_AnimationAttributesArchive_default_instance_._instance,
  &::KN::_TransitionAttributesArchive_default_instance_._instance,
  &::KN::_TransitionArchive_default_instance_._instance,
  &::KN::_BuildChunkArchive_default_instance_._instance,
  &::KN::_BuildAttributesArchive_default_instance_._instance,
  &::KN::_BuildArchive_default_instance_._instance,
  &::KN::_PlaceholderArchive_default_instance_._instance,
  &::KN::_NoteArchive_default_instance_._instance,
  &::KN::_ClassicStylesheetRecordArchive_default_instance_._instance,
  &::KN::_ClassicThemeRecordArchive_default_instance_._instance,
  &::KN::_SlideArchive_SageTagMapEntry_default_instance_._instance,
  &::KN::_SlideArchive_default_instance_._instance,
  &::KN::_SlideNodeArchive_default_instance_._instance,
  &::KN::_DesktopUILayoutArchive_default_instance_._instance,
  &::KN::_UIStateArchive_default_instance_._instance,
  &::KN::_CanvasSelectionArchive_default_instance_._instance,
  &::KN::_ThemeArchive_default_instance_._instance,
  &::KN::_SlideTreeArchive_default_instance_._instance,
  &::KN::_ShowArchive_default_instance_._instance,
  &::KN::_DocumentArchive_default_instance_._instance,
  &::KN::_SlideStylePropertiesArchive_default_instance_._instance,
  &::KN::_SlideStyleArchive_default_instance_._instance,
  &::KN::_PasteboardNativeStorageArchive_default_instance_._instance,
  &::KN::_MasterChangeBlobArchive_default_instance_._instance,
  &::KN::_RecordingArchive_default_instance_._instance,
  &::KN::_RecordingEventTrackArchive_default_instance_._instance,
  &::KN::_RecordingEventArchive_default_instance_._instance,
  &::KN::_RecordingNavigationEventArchive_default_instance_._instance,
  &::KN::_RecordingLaserEventArchive_default_instance_._instance,
  &::KN::_RecordingPauseEventArchive_default_instance_._instance,
  &::KN::_RecordingMovieEventArchive_default_instance_._instance,
  &::KN::_RecordingMovieTrackArchive_default_instance_._instance,
  &::KN::_MovieSegmentArchive_default_instance_._instance,
  &::KN::_Soundtrack_default_instance_._instance,
  &::KN::_SlideNumberAttachmentArchive_default_instance_._instance,
  &::KN::_SlideCollectionSelectionArchive_OutlineSelection_default_instance_._instance,
  &::KN::_SlideCollectionSelectionArchive_default_instance_._instance,
};

const char descriptor_table_protodef_KNArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020KNArchives.proto\022\002KN\032\021TSPMessages.prot"
  "o\032\021TSKArchives.proto\032\021TSSArchives.proto\032"
  "\021TSDArchives.proto\032\022TSWPArchives.proto\032\021"
  "TSAArchives.proto\032\022TSCHArchives.proto\"\247\001"
  "\n\032AnimationAttributesArchive\022\025\n\ranimatio"
  "nType\030\001 \001(\t\022\016\n\006effect\030\002 \001(\t\022\020\n\010duration\030"
  "\003 \001(\001\022\021\n\tdirection\030\004 \001(\r\022\r\n\005delay\030\005 \001(\001\022"
  "\023\n\013isAutomatic\030\006 \001(\010\022\031\n\005color\030\007 \001(\0132\n.TS"
  "P.Color\"\241\t\n\033TransitionAttributesArchive\022"
  ";\n\023animationAttributes\030\010 \001(\0132\036.KN.Animat"
  "ionAttributesArchive\022\023\n\013isAutomatic\030\006 \001("
  "\010\022\024\n\014custom_twist\030\t \001(\002\022\032\n\022custom_mosaic"
  "_size\030\n \001(\r\022\032\n\022custom_mosaic_type\030\013 \001(\r\022"
  "\025\n\rcustom_bounce\030\014 \001(\010\0220\n(custom_magic_m"
  "ove_fade_unmatched_objects\030\r \001(\010\022f\n\023cust"
  "om_timing_curve\030\017 \001(\0162I.KN.TransitionAtt"
  "ributesArchive.TransitionCustomAttribute"
  "sTimingCurveType\022m\n\031custom_text_delivery"
  "_type\030\020 \001(\0162J.KN.TransitionAttributesArc"
  "hive.TransitionCustomAttributesTextDeliv"
  "eryType\022\036\n\026database_animationType\030\001 \001(\t\022"
  "\027\n\017database_effect\030\002 \001(\t\022\031\n\021database_dur"
  "ation\030\003 \001(\001\022\032\n\022database_direction\030\004 \001(\r\022"
  "\026\n\016database_delay\030\005 \001(\002\022\"\n\016database_colo"
  "r\030\007 \001(\0132\n.TSP.Color\"\207\002\n)TransitionCustom"
  "AttributesTimingCurveType\0223\n/TransitionC"
  "ustomAttributesTimingCurveTypeLinear\020\001\0223"
  "\n/TransitionCustomAttributesTimingCurveT"
  "ypeEaseIn\020\002\0224\n0TransitionCustomAttribute"
  "sTimingCurveTypeEaseOut\020\003\022:\n6TransitionC"
  "ustomAttributesTimingCurveTypeEaseInEase"
  "Out\020\004\"\213\002\n*TransitionCustomAttributesText"
  "DeliveryType\0226\n2TransitionCustomAttribut"
  "esTextDeliveryTypeByObject\020\001\0224\n0Transiti"
  "onCustomAttributesTextDeliveryTypeByWord"
  "\020\002\0229\n5TransitionCustomAttributesTextDeli"
  "veryTypeByCharacter\020\003\0224\n0TransitionCusto"
  "mAttributesTextDeliveryTypeByLine\020\004\"H\n\021T"
  "ransitionArchive\0223\n\nattributes\030\002 \002(\0132\037.K"
  "N.TransitionAttributesArchive\"\207\001\n\021BuildC"
  "hunkArchive\022\035\n\005build\030\001 \002(\0132\016.TSP.Referen"
  "ce\022\r\n\005index\030\002 \002(\r\022\r\n\005delay\030\003 \001(\001\022\020\n\010dura"
  "tion\030\004 \001(\001\022\021\n\tautomatic\030\005 \001(\010\022\020\n\010referen"
  "t\030\006 \001(\010\"\215\017\n\026BuildAttributesArchive\022;\n\023an"
  "imationAttributes\030\022 \001(\0132\036.KN.AnimationAt"
  "tributesArchive\022\024\n\014eventTrigger\030\004 \001(\r\022\033\n"
  "\023delayAutomaticAfter\030\006 \001(\001\022\032\n\022delayAutom"
  "aticWith\030\007 \001(\001\022H\n\ncurveStyle\030\016 \001(\01624.KN."
  "BuildAttributesArchive.BuildAttributesCu"
  "rveStyle\022\027\n\017ChartRotation3D\030\021 \001(\001\022\023\n\013sta"
  "rtOffset\030\033 \001(\r\022\021\n\tendOffset\030\034 \001(\r\022\034\n\024act"
  "ion_rotationAngle\030\t \001(\001\022]\n\030action_rotati"
  "onDirection\030\n \001(\0162;.KN.BuildAttributesAr"
  "chive.BuildAttributesRotationDirection\022\030"
  "\n\020action_scaleSize\030\013 \001(\001\022\031\n\021action_color"
  "Alpha\030\014 \001(\001\022S\n\023action_acceleration\030\r \001(\016"
  "26.KN.BuildAttributesArchive.BuildAttrib"
  "utesAcceleration\0227\n\027action_motionPathSou"
  "rce\030\026 \001(\0132\026.TSD.PathSourceArchive\022\025\n\rcus"
  "tom_bounce\030\023 \001(\010\022S\n\023custom_textDelivery\030"
  "\024 \001(\01626.KN.BuildAttributesArchive.BuildA"
  "ttributesTextDelivery\022W\n\025custom_delivery"
  "Option\030\025 \001(\01628.KN.BuildAttributesArchive"
  ".BuildAttributesDeliveryOption\022\033\n\023custom"
  "_action_decay\030\027 \001(\010\022!\n\031custom_action_rep"
  "eatCount\030\030 \001(\r\022\033\n\023custom_action_scale\030\031 "
  "\001(\001\022f\n\035custom_action_jiggleIntensity\030\032 \001"
  "(\0162\?.KN.BuildAttributesArchive.ActionBui"
  "ldAttributesJiggleIntensity\022\036\n\026database_"
  "animationType\030\001 \001(\t\022\027\n\017database_effect\030\002"
  " \001(\t\022\032\n\022database_direction\030\003 \001(\r\022\026\n\016data"
  "base_delay\030\005 \001(\001\022\031\n\021database_duration\030\010 "
  "\001(\001\022\"\n\016database_color\030\020 \001(\0132\n.TSP.Color\022"
  "\034\n\020motionPathString\030\017 \001(\tB\002\030\001\"R\n\033BuildAt"
  "tributesAcceleration\022\t\n\005kNone\020\000\022\013\n\007kEase"
  "In\020\001\022\014\n\010kEaseOut\020\002\022\r\n\tkEaseBoth\020\003\"I\n Bui"
  "ldAttributesRotationDirection\022\016\n\nkClockw"
  "ise\020\037\022\025\n\021kCounterclockwise\020 \"7\n\031BuildAtt"
  "ributesCurveStyle\022\r\n\tkStraight\020\000\022\013\n\007kCur"
  "ved\020\001\"\244\001\n\033BuildAttributesTextDelivery\022\032\n"
  "\026kTextDeliveryUndefined\020\000\022\031\n\025kTextDelive"
  "ryByObject\020\001\022\027\n\023kTextDeliveryByWord\020\002\022\034\n"
  "\030kTextDeliveryByCharacter\020\003\022\027\n\023kTextDeli"
  "veryByLine\020\004\"\316\001\n\035BuildAttributesDelivery"
  "Option\022\034\n\030kDeliveryOptionUndefined\020\000\022\032\n\026"
  "kDeliveryOptionForward\020\001\022\033\n\027kDeliveryOpt"
  "ionBackward\020\002\022\035\n\031kDeliveryOptionFromCent"
  "er\020\003\022\034\n\030kDeliveryOptionFromEdges\020\004\022\031\n\025kD"
  "eliveryOptionRandom\020\005\"x\n$ActionBuildAttr"
  "ibutesJiggleIntensity\022\031\n\025kJiggleIntensit"
  "ySmall\020\000\022\032\n\026kJiggleIntensityMedium\020\001\022\031\n\025"
  "kJiggleIntensityLarge\020\002\"\204\001\n\014BuildArchive"
  "\022 \n\010drawable\030\001 \002(\0132\016.TSP.Reference\022\020\n\010de"
  "livery\030\002 \002(\t\022\020\n\010duration\030\003 \002(\001\022.\n\nattrib"
  "utes\030\004 \002(\0132\032.KN.BuildAttributesArchive\"\211"
  "\002\n\022PlaceholderArchive\022%\n\005super\030\001 \002(\0132\026.T"
  "SWP.ShapeInfoArchive\022;\n\004kind\030\002 \001(\0162\033.KN."
  "PlaceholderArchive.Kind:\020kKindPlaceholde"
  "r\"\216\001\n\004Kind\022\024\n\020kKindPlaceholder\020\000\022\037\n\033kKin"
  "dSlideNumberPlaceholder\020\001\022\031\n\025kKindTitleP"
  "laceholder\020\002\022\030\n\024kKindBodyPlaceholder\020\003\022\032"
  "\n\026kKindObjectPlaceholder\020\004\"7\n\013NoteArchiv"
  "e\022(\n\020containedStorage\030\001 \002(\0132\016.TSP.Refere"
  "nce\"\215\001\n\036ClassicStylesheetRecordArchive\022L"
  "\n\027identifier_to_style_map\030\001 \003(\0132+.TSS.St"
  "ylesheetArchive.IdentifiedStyleEntry\022\035\n\005"
  "theme\030\002 \001(\0132\016.TSP.Reference\"t\n\031ClassicTh"
  "emeRecordArchive\022\014\n\004uuid\030\001 \001(\t\022(\n\020styles"
  "heetRecord\030\002 \001(\0132\016.TSP.Reference\022\037\n\007mast"
  "ers\030\003 \003(\0132\016.TSP.Reference\"\305\r\n\014SlideArchi"
  "ve\022\035\n\005style\030\001 \002(\0132\016.TSP.Reference\022\036\n\006bui"
  "lds\030\002 \003(\0132\016.TSP.Reference\022*\n\013buildChunks"
  "\030\003 \003(\0132\025.KN.BuildChunkArchive\022)\n\ntransit"
  "ion\030\004 \002(\0132\025.KN.TransitionArchive\022(\n\020titl"
  "ePlaceholder\030\005 \001(\0132\016.TSP.Reference\022\'\n\017bo"
  "dyPlaceholder\030\006 \001(\0132\016.TSP.Reference\022)\n\021o"
  "bjectPlaceholder\030\036 \001(\0132\016.TSP.Reference\022."
  "\n\026slideNumberPlaceholder\030\024 \001(\0132\016.TSP.Ref"
  "erence\022!\n\tdrawables\030\007 \003(\0132\016.TSP.Referenc"
  "e\022>\n\024sage_tag_to_info_map\030\034 \003(\0132 .KN.Sli"
  "deArchive.SageTagMapEntry\022\014\n\004name\030\n \001(\t\022"
  "6\n\030titlePlaceholderGeometry\030\013 \001(\0132\024.TSD."
  "GeometryArchive\022\'\n\037titlePlaceholderShape"
  "StyleIndex\030\014 \001(\r\022&\n\036titlePlaceholderText"
  "StyleIndex\030\r \001(\r\022@\n\025titleLayoutPropertie"
  "s\030\030 \001(\0132!.TSWP.ShapeStylePropertiesArchi"
  "ve\0225\n\027bodyPlaceholderGeometry\030\016 \001(\0132\024.TS"
  "D.GeometryArchive\022&\n\036bodyPlaceholderShap"
  "eStyleIndex\030\017 \001(\r\022%\n\035bodyPlaceholderText"
  "StyleIndex\030\020 \001(\r\022\?\n\024bodyLayoutProperties"
  "\030\031 \001(\0132!.TSWP.ShapeStylePropertiesArchiv"
  "e\022<\n\036slideNumberPlaceholderGeometry\030\025 \001("
  "\0132\024.TSD.GeometryArchive\022-\n%slideNumberPl"
  "aceholderShapeStyleIndex\030\026 \001(\r\022,\n$slideN"
  "umberPlaceholderTextStyleIndex\030\027 \001(\r\022F\n\033"
  "slideNumberLayoutProperties\030\032 \001(\0132!.TSWP"
  ".ShapeStylePropertiesArchive\022/\n\027classicS"
  "tylesheetRecord\030\035 \001(\0132\016.TSP.Reference\022+\n"
  "\023bodyParagraphStyles\030\037 \003(\0132\016.TSP.Referen"
  "ce\022&\n\016bodyListStyles\030# \003(\0132\016.TSP.Referen"
  "ce\022(\n thumbnailTextForTitlePlaceholder\030%"
  " \001(\t\022\'\n\037thumbnailTextForBodyPlaceholder\030"
  "& \001(\t\022\036\n\006master\030\021 \001(\0132\016.TSP.Reference\022\'\n"
  "\014staticGuides\030\022 \003(\0132\021.TSD.GuideArchive\022/"
  "\n\027userDefinedGuideStorage\030$ \001(\0132\016.TSP.Re"
  "ference\022\022\n\ninDocument\030\023 \002(\010\022\034\n\004note\030\033 \001("
  "\0132\016.TSP.Reference\022>\n&info_using_object_p"
  "laceholder_geometry\030\' \001(\0132\016.TSP.Referenc"
  "e\022R\nJinfo_using_object_placeholder_geome"
  "try_matches_object_placeholder_geometry\030"
  "( \001(\010\0224\n,deprecated_objectPlaceholderVis"
  "ibleForExport\030\" \001(\010\032<\n\017SageTagMapEntry\022\013"
  "\n\003tag\030\001 \002(\t\022\034\n\004info\030\002 \002(\0132\016.TSP.Referenc"
  "e\"\322\004\n\020SlideNodeArchive\022 \n\010children\030\001 \003(\013"
  "2\016.TSP.Reference\022\035\n\005slide\030\002 \001(\0132\016.TSP.Re"
  "ference\022&\n\nthumbnails\030\020 \003(\0132\022.TSP.DataRe"
  "ference\022!\n\016thumbnailSizes\030\n \003(\0132\t.TSP.Si"
  "ze\022\032\n\022thumbnailsAreDirty\030\016 \001(\010\022\020\n\010isHidd"
  "en\030\004 \002(\010\022\027\n\013isCollapsed\030\005 \002(\010B\002\030\001\022 \n\030isC"
  "ollapsedInOutlineView\030\021 \001(\010\022\034\n\024hasBodyIn"
  "OutlineView\030\023 \001(\010\022\021\n\thasBuilds\030\006 \002(\010\022\025\n\r"
  "hasTransition\030\007 \002(\010\022\017\n\007hasNote\030\010 \001(\010\022#\n\024"
  "isSlideNumberVisible\030\022 \001(\010:\005false\022\030\n\020uni"
  "queIdentifier\030\013 \001(\t\022\037\n\027copyFromSlideIden"
  "tifier\030\014 \001(\t\022#\n\033slideSpecificHyperlinkCo"
  "unt\030\r \001(\r\022\022\n\neventCount\030\017 \001(\r\022*\n\022databas"
  "e_thumbnail\030\003 \001(\0132\016.TSP.Reference\022+\n\023dat"
  "abase_thumbnails\030\t \003(\0132\016.TSP.Reference\"\222"
  "\004\n\026DesktopUILayoutArchive\022\027\n\017sidebar_vis"
  "ible\030\001 \001(\010\022E\n\021sidebar_view_mode\030\002 \001(\0162*."
  "KN.DesktopUILayoutArchive.SidebarViewMod"
  "e\022\025\n\rnotes_visible\030\003 \001(\010\022\033\n\023light_table_"
  "visible\030\005 \001(\010\022$\n\026inspector_pane_visible\030"
  "\006 \001(\010:\004true\022p\n\030inspector_pane_view_mode\030"
  "\007 \001(\01620.KN.DesktopUILayoutArchive.Inspec"
  "torPaneViewMode:\034kInspectorPaneViewModeF"
  "ormat\"M\n\017SidebarViewMode\022\035\n\031kSidebarView"
  "ModeNavigator\020\000\022\033\n\027kSidebarViewModeOutli"
  "ne\020\001\"}\n\025InspectorPaneViewMode\022 \n\034kInspec"
  "torPaneViewModeFormat\020\000\022!\n\035kInspectorPan"
  "eViewModeAnimate\020\001\022\037\n\033kInspectorPaneView"
  "ModeSetup\020\002\"\241\007\n\016UIStateArchive\022\'\n\017slideN"
  "odeToEdit\030\001 \001(\0132\016.TSP.Reference\0229\n!depre"
  "cated_masterSlideNodeToApply\030\002 \001(\0132\016.TSP"
  ".Reference\0220\n\035deprecated_slideThumbnailS"
  "ize\030\003 \001(\0132\t.TSP.Size\022\027\n\017canvasViewScale\030"
  "\004 \001(\002\022 \n\014canvasOffset\030\005 \001(\0132\n.TSP.Point\022"
  "*\n\022selectedSlideNodes\030\006 \003(\0132\016.TSP.Refere"
  "nce\022\035\n\025iPhoneCanvasViewScale\030\007 \001(\002\022&\n\022iP"
  "honeCanvasOffset\030\010 \001(\0132\n.TSP.Point\022 \n\030iP"
  "hone568CanvasViewScale\030\t \001(\002\022)\n\025iPhone56"
  "8CanvasOffset\030\n \001(\0132\n.TSP.Point\022)\n\021deskt"
  "op_ui_layout\030\013 \001(\0132\016.TSP.Reference\022.\n&de"
  "sktop_slide_view_content_fits_window\030\014 \001"
  "(\010\022!\n\031desktop_canvas_view_scale\030\r \001(\002\022)\n"
  "\025desktop_canvas_offset\030\025 \001(\0132\n.TSP.Point"
  "\022\036\n\026light_table_zoom_scale\030\016 \001(\002\022*\n\016char"
  "t_ui_state\030\017 \003(\0132\022.TSCH.ChartUIState\022\031\n\021"
  "show_slide_guides\030\020 \001(\010\022\032\n\022show_master_g"
  "uides\030\021 \001(\010\022\026\n\016shows_comments\030\022 \001(\010\022-\n\025c"
  "ollapsed_slide_nodes\030\023 \003(\0132\016.TSP.Referen"
  "ce\022\023\n\013shows_ruler\030\024 \001(\010\022$\n\034desktop_navig"
  "ator_view_width\030\026 \001(\002\022\"\n\032desktop_outline"
  "_view_width\030\027 \001(\002\022,\n\031desktop_main_conten"
  "t_size\030\030 \001(\0132\t.TSP.Size\"\217\001\n\026CanvasSelect"
  "ionArchive\022\035\n\005infos\030\001 \003(\0132\016.TSP.Referenc"
  "e\022+\n\024action_ghost_indexes\030\003 \003(\0132\r.TSP.In"
  "dexSet\022)\n\035database_action_ghost_indexes\030"
  "\002 \003(\rB\002\030\001\"\274\001\n\014ThemeArchive\022 \n\005super\030\001 \002("
  "\0132\021.TSS.ThemeArchive\022\037\n\007masters\030\002 \003(\0132\016."
  "TSP.Reference\022\014\n\004uuid\030\003 \001(\t\022+\n\023classicTh"
  "emeRecords\030\004 \003(\0132\016.TSP.Reference\022.\n\026defa"
  "ultMasterSlideNode\030\005 \001(\0132\016.TSP.Reference"
  "\"9\n\020SlideTreeArchive\022%\n\rrootSlideNode\030\001 "
  "\001(\0132\016.TSP.Reference\"\364\004\n\013ShowArchive\022\037\n\007u"
  "iState\030\001 \001(\0132\016.TSP.Reference\022\035\n\005theme\030\002 "
  "\002(\0132\016.TSP.Reference\022\'\n\tslideTree\030\003 \002(\0132\024"
  ".KN.SlideTreeArchive\022\027\n\004size\030\004 \002(\0132\t.TSP"
  ".Size\022\"\n\nstylesheet\030\005 \002(\0132\016.TSP.Referenc"
  "e\022\033\n\023slideNumbersVisible\030\006 \001(\010\022!\n\trecord"
  "ing\030\007 \001(\0132\016.TSP.Reference\022\031\n\021loop_presen"
  "tation\030\010 \001(\010\022;\n\004mode\030\t \001(\0162\032.KN.ShowArch"
  "ive.KNShowMode:\021kKNShowModeNormal\022$\n\031aut"
  "oplay_transition_delay\030\n \001(\001:\0015\022\037\n\024autop"
  "lay_build_delay\030\013 \001(\001:\0012\022\031\n\021idle_timer_a"
  "ctive\030\017 \001(\010\022\035\n\020idle_timer_delay\030\020 \001(\001:\0039"
  "00\022\"\n\nsoundtrack\030\021 \001(\0132\016.TSP.Reference\022%"
  "\n\035automatically_plays_upon_open\030\022 \001(\010\"[\n"
  "\nKNShowMode\022\025\n\021kKNShowModeNormal\020\000\022\027\n\023kK"
  "NShowModeAutoPlay\020\001\022\035\n\031kKNShowModeHyperl"
  "inksOnly\020\002\"\207\001\n\017DocumentArchive\022#\n\005super\030"
  "\003 \002(\0132\024.TSA.DocumentArchive\022\034\n\004show\030\002 \002("
  "\0132\016.TSP.Reference\0221\n\031tables_custom_forma"
  "t_list\030\004 \001(\0132\016.TSP.Reference\"\241\002\n\033SlideSt"
  "ylePropertiesArchive\022\036\n\004fill\030\001 \001(\0132\020.TSD"
  ".FillArchive\0223\n\ntransition\030\002 \001(\0132\037.KN.Tr"
  "ansitionAttributesArchive\022\027\n\017transition_"
  "null\030\003 \001(\010\022\"\n\032titlePlaceholderVisibility"
  "\030\004 \001(\010\022!\n\031bodyPlaceholderVisibility\030\005 \001("
  "\010\022#\n\033objectPlaceholderVisibility\030\007 \001(\010\022("
  "\n slideNumberPlaceholderVisibility\030\006 \001(\010"
  "\"\213\001\n\021SlideStyleArchive\022 \n\005super\030\001 \002(\0132\021."
  "TSS.StyleArchive\022\031\n\016override_count\030\n \001(\r"
  ":\0010\0229\n\020slide_properties\030\013 \001(\0132\037.KN.Slide"
  "StylePropertiesArchive\"\371\001\n\036PasteboardNat"
  "iveStorageArchive\022!\n\tdrawables\030\001 \003(\0132\016.T"
  "SP.Reference\022\036\n\006builds\030\002 \003(\0132\016.TSP.Refer"
  "ence\022*\n\013buildChunks\030\003 \003(\0132\025.KN.BuildChun"
  "kArchive\022\"\n\nslideNodes\030\004 \003(\0132\016.TSP.Refer"
  "ence\022#\n\020originalShowSize\030\005 \001(\0132\t.TSP.Siz"
  "e\022\037\n\013titleRanges\030\006 \003(\0132\n.TSP.Range\"\241\002\n\027M"
  "asterChangeBlobArchive\022\035\n\005slide\030\001 \001(\0132\016."
  "TSP.Reference\022\036\n\006master\030\002 \001(\0132\016.TSP.Refe"
  "rence\022#\n\013slide_style\030\003 \001(\0132\016.TSP.Referen"
  "ce\022)\n\021title_placeholder\030\004 \001(\0132\016.TSP.Refe"
  "rence\022(\n\020body_placeholder\030\005 \001(\0132\016.TSP.Re"
  "ference\022*\n\022object_placeholder\030\007 \001(\0132\016.TS"
  "P.Reference\022!\n\tdrawables\030\006 \003(\0132\016.TSP.Ref"
  "erence\"\334\002\n\020RecordingArchive\022$\n\014event_tra"
  "cks\030\001 \003(\0132\016.TSP.Reference\022#\n\013movie_track"
  "\030\002 \001(\0132\016.TSP.Reference\022\020\n\010duration\030\003 \001(\001"
  "\022^\n\nsync_state\030\004 \001(\0162\'.KN.RecordingArchi"
  "ve.RecordingSyncState:!kRecordingSyncSta"
  "teInSyncWithShow\022$\n\021modification_date\030\005 "
  "\001(\0132\t.TSP.Date\"e\n\022RecordingSyncState\022%\n!"
  "kRecordingSyncStateInSyncWithShow\020\000\022(\n$k"
  "RecordingSyncStateOutOfSyncWithShow\020\001\"U\n"
  "\032RecordingEventTrackArchive\022\014\n\004type\030\001 \001("
  "\t\022)\n\006events\030\002 \003(\0132\031.KN.RecordingEventArc"
  "hive\"\261\002\n\025RecordingEventArchive\022\026\n\nstart_"
  "time\030\001 \001(\001:\002-1\022F\n\030navigation_event_archi"
  "ve\030\350\007 \001(\0132#.KN.RecordingNavigationEventA"
  "rchive\022<\n\023laser_event_archive\030\351\007 \001(\0132\036.K"
  "N.RecordingLaserEventArchive\022<\n\023pause_ev"
  "ent_archive\030\352\007 \001(\0132\036.KN.RecordingPauseEv"
  "entArchive\022<\n\023movie_event_archive\030\353\007 \001(\013"
  "2\036.KN.RecordingMovieEventArchive\"\257\003\n\037Rec"
  "ordingNavigationEventArchive\0223\n\033target_s"
  "lide_node_reference\030\001 \001(\0132\016.TSP.Referenc"
  "e\022\032\n\022target_event_index\030\002 \001(\r\022\213\001\n\017animat"
  "ion_phase\030\003 \001(\0162J.KN.RecordingNavigation"
  "EventArchive.RecordingNavigationEventAni"
  "mationPhase:&kRecordingNavigationEventAn"
  "imationNone\"\254\001\n&RecordingNavigationEvent"
  "AnimationPhase\022*\n&kRecordingNavigationEv"
  "entAnimationNone\020\000\022+\n\'kRecordingNavigati"
  "onEventAnimationStart\020\001\022)\n%kRecordingNav"
  "igationEventAnimationEnd\020\002\"C\n\032RecordingL"
  "aserEventArchive\022%\n\021unscaled_location\030\001 "
  "\001(\0132\n.TSP.Point\"\315\002\n\032RecordingPauseEventA"
  "rchive\022p\n\020pause_event_type\030\001 \001(\01626.KN.Re"
  "cordingPauseEventArchive.RecordingPauseE"
  "ventType:\036kRecordingPauseEventTypeResume"
  "\"\274\001\n\027RecordingPauseEventType\022\"\n\036kRecordi"
  "ngPauseEventTypeResume\020\000\022!\n\035kRecordingPa"
  "useEventTypePause\020\001\022,\n(kRecordingPauseEv"
  "entTypeConcealWithBlack\020\002\022,\n(kRecordingP"
  "auseEventTypeConcealWithWhite\020\003\"\345\003\n\032Reco"
  "rdingMovieEventArchive\022,\n\024movie_info_ref"
  "erence\030\001 \001(\0132\016.TSP.Reference\022j\n\020movie_ev"
  "ent_type\030\002 \001(\01626.KN.RecordingMovieEventA"
  "rchive.RecordingMovieEventType:\030kRecordi"
  "ngMovieEventSeek\022\031\n\021movie_event_value\030\003 "
  "\001(\001\"\221\002\n\027RecordingMovieEventType\022\034\n\030kReco"
  "rdingMovieEventNone\020\000\022\034\n\030kRecordingMovie"
  "EventSeek\020\001\022\037\n\033kRecordingMovieEventSetRa"
  "te\020\002\022%\n!kRecordingMovieEventStartPlaybac"
  "k\020\003\022$\n kRecordingMovieEventStopPlayback\020"
  "\004\022&\n\"kRecordingMovieEventBeginScrubbing\020"
  "\005\022$\n kRecordingMovieEventEndScrubbing\020\006\""
  "M\n\032RecordingMovieTrackArchive\022/\n\016movie_s"
  "egments\030\001 \003(\0132\027.KN.MovieSegmentArchive\"\202"
  "\001\n\023MovieSegmentArchive\022&\n\nmovie_data\030\003 \001"
  "(\0132\022.TSP.DataReference\022\026\n\nstart_time\030\002 \001"
  "(\001:\002-1\022+\n\023database_movie_data\030\001 \001(\0132\016.TS"
  "P.Reference\"\371\001\n\nSoundtrack\022\016\n\006volume\030\001 \001"
  "(\001\022F\n\004mode\030\002 \001(\0162\035.KN.Soundtrack.Soundtr"
  "ackMode:\031kKNSoundtrackModePlayOnce\022\'\n\013mo"
  "vie_media\030\003 \003(\0132\022.TSP.DataReference\"j\n\016S"
  "oundtrackMode\022\035\n\031kKNSoundtrackModePlayOn"
  "ce\020\000\022\031\n\025kKNSoundtrackModeLoop\020\001\022\036\n\032kKNSo"
  "undtrackModeDoNotPlay\020\002\"M\n\034SlideNumberAt"
  "tachmentArchive\022-\n\005super\030\001 \002(\0132\036.TSWP.Te"
  "xtualAttachmentArchive\"\370\002\n\037SlideCollecti"
  "onSelectionArchive\022#\n\013slide_nodes\030\001 \003(\0132"
  "\016.TSP.Reference\022*\n\022slide_node_to_edit\030\002 "
  "\001(\0132\016.TSP.Reference\022h\n*selected_paragrap"
  "h_indexes_for_slide_nodes\030\003 \003(\01324.KN.Sli"
  "deCollectionSelectionArchive.OutlineSele"
  "ction\022/\n\033range_in_selected_paragraph\030\004 \001"
  "(\0132\n.TSP.Range\032i\n\020OutlineSelection\022\"\n\nsl"
  "ide_node\030\001 \002(\0132\016.TSP.Reference\0221\n\032select"
  "ed_paragraph_indexes\030\002 \002(\0132\r.TSP.IndexSe"
  "t"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_KNArchives_2eproto_deps[7] = {
  &::descriptor_table_TSAArchives_2eproto,
  &::descriptor_table_TSCHArchives_2eproto,
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
  &::descriptor_table_TSWPArchives_2eproto,
};
static ::_pbi::once_flag descriptor_table_KNArchives_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_KNArchives_2eproto = {
    false, false, 13321, descriptor_table_protodef_KNArchives_2eproto,
    "KNArchives.proto",
    &descriptor_table_KNArchives_2eproto_once, descriptor_table_KNArchives_2eproto_deps, 7, 37,
    schemas, file_default_instances, TableStruct_KNArchives_2eproto::offsets,
    file_level_metadata_KNArchives_2eproto, file_level_enum_descriptors_KNArchives_2eproto,
    file_level_service_descriptors_KNArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_KNArchives_2eproto_getter() {
  return &descriptor_table_KNArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_KNArchives_2eproto(&descriptor_table_KNArchives_2eproto);
namespace KN {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[0];
}
bool TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive::TransitionCustomAttributesTimingCurveTypeLinear;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive::TransitionCustomAttributesTimingCurveTypeEaseIn;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive::TransitionCustomAttributesTimingCurveTypeEaseOut;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive::TransitionCustomAttributesTimingCurveTypeEaseInEaseOut;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive::TransitionCustomAttributesTimingCurveType_MIN;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive::TransitionCustomAttributesTimingCurveType_MAX;
constexpr int TransitionAttributesArchive::TransitionCustomAttributesTimingCurveType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[1];
}
bool TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive::TransitionCustomAttributesTextDeliveryTypeByObject;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive::TransitionCustomAttributesTextDeliveryTypeByWord;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive::TransitionCustomAttributesTextDeliveryTypeByCharacter;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive::TransitionCustomAttributesTextDeliveryTypeByLine;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive::TransitionCustomAttributesTextDeliveryType_MIN;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive::TransitionCustomAttributesTextDeliveryType_MAX;
constexpr int TransitionAttributesArchive::TransitionCustomAttributesTextDeliveryType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributesArchive_BuildAttributesAcceleration_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[2];
}
bool BuildAttributesArchive_BuildAttributesAcceleration_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive::kNone;
constexpr BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive::kEaseIn;
constexpr BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive::kEaseOut;
constexpr BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive::kEaseBoth;
constexpr BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive::BuildAttributesAcceleration_MIN;
constexpr BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive::BuildAttributesAcceleration_MAX;
constexpr int BuildAttributesArchive::BuildAttributesAcceleration_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributesArchive_BuildAttributesRotationDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[3];
}
bool BuildAttributesArchive_BuildAttributesRotationDirection_IsValid(int value) {
  switch (value) {
    case 31:
    case 32:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BuildAttributesArchive_BuildAttributesRotationDirection BuildAttributesArchive::kClockwise;
constexpr BuildAttributesArchive_BuildAttributesRotationDirection BuildAttributesArchive::kCounterclockwise;
constexpr BuildAttributesArchive_BuildAttributesRotationDirection BuildAttributesArchive::BuildAttributesRotationDirection_MIN;
constexpr BuildAttributesArchive_BuildAttributesRotationDirection BuildAttributesArchive::BuildAttributesRotationDirection_MAX;
constexpr int BuildAttributesArchive::BuildAttributesRotationDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributesArchive_BuildAttributesCurveStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[4];
}
bool BuildAttributesArchive_BuildAttributesCurveStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BuildAttributesArchive_BuildAttributesCurveStyle BuildAttributesArchive::kStraight;
constexpr BuildAttributesArchive_BuildAttributesCurveStyle BuildAttributesArchive::kCurved;
constexpr BuildAttributesArchive_BuildAttributesCurveStyle BuildAttributesArchive::BuildAttributesCurveStyle_MIN;
constexpr BuildAttributesArchive_BuildAttributesCurveStyle BuildAttributesArchive::BuildAttributesCurveStyle_MAX;
constexpr int BuildAttributesArchive::BuildAttributesCurveStyle_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributesArchive_BuildAttributesTextDelivery_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[5];
}
bool BuildAttributesArchive_BuildAttributesTextDelivery_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::kTextDeliveryUndefined;
constexpr BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::kTextDeliveryByObject;
constexpr BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::kTextDeliveryByWord;
constexpr BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::kTextDeliveryByCharacter;
constexpr BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::kTextDeliveryByLine;
constexpr BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::BuildAttributesTextDelivery_MIN;
constexpr BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::BuildAttributesTextDelivery_MAX;
constexpr int BuildAttributesArchive::BuildAttributesTextDelivery_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributesArchive_BuildAttributesDeliveryOption_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[6];
}
bool BuildAttributesArchive_BuildAttributesDeliveryOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::kDeliveryOptionUndefined;
constexpr BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::kDeliveryOptionForward;
constexpr BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::kDeliveryOptionBackward;
constexpr BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::kDeliveryOptionFromCenter;
constexpr BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::kDeliveryOptionFromEdges;
constexpr BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::kDeliveryOptionRandom;
constexpr BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::BuildAttributesDeliveryOption_MIN;
constexpr BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::BuildAttributesDeliveryOption_MAX;
constexpr int BuildAttributesArchive::BuildAttributesDeliveryOption_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[7];
}
bool BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BuildAttributesArchive_ActionBuildAttributesJiggleIntensity BuildAttributesArchive::kJiggleIntensitySmall;
constexpr BuildAttributesArchive_ActionBuildAttributesJiggleIntensity BuildAttributesArchive::kJiggleIntensityMedium;
constexpr BuildAttributesArchive_ActionBuildAttributesJiggleIntensity BuildAttributesArchive::kJiggleIntensityLarge;
constexpr BuildAttributesArchive_ActionBuildAttributesJiggleIntensity BuildAttributesArchive::ActionBuildAttributesJiggleIntensity_MIN;
constexpr BuildAttributesArchive_ActionBuildAttributesJiggleIntensity BuildAttributesArchive::ActionBuildAttributesJiggleIntensity_MAX;
constexpr int BuildAttributesArchive::ActionBuildAttributesJiggleIntensity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlaceholderArchive_Kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[8];
}
bool PlaceholderArchive_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PlaceholderArchive_Kind PlaceholderArchive::kKindPlaceholder;
constexpr PlaceholderArchive_Kind PlaceholderArchive::kKindSlideNumberPlaceholder;
constexpr PlaceholderArchive_Kind PlaceholderArchive::kKindTitlePlaceholder;
constexpr PlaceholderArchive_Kind PlaceholderArchive::kKindBodyPlaceholder;
constexpr PlaceholderArchive_Kind PlaceholderArchive::kKindObjectPlaceholder;
constexpr PlaceholderArchive_Kind PlaceholderArchive::Kind_MIN;
constexpr PlaceholderArchive_Kind PlaceholderArchive::Kind_MAX;
constexpr int PlaceholderArchive::Kind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DesktopUILayoutArchive_SidebarViewMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[9];
}
bool DesktopUILayoutArchive_SidebarViewMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DesktopUILayoutArchive_SidebarViewMode DesktopUILayoutArchive::kSidebarViewModeNavigator;
constexpr DesktopUILayoutArchive_SidebarViewMode DesktopUILayoutArchive::kSidebarViewModeOutline;
constexpr DesktopUILayoutArchive_SidebarViewMode DesktopUILayoutArchive::SidebarViewMode_MIN;
constexpr DesktopUILayoutArchive_SidebarViewMode DesktopUILayoutArchive::SidebarViewMode_MAX;
constexpr int DesktopUILayoutArchive::SidebarViewMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DesktopUILayoutArchive_InspectorPaneViewMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[10];
}
bool DesktopUILayoutArchive_InspectorPaneViewMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DesktopUILayoutArchive_InspectorPaneViewMode DesktopUILayoutArchive::kInspectorPaneViewModeFormat;
constexpr DesktopUILayoutArchive_InspectorPaneViewMode DesktopUILayoutArchive::kInspectorPaneViewModeAnimate;
constexpr DesktopUILayoutArchive_InspectorPaneViewMode DesktopUILayoutArchive::kInspectorPaneViewModeSetup;
constexpr DesktopUILayoutArchive_InspectorPaneViewMode DesktopUILayoutArchive::InspectorPaneViewMode_MIN;
constexpr DesktopUILayoutArchive_InspectorPaneViewMode DesktopUILayoutArchive::InspectorPaneViewMode_MAX;
constexpr int DesktopUILayoutArchive::InspectorPaneViewMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShowArchive_KNShowMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[11];
}
bool ShowArchive_KNShowMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ShowArchive_KNShowMode ShowArchive::kKNShowModeNormal;
constexpr ShowArchive_KNShowMode ShowArchive::kKNShowModeAutoPlay;
constexpr ShowArchive_KNShowMode ShowArchive::kKNShowModeHyperlinksOnly;
constexpr ShowArchive_KNShowMode ShowArchive::KNShowMode_MIN;
constexpr ShowArchive_KNShowMode ShowArchive::KNShowMode_MAX;
constexpr int ShowArchive::KNShowMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecordingArchive_RecordingSyncState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[12];
}
bool RecordingArchive_RecordingSyncState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RecordingArchive_RecordingSyncState RecordingArchive::kRecordingSyncStateInSyncWithShow;
constexpr RecordingArchive_RecordingSyncState RecordingArchive::kRecordingSyncStateOutOfSyncWithShow;
constexpr RecordingArchive_RecordingSyncState RecordingArchive::RecordingSyncState_MIN;
constexpr RecordingArchive_RecordingSyncState RecordingArchive::RecordingSyncState_MAX;
constexpr int RecordingArchive::RecordingSyncState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[13];
}
bool RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase RecordingNavigationEventArchive::kRecordingNavigationEventAnimationNone;
constexpr RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase RecordingNavigationEventArchive::kRecordingNavigationEventAnimationStart;
constexpr RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase RecordingNavigationEventArchive::kRecordingNavigationEventAnimationEnd;
constexpr RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase RecordingNavigationEventArchive::RecordingNavigationEventAnimationPhase_MIN;
constexpr RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase RecordingNavigationEventArchive::RecordingNavigationEventAnimationPhase_MAX;
constexpr int RecordingNavigationEventArchive::RecordingNavigationEventAnimationPhase_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecordingPauseEventArchive_RecordingPauseEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[14];
}
bool RecordingPauseEventArchive_RecordingPauseEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive::kRecordingPauseEventTypeResume;
constexpr RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive::kRecordingPauseEventTypePause;
constexpr RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive::kRecordingPauseEventTypeConcealWithBlack;
constexpr RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive::kRecordingPauseEventTypeConcealWithWhite;
constexpr RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive::RecordingPauseEventType_MIN;
constexpr RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive::RecordingPauseEventType_MAX;
constexpr int RecordingPauseEventArchive::RecordingPauseEventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecordingMovieEventArchive_RecordingMovieEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[15];
}
bool RecordingMovieEventArchive_RecordingMovieEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::kRecordingMovieEventNone;
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::kRecordingMovieEventSeek;
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::kRecordingMovieEventSetRate;
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::kRecordingMovieEventStartPlayback;
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::kRecordingMovieEventStopPlayback;
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::kRecordingMovieEventBeginScrubbing;
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::kRecordingMovieEventEndScrubbing;
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::RecordingMovieEventType_MIN;
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::RecordingMovieEventType_MAX;
constexpr int RecordingMovieEventArchive::RecordingMovieEventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Soundtrack_SoundtrackMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[16];
}
bool Soundtrack_SoundtrackMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Soundtrack_SoundtrackMode Soundtrack::kKNSoundtrackModePlayOnce;
constexpr Soundtrack_SoundtrackMode Soundtrack::kKNSoundtrackModeLoop;
constexpr Soundtrack_SoundtrackMode Soundtrack::kKNSoundtrackModeDoNotPlay;
constexpr Soundtrack_SoundtrackMode Soundtrack::SoundtrackMode_MIN;
constexpr Soundtrack_SoundtrackMode Soundtrack::SoundtrackMode_MAX;
constexpr int Soundtrack::SoundtrackMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class AnimationAttributesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<AnimationAttributesArchive>()._impl_._has_bits_);
  static void set_has_animationtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_effect(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_isautomatic(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Color& color(const AnimationAttributesArchive* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::Color&
AnimationAttributesArchive::_Internal::color(const AnimationAttributesArchive* msg) {
  return *msg->_impl_.color_;
}
void AnimationAttributesArchive::clear_color() {
  if (_impl_.color_ != nullptr) _impl_.color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
AnimationAttributesArchive::AnimationAttributesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.AnimationAttributesArchive)
}
AnimationAttributesArchive::AnimationAttributesArchive(const AnimationAttributesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnimationAttributesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.animationtype_){}
    , decltype(_impl_.effect_){}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.delay_){}
    , decltype(_impl_.direction_){}
    , decltype(_impl_.isautomatic_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.animationtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.animationtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_animationtype()) {
    _this->_impl_.animationtype_.Set(from._internal_animationtype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.effect_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.effect_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_effect()) {
    _this->_impl_.effect_.Set(from._internal_effect(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_color()) {
    _this->_impl_.color_ = new ::TSP::Color(*from._impl_.color_);
  }
  ::memcpy(&_impl_.duration_, &from._impl_.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isautomatic_) -
    reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.isautomatic_));
  // @@protoc_insertion_point(copy_constructor:KN.AnimationAttributesArchive)
}

inline void AnimationAttributesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.animationtype_){}
    , decltype(_impl_.effect_){}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.duration_){0}
    , decltype(_impl_.delay_){0}
    , decltype(_impl_.direction_){0u}
    , decltype(_impl_.isautomatic_){false}
  };
  _impl_.animationtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.animationtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.effect_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.effect_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AnimationAttributesArchive::~AnimationAttributesArchive() {
  // @@protoc_insertion_point(destructor:KN.AnimationAttributesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnimationAttributesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.animationtype_.Destroy();
  _impl_.effect_.Destroy();
  if (this != internal_default_instance()) delete _impl_.color_;
}

void AnimationAttributesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnimationAttributesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.AnimationAttributesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.animationtype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.effect_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.color_ != nullptr);
      _impl_.color_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&_impl_.duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.isautomatic_) -
        reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.isautomatic_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnimationAttributesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string animationType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_animationtype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.AnimationAttributesArchive.animationType");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string effect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_effect();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.AnimationAttributesArchive.effect");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_direction(&has_bits);
          _impl_.direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double delay = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_delay(&has_bits);
          _impl_.delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool isAutomatic = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_isautomatic(&has_bits);
          _impl_.isautomatic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Color color = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnimationAttributesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.AnimationAttributesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string animationType = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_animationtype().data(), static_cast<int>(this->_internal_animationtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.AnimationAttributesArchive.animationType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_animationtype(), target);
  }

  // optional string effect = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_effect().data(), static_cast<int>(this->_internal_effect().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.AnimationAttributesArchive.effect");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_effect(), target);
  }

  // optional double duration = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_duration(), target);
  }

  // optional uint32 direction = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_direction(), target);
  }

  // optional double delay = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_delay(), target);
  }

  // optional bool isAutomatic = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_isautomatic(), target);
  }

  // optional .TSP.Color color = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.AnimationAttributesArchive)
  return target;
}

size_t AnimationAttributesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.AnimationAttributesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string animationType = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_animationtype());
    }

    // optional string effect = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_effect());
    }

    // optional .TSP.Color color = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.color_);
    }

    // optional double duration = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double delay = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 direction = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_direction());
    }

    // optional bool isAutomatic = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnimationAttributesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AnimationAttributesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnimationAttributesArchive::GetClassData() const { return &_class_data_; }


void AnimationAttributesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AnimationAttributesArchive*>(&to_msg);
  auto& from = static_cast<const AnimationAttributesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.AnimationAttributesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_animationtype(from._internal_animationtype());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_effect(from._internal_effect());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_color()->::TSP::Color::MergeFrom(
          from._internal_color());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.delay_ = from._impl_.delay_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.direction_ = from._impl_.direction_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.isautomatic_ = from._impl_.isautomatic_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnimationAttributesArchive::CopyFrom(const AnimationAttributesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.AnimationAttributesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimationAttributesArchive::IsInitialized() const {
  if (_internal_has_color()) {
    if (!_impl_.color_->IsInitialized()) return false;
  }
  return true;
}

void AnimationAttributesArchive::InternalSwap(AnimationAttributesArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.animationtype_, lhs_arena,
      &other->_impl_.animationtype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.effect_, lhs_arena,
      &other->_impl_.effect_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnimationAttributesArchive, _impl_.isautomatic_)
      + sizeof(AnimationAttributesArchive::_impl_.isautomatic_)
      - PROTOBUF_FIELD_OFFSET(AnimationAttributesArchive, _impl_.color_)>(
          reinterpret_cast<char*>(&_impl_.color_),
          reinterpret_cast<char*>(&other->_impl_.color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnimationAttributesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[0]);
}

// ===================================================================

class TransitionAttributesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TransitionAttributesArchive>()._impl_._has_bits_);
  static const ::KN::AnimationAttributesArchive& animationattributes(const TransitionAttributesArchive* msg);
  static void set_has_animationattributes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_isautomatic(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_custom_twist(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_custom_mosaic_size(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_custom_mosaic_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_custom_bounce(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_custom_magic_move_fade_unmatched_objects(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_custom_timing_curve(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_custom_text_delivery_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_database_animationtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_database_effect(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_database_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_database_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_database_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Color& database_color(const TransitionAttributesArchive* msg);
  static void set_has_database_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::KN::AnimationAttributesArchive&
TransitionAttributesArchive::_Internal::animationattributes(const TransitionAttributesArchive* msg) {
  return *msg->_impl_.animationattributes_;
}
const ::TSP::Color&
TransitionAttributesArchive::_Internal::database_color(const TransitionAttributesArchive* msg) {
  return *msg->_impl_.database_color_;
}
void TransitionAttributesArchive::clear_database_color() {
  if (_impl_.database_color_ != nullptr) _impl_.database_color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
TransitionAttributesArchive::TransitionAttributesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.TransitionAttributesArchive)
}
TransitionAttributesArchive::TransitionAttributesArchive(const TransitionAttributesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransitionAttributesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.database_animationtype_){}
    , decltype(_impl_.database_effect_){}
    , decltype(_impl_.database_color_){nullptr}
    , decltype(_impl_.animationattributes_){nullptr}
    , decltype(_impl_.database_duration_){}
    , decltype(_impl_.database_direction_){}
    , decltype(_impl_.database_delay_){}
    , decltype(_impl_.custom_twist_){}
    , decltype(_impl_.custom_mosaic_size_){}
    , decltype(_impl_.isautomatic_){}
    , decltype(_impl_.custom_bounce_){}
    , decltype(_impl_.custom_magic_move_fade_unmatched_objects_){}
    , decltype(_impl_.custom_mosaic_type_){}
    , decltype(_impl_.custom_timing_curve_){}
    , decltype(_impl_.custom_text_delivery_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.database_animationtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_animationtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_database_animationtype()) {
    _this->_impl_.database_animationtype_.Set(from._internal_database_animationtype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.database_effect_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_effect_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_database_effect()) {
    _this->_impl_.database_effect_.Set(from._internal_database_effect(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_database_color()) {
    _this->_impl_.database_color_ = new ::TSP::Color(*from._impl_.database_color_);
  }
  if (from._internal_has_animationattributes()) {
    _this->_impl_.animationattributes_ = new ::KN::AnimationAttributesArchive(*from._impl_.animationattributes_);
  }
  ::memcpy(&_impl_.database_duration_, &from._impl_.database_duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.custom_text_delivery_type_) -
    reinterpret_cast<char*>(&_impl_.database_duration_)) + sizeof(_impl_.custom_text_delivery_type_));
  // @@protoc_insertion_point(copy_constructor:KN.TransitionAttributesArchive)
}

inline void TransitionAttributesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.database_animationtype_){}
    , decltype(_impl_.database_effect_){}
    , decltype(_impl_.database_color_){nullptr}
    , decltype(_impl_.animationattributes_){nullptr}
    , decltype(_impl_.database_duration_){0}
    , decltype(_impl_.database_direction_){0u}
    , decltype(_impl_.database_delay_){0}
    , decltype(_impl_.custom_twist_){0}
    , decltype(_impl_.custom_mosaic_size_){0u}
    , decltype(_impl_.isautomatic_){false}
    , decltype(_impl_.custom_bounce_){false}
    , decltype(_impl_.custom_magic_move_fade_unmatched_objects_){false}
    , decltype(_impl_.custom_mosaic_type_){0u}
    , decltype(_impl_.custom_timing_curve_){1}
    , decltype(_impl_.custom_text_delivery_type_){1}
  };
  _impl_.database_animationtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_animationtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.database_effect_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_effect_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransitionAttributesArchive::~TransitionAttributesArchive() {
  // @@protoc_insertion_point(destructor:KN.TransitionAttributesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransitionAttributesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.database_animationtype_.Destroy();
  _impl_.database_effect_.Destroy();
  if (this != internal_default_instance()) delete _impl_.database_color_;
  if (this != internal_default_instance()) delete _impl_.animationattributes_;
}

void TransitionAttributesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransitionAttributesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.TransitionAttributesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.database_animationtype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.database_effect_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.database_color_ != nullptr);
      _impl_.database_color_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.animationattributes_ != nullptr);
      _impl_.animationattributes_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.database_duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.custom_twist_) -
        reinterpret_cast<char*>(&_impl_.database_duration_)) + sizeof(_impl_.custom_twist_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.custom_mosaic_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.custom_mosaic_type_) -
        reinterpret_cast<char*>(&_impl_.custom_mosaic_size_)) + sizeof(_impl_.custom_mosaic_type_));
    _impl_.custom_timing_curve_ = 1;
    _impl_.custom_text_delivery_type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransitionAttributesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string database_animationType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_database_animationtype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.TransitionAttributesArchive.database_animationType");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string database_effect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_database_effect();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.TransitionAttributesArchive.database_effect");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double database_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_database_duration(&has_bits);
          _impl_.database_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 database_direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_database_direction(&has_bits);
          _impl_.database_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float database_delay = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_database_delay(&has_bits);
          _impl_.database_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool isAutomatic = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_isautomatic(&has_bits);
          _impl_.isautomatic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Color database_color = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.AnimationAttributesArchive animationAttributes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_animationattributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float custom_twist = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_custom_twist(&has_bits);
          _impl_.custom_twist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 custom_mosaic_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_custom_mosaic_size(&has_bits);
          _impl_.custom_mosaic_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 custom_mosaic_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_custom_mosaic_type(&has_bits);
          _impl_.custom_mosaic_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool custom_bounce = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_custom_bounce(&has_bits);
          _impl_.custom_bounce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool custom_magic_move_fade_unmatched_objects = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_custom_magic_move_fade_unmatched_objects(&has_bits);
          _impl_.custom_magic_move_fade_unmatched_objects_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTimingCurveType custom_timing_curve = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_IsValid(val))) {
            _internal_set_custom_timing_curve(static_cast<::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTextDeliveryType custom_text_delivery_type = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_IsValid(val))) {
            _internal_set_custom_text_delivery_type(static_cast<::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransitionAttributesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.TransitionAttributesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string database_animationType = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_database_animationtype().data(), static_cast<int>(this->_internal_database_animationtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.TransitionAttributesArchive.database_animationType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_database_animationtype(), target);
  }

  // optional string database_effect = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_database_effect().data(), static_cast<int>(this->_internal_database_effect().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.TransitionAttributesArchive.database_effect");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_database_effect(), target);
  }

  // optional double database_duration = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_database_duration(), target);
  }

  // optional uint32 database_direction = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_database_direction(), target);
  }

  // optional float database_delay = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_database_delay(), target);
  }

  // optional bool isAutomatic = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_isautomatic(), target);
  }

  // optional .TSP.Color database_color = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::database_color(this),
        _Internal::database_color(this).GetCachedSize(), target, stream);
  }

  // optional .KN.AnimationAttributesArchive animationAttributes = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::animationattributes(this),
        _Internal::animationattributes(this).GetCachedSize(), target, stream);
  }

  // optional float custom_twist = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_custom_twist(), target);
  }

  // optional uint32 custom_mosaic_size = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_custom_mosaic_size(), target);
  }

  // optional uint32 custom_mosaic_type = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_custom_mosaic_type(), target);
  }

  // optional bool custom_bounce = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_custom_bounce(), target);
  }

  // optional bool custom_magic_move_fade_unmatched_objects = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_custom_magic_move_fade_unmatched_objects(), target);
  }

  // optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTimingCurveType custom_timing_curve = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_custom_timing_curve(), target);
  }

  // optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTextDeliveryType custom_text_delivery_type = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      16, this->_internal_custom_text_delivery_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.TransitionAttributesArchive)
  return target;
}

size_t TransitionAttributesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.TransitionAttributesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string database_animationType = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_database_animationtype());
    }

    // optional string database_effect = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_database_effect());
    }

    // optional .TSP.Color database_color = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.database_color_);
    }

    // optional .KN.AnimationAttributesArchive animationAttributes = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.animationattributes_);
    }

    // optional double database_duration = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 database_direction = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_database_direction());
    }

    // optional float database_delay = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float custom_twist = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 custom_mosaic_size = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_custom_mosaic_size());
    }

    // optional bool isAutomatic = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool custom_bounce = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool custom_magic_move_fade_unmatched_objects = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional uint32 custom_mosaic_type = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_custom_mosaic_type());
    }

    // optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTimingCurveType custom_timing_curve = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_custom_timing_curve());
    }

    // optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTextDeliveryType custom_text_delivery_type = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_custom_text_delivery_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransitionAttributesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransitionAttributesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransitionAttributesArchive::GetClassData() const { return &_class_data_; }


void TransitionAttributesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransitionAttributesArchive*>(&to_msg);
  auto& from = static_cast<const TransitionAttributesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.TransitionAttributesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_database_animationtype(from._internal_database_animationtype());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_database_effect(from._internal_database_effect());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_database_color()->::TSP::Color::MergeFrom(
          from._internal_database_color());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_animationattributes()->::KN::AnimationAttributesArchive::MergeFrom(
          from._internal_animationattributes());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.database_duration_ = from._impl_.database_duration_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.database_direction_ = from._impl_.database_direction_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.database_delay_ = from._impl_.database_delay_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.custom_twist_ = from._impl_.custom_twist_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.custom_mosaic_size_ = from._impl_.custom_mosaic_size_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.isautomatic_ = from._impl_.isautomatic_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.custom_bounce_ = from._impl_.custom_bounce_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.custom_magic_move_fade_unmatched_objects_ = from._impl_.custom_magic_move_fade_unmatched_objects_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.custom_mosaic_type_ = from._impl_.custom_mosaic_type_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.custom_timing_curve_ = from._impl_.custom_timing_curve_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.custom_text_delivery_type_ = from._impl_.custom_text_delivery_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransitionAttributesArchive::CopyFrom(const TransitionAttributesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.TransitionAttributesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransitionAttributesArchive::IsInitialized() const {
  if (_internal_has_database_color()) {
    if (!_impl_.database_color_->IsInitialized()) return false;
  }
  if (_internal_has_animationattributes()) {
    if (!_impl_.animationattributes_->IsInitialized()) return false;
  }
  return true;
}

void TransitionAttributesArchive::InternalSwap(TransitionAttributesArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.database_animationtype_, lhs_arena,
      &other->_impl_.database_animationtype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.database_effect_, lhs_arena,
      &other->_impl_.database_effect_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransitionAttributesArchive, _impl_.custom_mosaic_type_)
      + sizeof(TransitionAttributesArchive::_impl_.custom_mosaic_type_)
      - PROTOBUF_FIELD_OFFSET(TransitionAttributesArchive, _impl_.database_color_)>(
          reinterpret_cast<char*>(&_impl_.database_color_),
          reinterpret_cast<char*>(&other->_impl_.database_color_));
  swap(_impl_.custom_timing_curve_, other->_impl_.custom_timing_curve_);
  swap(_impl_.custom_text_delivery_type_, other->_impl_.custom_text_delivery_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransitionAttributesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[1]);
}

// ===================================================================

class TransitionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TransitionArchive>()._impl_._has_bits_);
  static const ::KN::TransitionAttributesArchive& attributes(const TransitionArchive* msg);
  static void set_has_attributes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::KN::TransitionAttributesArchive&
TransitionArchive::_Internal::attributes(const TransitionArchive* msg) {
  return *msg->_impl_.attributes_;
}
TransitionArchive::TransitionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.TransitionArchive)
}
TransitionArchive::TransitionArchive(const TransitionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransitionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attributes_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attributes()) {
    _this->_impl_.attributes_ = new ::KN::TransitionAttributesArchive(*from._impl_.attributes_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.TransitionArchive)
}

inline void TransitionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attributes_){nullptr}
  };
}

TransitionArchive::~TransitionArchive() {
  // @@protoc_insertion_point(destructor:KN.TransitionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransitionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.attributes_;
}

void TransitionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransitionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.TransitionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.attributes_ != nullptr);
    _impl_.attributes_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransitionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .KN.TransitionAttributesArchive attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransitionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.TransitionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .KN.TransitionAttributesArchive attributes = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::attributes(this),
        _Internal::attributes(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.TransitionArchive)
  return target;
}

size_t TransitionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.TransitionArchive)
  size_t total_size = 0;

  // required .KN.TransitionAttributesArchive attributes = 2;
  if (_internal_has_attributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attributes_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransitionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransitionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransitionArchive::GetClassData() const { return &_class_data_; }


void TransitionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransitionArchive*>(&to_msg);
  auto& from = static_cast<const TransitionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.TransitionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_attributes()) {
    _this->_internal_mutable_attributes()->::KN::TransitionAttributesArchive::MergeFrom(
        from._internal_attributes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransitionArchive::CopyFrom(const TransitionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.TransitionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransitionArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_attributes()) {
    if (!_impl_.attributes_->IsInitialized()) return false;
  }
  return true;
}

void TransitionArchive::InternalSwap(TransitionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.attributes_, other->_impl_.attributes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransitionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[2]);
}

// ===================================================================

class BuildChunkArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BuildChunkArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& build(const BuildChunkArchive* msg);
  static void set_has_build(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_automatic(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_referent(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000009) ^ 0x00000009) != 0;
  }
};

const ::TSP::Reference&
BuildChunkArchive::_Internal::build(const BuildChunkArchive* msg) {
  return *msg->_impl_.build_;
}
void BuildChunkArchive::clear_build() {
  if (_impl_.build_ != nullptr) _impl_.build_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
BuildChunkArchive::BuildChunkArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.BuildChunkArchive)
}
BuildChunkArchive::BuildChunkArchive(const BuildChunkArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BuildChunkArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.build_){nullptr}
    , decltype(_impl_.delay_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.automatic_){}
    , decltype(_impl_.referent_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_build()) {
    _this->_impl_.build_ = new ::TSP::Reference(*from._impl_.build_);
  }
  ::memcpy(&_impl_.delay_, &from._impl_.delay_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.referent_) -
    reinterpret_cast<char*>(&_impl_.delay_)) + sizeof(_impl_.referent_));
  // @@protoc_insertion_point(copy_constructor:KN.BuildChunkArchive)
}

inline void BuildChunkArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.build_){nullptr}
    , decltype(_impl_.delay_){0}
    , decltype(_impl_.duration_){0}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.automatic_){false}
    , decltype(_impl_.referent_){false}
  };
}

BuildChunkArchive::~BuildChunkArchive() {
  // @@protoc_insertion_point(destructor:KN.BuildChunkArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuildChunkArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.build_;
}

void BuildChunkArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuildChunkArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.BuildChunkArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.build_ != nullptr);
    _impl_.build_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.delay_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.referent_) -
        reinterpret_cast<char*>(&_impl_.delay_)) + sizeof(_impl_.referent_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildChunkArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference build = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_build(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double delay = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_delay(&has_bits);
          _impl_.delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool automatic = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_automatic(&has_bits);
          _impl_.automatic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool referent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_referent(&has_bits);
          _impl_.referent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuildChunkArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.BuildChunkArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference build = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::build(this),
        _Internal::build(this).GetCachedSize(), target, stream);
  }

  // required uint32 index = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  // optional double delay = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_delay(), target);
  }

  // optional double duration = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_duration(), target);
  }

  // optional bool automatic = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_automatic(), target);
  }

  // optional bool referent = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_referent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.BuildChunkArchive)
  return target;
}

size_t BuildChunkArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.BuildChunkArchive)
  size_t total_size = 0;

  if (_internal_has_build()) {
    // required .TSP.Reference build = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.build_);
  }

  if (_internal_has_index()) {
    // required uint32 index = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return total_size;
}
size_t BuildChunkArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.BuildChunkArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required .TSP.Reference build = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.build_);

    // required uint32 index = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional double delay = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double duration = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000030u) {
    // optional bool automatic = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool referent = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuildChunkArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BuildChunkArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuildChunkArchive::GetClassData() const { return &_class_data_; }


void BuildChunkArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BuildChunkArchive*>(&to_msg);
  auto& from = static_cast<const BuildChunkArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.BuildChunkArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_build()->::TSP::Reference::MergeFrom(
          from._internal_build());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.delay_ = from._impl_.delay_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.automatic_ = from._impl_.automatic_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.referent_ = from._impl_.referent_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuildChunkArchive::CopyFrom(const BuildChunkArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.BuildChunkArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildChunkArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_build()) {
    if (!_impl_.build_->IsInitialized()) return false;
  }
  return true;
}

void BuildChunkArchive::InternalSwap(BuildChunkArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuildChunkArchive, _impl_.referent_)
      + sizeof(BuildChunkArchive::_impl_.referent_)
      - PROTOBUF_FIELD_OFFSET(BuildChunkArchive, _impl_.build_)>(
          reinterpret_cast<char*>(&_impl_.build_),
          reinterpret_cast<char*>(&other->_impl_.build_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildChunkArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[3]);
}

// ===================================================================

class BuildAttributesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BuildAttributesArchive>()._impl_._has_bits_);
  static const ::KN::AnimationAttributesArchive& animationattributes(const BuildAttributesArchive* msg);
  static void set_has_animationattributes(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_eventtrigger(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_delayautomaticafter(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_delayautomaticwith(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_curvestyle(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_chartrotation3d(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_startoffset(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_endoffset(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_action_rotationangle(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_action_rotationdirection(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_action_scalesize(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_action_coloralpha(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_action_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSD::PathSourceArchive& action_motionpathsource(const BuildAttributesArchive* msg);
  static void set_has_action_motionpathsource(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_custom_bounce(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_custom_textdelivery(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_custom_deliveryoption(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_custom_action_decay(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_custom_action_repeatcount(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_custom_action_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_custom_action_jiggleintensity(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_database_animationtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_database_effect(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_database_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_database_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_database_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSP::Color& database_color(const BuildAttributesArchive* msg);
  static void set_has_database_color(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_motionpathstring(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::KN::AnimationAttributesArchive&
BuildAttributesArchive::_Internal::animationattributes(const BuildAttributesArchive* msg) {
  return *msg->_impl_.animationattributes_;
}
const ::TSD::PathSourceArchive&
BuildAttributesArchive::_Internal::action_motionpathsource(const BuildAttributesArchive* msg) {
  return *msg->_impl_.action_motionpathsource_;
}
const ::TSP::Color&
BuildAttributesArchive::_Internal::database_color(const BuildAttributesArchive* msg) {
  return *msg->_impl_.database_color_;
}
void BuildAttributesArchive::clear_action_motionpathsource() {
  if (_impl_.action_motionpathsource_ != nullptr) _impl_.action_motionpathsource_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void BuildAttributesArchive::clear_database_color() {
  if (_impl_.database_color_ != nullptr) _impl_.database_color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
BuildAttributesArchive::BuildAttributesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.BuildAttributesArchive)
}
BuildAttributesArchive::BuildAttributesArchive(const BuildAttributesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BuildAttributesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.database_animationtype_){}
    , decltype(_impl_.database_effect_){}
    , decltype(_impl_.motionpathstring_){}
    , decltype(_impl_.database_color_){nullptr}
    , decltype(_impl_.animationattributes_){nullptr}
    , decltype(_impl_.action_motionpathsource_){nullptr}
    , decltype(_impl_.database_direction_){}
    , decltype(_impl_.eventtrigger_){}
    , decltype(_impl_.database_delay_){}
    , decltype(_impl_.delayautomaticafter_){}
    , decltype(_impl_.delayautomaticwith_){}
    , decltype(_impl_.database_duration_){}
    , decltype(_impl_.action_rotationangle_){}
    , decltype(_impl_.action_scalesize_){}
    , decltype(_impl_.action_coloralpha_){}
    , decltype(_impl_.action_acceleration_){}
    , decltype(_impl_.curvestyle_){}
    , decltype(_impl_.chartrotation3d_){}
    , decltype(_impl_.custom_textdelivery_){}
    , decltype(_impl_.custom_deliveryoption_){}
    , decltype(_impl_.custom_bounce_){}
    , decltype(_impl_.custom_action_decay_){}
    , decltype(_impl_.custom_action_repeatcount_){}
    , decltype(_impl_.custom_action_scale_){}
    , decltype(_impl_.custom_action_jiggleintensity_){}
    , decltype(_impl_.startoffset_){}
    , decltype(_impl_.endoffset_){}
    , decltype(_impl_.action_rotationdirection_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.database_animationtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_animationtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_database_animationtype()) {
    _this->_impl_.database_animationtype_.Set(from._internal_database_animationtype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.database_effect_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_effect_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_database_effect()) {
    _this->_impl_.database_effect_.Set(from._internal_database_effect(), 
      _this->GetArenaForAllocation());
  }
  _impl_.motionpathstring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.motionpathstring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_motionpathstring()) {
    _this->_impl_.motionpathstring_.Set(from._internal_motionpathstring(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_database_color()) {
    _this->_impl_.database_color_ = new ::TSP::Color(*from._impl_.database_color_);
  }
  if (from._internal_has_animationattributes()) {
    _this->_impl_.animationattributes_ = new ::KN::AnimationAttributesArchive(*from._impl_.animationattributes_);
  }
  if (from._internal_has_action_motionpathsource()) {
    _this->_impl_.action_motionpathsource_ = new ::TSD::PathSourceArchive(*from._impl_.action_motionpathsource_);
  }
  ::memcpy(&_impl_.database_direction_, &from._impl_.database_direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.action_rotationdirection_) -
    reinterpret_cast<char*>(&_impl_.database_direction_)) + sizeof(_impl_.action_rotationdirection_));
  // @@protoc_insertion_point(copy_constructor:KN.BuildAttributesArchive)
}

inline void BuildAttributesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.database_animationtype_){}
    , decltype(_impl_.database_effect_){}
    , decltype(_impl_.motionpathstring_){}
    , decltype(_impl_.database_color_){nullptr}
    , decltype(_impl_.animationattributes_){nullptr}
    , decltype(_impl_.action_motionpathsource_){nullptr}
    , decltype(_impl_.database_direction_){0u}
    , decltype(_impl_.eventtrigger_){0u}
    , decltype(_impl_.database_delay_){0}
    , decltype(_impl_.delayautomaticafter_){0}
    , decltype(_impl_.delayautomaticwith_){0}
    , decltype(_impl_.database_duration_){0}
    , decltype(_impl_.action_rotationangle_){0}
    , decltype(_impl_.action_scalesize_){0}
    , decltype(_impl_.action_coloralpha_){0}
    , decltype(_impl_.action_acceleration_){0}
    , decltype(_impl_.curvestyle_){0}
    , decltype(_impl_.chartrotation3d_){0}
    , decltype(_impl_.custom_textdelivery_){0}
    , decltype(_impl_.custom_deliveryoption_){0}
    , decltype(_impl_.custom_bounce_){false}
    , decltype(_impl_.custom_action_decay_){false}
    , decltype(_impl_.custom_action_repeatcount_){0u}
    , decltype(_impl_.custom_action_scale_){0}
    , decltype(_impl_.custom_action_jiggleintensity_){0}
    , decltype(_impl_.startoffset_){0u}
    , decltype(_impl_.endoffset_){0u}
    , decltype(_impl_.action_rotationdirection_){31}
  };
  _impl_.database_animationtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_animationtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.database_effect_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_effect_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.motionpathstring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.motionpathstring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BuildAttributesArchive::~BuildAttributesArchive() {
  // @@protoc_insertion_point(destructor:KN.BuildAttributesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuildAttributesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.database_animationtype_.Destroy();
  _impl_.database_effect_.Destroy();
  _impl_.motionpathstring_.Destroy();
  if (this != internal_default_instance()) delete _impl_.database_color_;
  if (this != internal_default_instance()) delete _impl_.animationattributes_;
  if (this != internal_default_instance()) delete _impl_.action_motionpathsource_;
}

void BuildAttributesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuildAttributesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.BuildAttributesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.database_animationtype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.database_effect_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.motionpathstring_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.database_color_ != nullptr);
      _impl_.database_color_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.animationattributes_ != nullptr);
      _impl_.animationattributes_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.action_motionpathsource_ != nullptr);
      _impl_.action_motionpathsource_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.database_direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.eventtrigger_) -
        reinterpret_cast<char*>(&_impl_.database_direction_)) + sizeof(_impl_.eventtrigger_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.database_delay_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.action_acceleration_) -
        reinterpret_cast<char*>(&_impl_.database_delay_)) + sizeof(_impl_.action_acceleration_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.curvestyle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.custom_action_scale_) -
        reinterpret_cast<char*>(&_impl_.curvestyle_)) + sizeof(_impl_.custom_action_scale_));
  }
  if (cached_has_bits & 0x0f000000u) {
    ::memset(&_impl_.custom_action_jiggleintensity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.endoffset_) -
        reinterpret_cast<char*>(&_impl_.custom_action_jiggleintensity_)) + sizeof(_impl_.endoffset_));
    _impl_.action_rotationdirection_ = 31;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildAttributesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string database_animationType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_database_animationtype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.BuildAttributesArchive.database_animationType");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string database_effect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_database_effect();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.BuildAttributesArchive.database_effect");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 database_direction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_database_direction(&has_bits);
          _impl_.database_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 eventTrigger = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_eventtrigger(&has_bits);
          _impl_.eventtrigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double database_delay = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_database_delay(&has_bits);
          _impl_.database_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double delayAutomaticAfter = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_delayautomaticafter(&has_bits);
          _impl_.delayautomaticafter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double delayAutomaticWith = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_delayautomaticwith(&has_bits);
          _impl_.delayautomaticwith_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double database_duration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_database_duration(&has_bits);
          _impl_.database_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double action_rotationAngle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_action_rotationangle(&has_bits);
          _impl_.action_rotationangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.BuildAttributesArchive.BuildAttributesRotationDirection action_rotationDirection = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::BuildAttributesArchive_BuildAttributesRotationDirection_IsValid(val))) {
            _internal_set_action_rotationdirection(static_cast<::KN::BuildAttributesArchive_BuildAttributesRotationDirection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double action_scaleSize = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_action_scalesize(&has_bits);
          _impl_.action_scalesize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double action_colorAlpha = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_action_coloralpha(&has_bits);
          _impl_.action_coloralpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.BuildAttributesArchive.BuildAttributesAcceleration action_acceleration = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::BuildAttributesArchive_BuildAttributesAcceleration_IsValid(val))) {
            _internal_set_action_acceleration(static_cast<::KN::BuildAttributesArchive_BuildAttributesAcceleration>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .KN.BuildAttributesArchive.BuildAttributesCurveStyle curveStyle = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::BuildAttributesArchive_BuildAttributesCurveStyle_IsValid(val))) {
            _internal_set_curvestyle(static_cast<::KN::BuildAttributesArchive_BuildAttributesCurveStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string motionPathString = 15 [deprecated = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_motionpathstring();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.BuildAttributesArchive.motionPathString");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Color database_color = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double ChartRotation3D = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_chartrotation3d(&has_bits);
          _impl_.chartrotation3d_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.AnimationAttributesArchive animationAttributes = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_animationattributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool custom_bounce = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_custom_bounce(&has_bits);
          _impl_.custom_bounce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.BuildAttributesArchive.BuildAttributesTextDelivery custom_textDelivery = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::BuildAttributesArchive_BuildAttributesTextDelivery_IsValid(val))) {
            _internal_set_custom_textdelivery(static_cast<::KN::BuildAttributesArchive_BuildAttributesTextDelivery>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .KN.BuildAttributesArchive.BuildAttributesDeliveryOption custom_deliveryOption = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::BuildAttributesArchive_BuildAttributesDeliveryOption_IsValid(val))) {
            _internal_set_custom_deliveryoption(static_cast<::KN::BuildAttributesArchive_BuildAttributesDeliveryOption>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(21, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.PathSourceArchive action_motionPathSource = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_motionpathsource(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool custom_action_decay = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_custom_action_decay(&has_bits);
          _impl_.custom_action_decay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 custom_action_repeatCount = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_custom_action_repeatcount(&has_bits);
          _impl_.custom_action_repeatcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double custom_action_scale = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _Internal::set_has_custom_action_scale(&has_bits);
          _impl_.custom_action_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.BuildAttributesArchive.ActionBuildAttributesJiggleIntensity custom_action_jiggleIntensity = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_IsValid(val))) {
            _internal_set_custom_action_jiggleintensity(static_cast<::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(26, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 startOffset = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_startoffset(&has_bits);
          _impl_.startoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 endOffset = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_endoffset(&has_bits);
          _impl_.endoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuildAttributesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.BuildAttributesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string database_animationType = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_database_animationtype().data(), static_cast<int>(this->_internal_database_animationtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.BuildAttributesArchive.database_animationType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_database_animationtype(), target);
  }

  // optional string database_effect = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_database_effect().data(), static_cast<int>(this->_internal_database_effect().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.BuildAttributesArchive.database_effect");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_database_effect(), target);
  }

  // optional uint32 database_direction = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_database_direction(), target);
  }

  // optional uint32 eventTrigger = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_eventtrigger(), target);
  }

  // optional double database_delay = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_database_delay(), target);
  }

  // optional double delayAutomaticAfter = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_delayautomaticafter(), target);
  }

  // optional double delayAutomaticWith = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_delayautomaticwith(), target);
  }

  // optional double database_duration = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_database_duration(), target);
  }

  // optional double action_rotationAngle = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_action_rotationangle(), target);
  }

  // optional .KN.BuildAttributesArchive.BuildAttributesRotationDirection action_rotationDirection = 10;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_action_rotationdirection(), target);
  }

  // optional double action_scaleSize = 11;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_action_scalesize(), target);
  }

  // optional double action_colorAlpha = 12;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_action_coloralpha(), target);
  }

  // optional .KN.BuildAttributesArchive.BuildAttributesAcceleration action_acceleration = 13;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_action_acceleration(), target);
  }

  // optional .KN.BuildAttributesArchive.BuildAttributesCurveStyle curveStyle = 14;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_curvestyle(), target);
  }

  // optional string motionPathString = 15 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_motionpathstring().data(), static_cast<int>(this->_internal_motionpathstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.BuildAttributesArchive.motionPathString");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_motionpathstring(), target);
  }

  // optional .TSP.Color database_color = 16;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::database_color(this),
        _Internal::database_color(this).GetCachedSize(), target, stream);
  }

  // optional double ChartRotation3D = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_chartrotation3d(), target);
  }

  // optional .KN.AnimationAttributesArchive animationAttributes = 18;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::animationattributes(this),
        _Internal::animationattributes(this).GetCachedSize(), target, stream);
  }

  // optional bool custom_bounce = 19;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_custom_bounce(), target);
  }

  // optional .KN.BuildAttributesArchive.BuildAttributesTextDelivery custom_textDelivery = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      20, this->_internal_custom_textdelivery(), target);
  }

  // optional .KN.BuildAttributesArchive.BuildAttributesDeliveryOption custom_deliveryOption = 21;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      21, this->_internal_custom_deliveryoption(), target);
  }

  // optional .TSD.PathSourceArchive action_motionPathSource = 22;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::action_motionpathsource(this),
        _Internal::action_motionpathsource(this).GetCachedSize(), target, stream);
  }

  // optional bool custom_action_decay = 23;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_custom_action_decay(), target);
  }

  // optional uint32 custom_action_repeatCount = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_custom_action_repeatcount(), target);
  }

  // optional double custom_action_scale = 25;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(25, this->_internal_custom_action_scale(), target);
  }

  // optional .KN.BuildAttributesArchive.ActionBuildAttributesJiggleIntensity custom_action_jiggleIntensity = 26;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      26, this->_internal_custom_action_jiggleintensity(), target);
  }

  // optional uint32 startOffset = 27;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_startoffset(), target);
  }

  // optional uint32 endOffset = 28;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(28, this->_internal_endoffset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.BuildAttributesArchive)
  return target;
}

size_t BuildAttributesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.BuildAttributesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string database_animationType = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_database_animationtype());
    }

    // optional string database_effect = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_database_effect());
    }

    // optional string motionPathString = 15 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_motionpathstring());
    }

    // optional .TSP.Color database_color = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.database_color_);
    }

    // optional .KN.AnimationAttributesArchive animationAttributes = 18;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.animationattributes_);
    }

    // optional .TSD.PathSourceArchive action_motionPathSource = 22;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_motionpathsource_);
    }

    // optional uint32 database_direction = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_database_direction());
    }

    // optional uint32 eventTrigger = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_eventtrigger());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double database_delay = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double delayAutomaticAfter = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double delayAutomaticWith = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double database_duration = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double action_rotationAngle = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double action_scaleSize = 11;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double action_colorAlpha = 12;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional .KN.BuildAttributesArchive.BuildAttributesAcceleration action_acceleration = 13;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_action_acceleration());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .KN.BuildAttributesArchive.BuildAttributesCurveStyle curveStyle = 14;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_curvestyle());
    }

    // optional double ChartRotation3D = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional .KN.BuildAttributesArchive.BuildAttributesTextDelivery custom_textDelivery = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_custom_textdelivery());
    }

    // optional .KN.BuildAttributesArchive.BuildAttributesDeliveryOption custom_deliveryOption = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_custom_deliveryoption());
    }

    // optional bool custom_bounce = 19;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool custom_action_decay = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional uint32 custom_action_repeatCount = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_custom_action_repeatcount());
    }

    // optional double custom_action_scale = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x0f000000u) {
    // optional .KN.BuildAttributesArchive.ActionBuildAttributesJiggleIntensity custom_action_jiggleIntensity = 26;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_custom_action_jiggleintensity());
    }

    // optional uint32 startOffset = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_startoffset());
    }

    // optional uint32 endOffset = 28;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_endoffset());
    }

    // optional .KN.BuildAttributesArchive.BuildAttributesRotationDirection action_rotationDirection = 10;
    if (cached_has_bits & 0x08000000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_action_rotationdirection());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuildAttributesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BuildAttributesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuildAttributesArchive::GetClassData() const { return &_class_data_; }


void BuildAttributesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BuildAttributesArchive*>(&to_msg);
  auto& from = static_cast<const BuildAttributesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.BuildAttributesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_database_animationtype(from._internal_database_animationtype());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_database_effect(from._internal_database_effect());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_motionpathstring(from._internal_motionpathstring());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_database_color()->::TSP::Color::MergeFrom(
          from._internal_database_color());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_animationattributes()->::KN::AnimationAttributesArchive::MergeFrom(
          from._internal_animationattributes());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_action_motionpathsource()->::TSD::PathSourceArchive::MergeFrom(
          from._internal_action_motionpathsource());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.database_direction_ = from._impl_.database_direction_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.eventtrigger_ = from._impl_.eventtrigger_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.database_delay_ = from._impl_.database_delay_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.delayautomaticafter_ = from._impl_.delayautomaticafter_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.delayautomaticwith_ = from._impl_.delayautomaticwith_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.database_duration_ = from._impl_.database_duration_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.action_rotationangle_ = from._impl_.action_rotationangle_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.action_scalesize_ = from._impl_.action_scalesize_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.action_coloralpha_ = from._impl_.action_coloralpha_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.action_acceleration_ = from._impl_.action_acceleration_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.curvestyle_ = from._impl_.curvestyle_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.chartrotation3d_ = from._impl_.chartrotation3d_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.custom_textdelivery_ = from._impl_.custom_textdelivery_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.custom_deliveryoption_ = from._impl_.custom_deliveryoption_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.custom_bounce_ = from._impl_.custom_bounce_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.custom_action_decay_ = from._impl_.custom_action_decay_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.custom_action_repeatcount_ = from._impl_.custom_action_repeatcount_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.custom_action_scale_ = from._impl_.custom_action_scale_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.custom_action_jiggleintensity_ = from._impl_.custom_action_jiggleintensity_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.startoffset_ = from._impl_.startoffset_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.endoffset_ = from._impl_.endoffset_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.action_rotationdirection_ = from._impl_.action_rotationdirection_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuildAttributesArchive::CopyFrom(const BuildAttributesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.BuildAttributesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildAttributesArchive::IsInitialized() const {
  if (_internal_has_database_color()) {
    if (!_impl_.database_color_->IsInitialized()) return false;
  }
  if (_internal_has_animationattributes()) {
    if (!_impl_.animationattributes_->IsInitialized()) return false;
  }
  if (_internal_has_action_motionpathsource()) {
    if (!_impl_.action_motionpathsource_->IsInitialized()) return false;
  }
  return true;
}

void BuildAttributesArchive::InternalSwap(BuildAttributesArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.database_animationtype_, lhs_arena,
      &other->_impl_.database_animationtype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.database_effect_, lhs_arena,
      &other->_impl_.database_effect_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.motionpathstring_, lhs_arena,
      &other->_impl_.motionpathstring_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuildAttributesArchive, _impl_.endoffset_)
      + sizeof(BuildAttributesArchive::_impl_.endoffset_)
      - PROTOBUF_FIELD_OFFSET(BuildAttributesArchive, _impl_.database_color_)>(
          reinterpret_cast<char*>(&_impl_.database_color_),
          reinterpret_cast<char*>(&other->_impl_.database_color_));
  swap(_impl_.action_rotationdirection_, other->_impl_.action_rotationdirection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildAttributesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[4]);
}

// ===================================================================

class BuildArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BuildArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& drawable(const BuildArchive* msg);
  static void set_has_drawable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_delivery(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KN::BuildAttributesArchive& attributes(const BuildArchive* msg);
  static void set_has_attributes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSP::Reference&
BuildArchive::_Internal::drawable(const BuildArchive* msg) {
  return *msg->_impl_.drawable_;
}
const ::KN::BuildAttributesArchive&
BuildArchive::_Internal::attributes(const BuildArchive* msg) {
  return *msg->_impl_.attributes_;
}
void BuildArchive::clear_drawable() {
  if (_impl_.drawable_ != nullptr) _impl_.drawable_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
BuildArchive::BuildArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.BuildArchive)
}
BuildArchive::BuildArchive(const BuildArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BuildArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.delivery_){}
    , decltype(_impl_.drawable_){nullptr}
    , decltype(_impl_.attributes_){nullptr}
    , decltype(_impl_.duration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.delivery_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.delivery_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_delivery()) {
    _this->_impl_.delivery_.Set(from._internal_delivery(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_drawable()) {
    _this->_impl_.drawable_ = new ::TSP::Reference(*from._impl_.drawable_);
  }
  if (from._internal_has_attributes()) {
    _this->_impl_.attributes_ = new ::KN::BuildAttributesArchive(*from._impl_.attributes_);
  }
  _this->_impl_.duration_ = from._impl_.duration_;
  // @@protoc_insertion_point(copy_constructor:KN.BuildArchive)
}

inline void BuildArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.delivery_){}
    , decltype(_impl_.drawable_){nullptr}
    , decltype(_impl_.attributes_){nullptr}
    , decltype(_impl_.duration_){0}
  };
  _impl_.delivery_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.delivery_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BuildArchive::~BuildArchive() {
  // @@protoc_insertion_point(destructor:KN.BuildArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuildArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.delivery_.Destroy();
  if (this != internal_default_instance()) delete _impl_.drawable_;
  if (this != internal_default_instance()) delete _impl_.attributes_;
}

void BuildArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuildArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.BuildArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.delivery_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.drawable_ != nullptr);
      _impl_.drawable_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.attributes_ != nullptr);
      _impl_.attributes_->Clear();
    }
  }
  _impl_.duration_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference drawable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_drawable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string delivery = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_delivery();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.BuildArchive.delivery");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required double duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required .KN.BuildAttributesArchive attributes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuildArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.BuildArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference drawable = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::drawable(this),
        _Internal::drawable(this).GetCachedSize(), target, stream);
  }

  // required string delivery = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_delivery().data(), static_cast<int>(this->_internal_delivery().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.BuildArchive.delivery");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_delivery(), target);
  }

  // required double duration = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_duration(), target);
  }

  // required .KN.BuildAttributesArchive attributes = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::attributes(this),
        _Internal::attributes(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.BuildArchive)
  return target;
}

size_t BuildArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.BuildArchive)
  size_t total_size = 0;

  if (_internal_has_delivery()) {
    // required string delivery = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delivery());
  }

  if (_internal_has_drawable()) {
    // required .TSP.Reference drawable = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drawable_);
  }

  if (_internal_has_attributes()) {
    // required .KN.BuildAttributesArchive attributes = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attributes_);
  }

  if (_internal_has_duration()) {
    // required double duration = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t BuildArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.BuildArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string delivery = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delivery());

    // required .TSP.Reference drawable = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drawable_);

    // required .KN.BuildAttributesArchive attributes = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attributes_);

    // required double duration = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuildArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BuildArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuildArchive::GetClassData() const { return &_class_data_; }


void BuildArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BuildArchive*>(&to_msg);
  auto& from = static_cast<const BuildArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.BuildArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_delivery(from._internal_delivery());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_drawable()->::TSP::Reference::MergeFrom(
          from._internal_drawable());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_attributes()->::KN::BuildAttributesArchive::MergeFrom(
          from._internal_attributes());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuildArchive::CopyFrom(const BuildArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.BuildArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_drawable()) {
    if (!_impl_.drawable_->IsInitialized()) return false;
  }
  if (_internal_has_attributes()) {
    if (!_impl_.attributes_->IsInitialized()) return false;
  }
  return true;
}

void BuildArchive::InternalSwap(BuildArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.delivery_, lhs_arena,
      &other->_impl_.delivery_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuildArchive, _impl_.duration_)
      + sizeof(BuildArchive::_impl_.duration_)
      - PROTOBUF_FIELD_OFFSET(BuildArchive, _impl_.drawable_)>(
          reinterpret_cast<char*>(&_impl_.drawable_),
          reinterpret_cast<char*>(&other->_impl_.drawable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[5]);
}

// ===================================================================

class PlaceholderArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PlaceholderArchive>()._impl_._has_bits_);
  static const ::TSWP::ShapeInfoArchive& super(const PlaceholderArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::ShapeInfoArchive&
PlaceholderArchive::_Internal::super(const PlaceholderArchive* msg) {
  return *msg->_impl_.super_;
}
void PlaceholderArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PlaceholderArchive::PlaceholderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.PlaceholderArchive)
}
PlaceholderArchive::PlaceholderArchive(const PlaceholderArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlaceholderArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.kind_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSWP::ShapeInfoArchive(*from._impl_.super_);
  }
  _this->_impl_.kind_ = from._impl_.kind_;
  // @@protoc_insertion_point(copy_constructor:KN.PlaceholderArchive)
}

inline void PlaceholderArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.kind_){0}
  };
}

PlaceholderArchive::~PlaceholderArchive() {
  // @@protoc_insertion_point(destructor:KN.PlaceholderArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlaceholderArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void PlaceholderArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlaceholderArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.PlaceholderArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_.kind_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaceholderArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.ShapeInfoArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.PlaceholderArchive.Kind kind = 2 [default = kKindPlaceholder];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::PlaceholderArchive_Kind_IsValid(val))) {
            _internal_set_kind(static_cast<::KN::PlaceholderArchive_Kind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlaceholderArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.PlaceholderArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSWP.ShapeInfoArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .KN.PlaceholderArchive.Kind kind = 2 [default = kKindPlaceholder];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.PlaceholderArchive)
  return target;
}

size_t PlaceholderArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.PlaceholderArchive)
  size_t total_size = 0;

  // required .TSWP.ShapeInfoArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .KN.PlaceholderArchive.Kind kind = 2 [default = kKindPlaceholder];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlaceholderArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlaceholderArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlaceholderArchive::GetClassData() const { return &_class_data_; }


void PlaceholderArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlaceholderArchive*>(&to_msg);
  auto& from = static_cast<const PlaceholderArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.PlaceholderArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSWP::ShapeInfoArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kind_ = from._impl_.kind_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlaceholderArchive::CopyFrom(const PlaceholderArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.PlaceholderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceholderArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void PlaceholderArchive::InternalSwap(PlaceholderArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlaceholderArchive, _impl_.kind_)
      + sizeof(PlaceholderArchive::_impl_.kind_)
      - PROTOBUF_FIELD_OFFSET(PlaceholderArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceholderArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[6]);
}

// ===================================================================

class NoteArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<NoteArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& containedstorage(const NoteArchive* msg);
  static void set_has_containedstorage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
NoteArchive::_Internal::containedstorage(const NoteArchive* msg) {
  return *msg->_impl_.containedstorage_;
}
void NoteArchive::clear_containedstorage() {
  if (_impl_.containedstorage_ != nullptr) _impl_.containedstorage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
NoteArchive::NoteArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.NoteArchive)
}
NoteArchive::NoteArchive(const NoteArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NoteArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.containedstorage_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_containedstorage()) {
    _this->_impl_.containedstorage_ = new ::TSP::Reference(*from._impl_.containedstorage_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.NoteArchive)
}

inline void NoteArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.containedstorage_){nullptr}
  };
}

NoteArchive::~NoteArchive() {
  // @@protoc_insertion_point(destructor:KN.NoteArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NoteArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.containedstorage_;
}

void NoteArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NoteArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.NoteArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.containedstorage_ != nullptr);
    _impl_.containedstorage_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NoteArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference containedStorage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_containedstorage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NoteArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.NoteArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference containedStorage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::containedstorage(this),
        _Internal::containedstorage(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.NoteArchive)
  return target;
}

size_t NoteArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.NoteArchive)
  size_t total_size = 0;

  // required .TSP.Reference containedStorage = 1;
  if (_internal_has_containedstorage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.containedstorage_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NoteArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NoteArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NoteArchive::GetClassData() const { return &_class_data_; }


void NoteArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NoteArchive*>(&to_msg);
  auto& from = static_cast<const NoteArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.NoteArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_containedstorage()) {
    _this->_internal_mutable_containedstorage()->::TSP::Reference::MergeFrom(
        from._internal_containedstorage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NoteArchive::CopyFrom(const NoteArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.NoteArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoteArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_containedstorage()) {
    if (!_impl_.containedstorage_->IsInitialized()) return false;
  }
  return true;
}

void NoteArchive::InternalSwap(NoteArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.containedstorage_, other->_impl_.containedstorage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NoteArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[7]);
}

// ===================================================================

class ClassicStylesheetRecordArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ClassicStylesheetRecordArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& theme(const ClassicStylesheetRecordArchive* msg);
  static void set_has_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
ClassicStylesheetRecordArchive::_Internal::theme(const ClassicStylesheetRecordArchive* msg) {
  return *msg->_impl_.theme_;
}
void ClassicStylesheetRecordArchive::clear_identifier_to_style_map() {
  _impl_.identifier_to_style_map_.Clear();
}
void ClassicStylesheetRecordArchive::clear_theme() {
  if (_impl_.theme_ != nullptr) _impl_.theme_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ClassicStylesheetRecordArchive::ClassicStylesheetRecordArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.ClassicStylesheetRecordArchive)
}
ClassicStylesheetRecordArchive::ClassicStylesheetRecordArchive(const ClassicStylesheetRecordArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClassicStylesheetRecordArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_to_style_map_){from._impl_.identifier_to_style_map_}
    , decltype(_impl_.theme_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_theme()) {
    _this->_impl_.theme_ = new ::TSP::Reference(*from._impl_.theme_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.ClassicStylesheetRecordArchive)
}

inline void ClassicStylesheetRecordArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_to_style_map_){arena}
    , decltype(_impl_.theme_){nullptr}
  };
}

ClassicStylesheetRecordArchive::~ClassicStylesheetRecordArchive() {
  // @@protoc_insertion_point(destructor:KN.ClassicStylesheetRecordArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClassicStylesheetRecordArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identifier_to_style_map_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.theme_;
}

void ClassicStylesheetRecordArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClassicStylesheetRecordArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.ClassicStylesheetRecordArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.identifier_to_style_map_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.theme_ != nullptr);
    _impl_.theme_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClassicStylesheetRecordArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifier_to_style_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference theme = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClassicStylesheetRecordArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.ClassicStylesheetRecordArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_identifier_to_style_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_identifier_to_style_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference theme = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::theme(this),
        _Internal::theme(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.ClassicStylesheetRecordArchive)
  return target;
}

size_t ClassicStylesheetRecordArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.ClassicStylesheetRecordArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 1;
  total_size += 1UL * this->_internal_identifier_to_style_map_size();
  for (const auto& msg : this->_impl_.identifier_to_style_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference theme = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClassicStylesheetRecordArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClassicStylesheetRecordArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClassicStylesheetRecordArchive::GetClassData() const { return &_class_data_; }


void ClassicStylesheetRecordArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClassicStylesheetRecordArchive*>(&to_msg);
  auto& from = static_cast<const ClassicStylesheetRecordArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.ClassicStylesheetRecordArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.identifier_to_style_map_.MergeFrom(from._impl_.identifier_to_style_map_);
  if (from._internal_has_theme()) {
    _this->_internal_mutable_theme()->::TSP::Reference::MergeFrom(
        from._internal_theme());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClassicStylesheetRecordArchive::CopyFrom(const ClassicStylesheetRecordArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.ClassicStylesheetRecordArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassicStylesheetRecordArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.identifier_to_style_map_))
    return false;
  if (_internal_has_theme()) {
    if (!_impl_.theme_->IsInitialized()) return false;
  }
  return true;
}

void ClassicStylesheetRecordArchive::InternalSwap(ClassicStylesheetRecordArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.identifier_to_style_map_.InternalSwap(&other->_impl_.identifier_to_style_map_);
  swap(_impl_.theme_, other->_impl_.theme_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassicStylesheetRecordArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[8]);
}

// ===================================================================

class ClassicThemeRecordArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ClassicThemeRecordArchive>()._impl_._has_bits_);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& stylesheetrecord(const ClassicThemeRecordArchive* msg);
  static void set_has_stylesheetrecord(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
ClassicThemeRecordArchive::_Internal::stylesheetrecord(const ClassicThemeRecordArchive* msg) {
  return *msg->_impl_.stylesheetrecord_;
}
void ClassicThemeRecordArchive::clear_stylesheetrecord() {
  if (_impl_.stylesheetrecord_ != nullptr) _impl_.stylesheetrecord_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ClassicThemeRecordArchive::clear_masters() {
  _impl_.masters_.Clear();
}
ClassicThemeRecordArchive::ClassicThemeRecordArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.ClassicThemeRecordArchive)
}
ClassicThemeRecordArchive::ClassicThemeRecordArchive(const ClassicThemeRecordArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClassicThemeRecordArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.masters_){from._impl_.masters_}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.stylesheetrecord_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uuid()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stylesheetrecord()) {
    _this->_impl_.stylesheetrecord_ = new ::TSP::Reference(*from._impl_.stylesheetrecord_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.ClassicThemeRecordArchive)
}

inline void ClassicThemeRecordArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.masters_){arena}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.stylesheetrecord_){nullptr}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClassicThemeRecordArchive::~ClassicThemeRecordArchive() {
  // @@protoc_insertion_point(destructor:KN.ClassicThemeRecordArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClassicThemeRecordArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.masters_.~RepeatedPtrField();
  _impl_.uuid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stylesheetrecord_;
}

void ClassicThemeRecordArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClassicThemeRecordArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.ClassicThemeRecordArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.masters_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.uuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stylesheetrecord_ != nullptr);
      _impl_.stylesheetrecord_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClassicThemeRecordArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.ClassicThemeRecordArchive.uuid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference stylesheetRecord = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stylesheetrecord(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference masters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_masters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClassicThemeRecordArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.ClassicThemeRecordArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.ClassicThemeRecordArchive.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // optional .TSP.Reference stylesheetRecord = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::stylesheetrecord(this),
        _Internal::stylesheetrecord(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference masters = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_masters_size()); i < n; i++) {
    const auto& repfield = this->_internal_masters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.ClassicThemeRecordArchive)
  return target;
}

size_t ClassicThemeRecordArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.ClassicThemeRecordArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference masters = 3;
  total_size += 1UL * this->_internal_masters_size();
  for (const auto& msg : this->_impl_.masters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string uuid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uuid());
    }

    // optional .TSP.Reference stylesheetRecord = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stylesheetrecord_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClassicThemeRecordArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClassicThemeRecordArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClassicThemeRecordArchive::GetClassData() const { return &_class_data_; }


void ClassicThemeRecordArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClassicThemeRecordArchive*>(&to_msg);
  auto& from = static_cast<const ClassicThemeRecordArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.ClassicThemeRecordArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.masters_.MergeFrom(from._impl_.masters_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_uuid(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stylesheetrecord()->::TSP::Reference::MergeFrom(
          from._internal_stylesheetrecord());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClassicThemeRecordArchive::CopyFrom(const ClassicThemeRecordArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.ClassicThemeRecordArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassicThemeRecordArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.masters_))
    return false;
  if (_internal_has_stylesheetrecord()) {
    if (!_impl_.stylesheetrecord_->IsInitialized()) return false;
  }
  return true;
}

void ClassicThemeRecordArchive::InternalSwap(ClassicThemeRecordArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.masters_.InternalSwap(&other->_impl_.masters_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  swap(_impl_.stylesheetrecord_, other->_impl_.stylesheetrecord_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassicThemeRecordArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[9]);
}

// ===================================================================

class SlideArchive_SageTagMapEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideArchive_SageTagMapEntry>()._impl_._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& info(const SlideArchive_SageTagMapEntry* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Reference&
SlideArchive_SageTagMapEntry::_Internal::info(const SlideArchive_SageTagMapEntry* msg) {
  return *msg->_impl_.info_;
}
void SlideArchive_SageTagMapEntry::clear_info() {
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SlideArchive_SageTagMapEntry::SlideArchive_SageTagMapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.SlideArchive.SageTagMapEntry)
}
SlideArchive_SageTagMapEntry::SlideArchive_SageTagMapEntry(const SlideArchive_SageTagMapEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SlideArchive_SageTagMapEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tag()) {
    _this->_impl_.tag_.Set(from._internal_tag(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::TSP::Reference(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.SlideArchive.SageTagMapEntry)
}

inline void SlideArchive_SageTagMapEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.info_){nullptr}
  };
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SlideArchive_SageTagMapEntry::~SlideArchive_SageTagMapEntry() {
  // @@protoc_insertion_point(destructor:KN.SlideArchive.SageTagMapEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SlideArchive_SageTagMapEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tag_.Destroy();
  if (this != internal_default_instance()) delete _impl_.info_;
}

void SlideArchive_SageTagMapEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SlideArchive_SageTagMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideArchive.SageTagMapEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.info_ != nullptr);
      _impl_.info_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideArchive_SageTagMapEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.SlideArchive.SageTagMapEntry.tag");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SlideArchive_SageTagMapEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideArchive.SageTagMapEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.SlideArchive.SageTagMapEntry.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // required .TSP.Reference info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideArchive.SageTagMapEntry)
  return target;
}

size_t SlideArchive_SageTagMapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.SlideArchive.SageTagMapEntry)
  size_t total_size = 0;

  if (_internal_has_tag()) {
    // required string tag = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  if (_internal_has_info()) {
    // required .TSP.Reference info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return total_size;
}
size_t SlideArchive_SageTagMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideArchive.SageTagMapEntry)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string tag = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());

    // required .TSP.Reference info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideArchive_SageTagMapEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SlideArchive_SageTagMapEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideArchive_SageTagMapEntry::GetClassData() const { return &_class_data_; }


void SlideArchive_SageTagMapEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SlideArchive_SageTagMapEntry*>(&to_msg);
  auto& from = static_cast<const SlideArchive_SageTagMapEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideArchive.SageTagMapEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_info()->::TSP::Reference::MergeFrom(
          from._internal_info());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideArchive_SageTagMapEntry::CopyFrom(const SlideArchive_SageTagMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideArchive.SageTagMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideArchive_SageTagMapEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_info()) {
    if (!_impl_.info_->IsInitialized()) return false;
  }
  return true;
}

void SlideArchive_SageTagMapEntry::InternalSwap(SlideArchive_SageTagMapEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_, lhs_arena,
      &other->_impl_.tag_, rhs_arena
  );
  swap(_impl_.info_, other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideArchive_SageTagMapEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[10]);
}

// ===================================================================

class SlideArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& style(const SlideArchive* msg);
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KN::TransitionArchive& transition(const SlideArchive* msg);
  static void set_has_transition(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& titleplaceholder(const SlideArchive* msg);
  static void set_has_titleplaceholder(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& bodyplaceholder(const SlideArchive* msg);
  static void set_has_bodyplaceholder(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Reference& objectplaceholder(const SlideArchive* msg);
  static void set_has_objectplaceholder(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSP::Reference& slidenumberplaceholder(const SlideArchive* msg);
  static void set_has_slidenumberplaceholder(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::GeometryArchive& titleplaceholdergeometry(const SlideArchive* msg);
  static void set_has_titleplaceholdergeometry(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_titleplaceholdershapestyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_titleplaceholdertextstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::TSWP::ShapeStylePropertiesArchive& titlelayoutproperties(const SlideArchive* msg);
  static void set_has_titlelayoutproperties(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSD::GeometryArchive& bodyplaceholdergeometry(const SlideArchive* msg);
  static void set_has_bodyplaceholdergeometry(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_bodyplaceholdershapestyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_bodyplaceholdertextstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::TSWP::ShapeStylePropertiesArchive& bodylayoutproperties(const SlideArchive* msg);
  static void set_has_bodylayoutproperties(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSD::GeometryArchive& slidenumberplaceholdergeometry(const SlideArchive* msg);
  static void set_has_slidenumberplaceholdergeometry(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_slidenumberplaceholdershapestyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_slidenumberplaceholdertextstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::TSWP::ShapeStylePropertiesArchive& slidenumberlayoutproperties(const SlideArchive* msg);
  static void set_has_slidenumberlayoutproperties(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::Reference& classicstylesheetrecord(const SlideArchive* msg);
  static void set_has_classicstylesheetrecord(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_thumbnailtextfortitleplaceholder(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_thumbnailtextforbodyplaceholder(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& master(const SlideArchive* msg);
  static void set_has_master(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Reference& userdefinedguidestorage(const SlideArchive* msg);
  static void set_has_userdefinedguidestorage(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_indocument(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::TSP::Reference& note(const SlideArchive* msg);
  static void set_has_note(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSP::Reference& info_using_object_placeholder_geometry(const SlideArchive* msg);
  static void set_has_info_using_object_placeholder_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_info_using_object_placeholder_geometry_matches_object_placeholder_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_deprecated_objectplaceholdervisibleforexport(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x04000018) ^ 0x04000018) != 0;
  }
};

const ::TSP::Reference&
SlideArchive::_Internal::style(const SlideArchive* msg) {
  return *msg->_impl_.style_;
}
const ::KN::TransitionArchive&
SlideArchive::_Internal::transition(const SlideArchive* msg) {
  return *msg->_impl_.transition_;
}
const ::TSP::Reference&
SlideArchive::_Internal::titleplaceholder(const SlideArchive* msg) {
  return *msg->_impl_.titleplaceholder_;
}
const ::TSP::Reference&
SlideArchive::_Internal::bodyplaceholder(const SlideArchive* msg) {
  return *msg->_impl_.bodyplaceholder_;
}
const ::TSP::Reference&
SlideArchive::_Internal::objectplaceholder(const SlideArchive* msg) {
  return *msg->_impl_.objectplaceholder_;
}
const ::TSP::Reference&
SlideArchive::_Internal::slidenumberplaceholder(const SlideArchive* msg) {
  return *msg->_impl_.slidenumberplaceholder_;
}
const ::TSD::GeometryArchive&
SlideArchive::_Internal::titleplaceholdergeometry(const SlideArchive* msg) {
  return *msg->_impl_.titleplaceholdergeometry_;
}
const ::TSWP::ShapeStylePropertiesArchive&
SlideArchive::_Internal::titlelayoutproperties(const SlideArchive* msg) {
  return *msg->_impl_.titlelayoutproperties_;
}
const ::TSD::GeometryArchive&
SlideArchive::_Internal::bodyplaceholdergeometry(const SlideArchive* msg) {
  return *msg->_impl_.bodyplaceholdergeometry_;
}
const ::TSWP::ShapeStylePropertiesArchive&
SlideArchive::_Internal::bodylayoutproperties(const SlideArchive* msg) {
  return *msg->_impl_.bodylayoutproperties_;
}
const ::TSD::GeometryArchive&
SlideArchive::_Internal::slidenumberplaceholdergeometry(const SlideArchive* msg) {
  return *msg->_impl_.slidenumberplaceholdergeometry_;
}
const ::TSWP::ShapeStylePropertiesArchive&
SlideArchive::_Internal::slidenumberlayoutproperties(const SlideArchive* msg) {
  return *msg->_impl_.slidenumberlayoutproperties_;
}
const ::TSP::Reference&
SlideArchive::_Internal::classicstylesheetrecord(const SlideArchive* msg) {
  return *msg->_impl_.classicstylesheetrecord_;
}
const ::TSP::Reference&
SlideArchive::_Internal::master(const SlideArchive* msg) {
  return *msg->_impl_.master_;
}
const ::TSP::Reference&
SlideArchive::_Internal::userdefinedguidestorage(const SlideArchive* msg) {
  return *msg->_impl_.userdefinedguidestorage_;
}
const ::TSP::Reference&
SlideArchive::_Internal::note(const SlideArchive* msg) {
  return *msg->_impl_.note_;
}
const ::TSP::Reference&
SlideArchive::_Internal::info_using_object_placeholder_geometry(const SlideArchive* msg) {
  return *msg->_impl_.info_using_object_placeholder_geometry_;
}
void SlideArchive::clear_style() {
  if (_impl_.style_ != nullptr) _impl_.style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void SlideArchive::clear_builds() {
  _impl_.builds_.Clear();
}
void SlideArchive::clear_titleplaceholder() {
  if (_impl_.titleplaceholder_ != nullptr) _impl_.titleplaceholder_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void SlideArchive::clear_bodyplaceholder() {
  if (_impl_.bodyplaceholder_ != nullptr) _impl_.bodyplaceholder_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void SlideArchive::clear_objectplaceholder() {
  if (_impl_.objectplaceholder_ != nullptr) _impl_.objectplaceholder_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
void SlideArchive::clear_slidenumberplaceholder() {
  if (_impl_.slidenumberplaceholder_ != nullptr) _impl_.slidenumberplaceholder_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void SlideArchive::clear_drawables() {
  _impl_.drawables_.Clear();
}
void SlideArchive::clear_titleplaceholdergeometry() {
  if (_impl_.titleplaceholdergeometry_ != nullptr) _impl_.titleplaceholdergeometry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void SlideArchive::clear_titlelayoutproperties() {
  if (_impl_.titlelayoutproperties_ != nullptr) _impl_.titlelayoutproperties_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void SlideArchive::clear_bodyplaceholdergeometry() {
  if (_impl_.bodyplaceholdergeometry_ != nullptr) _impl_.bodyplaceholdergeometry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void SlideArchive::clear_bodylayoutproperties() {
  if (_impl_.bodylayoutproperties_ != nullptr) _impl_.bodylayoutproperties_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void SlideArchive::clear_slidenumberplaceholdergeometry() {
  if (_impl_.slidenumberplaceholdergeometry_ != nullptr) _impl_.slidenumberplaceholdergeometry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void SlideArchive::clear_slidenumberlayoutproperties() {
  if (_impl_.slidenumberlayoutproperties_ != nullptr) _impl_.slidenumberlayoutproperties_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void SlideArchive::clear_classicstylesheetrecord() {
  if (_impl_.classicstylesheetrecord_ != nullptr) _impl_.classicstylesheetrecord_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
void SlideArchive::clear_bodyparagraphstyles() {
  _impl_.bodyparagraphstyles_.Clear();
}
void SlideArchive::clear_bodyliststyles() {
  _impl_.bodyliststyles_.Clear();
}
void SlideArchive::clear_master() {
  if (_impl_.master_ != nullptr) _impl_.master_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void SlideArchive::clear_staticguides() {
  _impl_.staticguides_.Clear();
}
void SlideArchive::clear_userdefinedguidestorage() {
  if (_impl_.userdefinedguidestorage_ != nullptr) _impl_.userdefinedguidestorage_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
void SlideArchive::clear_note() {
  if (_impl_.note_ != nullptr) _impl_.note_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
void SlideArchive::clear_info_using_object_placeholder_geometry() {
  if (_impl_.info_using_object_placeholder_geometry_ != nullptr) _impl_.info_using_object_placeholder_geometry_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
SlideArchive::SlideArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.SlideArchive)
}
SlideArchive::SlideArchive(const SlideArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SlideArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.builds_){from._impl_.builds_}
    , decltype(_impl_.buildchunks_){from._impl_.buildchunks_}
    , decltype(_impl_.drawables_){from._impl_.drawables_}
    , decltype(_impl_.staticguides_){from._impl_.staticguides_}
    , decltype(_impl_.sage_tag_to_info_map_){from._impl_.sage_tag_to_info_map_}
    , decltype(_impl_.bodyparagraphstyles_){from._impl_.bodyparagraphstyles_}
    , decltype(_impl_.bodyliststyles_){from._impl_.bodyliststyles_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.thumbnailtextfortitleplaceholder_){}
    , decltype(_impl_.thumbnailtextforbodyplaceholder_){}
    , decltype(_impl_.style_){nullptr}
    , decltype(_impl_.transition_){nullptr}
    , decltype(_impl_.titleplaceholder_){nullptr}
    , decltype(_impl_.bodyplaceholder_){nullptr}
    , decltype(_impl_.titleplaceholdergeometry_){nullptr}
    , decltype(_impl_.bodyplaceholdergeometry_){nullptr}
    , decltype(_impl_.master_){nullptr}
    , decltype(_impl_.slidenumberplaceholder_){nullptr}
    , decltype(_impl_.slidenumberplaceholdergeometry_){nullptr}
    , decltype(_impl_.titlelayoutproperties_){nullptr}
    , decltype(_impl_.bodylayoutproperties_){nullptr}
    , decltype(_impl_.slidenumberlayoutproperties_){nullptr}
    , decltype(_impl_.note_){nullptr}
    , decltype(_impl_.classicstylesheetrecord_){nullptr}
    , decltype(_impl_.objectplaceholder_){nullptr}
    , decltype(_impl_.userdefinedguidestorage_){nullptr}
    , decltype(_impl_.info_using_object_placeholder_geometry_){nullptr}
    , decltype(_impl_.titleplaceholdershapestyleindex_){}
    , decltype(_impl_.titleplaceholdertextstyleindex_){}
    , decltype(_impl_.bodyplaceholdershapestyleindex_){}
    , decltype(_impl_.bodyplaceholdertextstyleindex_){}
    , decltype(_impl_.slidenumberplaceholdershapestyleindex_){}
    , decltype(_impl_.slidenumberplaceholdertextstyleindex_){}
    , decltype(_impl_.indocument_){}
    , decltype(_impl_.info_using_object_placeholder_geometry_matches_object_placeholder_geometry_){}
    , decltype(_impl_.deprecated_objectplaceholdervisibleforexport_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnailtextfortitleplaceholder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailtextfortitleplaceholder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnailtextfortitleplaceholder()) {
    _this->_impl_.thumbnailtextfortitleplaceholder_.Set(from._internal_thumbnailtextfortitleplaceholder(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnailtextforbodyplaceholder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailtextforbodyplaceholder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnailtextforbodyplaceholder()) {
    _this->_impl_.thumbnailtextforbodyplaceholder_.Set(from._internal_thumbnailtextforbodyplaceholder(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_style()) {
    _this->_impl_.style_ = new ::TSP::Reference(*from._impl_.style_);
  }
  if (from._internal_has_transition()) {
    _this->_impl_.transition_ = new ::KN::TransitionArchive(*from._impl_.transition_);
  }
  if (from._internal_has_titleplaceholder()) {
    _this->_impl_.titleplaceholder_ = new ::TSP::Reference(*from._impl_.titleplaceholder_);
  }
  if (from._internal_has_bodyplaceholder()) {
    _this->_impl_.bodyplaceholder_ = new ::TSP::Reference(*from._impl_.bodyplaceholder_);
  }
  if (from._internal_has_titleplaceholdergeometry()) {
    _this->_impl_.titleplaceholdergeometry_ = new ::TSD::GeometryArchive(*from._impl_.titleplaceholdergeometry_);
  }
  if (from._internal_has_bodyplaceholdergeometry()) {
    _this->_impl_.bodyplaceholdergeometry_ = new ::TSD::GeometryArchive(*from._impl_.bodyplaceholdergeometry_);
  }
  if (from._internal_has_master()) {
    _this->_impl_.master_ = new ::TSP::Reference(*from._impl_.master_);
  }
  if (from._internal_has_slidenumberplaceholder()) {
    _this->_impl_.slidenumberplaceholder_ = new ::TSP::Reference(*from._impl_.slidenumberplaceholder_);
  }
  if (from._internal_has_slidenumberplaceholdergeometry()) {
    _this->_impl_.slidenumberplaceholdergeometry_ = new ::TSD::GeometryArchive(*from._impl_.slidenumberplaceholdergeometry_);
  }
  if (from._internal_has_titlelayoutproperties()) {
    _this->_impl_.titlelayoutproperties_ = new ::TSWP::ShapeStylePropertiesArchive(*from._impl_.titlelayoutproperties_);
  }
  if (from._internal_has_bodylayoutproperties()) {
    _this->_impl_.bodylayoutproperties_ = new ::TSWP::ShapeStylePropertiesArchive(*from._impl_.bodylayoutproperties_);
  }
  if (from._internal_has_slidenumberlayoutproperties()) {
    _this->_impl_.slidenumberlayoutproperties_ = new ::TSWP::ShapeStylePropertiesArchive(*from._impl_.slidenumberlayoutproperties_);
  }
  if (from._internal_has_note()) {
    _this->_impl_.note_ = new ::TSP::Reference(*from._impl_.note_);
  }
  if (from._internal_has_classicstylesheetrecord()) {
    _this->_impl_.classicstylesheetrecord_ = new ::TSP::Reference(*from._impl_.classicstylesheetrecord_);
  }
  if (from._internal_has_objectplaceholder()) {
    _this->_impl_.objectplaceholder_ = new ::TSP::Reference(*from._impl_.objectplaceholder_);
  }
  if (from._internal_has_userdefinedguidestorage()) {
    _this->_impl_.userdefinedguidestorage_ = new ::TSP::Reference(*from._impl_.userdefinedguidestorage_);
  }
  if (from._internal_has_info_using_object_placeholder_geometry()) {
    _this->_impl_.info_using_object_placeholder_geometry_ = new ::TSP::Reference(*from._impl_.info_using_object_placeholder_geometry_);
  }
  ::memcpy(&_impl_.titleplaceholdershapestyleindex_, &from._impl_.titleplaceholdershapestyleindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.deprecated_objectplaceholdervisibleforexport_) -
    reinterpret_cast<char*>(&_impl_.titleplaceholdershapestyleindex_)) + sizeof(_impl_.deprecated_objectplaceholdervisibleforexport_));
  // @@protoc_insertion_point(copy_constructor:KN.SlideArchive)
}

inline void SlideArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.builds_){arena}
    , decltype(_impl_.buildchunks_){arena}
    , decltype(_impl_.drawables_){arena}
    , decltype(_impl_.staticguides_){arena}
    , decltype(_impl_.sage_tag_to_info_map_){arena}
    , decltype(_impl_.bodyparagraphstyles_){arena}
    , decltype(_impl_.bodyliststyles_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.thumbnailtextfortitleplaceholder_){}
    , decltype(_impl_.thumbnailtextforbodyplaceholder_){}
    , decltype(_impl_.style_){nullptr}
    , decltype(_impl_.transition_){nullptr}
    , decltype(_impl_.titleplaceholder_){nullptr}
    , decltype(_impl_.bodyplaceholder_){nullptr}
    , decltype(_impl_.titleplaceholdergeometry_){nullptr}
    , decltype(_impl_.bodyplaceholdergeometry_){nullptr}
    , decltype(_impl_.master_){nullptr}
    , decltype(_impl_.slidenumberplaceholder_){nullptr}
    , decltype(_impl_.slidenumberplaceholdergeometry_){nullptr}
    , decltype(_impl_.titlelayoutproperties_){nullptr}
    , decltype(_impl_.bodylayoutproperties_){nullptr}
    , decltype(_impl_.slidenumberlayoutproperties_){nullptr}
    , decltype(_impl_.note_){nullptr}
    , decltype(_impl_.classicstylesheetrecord_){nullptr}
    , decltype(_impl_.objectplaceholder_){nullptr}
    , decltype(_impl_.userdefinedguidestorage_){nullptr}
    , decltype(_impl_.info_using_object_placeholder_geometry_){nullptr}
    , decltype(_impl_.titleplaceholdershapestyleindex_){0u}
    , decltype(_impl_.titleplaceholdertextstyleindex_){0u}
    , decltype(_impl_.bodyplaceholdershapestyleindex_){0u}
    , decltype(_impl_.bodyplaceholdertextstyleindex_){0u}
    , decltype(_impl_.slidenumberplaceholdershapestyleindex_){0u}
    , decltype(_impl_.slidenumberplaceholdertextstyleindex_){0u}
    , decltype(_impl_.indocument_){false}
    , decltype(_impl_.info_using_object_placeholder_geometry_matches_object_placeholder_geometry_){false}
    , decltype(_impl_.deprecated_objectplaceholdervisibleforexport_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnailtextfortitleplaceholder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailtextfortitleplaceholder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnailtextforbodyplaceholder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailtextforbodyplaceholder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SlideArchive::~SlideArchive() {
  // @@protoc_insertion_point(destructor:KN.SlideArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SlideArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.builds_.~RepeatedPtrField();
  _impl_.buildchunks_.~RepeatedPtrField();
  _impl_.drawables_.~RepeatedPtrField();
  _impl_.staticguides_.~RepeatedPtrField();
  _impl_.sage_tag_to_info_map_.~RepeatedPtrField();
  _impl_.bodyparagraphstyles_.~RepeatedPtrField();
  _impl_.bodyliststyles_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.thumbnailtextfortitleplaceholder_.Destroy();
  _impl_.thumbnailtextforbodyplaceholder_.Destroy();
  if (this != internal_default_instance()) delete _impl_.style_;
  if (this != internal_default_instance()) delete _impl_.transition_;
  if (this != internal_default_instance()) delete _impl_.titleplaceholder_;
  if (this != internal_default_instance()) delete _impl_.bodyplaceholder_;
  if (this != internal_default_instance()) delete _impl_.titleplaceholdergeometry_;
  if (this != internal_default_instance()) delete _impl_.bodyplaceholdergeometry_;
  if (this != internal_default_instance()) delete _impl_.master_;
  if (this != internal_default_instance()) delete _impl_.slidenumberplaceholder_;
  if (this != internal_default_instance()) delete _impl_.slidenumberplaceholdergeometry_;
  if (this != internal_default_instance()) delete _impl_.titlelayoutproperties_;
  if (this != internal_default_instance()) delete _impl_.bodylayoutproperties_;
  if (this != internal_default_instance()) delete _impl_.slidenumberlayoutproperties_;
  if (this != internal_default_instance()) delete _impl_.note_;
  if (this != internal_default_instance()) delete _impl_.classicstylesheetrecord_;
  if (this != internal_default_instance()) delete _impl_.objectplaceholder_;
  if (this != internal_default_instance()) delete _impl_.userdefinedguidestorage_;
  if (this != internal_default_instance()) delete _impl_.info_using_object_placeholder_geometry_;
}

void SlideArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SlideArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.builds_.Clear();
  _impl_.buildchunks_.Clear();
  _impl_.drawables_.Clear();
  _impl_.staticguides_.Clear();
  _impl_.sage_tag_to_info_map_.Clear();
  _impl_.bodyparagraphstyles_.Clear();
  _impl_.bodyliststyles_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.thumbnailtextfortitleplaceholder_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.thumbnailtextforbodyplaceholder_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.style_ != nullptr);
      _impl_.style_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.transition_ != nullptr);
      _impl_.transition_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.titleplaceholder_ != nullptr);
      _impl_.titleplaceholder_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.bodyplaceholder_ != nullptr);
      _impl_.bodyplaceholder_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.titleplaceholdergeometry_ != nullptr);
      _impl_.titleplaceholdergeometry_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.bodyplaceholdergeometry_ != nullptr);
      _impl_.bodyplaceholdergeometry_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.master_ != nullptr);
      _impl_.master_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.slidenumberplaceholder_ != nullptr);
      _impl_.slidenumberplaceholder_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.slidenumberplaceholdergeometry_ != nullptr);
      _impl_.slidenumberplaceholdergeometry_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.titlelayoutproperties_ != nullptr);
      _impl_.titlelayoutproperties_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.bodylayoutproperties_ != nullptr);
      _impl_.bodylayoutproperties_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.slidenumberlayoutproperties_ != nullptr);
      _impl_.slidenumberlayoutproperties_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.note_ != nullptr);
      _impl_.note_->Clear();
    }
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.classicstylesheetrecord_ != nullptr);
      _impl_.classicstylesheetrecord_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.objectplaceholder_ != nullptr);
      _impl_.objectplaceholder_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.userdefinedguidestorage_ != nullptr);
      _impl_.userdefinedguidestorage_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.info_using_object_placeholder_geometry_ != nullptr);
      _impl_.info_using_object_placeholder_geometry_->Clear();
    }
  }
  if (cached_has_bits & 0x00f00000u) {
    ::memset(&_impl_.titleplaceholdershapestyleindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bodyplaceholdertextstyleindex_) -
        reinterpret_cast<char*>(&_impl_.titleplaceholdershapestyleindex_)) + sizeof(_impl_.bodyplaceholdertextstyleindex_));
  }
  if (cached_has_bits & 0x1f000000u) {
    ::memset(&_impl_.slidenumberplaceholdershapestyleindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.deprecated_objectplaceholdervisibleforexport_) -
        reinterpret_cast<char*>(&_impl_.slidenumberplaceholdershapestyleindex_)) + sizeof(_impl_.deprecated_objectplaceholdervisibleforexport_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference builds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_builds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkArchive buildChunks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buildchunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .KN.TransitionArchive transition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_transition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference titlePlaceholder = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_titleplaceholder(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference bodyPlaceholder = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_bodyplaceholder(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference drawables = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.SlideArchive.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive titlePlaceholderGeometry = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_titleplaceholdergeometry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 titlePlaceholderShapeStyleIndex = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_titleplaceholdershapestyleindex(&has_bits);
          _impl_.titleplaceholdershapestyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 titlePlaceholderTextStyleIndex = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_titleplaceholdertextstyleindex(&has_bits);
          _impl_.titleplaceholdertextstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive bodyPlaceholderGeometry = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_bodyplaceholdergeometry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bodyPlaceholderShapeStyleIndex = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_bodyplaceholdershapestyleindex(&has_bits);
          _impl_.bodyplaceholdershapestyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bodyPlaceholderTextStyleIndex = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_bodyplaceholdertextstyleindex(&has_bits);
          _impl_.bodyplaceholdertextstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference master = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_master(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSD.GuideArchive staticGuides = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_staticguides(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required bool inDocument = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_indocument(&has_bits);
          _impl_.indocument_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference slideNumberPlaceholder = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_slidenumberplaceholder(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive slideNumberPlaceholderGeometry = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_slidenumberplaceholdergeometry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 slideNumberPlaceholderShapeStyleIndex = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_slidenumberplaceholdershapestyleindex(&has_bits);
          _impl_.slidenumberplaceholdershapestyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 slideNumberPlaceholderTextStyleIndex = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_slidenumberplaceholdertextstyleindex(&has_bits);
          _impl_.slidenumberplaceholdertextstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ShapeStylePropertiesArchive titleLayoutProperties = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_titlelayoutproperties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ShapeStylePropertiesArchive bodyLayoutProperties = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_bodylayoutproperties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ShapeStylePropertiesArchive slideNumberLayoutProperties = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_slidenumberlayoutproperties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference note = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_note(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.SlideArchive.SageTagMapEntry sage_tag_to_info_map = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_sage_tag_to_info_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference classicStylesheetRecord = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_classicstylesheetrecord(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference objectPlaceholder = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_objectplaceholder(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference bodyParagraphStyles = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_bodyparagraphstyles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool deprecated_objectPlaceholderVisibleForExport = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_deprecated_objectplaceholdervisibleforexport(&has_bits);
          _impl_.deprecated_objectplaceholdervisibleforexport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference bodyListStyles = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_bodyliststyles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<282>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference userDefinedGuideStorage = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_userdefinedguidestorage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string thumbnailTextForTitlePlaceholder = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_thumbnailtextfortitleplaceholder();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.SlideArchive.thumbnailTextForTitlePlaceholder");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string thumbnailTextForBodyPlaceholder = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_thumbnailtextforbodyplaceholder();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.SlideArchive.thumbnailTextForBodyPlaceholder");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference info_using_object_placeholder_geometry = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_info_using_object_placeholder_geometry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool info_using_object_placeholder_geometry_matches_object_placeholder_geometry = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_info_using_object_placeholder_geometry_matches_object_placeholder_geometry(&has_bits);
          _impl_.info_using_object_placeholder_geometry_matches_object_placeholder_geometry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SlideArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference style = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::style(this),
        _Internal::style(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference builds = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_builds_size()); i < n; i++) {
    const auto& repfield = this->_internal_builds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .KN.BuildChunkArchive buildChunks = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buildchunks_size()); i < n; i++) {
    const auto& repfield = this->_internal_buildchunks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .KN.TransitionArchive transition = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::transition(this),
        _Internal::transition(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference titlePlaceholder = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::titleplaceholder(this),
        _Internal::titleplaceholder(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference bodyPlaceholder = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::bodyplaceholder(this),
        _Internal::bodyplaceholder(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference drawables = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_drawables_size()); i < n; i++) {
    const auto& repfield = this->_internal_drawables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.SlideArchive.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  // optional .TSD.GeometryArchive titlePlaceholderGeometry = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::titleplaceholdergeometry(this),
        _Internal::titleplaceholdergeometry(this).GetCachedSize(), target, stream);
  }

  // optional uint32 titlePlaceholderShapeStyleIndex = 12;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_titleplaceholdershapestyleindex(), target);
  }

  // optional uint32 titlePlaceholderTextStyleIndex = 13;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_titleplaceholdertextstyleindex(), target);
  }

  // optional .TSD.GeometryArchive bodyPlaceholderGeometry = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::bodyplaceholdergeometry(this),
        _Internal::bodyplaceholdergeometry(this).GetCachedSize(), target, stream);
  }

  // optional uint32 bodyPlaceholderShapeStyleIndex = 15;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_bodyplaceholdershapestyleindex(), target);
  }

  // optional uint32 bodyPlaceholderTextStyleIndex = 16;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_bodyplaceholdertextstyleindex(), target);
  }

  // optional .TSP.Reference master = 17;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::master(this),
        _Internal::master(this).GetCachedSize(), target, stream);
  }

  // repeated .TSD.GuideArchive staticGuides = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_staticguides_size()); i < n; i++) {
    const auto& repfield = this->_internal_staticguides(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required bool inDocument = 19;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_indocument(), target);
  }

  // optional .TSP.Reference slideNumberPlaceholder = 20;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::slidenumberplaceholder(this),
        _Internal::slidenumberplaceholder(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.GeometryArchive slideNumberPlaceholderGeometry = 21;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::slidenumberplaceholdergeometry(this),
        _Internal::slidenumberplaceholdergeometry(this).GetCachedSize(), target, stream);
  }

  // optional uint32 slideNumberPlaceholderShapeStyleIndex = 22;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_slidenumberplaceholdershapestyleindex(), target);
  }

  // optional uint32 slideNumberPlaceholderTextStyleIndex = 23;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_slidenumberplaceholdertextstyleindex(), target);
  }

  // optional .TSWP.ShapeStylePropertiesArchive titleLayoutProperties = 24;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::titlelayoutproperties(this),
        _Internal::titlelayoutproperties(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.ShapeStylePropertiesArchive bodyLayoutProperties = 25;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::bodylayoutproperties(this),
        _Internal::bodylayoutproperties(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.ShapeStylePropertiesArchive slideNumberLayoutProperties = 26;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::slidenumberlayoutproperties(this),
        _Internal::slidenumberlayoutproperties(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference note = 27;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::note(this),
        _Internal::note(this).GetCachedSize(), target, stream);
  }

  // repeated .KN.SlideArchive.SageTagMapEntry sage_tag_to_info_map = 28;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sage_tag_to_info_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_sage_tag_to_info_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(28, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference classicStylesheetRecord = 29;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::classicstylesheetrecord(this),
        _Internal::classicstylesheetrecord(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference objectPlaceholder = 30;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::objectplaceholder(this),
        _Internal::objectplaceholder(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference bodyParagraphStyles = 31;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bodyparagraphstyles_size()); i < n; i++) {
    const auto& repfield = this->_internal_bodyparagraphstyles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(31, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool deprecated_objectPlaceholderVisibleForExport = 34;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(34, this->_internal_deprecated_objectplaceholdervisibleforexport(), target);
  }

  // repeated .TSP.Reference bodyListStyles = 35;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bodyliststyles_size()); i < n; i++) {
    const auto& repfield = this->_internal_bodyliststyles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(35, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference userDefinedGuideStorage = 36;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, _Internal::userdefinedguidestorage(this),
        _Internal::userdefinedguidestorage(this).GetCachedSize(), target, stream);
  }

  // optional string thumbnailTextForTitlePlaceholder = 37;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thumbnailtextfortitleplaceholder().data(), static_cast<int>(this->_internal_thumbnailtextfortitleplaceholder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.SlideArchive.thumbnailTextForTitlePlaceholder");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_thumbnailtextfortitleplaceholder(), target);
  }

  // optional string thumbnailTextForBodyPlaceholder = 38;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thumbnailtextforbodyplaceholder().data(), static_cast<int>(this->_internal_thumbnailtextforbodyplaceholder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.SlideArchive.thumbnailTextForBodyPlaceholder");
    target = stream->WriteStringMaybeAliased(
        38, this->_internal_thumbnailtextforbodyplaceholder(), target);
  }

  // optional .TSP.Reference info_using_object_placeholder_geometry = 39;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, _Internal::info_using_object_placeholder_geometry(this),
        _Internal::info_using_object_placeholder_geometry(this).GetCachedSize(), target, stream);
  }

  // optional bool info_using_object_placeholder_geometry_matches_object_placeholder_geometry = 40;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(40, this->_internal_info_using_object_placeholder_geometry_matches_object_placeholder_geometry(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideArchive)
  return target;
}

size_t SlideArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.SlideArchive)
  size_t total_size = 0;

  if (_internal_has_style()) {
    // required .TSP.Reference style = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.style_);
  }

  if (_internal_has_transition()) {
    // required .KN.TransitionArchive transition = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transition_);
  }

  if (_internal_has_indocument()) {
    // required bool inDocument = 19;
    total_size += 2 + 1;
  }

  return total_size;
}
size_t SlideArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x04000018) ^ 0x04000018) == 0) {  // All required fields are present.
    // required .TSP.Reference style = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.style_);

    // required .KN.TransitionArchive transition = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transition_);

    // required bool inDocument = 19;
    total_size += 2 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference builds = 2;
  total_size += 1UL * this->_internal_builds_size();
  for (const auto& msg : this->_impl_.builds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkArchive buildChunks = 3;
  total_size += 1UL * this->_internal_buildchunks_size();
  for (const auto& msg : this->_impl_.buildchunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference drawables = 7;
  total_size += 1UL * this->_internal_drawables_size();
  for (const auto& msg : this->_impl_.drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSD.GuideArchive staticGuides = 18;
  total_size += 2UL * this->_internal_staticguides_size();
  for (const auto& msg : this->_impl_.staticguides_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.SlideArchive.SageTagMapEntry sage_tag_to_info_map = 28;
  total_size += 2UL * this->_internal_sage_tag_to_info_map_size();
  for (const auto& msg : this->_impl_.sage_tag_to_info_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference bodyParagraphStyles = 31;
  total_size += 2UL * this->_internal_bodyparagraphstyles_size();
  for (const auto& msg : this->_impl_.bodyparagraphstyles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference bodyListStyles = 35;
  total_size += 2UL * this->_internal_bodyliststyles_size();
  for (const auto& msg : this->_impl_.bodyliststyles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string thumbnailTextForTitlePlaceholder = 37;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thumbnailtextfortitleplaceholder());
    }

    // optional string thumbnailTextForBodyPlaceholder = 38;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thumbnailtextforbodyplaceholder());
    }

  }
  if (cached_has_bits & 0x000000e0u) {
    // optional .TSP.Reference titlePlaceholder = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.titleplaceholder_);
    }

    // optional .TSP.Reference bodyPlaceholder = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bodyplaceholder_);
    }

    // optional .TSD.GeometryArchive titlePlaceholderGeometry = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.titleplaceholdergeometry_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSD.GeometryArchive bodyPlaceholderGeometry = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bodyplaceholdergeometry_);
    }

    // optional .TSP.Reference master = 17;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.master_);
    }

    // optional .TSP.Reference slideNumberPlaceholder = 20;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.slidenumberplaceholder_);
    }

    // optional .TSD.GeometryArchive slideNumberPlaceholderGeometry = 21;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.slidenumberplaceholdergeometry_);
    }

    // optional .TSWP.ShapeStylePropertiesArchive titleLayoutProperties = 24;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.titlelayoutproperties_);
    }

    // optional .TSWP.ShapeStylePropertiesArchive bodyLayoutProperties = 25;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bodylayoutproperties_);
    }

    // optional .TSWP.ShapeStylePropertiesArchive slideNumberLayoutProperties = 26;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.slidenumberlayoutproperties_);
    }

    // optional .TSP.Reference note = 27;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.note_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TSP.Reference classicStylesheetRecord = 29;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.classicstylesheetrecord_);
    }

    // optional .TSP.Reference objectPlaceholder = 30;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.objectplaceholder_);
    }

    // optional .TSP.Reference userDefinedGuideStorage = 36;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.userdefinedguidestorage_);
    }

    // optional .TSP.Reference info_using_object_placeholder_geometry = 39;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.info_using_object_placeholder_geometry_);
    }

    // optional uint32 titlePlaceholderShapeStyleIndex = 12;
    if (cached_has_bits & 0x00100000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_titleplaceholdershapestyleindex());
    }

    // optional uint32 titlePlaceholderTextStyleIndex = 13;
    if (cached_has_bits & 0x00200000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_titleplaceholdertextstyleindex());
    }

    // optional uint32 bodyPlaceholderShapeStyleIndex = 15;
    if (cached_has_bits & 0x00400000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bodyplaceholdershapestyleindex());
    }

    // optional uint32 bodyPlaceholderTextStyleIndex = 16;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_bodyplaceholdertextstyleindex());
    }

  }
  if (cached_has_bits & 0x03000000u) {
    // optional uint32 slideNumberPlaceholderShapeStyleIndex = 22;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_slidenumberplaceholdershapestyleindex());
    }

    // optional uint32 slideNumberPlaceholderTextStyleIndex = 23;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_slidenumberplaceholdertextstyleindex());
    }

  }
  if (cached_has_bits & 0x18000000u) {
    // optional bool info_using_object_placeholder_geometry_matches_object_placeholder_geometry = 40;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool deprecated_objectPlaceholderVisibleForExport = 34;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SlideArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideArchive::GetClassData() const { return &_class_data_; }


void SlideArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SlideArchive*>(&to_msg);
  auto& from = static_cast<const SlideArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.builds_.MergeFrom(from._impl_.builds_);
  _this->_impl_.buildchunks_.MergeFrom(from._impl_.buildchunks_);
  _this->_impl_.drawables_.MergeFrom(from._impl_.drawables_);
  _this->_impl_.staticguides_.MergeFrom(from._impl_.staticguides_);
  _this->_impl_.sage_tag_to_info_map_.MergeFrom(from._impl_.sage_tag_to_info_map_);
  _this->_impl_.bodyparagraphstyles_.MergeFrom(from._impl_.bodyparagraphstyles_);
  _this->_impl_.bodyliststyles_.MergeFrom(from._impl_.bodyliststyles_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_thumbnailtextfortitleplaceholder(from._internal_thumbnailtextfortitleplaceholder());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_thumbnailtextforbodyplaceholder(from._internal_thumbnailtextforbodyplaceholder());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_style()->::TSP::Reference::MergeFrom(
          from._internal_style());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_transition()->::KN::TransitionArchive::MergeFrom(
          from._internal_transition());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_titleplaceholder()->::TSP::Reference::MergeFrom(
          from._internal_titleplaceholder());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_bodyplaceholder()->::TSP::Reference::MergeFrom(
          from._internal_bodyplaceholder());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_titleplaceholdergeometry()->::TSD::GeometryArchive::MergeFrom(
          from._internal_titleplaceholdergeometry());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_bodyplaceholdergeometry()->::TSD::GeometryArchive::MergeFrom(
          from._internal_bodyplaceholdergeometry());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_master()->::TSP::Reference::MergeFrom(
          from._internal_master());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_slidenumberplaceholder()->::TSP::Reference::MergeFrom(
          from._internal_slidenumberplaceholder());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_slidenumberplaceholdergeometry()->::TSD::GeometryArchive::MergeFrom(
          from._internal_slidenumberplaceholdergeometry());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_titlelayoutproperties()->::TSWP::ShapeStylePropertiesArchive::MergeFrom(
          from._internal_titlelayoutproperties());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_bodylayoutproperties()->::TSWP::ShapeStylePropertiesArchive::MergeFrom(
          from._internal_bodylayoutproperties());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_slidenumberlayoutproperties()->::TSWP::ShapeStylePropertiesArchive::MergeFrom(
          from._internal_slidenumberlayoutproperties());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_note()->::TSP::Reference::MergeFrom(
          from._internal_note());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_classicstylesheetrecord()->::TSP::Reference::MergeFrom(
          from._internal_classicstylesheetrecord());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_objectplaceholder()->::TSP::Reference::MergeFrom(
          from._internal_objectplaceholder());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_userdefinedguidestorage()->::TSP::Reference::MergeFrom(
          from._internal_userdefinedguidestorage());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_info_using_object_placeholder_geometry()->::TSP::Reference::MergeFrom(
          from._internal_info_using_object_placeholder_geometry());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.titleplaceholdershapestyleindex_ = from._impl_.titleplaceholdershapestyleindex_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.titleplaceholdertextstyleindex_ = from._impl_.titleplaceholdertextstyleindex_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.bodyplaceholdershapestyleindex_ = from._impl_.bodyplaceholdershapestyleindex_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.bodyplaceholdertextstyleindex_ = from._impl_.bodyplaceholdertextstyleindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x1f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.slidenumberplaceholdershapestyleindex_ = from._impl_.slidenumberplaceholdershapestyleindex_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.slidenumberplaceholdertextstyleindex_ = from._impl_.slidenumberplaceholdertextstyleindex_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.indocument_ = from._impl_.indocument_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.info_using_object_placeholder_geometry_matches_object_placeholder_geometry_ = from._impl_.info_using_object_placeholder_geometry_matches_object_placeholder_geometry_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.deprecated_objectplaceholdervisibleforexport_ = from._impl_.deprecated_objectplaceholdervisibleforexport_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideArchive::CopyFrom(const SlideArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.builds_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.buildchunks_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.drawables_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.sage_tag_to_info_map_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.bodyparagraphstyles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.bodyliststyles_))
    return false;
  if (_internal_has_style()) {
    if (!_impl_.style_->IsInitialized()) return false;
  }
  if (_internal_has_transition()) {
    if (!_impl_.transition_->IsInitialized()) return false;
  }
  if (_internal_has_titleplaceholder()) {
    if (!_impl_.titleplaceholder_->IsInitialized()) return false;
  }
  if (_internal_has_bodyplaceholder()) {
    if (!_impl_.bodyplaceholder_->IsInitialized()) return false;
  }
  if (_internal_has_titleplaceholdergeometry()) {
    if (!_impl_.titleplaceholdergeometry_->IsInitialized()) return false;
  }
  if (_internal_has_bodyplaceholdergeometry()) {
    if (!_impl_.bodyplaceholdergeometry_->IsInitialized()) return false;
  }
  if (_internal_has_master()) {
    if (!_impl_.master_->IsInitialized()) return false;
  }
  if (_internal_has_slidenumberplaceholder()) {
    if (!_impl_.slidenumberplaceholder_->IsInitialized()) return false;
  }
  if (_internal_has_slidenumberplaceholdergeometry()) {
    if (!_impl_.slidenumberplaceholdergeometry_->IsInitialized()) return false;
  }
  if (_internal_has_titlelayoutproperties()) {
    if (!_impl_.titlelayoutproperties_->IsInitialized()) return false;
  }
  if (_internal_has_bodylayoutproperties()) {
    if (!_impl_.bodylayoutproperties_->IsInitialized()) return false;
  }
  if (_internal_has_slidenumberlayoutproperties()) {
    if (!_impl_.slidenumberlayoutproperties_->IsInitialized()) return false;
  }
  if (_internal_has_note()) {
    if (!_impl_.note_->IsInitialized()) return false;
  }
  if (_internal_has_classicstylesheetrecord()) {
    if (!_impl_.classicstylesheetrecord_->IsInitialized()) return false;
  }
  if (_internal_has_objectplaceholder()) {
    if (!_impl_.objectplaceholder_->IsInitialized()) return false;
  }
  if (_internal_has_userdefinedguidestorage()) {
    if (!_impl_.userdefinedguidestorage_->IsInitialized()) return false;
  }
  if (_internal_has_info_using_object_placeholder_geometry()) {
    if (!_impl_.info_using_object_placeholder_geometry_->IsInitialized()) return false;
  }
  return true;
}

void SlideArchive::InternalSwap(SlideArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.builds_.InternalSwap(&other->_impl_.builds_);
  _impl_.buildchunks_.InternalSwap(&other->_impl_.buildchunks_);
  _impl_.drawables_.InternalSwap(&other->_impl_.drawables_);
  _impl_.staticguides_.InternalSwap(&other->_impl_.staticguides_);
  _impl_.sage_tag_to_info_map_.InternalSwap(&other->_impl_.sage_tag_to_info_map_);
  _impl_.bodyparagraphstyles_.InternalSwap(&other->_impl_.bodyparagraphstyles_);
  _impl_.bodyliststyles_.InternalSwap(&other->_impl_.bodyliststyles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnailtextfortitleplaceholder_, lhs_arena,
      &other->_impl_.thumbnailtextfortitleplaceholder_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnailtextforbodyplaceholder_, lhs_arena,
      &other->_impl_.thumbnailtextforbodyplaceholder_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SlideArchive, _impl_.deprecated_objectplaceholdervisibleforexport_)
      + sizeof(SlideArchive::_impl_.deprecated_objectplaceholdervisibleforexport_)
      - PROTOBUF_FIELD_OFFSET(SlideArchive, _impl_.style_)>(
          reinterpret_cast<char*>(&_impl_.style_),
          reinterpret_cast<char*>(&other->_impl_.style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[11]);
}

// ===================================================================

class SlideNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideNodeArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& slide(const SlideNodeArchive* msg);
  static void set_has_slide(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_thumbnailsaredirty(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ishidden(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_iscollapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_iscollapsedinoutlineview(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_hasbodyinoutlineview(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_hasbuilds(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_hastransition(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_hasnote(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_isslidenumbervisible(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_uniqueidentifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_copyfromslideidentifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_slidespecifichyperlinkcount(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_eventcount(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSP::Reference& database_thumbnail(const SlideNodeArchive* msg);
  static void set_has_database_thumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000660) ^ 0x00000660) != 0;
  }
};

const ::TSP::Reference&
SlideNodeArchive::_Internal::slide(const SlideNodeArchive* msg) {
  return *msg->_impl_.slide_;
}
const ::TSP::Reference&
SlideNodeArchive::_Internal::database_thumbnail(const SlideNodeArchive* msg) {
  return *msg->_impl_.database_thumbnail_;
}
void SlideNodeArchive::clear_children() {
  _impl_.children_.Clear();
}
void SlideNodeArchive::clear_slide() {
  if (_impl_.slide_ != nullptr) _impl_.slide_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void SlideNodeArchive::clear_thumbnails() {
  _impl_.thumbnails_.Clear();
}
void SlideNodeArchive::clear_thumbnailsizes() {
  _impl_.thumbnailsizes_.Clear();
}
void SlideNodeArchive::clear_database_thumbnail() {
  if (_impl_.database_thumbnail_ != nullptr) _impl_.database_thumbnail_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void SlideNodeArchive::clear_database_thumbnails() {
  _impl_.database_thumbnails_.Clear();
}
SlideNodeArchive::SlideNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.SlideNodeArchive)
}
SlideNodeArchive::SlideNodeArchive(const SlideNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SlideNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.children_){from._impl_.children_}
    , decltype(_impl_.database_thumbnails_){from._impl_.database_thumbnails_}
    , decltype(_impl_.thumbnailsizes_){from._impl_.thumbnailsizes_}
    , decltype(_impl_.thumbnails_){from._impl_.thumbnails_}
    , decltype(_impl_.uniqueidentifier_){}
    , decltype(_impl_.copyfromslideidentifier_){}
    , decltype(_impl_.slide_){nullptr}
    , decltype(_impl_.database_thumbnail_){nullptr}
    , decltype(_impl_.thumbnailsaredirty_){}
    , decltype(_impl_.ishidden_){}
    , decltype(_impl_.iscollapsed_){}
    , decltype(_impl_.iscollapsedinoutlineview_){}
    , decltype(_impl_.hasbodyinoutlineview_){}
    , decltype(_impl_.hasbuilds_){}
    , decltype(_impl_.hastransition_){}
    , decltype(_impl_.hasnote_){}
    , decltype(_impl_.slidespecifichyperlinkcount_){}
    , decltype(_impl_.eventcount_){}
    , decltype(_impl_.isslidenumbervisible_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uniqueidentifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uniqueidentifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uniqueidentifier()) {
    _this->_impl_.uniqueidentifier_.Set(from._internal_uniqueidentifier(), 
      _this->GetArenaForAllocation());
  }
  _impl_.copyfromslideidentifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.copyfromslideidentifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_copyfromslideidentifier()) {
    _this->_impl_.copyfromslideidentifier_.Set(from._internal_copyfromslideidentifier(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_slide()) {
    _this->_impl_.slide_ = new ::TSP::Reference(*from._impl_.slide_);
  }
  if (from._internal_has_database_thumbnail()) {
    _this->_impl_.database_thumbnail_ = new ::TSP::Reference(*from._impl_.database_thumbnail_);
  }
  ::memcpy(&_impl_.thumbnailsaredirty_, &from._impl_.thumbnailsaredirty_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isslidenumbervisible_) -
    reinterpret_cast<char*>(&_impl_.thumbnailsaredirty_)) + sizeof(_impl_.isslidenumbervisible_));
  // @@protoc_insertion_point(copy_constructor:KN.SlideNodeArchive)
}

inline void SlideNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.children_){arena}
    , decltype(_impl_.database_thumbnails_){arena}
    , decltype(_impl_.thumbnailsizes_){arena}
    , decltype(_impl_.thumbnails_){arena}
    , decltype(_impl_.uniqueidentifier_){}
    , decltype(_impl_.copyfromslideidentifier_){}
    , decltype(_impl_.slide_){nullptr}
    , decltype(_impl_.database_thumbnail_){nullptr}
    , decltype(_impl_.thumbnailsaredirty_){false}
    , decltype(_impl_.ishidden_){false}
    , decltype(_impl_.iscollapsed_){false}
    , decltype(_impl_.iscollapsedinoutlineview_){false}
    , decltype(_impl_.hasbodyinoutlineview_){false}
    , decltype(_impl_.hasbuilds_){false}
    , decltype(_impl_.hastransition_){false}
    , decltype(_impl_.hasnote_){false}
    , decltype(_impl_.slidespecifichyperlinkcount_){0u}
    , decltype(_impl_.eventcount_){0u}
    , decltype(_impl_.isslidenumbervisible_){false}
  };
  _impl_.uniqueidentifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uniqueidentifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.copyfromslideidentifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.copyfromslideidentifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SlideNodeArchive::~SlideNodeArchive() {
  // @@protoc_insertion_point(destructor:KN.SlideNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SlideNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.children_.~RepeatedPtrField();
  _impl_.database_thumbnails_.~RepeatedPtrField();
  _impl_.thumbnailsizes_.~RepeatedPtrField();
  _impl_.thumbnails_.~RepeatedPtrField();
  _impl_.uniqueidentifier_.Destroy();
  _impl_.copyfromslideidentifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.slide_;
  if (this != internal_default_instance()) delete _impl_.database_thumbnail_;
}

void SlideNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SlideNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.children_.Clear();
  _impl_.database_thumbnails_.Clear();
  _impl_.thumbnailsizes_.Clear();
  _impl_.thumbnails_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.uniqueidentifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.copyfromslideidentifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.slide_ != nullptr);
      _impl_.slide_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.database_thumbnail_ != nullptr);
      _impl_.database_thumbnail_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.thumbnailsaredirty_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.iscollapsedinoutlineview_) -
        reinterpret_cast<char*>(&_impl_.thumbnailsaredirty_)) + sizeof(_impl_.iscollapsedinoutlineview_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.hasbodyinoutlineview_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.isslidenumbervisible_) -
        reinterpret_cast<char*>(&_impl_.hasbodyinoutlineview_)) + sizeof(_impl_.isslidenumbervisible_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference children = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference slide = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference database_thumbnail = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_thumbnail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool isHidden = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ishidden(&has_bits);
          _impl_.ishidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool isCollapsed = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_iscollapsed(&has_bits);
          _impl_.iscollapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool hasBuilds = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_hasbuilds(&has_bits);
          _impl_.hasbuilds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool hasTransition = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_hastransition(&has_bits);
          _impl_.hastransition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hasNote = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_hasnote(&has_bits);
          _impl_.hasnote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference database_thumbnails = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_database_thumbnails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Size thumbnailSizes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_thumbnailsizes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string uniqueIdentifier = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_uniqueidentifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.SlideNodeArchive.uniqueIdentifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string copyFromSlideIdentifier = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_copyfromslideidentifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.SlideNodeArchive.copyFromSlideIdentifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 slideSpecificHyperlinkCount = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_slidespecifichyperlinkcount(&has_bits);
          _impl_.slidespecifichyperlinkcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool thumbnailsAreDirty = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_thumbnailsaredirty(&has_bits);
          _impl_.thumbnailsaredirty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 eventCount = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_eventcount(&has_bits);
          _impl_.eventcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.DataReference thumbnails = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_thumbnails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool isCollapsedInOutlineView = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_iscollapsedinoutlineview(&has_bits);
          _impl_.iscollapsedinoutlineview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool isSlideNumberVisible = 18 [default = false];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_isslidenumbervisible(&has_bits);
          _impl_.isslidenumbervisible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hasBodyInOutlineView = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_hasbodyinoutlineview(&has_bits);
          _impl_.hasbodyinoutlineview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SlideNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference children = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_children_size()); i < n; i++) {
    const auto& repfield = this->_internal_children(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference slide = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slide(this),
        _Internal::slide(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference database_thumbnail = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::database_thumbnail(this),
        _Internal::database_thumbnail(this).GetCachedSize(), target, stream);
  }

  // required bool isHidden = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_ishidden(), target);
  }

  // required bool isCollapsed = 5 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_iscollapsed(), target);
  }

  // required bool hasBuilds = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_hasbuilds(), target);
  }

  // required bool hasTransition = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_hastransition(), target);
  }

  // optional bool hasNote = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_hasnote(), target);
  }

  // repeated .TSP.Reference database_thumbnails = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_database_thumbnails_size()); i < n; i++) {
    const auto& repfield = this->_internal_database_thumbnails(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Size thumbnailSizes = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_thumbnailsizes_size()); i < n; i++) {
    const auto& repfield = this->_internal_thumbnailsizes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string uniqueIdentifier = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uniqueidentifier().data(), static_cast<int>(this->_internal_uniqueidentifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.SlideNodeArchive.uniqueIdentifier");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_uniqueidentifier(), target);
  }

  // optional string copyFromSlideIdentifier = 12;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_copyfromslideidentifier().data(), static_cast<int>(this->_internal_copyfromslideidentifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.SlideNodeArchive.copyFromSlideIdentifier");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_copyfromslideidentifier(), target);
  }

  // optional uint32 slideSpecificHyperlinkCount = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_slidespecifichyperlinkcount(), target);
  }

  // optional bool thumbnailsAreDirty = 14;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_thumbnailsaredirty(), target);
  }

  // optional uint32 eventCount = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_eventcount(), target);
  }

  // repeated .TSP.DataReference thumbnails = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_thumbnails_size()); i < n; i++) {
    const auto& repfield = this->_internal_thumbnails(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool isCollapsedInOutlineView = 17;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_iscollapsedinoutlineview(), target);
  }

  // optional bool isSlideNumberVisible = 18 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_isslidenumbervisible(), target);
  }

  // optional bool hasBodyInOutlineView = 19;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_hasbodyinoutlineview(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideNodeArchive)
  return target;
}

size_t SlideNodeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.SlideNodeArchive)
  size_t total_size = 0;

  if (_internal_has_ishidden()) {
    // required bool isHidden = 4;
    total_size += 1 + 1;
  }

  if (_internal_has_iscollapsed()) {
    // required bool isCollapsed = 5 [deprecated = true];
    total_size += 1 + 1;
  }

  if (_internal_has_hasbuilds()) {
    // required bool hasBuilds = 6;
    total_size += 1 + 1;
  }

  if (_internal_has_hastransition()) {
    // required bool hasTransition = 7;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t SlideNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideNodeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000660) ^ 0x00000660) == 0) {  // All required fields are present.
    // required bool isHidden = 4;
    total_size += 1 + 1;

    // required bool isCollapsed = 5 [deprecated = true];
    total_size += 1 + 1;

    // required bool hasBuilds = 6;
    total_size += 1 + 1;

    // required bool hasTransition = 7;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference children = 1;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->_impl_.children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference database_thumbnails = 9;
  total_size += 1UL * this->_internal_database_thumbnails_size();
  for (const auto& msg : this->_impl_.database_thumbnails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Size thumbnailSizes = 10;
  total_size += 1UL * this->_internal_thumbnailsizes_size();
  for (const auto& msg : this->_impl_.thumbnailsizes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.DataReference thumbnails = 16;
  total_size += 2UL * this->_internal_thumbnails_size();
  for (const auto& msg : this->_impl_.thumbnails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string uniqueIdentifier = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uniqueidentifier());
    }

    // optional string copyFromSlideIdentifier = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_copyfromslideidentifier());
    }

    // optional .TSP.Reference slide = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.slide_);
    }

    // optional .TSP.Reference database_thumbnail = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.database_thumbnail_);
    }

    // optional bool thumbnailsAreDirty = 14;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  // optional bool isCollapsedInOutlineView = 17;
  if (cached_has_bits & 0x00000080u) {
    total_size += 2 + 1;
  }

  // optional bool hasBodyInOutlineView = 19;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 + 1;
  }

  if (cached_has_bits & 0x00007800u) {
    // optional bool hasNote = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional uint32 slideSpecificHyperlinkCount = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_slidespecifichyperlinkcount());
    }

    // optional uint32 eventCount = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_eventcount());
    }

    // optional bool isSlideNumberVisible = 18 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SlideNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideNodeArchive::GetClassData() const { return &_class_data_; }


void SlideNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SlideNodeArchive*>(&to_msg);
  auto& from = static_cast<const SlideNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.children_.MergeFrom(from._impl_.children_);
  _this->_impl_.database_thumbnails_.MergeFrom(from._impl_.database_thumbnails_);
  _this->_impl_.thumbnailsizes_.MergeFrom(from._impl_.thumbnailsizes_);
  _this->_impl_.thumbnails_.MergeFrom(from._impl_.thumbnails_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_uniqueidentifier(from._internal_uniqueidentifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_copyfromslideidentifier(from._internal_copyfromslideidentifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_slide()->::TSP::Reference::MergeFrom(
          from._internal_slide());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_database_thumbnail()->::TSP::Reference::MergeFrom(
          from._internal_database_thumbnail());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.thumbnailsaredirty_ = from._impl_.thumbnailsaredirty_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.ishidden_ = from._impl_.ishidden_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.iscollapsed_ = from._impl_.iscollapsed_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.iscollapsedinoutlineview_ = from._impl_.iscollapsedinoutlineview_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.hasbodyinoutlineview_ = from._impl_.hasbodyinoutlineview_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.hasbuilds_ = from._impl_.hasbuilds_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.hastransition_ = from._impl_.hastransition_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.hasnote_ = from._impl_.hasnote_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.slidespecifichyperlinkcount_ = from._impl_.slidespecifichyperlinkcount_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.eventcount_ = from._impl_.eventcount_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.isslidenumbervisible_ = from._impl_.isslidenumbervisible_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideNodeArchive::CopyFrom(const SlideNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.children_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.database_thumbnails_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.thumbnailsizes_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.thumbnails_))
    return false;
  if (_internal_has_slide()) {
    if (!_impl_.slide_->IsInitialized()) return false;
  }
  if (_internal_has_database_thumbnail()) {
    if (!_impl_.database_thumbnail_->IsInitialized()) return false;
  }
  return true;
}

void SlideNodeArchive::InternalSwap(SlideNodeArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.children_.InternalSwap(&other->_impl_.children_);
  _impl_.database_thumbnails_.InternalSwap(&other->_impl_.database_thumbnails_);
  _impl_.thumbnailsizes_.InternalSwap(&other->_impl_.thumbnailsizes_);
  _impl_.thumbnails_.InternalSwap(&other->_impl_.thumbnails_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uniqueidentifier_, lhs_arena,
      &other->_impl_.uniqueidentifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.copyfromslideidentifier_, lhs_arena,
      &other->_impl_.copyfromslideidentifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SlideNodeArchive, _impl_.isslidenumbervisible_)
      + sizeof(SlideNodeArchive::_impl_.isslidenumbervisible_)
      - PROTOBUF_FIELD_OFFSET(SlideNodeArchive, _impl_.slide_)>(
          reinterpret_cast<char*>(&_impl_.slide_),
          reinterpret_cast<char*>(&other->_impl_.slide_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[12]);
}

// ===================================================================

class DesktopUILayoutArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DesktopUILayoutArchive>()._impl_._has_bits_);
  static void set_has_sidebar_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sidebar_view_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_notes_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_light_table_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_inspector_pane_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_inspector_pane_view_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

DesktopUILayoutArchive::DesktopUILayoutArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.DesktopUILayoutArchive)
}
DesktopUILayoutArchive::DesktopUILayoutArchive(const DesktopUILayoutArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DesktopUILayoutArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sidebar_view_mode_){}
    , decltype(_impl_.sidebar_visible_){}
    , decltype(_impl_.notes_visible_){}
    , decltype(_impl_.light_table_visible_){}
    , decltype(_impl_.inspector_pane_view_mode_){}
    , decltype(_impl_.inspector_pane_visible_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.sidebar_view_mode_, &from._impl_.sidebar_view_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.inspector_pane_visible_) -
    reinterpret_cast<char*>(&_impl_.sidebar_view_mode_)) + sizeof(_impl_.inspector_pane_visible_));
  // @@protoc_insertion_point(copy_constructor:KN.DesktopUILayoutArchive)
}

inline void DesktopUILayoutArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sidebar_view_mode_){0}
    , decltype(_impl_.sidebar_visible_){false}
    , decltype(_impl_.notes_visible_){false}
    , decltype(_impl_.light_table_visible_){false}
    , decltype(_impl_.inspector_pane_view_mode_){0}
    , decltype(_impl_.inspector_pane_visible_){true}
  };
}

DesktopUILayoutArchive::~DesktopUILayoutArchive() {
  // @@protoc_insertion_point(destructor:KN.DesktopUILayoutArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DesktopUILayoutArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DesktopUILayoutArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DesktopUILayoutArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.DesktopUILayoutArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.sidebar_view_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.inspector_pane_view_mode_) -
        reinterpret_cast<char*>(&_impl_.sidebar_view_mode_)) + sizeof(_impl_.inspector_pane_view_mode_));
    _impl_.inspector_pane_visible_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DesktopUILayoutArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool sidebar_visible = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sidebar_visible(&has_bits);
          _impl_.sidebar_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.DesktopUILayoutArchive.SidebarViewMode sidebar_view_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::DesktopUILayoutArchive_SidebarViewMode_IsValid(val))) {
            _internal_set_sidebar_view_mode(static_cast<::KN::DesktopUILayoutArchive_SidebarViewMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool notes_visible = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_notes_visible(&has_bits);
          _impl_.notes_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool light_table_visible = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_light_table_visible(&has_bits);
          _impl_.light_table_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool inspector_pane_visible = 6 [default = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_inspector_pane_visible(&has_bits);
          _impl_.inspector_pane_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.DesktopUILayoutArchive.InspectorPaneViewMode inspector_pane_view_mode = 7 [default = kInspectorPaneViewModeFormat];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::DesktopUILayoutArchive_InspectorPaneViewMode_IsValid(val))) {
            _internal_set_inspector_pane_view_mode(static_cast<::KN::DesktopUILayoutArchive_InspectorPaneViewMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DesktopUILayoutArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.DesktopUILayoutArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool sidebar_visible = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_sidebar_visible(), target);
  }

  // optional .KN.DesktopUILayoutArchive.SidebarViewMode sidebar_view_mode = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_sidebar_view_mode(), target);
  }

  // optional bool notes_visible = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_notes_visible(), target);
  }

  // optional bool light_table_visible = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_light_table_visible(), target);
  }

  // optional bool inspector_pane_visible = 6 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_inspector_pane_visible(), target);
  }

  // optional .KN.DesktopUILayoutArchive.InspectorPaneViewMode inspector_pane_view_mode = 7 [default = kInspectorPaneViewModeFormat];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_inspector_pane_view_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.DesktopUILayoutArchive)
  return target;
}

size_t DesktopUILayoutArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.DesktopUILayoutArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .KN.DesktopUILayoutArchive.SidebarViewMode sidebar_view_mode = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_sidebar_view_mode());
    }

    // optional bool sidebar_visible = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool notes_visible = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool light_table_visible = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .KN.DesktopUILayoutArchive.InspectorPaneViewMode inspector_pane_view_mode = 7 [default = kInspectorPaneViewModeFormat];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_inspector_pane_view_mode());
    }

    // optional bool inspector_pane_visible = 6 [default = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DesktopUILayoutArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DesktopUILayoutArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DesktopUILayoutArchive::GetClassData() const { return &_class_data_; }


void DesktopUILayoutArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DesktopUILayoutArchive*>(&to_msg);
  auto& from = static_cast<const DesktopUILayoutArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.DesktopUILayoutArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.sidebar_view_mode_ = from._impl_.sidebar_view_mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.sidebar_visible_ = from._impl_.sidebar_visible_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.notes_visible_ = from._impl_.notes_visible_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.light_table_visible_ = from._impl_.light_table_visible_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.inspector_pane_view_mode_ = from._impl_.inspector_pane_view_mode_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.inspector_pane_visible_ = from._impl_.inspector_pane_visible_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DesktopUILayoutArchive::CopyFrom(const DesktopUILayoutArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.DesktopUILayoutArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DesktopUILayoutArchive::IsInitialized() const {
  return true;
}

void DesktopUILayoutArchive::InternalSwap(DesktopUILayoutArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DesktopUILayoutArchive, _impl_.inspector_pane_view_mode_)
      + sizeof(DesktopUILayoutArchive::_impl_.inspector_pane_view_mode_)
      - PROTOBUF_FIELD_OFFSET(DesktopUILayoutArchive, _impl_.sidebar_view_mode_)>(
          reinterpret_cast<char*>(&_impl_.sidebar_view_mode_),
          reinterpret_cast<char*>(&other->_impl_.sidebar_view_mode_));
  swap(_impl_.inspector_pane_visible_, other->_impl_.inspector_pane_visible_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DesktopUILayoutArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[13]);
}

// ===================================================================

class UIStateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UIStateArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& slidenodetoedit(const UIStateArchive* msg);
  static void set_has_slidenodetoedit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& deprecated_masterslidenodetoapply(const UIStateArchive* msg);
  static void set_has_deprecated_masterslidenodetoapply(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Size& deprecated_slidethumbnailsize(const UIStateArchive* msg);
  static void set_has_deprecated_slidethumbnailsize(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_canvasviewscale(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Point& canvasoffset(const UIStateArchive* msg);
  static void set_has_canvasoffset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_iphonecanvasviewscale(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSP::Point& iphonecanvasoffset(const UIStateArchive* msg);
  static void set_has_iphonecanvasoffset(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_iphone568canvasviewscale(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSP::Point& iphone568canvasoffset(const UIStateArchive* msg);
  static void set_has_iphone568canvasoffset(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& desktop_ui_layout(const UIStateArchive* msg);
  static void set_has_desktop_ui_layout(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_desktop_slide_view_content_fits_window(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_desktop_canvas_view_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSP::Point& desktop_canvas_offset(const UIStateArchive* msg);
  static void set_has_desktop_canvas_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_light_table_zoom_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_show_slide_guides(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_show_master_guides(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_shows_comments(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_shows_ruler(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_desktop_navigator_view_width(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_desktop_outline_view_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::TSP::Size& desktop_main_content_size(const UIStateArchive* msg);
  static void set_has_desktop_main_content_size(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::TSP::Reference&
UIStateArchive::_Internal::slidenodetoedit(const UIStateArchive* msg) {
  return *msg->_impl_.slidenodetoedit_;
}
const ::TSP::Reference&
UIStateArchive::_Internal::deprecated_masterslidenodetoapply(const UIStateArchive* msg) {
  return *msg->_impl_.deprecated_masterslidenodetoapply_;
}
const ::TSP::Size&
UIStateArchive::_Internal::deprecated_slidethumbnailsize(const UIStateArchive* msg) {
  return *msg->_impl_.deprecated_slidethumbnailsize_;
}
const ::TSP::Point&
UIStateArchive::_Internal::canvasoffset(const UIStateArchive* msg) {
  return *msg->_impl_.canvasoffset_;
}
const ::TSP::Point&
UIStateArchive::_Internal::iphonecanvasoffset(const UIStateArchive* msg) {
  return *msg->_impl_.iphonecanvasoffset_;
}
const ::TSP::Point&
UIStateArchive::_Internal::iphone568canvasoffset(const UIStateArchive* msg) {
  return *msg->_impl_.iphone568canvasoffset_;
}
const ::TSP::Reference&
UIStateArchive::_Internal::desktop_ui_layout(const UIStateArchive* msg) {
  return *msg->_impl_.desktop_ui_layout_;
}
const ::TSP::Point&
UIStateArchive::_Internal::desktop_canvas_offset(const UIStateArchive* msg) {
  return *msg->_impl_.desktop_canvas_offset_;
}
const ::TSP::Size&
UIStateArchive::_Internal::desktop_main_content_size(const UIStateArchive* msg) {
  return *msg->_impl_.desktop_main_content_size_;
}
void UIStateArchive::clear_slidenodetoedit() {
  if (_impl_.slidenodetoedit_ != nullptr) _impl_.slidenodetoedit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void UIStateArchive::clear_deprecated_masterslidenodetoapply() {
  if (_impl_.deprecated_masterslidenodetoapply_ != nullptr) _impl_.deprecated_masterslidenodetoapply_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void UIStateArchive::clear_deprecated_slidethumbnailsize() {
  if (_impl_.deprecated_slidethumbnailsize_ != nullptr) _impl_.deprecated_slidethumbnailsize_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void UIStateArchive::clear_canvasoffset() {
  if (_impl_.canvasoffset_ != nullptr) _impl_.canvasoffset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void UIStateArchive::clear_selectedslidenodes() {
  _impl_.selectedslidenodes_.Clear();
}
void UIStateArchive::clear_iphonecanvasoffset() {
  if (_impl_.iphonecanvasoffset_ != nullptr) _impl_.iphonecanvasoffset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void UIStateArchive::clear_iphone568canvasoffset() {
  if (_impl_.iphone568canvasoffset_ != nullptr) _impl_.iphone568canvasoffset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void UIStateArchive::clear_desktop_ui_layout() {
  if (_impl_.desktop_ui_layout_ != nullptr) _impl_.desktop_ui_layout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void UIStateArchive::clear_desktop_canvas_offset() {
  if (_impl_.desktop_canvas_offset_ != nullptr) _impl_.desktop_canvas_offset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void UIStateArchive::clear_chart_ui_state() {
  _impl_.chart_ui_state_.Clear();
}
void UIStateArchive::clear_collapsed_slide_nodes() {
  _impl_.collapsed_slide_nodes_.Clear();
}
void UIStateArchive::clear_desktop_main_content_size() {
  if (_impl_.desktop_main_content_size_ != nullptr) _impl_.desktop_main_content_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
UIStateArchive::UIStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.UIStateArchive)
}
UIStateArchive::UIStateArchive(const UIStateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UIStateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selectedslidenodes_){from._impl_.selectedslidenodes_}
    , decltype(_impl_.chart_ui_state_){from._impl_.chart_ui_state_}
    , decltype(_impl_.collapsed_slide_nodes_){from._impl_.collapsed_slide_nodes_}
    , decltype(_impl_.slidenodetoedit_){nullptr}
    , decltype(_impl_.deprecated_masterslidenodetoapply_){nullptr}
    , decltype(_impl_.deprecated_slidethumbnailsize_){nullptr}
    , decltype(_impl_.canvasoffset_){nullptr}
    , decltype(_impl_.iphonecanvasoffset_){nullptr}
    , decltype(_impl_.iphone568canvasoffset_){nullptr}
    , decltype(_impl_.desktop_ui_layout_){nullptr}
    , decltype(_impl_.desktop_canvas_offset_){nullptr}
    , decltype(_impl_.desktop_main_content_size_){nullptr}
    , decltype(_impl_.canvasviewscale_){}
    , decltype(_impl_.iphonecanvasviewscale_){}
    , decltype(_impl_.iphone568canvasviewscale_){}
    , decltype(_impl_.desktop_canvas_view_scale_){}
    , decltype(_impl_.light_table_zoom_scale_){}
    , decltype(_impl_.desktop_slide_view_content_fits_window_){}
    , decltype(_impl_.show_slide_guides_){}
    , decltype(_impl_.show_master_guides_){}
    , decltype(_impl_.shows_comments_){}
    , decltype(_impl_.shows_ruler_){}
    , decltype(_impl_.desktop_navigator_view_width_){}
    , decltype(_impl_.desktop_outline_view_width_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_slidenodetoedit()) {
    _this->_impl_.slidenodetoedit_ = new ::TSP::Reference(*from._impl_.slidenodetoedit_);
  }
  if (from._internal_has_deprecated_masterslidenodetoapply()) {
    _this->_impl_.deprecated_masterslidenodetoapply_ = new ::TSP::Reference(*from._impl_.deprecated_masterslidenodetoapply_);
  }
  if (from._internal_has_deprecated_slidethumbnailsize()) {
    _this->_impl_.deprecated_slidethumbnailsize_ = new ::TSP::Size(*from._impl_.deprecated_slidethumbnailsize_);
  }
  if (from._internal_has_canvasoffset()) {
    _this->_impl_.canvasoffset_ = new ::TSP::Point(*from._impl_.canvasoffset_);
  }
  if (from._internal_has_iphonecanvasoffset()) {
    _this->_impl_.iphonecanvasoffset_ = new ::TSP::Point(*from._impl_.iphonecanvasoffset_);
  }
  if (from._internal_has_iphone568canvasoffset()) {
    _this->_impl_.iphone568canvasoffset_ = new ::TSP::Point(*from._impl_.iphone568canvasoffset_);
  }
  if (from._internal_has_desktop_ui_layout()) {
    _this->_impl_.desktop_ui_layout_ = new ::TSP::Reference(*from._impl_.desktop_ui_layout_);
  }
  if (from._internal_has_desktop_canvas_offset()) {
    _this->_impl_.desktop_canvas_offset_ = new ::TSP::Point(*from._impl_.desktop_canvas_offset_);
  }
  if (from._internal_has_desktop_main_content_size()) {
    _this->_impl_.desktop_main_content_size_ = new ::TSP::Size(*from._impl_.desktop_main_content_size_);
  }
  ::memcpy(&_impl_.canvasviewscale_, &from._impl_.canvasviewscale_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.desktop_outline_view_width_) -
    reinterpret_cast<char*>(&_impl_.canvasviewscale_)) + sizeof(_impl_.desktop_outline_view_width_));
  // @@protoc_insertion_point(copy_constructor:KN.UIStateArchive)
}

inline void UIStateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selectedslidenodes_){arena}
    , decltype(_impl_.chart_ui_state_){arena}
    , decltype(_impl_.collapsed_slide_nodes_){arena}
    , decltype(_impl_.slidenodetoedit_){nullptr}
    , decltype(_impl_.deprecated_masterslidenodetoapply_){nullptr}
    , decltype(_impl_.deprecated_slidethumbnailsize_){nullptr}
    , decltype(_impl_.canvasoffset_){nullptr}
    , decltype(_impl_.iphonecanvasoffset_){nullptr}
    , decltype(_impl_.iphone568canvasoffset_){nullptr}
    , decltype(_impl_.desktop_ui_layout_){nullptr}
    , decltype(_impl_.desktop_canvas_offset_){nullptr}
    , decltype(_impl_.desktop_main_content_size_){nullptr}
    , decltype(_impl_.canvasviewscale_){0}
    , decltype(_impl_.iphonecanvasviewscale_){0}
    , decltype(_impl_.iphone568canvasviewscale_){0}
    , decltype(_impl_.desktop_canvas_view_scale_){0}
    , decltype(_impl_.light_table_zoom_scale_){0}
    , decltype(_impl_.desktop_slide_view_content_fits_window_){false}
    , decltype(_impl_.show_slide_guides_){false}
    , decltype(_impl_.show_master_guides_){false}
    , decltype(_impl_.shows_comments_){false}
    , decltype(_impl_.shows_ruler_){false}
    , decltype(_impl_.desktop_navigator_view_width_){0}
    , decltype(_impl_.desktop_outline_view_width_){0}
  };
}

UIStateArchive::~UIStateArchive() {
  // @@protoc_insertion_point(destructor:KN.UIStateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UIStateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.selectedslidenodes_.~RepeatedPtrField();
  _impl_.chart_ui_state_.~RepeatedPtrField();
  _impl_.collapsed_slide_nodes_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.slidenodetoedit_;
  if (this != internal_default_instance()) delete _impl_.deprecated_masterslidenodetoapply_;
  if (this != internal_default_instance()) delete _impl_.deprecated_slidethumbnailsize_;
  if (this != internal_default_instance()) delete _impl_.canvasoffset_;
  if (this != internal_default_instance()) delete _impl_.iphonecanvasoffset_;
  if (this != internal_default_instance()) delete _impl_.iphone568canvasoffset_;
  if (this != internal_default_instance()) delete _impl_.desktop_ui_layout_;
  if (this != internal_default_instance()) delete _impl_.desktop_canvas_offset_;
  if (this != internal_default_instance()) delete _impl_.desktop_main_content_size_;
}

void UIStateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UIStateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.UIStateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.selectedslidenodes_.Clear();
  _impl_.chart_ui_state_.Clear();
  _impl_.collapsed_slide_nodes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.slidenodetoedit_ != nullptr);
      _impl_.slidenodetoedit_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.deprecated_masterslidenodetoapply_ != nullptr);
      _impl_.deprecated_masterslidenodetoapply_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.deprecated_slidethumbnailsize_ != nullptr);
      _impl_.deprecated_slidethumbnailsize_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.canvasoffset_ != nullptr);
      _impl_.canvasoffset_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.iphonecanvasoffset_ != nullptr);
      _impl_.iphonecanvasoffset_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.iphone568canvasoffset_ != nullptr);
      _impl_.iphone568canvasoffset_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.desktop_ui_layout_ != nullptr);
      _impl_.desktop_ui_layout_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.desktop_canvas_offset_ != nullptr);
      _impl_.desktop_canvas_offset_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(_impl_.desktop_main_content_size_ != nullptr);
    _impl_.desktop_main_content_size_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&_impl_.canvasviewscale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.show_slide_guides_) -
        reinterpret_cast<char*>(&_impl_.canvasviewscale_)) + sizeof(_impl_.show_slide_guides_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&_impl_.show_master_guides_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.desktop_outline_view_width_) -
        reinterpret_cast<char*>(&_impl_.show_master_guides_)) + sizeof(_impl_.desktop_outline_view_width_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UIStateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference slideNodeToEdit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_slidenodetoedit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference deprecated_masterSlideNodeToApply = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_masterslidenodetoapply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Size deprecated_slideThumbnailSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_slidethumbnailsize(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float canvasViewScale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_canvasviewscale(&has_bits);
          _impl_.canvasviewscale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Point canvasOffset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_canvasoffset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference selectedSlideNodes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_selectedslidenodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional float iPhoneCanvasViewScale = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_iphonecanvasviewscale(&has_bits);
          _impl_.iphonecanvasviewscale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Point iPhoneCanvasOffset = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_iphonecanvasoffset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float iPhone568CanvasViewScale = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_iphone568canvasviewscale(&has_bits);
          _impl_.iphone568canvasviewscale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Point iPhone568CanvasOffset = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_iphone568canvasoffset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference desktop_ui_layout = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_desktop_ui_layout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool desktop_slide_view_content_fits_window = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_desktop_slide_view_content_fits_window(&has_bits);
          _impl_.desktop_slide_view_content_fits_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float desktop_canvas_view_scale = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_desktop_canvas_view_scale(&has_bits);
          _impl_.desktop_canvas_view_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float light_table_zoom_scale = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_light_table_zoom_scale(&has_bits);
          _impl_.light_table_zoom_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCH.ChartUIState chart_ui_state = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chart_ui_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool show_slide_guides = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_show_slide_guides(&has_bits);
          _impl_.show_slide_guides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_master_guides = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_show_master_guides(&has_bits);
          _impl_.show_master_guides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool shows_comments = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_shows_comments(&has_bits);
          _impl_.shows_comments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference collapsed_slide_nodes = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_collapsed_slide_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool shows_ruler = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_shows_ruler(&has_bits);
          _impl_.shows_ruler_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Point desktop_canvas_offset = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_desktop_canvas_offset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float desktop_navigator_view_width = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          _Internal::set_has_desktop_navigator_view_width(&has_bits);
          _impl_.desktop_navigator_view_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float desktop_outline_view_width = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 189)) {
          _Internal::set_has_desktop_outline_view_width(&has_bits);
          _impl_.desktop_outline_view_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Size desktop_main_content_size = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_desktop_main_content_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UIStateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.UIStateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference slideNodeToEdit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::slidenodetoedit(this),
        _Internal::slidenodetoedit(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference deprecated_masterSlideNodeToApply = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::deprecated_masterslidenodetoapply(this),
        _Internal::deprecated_masterslidenodetoapply(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Size deprecated_slideThumbnailSize = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::deprecated_slidethumbnailsize(this),
        _Internal::deprecated_slidethumbnailsize(this).GetCachedSize(), target, stream);
  }

  // optional float canvasViewScale = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_canvasviewscale(), target);
  }

  // optional .TSP.Point canvasOffset = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::canvasoffset(this),
        _Internal::canvasoffset(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference selectedSlideNodes = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_selectedslidenodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_selectedslidenodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional float iPhoneCanvasViewScale = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_iphonecanvasviewscale(), target);
  }

  // optional .TSP.Point iPhoneCanvasOffset = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::iphonecanvasoffset(this),
        _Internal::iphonecanvasoffset(this).GetCachedSize(), target, stream);
  }

  // optional float iPhone568CanvasViewScale = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_iphone568canvasviewscale(), target);
  }

  // optional .TSP.Point iPhone568CanvasOffset = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::iphone568canvasoffset(this),
        _Internal::iphone568canvasoffset(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference desktop_ui_layout = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::desktop_ui_layout(this),
        _Internal::desktop_ui_layout(this).GetCachedSize(), target, stream);
  }

  // optional bool desktop_slide_view_content_fits_window = 12;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_desktop_slide_view_content_fits_window(), target);
  }

  // optional float desktop_canvas_view_scale = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_desktop_canvas_view_scale(), target);
  }

  // optional float light_table_zoom_scale = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_light_table_zoom_scale(), target);
  }

  // repeated .TSCH.ChartUIState chart_ui_state = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chart_ui_state_size()); i < n; i++) {
    const auto& repfield = this->_internal_chart_ui_state(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool show_slide_guides = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_show_slide_guides(), target);
  }

  // optional bool show_master_guides = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_show_master_guides(), target);
  }

  // optional bool shows_comments = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_shows_comments(), target);
  }

  // repeated .TSP.Reference collapsed_slide_nodes = 19;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_collapsed_slide_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_collapsed_slide_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool shows_ruler = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_shows_ruler(), target);
  }

  // optional .TSP.Point desktop_canvas_offset = 21;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::desktop_canvas_offset(this),
        _Internal::desktop_canvas_offset(this).GetCachedSize(), target, stream);
  }

  // optional float desktop_navigator_view_width = 22;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(22, this->_internal_desktop_navigator_view_width(), target);
  }

  // optional float desktop_outline_view_width = 23;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(23, this->_internal_desktop_outline_view_width(), target);
  }

  // optional .TSP.Size desktop_main_content_size = 24;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::desktop_main_content_size(this),
        _Internal::desktop_main_content_size(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.UIStateArchive)
  return target;
}

size_t UIStateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.UIStateArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference selectedSlideNodes = 6;
  total_size += 1UL * this->_internal_selectedslidenodes_size();
  for (const auto& msg : this->_impl_.selectedslidenodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCH.ChartUIState chart_ui_state = 15;
  total_size += 1UL * this->_internal_chart_ui_state_size();
  for (const auto& msg : this->_impl_.chart_ui_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference collapsed_slide_nodes = 19;
  total_size += 2UL * this->_internal_collapsed_slide_nodes_size();
  for (const auto& msg : this->_impl_.collapsed_slide_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.Reference slideNodeToEdit = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.slidenodetoedit_);
    }

    // optional .TSP.Reference deprecated_masterSlideNodeToApply = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deprecated_masterslidenodetoapply_);
    }

    // optional .TSP.Size deprecated_slideThumbnailSize = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deprecated_slidethumbnailsize_);
    }

    // optional .TSP.Point canvasOffset = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.canvasoffset_);
    }

    // optional .TSP.Point iPhoneCanvasOffset = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.iphonecanvasoffset_);
    }

    // optional .TSP.Point iPhone568CanvasOffset = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.iphone568canvasoffset_);
    }

    // optional .TSP.Reference desktop_ui_layout = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.desktop_ui_layout_);
    }

    // optional .TSP.Point desktop_canvas_offset = 21;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.desktop_canvas_offset_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSP.Size desktop_main_content_size = 24;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.desktop_main_content_size_);
    }

    // optional float canvasViewScale = 4;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float iPhoneCanvasViewScale = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float iPhone568CanvasViewScale = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float desktop_canvas_view_scale = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float light_table_zoom_scale = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional bool desktop_slide_view_content_fits_window = 12;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool show_slide_guides = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional bool show_master_guides = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool shows_comments = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool shows_ruler = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional float desktop_navigator_view_width = 22;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional float desktop_outline_view_width = 23;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UIStateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UIStateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UIStateArchive::GetClassData() const { return &_class_data_; }


void UIStateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UIStateArchive*>(&to_msg);
  auto& from = static_cast<const UIStateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.UIStateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.selectedslidenodes_.MergeFrom(from._impl_.selectedslidenodes_);
  _this->_impl_.chart_ui_state_.MergeFrom(from._impl_.chart_ui_state_);
  _this->_impl_.collapsed_slide_nodes_.MergeFrom(from._impl_.collapsed_slide_nodes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_slidenodetoedit()->::TSP::Reference::MergeFrom(
          from._internal_slidenodetoedit());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_deprecated_masterslidenodetoapply()->::TSP::Reference::MergeFrom(
          from._internal_deprecated_masterslidenodetoapply());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_deprecated_slidethumbnailsize()->::TSP::Size::MergeFrom(
          from._internal_deprecated_slidethumbnailsize());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_canvasoffset()->::TSP::Point::MergeFrom(
          from._internal_canvasoffset());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_iphonecanvasoffset()->::TSP::Point::MergeFrom(
          from._internal_iphonecanvasoffset());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_iphone568canvasoffset()->::TSP::Point::MergeFrom(
          from._internal_iphone568canvasoffset());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_desktop_ui_layout()->::TSP::Reference::MergeFrom(
          from._internal_desktop_ui_layout());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_desktop_canvas_offset()->::TSP::Point::MergeFrom(
          from._internal_desktop_canvas_offset());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_desktop_main_content_size()->::TSP::Size::MergeFrom(
          from._internal_desktop_main_content_size());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.canvasviewscale_ = from._impl_.canvasviewscale_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.iphonecanvasviewscale_ = from._impl_.iphonecanvasviewscale_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.iphone568canvasviewscale_ = from._impl_.iphone568canvasviewscale_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.desktop_canvas_view_scale_ = from._impl_.desktop_canvas_view_scale_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.light_table_zoom_scale_ = from._impl_.light_table_zoom_scale_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.desktop_slide_view_content_fits_window_ = from._impl_.desktop_slide_view_content_fits_window_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.show_slide_guides_ = from._impl_.show_slide_guides_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.show_master_guides_ = from._impl_.show_master_guides_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.shows_comments_ = from._impl_.shows_comments_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.shows_ruler_ = from._impl_.shows_ruler_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.desktop_navigator_view_width_ = from._impl_.desktop_navigator_view_width_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.desktop_outline_view_width_ = from._impl_.desktop_outline_view_width_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UIStateArchive::CopyFrom(const UIStateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.UIStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIStateArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.selectedslidenodes_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.chart_ui_state_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.collapsed_slide_nodes_))
    return false;
  if (_internal_has_slidenodetoedit()) {
    if (!_impl_.slidenodetoedit_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_masterslidenodetoapply()) {
    if (!_impl_.deprecated_masterslidenodetoapply_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_slidethumbnailsize()) {
    if (!_impl_.deprecated_slidethumbnailsize_->IsInitialized()) return false;
  }
  if (_internal_has_canvasoffset()) {
    if (!_impl_.canvasoffset_->IsInitialized()) return false;
  }
  if (_internal_has_iphonecanvasoffset()) {
    if (!_impl_.iphonecanvasoffset_->IsInitialized()) return false;
  }
  if (_internal_has_iphone568canvasoffset()) {
    if (!_impl_.iphone568canvasoffset_->IsInitialized()) return false;
  }
  if (_internal_has_desktop_ui_layout()) {
    if (!_impl_.desktop_ui_layout_->IsInitialized()) return false;
  }
  if (_internal_has_desktop_canvas_offset()) {
    if (!_impl_.desktop_canvas_offset_->IsInitialized()) return false;
  }
  if (_internal_has_desktop_main_content_size()) {
    if (!_impl_.desktop_main_content_size_->IsInitialized()) return false;
  }
  return true;
}

void UIStateArchive::InternalSwap(UIStateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.selectedslidenodes_.InternalSwap(&other->_impl_.selectedslidenodes_);
  _impl_.chart_ui_state_.InternalSwap(&other->_impl_.chart_ui_state_);
  _impl_.collapsed_slide_nodes_.InternalSwap(&other->_impl_.collapsed_slide_nodes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UIStateArchive, _impl_.desktop_outline_view_width_)
      + sizeof(UIStateArchive::_impl_.desktop_outline_view_width_)
      - PROTOBUF_FIELD_OFFSET(UIStateArchive, _impl_.slidenodetoedit_)>(
          reinterpret_cast<char*>(&_impl_.slidenodetoedit_),
          reinterpret_cast<char*>(&other->_impl_.slidenodetoedit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UIStateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[14]);
}

// ===================================================================

class CanvasSelectionArchive::_Internal {
 public:
};

void CanvasSelectionArchive::clear_infos() {
  _impl_.infos_.Clear();
}
void CanvasSelectionArchive::clear_action_ghost_indexes() {
  _impl_.action_ghost_indexes_.Clear();
}
CanvasSelectionArchive::CanvasSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CanvasSelectionArchive)
}
CanvasSelectionArchive::CanvasSelectionArchive(const CanvasSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CanvasSelectionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.infos_){from._impl_.infos_}
    , decltype(_impl_.database_action_ghost_indexes_){from._impl_.database_action_ghost_indexes_}
    , decltype(_impl_.action_ghost_indexes_){from._impl_.action_ghost_indexes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KN.CanvasSelectionArchive)
}

inline void CanvasSelectionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.infos_){arena}
    , decltype(_impl_.database_action_ghost_indexes_){arena}
    , decltype(_impl_.action_ghost_indexes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CanvasSelectionArchive::~CanvasSelectionArchive() {
  // @@protoc_insertion_point(destructor:KN.CanvasSelectionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CanvasSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.infos_.~RepeatedPtrField();
  _impl_.database_action_ghost_indexes_.~RepeatedField();
  _impl_.action_ghost_indexes_.~RepeatedPtrField();
}

void CanvasSelectionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CanvasSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CanvasSelectionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.infos_.Clear();
  _impl_.database_action_ghost_indexes_.Clear();
  _impl_.action_ghost_indexes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CanvasSelectionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 database_action_ghost_indexes = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_database_action_ghost_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_database_action_ghost_indexes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.IndexSet action_ghost_indexes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_action_ghost_indexes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CanvasSelectionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CanvasSelectionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference infos = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 database_action_ghost_indexes = 2 [deprecated = true];
  for (int i = 0, n = this->_internal_database_action_ghost_indexes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_database_action_ghost_indexes(i), target);
  }

  // repeated .TSP.IndexSet action_ghost_indexes = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_action_ghost_indexes_size()); i < n; i++) {
    const auto& repfield = this->_internal_action_ghost_indexes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CanvasSelectionArchive)
  return target;
}

size_t CanvasSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CanvasSelectionArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference infos = 1;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->_impl_.infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 database_action_ghost_indexes = 2 [deprecated = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.database_action_ghost_indexes_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_database_action_ghost_indexes_size());
    total_size += data_size;
  }

  // repeated .TSP.IndexSet action_ghost_indexes = 3;
  total_size += 1UL * this->_internal_action_ghost_indexes_size();
  for (const auto& msg : this->_impl_.action_ghost_indexes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CanvasSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CanvasSelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CanvasSelectionArchive::GetClassData() const { return &_class_data_; }


void CanvasSelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CanvasSelectionArchive*>(&to_msg);
  auto& from = static_cast<const CanvasSelectionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CanvasSelectionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.infos_.MergeFrom(from._impl_.infos_);
  _this->_impl_.database_action_ghost_indexes_.MergeFrom(from._impl_.database_action_ghost_indexes_);
  _this->_impl_.action_ghost_indexes_.MergeFrom(from._impl_.action_ghost_indexes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CanvasSelectionArchive::CopyFrom(const CanvasSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CanvasSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanvasSelectionArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.infos_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.action_ghost_indexes_))
    return false;
  return true;
}

void CanvasSelectionArchive::InternalSwap(CanvasSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.infos_.InternalSwap(&other->_impl_.infos_);
  _impl_.database_action_ghost_indexes_.InternalSwap(&other->_impl_.database_action_ghost_indexes_);
  _impl_.action_ghost_indexes_.InternalSwap(&other->_impl_.action_ghost_indexes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CanvasSelectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[15]);
}

// ===================================================================

class ThemeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ThemeArchive>()._impl_._has_bits_);
  static const ::TSS::ThemeArchive& super(const ThemeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& defaultmasterslidenode(const ThemeArchive* msg);
  static void set_has_defaultmasterslidenode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSS::ThemeArchive&
ThemeArchive::_Internal::super(const ThemeArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
ThemeArchive::_Internal::defaultmasterslidenode(const ThemeArchive* msg) {
  return *msg->_impl_.defaultmasterslidenode_;
}
void ThemeArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ThemeArchive::clear_masters() {
  _impl_.masters_.Clear();
}
void ThemeArchive::clear_classicthemerecords() {
  _impl_.classicthemerecords_.Clear();
}
void ThemeArchive::clear_defaultmasterslidenode() {
  if (_impl_.defaultmasterslidenode_ != nullptr) _impl_.defaultmasterslidenode_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ThemeArchive::ThemeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.ThemeArchive)
}
ThemeArchive::ThemeArchive(const ThemeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ThemeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.masters_){from._impl_.masters_}
    , decltype(_impl_.classicthemerecords_){from._impl_.classicthemerecords_}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.defaultmasterslidenode_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uuid()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSS::ThemeArchive(*from._impl_.super_);
  }
  if (from._internal_has_defaultmasterslidenode()) {
    _this->_impl_.defaultmasterslidenode_ = new ::TSP::Reference(*from._impl_.defaultmasterslidenode_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.ThemeArchive)
}

inline void ThemeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.masters_){arena}
    , decltype(_impl_.classicthemerecords_){arena}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.defaultmasterslidenode_){nullptr}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ThemeArchive::~ThemeArchive() {
  // @@protoc_insertion_point(destructor:KN.ThemeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThemeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.masters_.~RepeatedPtrField();
  _impl_.classicthemerecords_.~RepeatedPtrField();
  _impl_.uuid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.defaultmasterslidenode_;
}

void ThemeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ThemeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.ThemeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.masters_.Clear();
  _impl_.classicthemerecords_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.uuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.defaultmasterslidenode_ != nullptr);
      _impl_.defaultmasterslidenode_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThemeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.ThemeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference masters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_masters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string uuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.ThemeArchive.uuid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference classicThemeRecords = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_classicthemerecords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference defaultMasterSlideNode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_defaultmasterslidenode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThemeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.ThemeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSS.ThemeArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference masters = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_masters_size()); i < n; i++) {
    const auto& repfield = this->_internal_masters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string uuid = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.ThemeArchive.uuid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_uuid(), target);
  }

  // repeated .TSP.Reference classicThemeRecords = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_classicthemerecords_size()); i < n; i++) {
    const auto& repfield = this->_internal_classicthemerecords(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference defaultMasterSlideNode = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::defaultmasterslidenode(this),
        _Internal::defaultmasterslidenode(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.ThemeArchive)
  return target;
}

size_t ThemeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.ThemeArchive)
  size_t total_size = 0;

  // required .TSS.ThemeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference masters = 2;
  total_size += 1UL * this->_internal_masters_size();
  for (const auto& msg : this->_impl_.masters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference classicThemeRecords = 4;
  total_size += 1UL * this->_internal_classicthemerecords_size();
  for (const auto& msg : this->_impl_.classicthemerecords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string uuid = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // optional .TSP.Reference defaultMasterSlideNode = 5;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.defaultmasterslidenode_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThemeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ThemeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThemeArchive::GetClassData() const { return &_class_data_; }


void ThemeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ThemeArchive*>(&to_msg);
  auto& from = static_cast<const ThemeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.ThemeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.masters_.MergeFrom(from._impl_.masters_);
  _this->_impl_.classicthemerecords_.MergeFrom(from._impl_.classicthemerecords_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_uuid(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSS::ThemeArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_defaultmasterslidenode()->::TSP::Reference::MergeFrom(
          from._internal_defaultmasterslidenode());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThemeArchive::CopyFrom(const ThemeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.ThemeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.masters_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.classicthemerecords_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_defaultmasterslidenode()) {
    if (!_impl_.defaultmasterslidenode_->IsInitialized()) return false;
  }
  return true;
}

void ThemeArchive::InternalSwap(ThemeArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.masters_.InternalSwap(&other->_impl_.masters_);
  _impl_.classicthemerecords_.InternalSwap(&other->_impl_.classicthemerecords_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThemeArchive, _impl_.defaultmasterslidenode_)
      + sizeof(ThemeArchive::_impl_.defaultmasterslidenode_)
      - PROTOBUF_FIELD_OFFSET(ThemeArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThemeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[16]);
}

// ===================================================================

class SlideTreeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideTreeArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& rootslidenode(const SlideTreeArchive* msg);
  static void set_has_rootslidenode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
SlideTreeArchive::_Internal::rootslidenode(const SlideTreeArchive* msg) {
  return *msg->_impl_.rootslidenode_;
}
void SlideTreeArchive::clear_rootslidenode() {
  if (_impl_.rootslidenode_ != nullptr) _impl_.rootslidenode_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SlideTreeArchive::SlideTreeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.SlideTreeArchive)
}
SlideTreeArchive::SlideTreeArchive(const SlideTreeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SlideTreeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rootslidenode_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rootslidenode()) {
    _this->_impl_.rootslidenode_ = new ::TSP::Reference(*from._impl_.rootslidenode_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.SlideTreeArchive)
}

inline void SlideTreeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rootslidenode_){nullptr}
  };
}

SlideTreeArchive::~SlideTreeArchive() {
  // @@protoc_insertion_point(destructor:KN.SlideTreeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SlideTreeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rootslidenode_;
}

void SlideTreeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SlideTreeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideTreeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.rootslidenode_ != nullptr);
    _impl_.rootslidenode_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideTreeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference rootSlideNode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rootslidenode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SlideTreeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideTreeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference rootSlideNode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::rootslidenode(this),
        _Internal::rootslidenode(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideTreeArchive)
  return target;
}

size_t SlideTreeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideTreeArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference rootSlideNode = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rootslidenode_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideTreeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SlideTreeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideTreeArchive::GetClassData() const { return &_class_data_; }


void SlideTreeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SlideTreeArchive*>(&to_msg);
  auto& from = static_cast<const SlideTreeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideTreeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rootslidenode()) {
    _this->_internal_mutable_rootslidenode()->::TSP::Reference::MergeFrom(
        from._internal_rootslidenode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideTreeArchive::CopyFrom(const SlideTreeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideTreeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideTreeArchive::IsInitialized() const {
  if (_internal_has_rootslidenode()) {
    if (!_impl_.rootslidenode_->IsInitialized()) return false;
  }
  return true;
}

void SlideTreeArchive::InternalSwap(SlideTreeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.rootslidenode_, other->_impl_.rootslidenode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideTreeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[17]);
}

// ===================================================================

class ShowArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ShowArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& uistate(const ShowArchive* msg);
  static void set_has_uistate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& theme(const ShowArchive* msg);
  static void set_has_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::KN::SlideTreeArchive& slidetree(const ShowArchive* msg);
  static void set_has_slidetree(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Size& size(const ShowArchive* msg);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& stylesheet(const ShowArchive* msg);
  static void set_has_stylesheet(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_slidenumbersvisible(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::Reference& recording(const ShowArchive* msg);
  static void set_has_recording(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_loop_presentation(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_autoplay_transition_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_autoplay_build_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_idle_timer_active(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_idle_timer_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::Reference& soundtrack(const ShowArchive* msg);
  static void set_has_soundtrack(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_automatically_plays_upon_open(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001e) ^ 0x0000001e) != 0;
  }
};

const ::TSP::Reference&
ShowArchive::_Internal::uistate(const ShowArchive* msg) {
  return *msg->_impl_.uistate_;
}
const ::TSP::Reference&
ShowArchive::_Internal::theme(const ShowArchive* msg) {
  return *msg->_impl_.theme_;
}
const ::KN::SlideTreeArchive&
ShowArchive::_Internal::slidetree(const ShowArchive* msg) {
  return *msg->_impl_.slidetree_;
}
const ::TSP::Size&
ShowArchive::_Internal::size(const ShowArchive* msg) {
  return *msg->_impl_.size_;
}
const ::TSP::Reference&
ShowArchive::_Internal::stylesheet(const ShowArchive* msg) {
  return *msg->_impl_.stylesheet_;
}
const ::TSP::Reference&
ShowArchive::_Internal::recording(const ShowArchive* msg) {
  return *msg->_impl_.recording_;
}
const ::TSP::Reference&
ShowArchive::_Internal::soundtrack(const ShowArchive* msg) {
  return *msg->_impl_.soundtrack_;
}
void ShowArchive::clear_uistate() {
  if (_impl_.uistate_ != nullptr) _impl_.uistate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ShowArchive::clear_theme() {
  if (_impl_.theme_ != nullptr) _impl_.theme_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ShowArchive::clear_size() {
  if (_impl_.size_ != nullptr) _impl_.size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ShowArchive::clear_stylesheet() {
  if (_impl_.stylesheet_ != nullptr) _impl_.stylesheet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ShowArchive::clear_recording() {
  if (_impl_.recording_ != nullptr) _impl_.recording_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ShowArchive::clear_soundtrack() {
  if (_impl_.soundtrack_ != nullptr) _impl_.soundtrack_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
ShowArchive::ShowArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.ShowArchive)
}
ShowArchive::ShowArchive(const ShowArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShowArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uistate_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.slidetree_){nullptr}
    , decltype(_impl_.size_){nullptr}
    , decltype(_impl_.stylesheet_){nullptr}
    , decltype(_impl_.recording_){nullptr}
    , decltype(_impl_.soundtrack_){nullptr}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.slidenumbersvisible_){}
    , decltype(_impl_.loop_presentation_){}
    , decltype(_impl_.idle_timer_active_){}
    , decltype(_impl_.automatically_plays_upon_open_){}
    , decltype(_impl_.autoplay_transition_delay_){}
    , decltype(_impl_.autoplay_build_delay_){}
    , decltype(_impl_.idle_timer_delay_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uistate()) {
    _this->_impl_.uistate_ = new ::TSP::Reference(*from._impl_.uistate_);
  }
  if (from._internal_has_theme()) {
    _this->_impl_.theme_ = new ::TSP::Reference(*from._impl_.theme_);
  }
  if (from._internal_has_slidetree()) {
    _this->_impl_.slidetree_ = new ::KN::SlideTreeArchive(*from._impl_.slidetree_);
  }
  if (from._internal_has_size()) {
    _this->_impl_.size_ = new ::TSP::Size(*from._impl_.size_);
  }
  if (from._internal_has_stylesheet()) {
    _this->_impl_.stylesheet_ = new ::TSP::Reference(*from._impl_.stylesheet_);
  }
  if (from._internal_has_recording()) {
    _this->_impl_.recording_ = new ::TSP::Reference(*from._impl_.recording_);
  }
  if (from._internal_has_soundtrack()) {
    _this->_impl_.soundtrack_ = new ::TSP::Reference(*from._impl_.soundtrack_);
  }
  ::memcpy(&_impl_.mode_, &from._impl_.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.idle_timer_delay_) -
    reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.idle_timer_delay_));
  // @@protoc_insertion_point(copy_constructor:KN.ShowArchive)
}

inline void ShowArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uistate_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.slidetree_){nullptr}
    , decltype(_impl_.size_){nullptr}
    , decltype(_impl_.stylesheet_){nullptr}
    , decltype(_impl_.recording_){nullptr}
    , decltype(_impl_.soundtrack_){nullptr}
    , decltype(_impl_.mode_){0}
    , decltype(_impl_.slidenumbersvisible_){false}
    , decltype(_impl_.loop_presentation_){false}
    , decltype(_impl_.idle_timer_active_){false}
    , decltype(_impl_.automatically_plays_upon_open_){false}
    , decltype(_impl_.autoplay_transition_delay_){5}
    , decltype(_impl_.autoplay_build_delay_){2}
    , decltype(_impl_.idle_timer_delay_){900}
  };
}

ShowArchive::~ShowArchive() {
  // @@protoc_insertion_point(destructor:KN.ShowArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShowArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.uistate_;
  if (this != internal_default_instance()) delete _impl_.theme_;
  if (this != internal_default_instance()) delete _impl_.slidetree_;
  if (this != internal_default_instance()) delete _impl_.size_;
  if (this != internal_default_instance()) delete _impl_.stylesheet_;
  if (this != internal_default_instance()) delete _impl_.recording_;
  if (this != internal_default_instance()) delete _impl_.soundtrack_;
}

void ShowArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShowArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.ShowArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.uistate_ != nullptr);
      _impl_.uistate_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.theme_ != nullptr);
      _impl_.theme_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.slidetree_ != nullptr);
      _impl_.slidetree_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.size_ != nullptr);
      _impl_.size_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.stylesheet_ != nullptr);
      _impl_.stylesheet_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.recording_ != nullptr);
      _impl_.recording_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.soundtrack_ != nullptr);
      _impl_.soundtrack_->Clear();
    }
  }
  _impl_.mode_ = 0;
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.slidenumbersvisible_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.automatically_plays_upon_open_) -
        reinterpret_cast<char*>(&_impl_.slidenumbersvisible_)) + sizeof(_impl_.automatically_plays_upon_open_));
    _impl_.autoplay_transition_delay_ = 5;
    _impl_.autoplay_build_delay_ = 2;
    _impl_.idle_timer_delay_ = 900;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShowArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference uiState = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_uistate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference theme = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .KN.SlideTreeArchive slideTree = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_slidetree(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Size size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference stylesheet = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stylesheet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool slideNumbersVisible = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_slidenumbersvisible(&has_bits);
          _impl_.slidenumbersvisible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference recording = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_recording(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool loop_presentation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_loop_presentation(&has_bits);
          _impl_.loop_presentation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.ShowArchive.KNShowMode mode = 9 [default = kKNShowModeNormal];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::ShowArchive_KNShowMode_IsValid(val))) {
            _internal_set_mode(static_cast<::KN::ShowArchive_KNShowMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double autoplay_transition_delay = 10 [default = 5];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_autoplay_transition_delay(&has_bits);
          _impl_.autoplay_transition_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double autoplay_build_delay = 11 [default = 2];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_autoplay_build_delay(&has_bits);
          _impl_.autoplay_build_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool idle_timer_active = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_idle_timer_active(&has_bits);
          _impl_.idle_timer_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double idle_timer_delay = 16 [default = 900];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_idle_timer_delay(&has_bits);
          _impl_.idle_timer_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference soundtrack = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_soundtrack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool automatically_plays_upon_open = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_automatically_plays_upon_open(&has_bits);
          _impl_.automatically_plays_upon_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShowArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.ShowArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference uiState = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::uistate(this),
        _Internal::uistate(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference theme = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::theme(this),
        _Internal::theme(this).GetCachedSize(), target, stream);
  }

  // required .KN.SlideTreeArchive slideTree = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::slidetree(this),
        _Internal::slidetree(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Size size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::size(this),
        _Internal::size(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference stylesheet = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::stylesheet(this),
        _Internal::stylesheet(this).GetCachedSize(), target, stream);
  }

  // optional bool slideNumbersVisible = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_slidenumbersvisible(), target);
  }

  // optional .TSP.Reference recording = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::recording(this),
        _Internal::recording(this).GetCachedSize(), target, stream);
  }

  // optional bool loop_presentation = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_loop_presentation(), target);
  }

  // optional .KN.ShowArchive.KNShowMode mode = 9 [default = kKNShowModeNormal];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_mode(), target);
  }

  // optional double autoplay_transition_delay = 10 [default = 5];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_autoplay_transition_delay(), target);
  }

  // optional double autoplay_build_delay = 11 [default = 2];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_autoplay_build_delay(), target);
  }

  // optional bool idle_timer_active = 15;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_idle_timer_active(), target);
  }

  // optional double idle_timer_delay = 16 [default = 900];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_idle_timer_delay(), target);
  }

  // optional .TSP.Reference soundtrack = 17;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::soundtrack(this),
        _Internal::soundtrack(this).GetCachedSize(), target, stream);
  }

  // optional bool automatically_plays_upon_open = 18;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_automatically_plays_upon_open(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.ShowArchive)
  return target;
}

size_t ShowArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.ShowArchive)
  size_t total_size = 0;

  if (_internal_has_theme()) {
    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);
  }

  if (_internal_has_slidetree()) {
    // required .KN.SlideTreeArchive slideTree = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slidetree_);
  }

  if (_internal_has_size()) {
    // required .TSP.Size size = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.size_);
  }

  if (_internal_has_stylesheet()) {
    // required .TSP.Reference stylesheet = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stylesheet_);
  }

  return total_size;
}
size_t ShowArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.ShowArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);

    // required .KN.SlideTreeArchive slideTree = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slidetree_);

    // required .TSP.Size size = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.size_);

    // required .TSP.Reference stylesheet = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stylesheet_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference uiState = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uistate_);
  }

  if (cached_has_bits & 0x000000e0u) {
    // optional .TSP.Reference recording = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.recording_);
    }

    // optional .TSP.Reference soundtrack = 17;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.soundtrack_);
    }

    // optional .KN.ShowArchive.KNShowMode mode = 9 [default = kKNShowModeNormal];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional bool slideNumbersVisible = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool loop_presentation = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool idle_timer_active = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool automatically_plays_upon_open = 18;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional double autoplay_transition_delay = 10 [default = 5];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double autoplay_build_delay = 11 [default = 2];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double idle_timer_delay = 16 [default = 900];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShowArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShowArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShowArchive::GetClassData() const { return &_class_data_; }


void ShowArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShowArchive*>(&to_msg);
  auto& from = static_cast<const ShowArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.ShowArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_uistate()->::TSP::Reference::MergeFrom(
          from._internal_uistate());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_theme()->::TSP::Reference::MergeFrom(
          from._internal_theme());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_slidetree()->::KN::SlideTreeArchive::MergeFrom(
          from._internal_slidetree());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_size()->::TSP::Size::MergeFrom(
          from._internal_size());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_stylesheet()->::TSP::Reference::MergeFrom(
          from._internal_stylesheet());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_recording()->::TSP::Reference::MergeFrom(
          from._internal_recording());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_soundtrack()->::TSP::Reference::MergeFrom(
          from._internal_soundtrack());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.mode_ = from._impl_.mode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.slidenumbersvisible_ = from._impl_.slidenumbersvisible_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.loop_presentation_ = from._impl_.loop_presentation_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.idle_timer_active_ = from._impl_.idle_timer_active_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.automatically_plays_upon_open_ = from._impl_.automatically_plays_upon_open_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.autoplay_transition_delay_ = from._impl_.autoplay_transition_delay_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.autoplay_build_delay_ = from._impl_.autoplay_build_delay_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.idle_timer_delay_ = from._impl_.idle_timer_delay_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShowArchive::CopyFrom(const ShowArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.ShowArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_uistate()) {
    if (!_impl_.uistate_->IsInitialized()) return false;
  }
  if (_internal_has_theme()) {
    if (!_impl_.theme_->IsInitialized()) return false;
  }
  if (_internal_has_slidetree()) {
    if (!_impl_.slidetree_->IsInitialized()) return false;
  }
  if (_internal_has_size()) {
    if (!_impl_.size_->IsInitialized()) return false;
  }
  if (_internal_has_stylesheet()) {
    if (!_impl_.stylesheet_->IsInitialized()) return false;
  }
  if (_internal_has_recording()) {
    if (!_impl_.recording_->IsInitialized()) return false;
  }
  if (_internal_has_soundtrack()) {
    if (!_impl_.soundtrack_->IsInitialized()) return false;
  }
  return true;
}

void ShowArchive::InternalSwap(ShowArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShowArchive, _impl_.automatically_plays_upon_open_)
      + sizeof(ShowArchive::_impl_.automatically_plays_upon_open_)
      - PROTOBUF_FIELD_OFFSET(ShowArchive, _impl_.uistate_)>(
          reinterpret_cast<char*>(&_impl_.uistate_),
          reinterpret_cast<char*>(&other->_impl_.uistate_));
  swap(_impl_.autoplay_transition_delay_, other->_impl_.autoplay_transition_delay_);
  swap(_impl_.autoplay_build_delay_, other->_impl_.autoplay_build_delay_);
  swap(_impl_.idle_timer_delay_, other->_impl_.idle_timer_delay_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShowArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[18]);
}

// ===================================================================

class DocumentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentArchive>()._impl_._has_bits_);
  static const ::TSA::DocumentArchive& super(const DocumentArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& show(const DocumentArchive* msg);
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& tables_custom_format_list(const DocumentArchive* msg);
  static void set_has_tables_custom_format_list(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSA::DocumentArchive&
DocumentArchive::_Internal::super(const DocumentArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::show(const DocumentArchive* msg) {
  return *msg->_impl_.show_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::tables_custom_format_list(const DocumentArchive* msg) {
  return *msg->_impl_.tables_custom_format_list_;
}
void DocumentArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void DocumentArchive::clear_show() {
  if (_impl_.show_ != nullptr) _impl_.show_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void DocumentArchive::clear_tables_custom_format_list() {
  if (_impl_.tables_custom_format_list_ != nullptr) _impl_.tables_custom_format_list_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
DocumentArchive::DocumentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.DocumentArchive)
}
DocumentArchive::DocumentArchive(const DocumentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DocumentArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.tables_custom_format_list_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_show()) {
    _this->_impl_.show_ = new ::TSP::Reference(*from._impl_.show_);
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSA::DocumentArchive(*from._impl_.super_);
  }
  if (from._internal_has_tables_custom_format_list()) {
    _this->_impl_.tables_custom_format_list_ = new ::TSP::Reference(*from._impl_.tables_custom_format_list_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.DocumentArchive)
}

inline void DocumentArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.tables_custom_format_list_){nullptr}
  };
}

DocumentArchive::~DocumentArchive() {
  // @@protoc_insertion_point(destructor:KN.DocumentArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DocumentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.show_;
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.tables_custom_format_list_;
}

void DocumentArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DocumentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.DocumentArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.show_ != nullptr);
      _impl_.show_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tables_custom_format_list_ != nullptr);
      _impl_.tables_custom_format_list_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_show(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSA.DocumentArchive super = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference tables_custom_format_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tables_custom_format_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DocumentArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.DocumentArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference show = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::show(this),
        _Internal::show(this).GetCachedSize(), target, stream);
  }

  // required .TSA.DocumentArchive super = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference tables_custom_format_list = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::tables_custom_format_list(this),
        _Internal::tables_custom_format_list(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.DocumentArchive)
  return target;
}

size_t DocumentArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.DocumentArchive)
  size_t total_size = 0;

  if (_internal_has_show()) {
    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);
  }

  if (_internal_has_super()) {
    // required .TSA.DocumentArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  return total_size;
}
size_t DocumentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.DocumentArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);

    // required .TSA.DocumentArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference tables_custom_format_list = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tables_custom_format_list_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DocumentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentArchive::GetClassData() const { return &_class_data_; }


void DocumentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DocumentArchive*>(&to_msg);
  auto& from = static_cast<const DocumentArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.DocumentArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_show()->::TSP::Reference::MergeFrom(
          from._internal_show());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSA::DocumentArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tables_custom_format_list()->::TSP::Reference::MergeFrom(
          from._internal_tables_custom_format_list());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentArchive::CopyFrom(const DocumentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.DocumentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_show()) {
    if (!_impl_.show_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_tables_custom_format_list()) {
    if (!_impl_.tables_custom_format_list_->IsInitialized()) return false;
  }
  return true;
}

void DocumentArchive::InternalSwap(DocumentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentArchive, _impl_.tables_custom_format_list_)
      + sizeof(DocumentArchive::_impl_.tables_custom_format_list_)
      - PROTOBUF_FIELD_OFFSET(DocumentArchive, _impl_.show_)>(
          reinterpret_cast<char*>(&_impl_.show_),
          reinterpret_cast<char*>(&other->_impl_.show_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[19]);
}

// ===================================================================

class SlideStylePropertiesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideStylePropertiesArchive>()._impl_._has_bits_);
  static const ::TSD::FillArchive& fill(const SlideStylePropertiesArchive* msg);
  static void set_has_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::KN::TransitionAttributesArchive& transition(const SlideStylePropertiesArchive* msg);
  static void set_has_transition(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_transition_null(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_titleplaceholdervisibility(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bodyplaceholdervisibility(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_objectplaceholdervisibility(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_slidenumberplaceholdervisibility(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::TSD::FillArchive&
SlideStylePropertiesArchive::_Internal::fill(const SlideStylePropertiesArchive* msg) {
  return *msg->_impl_.fill_;
}
const ::KN::TransitionAttributesArchive&
SlideStylePropertiesArchive::_Internal::transition(const SlideStylePropertiesArchive* msg) {
  return *msg->_impl_.transition_;
}
void SlideStylePropertiesArchive::clear_fill() {
  if (_impl_.fill_ != nullptr) _impl_.fill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SlideStylePropertiesArchive::SlideStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.SlideStylePropertiesArchive)
}
SlideStylePropertiesArchive::SlideStylePropertiesArchive(const SlideStylePropertiesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SlideStylePropertiesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fill_){nullptr}
    , decltype(_impl_.transition_){nullptr}
    , decltype(_impl_.transition_null_){}
    , decltype(_impl_.titleplaceholdervisibility_){}
    , decltype(_impl_.bodyplaceholdervisibility_){}
    , decltype(_impl_.objectplaceholdervisibility_){}
    , decltype(_impl_.slidenumberplaceholdervisibility_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fill()) {
    _this->_impl_.fill_ = new ::TSD::FillArchive(*from._impl_.fill_);
  }
  if (from._internal_has_transition()) {
    _this->_impl_.transition_ = new ::KN::TransitionAttributesArchive(*from._impl_.transition_);
  }
  ::memcpy(&_impl_.transition_null_, &from._impl_.transition_null_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.slidenumberplaceholdervisibility_) -
    reinterpret_cast<char*>(&_impl_.transition_null_)) + sizeof(_impl_.slidenumberplaceholdervisibility_));
  // @@protoc_insertion_point(copy_constructor:KN.SlideStylePropertiesArchive)
}

inline void SlideStylePropertiesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fill_){nullptr}
    , decltype(_impl_.transition_){nullptr}
    , decltype(_impl_.transition_null_){false}
    , decltype(_impl_.titleplaceholdervisibility_){false}
    , decltype(_impl_.bodyplaceholdervisibility_){false}
    , decltype(_impl_.objectplaceholdervisibility_){false}
    , decltype(_impl_.slidenumberplaceholdervisibility_){false}
  };
}

SlideStylePropertiesArchive::~SlideStylePropertiesArchive() {
  // @@protoc_insertion_point(destructor:KN.SlideStylePropertiesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SlideStylePropertiesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.fill_;
  if (this != internal_default_instance()) delete _impl_.transition_;
}

void SlideStylePropertiesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SlideStylePropertiesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideStylePropertiesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.fill_ != nullptr);
      _impl_.fill_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.transition_ != nullptr);
      _impl_.transition_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.transition_null_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.slidenumberplaceholdervisibility_) -
        reinterpret_cast<char*>(&_impl_.transition_null_)) + sizeof(_impl_.slidenumberplaceholdervisibility_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideStylePropertiesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.FillArchive fill = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.TransitionAttributesArchive transition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool transition_null = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_transition_null(&has_bits);
          _impl_.transition_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool titlePlaceholderVisibility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_titleplaceholdervisibility(&has_bits);
          _impl_.titleplaceholdervisibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bodyPlaceholderVisibility = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_bodyplaceholdervisibility(&has_bits);
          _impl_.bodyplaceholdervisibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool slideNumberPlaceholderVisibility = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_slidenumberplaceholdervisibility(&has_bits);
          _impl_.slidenumberplaceholdervisibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool objectPlaceholderVisibility = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_objectplaceholdervisibility(&has_bits);
          _impl_.objectplaceholdervisibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SlideStylePropertiesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideStylePropertiesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.FillArchive fill = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::fill(this),
        _Internal::fill(this).GetCachedSize(), target, stream);
  }

  // optional .KN.TransitionAttributesArchive transition = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::transition(this),
        _Internal::transition(this).GetCachedSize(), target, stream);
  }

  // optional bool transition_null = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_transition_null(), target);
  }

  // optional bool titlePlaceholderVisibility = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_titleplaceholdervisibility(), target);
  }

  // optional bool bodyPlaceholderVisibility = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_bodyplaceholdervisibility(), target);
  }

  // optional bool slideNumberPlaceholderVisibility = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_slidenumberplaceholdervisibility(), target);
  }

  // optional bool objectPlaceholderVisibility = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_objectplaceholdervisibility(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideStylePropertiesArchive)
  return target;
}

size_t SlideStylePropertiesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideStylePropertiesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .TSD.FillArchive fill = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.fill_);
    }

    // optional .KN.TransitionAttributesArchive transition = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.transition_);
    }

    // optional bool transition_null = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool titlePlaceholderVisibility = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool bodyPlaceholderVisibility = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool objectPlaceholderVisibility = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool slideNumberPlaceholderVisibility = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideStylePropertiesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SlideStylePropertiesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideStylePropertiesArchive::GetClassData() const { return &_class_data_; }


void SlideStylePropertiesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SlideStylePropertiesArchive*>(&to_msg);
  auto& from = static_cast<const SlideStylePropertiesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideStylePropertiesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_fill()->::TSD::FillArchive::MergeFrom(
          from._internal_fill());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_transition()->::KN::TransitionAttributesArchive::MergeFrom(
          from._internal_transition());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.transition_null_ = from._impl_.transition_null_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.titleplaceholdervisibility_ = from._impl_.titleplaceholdervisibility_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.bodyplaceholdervisibility_ = from._impl_.bodyplaceholdervisibility_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.objectplaceholdervisibility_ = from._impl_.objectplaceholdervisibility_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.slidenumberplaceholdervisibility_ = from._impl_.slidenumberplaceholdervisibility_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideStylePropertiesArchive::CopyFrom(const SlideStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideStylePropertiesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideStylePropertiesArchive::IsInitialized() const {
  if (_internal_has_fill()) {
    if (!_impl_.fill_->IsInitialized()) return false;
  }
  if (_internal_has_transition()) {
    if (!_impl_.transition_->IsInitialized()) return false;
  }
  return true;
}

void SlideStylePropertiesArchive::InternalSwap(SlideStylePropertiesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SlideStylePropertiesArchive, _impl_.slidenumberplaceholdervisibility_)
      + sizeof(SlideStylePropertiesArchive::_impl_.slidenumberplaceholdervisibility_)
      - PROTOBUF_FIELD_OFFSET(SlideStylePropertiesArchive, _impl_.fill_)>(
          reinterpret_cast<char*>(&_impl_.fill_),
          reinterpret_cast<char*>(&other->_impl_.fill_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideStylePropertiesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[20]);
}

// ===================================================================

class SlideStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideStyleArchive>()._impl_._has_bits_);
  static const ::TSS::StyleArchive& super(const SlideStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_override_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::KN::SlideStylePropertiesArchive& slide_properties(const SlideStyleArchive* msg);
  static void set_has_slide_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::StyleArchive&
SlideStyleArchive::_Internal::super(const SlideStyleArchive* msg) {
  return *msg->_impl_.super_;
}
const ::KN::SlideStylePropertiesArchive&
SlideStyleArchive::_Internal::slide_properties(const SlideStyleArchive* msg) {
  return *msg->_impl_.slide_properties_;
}
void SlideStyleArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SlideStyleArchive::SlideStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.SlideStyleArchive)
}
SlideStyleArchive::SlideStyleArchive(const SlideStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SlideStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_properties_){nullptr}
    , decltype(_impl_.override_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSS::StyleArchive(*from._impl_.super_);
  }
  if (from._internal_has_slide_properties()) {
    _this->_impl_.slide_properties_ = new ::KN::SlideStylePropertiesArchive(*from._impl_.slide_properties_);
  }
  _this->_impl_.override_count_ = from._impl_.override_count_;
  // @@protoc_insertion_point(copy_constructor:KN.SlideStyleArchive)
}

inline void SlideStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_properties_){nullptr}
    , decltype(_impl_.override_count_){0u}
  };
}

SlideStyleArchive::~SlideStyleArchive() {
  // @@protoc_insertion_point(destructor:KN.SlideStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SlideStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slide_properties_;
}

void SlideStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SlideStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slide_properties_ != nullptr);
      _impl_.slide_properties_->Clear();
    }
  }
  _impl_.override_count_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 override_count = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_override_count(&has_bits);
          _impl_.override_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.SlideStylePropertiesArchive slide_properties = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_properties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SlideStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_override_count(), target);
  }

  // optional .KN.SlideStylePropertiesArchive slide_properties = 11;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::slide_properties(this),
        _Internal::slide_properties(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideStyleArchive)
  return target;
}

size_t SlideStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .KN.SlideStylePropertiesArchive slide_properties = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.slide_properties_);
    }

    // optional uint32 override_count = 10 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_override_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SlideStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideStyleArchive::GetClassData() const { return &_class_data_; }


void SlideStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SlideStyleArchive*>(&to_msg);
  auto& from = static_cast<const SlideStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSS::StyleArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slide_properties()->::KN::SlideStylePropertiesArchive::MergeFrom(
          from._internal_slide_properties());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.override_count_ = from._impl_.override_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideStyleArchive::CopyFrom(const SlideStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_properties()) {
    if (!_impl_.slide_properties_->IsInitialized()) return false;
  }
  return true;
}

void SlideStyleArchive::InternalSwap(SlideStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SlideStyleArchive, _impl_.override_count_)
      + sizeof(SlideStyleArchive::_impl_.override_count_)
      - PROTOBUF_FIELD_OFFSET(SlideStyleArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[21]);
}

// ===================================================================

class PasteboardNativeStorageArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PasteboardNativeStorageArchive>()._impl_._has_bits_);
  static const ::TSP::Size& originalshowsize(const PasteboardNativeStorageArchive* msg);
  static void set_has_originalshowsize(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Size&
PasteboardNativeStorageArchive::_Internal::originalshowsize(const PasteboardNativeStorageArchive* msg) {
  return *msg->_impl_.originalshowsize_;
}
void PasteboardNativeStorageArchive::clear_drawables() {
  _impl_.drawables_.Clear();
}
void PasteboardNativeStorageArchive::clear_builds() {
  _impl_.builds_.Clear();
}
void PasteboardNativeStorageArchive::clear_slidenodes() {
  _impl_.slidenodes_.Clear();
}
void PasteboardNativeStorageArchive::clear_originalshowsize() {
  if (_impl_.originalshowsize_ != nullptr) _impl_.originalshowsize_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PasteboardNativeStorageArchive::clear_titleranges() {
  _impl_.titleranges_.Clear();
}
PasteboardNativeStorageArchive::PasteboardNativeStorageArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.PasteboardNativeStorageArchive)
}
PasteboardNativeStorageArchive::PasteboardNativeStorageArchive(const PasteboardNativeStorageArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PasteboardNativeStorageArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawables_){from._impl_.drawables_}
    , decltype(_impl_.builds_){from._impl_.builds_}
    , decltype(_impl_.buildchunks_){from._impl_.buildchunks_}
    , decltype(_impl_.slidenodes_){from._impl_.slidenodes_}
    , decltype(_impl_.titleranges_){from._impl_.titleranges_}
    , decltype(_impl_.originalshowsize_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_originalshowsize()) {
    _this->_impl_.originalshowsize_ = new ::TSP::Size(*from._impl_.originalshowsize_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.PasteboardNativeStorageArchive)
}

inline void PasteboardNativeStorageArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawables_){arena}
    , decltype(_impl_.builds_){arena}
    , decltype(_impl_.buildchunks_){arena}
    , decltype(_impl_.slidenodes_){arena}
    , decltype(_impl_.titleranges_){arena}
    , decltype(_impl_.originalshowsize_){nullptr}
  };
}

PasteboardNativeStorageArchive::~PasteboardNativeStorageArchive() {
  // @@protoc_insertion_point(destructor:KN.PasteboardNativeStorageArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PasteboardNativeStorageArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.drawables_.~RepeatedPtrField();
  _impl_.builds_.~RepeatedPtrField();
  _impl_.buildchunks_.~RepeatedPtrField();
  _impl_.slidenodes_.~RepeatedPtrField();
  _impl_.titleranges_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.originalshowsize_;
}

void PasteboardNativeStorageArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PasteboardNativeStorageArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.PasteboardNativeStorageArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.drawables_.Clear();
  _impl_.builds_.Clear();
  _impl_.buildchunks_.Clear();
  _impl_.slidenodes_.Clear();
  _impl_.titleranges_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.originalshowsize_ != nullptr);
    _impl_.originalshowsize_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PasteboardNativeStorageArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference drawables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference builds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_builds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkArchive buildChunks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buildchunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference slideNodes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slidenodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Size originalShowSize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_originalshowsize(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Range titleRanges = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_titleranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PasteboardNativeStorageArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.PasteboardNativeStorageArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference drawables = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_drawables_size()); i < n; i++) {
    const auto& repfield = this->_internal_drawables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference builds = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_builds_size()); i < n; i++) {
    const auto& repfield = this->_internal_builds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .KN.BuildChunkArchive buildChunks = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buildchunks_size()); i < n; i++) {
    const auto& repfield = this->_internal_buildchunks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference slideNodes = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_slidenodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_slidenodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Size originalShowSize = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::originalshowsize(this),
        _Internal::originalshowsize(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Range titleRanges = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_titleranges_size()); i < n; i++) {
    const auto& repfield = this->_internal_titleranges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.PasteboardNativeStorageArchive)
  return target;
}

size_t PasteboardNativeStorageArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.PasteboardNativeStorageArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference drawables = 1;
  total_size += 1UL * this->_internal_drawables_size();
  for (const auto& msg : this->_impl_.drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference builds = 2;
  total_size += 1UL * this->_internal_builds_size();
  for (const auto& msg : this->_impl_.builds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkArchive buildChunks = 3;
  total_size += 1UL * this->_internal_buildchunks_size();
  for (const auto& msg : this->_impl_.buildchunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference slideNodes = 4;
  total_size += 1UL * this->_internal_slidenodes_size();
  for (const auto& msg : this->_impl_.slidenodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Range titleRanges = 6;
  total_size += 1UL * this->_internal_titleranges_size();
  for (const auto& msg : this->_impl_.titleranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Size originalShowSize = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.originalshowsize_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PasteboardNativeStorageArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PasteboardNativeStorageArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PasteboardNativeStorageArchive::GetClassData() const { return &_class_data_; }


void PasteboardNativeStorageArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PasteboardNativeStorageArchive*>(&to_msg);
  auto& from = static_cast<const PasteboardNativeStorageArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.PasteboardNativeStorageArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.drawables_.MergeFrom(from._impl_.drawables_);
  _this->_impl_.builds_.MergeFrom(from._impl_.builds_);
  _this->_impl_.buildchunks_.MergeFrom(from._impl_.buildchunks_);
  _this->_impl_.slidenodes_.MergeFrom(from._impl_.slidenodes_);
  _this->_impl_.titleranges_.MergeFrom(from._impl_.titleranges_);
  if (from._internal_has_originalshowsize()) {
    _this->_internal_mutable_originalshowsize()->::TSP::Size::MergeFrom(
        from._internal_originalshowsize());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PasteboardNativeStorageArchive::CopyFrom(const PasteboardNativeStorageArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.PasteboardNativeStorageArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasteboardNativeStorageArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.drawables_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.builds_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.buildchunks_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.slidenodes_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.titleranges_))
    return false;
  if (_internal_has_originalshowsize()) {
    if (!_impl_.originalshowsize_->IsInitialized()) return false;
  }
  return true;
}

void PasteboardNativeStorageArchive::InternalSwap(PasteboardNativeStorageArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.drawables_.InternalSwap(&other->_impl_.drawables_);
  _impl_.builds_.InternalSwap(&other->_impl_.builds_);
  _impl_.buildchunks_.InternalSwap(&other->_impl_.buildchunks_);
  _impl_.slidenodes_.InternalSwap(&other->_impl_.slidenodes_);
  _impl_.titleranges_.InternalSwap(&other->_impl_.titleranges_);
  swap(_impl_.originalshowsize_, other->_impl_.originalshowsize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PasteboardNativeStorageArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[22]);
}

// ===================================================================

class MasterChangeBlobArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MasterChangeBlobArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& slide(const MasterChangeBlobArchive* msg);
  static void set_has_slide(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& master(const MasterChangeBlobArchive* msg);
  static void set_has_master(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& slide_style(const MasterChangeBlobArchive* msg);
  static void set_has_slide_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& title_placeholder(const MasterChangeBlobArchive* msg);
  static void set_has_title_placeholder(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& body_placeholder(const MasterChangeBlobArchive* msg);
  static void set_has_body_placeholder(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& object_placeholder(const MasterChangeBlobArchive* msg);
  static void set_has_object_placeholder(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::TSP::Reference&
MasterChangeBlobArchive::_Internal::slide(const MasterChangeBlobArchive* msg) {
  return *msg->_impl_.slide_;
}
const ::TSP::Reference&
MasterChangeBlobArchive::_Internal::master(const MasterChangeBlobArchive* msg) {
  return *msg->_impl_.master_;
}
const ::TSP::Reference&
MasterChangeBlobArchive::_Internal::slide_style(const MasterChangeBlobArchive* msg) {
  return *msg->_impl_.slide_style_;
}
const ::TSP::Reference&
MasterChangeBlobArchive::_Internal::title_placeholder(const MasterChangeBlobArchive* msg) {
  return *msg->_impl_.title_placeholder_;
}
const ::TSP::Reference&
MasterChangeBlobArchive::_Internal::body_placeholder(const MasterChangeBlobArchive* msg) {
  return *msg->_impl_.body_placeholder_;
}
const ::TSP::Reference&
MasterChangeBlobArchive::_Internal::object_placeholder(const MasterChangeBlobArchive* msg) {
  return *msg->_impl_.object_placeholder_;
}
void MasterChangeBlobArchive::clear_slide() {
  if (_impl_.slide_ != nullptr) _impl_.slide_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MasterChangeBlobArchive::clear_master() {
  if (_impl_.master_ != nullptr) _impl_.master_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void MasterChangeBlobArchive::clear_slide_style() {
  if (_impl_.slide_style_ != nullptr) _impl_.slide_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void MasterChangeBlobArchive::clear_title_placeholder() {
  if (_impl_.title_placeholder_ != nullptr) _impl_.title_placeholder_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void MasterChangeBlobArchive::clear_body_placeholder() {
  if (_impl_.body_placeholder_ != nullptr) _impl_.body_placeholder_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void MasterChangeBlobArchive::clear_object_placeholder() {
  if (_impl_.object_placeholder_ != nullptr) _impl_.object_placeholder_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void MasterChangeBlobArchive::clear_drawables() {
  _impl_.drawables_.Clear();
}
MasterChangeBlobArchive::MasterChangeBlobArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.MasterChangeBlobArchive)
}
MasterChangeBlobArchive::MasterChangeBlobArchive(const MasterChangeBlobArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MasterChangeBlobArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawables_){from._impl_.drawables_}
    , decltype(_impl_.slide_){nullptr}
    , decltype(_impl_.master_){nullptr}
    , decltype(_impl_.slide_style_){nullptr}
    , decltype(_impl_.title_placeholder_){nullptr}
    , decltype(_impl_.body_placeholder_){nullptr}
    , decltype(_impl_.object_placeholder_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_slide()) {
    _this->_impl_.slide_ = new ::TSP::Reference(*from._impl_.slide_);
  }
  if (from._internal_has_master()) {
    _this->_impl_.master_ = new ::TSP::Reference(*from._impl_.master_);
  }
  if (from._internal_has_slide_style()) {
    _this->_impl_.slide_style_ = new ::TSP::Reference(*from._impl_.slide_style_);
  }
  if (from._internal_has_title_placeholder()) {
    _this->_impl_.title_placeholder_ = new ::TSP::Reference(*from._impl_.title_placeholder_);
  }
  if (from._internal_has_body_placeholder()) {
    _this->_impl_.body_placeholder_ = new ::TSP::Reference(*from._impl_.body_placeholder_);
  }
  if (from._internal_has_object_placeholder()) {
    _this->_impl_.object_placeholder_ = new ::TSP::Reference(*from._impl_.object_placeholder_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.MasterChangeBlobArchive)
}

inline void MasterChangeBlobArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawables_){arena}
    , decltype(_impl_.slide_){nullptr}
    , decltype(_impl_.master_){nullptr}
    , decltype(_impl_.slide_style_){nullptr}
    , decltype(_impl_.title_placeholder_){nullptr}
    , decltype(_impl_.body_placeholder_){nullptr}
    , decltype(_impl_.object_placeholder_){nullptr}
  };
}

MasterChangeBlobArchive::~MasterChangeBlobArchive() {
  // @@protoc_insertion_point(destructor:KN.MasterChangeBlobArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MasterChangeBlobArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.drawables_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.slide_;
  if (this != internal_default_instance()) delete _impl_.master_;
  if (this != internal_default_instance()) delete _impl_.slide_style_;
  if (this != internal_default_instance()) delete _impl_.title_placeholder_;
  if (this != internal_default_instance()) delete _impl_.body_placeholder_;
  if (this != internal_default_instance()) delete _impl_.object_placeholder_;
}

void MasterChangeBlobArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MasterChangeBlobArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.MasterChangeBlobArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.drawables_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.slide_ != nullptr);
      _impl_.slide_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.master_ != nullptr);
      _impl_.master_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.slide_style_ != nullptr);
      _impl_.slide_style_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.title_placeholder_ != nullptr);
      _impl_.title_placeholder_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.body_placeholder_ != nullptr);
      _impl_.body_placeholder_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.object_placeholder_ != nullptr);
      _impl_.object_placeholder_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MasterChangeBlobArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference slide = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference master = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_master(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference slide_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference title_placeholder = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_title_placeholder(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference body_placeholder = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_body_placeholder(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference drawables = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference object_placeholder = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_placeholder(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MasterChangeBlobArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.MasterChangeBlobArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference slide = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::slide(this),
        _Internal::slide(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference master = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::master(this),
        _Internal::master(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference slide_style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::slide_style(this),
        _Internal::slide_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference title_placeholder = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::title_placeholder(this),
        _Internal::title_placeholder(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference body_placeholder = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::body_placeholder(this),
        _Internal::body_placeholder(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference drawables = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_drawables_size()); i < n; i++) {
    const auto& repfield = this->_internal_drawables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference object_placeholder = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::object_placeholder(this),
        _Internal::object_placeholder(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.MasterChangeBlobArchive)
  return target;
}

size_t MasterChangeBlobArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.MasterChangeBlobArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference drawables = 6;
  total_size += 1UL * this->_internal_drawables_size();
  for (const auto& msg : this->_impl_.drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .TSP.Reference slide = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.slide_);
    }

    // optional .TSP.Reference master = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.master_);
    }

    // optional .TSP.Reference slide_style = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.slide_style_);
    }

    // optional .TSP.Reference title_placeholder = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.title_placeholder_);
    }

    // optional .TSP.Reference body_placeholder = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.body_placeholder_);
    }

    // optional .TSP.Reference object_placeholder = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.object_placeholder_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MasterChangeBlobArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MasterChangeBlobArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MasterChangeBlobArchive::GetClassData() const { return &_class_data_; }


void MasterChangeBlobArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MasterChangeBlobArchive*>(&to_msg);
  auto& from = static_cast<const MasterChangeBlobArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.MasterChangeBlobArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.drawables_.MergeFrom(from._impl_.drawables_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_slide()->::TSP::Reference::MergeFrom(
          from._internal_slide());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_master()->::TSP::Reference::MergeFrom(
          from._internal_master());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_slide_style()->::TSP::Reference::MergeFrom(
          from._internal_slide_style());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_title_placeholder()->::TSP::Reference::MergeFrom(
          from._internal_title_placeholder());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_body_placeholder()->::TSP::Reference::MergeFrom(
          from._internal_body_placeholder());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_object_placeholder()->::TSP::Reference::MergeFrom(
          from._internal_object_placeholder());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MasterChangeBlobArchive::CopyFrom(const MasterChangeBlobArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.MasterChangeBlobArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterChangeBlobArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.drawables_))
    return false;
  if (_internal_has_slide()) {
    if (!_impl_.slide_->IsInitialized()) return false;
  }
  if (_internal_has_master()) {
    if (!_impl_.master_->IsInitialized()) return false;
  }
  if (_internal_has_slide_style()) {
    if (!_impl_.slide_style_->IsInitialized()) return false;
  }
  if (_internal_has_title_placeholder()) {
    if (!_impl_.title_placeholder_->IsInitialized()) return false;
  }
  if (_internal_has_body_placeholder()) {
    if (!_impl_.body_placeholder_->IsInitialized()) return false;
  }
  if (_internal_has_object_placeholder()) {
    if (!_impl_.object_placeholder_->IsInitialized()) return false;
  }
  return true;
}

void MasterChangeBlobArchive::InternalSwap(MasterChangeBlobArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.drawables_.InternalSwap(&other->_impl_.drawables_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MasterChangeBlobArchive, _impl_.object_placeholder_)
      + sizeof(MasterChangeBlobArchive::_impl_.object_placeholder_)
      - PROTOBUF_FIELD_OFFSET(MasterChangeBlobArchive, _impl_.slide_)>(
          reinterpret_cast<char*>(&_impl_.slide_),
          reinterpret_cast<char*>(&other->_impl_.slide_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MasterChangeBlobArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[23]);
}

// ===================================================================

class RecordingArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& movie_track(const RecordingArchive* msg);
  static void set_has_movie_track(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sync_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Date& modification_date(const RecordingArchive* msg);
  static void set_has_modification_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
RecordingArchive::_Internal::movie_track(const RecordingArchive* msg) {
  return *msg->_impl_.movie_track_;
}
const ::TSP::Date&
RecordingArchive::_Internal::modification_date(const RecordingArchive* msg) {
  return *msg->_impl_.modification_date_;
}
void RecordingArchive::clear_event_tracks() {
  _impl_.event_tracks_.Clear();
}
void RecordingArchive::clear_movie_track() {
  if (_impl_.movie_track_ != nullptr) _impl_.movie_track_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RecordingArchive::clear_modification_date() {
  if (_impl_.modification_date_ != nullptr) _impl_.modification_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
RecordingArchive::RecordingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.RecordingArchive)
}
RecordingArchive::RecordingArchive(const RecordingArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecordingArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_tracks_){from._impl_.event_tracks_}
    , decltype(_impl_.movie_track_){nullptr}
    , decltype(_impl_.modification_date_){nullptr}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.sync_state_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_movie_track()) {
    _this->_impl_.movie_track_ = new ::TSP::Reference(*from._impl_.movie_track_);
  }
  if (from._internal_has_modification_date()) {
    _this->_impl_.modification_date_ = new ::TSP::Date(*from._impl_.modification_date_);
  }
  ::memcpy(&_impl_.duration_, &from._impl_.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sync_state_) -
    reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.sync_state_));
  // @@protoc_insertion_point(copy_constructor:KN.RecordingArchive)
}

inline void RecordingArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_tracks_){arena}
    , decltype(_impl_.movie_track_){nullptr}
    , decltype(_impl_.modification_date_){nullptr}
    , decltype(_impl_.duration_){0}
    , decltype(_impl_.sync_state_){0}
  };
}

RecordingArchive::~RecordingArchive() {
  // @@protoc_insertion_point(destructor:KN.RecordingArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordingArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.event_tracks_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.movie_track_;
  if (this != internal_default_instance()) delete _impl_.modification_date_;
}

void RecordingArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecordingArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.RecordingArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_tracks_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.movie_track_ != nullptr);
      _impl_.movie_track_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.modification_date_ != nullptr);
      _impl_.modification_date_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sync_state_) -
        reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.sync_state_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference event_tracks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_event_tracks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference movie_track = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_movie_track(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.RecordingArchive.RecordingSyncState sync_state = 4 [default = kRecordingSyncStateInSyncWithShow];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::RecordingArchive_RecordingSyncState_IsValid(val))) {
            _internal_set_sync_state(static_cast<::KN::RecordingArchive_RecordingSyncState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Date modification_date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_modification_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordingArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.RecordingArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference event_tracks = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_event_tracks_size()); i < n; i++) {
    const auto& repfield = this->_internal_event_tracks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference movie_track = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::movie_track(this),
        _Internal::movie_track(this).GetCachedSize(), target, stream);
  }

  // optional double duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_duration(), target);
  }

  // optional .KN.RecordingArchive.RecordingSyncState sync_state = 4 [default = kRecordingSyncStateInSyncWithShow];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_sync_state(), target);
  }

  // optional .TSP.Date modification_date = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::modification_date(this),
        _Internal::modification_date(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.RecordingArchive)
  return target;
}

size_t RecordingArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.RecordingArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference event_tracks = 1;
  total_size += 1UL * this->_internal_event_tracks_size();
  for (const auto& msg : this->_impl_.event_tracks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSP.Reference movie_track = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.movie_track_);
    }

    // optional .TSP.Date modification_date = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.modification_date_);
    }

    // optional double duration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .KN.RecordingArchive.RecordingSyncState sync_state = 4 [default = kRecordingSyncStateInSyncWithShow];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_sync_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordingArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecordingArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordingArchive::GetClassData() const { return &_class_data_; }


void RecordingArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecordingArchive*>(&to_msg);
  auto& from = static_cast<const RecordingArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.RecordingArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.event_tracks_.MergeFrom(from._impl_.event_tracks_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_movie_track()->::TSP::Reference::MergeFrom(
          from._internal_movie_track());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_modification_date()->::TSP::Date::MergeFrom(
          from._internal_modification_date());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sync_state_ = from._impl_.sync_state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordingArchive::CopyFrom(const RecordingArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.RecordingArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.event_tracks_))
    return false;
  if (_internal_has_movie_track()) {
    if (!_impl_.movie_track_->IsInitialized()) return false;
  }
  if (_internal_has_modification_date()) {
    if (!_impl_.modification_date_->IsInitialized()) return false;
  }
  return true;
}

void RecordingArchive::InternalSwap(RecordingArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.event_tracks_.InternalSwap(&other->_impl_.event_tracks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordingArchive, _impl_.sync_state_)
      + sizeof(RecordingArchive::_impl_.sync_state_)
      - PROTOBUF_FIELD_OFFSET(RecordingArchive, _impl_.movie_track_)>(
          reinterpret_cast<char*>(&_impl_.movie_track_),
          reinterpret_cast<char*>(&other->_impl_.movie_track_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[24]);
}

// ===================================================================

class RecordingEventTrackArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingEventTrackArchive>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RecordingEventTrackArchive::RecordingEventTrackArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.RecordingEventTrackArchive)
}
RecordingEventTrackArchive::RecordingEventTrackArchive(const RecordingEventTrackArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecordingEventTrackArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KN.RecordingEventTrackArchive)
}

inline void RecordingEventTrackArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.events_){arena}
    , decltype(_impl_.type_){}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RecordingEventTrackArchive::~RecordingEventTrackArchive() {
  // @@protoc_insertion_point(destructor:KN.RecordingEventTrackArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordingEventTrackArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.events_.~RepeatedPtrField();
  _impl_.type_.Destroy();
}

void RecordingEventTrackArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecordingEventTrackArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.RecordingEventTrackArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.type_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingEventTrackArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.RecordingEventTrackArchive.type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.RecordingEventArchive events = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordingEventTrackArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.RecordingEventTrackArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.RecordingEventTrackArchive.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // repeated .KN.RecordingEventArchive events = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.RecordingEventTrackArchive)
  return target;
}

size_t RecordingEventTrackArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.RecordingEventTrackArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KN.RecordingEventArchive events = 2;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string type = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordingEventTrackArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecordingEventTrackArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordingEventTrackArchive::GetClassData() const { return &_class_data_; }


void RecordingEventTrackArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecordingEventTrackArchive*>(&to_msg);
  auto& from = static_cast<const RecordingEventTrackArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.RecordingEventTrackArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  if (from._internal_has_type()) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordingEventTrackArchive::CopyFrom(const RecordingEventTrackArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.RecordingEventTrackArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingEventTrackArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.events_))
    return false;
  return true;
}

void RecordingEventTrackArchive::InternalSwap(RecordingEventTrackArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingEventTrackArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[25]);
}

// ===================================================================

class RecordingEventArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingEventArchive>()._impl_._has_bits_);
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::KN::RecordingNavigationEventArchive& navigation_event_archive(const RecordingEventArchive* msg);
  static void set_has_navigation_event_archive(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::KN::RecordingLaserEventArchive& laser_event_archive(const RecordingEventArchive* msg);
  static void set_has_laser_event_archive(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::KN::RecordingPauseEventArchive& pause_event_archive(const RecordingEventArchive* msg);
  static void set_has_pause_event_archive(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::KN::RecordingMovieEventArchive& movie_event_archive(const RecordingEventArchive* msg);
  static void set_has_movie_event_archive(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::KN::RecordingNavigationEventArchive&
RecordingEventArchive::_Internal::navigation_event_archive(const RecordingEventArchive* msg) {
  return *msg->_impl_.navigation_event_archive_;
}
const ::KN::RecordingLaserEventArchive&
RecordingEventArchive::_Internal::laser_event_archive(const RecordingEventArchive* msg) {
  return *msg->_impl_.laser_event_archive_;
}
const ::KN::RecordingPauseEventArchive&
RecordingEventArchive::_Internal::pause_event_archive(const RecordingEventArchive* msg) {
  return *msg->_impl_.pause_event_archive_;
}
const ::KN::RecordingMovieEventArchive&
RecordingEventArchive::_Internal::movie_event_archive(const RecordingEventArchive* msg) {
  return *msg->_impl_.movie_event_archive_;
}
RecordingEventArchive::RecordingEventArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.RecordingEventArchive)
}
RecordingEventArchive::RecordingEventArchive(const RecordingEventArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecordingEventArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.navigation_event_archive_){nullptr}
    , decltype(_impl_.laser_event_archive_){nullptr}
    , decltype(_impl_.pause_event_archive_){nullptr}
    , decltype(_impl_.movie_event_archive_){nullptr}
    , decltype(_impl_.start_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_navigation_event_archive()) {
    _this->_impl_.navigation_event_archive_ = new ::KN::RecordingNavigationEventArchive(*from._impl_.navigation_event_archive_);
  }
  if (from._internal_has_laser_event_archive()) {
    _this->_impl_.laser_event_archive_ = new ::KN::RecordingLaserEventArchive(*from._impl_.laser_event_archive_);
  }
  if (from._internal_has_pause_event_archive()) {
    _this->_impl_.pause_event_archive_ = new ::KN::RecordingPauseEventArchive(*from._impl_.pause_event_archive_);
  }
  if (from._internal_has_movie_event_archive()) {
    _this->_impl_.movie_event_archive_ = new ::KN::RecordingMovieEventArchive(*from._impl_.movie_event_archive_);
  }
  _this->_impl_.start_time_ = from._impl_.start_time_;
  // @@protoc_insertion_point(copy_constructor:KN.RecordingEventArchive)
}

inline void RecordingEventArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.navigation_event_archive_){nullptr}
    , decltype(_impl_.laser_event_archive_){nullptr}
    , decltype(_impl_.pause_event_archive_){nullptr}
    , decltype(_impl_.movie_event_archive_){nullptr}
    , decltype(_impl_.start_time_){-1}
  };
}

RecordingEventArchive::~RecordingEventArchive() {
  // @@protoc_insertion_point(destructor:KN.RecordingEventArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordingEventArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.navigation_event_archive_;
  if (this != internal_default_instance()) delete _impl_.laser_event_archive_;
  if (this != internal_default_instance()) delete _impl_.pause_event_archive_;
  if (this != internal_default_instance()) delete _impl_.movie_event_archive_;
}

void RecordingEventArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecordingEventArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.RecordingEventArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.navigation_event_archive_ != nullptr);
      _impl_.navigation_event_archive_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.laser_event_archive_ != nullptr);
      _impl_.laser_event_archive_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.pause_event_archive_ != nullptr);
      _impl_.pause_event_archive_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.movie_event_archive_ != nullptr);
      _impl_.movie_event_archive_->Clear();
    }
    _impl_.start_time_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingEventArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double start_time = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_start_time(&has_bits);
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.RecordingNavigationEventArchive navigation_event_archive = 1000;
      case 1000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_navigation_event_archive(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.RecordingLaserEventArchive laser_event_archive = 1001;
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_laser_event_archive(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.RecordingPauseEventArchive pause_event_archive = 1002;
      case 1002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_pause_event_archive(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.RecordingMovieEventArchive movie_event_archive = 1003;
      case 1003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_movie_event_archive(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordingEventArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.RecordingEventArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double start_time = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_start_time(), target);
  }

  // optional .KN.RecordingNavigationEventArchive navigation_event_archive = 1000;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1000, _Internal::navigation_event_archive(this),
        _Internal::navigation_event_archive(this).GetCachedSize(), target, stream);
  }

  // optional .KN.RecordingLaserEventArchive laser_event_archive = 1001;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1001, _Internal::laser_event_archive(this),
        _Internal::laser_event_archive(this).GetCachedSize(), target, stream);
  }

  // optional .KN.RecordingPauseEventArchive pause_event_archive = 1002;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1002, _Internal::pause_event_archive(this),
        _Internal::pause_event_archive(this).GetCachedSize(), target, stream);
  }

  // optional .KN.RecordingMovieEventArchive movie_event_archive = 1003;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1003, _Internal::movie_event_archive(this),
        _Internal::movie_event_archive(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.RecordingEventArchive)
  return target;
}

size_t RecordingEventArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.RecordingEventArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .KN.RecordingNavigationEventArchive navigation_event_archive = 1000;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.navigation_event_archive_);
    }

    // optional .KN.RecordingLaserEventArchive laser_event_archive = 1001;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.laser_event_archive_);
    }

    // optional .KN.RecordingPauseEventArchive pause_event_archive = 1002;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pause_event_archive_);
    }

    // optional .KN.RecordingMovieEventArchive movie_event_archive = 1003;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.movie_event_archive_);
    }

    // optional double start_time = 1 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordingEventArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecordingEventArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordingEventArchive::GetClassData() const { return &_class_data_; }


void RecordingEventArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecordingEventArchive*>(&to_msg);
  auto& from = static_cast<const RecordingEventArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.RecordingEventArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_navigation_event_archive()->::KN::RecordingNavigationEventArchive::MergeFrom(
          from._internal_navigation_event_archive());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_laser_event_archive()->::KN::RecordingLaserEventArchive::MergeFrom(
          from._internal_laser_event_archive());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_pause_event_archive()->::KN::RecordingPauseEventArchive::MergeFrom(
          from._internal_pause_event_archive());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_movie_event_archive()->::KN::RecordingMovieEventArchive::MergeFrom(
          from._internal_movie_event_archive());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.start_time_ = from._impl_.start_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordingEventArchive::CopyFrom(const RecordingEventArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.RecordingEventArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingEventArchive::IsInitialized() const {
  if (_internal_has_navigation_event_archive()) {
    if (!_impl_.navigation_event_archive_->IsInitialized()) return false;
  }
  if (_internal_has_laser_event_archive()) {
    if (!_impl_.laser_event_archive_->IsInitialized()) return false;
  }
  if (_internal_has_movie_event_archive()) {
    if (!_impl_.movie_event_archive_->IsInitialized()) return false;
  }
  return true;
}

void RecordingEventArchive::InternalSwap(RecordingEventArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordingEventArchive, _impl_.movie_event_archive_)
      + sizeof(RecordingEventArchive::_impl_.movie_event_archive_)
      - PROTOBUF_FIELD_OFFSET(RecordingEventArchive, _impl_.navigation_event_archive_)>(
          reinterpret_cast<char*>(&_impl_.navigation_event_archive_),
          reinterpret_cast<char*>(&other->_impl_.navigation_event_archive_));
  swap(_impl_.start_time_, other->_impl_.start_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingEventArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[26]);
}

// ===================================================================

class RecordingNavigationEventArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingNavigationEventArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& target_slide_node_reference(const RecordingNavigationEventArchive* msg);
  static void set_has_target_slide_node_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_event_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_animation_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::Reference&
RecordingNavigationEventArchive::_Internal::target_slide_node_reference(const RecordingNavigationEventArchive* msg) {
  return *msg->_impl_.target_slide_node_reference_;
}
void RecordingNavigationEventArchive::clear_target_slide_node_reference() {
  if (_impl_.target_slide_node_reference_ != nullptr) _impl_.target_slide_node_reference_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RecordingNavigationEventArchive::RecordingNavigationEventArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.RecordingNavigationEventArchive)
}
RecordingNavigationEventArchive::RecordingNavigationEventArchive(const RecordingNavigationEventArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecordingNavigationEventArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_slide_node_reference_){nullptr}
    , decltype(_impl_.target_event_index_){}
    , decltype(_impl_.animation_phase_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target_slide_node_reference()) {
    _this->_impl_.target_slide_node_reference_ = new ::TSP::Reference(*from._impl_.target_slide_node_reference_);
  }
  ::memcpy(&_impl_.target_event_index_, &from._impl_.target_event_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.animation_phase_) -
    reinterpret_cast<char*>(&_impl_.target_event_index_)) + sizeof(_impl_.animation_phase_));
  // @@protoc_insertion_point(copy_constructor:KN.RecordingNavigationEventArchive)
}

inline void RecordingNavigationEventArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_slide_node_reference_){nullptr}
    , decltype(_impl_.target_event_index_){0u}
    , decltype(_impl_.animation_phase_){0}
  };
}

RecordingNavigationEventArchive::~RecordingNavigationEventArchive() {
  // @@protoc_insertion_point(destructor:KN.RecordingNavigationEventArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordingNavigationEventArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.target_slide_node_reference_;
}

void RecordingNavigationEventArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecordingNavigationEventArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.RecordingNavigationEventArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.target_slide_node_reference_ != nullptr);
    _impl_.target_slide_node_reference_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.target_event_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.animation_phase_) -
        reinterpret_cast<char*>(&_impl_.target_event_index_)) + sizeof(_impl_.animation_phase_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingNavigationEventArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference target_slide_node_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_slide_node_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 target_event_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_target_event_index(&has_bits);
          _impl_.target_event_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.RecordingNavigationEventArchive.RecordingNavigationEventAnimationPhase animation_phase = 3 [default = kRecordingNavigationEventAnimationNone];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_IsValid(val))) {
            _internal_set_animation_phase(static_cast<::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordingNavigationEventArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.RecordingNavigationEventArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference target_slide_node_reference = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::target_slide_node_reference(this),
        _Internal::target_slide_node_reference(this).GetCachedSize(), target, stream);
  }

  // optional uint32 target_event_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_event_index(), target);
  }

  // optional .KN.RecordingNavigationEventArchive.RecordingNavigationEventAnimationPhase animation_phase = 3 [default = kRecordingNavigationEventAnimationNone];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_animation_phase(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.RecordingNavigationEventArchive)
  return target;
}

size_t RecordingNavigationEventArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.RecordingNavigationEventArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.Reference target_slide_node_reference = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.target_slide_node_reference_);
    }

    // optional uint32 target_event_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_event_index());
    }

    // optional .KN.RecordingNavigationEventArchive.RecordingNavigationEventAnimationPhase animation_phase = 3 [default = kRecordingNavigationEventAnimationNone];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_animation_phase());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordingNavigationEventArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecordingNavigationEventArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordingNavigationEventArchive::GetClassData() const { return &_class_data_; }


void RecordingNavigationEventArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecordingNavigationEventArchive*>(&to_msg);
  auto& from = static_cast<const RecordingNavigationEventArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.RecordingNavigationEventArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_target_slide_node_reference()->::TSP::Reference::MergeFrom(
          from._internal_target_slide_node_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.target_event_index_ = from._impl_.target_event_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.animation_phase_ = from._impl_.animation_phase_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordingNavigationEventArchive::CopyFrom(const RecordingNavigationEventArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.RecordingNavigationEventArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingNavigationEventArchive::IsInitialized() const {
  if (_internal_has_target_slide_node_reference()) {
    if (!_impl_.target_slide_node_reference_->IsInitialized()) return false;
  }
  return true;
}

void RecordingNavigationEventArchive::InternalSwap(RecordingNavigationEventArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordingNavigationEventArchive, _impl_.animation_phase_)
      + sizeof(RecordingNavigationEventArchive::_impl_.animation_phase_)
      - PROTOBUF_FIELD_OFFSET(RecordingNavigationEventArchive, _impl_.target_slide_node_reference_)>(
          reinterpret_cast<char*>(&_impl_.target_slide_node_reference_),
          reinterpret_cast<char*>(&other->_impl_.target_slide_node_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingNavigationEventArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[27]);
}

// ===================================================================

class RecordingLaserEventArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingLaserEventArchive>()._impl_._has_bits_);
  static const ::TSP::Point& unscaled_location(const RecordingLaserEventArchive* msg);
  static void set_has_unscaled_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Point&
RecordingLaserEventArchive::_Internal::unscaled_location(const RecordingLaserEventArchive* msg) {
  return *msg->_impl_.unscaled_location_;
}
void RecordingLaserEventArchive::clear_unscaled_location() {
  if (_impl_.unscaled_location_ != nullptr) _impl_.unscaled_location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RecordingLaserEventArchive::RecordingLaserEventArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.RecordingLaserEventArchive)
}
RecordingLaserEventArchive::RecordingLaserEventArchive(const RecordingLaserEventArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecordingLaserEventArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unscaled_location_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_unscaled_location()) {
    _this->_impl_.unscaled_location_ = new ::TSP::Point(*from._impl_.unscaled_location_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.RecordingLaserEventArchive)
}

inline void RecordingLaserEventArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unscaled_location_){nullptr}
  };
}

RecordingLaserEventArchive::~RecordingLaserEventArchive() {
  // @@protoc_insertion_point(destructor:KN.RecordingLaserEventArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordingLaserEventArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.unscaled_location_;
}

void RecordingLaserEventArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecordingLaserEventArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.RecordingLaserEventArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.unscaled_location_ != nullptr);
    _impl_.unscaled_location_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingLaserEventArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Point unscaled_location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_unscaled_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordingLaserEventArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.RecordingLaserEventArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Point unscaled_location = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::unscaled_location(this),
        _Internal::unscaled_location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.RecordingLaserEventArchive)
  return target;
}

size_t RecordingLaserEventArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.RecordingLaserEventArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Point unscaled_location = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unscaled_location_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordingLaserEventArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecordingLaserEventArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordingLaserEventArchive::GetClassData() const { return &_class_data_; }


void RecordingLaserEventArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecordingLaserEventArchive*>(&to_msg);
  auto& from = static_cast<const RecordingLaserEventArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.RecordingLaserEventArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_unscaled_location()) {
    _this->_internal_mutable_unscaled_location()->::TSP::Point::MergeFrom(
        from._internal_unscaled_location());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordingLaserEventArchive::CopyFrom(const RecordingLaserEventArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.RecordingLaserEventArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingLaserEventArchive::IsInitialized() const {
  if (_internal_has_unscaled_location()) {
    if (!_impl_.unscaled_location_->IsInitialized()) return false;
  }
  return true;
}

void RecordingLaserEventArchive::InternalSwap(RecordingLaserEventArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.unscaled_location_, other->_impl_.unscaled_location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingLaserEventArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[28]);
}

// ===================================================================

class RecordingPauseEventArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingPauseEventArchive>()._impl_._has_bits_);
  static void set_has_pause_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RecordingPauseEventArchive::RecordingPauseEventArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.RecordingPauseEventArchive)
}
RecordingPauseEventArchive::RecordingPauseEventArchive(const RecordingPauseEventArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecordingPauseEventArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pause_event_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pause_event_type_ = from._impl_.pause_event_type_;
  // @@protoc_insertion_point(copy_constructor:KN.RecordingPauseEventArchive)
}

inline void RecordingPauseEventArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pause_event_type_){0}
  };
}

RecordingPauseEventArchive::~RecordingPauseEventArchive() {
  // @@protoc_insertion_point(destructor:KN.RecordingPauseEventArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordingPauseEventArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecordingPauseEventArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecordingPauseEventArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.RecordingPauseEventArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pause_event_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingPauseEventArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .KN.RecordingPauseEventArchive.RecordingPauseEventType pause_event_type = 1 [default = kRecordingPauseEventTypeResume];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::RecordingPauseEventArchive_RecordingPauseEventType_IsValid(val))) {
            _internal_set_pause_event_type(static_cast<::KN::RecordingPauseEventArchive_RecordingPauseEventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordingPauseEventArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.RecordingPauseEventArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .KN.RecordingPauseEventArchive.RecordingPauseEventType pause_event_type = 1 [default = kRecordingPauseEventTypeResume];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_pause_event_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.RecordingPauseEventArchive)
  return target;
}

size_t RecordingPauseEventArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.RecordingPauseEventArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .KN.RecordingPauseEventArchive.RecordingPauseEventType pause_event_type = 1 [default = kRecordingPauseEventTypeResume];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_pause_event_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordingPauseEventArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecordingPauseEventArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordingPauseEventArchive::GetClassData() const { return &_class_data_; }


void RecordingPauseEventArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecordingPauseEventArchive*>(&to_msg);
  auto& from = static_cast<const RecordingPauseEventArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.RecordingPauseEventArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pause_event_type()) {
    _this->_internal_set_pause_event_type(from._internal_pause_event_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordingPauseEventArchive::CopyFrom(const RecordingPauseEventArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.RecordingPauseEventArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingPauseEventArchive::IsInitialized() const {
  return true;
}

void RecordingPauseEventArchive::InternalSwap(RecordingPauseEventArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.pause_event_type_, other->_impl_.pause_event_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingPauseEventArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[29]);
}

// ===================================================================

class RecordingMovieEventArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingMovieEventArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& movie_info_reference(const RecordingMovieEventArchive* msg);
  static void set_has_movie_info_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_movie_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_movie_event_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
RecordingMovieEventArchive::_Internal::movie_info_reference(const RecordingMovieEventArchive* msg) {
  return *msg->_impl_.movie_info_reference_;
}
void RecordingMovieEventArchive::clear_movie_info_reference() {
  if (_impl_.movie_info_reference_ != nullptr) _impl_.movie_info_reference_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RecordingMovieEventArchive::RecordingMovieEventArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.RecordingMovieEventArchive)
}
RecordingMovieEventArchive::RecordingMovieEventArchive(const RecordingMovieEventArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecordingMovieEventArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.movie_info_reference_){nullptr}
    , decltype(_impl_.movie_event_value_){}
    , decltype(_impl_.movie_event_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_movie_info_reference()) {
    _this->_impl_.movie_info_reference_ = new ::TSP::Reference(*from._impl_.movie_info_reference_);
  }
  ::memcpy(&_impl_.movie_event_value_, &from._impl_.movie_event_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.movie_event_type_) -
    reinterpret_cast<char*>(&_impl_.movie_event_value_)) + sizeof(_impl_.movie_event_type_));
  // @@protoc_insertion_point(copy_constructor:KN.RecordingMovieEventArchive)
}

inline void RecordingMovieEventArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.movie_info_reference_){nullptr}
    , decltype(_impl_.movie_event_value_){0}
    , decltype(_impl_.movie_event_type_){1}
  };
}

RecordingMovieEventArchive::~RecordingMovieEventArchive() {
  // @@protoc_insertion_point(destructor:KN.RecordingMovieEventArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordingMovieEventArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.movie_info_reference_;
}

void RecordingMovieEventArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecordingMovieEventArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.RecordingMovieEventArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.movie_info_reference_ != nullptr);
    _impl_.movie_info_reference_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    _impl_.movie_event_value_ = 0;
    _impl_.movie_event_type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingMovieEventArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference movie_info_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_movie_info_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.RecordingMovieEventArchive.RecordingMovieEventType movie_event_type = 2 [default = kRecordingMovieEventSeek];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::RecordingMovieEventArchive_RecordingMovieEventType_IsValid(val))) {
            _internal_set_movie_event_type(static_cast<::KN::RecordingMovieEventArchive_RecordingMovieEventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double movie_event_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_movie_event_value(&has_bits);
          _impl_.movie_event_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordingMovieEventArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.RecordingMovieEventArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference movie_info_reference = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::movie_info_reference(this),
        _Internal::movie_info_reference(this).GetCachedSize(), target, stream);
  }

  // optional .KN.RecordingMovieEventArchive.RecordingMovieEventType movie_event_type = 2 [default = kRecordingMovieEventSeek];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_movie_event_type(), target);
  }

  // optional double movie_event_value = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_movie_event_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.RecordingMovieEventArchive)
  return target;
}

size_t RecordingMovieEventArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.RecordingMovieEventArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.Reference movie_info_reference = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.movie_info_reference_);
    }

    // optional double movie_event_value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .KN.RecordingMovieEventArchive.RecordingMovieEventType movie_event_type = 2 [default = kRecordingMovieEventSeek];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_movie_event_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordingMovieEventArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecordingMovieEventArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordingMovieEventArchive::GetClassData() const { return &_class_data_; }


void RecordingMovieEventArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecordingMovieEventArchive*>(&to_msg);
  auto& from = static_cast<const RecordingMovieEventArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.RecordingMovieEventArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_movie_info_reference()->::TSP::Reference::MergeFrom(
          from._internal_movie_info_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.movie_event_value_ = from._impl_.movie_event_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.movie_event_type_ = from._impl_.movie_event_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordingMovieEventArchive::CopyFrom(const RecordingMovieEventArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.RecordingMovieEventArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingMovieEventArchive::IsInitialized() const {
  if (_internal_has_movie_info_reference()) {
    if (!_impl_.movie_info_reference_->IsInitialized()) return false;
  }
  return true;
}

void RecordingMovieEventArchive::InternalSwap(RecordingMovieEventArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordingMovieEventArchive, _impl_.movie_event_value_)
      + sizeof(RecordingMovieEventArchive::_impl_.movie_event_value_)
      - PROTOBUF_FIELD_OFFSET(RecordingMovieEventArchive, _impl_.movie_info_reference_)>(
          reinterpret_cast<char*>(&_impl_.movie_info_reference_),
          reinterpret_cast<char*>(&other->_impl_.movie_info_reference_));
  swap(_impl_.movie_event_type_, other->_impl_.movie_event_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingMovieEventArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[30]);
}

// ===================================================================

class RecordingMovieTrackArchive::_Internal {
 public:
};

RecordingMovieTrackArchive::RecordingMovieTrackArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.RecordingMovieTrackArchive)
}
RecordingMovieTrackArchive::RecordingMovieTrackArchive(const RecordingMovieTrackArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecordingMovieTrackArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.movie_segments_){from._impl_.movie_segments_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KN.RecordingMovieTrackArchive)
}

inline void RecordingMovieTrackArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.movie_segments_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RecordingMovieTrackArchive::~RecordingMovieTrackArchive() {
  // @@protoc_insertion_point(destructor:KN.RecordingMovieTrackArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordingMovieTrackArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.movie_segments_.~RepeatedPtrField();
}

void RecordingMovieTrackArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecordingMovieTrackArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.RecordingMovieTrackArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.movie_segments_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingMovieTrackArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .KN.MovieSegmentArchive movie_segments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_movie_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordingMovieTrackArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.RecordingMovieTrackArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KN.MovieSegmentArchive movie_segments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_movie_segments_size()); i < n; i++) {
    const auto& repfield = this->_internal_movie_segments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.RecordingMovieTrackArchive)
  return target;
}

size_t RecordingMovieTrackArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.RecordingMovieTrackArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KN.MovieSegmentArchive movie_segments = 1;
  total_size += 1UL * this->_internal_movie_segments_size();
  for (const auto& msg : this->_impl_.movie_segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordingMovieTrackArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecordingMovieTrackArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordingMovieTrackArchive::GetClassData() const { return &_class_data_; }


void RecordingMovieTrackArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecordingMovieTrackArchive*>(&to_msg);
  auto& from = static_cast<const RecordingMovieTrackArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.RecordingMovieTrackArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.movie_segments_.MergeFrom(from._impl_.movie_segments_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordingMovieTrackArchive::CopyFrom(const RecordingMovieTrackArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.RecordingMovieTrackArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingMovieTrackArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.movie_segments_))
    return false;
  return true;
}

void RecordingMovieTrackArchive::InternalSwap(RecordingMovieTrackArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.movie_segments_.InternalSwap(&other->_impl_.movie_segments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingMovieTrackArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[31]);
}

// ===================================================================

class MovieSegmentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MovieSegmentArchive>()._impl_._has_bits_);
  static const ::TSP::DataReference& movie_data(const MovieSegmentArchive* msg);
  static void set_has_movie_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& database_movie_data(const MovieSegmentArchive* msg);
  static void set_has_database_movie_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::DataReference&
MovieSegmentArchive::_Internal::movie_data(const MovieSegmentArchive* msg) {
  return *msg->_impl_.movie_data_;
}
const ::TSP::Reference&
MovieSegmentArchive::_Internal::database_movie_data(const MovieSegmentArchive* msg) {
  return *msg->_impl_.database_movie_data_;
}
void MovieSegmentArchive::clear_movie_data() {
  if (_impl_.movie_data_ != nullptr) _impl_.movie_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void MovieSegmentArchive::clear_database_movie_data() {
  if (_impl_.database_movie_data_ != nullptr) _impl_.database_movie_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MovieSegmentArchive::MovieSegmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.MovieSegmentArchive)
}
MovieSegmentArchive::MovieSegmentArchive(const MovieSegmentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MovieSegmentArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.database_movie_data_){nullptr}
    , decltype(_impl_.movie_data_){nullptr}
    , decltype(_impl_.start_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_database_movie_data()) {
    _this->_impl_.database_movie_data_ = new ::TSP::Reference(*from._impl_.database_movie_data_);
  }
  if (from._internal_has_movie_data()) {
    _this->_impl_.movie_data_ = new ::TSP::DataReference(*from._impl_.movie_data_);
  }
  _this->_impl_.start_time_ = from._impl_.start_time_;
  // @@protoc_insertion_point(copy_constructor:KN.MovieSegmentArchive)
}

inline void MovieSegmentArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.database_movie_data_){nullptr}
    , decltype(_impl_.movie_data_){nullptr}
    , decltype(_impl_.start_time_){-1}
  };
}

MovieSegmentArchive::~MovieSegmentArchive() {
  // @@protoc_insertion_point(destructor:KN.MovieSegmentArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MovieSegmentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.database_movie_data_;
  if (this != internal_default_instance()) delete _impl_.movie_data_;
}

void MovieSegmentArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MovieSegmentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.MovieSegmentArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.database_movie_data_ != nullptr);
      _impl_.database_movie_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.movie_data_ != nullptr);
      _impl_.movie_data_->Clear();
    }
    _impl_.start_time_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MovieSegmentArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference database_movie_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_movie_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double start_time = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_start_time(&has_bits);
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference movie_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_movie_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MovieSegmentArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.MovieSegmentArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference database_movie_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::database_movie_data(this),
        _Internal::database_movie_data(this).GetCachedSize(), target, stream);
  }

  // optional double start_time = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_start_time(), target);
  }

  // optional .TSP.DataReference movie_data = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::movie_data(this),
        _Internal::movie_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.MovieSegmentArchive)
  return target;
}

size_t MovieSegmentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.MovieSegmentArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.Reference database_movie_data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.database_movie_data_);
    }

    // optional .TSP.DataReference movie_data = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.movie_data_);
    }

    // optional double start_time = 2 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MovieSegmentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MovieSegmentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MovieSegmentArchive::GetClassData() const { return &_class_data_; }


void MovieSegmentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MovieSegmentArchive*>(&to_msg);
  auto& from = static_cast<const MovieSegmentArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.MovieSegmentArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_database_movie_data()->::TSP::Reference::MergeFrom(
          from._internal_database_movie_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_movie_data()->::TSP::DataReference::MergeFrom(
          from._internal_movie_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.start_time_ = from._impl_.start_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MovieSegmentArchive::CopyFrom(const MovieSegmentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.MovieSegmentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovieSegmentArchive::IsInitialized() const {
  if (_internal_has_database_movie_data()) {
    if (!_impl_.database_movie_data_->IsInitialized()) return false;
  }
  if (_internal_has_movie_data()) {
    if (!_impl_.movie_data_->IsInitialized()) return false;
  }
  return true;
}

void MovieSegmentArchive::InternalSwap(MovieSegmentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MovieSegmentArchive, _impl_.movie_data_)
      + sizeof(MovieSegmentArchive::_impl_.movie_data_)
      - PROTOBUF_FIELD_OFFSET(MovieSegmentArchive, _impl_.database_movie_data_)>(
          reinterpret_cast<char*>(&_impl_.database_movie_data_),
          reinterpret_cast<char*>(&other->_impl_.database_movie_data_));
  swap(_impl_.start_time_, other->_impl_.start_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MovieSegmentArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[32]);
}

// ===================================================================

class Soundtrack::_Internal {
 public:
  using HasBits = decltype(std::declval<Soundtrack>()._impl_._has_bits_);
  static void set_has_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void Soundtrack::clear_movie_media() {
  _impl_.movie_media_.Clear();
}
Soundtrack::Soundtrack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.Soundtrack)
}
Soundtrack::Soundtrack(const Soundtrack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Soundtrack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.movie_media_){from._impl_.movie_media_}
    , decltype(_impl_.volume_){}
    , decltype(_impl_.mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.volume_, &from._impl_.volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mode_) -
    reinterpret_cast<char*>(&_impl_.volume_)) + sizeof(_impl_.mode_));
  // @@protoc_insertion_point(copy_constructor:KN.Soundtrack)
}

inline void Soundtrack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.movie_media_){arena}
    , decltype(_impl_.volume_){0}
    , decltype(_impl_.mode_){0}
  };
}

Soundtrack::~Soundtrack() {
  // @@protoc_insertion_point(destructor:KN.Soundtrack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Soundtrack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.movie_media_.~RepeatedPtrField();
}

void Soundtrack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Soundtrack::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.Soundtrack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.movie_media_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.volume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mode_) -
        reinterpret_cast<char*>(&_impl_.volume_)) + sizeof(_impl_.mode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Soundtrack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double volume = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_volume(&has_bits);
          _impl_.volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.Soundtrack.SoundtrackMode mode = 2 [default = kKNSoundtrackModePlayOnce];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::Soundtrack_SoundtrackMode_IsValid(val))) {
            _internal_set_mode(static_cast<::KN::Soundtrack_SoundtrackMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.DataReference movie_media = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_movie_media(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Soundtrack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.Soundtrack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double volume = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_volume(), target);
  }

  // optional .KN.Soundtrack.SoundtrackMode mode = 2 [default = kKNSoundtrackModePlayOnce];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mode(), target);
  }

  // repeated .TSP.DataReference movie_media = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_movie_media_size()); i < n; i++) {
    const auto& repfield = this->_internal_movie_media(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.Soundtrack)
  return target;
}

size_t Soundtrack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.Soundtrack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.DataReference movie_media = 3;
  total_size += 1UL * this->_internal_movie_media_size();
  for (const auto& msg : this->_impl_.movie_media_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double volume = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .KN.Soundtrack.SoundtrackMode mode = 2 [default = kKNSoundtrackModePlayOnce];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Soundtrack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Soundtrack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Soundtrack::GetClassData() const { return &_class_data_; }


void Soundtrack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Soundtrack*>(&to_msg);
  auto& from = static_cast<const Soundtrack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.Soundtrack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.movie_media_.MergeFrom(from._impl_.movie_media_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.volume_ = from._impl_.volume_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mode_ = from._impl_.mode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Soundtrack::CopyFrom(const Soundtrack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.Soundtrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Soundtrack::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.movie_media_))
    return false;
  return true;
}

void Soundtrack::InternalSwap(Soundtrack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.movie_media_.InternalSwap(&other->_impl_.movie_media_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Soundtrack, _impl_.mode_)
      + sizeof(Soundtrack::_impl_.mode_)
      - PROTOBUF_FIELD_OFFSET(Soundtrack, _impl_.volume_)>(
          reinterpret_cast<char*>(&_impl_.volume_),
          reinterpret_cast<char*>(&other->_impl_.volume_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Soundtrack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[33]);
}

// ===================================================================

class SlideNumberAttachmentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideNumberAttachmentArchive>()._impl_._has_bits_);
  static const ::TSWP::TextualAttachmentArchive& super(const SlideNumberAttachmentArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::TextualAttachmentArchive&
SlideNumberAttachmentArchive::_Internal::super(const SlideNumberAttachmentArchive* msg) {
  return *msg->_impl_.super_;
}
void SlideNumberAttachmentArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SlideNumberAttachmentArchive::SlideNumberAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.SlideNumberAttachmentArchive)
}
SlideNumberAttachmentArchive::SlideNumberAttachmentArchive(const SlideNumberAttachmentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SlideNumberAttachmentArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSWP::TextualAttachmentArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.SlideNumberAttachmentArchive)
}

inline void SlideNumberAttachmentArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

SlideNumberAttachmentArchive::~SlideNumberAttachmentArchive() {
  // @@protoc_insertion_point(destructor:KN.SlideNumberAttachmentArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SlideNumberAttachmentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void SlideNumberAttachmentArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SlideNumberAttachmentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideNumberAttachmentArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideNumberAttachmentArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.TextualAttachmentArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SlideNumberAttachmentArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideNumberAttachmentArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSWP.TextualAttachmentArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideNumberAttachmentArchive)
  return target;
}

size_t SlideNumberAttachmentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideNumberAttachmentArchive)
  size_t total_size = 0;

  // required .TSWP.TextualAttachmentArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideNumberAttachmentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SlideNumberAttachmentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideNumberAttachmentArchive::GetClassData() const { return &_class_data_; }


void SlideNumberAttachmentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SlideNumberAttachmentArchive*>(&to_msg);
  auto& from = static_cast<const SlideNumberAttachmentArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideNumberAttachmentArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSWP::TextualAttachmentArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideNumberAttachmentArchive::CopyFrom(const SlideNumberAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideNumberAttachmentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideNumberAttachmentArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SlideNumberAttachmentArchive::InternalSwap(SlideNumberAttachmentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideNumberAttachmentArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[34]);
}

// ===================================================================

class SlideCollectionSelectionArchive_OutlineSelection::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideCollectionSelectionArchive_OutlineSelection>()._impl_._has_bits_);
  static const ::TSP::Reference& slide_node(const SlideCollectionSelectionArchive_OutlineSelection* msg);
  static void set_has_slide_node(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::IndexSet& selected_paragraph_indexes(const SlideCollectionSelectionArchive_OutlineSelection* msg);
  static void set_has_selected_paragraph_indexes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Reference&
SlideCollectionSelectionArchive_OutlineSelection::_Internal::slide_node(const SlideCollectionSelectionArchive_OutlineSelection* msg) {
  return *msg->_impl_.slide_node_;
}
const ::TSP::IndexSet&
SlideCollectionSelectionArchive_OutlineSelection::_Internal::selected_paragraph_indexes(const SlideCollectionSelectionArchive_OutlineSelection* msg) {
  return *msg->_impl_.selected_paragraph_indexes_;
}
void SlideCollectionSelectionArchive_OutlineSelection::clear_slide_node() {
  if (_impl_.slide_node_ != nullptr) _impl_.slide_node_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SlideCollectionSelectionArchive_OutlineSelection::clear_selected_paragraph_indexes() {
  if (_impl_.selected_paragraph_indexes_ != nullptr) _impl_.selected_paragraph_indexes_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SlideCollectionSelectionArchive_OutlineSelection::SlideCollectionSelectionArchive_OutlineSelection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.SlideCollectionSelectionArchive.OutlineSelection)
}
SlideCollectionSelectionArchive_OutlineSelection::SlideCollectionSelectionArchive_OutlineSelection(const SlideCollectionSelectionArchive_OutlineSelection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SlideCollectionSelectionArchive_OutlineSelection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slide_node_){nullptr}
    , decltype(_impl_.selected_paragraph_indexes_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_slide_node()) {
    _this->_impl_.slide_node_ = new ::TSP::Reference(*from._impl_.slide_node_);
  }
  if (from._internal_has_selected_paragraph_indexes()) {
    _this->_impl_.selected_paragraph_indexes_ = new ::TSP::IndexSet(*from._impl_.selected_paragraph_indexes_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.SlideCollectionSelectionArchive.OutlineSelection)
}

inline void SlideCollectionSelectionArchive_OutlineSelection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slide_node_){nullptr}
    , decltype(_impl_.selected_paragraph_indexes_){nullptr}
  };
}

SlideCollectionSelectionArchive_OutlineSelection::~SlideCollectionSelectionArchive_OutlineSelection() {
  // @@protoc_insertion_point(destructor:KN.SlideCollectionSelectionArchive.OutlineSelection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SlideCollectionSelectionArchive_OutlineSelection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.slide_node_;
  if (this != internal_default_instance()) delete _impl_.selected_paragraph_indexes_;
}

void SlideCollectionSelectionArchive_OutlineSelection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SlideCollectionSelectionArchive_OutlineSelection::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideCollectionSelectionArchive.OutlineSelection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.slide_node_ != nullptr);
      _impl_.slide_node_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.selected_paragraph_indexes_ != nullptr);
      _impl_.selected_paragraph_indexes_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideCollectionSelectionArchive_OutlineSelection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference slide_node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.IndexSet selected_paragraph_indexes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_selected_paragraph_indexes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SlideCollectionSelectionArchive_OutlineSelection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideCollectionSelectionArchive.OutlineSelection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference slide_node = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::slide_node(this),
        _Internal::slide_node(this).GetCachedSize(), target, stream);
  }

  // required .TSP.IndexSet selected_paragraph_indexes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::selected_paragraph_indexes(this),
        _Internal::selected_paragraph_indexes(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideCollectionSelectionArchive.OutlineSelection)
  return target;
}

size_t SlideCollectionSelectionArchive_OutlineSelection::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.SlideCollectionSelectionArchive.OutlineSelection)
  size_t total_size = 0;

  if (_internal_has_slide_node()) {
    // required .TSP.Reference slide_node = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_node_);
  }

  if (_internal_has_selected_paragraph_indexes()) {
    // required .TSP.IndexSet selected_paragraph_indexes = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.selected_paragraph_indexes_);
  }

  return total_size;
}
size_t SlideCollectionSelectionArchive_OutlineSelection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideCollectionSelectionArchive.OutlineSelection)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.Reference slide_node = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_node_);

    // required .TSP.IndexSet selected_paragraph_indexes = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.selected_paragraph_indexes_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideCollectionSelectionArchive_OutlineSelection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SlideCollectionSelectionArchive_OutlineSelection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideCollectionSelectionArchive_OutlineSelection::GetClassData() const { return &_class_data_; }


void SlideCollectionSelectionArchive_OutlineSelection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SlideCollectionSelectionArchive_OutlineSelection*>(&to_msg);
  auto& from = static_cast<const SlideCollectionSelectionArchive_OutlineSelection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideCollectionSelectionArchive.OutlineSelection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_slide_node()->::TSP::Reference::MergeFrom(
          from._internal_slide_node());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_selected_paragraph_indexes()->::TSP::IndexSet::MergeFrom(
          from._internal_selected_paragraph_indexes());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideCollectionSelectionArchive_OutlineSelection::CopyFrom(const SlideCollectionSelectionArchive_OutlineSelection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideCollectionSelectionArchive.OutlineSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideCollectionSelectionArchive_OutlineSelection::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_slide_node()) {
    if (!_impl_.slide_node_->IsInitialized()) return false;
  }
  if (_internal_has_selected_paragraph_indexes()) {
    if (!_impl_.selected_paragraph_indexes_->IsInitialized()) return false;
  }
  return true;
}

void SlideCollectionSelectionArchive_OutlineSelection::InternalSwap(SlideCollectionSelectionArchive_OutlineSelection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SlideCollectionSelectionArchive_OutlineSelection, _impl_.selected_paragraph_indexes_)
      + sizeof(SlideCollectionSelectionArchive_OutlineSelection::_impl_.selected_paragraph_indexes_)
      - PROTOBUF_FIELD_OFFSET(SlideCollectionSelectionArchive_OutlineSelection, _impl_.slide_node_)>(
          reinterpret_cast<char*>(&_impl_.slide_node_),
          reinterpret_cast<char*>(&other->_impl_.slide_node_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideCollectionSelectionArchive_OutlineSelection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[35]);
}

// ===================================================================

class SlideCollectionSelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideCollectionSelectionArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& slide_node_to_edit(const SlideCollectionSelectionArchive* msg);
  static void set_has_slide_node_to_edit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Range& range_in_selected_paragraph(const SlideCollectionSelectionArchive* msg);
  static void set_has_range_in_selected_paragraph(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
SlideCollectionSelectionArchive::_Internal::slide_node_to_edit(const SlideCollectionSelectionArchive* msg) {
  return *msg->_impl_.slide_node_to_edit_;
}
const ::TSP::Range&
SlideCollectionSelectionArchive::_Internal::range_in_selected_paragraph(const SlideCollectionSelectionArchive* msg) {
  return *msg->_impl_.range_in_selected_paragraph_;
}
void SlideCollectionSelectionArchive::clear_slide_nodes() {
  _impl_.slide_nodes_.Clear();
}
void SlideCollectionSelectionArchive::clear_slide_node_to_edit() {
  if (_impl_.slide_node_to_edit_ != nullptr) _impl_.slide_node_to_edit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SlideCollectionSelectionArchive::clear_range_in_selected_paragraph() {
  if (_impl_.range_in_selected_paragraph_ != nullptr) _impl_.range_in_selected_paragraph_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SlideCollectionSelectionArchive::SlideCollectionSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.SlideCollectionSelectionArchive)
}
SlideCollectionSelectionArchive::SlideCollectionSelectionArchive(const SlideCollectionSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SlideCollectionSelectionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slide_nodes_){from._impl_.slide_nodes_}
    , decltype(_impl_.selected_paragraph_indexes_for_slide_nodes_){from._impl_.selected_paragraph_indexes_for_slide_nodes_}
    , decltype(_impl_.slide_node_to_edit_){nullptr}
    , decltype(_impl_.range_in_selected_paragraph_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_slide_node_to_edit()) {
    _this->_impl_.slide_node_to_edit_ = new ::TSP::Reference(*from._impl_.slide_node_to_edit_);
  }
  if (from._internal_has_range_in_selected_paragraph()) {
    _this->_impl_.range_in_selected_paragraph_ = new ::TSP::Range(*from._impl_.range_in_selected_paragraph_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.SlideCollectionSelectionArchive)
}

inline void SlideCollectionSelectionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slide_nodes_){arena}
    , decltype(_impl_.selected_paragraph_indexes_for_slide_nodes_){arena}
    , decltype(_impl_.slide_node_to_edit_){nullptr}
    , decltype(_impl_.range_in_selected_paragraph_){nullptr}
  };
}

SlideCollectionSelectionArchive::~SlideCollectionSelectionArchive() {
  // @@protoc_insertion_point(destructor:KN.SlideCollectionSelectionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SlideCollectionSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.slide_nodes_.~RepeatedPtrField();
  _impl_.selected_paragraph_indexes_for_slide_nodes_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.slide_node_to_edit_;
  if (this != internal_default_instance()) delete _impl_.range_in_selected_paragraph_;
}

void SlideCollectionSelectionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SlideCollectionSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideCollectionSelectionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.slide_nodes_.Clear();
  _impl_.selected_paragraph_indexes_for_slide_nodes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.slide_node_to_edit_ != nullptr);
      _impl_.slide_node_to_edit_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.range_in_selected_paragraph_ != nullptr);
      _impl_.range_in_selected_paragraph_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideCollectionSelectionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference slide_nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slide_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference slide_node_to_edit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_node_to_edit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.SlideCollectionSelectionArchive.OutlineSelection selected_paragraph_indexes_for_slide_nodes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_selected_paragraph_indexes_for_slide_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Range range_in_selected_paragraph = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_range_in_selected_paragraph(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SlideCollectionSelectionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideCollectionSelectionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference slide_nodes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_slide_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_slide_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference slide_node_to_edit = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slide_node_to_edit(this),
        _Internal::slide_node_to_edit(this).GetCachedSize(), target, stream);
  }

  // repeated .KN.SlideCollectionSelectionArchive.OutlineSelection selected_paragraph_indexes_for_slide_nodes = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_selected_paragraph_indexes_for_slide_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_selected_paragraph_indexes_for_slide_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Range range_in_selected_paragraph = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::range_in_selected_paragraph(this),
        _Internal::range_in_selected_paragraph(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideCollectionSelectionArchive)
  return target;
}

size_t SlideCollectionSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideCollectionSelectionArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference slide_nodes = 1;
  total_size += 1UL * this->_internal_slide_nodes_size();
  for (const auto& msg : this->_impl_.slide_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.SlideCollectionSelectionArchive.OutlineSelection selected_paragraph_indexes_for_slide_nodes = 3;
  total_size += 1UL * this->_internal_selected_paragraph_indexes_for_slide_nodes_size();
  for (const auto& msg : this->_impl_.selected_paragraph_indexes_for_slide_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference slide_node_to_edit = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.slide_node_to_edit_);
    }

    // optional .TSP.Range range_in_selected_paragraph = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.range_in_selected_paragraph_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideCollectionSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SlideCollectionSelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideCollectionSelectionArchive::GetClassData() const { return &_class_data_; }


void SlideCollectionSelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SlideCollectionSelectionArchive*>(&to_msg);
  auto& from = static_cast<const SlideCollectionSelectionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideCollectionSelectionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.slide_nodes_.MergeFrom(from._impl_.slide_nodes_);
  _this->_impl_.selected_paragraph_indexes_for_slide_nodes_.MergeFrom(from._impl_.selected_paragraph_indexes_for_slide_nodes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_slide_node_to_edit()->::TSP::Reference::MergeFrom(
          from._internal_slide_node_to_edit());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_range_in_selected_paragraph()->::TSP::Range::MergeFrom(
          from._internal_range_in_selected_paragraph());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideCollectionSelectionArchive::CopyFrom(const SlideCollectionSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideCollectionSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideCollectionSelectionArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.slide_nodes_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.selected_paragraph_indexes_for_slide_nodes_))
    return false;
  if (_internal_has_slide_node_to_edit()) {
    if (!_impl_.slide_node_to_edit_->IsInitialized()) return false;
  }
  if (_internal_has_range_in_selected_paragraph()) {
    if (!_impl_.range_in_selected_paragraph_->IsInitialized()) return false;
  }
  return true;
}

void SlideCollectionSelectionArchive::InternalSwap(SlideCollectionSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.slide_nodes_.InternalSwap(&other->_impl_.slide_nodes_);
  _impl_.selected_paragraph_indexes_for_slide_nodes_.InternalSwap(&other->_impl_.selected_paragraph_indexes_for_slide_nodes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SlideCollectionSelectionArchive, _impl_.range_in_selected_paragraph_)
      + sizeof(SlideCollectionSelectionArchive::_impl_.range_in_selected_paragraph_)
      - PROTOBUF_FIELD_OFFSET(SlideCollectionSelectionArchive, _impl_.slide_node_to_edit_)>(
          reinterpret_cast<char*>(&_impl_.slide_node_to_edit_),
          reinterpret_cast<char*>(&other->_impl_.slide_node_to_edit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideCollectionSelectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[36]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace KN
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::KN::AnimationAttributesArchive*
Arena::CreateMaybeMessage< ::KN::AnimationAttributesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::AnimationAttributesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::TransitionAttributesArchive*
Arena::CreateMaybeMessage< ::KN::TransitionAttributesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::TransitionAttributesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::TransitionArchive*
Arena::CreateMaybeMessage< ::KN::TransitionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::TransitionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::BuildChunkArchive*
Arena::CreateMaybeMessage< ::KN::BuildChunkArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::BuildChunkArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::BuildAttributesArchive*
Arena::CreateMaybeMessage< ::KN::BuildAttributesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::BuildAttributesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::BuildArchive*
Arena::CreateMaybeMessage< ::KN::BuildArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::BuildArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::PlaceholderArchive*
Arena::CreateMaybeMessage< ::KN::PlaceholderArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::PlaceholderArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::NoteArchive*
Arena::CreateMaybeMessage< ::KN::NoteArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::NoteArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::ClassicStylesheetRecordArchive*
Arena::CreateMaybeMessage< ::KN::ClassicStylesheetRecordArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::ClassicStylesheetRecordArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::ClassicThemeRecordArchive*
Arena::CreateMaybeMessage< ::KN::ClassicThemeRecordArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::ClassicThemeRecordArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideArchive_SageTagMapEntry*
Arena::CreateMaybeMessage< ::KN::SlideArchive_SageTagMapEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideArchive_SageTagMapEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideArchive*
Arena::CreateMaybeMessage< ::KN::SlideArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideNodeArchive*
Arena::CreateMaybeMessage< ::KN::SlideNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::DesktopUILayoutArchive*
Arena::CreateMaybeMessage< ::KN::DesktopUILayoutArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::DesktopUILayoutArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::UIStateArchive*
Arena::CreateMaybeMessage< ::KN::UIStateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::UIStateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CanvasSelectionArchive*
Arena::CreateMaybeMessage< ::KN::CanvasSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CanvasSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::ThemeArchive*
Arena::CreateMaybeMessage< ::KN::ThemeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::ThemeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideTreeArchive*
Arena::CreateMaybeMessage< ::KN::SlideTreeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideTreeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::ShowArchive*
Arena::CreateMaybeMessage< ::KN::ShowArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::ShowArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::DocumentArchive*
Arena::CreateMaybeMessage< ::KN::DocumentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::DocumentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideStylePropertiesArchive*
Arena::CreateMaybeMessage< ::KN::SlideStylePropertiesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideStylePropertiesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideStyleArchive*
Arena::CreateMaybeMessage< ::KN::SlideStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::PasteboardNativeStorageArchive*
Arena::CreateMaybeMessage< ::KN::PasteboardNativeStorageArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::PasteboardNativeStorageArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::MasterChangeBlobArchive*
Arena::CreateMaybeMessage< ::KN::MasterChangeBlobArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::MasterChangeBlobArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::RecordingArchive*
Arena::CreateMaybeMessage< ::KN::RecordingArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::RecordingArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::RecordingEventTrackArchive*
Arena::CreateMaybeMessage< ::KN::RecordingEventTrackArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::RecordingEventTrackArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::RecordingEventArchive*
Arena::CreateMaybeMessage< ::KN::RecordingEventArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::RecordingEventArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::RecordingNavigationEventArchive*
Arena::CreateMaybeMessage< ::KN::RecordingNavigationEventArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::RecordingNavigationEventArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::RecordingLaserEventArchive*
Arena::CreateMaybeMessage< ::KN::RecordingLaserEventArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::RecordingLaserEventArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::RecordingPauseEventArchive*
Arena::CreateMaybeMessage< ::KN::RecordingPauseEventArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::RecordingPauseEventArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::RecordingMovieEventArchive*
Arena::CreateMaybeMessage< ::KN::RecordingMovieEventArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::RecordingMovieEventArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::RecordingMovieTrackArchive*
Arena::CreateMaybeMessage< ::KN::RecordingMovieTrackArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::RecordingMovieTrackArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::MovieSegmentArchive*
Arena::CreateMaybeMessage< ::KN::MovieSegmentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::MovieSegmentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::Soundtrack*
Arena::CreateMaybeMessage< ::KN::Soundtrack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::Soundtrack >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideNumberAttachmentArchive*
Arena::CreateMaybeMessage< ::KN::SlideNumberAttachmentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideNumberAttachmentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideCollectionSelectionArchive_OutlineSelection*
Arena::CreateMaybeMessage< ::KN::SlideCollectionSelectionArchive_OutlineSelection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideCollectionSelectionArchive_OutlineSelection >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideCollectionSelectionArchive*
Arena::CreateMaybeMessage< ::KN::SlideCollectionSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideCollectionSelectionArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
