// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KNArchives.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_KNArchives_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_KNArchives_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSKArchives.pb.h"
#include "TSSArchives.pb.h"
#include "TSDArchives.pb.h"
#include "TSWPArchives.pb.h"
#include "TSAArchives.pb.h"
#include "TSCHArchives.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_KNArchives_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_KNArchives_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_KNArchives_2eproto;
namespace KN {
class AnimationAttributesArchive;
struct AnimationAttributesArchiveDefaultTypeInternal;
extern AnimationAttributesArchiveDefaultTypeInternal _AnimationAttributesArchive_default_instance_;
class BuildArchive;
struct BuildArchiveDefaultTypeInternal;
extern BuildArchiveDefaultTypeInternal _BuildArchive_default_instance_;
class BuildAttributesArchive;
struct BuildAttributesArchiveDefaultTypeInternal;
extern BuildAttributesArchiveDefaultTypeInternal _BuildAttributesArchive_default_instance_;
class BuildChunkArchive;
struct BuildChunkArchiveDefaultTypeInternal;
extern BuildChunkArchiveDefaultTypeInternal _BuildChunkArchive_default_instance_;
class CanvasSelectionArchive;
struct CanvasSelectionArchiveDefaultTypeInternal;
extern CanvasSelectionArchiveDefaultTypeInternal _CanvasSelectionArchive_default_instance_;
class ClassicStylesheetRecordArchive;
struct ClassicStylesheetRecordArchiveDefaultTypeInternal;
extern ClassicStylesheetRecordArchiveDefaultTypeInternal _ClassicStylesheetRecordArchive_default_instance_;
class ClassicThemeRecordArchive;
struct ClassicThemeRecordArchiveDefaultTypeInternal;
extern ClassicThemeRecordArchiveDefaultTypeInternal _ClassicThemeRecordArchive_default_instance_;
class DesktopUILayoutArchive;
struct DesktopUILayoutArchiveDefaultTypeInternal;
extern DesktopUILayoutArchiveDefaultTypeInternal _DesktopUILayoutArchive_default_instance_;
class DocumentArchive;
struct DocumentArchiveDefaultTypeInternal;
extern DocumentArchiveDefaultTypeInternal _DocumentArchive_default_instance_;
class MasterChangeBlobArchive;
struct MasterChangeBlobArchiveDefaultTypeInternal;
extern MasterChangeBlobArchiveDefaultTypeInternal _MasterChangeBlobArchive_default_instance_;
class MovieSegmentArchive;
struct MovieSegmentArchiveDefaultTypeInternal;
extern MovieSegmentArchiveDefaultTypeInternal _MovieSegmentArchive_default_instance_;
class NoteArchive;
struct NoteArchiveDefaultTypeInternal;
extern NoteArchiveDefaultTypeInternal _NoteArchive_default_instance_;
class PasteboardNativeStorageArchive;
struct PasteboardNativeStorageArchiveDefaultTypeInternal;
extern PasteboardNativeStorageArchiveDefaultTypeInternal _PasteboardNativeStorageArchive_default_instance_;
class PlaceholderArchive;
struct PlaceholderArchiveDefaultTypeInternal;
extern PlaceholderArchiveDefaultTypeInternal _PlaceholderArchive_default_instance_;
class RecordingArchive;
struct RecordingArchiveDefaultTypeInternal;
extern RecordingArchiveDefaultTypeInternal _RecordingArchive_default_instance_;
class RecordingEventArchive;
struct RecordingEventArchiveDefaultTypeInternal;
extern RecordingEventArchiveDefaultTypeInternal _RecordingEventArchive_default_instance_;
class RecordingEventTrackArchive;
struct RecordingEventTrackArchiveDefaultTypeInternal;
extern RecordingEventTrackArchiveDefaultTypeInternal _RecordingEventTrackArchive_default_instance_;
class RecordingLaserEventArchive;
struct RecordingLaserEventArchiveDefaultTypeInternal;
extern RecordingLaserEventArchiveDefaultTypeInternal _RecordingLaserEventArchive_default_instance_;
class RecordingMovieEventArchive;
struct RecordingMovieEventArchiveDefaultTypeInternal;
extern RecordingMovieEventArchiveDefaultTypeInternal _RecordingMovieEventArchive_default_instance_;
class RecordingMovieTrackArchive;
struct RecordingMovieTrackArchiveDefaultTypeInternal;
extern RecordingMovieTrackArchiveDefaultTypeInternal _RecordingMovieTrackArchive_default_instance_;
class RecordingNavigationEventArchive;
struct RecordingNavigationEventArchiveDefaultTypeInternal;
extern RecordingNavigationEventArchiveDefaultTypeInternal _RecordingNavigationEventArchive_default_instance_;
class RecordingPauseEventArchive;
struct RecordingPauseEventArchiveDefaultTypeInternal;
extern RecordingPauseEventArchiveDefaultTypeInternal _RecordingPauseEventArchive_default_instance_;
class ShowArchive;
struct ShowArchiveDefaultTypeInternal;
extern ShowArchiveDefaultTypeInternal _ShowArchive_default_instance_;
class SlideArchive;
struct SlideArchiveDefaultTypeInternal;
extern SlideArchiveDefaultTypeInternal _SlideArchive_default_instance_;
class SlideArchive_SageTagMapEntry;
struct SlideArchive_SageTagMapEntryDefaultTypeInternal;
extern SlideArchive_SageTagMapEntryDefaultTypeInternal _SlideArchive_SageTagMapEntry_default_instance_;
class SlideCollectionSelectionArchive;
struct SlideCollectionSelectionArchiveDefaultTypeInternal;
extern SlideCollectionSelectionArchiveDefaultTypeInternal _SlideCollectionSelectionArchive_default_instance_;
class SlideCollectionSelectionArchive_OutlineSelection;
struct SlideCollectionSelectionArchive_OutlineSelectionDefaultTypeInternal;
extern SlideCollectionSelectionArchive_OutlineSelectionDefaultTypeInternal _SlideCollectionSelectionArchive_OutlineSelection_default_instance_;
class SlideNodeArchive;
struct SlideNodeArchiveDefaultTypeInternal;
extern SlideNodeArchiveDefaultTypeInternal _SlideNodeArchive_default_instance_;
class SlideNumberAttachmentArchive;
struct SlideNumberAttachmentArchiveDefaultTypeInternal;
extern SlideNumberAttachmentArchiveDefaultTypeInternal _SlideNumberAttachmentArchive_default_instance_;
class SlideStyleArchive;
struct SlideStyleArchiveDefaultTypeInternal;
extern SlideStyleArchiveDefaultTypeInternal _SlideStyleArchive_default_instance_;
class SlideStylePropertiesArchive;
struct SlideStylePropertiesArchiveDefaultTypeInternal;
extern SlideStylePropertiesArchiveDefaultTypeInternal _SlideStylePropertiesArchive_default_instance_;
class SlideTreeArchive;
struct SlideTreeArchiveDefaultTypeInternal;
extern SlideTreeArchiveDefaultTypeInternal _SlideTreeArchive_default_instance_;
class Soundtrack;
struct SoundtrackDefaultTypeInternal;
extern SoundtrackDefaultTypeInternal _Soundtrack_default_instance_;
class ThemeArchive;
struct ThemeArchiveDefaultTypeInternal;
extern ThemeArchiveDefaultTypeInternal _ThemeArchive_default_instance_;
class TransitionArchive;
struct TransitionArchiveDefaultTypeInternal;
extern TransitionArchiveDefaultTypeInternal _TransitionArchive_default_instance_;
class TransitionAttributesArchive;
struct TransitionAttributesArchiveDefaultTypeInternal;
extern TransitionAttributesArchiveDefaultTypeInternal _TransitionAttributesArchive_default_instance_;
class UIStateArchive;
struct UIStateArchiveDefaultTypeInternal;
extern UIStateArchiveDefaultTypeInternal _UIStateArchive_default_instance_;
}  // namespace KN
PROTOBUF_NAMESPACE_OPEN
template<> ::KN::AnimationAttributesArchive* Arena::CreateMaybeMessage<::KN::AnimationAttributesArchive>(Arena*);
template<> ::KN::BuildArchive* Arena::CreateMaybeMessage<::KN::BuildArchive>(Arena*);
template<> ::KN::BuildAttributesArchive* Arena::CreateMaybeMessage<::KN::BuildAttributesArchive>(Arena*);
template<> ::KN::BuildChunkArchive* Arena::CreateMaybeMessage<::KN::BuildChunkArchive>(Arena*);
template<> ::KN::CanvasSelectionArchive* Arena::CreateMaybeMessage<::KN::CanvasSelectionArchive>(Arena*);
template<> ::KN::ClassicStylesheetRecordArchive* Arena::CreateMaybeMessage<::KN::ClassicStylesheetRecordArchive>(Arena*);
template<> ::KN::ClassicThemeRecordArchive* Arena::CreateMaybeMessage<::KN::ClassicThemeRecordArchive>(Arena*);
template<> ::KN::DesktopUILayoutArchive* Arena::CreateMaybeMessage<::KN::DesktopUILayoutArchive>(Arena*);
template<> ::KN::DocumentArchive* Arena::CreateMaybeMessage<::KN::DocumentArchive>(Arena*);
template<> ::KN::MasterChangeBlobArchive* Arena::CreateMaybeMessage<::KN::MasterChangeBlobArchive>(Arena*);
template<> ::KN::MovieSegmentArchive* Arena::CreateMaybeMessage<::KN::MovieSegmentArchive>(Arena*);
template<> ::KN::NoteArchive* Arena::CreateMaybeMessage<::KN::NoteArchive>(Arena*);
template<> ::KN::PasteboardNativeStorageArchive* Arena::CreateMaybeMessage<::KN::PasteboardNativeStorageArchive>(Arena*);
template<> ::KN::PlaceholderArchive* Arena::CreateMaybeMessage<::KN::PlaceholderArchive>(Arena*);
template<> ::KN::RecordingArchive* Arena::CreateMaybeMessage<::KN::RecordingArchive>(Arena*);
template<> ::KN::RecordingEventArchive* Arena::CreateMaybeMessage<::KN::RecordingEventArchive>(Arena*);
template<> ::KN::RecordingEventTrackArchive* Arena::CreateMaybeMessage<::KN::RecordingEventTrackArchive>(Arena*);
template<> ::KN::RecordingLaserEventArchive* Arena::CreateMaybeMessage<::KN::RecordingLaserEventArchive>(Arena*);
template<> ::KN::RecordingMovieEventArchive* Arena::CreateMaybeMessage<::KN::RecordingMovieEventArchive>(Arena*);
template<> ::KN::RecordingMovieTrackArchive* Arena::CreateMaybeMessage<::KN::RecordingMovieTrackArchive>(Arena*);
template<> ::KN::RecordingNavigationEventArchive* Arena::CreateMaybeMessage<::KN::RecordingNavigationEventArchive>(Arena*);
template<> ::KN::RecordingPauseEventArchive* Arena::CreateMaybeMessage<::KN::RecordingPauseEventArchive>(Arena*);
template<> ::KN::ShowArchive* Arena::CreateMaybeMessage<::KN::ShowArchive>(Arena*);
template<> ::KN::SlideArchive* Arena::CreateMaybeMessage<::KN::SlideArchive>(Arena*);
template<> ::KN::SlideArchive_SageTagMapEntry* Arena::CreateMaybeMessage<::KN::SlideArchive_SageTagMapEntry>(Arena*);
template<> ::KN::SlideCollectionSelectionArchive* Arena::CreateMaybeMessage<::KN::SlideCollectionSelectionArchive>(Arena*);
template<> ::KN::SlideCollectionSelectionArchive_OutlineSelection* Arena::CreateMaybeMessage<::KN::SlideCollectionSelectionArchive_OutlineSelection>(Arena*);
template<> ::KN::SlideNodeArchive* Arena::CreateMaybeMessage<::KN::SlideNodeArchive>(Arena*);
template<> ::KN::SlideNumberAttachmentArchive* Arena::CreateMaybeMessage<::KN::SlideNumberAttachmentArchive>(Arena*);
template<> ::KN::SlideStyleArchive* Arena::CreateMaybeMessage<::KN::SlideStyleArchive>(Arena*);
template<> ::KN::SlideStylePropertiesArchive* Arena::CreateMaybeMessage<::KN::SlideStylePropertiesArchive>(Arena*);
template<> ::KN::SlideTreeArchive* Arena::CreateMaybeMessage<::KN::SlideTreeArchive>(Arena*);
template<> ::KN::Soundtrack* Arena::CreateMaybeMessage<::KN::Soundtrack>(Arena*);
template<> ::KN::ThemeArchive* Arena::CreateMaybeMessage<::KN::ThemeArchive>(Arena*);
template<> ::KN::TransitionArchive* Arena::CreateMaybeMessage<::KN::TransitionArchive>(Arena*);
template<> ::KN::TransitionAttributesArchive* Arena::CreateMaybeMessage<::KN::TransitionAttributesArchive>(Arena*);
template<> ::KN::UIStateArchive* Arena::CreateMaybeMessage<::KN::UIStateArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace KN {

enum TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType : int {
  TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveTypeLinear = 1,
  TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveTypeEaseIn = 2,
  TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveTypeEaseOut = 3,
  TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveTypeEaseInEaseOut = 4
};
bool TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_IsValid(int value);
constexpr TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveType_MIN = TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveTypeLinear;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveType_MAX = TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveTypeEaseInEaseOut;
constexpr int TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveType_ARRAYSIZE = TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_descriptor();
template<typename T>
inline const std::string& TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_descriptor(), enum_t_value);
}
inline bool TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType>(
    TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_descriptor(), name, value);
}
enum TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType : int {
  TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryTypeByObject = 1,
  TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryTypeByWord = 2,
  TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryTypeByCharacter = 3,
  TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryTypeByLine = 4
};
bool TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_IsValid(int value);
constexpr TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryType_MIN = TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryTypeByObject;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryType_MAX = TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryTypeByLine;
constexpr int TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryType_ARRAYSIZE = TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_descriptor();
template<typename T>
inline const std::string& TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_descriptor(), enum_t_value);
}
inline bool TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType>(
    TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_descriptor(), name, value);
}
enum BuildAttributesArchive_BuildAttributesAcceleration : int {
  BuildAttributesArchive_BuildAttributesAcceleration_kNone = 0,
  BuildAttributesArchive_BuildAttributesAcceleration_kEaseIn = 1,
  BuildAttributesArchive_BuildAttributesAcceleration_kEaseOut = 2,
  BuildAttributesArchive_BuildAttributesAcceleration_kEaseBoth = 3
};
bool BuildAttributesArchive_BuildAttributesAcceleration_IsValid(int value);
constexpr BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive_BuildAttributesAcceleration_BuildAttributesAcceleration_MIN = BuildAttributesArchive_BuildAttributesAcceleration_kNone;
constexpr BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive_BuildAttributesAcceleration_BuildAttributesAcceleration_MAX = BuildAttributesArchive_BuildAttributesAcceleration_kEaseBoth;
constexpr int BuildAttributesArchive_BuildAttributesAcceleration_BuildAttributesAcceleration_ARRAYSIZE = BuildAttributesArchive_BuildAttributesAcceleration_BuildAttributesAcceleration_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributesArchive_BuildAttributesAcceleration_descriptor();
template<typename T>
inline const std::string& BuildAttributesArchive_BuildAttributesAcceleration_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BuildAttributesArchive_BuildAttributesAcceleration>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BuildAttributesArchive_BuildAttributesAcceleration_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BuildAttributesArchive_BuildAttributesAcceleration_descriptor(), enum_t_value);
}
inline bool BuildAttributesArchive_BuildAttributesAcceleration_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BuildAttributesArchive_BuildAttributesAcceleration* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BuildAttributesArchive_BuildAttributesAcceleration>(
    BuildAttributesArchive_BuildAttributesAcceleration_descriptor(), name, value);
}
enum BuildAttributesArchive_BuildAttributesRotationDirection : int {
  BuildAttributesArchive_BuildAttributesRotationDirection_kClockwise = 31,
  BuildAttributesArchive_BuildAttributesRotationDirection_kCounterclockwise = 32
};
bool BuildAttributesArchive_BuildAttributesRotationDirection_IsValid(int value);
constexpr BuildAttributesArchive_BuildAttributesRotationDirection BuildAttributesArchive_BuildAttributesRotationDirection_BuildAttributesRotationDirection_MIN = BuildAttributesArchive_BuildAttributesRotationDirection_kClockwise;
constexpr BuildAttributesArchive_BuildAttributesRotationDirection BuildAttributesArchive_BuildAttributesRotationDirection_BuildAttributesRotationDirection_MAX = BuildAttributesArchive_BuildAttributesRotationDirection_kCounterclockwise;
constexpr int BuildAttributesArchive_BuildAttributesRotationDirection_BuildAttributesRotationDirection_ARRAYSIZE = BuildAttributesArchive_BuildAttributesRotationDirection_BuildAttributesRotationDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributesArchive_BuildAttributesRotationDirection_descriptor();
template<typename T>
inline const std::string& BuildAttributesArchive_BuildAttributesRotationDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BuildAttributesArchive_BuildAttributesRotationDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BuildAttributesArchive_BuildAttributesRotationDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BuildAttributesArchive_BuildAttributesRotationDirection_descriptor(), enum_t_value);
}
inline bool BuildAttributesArchive_BuildAttributesRotationDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BuildAttributesArchive_BuildAttributesRotationDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BuildAttributesArchive_BuildAttributesRotationDirection>(
    BuildAttributesArchive_BuildAttributesRotationDirection_descriptor(), name, value);
}
enum BuildAttributesArchive_BuildAttributesCurveStyle : int {
  BuildAttributesArchive_BuildAttributesCurveStyle_kStraight = 0,
  BuildAttributesArchive_BuildAttributesCurveStyle_kCurved = 1
};
bool BuildAttributesArchive_BuildAttributesCurveStyle_IsValid(int value);
constexpr BuildAttributesArchive_BuildAttributesCurveStyle BuildAttributesArchive_BuildAttributesCurveStyle_BuildAttributesCurveStyle_MIN = BuildAttributesArchive_BuildAttributesCurveStyle_kStraight;
constexpr BuildAttributesArchive_BuildAttributesCurveStyle BuildAttributesArchive_BuildAttributesCurveStyle_BuildAttributesCurveStyle_MAX = BuildAttributesArchive_BuildAttributesCurveStyle_kCurved;
constexpr int BuildAttributesArchive_BuildAttributesCurveStyle_BuildAttributesCurveStyle_ARRAYSIZE = BuildAttributesArchive_BuildAttributesCurveStyle_BuildAttributesCurveStyle_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributesArchive_BuildAttributesCurveStyle_descriptor();
template<typename T>
inline const std::string& BuildAttributesArchive_BuildAttributesCurveStyle_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BuildAttributesArchive_BuildAttributesCurveStyle>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BuildAttributesArchive_BuildAttributesCurveStyle_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BuildAttributesArchive_BuildAttributesCurveStyle_descriptor(), enum_t_value);
}
inline bool BuildAttributesArchive_BuildAttributesCurveStyle_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BuildAttributesArchive_BuildAttributesCurveStyle* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BuildAttributesArchive_BuildAttributesCurveStyle>(
    BuildAttributesArchive_BuildAttributesCurveStyle_descriptor(), name, value);
}
enum BuildAttributesArchive_BuildAttributesTextDelivery : int {
  BuildAttributesArchive_BuildAttributesTextDelivery_kTextDeliveryUndefined = 0,
  BuildAttributesArchive_BuildAttributesTextDelivery_kTextDeliveryByObject = 1,
  BuildAttributesArchive_BuildAttributesTextDelivery_kTextDeliveryByWord = 2,
  BuildAttributesArchive_BuildAttributesTextDelivery_kTextDeliveryByCharacter = 3,
  BuildAttributesArchive_BuildAttributesTextDelivery_kTextDeliveryByLine = 4
};
bool BuildAttributesArchive_BuildAttributesTextDelivery_IsValid(int value);
constexpr BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive_BuildAttributesTextDelivery_BuildAttributesTextDelivery_MIN = BuildAttributesArchive_BuildAttributesTextDelivery_kTextDeliveryUndefined;
constexpr BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive_BuildAttributesTextDelivery_BuildAttributesTextDelivery_MAX = BuildAttributesArchive_BuildAttributesTextDelivery_kTextDeliveryByLine;
constexpr int BuildAttributesArchive_BuildAttributesTextDelivery_BuildAttributesTextDelivery_ARRAYSIZE = BuildAttributesArchive_BuildAttributesTextDelivery_BuildAttributesTextDelivery_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributesArchive_BuildAttributesTextDelivery_descriptor();
template<typename T>
inline const std::string& BuildAttributesArchive_BuildAttributesTextDelivery_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BuildAttributesArchive_BuildAttributesTextDelivery>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BuildAttributesArchive_BuildAttributesTextDelivery_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BuildAttributesArchive_BuildAttributesTextDelivery_descriptor(), enum_t_value);
}
inline bool BuildAttributesArchive_BuildAttributesTextDelivery_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BuildAttributesArchive_BuildAttributesTextDelivery* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BuildAttributesArchive_BuildAttributesTextDelivery>(
    BuildAttributesArchive_BuildAttributesTextDelivery_descriptor(), name, value);
}
enum BuildAttributesArchive_BuildAttributesDeliveryOption : int {
  BuildAttributesArchive_BuildAttributesDeliveryOption_kDeliveryOptionUndefined = 0,
  BuildAttributesArchive_BuildAttributesDeliveryOption_kDeliveryOptionForward = 1,
  BuildAttributesArchive_BuildAttributesDeliveryOption_kDeliveryOptionBackward = 2,
  BuildAttributesArchive_BuildAttributesDeliveryOption_kDeliveryOptionFromCenter = 3,
  BuildAttributesArchive_BuildAttributesDeliveryOption_kDeliveryOptionFromEdges = 4,
  BuildAttributesArchive_BuildAttributesDeliveryOption_kDeliveryOptionRandom = 5
};
bool BuildAttributesArchive_BuildAttributesDeliveryOption_IsValid(int value);
constexpr BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive_BuildAttributesDeliveryOption_BuildAttributesDeliveryOption_MIN = BuildAttributesArchive_BuildAttributesDeliveryOption_kDeliveryOptionUndefined;
constexpr BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive_BuildAttributesDeliveryOption_BuildAttributesDeliveryOption_MAX = BuildAttributesArchive_BuildAttributesDeliveryOption_kDeliveryOptionRandom;
constexpr int BuildAttributesArchive_BuildAttributesDeliveryOption_BuildAttributesDeliveryOption_ARRAYSIZE = BuildAttributesArchive_BuildAttributesDeliveryOption_BuildAttributesDeliveryOption_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributesArchive_BuildAttributesDeliveryOption_descriptor();
template<typename T>
inline const std::string& BuildAttributesArchive_BuildAttributesDeliveryOption_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BuildAttributesArchive_BuildAttributesDeliveryOption>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BuildAttributesArchive_BuildAttributesDeliveryOption_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BuildAttributesArchive_BuildAttributesDeliveryOption_descriptor(), enum_t_value);
}
inline bool BuildAttributesArchive_BuildAttributesDeliveryOption_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BuildAttributesArchive_BuildAttributesDeliveryOption* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BuildAttributesArchive_BuildAttributesDeliveryOption>(
    BuildAttributesArchive_BuildAttributesDeliveryOption_descriptor(), name, value);
}
enum BuildAttributesArchive_ActionBuildAttributesJiggleIntensity : int {
  BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_kJiggleIntensitySmall = 0,
  BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_kJiggleIntensityMedium = 1,
  BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_kJiggleIntensityLarge = 2
};
bool BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_IsValid(int value);
constexpr BuildAttributesArchive_ActionBuildAttributesJiggleIntensity BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_ActionBuildAttributesJiggleIntensity_MIN = BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_kJiggleIntensitySmall;
constexpr BuildAttributesArchive_ActionBuildAttributesJiggleIntensity BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_ActionBuildAttributesJiggleIntensity_MAX = BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_kJiggleIntensityLarge;
constexpr int BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_ActionBuildAttributesJiggleIntensity_ARRAYSIZE = BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_ActionBuildAttributesJiggleIntensity_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_descriptor();
template<typename T>
inline const std::string& BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BuildAttributesArchive_ActionBuildAttributesJiggleIntensity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_descriptor(), enum_t_value);
}
inline bool BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BuildAttributesArchive_ActionBuildAttributesJiggleIntensity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BuildAttributesArchive_ActionBuildAttributesJiggleIntensity>(
    BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_descriptor(), name, value);
}
enum PlaceholderArchive_Kind : int {
  PlaceholderArchive_Kind_kKindPlaceholder = 0,
  PlaceholderArchive_Kind_kKindSlideNumberPlaceholder = 1,
  PlaceholderArchive_Kind_kKindTitlePlaceholder = 2,
  PlaceholderArchive_Kind_kKindBodyPlaceholder = 3,
  PlaceholderArchive_Kind_kKindObjectPlaceholder = 4
};
bool PlaceholderArchive_Kind_IsValid(int value);
constexpr PlaceholderArchive_Kind PlaceholderArchive_Kind_Kind_MIN = PlaceholderArchive_Kind_kKindPlaceholder;
constexpr PlaceholderArchive_Kind PlaceholderArchive_Kind_Kind_MAX = PlaceholderArchive_Kind_kKindObjectPlaceholder;
constexpr int PlaceholderArchive_Kind_Kind_ARRAYSIZE = PlaceholderArchive_Kind_Kind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlaceholderArchive_Kind_descriptor();
template<typename T>
inline const std::string& PlaceholderArchive_Kind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlaceholderArchive_Kind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlaceholderArchive_Kind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlaceholderArchive_Kind_descriptor(), enum_t_value);
}
inline bool PlaceholderArchive_Kind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PlaceholderArchive_Kind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlaceholderArchive_Kind>(
    PlaceholderArchive_Kind_descriptor(), name, value);
}
enum DesktopUILayoutArchive_SidebarViewMode : int {
  DesktopUILayoutArchive_SidebarViewMode_kSidebarViewModeNavigator = 0,
  DesktopUILayoutArchive_SidebarViewMode_kSidebarViewModeOutline = 1
};
bool DesktopUILayoutArchive_SidebarViewMode_IsValid(int value);
constexpr DesktopUILayoutArchive_SidebarViewMode DesktopUILayoutArchive_SidebarViewMode_SidebarViewMode_MIN = DesktopUILayoutArchive_SidebarViewMode_kSidebarViewModeNavigator;
constexpr DesktopUILayoutArchive_SidebarViewMode DesktopUILayoutArchive_SidebarViewMode_SidebarViewMode_MAX = DesktopUILayoutArchive_SidebarViewMode_kSidebarViewModeOutline;
constexpr int DesktopUILayoutArchive_SidebarViewMode_SidebarViewMode_ARRAYSIZE = DesktopUILayoutArchive_SidebarViewMode_SidebarViewMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DesktopUILayoutArchive_SidebarViewMode_descriptor();
template<typename T>
inline const std::string& DesktopUILayoutArchive_SidebarViewMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DesktopUILayoutArchive_SidebarViewMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DesktopUILayoutArchive_SidebarViewMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DesktopUILayoutArchive_SidebarViewMode_descriptor(), enum_t_value);
}
inline bool DesktopUILayoutArchive_SidebarViewMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DesktopUILayoutArchive_SidebarViewMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DesktopUILayoutArchive_SidebarViewMode>(
    DesktopUILayoutArchive_SidebarViewMode_descriptor(), name, value);
}
enum DesktopUILayoutArchive_InspectorPaneViewMode : int {
  DesktopUILayoutArchive_InspectorPaneViewMode_kInspectorPaneViewModeFormat = 0,
  DesktopUILayoutArchive_InspectorPaneViewMode_kInspectorPaneViewModeAnimate = 1,
  DesktopUILayoutArchive_InspectorPaneViewMode_kInspectorPaneViewModeSetup = 2
};
bool DesktopUILayoutArchive_InspectorPaneViewMode_IsValid(int value);
constexpr DesktopUILayoutArchive_InspectorPaneViewMode DesktopUILayoutArchive_InspectorPaneViewMode_InspectorPaneViewMode_MIN = DesktopUILayoutArchive_InspectorPaneViewMode_kInspectorPaneViewModeFormat;
constexpr DesktopUILayoutArchive_InspectorPaneViewMode DesktopUILayoutArchive_InspectorPaneViewMode_InspectorPaneViewMode_MAX = DesktopUILayoutArchive_InspectorPaneViewMode_kInspectorPaneViewModeSetup;
constexpr int DesktopUILayoutArchive_InspectorPaneViewMode_InspectorPaneViewMode_ARRAYSIZE = DesktopUILayoutArchive_InspectorPaneViewMode_InspectorPaneViewMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DesktopUILayoutArchive_InspectorPaneViewMode_descriptor();
template<typename T>
inline const std::string& DesktopUILayoutArchive_InspectorPaneViewMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DesktopUILayoutArchive_InspectorPaneViewMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DesktopUILayoutArchive_InspectorPaneViewMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DesktopUILayoutArchive_InspectorPaneViewMode_descriptor(), enum_t_value);
}
inline bool DesktopUILayoutArchive_InspectorPaneViewMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DesktopUILayoutArchive_InspectorPaneViewMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DesktopUILayoutArchive_InspectorPaneViewMode>(
    DesktopUILayoutArchive_InspectorPaneViewMode_descriptor(), name, value);
}
enum ShowArchive_KNShowMode : int {
  ShowArchive_KNShowMode_kKNShowModeNormal = 0,
  ShowArchive_KNShowMode_kKNShowModeAutoPlay = 1,
  ShowArchive_KNShowMode_kKNShowModeHyperlinksOnly = 2
};
bool ShowArchive_KNShowMode_IsValid(int value);
constexpr ShowArchive_KNShowMode ShowArchive_KNShowMode_KNShowMode_MIN = ShowArchive_KNShowMode_kKNShowModeNormal;
constexpr ShowArchive_KNShowMode ShowArchive_KNShowMode_KNShowMode_MAX = ShowArchive_KNShowMode_kKNShowModeHyperlinksOnly;
constexpr int ShowArchive_KNShowMode_KNShowMode_ARRAYSIZE = ShowArchive_KNShowMode_KNShowMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShowArchive_KNShowMode_descriptor();
template<typename T>
inline const std::string& ShowArchive_KNShowMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ShowArchive_KNShowMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ShowArchive_KNShowMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ShowArchive_KNShowMode_descriptor(), enum_t_value);
}
inline bool ShowArchive_KNShowMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ShowArchive_KNShowMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ShowArchive_KNShowMode>(
    ShowArchive_KNShowMode_descriptor(), name, value);
}
enum RecordingArchive_RecordingSyncState : int {
  RecordingArchive_RecordingSyncState_kRecordingSyncStateInSyncWithShow = 0,
  RecordingArchive_RecordingSyncState_kRecordingSyncStateOutOfSyncWithShow = 1
};
bool RecordingArchive_RecordingSyncState_IsValid(int value);
constexpr RecordingArchive_RecordingSyncState RecordingArchive_RecordingSyncState_RecordingSyncState_MIN = RecordingArchive_RecordingSyncState_kRecordingSyncStateInSyncWithShow;
constexpr RecordingArchive_RecordingSyncState RecordingArchive_RecordingSyncState_RecordingSyncState_MAX = RecordingArchive_RecordingSyncState_kRecordingSyncStateOutOfSyncWithShow;
constexpr int RecordingArchive_RecordingSyncState_RecordingSyncState_ARRAYSIZE = RecordingArchive_RecordingSyncState_RecordingSyncState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecordingArchive_RecordingSyncState_descriptor();
template<typename T>
inline const std::string& RecordingArchive_RecordingSyncState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RecordingArchive_RecordingSyncState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RecordingArchive_RecordingSyncState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RecordingArchive_RecordingSyncState_descriptor(), enum_t_value);
}
inline bool RecordingArchive_RecordingSyncState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RecordingArchive_RecordingSyncState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RecordingArchive_RecordingSyncState>(
    RecordingArchive_RecordingSyncState_descriptor(), name, value);
}
enum RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase : int {
  RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_kRecordingNavigationEventAnimationNone = 0,
  RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_kRecordingNavigationEventAnimationStart = 1,
  RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_kRecordingNavigationEventAnimationEnd = 2
};
bool RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_IsValid(int value);
constexpr RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_RecordingNavigationEventAnimationPhase_MIN = RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_kRecordingNavigationEventAnimationNone;
constexpr RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_RecordingNavigationEventAnimationPhase_MAX = RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_kRecordingNavigationEventAnimationEnd;
constexpr int RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_RecordingNavigationEventAnimationPhase_ARRAYSIZE = RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_RecordingNavigationEventAnimationPhase_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_descriptor();
template<typename T>
inline const std::string& RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_descriptor(), enum_t_value);
}
inline bool RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase>(
    RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_descriptor(), name, value);
}
enum RecordingPauseEventArchive_RecordingPauseEventType : int {
  RecordingPauseEventArchive_RecordingPauseEventType_kRecordingPauseEventTypeResume = 0,
  RecordingPauseEventArchive_RecordingPauseEventType_kRecordingPauseEventTypePause = 1,
  RecordingPauseEventArchive_RecordingPauseEventType_kRecordingPauseEventTypeConcealWithBlack = 2,
  RecordingPauseEventArchive_RecordingPauseEventType_kRecordingPauseEventTypeConcealWithWhite = 3
};
bool RecordingPauseEventArchive_RecordingPauseEventType_IsValid(int value);
constexpr RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive_RecordingPauseEventType_RecordingPauseEventType_MIN = RecordingPauseEventArchive_RecordingPauseEventType_kRecordingPauseEventTypeResume;
constexpr RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive_RecordingPauseEventType_RecordingPauseEventType_MAX = RecordingPauseEventArchive_RecordingPauseEventType_kRecordingPauseEventTypeConcealWithWhite;
constexpr int RecordingPauseEventArchive_RecordingPauseEventType_RecordingPauseEventType_ARRAYSIZE = RecordingPauseEventArchive_RecordingPauseEventType_RecordingPauseEventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecordingPauseEventArchive_RecordingPauseEventType_descriptor();
template<typename T>
inline const std::string& RecordingPauseEventArchive_RecordingPauseEventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RecordingPauseEventArchive_RecordingPauseEventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RecordingPauseEventArchive_RecordingPauseEventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RecordingPauseEventArchive_RecordingPauseEventType_descriptor(), enum_t_value);
}
inline bool RecordingPauseEventArchive_RecordingPauseEventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RecordingPauseEventArchive_RecordingPauseEventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RecordingPauseEventArchive_RecordingPauseEventType>(
    RecordingPauseEventArchive_RecordingPauseEventType_descriptor(), name, value);
}
enum RecordingMovieEventArchive_RecordingMovieEventType : int {
  RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventNone = 0,
  RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventSeek = 1,
  RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventSetRate = 2,
  RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventStartPlayback = 3,
  RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventStopPlayback = 4,
  RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventBeginScrubbing = 5,
  RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventEndScrubbing = 6
};
bool RecordingMovieEventArchive_RecordingMovieEventType_IsValid(int value);
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive_RecordingMovieEventType_RecordingMovieEventType_MIN = RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventNone;
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive_RecordingMovieEventType_RecordingMovieEventType_MAX = RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventEndScrubbing;
constexpr int RecordingMovieEventArchive_RecordingMovieEventType_RecordingMovieEventType_ARRAYSIZE = RecordingMovieEventArchive_RecordingMovieEventType_RecordingMovieEventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecordingMovieEventArchive_RecordingMovieEventType_descriptor();
template<typename T>
inline const std::string& RecordingMovieEventArchive_RecordingMovieEventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RecordingMovieEventArchive_RecordingMovieEventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RecordingMovieEventArchive_RecordingMovieEventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RecordingMovieEventArchive_RecordingMovieEventType_descriptor(), enum_t_value);
}
inline bool RecordingMovieEventArchive_RecordingMovieEventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RecordingMovieEventArchive_RecordingMovieEventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RecordingMovieEventArchive_RecordingMovieEventType>(
    RecordingMovieEventArchive_RecordingMovieEventType_descriptor(), name, value);
}
enum Soundtrack_SoundtrackMode : int {
  Soundtrack_SoundtrackMode_kKNSoundtrackModePlayOnce = 0,
  Soundtrack_SoundtrackMode_kKNSoundtrackModeLoop = 1,
  Soundtrack_SoundtrackMode_kKNSoundtrackModeDoNotPlay = 2
};
bool Soundtrack_SoundtrackMode_IsValid(int value);
constexpr Soundtrack_SoundtrackMode Soundtrack_SoundtrackMode_SoundtrackMode_MIN = Soundtrack_SoundtrackMode_kKNSoundtrackModePlayOnce;
constexpr Soundtrack_SoundtrackMode Soundtrack_SoundtrackMode_SoundtrackMode_MAX = Soundtrack_SoundtrackMode_kKNSoundtrackModeDoNotPlay;
constexpr int Soundtrack_SoundtrackMode_SoundtrackMode_ARRAYSIZE = Soundtrack_SoundtrackMode_SoundtrackMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Soundtrack_SoundtrackMode_descriptor();
template<typename T>
inline const std::string& Soundtrack_SoundtrackMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Soundtrack_SoundtrackMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Soundtrack_SoundtrackMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Soundtrack_SoundtrackMode_descriptor(), enum_t_value);
}
inline bool Soundtrack_SoundtrackMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Soundtrack_SoundtrackMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Soundtrack_SoundtrackMode>(
    Soundtrack_SoundtrackMode_descriptor(), name, value);
}
// ===================================================================

class AnimationAttributesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.AnimationAttributesArchive) */ {
 public:
  inline AnimationAttributesArchive() : AnimationAttributesArchive(nullptr) {}
  ~AnimationAttributesArchive() override;
  explicit PROTOBUF_CONSTEXPR AnimationAttributesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnimationAttributesArchive(const AnimationAttributesArchive& from);
  AnimationAttributesArchive(AnimationAttributesArchive&& from) noexcept
    : AnimationAttributesArchive() {
    *this = ::std::move(from);
  }

  inline AnimationAttributesArchive& operator=(const AnimationAttributesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnimationAttributesArchive& operator=(AnimationAttributesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnimationAttributesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnimationAttributesArchive* internal_default_instance() {
    return reinterpret_cast<const AnimationAttributesArchive*>(
               &_AnimationAttributesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AnimationAttributesArchive& a, AnimationAttributesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(AnimationAttributesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnimationAttributesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnimationAttributesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnimationAttributesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnimationAttributesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AnimationAttributesArchive& from) {
    AnimationAttributesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnimationAttributesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.AnimationAttributesArchive";
  }
  protected:
  explicit AnimationAttributesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnimationTypeFieldNumber = 1,
    kEffectFieldNumber = 2,
    kColorFieldNumber = 7,
    kDurationFieldNumber = 3,
    kDelayFieldNumber = 5,
    kDirectionFieldNumber = 4,
    kIsAutomaticFieldNumber = 6,
  };
  // optional string animationType = 1;
  bool has_animationtype() const;
  private:
  bool _internal_has_animationtype() const;
  public:
  void clear_animationtype();
  const std::string& animationtype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_animationtype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_animationtype();
  PROTOBUF_NODISCARD std::string* release_animationtype();
  void set_allocated_animationtype(std::string* animationtype);
  private:
  const std::string& _internal_animationtype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_animationtype(const std::string& value);
  std::string* _internal_mutable_animationtype();
  public:

  // optional string effect = 2;
  bool has_effect() const;
  private:
  bool _internal_has_effect() const;
  public:
  void clear_effect();
  const std::string& effect() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_effect(ArgT0&& arg0, ArgT... args);
  std::string* mutable_effect();
  PROTOBUF_NODISCARD std::string* release_effect();
  void set_allocated_effect(std::string* effect);
  private:
  const std::string& _internal_effect() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_effect(const std::string& value);
  std::string* _internal_mutable_effect();
  public:

  // optional .TSP.Color color = 7;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::TSP::Color& color() const;
  PROTOBUF_NODISCARD ::TSP::Color* release_color();
  ::TSP::Color* mutable_color();
  void set_allocated_color(::TSP::Color* color);
  private:
  const ::TSP::Color& _internal_color() const;
  ::TSP::Color* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::TSP::Color* color);
  ::TSP::Color* unsafe_arena_release_color();

  // optional double duration = 3;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  double duration() const;
  void set_duration(double value);
  private:
  double _internal_duration() const;
  void _internal_set_duration(double value);
  public:

  // optional double delay = 5;
  bool has_delay() const;
  private:
  bool _internal_has_delay() const;
  public:
  void clear_delay();
  double delay() const;
  void set_delay(double value);
  private:
  double _internal_delay() const;
  void _internal_set_delay(double value);
  public:

  // optional uint32 direction = 4;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  uint32_t direction() const;
  void set_direction(uint32_t value);
  private:
  uint32_t _internal_direction() const;
  void _internal_set_direction(uint32_t value);
  public:

  // optional bool isAutomatic = 6;
  bool has_isautomatic() const;
  private:
  bool _internal_has_isautomatic() const;
  public:
  void clear_isautomatic();
  bool isautomatic() const;
  void set_isautomatic(bool value);
  private:
  bool _internal_isautomatic() const;
  void _internal_set_isautomatic(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.AnimationAttributesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr animationtype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr effect_;
    ::TSP::Color* color_;
    double duration_;
    double delay_;
    uint32_t direction_;
    bool isautomatic_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class TransitionAttributesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.TransitionAttributesArchive) */ {
 public:
  inline TransitionAttributesArchive() : TransitionAttributesArchive(nullptr) {}
  ~TransitionAttributesArchive() override;
  explicit PROTOBUF_CONSTEXPR TransitionAttributesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransitionAttributesArchive(const TransitionAttributesArchive& from);
  TransitionAttributesArchive(TransitionAttributesArchive&& from) noexcept
    : TransitionAttributesArchive() {
    *this = ::std::move(from);
  }

  inline TransitionAttributesArchive& operator=(const TransitionAttributesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransitionAttributesArchive& operator=(TransitionAttributesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransitionAttributesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransitionAttributesArchive* internal_default_instance() {
    return reinterpret_cast<const TransitionAttributesArchive*>(
               &_TransitionAttributesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TransitionAttributesArchive& a, TransitionAttributesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TransitionAttributesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransitionAttributesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransitionAttributesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransitionAttributesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransitionAttributesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransitionAttributesArchive& from) {
    TransitionAttributesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransitionAttributesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.TransitionAttributesArchive";
  }
  protected:
  explicit TransitionAttributesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionCustomAttributesTimingCurveType;
  static constexpr TransitionCustomAttributesTimingCurveType TransitionCustomAttributesTimingCurveTypeLinear =
    TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveTypeLinear;
  static constexpr TransitionCustomAttributesTimingCurveType TransitionCustomAttributesTimingCurveTypeEaseIn =
    TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveTypeEaseIn;
  static constexpr TransitionCustomAttributesTimingCurveType TransitionCustomAttributesTimingCurveTypeEaseOut =
    TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveTypeEaseOut;
  static constexpr TransitionCustomAttributesTimingCurveType TransitionCustomAttributesTimingCurveTypeEaseInEaseOut =
    TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveTypeEaseInEaseOut;
  static inline bool TransitionCustomAttributesTimingCurveType_IsValid(int value) {
    return TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_IsValid(value);
  }
  static constexpr TransitionCustomAttributesTimingCurveType TransitionCustomAttributesTimingCurveType_MIN =
    TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveType_MIN;
  static constexpr TransitionCustomAttributesTimingCurveType TransitionCustomAttributesTimingCurveType_MAX =
    TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveType_MAX;
  static constexpr int TransitionCustomAttributesTimingCurveType_ARRAYSIZE =
    TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_TransitionCustomAttributesTimingCurveType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TransitionCustomAttributesTimingCurveType_descriptor() {
    return TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_descriptor();
  }
  template<typename T>
  static inline const std::string& TransitionCustomAttributesTimingCurveType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TransitionCustomAttributesTimingCurveType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TransitionCustomAttributesTimingCurveType_Name.");
    return TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_Name(enum_t_value);
  }
  static inline bool TransitionCustomAttributesTimingCurveType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TransitionCustomAttributesTimingCurveType* value) {
    return TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_Parse(name, value);
  }

  typedef TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionCustomAttributesTextDeliveryType;
  static constexpr TransitionCustomAttributesTextDeliveryType TransitionCustomAttributesTextDeliveryTypeByObject =
    TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryTypeByObject;
  static constexpr TransitionCustomAttributesTextDeliveryType TransitionCustomAttributesTextDeliveryTypeByWord =
    TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryTypeByWord;
  static constexpr TransitionCustomAttributesTextDeliveryType TransitionCustomAttributesTextDeliveryTypeByCharacter =
    TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryTypeByCharacter;
  static constexpr TransitionCustomAttributesTextDeliveryType TransitionCustomAttributesTextDeliveryTypeByLine =
    TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryTypeByLine;
  static inline bool TransitionCustomAttributesTextDeliveryType_IsValid(int value) {
    return TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_IsValid(value);
  }
  static constexpr TransitionCustomAttributesTextDeliveryType TransitionCustomAttributesTextDeliveryType_MIN =
    TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryType_MIN;
  static constexpr TransitionCustomAttributesTextDeliveryType TransitionCustomAttributesTextDeliveryType_MAX =
    TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryType_MAX;
  static constexpr int TransitionCustomAttributesTextDeliveryType_ARRAYSIZE =
    TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_TransitionCustomAttributesTextDeliveryType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TransitionCustomAttributesTextDeliveryType_descriptor() {
    return TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_descriptor();
  }
  template<typename T>
  static inline const std::string& TransitionCustomAttributesTextDeliveryType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TransitionCustomAttributesTextDeliveryType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TransitionCustomAttributesTextDeliveryType_Name.");
    return TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_Name(enum_t_value);
  }
  static inline bool TransitionCustomAttributesTextDeliveryType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TransitionCustomAttributesTextDeliveryType* value) {
    return TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseAnimationTypeFieldNumber = 1,
    kDatabaseEffectFieldNumber = 2,
    kDatabaseColorFieldNumber = 7,
    kAnimationAttributesFieldNumber = 8,
    kDatabaseDurationFieldNumber = 3,
    kDatabaseDirectionFieldNumber = 4,
    kDatabaseDelayFieldNumber = 5,
    kCustomTwistFieldNumber = 9,
    kCustomMosaicSizeFieldNumber = 10,
    kIsAutomaticFieldNumber = 6,
    kCustomBounceFieldNumber = 12,
    kCustomMagicMoveFadeUnmatchedObjectsFieldNumber = 13,
    kCustomMosaicTypeFieldNumber = 11,
    kCustomTimingCurveFieldNumber = 15,
    kCustomTextDeliveryTypeFieldNumber = 16,
  };
  // optional string database_animationType = 1;
  bool has_database_animationtype() const;
  private:
  bool _internal_has_database_animationtype() const;
  public:
  void clear_database_animationtype();
  const std::string& database_animationtype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_database_animationtype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_database_animationtype();
  PROTOBUF_NODISCARD std::string* release_database_animationtype();
  void set_allocated_database_animationtype(std::string* database_animationtype);
  private:
  const std::string& _internal_database_animationtype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_database_animationtype(const std::string& value);
  std::string* _internal_mutable_database_animationtype();
  public:

  // optional string database_effect = 2;
  bool has_database_effect() const;
  private:
  bool _internal_has_database_effect() const;
  public:
  void clear_database_effect();
  const std::string& database_effect() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_database_effect(ArgT0&& arg0, ArgT... args);
  std::string* mutable_database_effect();
  PROTOBUF_NODISCARD std::string* release_database_effect();
  void set_allocated_database_effect(std::string* database_effect);
  private:
  const std::string& _internal_database_effect() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_database_effect(const std::string& value);
  std::string* _internal_mutable_database_effect();
  public:

  // optional .TSP.Color database_color = 7;
  bool has_database_color() const;
  private:
  bool _internal_has_database_color() const;
  public:
  void clear_database_color();
  const ::TSP::Color& database_color() const;
  PROTOBUF_NODISCARD ::TSP::Color* release_database_color();
  ::TSP::Color* mutable_database_color();
  void set_allocated_database_color(::TSP::Color* database_color);
  private:
  const ::TSP::Color& _internal_database_color() const;
  ::TSP::Color* _internal_mutable_database_color();
  public:
  void unsafe_arena_set_allocated_database_color(
      ::TSP::Color* database_color);
  ::TSP::Color* unsafe_arena_release_database_color();

  // optional .KN.AnimationAttributesArchive animationAttributes = 8;
  bool has_animationattributes() const;
  private:
  bool _internal_has_animationattributes() const;
  public:
  void clear_animationattributes();
  const ::KN::AnimationAttributesArchive& animationattributes() const;
  PROTOBUF_NODISCARD ::KN::AnimationAttributesArchive* release_animationattributes();
  ::KN::AnimationAttributesArchive* mutable_animationattributes();
  void set_allocated_animationattributes(::KN::AnimationAttributesArchive* animationattributes);
  private:
  const ::KN::AnimationAttributesArchive& _internal_animationattributes() const;
  ::KN::AnimationAttributesArchive* _internal_mutable_animationattributes();
  public:
  void unsafe_arena_set_allocated_animationattributes(
      ::KN::AnimationAttributesArchive* animationattributes);
  ::KN::AnimationAttributesArchive* unsafe_arena_release_animationattributes();

  // optional double database_duration = 3;
  bool has_database_duration() const;
  private:
  bool _internal_has_database_duration() const;
  public:
  void clear_database_duration();
  double database_duration() const;
  void set_database_duration(double value);
  private:
  double _internal_database_duration() const;
  void _internal_set_database_duration(double value);
  public:

  // optional uint32 database_direction = 4;
  bool has_database_direction() const;
  private:
  bool _internal_has_database_direction() const;
  public:
  void clear_database_direction();
  uint32_t database_direction() const;
  void set_database_direction(uint32_t value);
  private:
  uint32_t _internal_database_direction() const;
  void _internal_set_database_direction(uint32_t value);
  public:

  // optional float database_delay = 5;
  bool has_database_delay() const;
  private:
  bool _internal_has_database_delay() const;
  public:
  void clear_database_delay();
  float database_delay() const;
  void set_database_delay(float value);
  private:
  float _internal_database_delay() const;
  void _internal_set_database_delay(float value);
  public:

  // optional float custom_twist = 9;
  bool has_custom_twist() const;
  private:
  bool _internal_has_custom_twist() const;
  public:
  void clear_custom_twist();
  float custom_twist() const;
  void set_custom_twist(float value);
  private:
  float _internal_custom_twist() const;
  void _internal_set_custom_twist(float value);
  public:

  // optional uint32 custom_mosaic_size = 10;
  bool has_custom_mosaic_size() const;
  private:
  bool _internal_has_custom_mosaic_size() const;
  public:
  void clear_custom_mosaic_size();
  uint32_t custom_mosaic_size() const;
  void set_custom_mosaic_size(uint32_t value);
  private:
  uint32_t _internal_custom_mosaic_size() const;
  void _internal_set_custom_mosaic_size(uint32_t value);
  public:

  // optional bool isAutomatic = 6;
  bool has_isautomatic() const;
  private:
  bool _internal_has_isautomatic() const;
  public:
  void clear_isautomatic();
  bool isautomatic() const;
  void set_isautomatic(bool value);
  private:
  bool _internal_isautomatic() const;
  void _internal_set_isautomatic(bool value);
  public:

  // optional bool custom_bounce = 12;
  bool has_custom_bounce() const;
  private:
  bool _internal_has_custom_bounce() const;
  public:
  void clear_custom_bounce();
  bool custom_bounce() const;
  void set_custom_bounce(bool value);
  private:
  bool _internal_custom_bounce() const;
  void _internal_set_custom_bounce(bool value);
  public:

  // optional bool custom_magic_move_fade_unmatched_objects = 13;
  bool has_custom_magic_move_fade_unmatched_objects() const;
  private:
  bool _internal_has_custom_magic_move_fade_unmatched_objects() const;
  public:
  void clear_custom_magic_move_fade_unmatched_objects();
  bool custom_magic_move_fade_unmatched_objects() const;
  void set_custom_magic_move_fade_unmatched_objects(bool value);
  private:
  bool _internal_custom_magic_move_fade_unmatched_objects() const;
  void _internal_set_custom_magic_move_fade_unmatched_objects(bool value);
  public:

  // optional uint32 custom_mosaic_type = 11;
  bool has_custom_mosaic_type() const;
  private:
  bool _internal_has_custom_mosaic_type() const;
  public:
  void clear_custom_mosaic_type();
  uint32_t custom_mosaic_type() const;
  void set_custom_mosaic_type(uint32_t value);
  private:
  uint32_t _internal_custom_mosaic_type() const;
  void _internal_set_custom_mosaic_type(uint32_t value);
  public:

  // optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTimingCurveType custom_timing_curve = 15;
  bool has_custom_timing_curve() const;
  private:
  bool _internal_has_custom_timing_curve() const;
  public:
  void clear_custom_timing_curve();
  ::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType custom_timing_curve() const;
  void set_custom_timing_curve(::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType value);
  private:
  ::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType _internal_custom_timing_curve() const;
  void _internal_set_custom_timing_curve(::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType value);
  public:

  // optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTextDeliveryType custom_text_delivery_type = 16;
  bool has_custom_text_delivery_type() const;
  private:
  bool _internal_has_custom_text_delivery_type() const;
  public:
  void clear_custom_text_delivery_type();
  ::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType custom_text_delivery_type() const;
  void set_custom_text_delivery_type(::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType value);
  private:
  ::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType _internal_custom_text_delivery_type() const;
  void _internal_set_custom_text_delivery_type(::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType value);
  public:

  // @@protoc_insertion_point(class_scope:KN.TransitionAttributesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_animationtype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_effect_;
    ::TSP::Color* database_color_;
    ::KN::AnimationAttributesArchive* animationattributes_;
    double database_duration_;
    uint32_t database_direction_;
    float database_delay_;
    float custom_twist_;
    uint32_t custom_mosaic_size_;
    bool isautomatic_;
    bool custom_bounce_;
    bool custom_magic_move_fade_unmatched_objects_;
    uint32_t custom_mosaic_type_;
    int custom_timing_curve_;
    int custom_text_delivery_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class TransitionArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.TransitionArchive) */ {
 public:
  inline TransitionArchive() : TransitionArchive(nullptr) {}
  ~TransitionArchive() override;
  explicit PROTOBUF_CONSTEXPR TransitionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransitionArchive(const TransitionArchive& from);
  TransitionArchive(TransitionArchive&& from) noexcept
    : TransitionArchive() {
    *this = ::std::move(from);
  }

  inline TransitionArchive& operator=(const TransitionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransitionArchive& operator=(TransitionArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransitionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransitionArchive* internal_default_instance() {
    return reinterpret_cast<const TransitionArchive*>(
               &_TransitionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TransitionArchive& a, TransitionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TransitionArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransitionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransitionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransitionArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransitionArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransitionArchive& from) {
    TransitionArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransitionArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.TransitionArchive";
  }
  protected:
  explicit TransitionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 2,
  };
  // required .KN.TransitionAttributesArchive attributes = 2;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::KN::TransitionAttributesArchive& attributes() const;
  PROTOBUF_NODISCARD ::KN::TransitionAttributesArchive* release_attributes();
  ::KN::TransitionAttributesArchive* mutable_attributes();
  void set_allocated_attributes(::KN::TransitionAttributesArchive* attributes);
  private:
  const ::KN::TransitionAttributesArchive& _internal_attributes() const;
  ::KN::TransitionAttributesArchive* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::KN::TransitionAttributesArchive* attributes);
  ::KN::TransitionAttributesArchive* unsafe_arena_release_attributes();

  // @@protoc_insertion_point(class_scope:KN.TransitionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::KN::TransitionAttributesArchive* attributes_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class BuildChunkArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.BuildChunkArchive) */ {
 public:
  inline BuildChunkArchive() : BuildChunkArchive(nullptr) {}
  ~BuildChunkArchive() override;
  explicit PROTOBUF_CONSTEXPR BuildChunkArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuildChunkArchive(const BuildChunkArchive& from);
  BuildChunkArchive(BuildChunkArchive&& from) noexcept
    : BuildChunkArchive() {
    *this = ::std::move(from);
  }

  inline BuildChunkArchive& operator=(const BuildChunkArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildChunkArchive& operator=(BuildChunkArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BuildChunkArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuildChunkArchive* internal_default_instance() {
    return reinterpret_cast<const BuildChunkArchive*>(
               &_BuildChunkArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BuildChunkArchive& a, BuildChunkArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildChunkArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuildChunkArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BuildChunkArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BuildChunkArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BuildChunkArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BuildChunkArchive& from) {
    BuildChunkArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildChunkArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.BuildChunkArchive";
  }
  protected:
  explicit BuildChunkArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuildFieldNumber = 1,
    kDelayFieldNumber = 3,
    kDurationFieldNumber = 4,
    kIndexFieldNumber = 2,
    kAutomaticFieldNumber = 5,
    kReferentFieldNumber = 6,
  };
  // required .TSP.Reference build = 1;
  bool has_build() const;
  private:
  bool _internal_has_build() const;
  public:
  void clear_build();
  const ::TSP::Reference& build() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_build();
  ::TSP::Reference* mutable_build();
  void set_allocated_build(::TSP::Reference* build);
  private:
  const ::TSP::Reference& _internal_build() const;
  ::TSP::Reference* _internal_mutable_build();
  public:
  void unsafe_arena_set_allocated_build(
      ::TSP::Reference* build);
  ::TSP::Reference* unsafe_arena_release_build();

  // optional double delay = 3;
  bool has_delay() const;
  private:
  bool _internal_has_delay() const;
  public:
  void clear_delay();
  double delay() const;
  void set_delay(double value);
  private:
  double _internal_delay() const;
  void _internal_set_delay(double value);
  public:

  // optional double duration = 4;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  double duration() const;
  void set_duration(double value);
  private:
  double _internal_duration() const;
  void _internal_set_duration(double value);
  public:

  // required uint32 index = 2;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // optional bool automatic = 5;
  bool has_automatic() const;
  private:
  bool _internal_has_automatic() const;
  public:
  void clear_automatic();
  bool automatic() const;
  void set_automatic(bool value);
  private:
  bool _internal_automatic() const;
  void _internal_set_automatic(bool value);
  public:

  // optional bool referent = 6;
  bool has_referent() const;
  private:
  bool _internal_has_referent() const;
  public:
  void clear_referent();
  bool referent() const;
  void set_referent(bool value);
  private:
  bool _internal_referent() const;
  void _internal_set_referent(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.BuildChunkArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* build_;
    double delay_;
    double duration_;
    uint32_t index_;
    bool automatic_;
    bool referent_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class BuildAttributesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.BuildAttributesArchive) */ {
 public:
  inline BuildAttributesArchive() : BuildAttributesArchive(nullptr) {}
  ~BuildAttributesArchive() override;
  explicit PROTOBUF_CONSTEXPR BuildAttributesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuildAttributesArchive(const BuildAttributesArchive& from);
  BuildAttributesArchive(BuildAttributesArchive&& from) noexcept
    : BuildAttributesArchive() {
    *this = ::std::move(from);
  }

  inline BuildAttributesArchive& operator=(const BuildAttributesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildAttributesArchive& operator=(BuildAttributesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BuildAttributesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuildAttributesArchive* internal_default_instance() {
    return reinterpret_cast<const BuildAttributesArchive*>(
               &_BuildAttributesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BuildAttributesArchive& a, BuildAttributesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildAttributesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuildAttributesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BuildAttributesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BuildAttributesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BuildAttributesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BuildAttributesArchive& from) {
    BuildAttributesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildAttributesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.BuildAttributesArchive";
  }
  protected:
  explicit BuildAttributesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesAcceleration;
  static constexpr BuildAttributesAcceleration kNone =
    BuildAttributesArchive_BuildAttributesAcceleration_kNone;
  static constexpr BuildAttributesAcceleration kEaseIn =
    BuildAttributesArchive_BuildAttributesAcceleration_kEaseIn;
  static constexpr BuildAttributesAcceleration kEaseOut =
    BuildAttributesArchive_BuildAttributesAcceleration_kEaseOut;
  static constexpr BuildAttributesAcceleration kEaseBoth =
    BuildAttributesArchive_BuildAttributesAcceleration_kEaseBoth;
  static inline bool BuildAttributesAcceleration_IsValid(int value) {
    return BuildAttributesArchive_BuildAttributesAcceleration_IsValid(value);
  }
  static constexpr BuildAttributesAcceleration BuildAttributesAcceleration_MIN =
    BuildAttributesArchive_BuildAttributesAcceleration_BuildAttributesAcceleration_MIN;
  static constexpr BuildAttributesAcceleration BuildAttributesAcceleration_MAX =
    BuildAttributesArchive_BuildAttributesAcceleration_BuildAttributesAcceleration_MAX;
  static constexpr int BuildAttributesAcceleration_ARRAYSIZE =
    BuildAttributesArchive_BuildAttributesAcceleration_BuildAttributesAcceleration_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BuildAttributesAcceleration_descriptor() {
    return BuildAttributesArchive_BuildAttributesAcceleration_descriptor();
  }
  template<typename T>
  static inline const std::string& BuildAttributesAcceleration_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BuildAttributesAcceleration>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BuildAttributesAcceleration_Name.");
    return BuildAttributesArchive_BuildAttributesAcceleration_Name(enum_t_value);
  }
  static inline bool BuildAttributesAcceleration_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BuildAttributesAcceleration* value) {
    return BuildAttributesArchive_BuildAttributesAcceleration_Parse(name, value);
  }

  typedef BuildAttributesArchive_BuildAttributesRotationDirection BuildAttributesRotationDirection;
  static constexpr BuildAttributesRotationDirection kClockwise =
    BuildAttributesArchive_BuildAttributesRotationDirection_kClockwise;
  static constexpr BuildAttributesRotationDirection kCounterclockwise =
    BuildAttributesArchive_BuildAttributesRotationDirection_kCounterclockwise;
  static inline bool BuildAttributesRotationDirection_IsValid(int value) {
    return BuildAttributesArchive_BuildAttributesRotationDirection_IsValid(value);
  }
  static constexpr BuildAttributesRotationDirection BuildAttributesRotationDirection_MIN =
    BuildAttributesArchive_BuildAttributesRotationDirection_BuildAttributesRotationDirection_MIN;
  static constexpr BuildAttributesRotationDirection BuildAttributesRotationDirection_MAX =
    BuildAttributesArchive_BuildAttributesRotationDirection_BuildAttributesRotationDirection_MAX;
  static constexpr int BuildAttributesRotationDirection_ARRAYSIZE =
    BuildAttributesArchive_BuildAttributesRotationDirection_BuildAttributesRotationDirection_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BuildAttributesRotationDirection_descriptor() {
    return BuildAttributesArchive_BuildAttributesRotationDirection_descriptor();
  }
  template<typename T>
  static inline const std::string& BuildAttributesRotationDirection_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BuildAttributesRotationDirection>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BuildAttributesRotationDirection_Name.");
    return BuildAttributesArchive_BuildAttributesRotationDirection_Name(enum_t_value);
  }
  static inline bool BuildAttributesRotationDirection_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BuildAttributesRotationDirection* value) {
    return BuildAttributesArchive_BuildAttributesRotationDirection_Parse(name, value);
  }

  typedef BuildAttributesArchive_BuildAttributesCurveStyle BuildAttributesCurveStyle;
  static constexpr BuildAttributesCurveStyle kStraight =
    BuildAttributesArchive_BuildAttributesCurveStyle_kStraight;
  static constexpr BuildAttributesCurveStyle kCurved =
    BuildAttributesArchive_BuildAttributesCurveStyle_kCurved;
  static inline bool BuildAttributesCurveStyle_IsValid(int value) {
    return BuildAttributesArchive_BuildAttributesCurveStyle_IsValid(value);
  }
  static constexpr BuildAttributesCurveStyle BuildAttributesCurveStyle_MIN =
    BuildAttributesArchive_BuildAttributesCurveStyle_BuildAttributesCurveStyle_MIN;
  static constexpr BuildAttributesCurveStyle BuildAttributesCurveStyle_MAX =
    BuildAttributesArchive_BuildAttributesCurveStyle_BuildAttributesCurveStyle_MAX;
  static constexpr int BuildAttributesCurveStyle_ARRAYSIZE =
    BuildAttributesArchive_BuildAttributesCurveStyle_BuildAttributesCurveStyle_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BuildAttributesCurveStyle_descriptor() {
    return BuildAttributesArchive_BuildAttributesCurveStyle_descriptor();
  }
  template<typename T>
  static inline const std::string& BuildAttributesCurveStyle_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BuildAttributesCurveStyle>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BuildAttributesCurveStyle_Name.");
    return BuildAttributesArchive_BuildAttributesCurveStyle_Name(enum_t_value);
  }
  static inline bool BuildAttributesCurveStyle_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BuildAttributesCurveStyle* value) {
    return BuildAttributesArchive_BuildAttributesCurveStyle_Parse(name, value);
  }

  typedef BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesTextDelivery;
  static constexpr BuildAttributesTextDelivery kTextDeliveryUndefined =
    BuildAttributesArchive_BuildAttributesTextDelivery_kTextDeliveryUndefined;
  static constexpr BuildAttributesTextDelivery kTextDeliveryByObject =
    BuildAttributesArchive_BuildAttributesTextDelivery_kTextDeliveryByObject;
  static constexpr BuildAttributesTextDelivery kTextDeliveryByWord =
    BuildAttributesArchive_BuildAttributesTextDelivery_kTextDeliveryByWord;
  static constexpr BuildAttributesTextDelivery kTextDeliveryByCharacter =
    BuildAttributesArchive_BuildAttributesTextDelivery_kTextDeliveryByCharacter;
  static constexpr BuildAttributesTextDelivery kTextDeliveryByLine =
    BuildAttributesArchive_BuildAttributesTextDelivery_kTextDeliveryByLine;
  static inline bool BuildAttributesTextDelivery_IsValid(int value) {
    return BuildAttributesArchive_BuildAttributesTextDelivery_IsValid(value);
  }
  static constexpr BuildAttributesTextDelivery BuildAttributesTextDelivery_MIN =
    BuildAttributesArchive_BuildAttributesTextDelivery_BuildAttributesTextDelivery_MIN;
  static constexpr BuildAttributesTextDelivery BuildAttributesTextDelivery_MAX =
    BuildAttributesArchive_BuildAttributesTextDelivery_BuildAttributesTextDelivery_MAX;
  static constexpr int BuildAttributesTextDelivery_ARRAYSIZE =
    BuildAttributesArchive_BuildAttributesTextDelivery_BuildAttributesTextDelivery_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BuildAttributesTextDelivery_descriptor() {
    return BuildAttributesArchive_BuildAttributesTextDelivery_descriptor();
  }
  template<typename T>
  static inline const std::string& BuildAttributesTextDelivery_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BuildAttributesTextDelivery>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BuildAttributesTextDelivery_Name.");
    return BuildAttributesArchive_BuildAttributesTextDelivery_Name(enum_t_value);
  }
  static inline bool BuildAttributesTextDelivery_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BuildAttributesTextDelivery* value) {
    return BuildAttributesArchive_BuildAttributesTextDelivery_Parse(name, value);
  }

  typedef BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesDeliveryOption;
  static constexpr BuildAttributesDeliveryOption kDeliveryOptionUndefined =
    BuildAttributesArchive_BuildAttributesDeliveryOption_kDeliveryOptionUndefined;
  static constexpr BuildAttributesDeliveryOption kDeliveryOptionForward =
    BuildAttributesArchive_BuildAttributesDeliveryOption_kDeliveryOptionForward;
  static constexpr BuildAttributesDeliveryOption kDeliveryOptionBackward =
    BuildAttributesArchive_BuildAttributesDeliveryOption_kDeliveryOptionBackward;
  static constexpr BuildAttributesDeliveryOption kDeliveryOptionFromCenter =
    BuildAttributesArchive_BuildAttributesDeliveryOption_kDeliveryOptionFromCenter;
  static constexpr BuildAttributesDeliveryOption kDeliveryOptionFromEdges =
    BuildAttributesArchive_BuildAttributesDeliveryOption_kDeliveryOptionFromEdges;
  static constexpr BuildAttributesDeliveryOption kDeliveryOptionRandom =
    BuildAttributesArchive_BuildAttributesDeliveryOption_kDeliveryOptionRandom;
  static inline bool BuildAttributesDeliveryOption_IsValid(int value) {
    return BuildAttributesArchive_BuildAttributesDeliveryOption_IsValid(value);
  }
  static constexpr BuildAttributesDeliveryOption BuildAttributesDeliveryOption_MIN =
    BuildAttributesArchive_BuildAttributesDeliveryOption_BuildAttributesDeliveryOption_MIN;
  static constexpr BuildAttributesDeliveryOption BuildAttributesDeliveryOption_MAX =
    BuildAttributesArchive_BuildAttributesDeliveryOption_BuildAttributesDeliveryOption_MAX;
  static constexpr int BuildAttributesDeliveryOption_ARRAYSIZE =
    BuildAttributesArchive_BuildAttributesDeliveryOption_BuildAttributesDeliveryOption_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BuildAttributesDeliveryOption_descriptor() {
    return BuildAttributesArchive_BuildAttributesDeliveryOption_descriptor();
  }
  template<typename T>
  static inline const std::string& BuildAttributesDeliveryOption_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BuildAttributesDeliveryOption>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BuildAttributesDeliveryOption_Name.");
    return BuildAttributesArchive_BuildAttributesDeliveryOption_Name(enum_t_value);
  }
  static inline bool BuildAttributesDeliveryOption_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BuildAttributesDeliveryOption* value) {
    return BuildAttributesArchive_BuildAttributesDeliveryOption_Parse(name, value);
  }

  typedef BuildAttributesArchive_ActionBuildAttributesJiggleIntensity ActionBuildAttributesJiggleIntensity;
  static constexpr ActionBuildAttributesJiggleIntensity kJiggleIntensitySmall =
    BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_kJiggleIntensitySmall;
  static constexpr ActionBuildAttributesJiggleIntensity kJiggleIntensityMedium =
    BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_kJiggleIntensityMedium;
  static constexpr ActionBuildAttributesJiggleIntensity kJiggleIntensityLarge =
    BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_kJiggleIntensityLarge;
  static inline bool ActionBuildAttributesJiggleIntensity_IsValid(int value) {
    return BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_IsValid(value);
  }
  static constexpr ActionBuildAttributesJiggleIntensity ActionBuildAttributesJiggleIntensity_MIN =
    BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_ActionBuildAttributesJiggleIntensity_MIN;
  static constexpr ActionBuildAttributesJiggleIntensity ActionBuildAttributesJiggleIntensity_MAX =
    BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_ActionBuildAttributesJiggleIntensity_MAX;
  static constexpr int ActionBuildAttributesJiggleIntensity_ARRAYSIZE =
    BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_ActionBuildAttributesJiggleIntensity_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ActionBuildAttributesJiggleIntensity_descriptor() {
    return BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_descriptor();
  }
  template<typename T>
  static inline const std::string& ActionBuildAttributesJiggleIntensity_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ActionBuildAttributesJiggleIntensity>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ActionBuildAttributesJiggleIntensity_Name.");
    return BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_Name(enum_t_value);
  }
  static inline bool ActionBuildAttributesJiggleIntensity_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ActionBuildAttributesJiggleIntensity* value) {
    return BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseAnimationTypeFieldNumber = 1,
    kDatabaseEffectFieldNumber = 2,
    kMotionPathStringFieldNumber = 15,
    kDatabaseColorFieldNumber = 16,
    kAnimationAttributesFieldNumber = 18,
    kActionMotionPathSourceFieldNumber = 22,
    kDatabaseDirectionFieldNumber = 3,
    kEventTriggerFieldNumber = 4,
    kDatabaseDelayFieldNumber = 5,
    kDelayAutomaticAfterFieldNumber = 6,
    kDelayAutomaticWithFieldNumber = 7,
    kDatabaseDurationFieldNumber = 8,
    kActionRotationAngleFieldNumber = 9,
    kActionScaleSizeFieldNumber = 11,
    kActionColorAlphaFieldNumber = 12,
    kActionAccelerationFieldNumber = 13,
    kCurveStyleFieldNumber = 14,
    kChartRotation3DFieldNumber = 17,
    kCustomTextDeliveryFieldNumber = 20,
    kCustomDeliveryOptionFieldNumber = 21,
    kCustomBounceFieldNumber = 19,
    kCustomActionDecayFieldNumber = 23,
    kCustomActionRepeatCountFieldNumber = 24,
    kCustomActionScaleFieldNumber = 25,
    kCustomActionJiggleIntensityFieldNumber = 26,
    kStartOffsetFieldNumber = 27,
    kEndOffsetFieldNumber = 28,
    kActionRotationDirectionFieldNumber = 10,
  };
  // optional string database_animationType = 1;
  bool has_database_animationtype() const;
  private:
  bool _internal_has_database_animationtype() const;
  public:
  void clear_database_animationtype();
  const std::string& database_animationtype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_database_animationtype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_database_animationtype();
  PROTOBUF_NODISCARD std::string* release_database_animationtype();
  void set_allocated_database_animationtype(std::string* database_animationtype);
  private:
  const std::string& _internal_database_animationtype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_database_animationtype(const std::string& value);
  std::string* _internal_mutable_database_animationtype();
  public:

  // optional string database_effect = 2;
  bool has_database_effect() const;
  private:
  bool _internal_has_database_effect() const;
  public:
  void clear_database_effect();
  const std::string& database_effect() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_database_effect(ArgT0&& arg0, ArgT... args);
  std::string* mutable_database_effect();
  PROTOBUF_NODISCARD std::string* release_database_effect();
  void set_allocated_database_effect(std::string* database_effect);
  private:
  const std::string& _internal_database_effect() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_database_effect(const std::string& value);
  std::string* _internal_mutable_database_effect();
  public:

  // optional string motionPathString = 15 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_motionpathstring() const;
  private:
  bool _internal_has_motionpathstring() const;
  public:
  PROTOBUF_DEPRECATED void clear_motionpathstring();
  PROTOBUF_DEPRECATED const std::string& motionpathstring() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_motionpathstring(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_motionpathstring();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_motionpathstring();
  PROTOBUF_DEPRECATED void set_allocated_motionpathstring(std::string* motionpathstring);
  private:
  const std::string& _internal_motionpathstring() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_motionpathstring(const std::string& value);
  std::string* _internal_mutable_motionpathstring();
  public:

  // optional .TSP.Color database_color = 16;
  bool has_database_color() const;
  private:
  bool _internal_has_database_color() const;
  public:
  void clear_database_color();
  const ::TSP::Color& database_color() const;
  PROTOBUF_NODISCARD ::TSP::Color* release_database_color();
  ::TSP::Color* mutable_database_color();
  void set_allocated_database_color(::TSP::Color* database_color);
  private:
  const ::TSP::Color& _internal_database_color() const;
  ::TSP::Color* _internal_mutable_database_color();
  public:
  void unsafe_arena_set_allocated_database_color(
      ::TSP::Color* database_color);
  ::TSP::Color* unsafe_arena_release_database_color();

  // optional .KN.AnimationAttributesArchive animationAttributes = 18;
  bool has_animationattributes() const;
  private:
  bool _internal_has_animationattributes() const;
  public:
  void clear_animationattributes();
  const ::KN::AnimationAttributesArchive& animationattributes() const;
  PROTOBUF_NODISCARD ::KN::AnimationAttributesArchive* release_animationattributes();
  ::KN::AnimationAttributesArchive* mutable_animationattributes();
  void set_allocated_animationattributes(::KN::AnimationAttributesArchive* animationattributes);
  private:
  const ::KN::AnimationAttributesArchive& _internal_animationattributes() const;
  ::KN::AnimationAttributesArchive* _internal_mutable_animationattributes();
  public:
  void unsafe_arena_set_allocated_animationattributes(
      ::KN::AnimationAttributesArchive* animationattributes);
  ::KN::AnimationAttributesArchive* unsafe_arena_release_animationattributes();

  // optional .TSD.PathSourceArchive action_motionPathSource = 22;
  bool has_action_motionpathsource() const;
  private:
  bool _internal_has_action_motionpathsource() const;
  public:
  void clear_action_motionpathsource();
  const ::TSD::PathSourceArchive& action_motionpathsource() const;
  PROTOBUF_NODISCARD ::TSD::PathSourceArchive* release_action_motionpathsource();
  ::TSD::PathSourceArchive* mutable_action_motionpathsource();
  void set_allocated_action_motionpathsource(::TSD::PathSourceArchive* action_motionpathsource);
  private:
  const ::TSD::PathSourceArchive& _internal_action_motionpathsource() const;
  ::TSD::PathSourceArchive* _internal_mutable_action_motionpathsource();
  public:
  void unsafe_arena_set_allocated_action_motionpathsource(
      ::TSD::PathSourceArchive* action_motionpathsource);
  ::TSD::PathSourceArchive* unsafe_arena_release_action_motionpathsource();

  // optional uint32 database_direction = 3;
  bool has_database_direction() const;
  private:
  bool _internal_has_database_direction() const;
  public:
  void clear_database_direction();
  uint32_t database_direction() const;
  void set_database_direction(uint32_t value);
  private:
  uint32_t _internal_database_direction() const;
  void _internal_set_database_direction(uint32_t value);
  public:

  // optional uint32 eventTrigger = 4;
  bool has_eventtrigger() const;
  private:
  bool _internal_has_eventtrigger() const;
  public:
  void clear_eventtrigger();
  uint32_t eventtrigger() const;
  void set_eventtrigger(uint32_t value);
  private:
  uint32_t _internal_eventtrigger() const;
  void _internal_set_eventtrigger(uint32_t value);
  public:

  // optional double database_delay = 5;
  bool has_database_delay() const;
  private:
  bool _internal_has_database_delay() const;
  public:
  void clear_database_delay();
  double database_delay() const;
  void set_database_delay(double value);
  private:
  double _internal_database_delay() const;
  void _internal_set_database_delay(double value);
  public:

  // optional double delayAutomaticAfter = 6;
  bool has_delayautomaticafter() const;
  private:
  bool _internal_has_delayautomaticafter() const;
  public:
  void clear_delayautomaticafter();
  double delayautomaticafter() const;
  void set_delayautomaticafter(double value);
  private:
  double _internal_delayautomaticafter() const;
  void _internal_set_delayautomaticafter(double value);
  public:

  // optional double delayAutomaticWith = 7;
  bool has_delayautomaticwith() const;
  private:
  bool _internal_has_delayautomaticwith() const;
  public:
  void clear_delayautomaticwith();
  double delayautomaticwith() const;
  void set_delayautomaticwith(double value);
  private:
  double _internal_delayautomaticwith() const;
  void _internal_set_delayautomaticwith(double value);
  public:

  // optional double database_duration = 8;
  bool has_database_duration() const;
  private:
  bool _internal_has_database_duration() const;
  public:
  void clear_database_duration();
  double database_duration() const;
  void set_database_duration(double value);
  private:
  double _internal_database_duration() const;
  void _internal_set_database_duration(double value);
  public:

  // optional double action_rotationAngle = 9;
  bool has_action_rotationangle() const;
  private:
  bool _internal_has_action_rotationangle() const;
  public:
  void clear_action_rotationangle();
  double action_rotationangle() const;
  void set_action_rotationangle(double value);
  private:
  double _internal_action_rotationangle() const;
  void _internal_set_action_rotationangle(double value);
  public:

  // optional double action_scaleSize = 11;
  bool has_action_scalesize() const;
  private:
  bool _internal_has_action_scalesize() const;
  public:
  void clear_action_scalesize();
  double action_scalesize() const;
  void set_action_scalesize(double value);
  private:
  double _internal_action_scalesize() const;
  void _internal_set_action_scalesize(double value);
  public:

  // optional double action_colorAlpha = 12;
  bool has_action_coloralpha() const;
  private:
  bool _internal_has_action_coloralpha() const;
  public:
  void clear_action_coloralpha();
  double action_coloralpha() const;
  void set_action_coloralpha(double value);
  private:
  double _internal_action_coloralpha() const;
  void _internal_set_action_coloralpha(double value);
  public:

  // optional .KN.BuildAttributesArchive.BuildAttributesAcceleration action_acceleration = 13;
  bool has_action_acceleration() const;
  private:
  bool _internal_has_action_acceleration() const;
  public:
  void clear_action_acceleration();
  ::KN::BuildAttributesArchive_BuildAttributesAcceleration action_acceleration() const;
  void set_action_acceleration(::KN::BuildAttributesArchive_BuildAttributesAcceleration value);
  private:
  ::KN::BuildAttributesArchive_BuildAttributesAcceleration _internal_action_acceleration() const;
  void _internal_set_action_acceleration(::KN::BuildAttributesArchive_BuildAttributesAcceleration value);
  public:

  // optional .KN.BuildAttributesArchive.BuildAttributesCurveStyle curveStyle = 14;
  bool has_curvestyle() const;
  private:
  bool _internal_has_curvestyle() const;
  public:
  void clear_curvestyle();
  ::KN::BuildAttributesArchive_BuildAttributesCurveStyle curvestyle() const;
  void set_curvestyle(::KN::BuildAttributesArchive_BuildAttributesCurveStyle value);
  private:
  ::KN::BuildAttributesArchive_BuildAttributesCurveStyle _internal_curvestyle() const;
  void _internal_set_curvestyle(::KN::BuildAttributesArchive_BuildAttributesCurveStyle value);
  public:

  // optional double ChartRotation3D = 17;
  bool has_chartrotation3d() const;
  private:
  bool _internal_has_chartrotation3d() const;
  public:
  void clear_chartrotation3d();
  double chartrotation3d() const;
  void set_chartrotation3d(double value);
  private:
  double _internal_chartrotation3d() const;
  void _internal_set_chartrotation3d(double value);
  public:

  // optional .KN.BuildAttributesArchive.BuildAttributesTextDelivery custom_textDelivery = 20;
  bool has_custom_textdelivery() const;
  private:
  bool _internal_has_custom_textdelivery() const;
  public:
  void clear_custom_textdelivery();
  ::KN::BuildAttributesArchive_BuildAttributesTextDelivery custom_textdelivery() const;
  void set_custom_textdelivery(::KN::BuildAttributesArchive_BuildAttributesTextDelivery value);
  private:
  ::KN::BuildAttributesArchive_BuildAttributesTextDelivery _internal_custom_textdelivery() const;
  void _internal_set_custom_textdelivery(::KN::BuildAttributesArchive_BuildAttributesTextDelivery value);
  public:

  // optional .KN.BuildAttributesArchive.BuildAttributesDeliveryOption custom_deliveryOption = 21;
  bool has_custom_deliveryoption() const;
  private:
  bool _internal_has_custom_deliveryoption() const;
  public:
  void clear_custom_deliveryoption();
  ::KN::BuildAttributesArchive_BuildAttributesDeliveryOption custom_deliveryoption() const;
  void set_custom_deliveryoption(::KN::BuildAttributesArchive_BuildAttributesDeliveryOption value);
  private:
  ::KN::BuildAttributesArchive_BuildAttributesDeliveryOption _internal_custom_deliveryoption() const;
  void _internal_set_custom_deliveryoption(::KN::BuildAttributesArchive_BuildAttributesDeliveryOption value);
  public:

  // optional bool custom_bounce = 19;
  bool has_custom_bounce() const;
  private:
  bool _internal_has_custom_bounce() const;
  public:
  void clear_custom_bounce();
  bool custom_bounce() const;
  void set_custom_bounce(bool value);
  private:
  bool _internal_custom_bounce() const;
  void _internal_set_custom_bounce(bool value);
  public:

  // optional bool custom_action_decay = 23;
  bool has_custom_action_decay() const;
  private:
  bool _internal_has_custom_action_decay() const;
  public:
  void clear_custom_action_decay();
  bool custom_action_decay() const;
  void set_custom_action_decay(bool value);
  private:
  bool _internal_custom_action_decay() const;
  void _internal_set_custom_action_decay(bool value);
  public:

  // optional uint32 custom_action_repeatCount = 24;
  bool has_custom_action_repeatcount() const;
  private:
  bool _internal_has_custom_action_repeatcount() const;
  public:
  void clear_custom_action_repeatcount();
  uint32_t custom_action_repeatcount() const;
  void set_custom_action_repeatcount(uint32_t value);
  private:
  uint32_t _internal_custom_action_repeatcount() const;
  void _internal_set_custom_action_repeatcount(uint32_t value);
  public:

  // optional double custom_action_scale = 25;
  bool has_custom_action_scale() const;
  private:
  bool _internal_has_custom_action_scale() const;
  public:
  void clear_custom_action_scale();
  double custom_action_scale() const;
  void set_custom_action_scale(double value);
  private:
  double _internal_custom_action_scale() const;
  void _internal_set_custom_action_scale(double value);
  public:

  // optional .KN.BuildAttributesArchive.ActionBuildAttributesJiggleIntensity custom_action_jiggleIntensity = 26;
  bool has_custom_action_jiggleintensity() const;
  private:
  bool _internal_has_custom_action_jiggleintensity() const;
  public:
  void clear_custom_action_jiggleintensity();
  ::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity custom_action_jiggleintensity() const;
  void set_custom_action_jiggleintensity(::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity value);
  private:
  ::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity _internal_custom_action_jiggleintensity() const;
  void _internal_set_custom_action_jiggleintensity(::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity value);
  public:

  // optional uint32 startOffset = 27;
  bool has_startoffset() const;
  private:
  bool _internal_has_startoffset() const;
  public:
  void clear_startoffset();
  uint32_t startoffset() const;
  void set_startoffset(uint32_t value);
  private:
  uint32_t _internal_startoffset() const;
  void _internal_set_startoffset(uint32_t value);
  public:

  // optional uint32 endOffset = 28;
  bool has_endoffset() const;
  private:
  bool _internal_has_endoffset() const;
  public:
  void clear_endoffset();
  uint32_t endoffset() const;
  void set_endoffset(uint32_t value);
  private:
  uint32_t _internal_endoffset() const;
  void _internal_set_endoffset(uint32_t value);
  public:

  // optional .KN.BuildAttributesArchive.BuildAttributesRotationDirection action_rotationDirection = 10;
  bool has_action_rotationdirection() const;
  private:
  bool _internal_has_action_rotationdirection() const;
  public:
  void clear_action_rotationdirection();
  ::KN::BuildAttributesArchive_BuildAttributesRotationDirection action_rotationdirection() const;
  void set_action_rotationdirection(::KN::BuildAttributesArchive_BuildAttributesRotationDirection value);
  private:
  ::KN::BuildAttributesArchive_BuildAttributesRotationDirection _internal_action_rotationdirection() const;
  void _internal_set_action_rotationdirection(::KN::BuildAttributesArchive_BuildAttributesRotationDirection value);
  public:

  // @@protoc_insertion_point(class_scope:KN.BuildAttributesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_animationtype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_effect_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr motionpathstring_;
    ::TSP::Color* database_color_;
    ::KN::AnimationAttributesArchive* animationattributes_;
    ::TSD::PathSourceArchive* action_motionpathsource_;
    uint32_t database_direction_;
    uint32_t eventtrigger_;
    double database_delay_;
    double delayautomaticafter_;
    double delayautomaticwith_;
    double database_duration_;
    double action_rotationangle_;
    double action_scalesize_;
    double action_coloralpha_;
    int action_acceleration_;
    int curvestyle_;
    double chartrotation3d_;
    int custom_textdelivery_;
    int custom_deliveryoption_;
    bool custom_bounce_;
    bool custom_action_decay_;
    uint32_t custom_action_repeatcount_;
    double custom_action_scale_;
    int custom_action_jiggleintensity_;
    uint32_t startoffset_;
    uint32_t endoffset_;
    int action_rotationdirection_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class BuildArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.BuildArchive) */ {
 public:
  inline BuildArchive() : BuildArchive(nullptr) {}
  ~BuildArchive() override;
  explicit PROTOBUF_CONSTEXPR BuildArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuildArchive(const BuildArchive& from);
  BuildArchive(BuildArchive&& from) noexcept
    : BuildArchive() {
    *this = ::std::move(from);
  }

  inline BuildArchive& operator=(const BuildArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildArchive& operator=(BuildArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BuildArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuildArchive* internal_default_instance() {
    return reinterpret_cast<const BuildArchive*>(
               &_BuildArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BuildArchive& a, BuildArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuildArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BuildArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BuildArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BuildArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BuildArchive& from) {
    BuildArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.BuildArchive";
  }
  protected:
  explicit BuildArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeliveryFieldNumber = 2,
    kDrawableFieldNumber = 1,
    kAttributesFieldNumber = 4,
    kDurationFieldNumber = 3,
  };
  // required string delivery = 2;
  bool has_delivery() const;
  private:
  bool _internal_has_delivery() const;
  public:
  void clear_delivery();
  const std::string& delivery() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_delivery(ArgT0&& arg0, ArgT... args);
  std::string* mutable_delivery();
  PROTOBUF_NODISCARD std::string* release_delivery();
  void set_allocated_delivery(std::string* delivery);
  private:
  const std::string& _internal_delivery() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delivery(const std::string& value);
  std::string* _internal_mutable_delivery();
  public:

  // required .TSP.Reference drawable = 1;
  bool has_drawable() const;
  private:
  bool _internal_has_drawable() const;
  public:
  void clear_drawable();
  const ::TSP::Reference& drawable() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_drawable();
  ::TSP::Reference* mutable_drawable();
  void set_allocated_drawable(::TSP::Reference* drawable);
  private:
  const ::TSP::Reference& _internal_drawable() const;
  ::TSP::Reference* _internal_mutable_drawable();
  public:
  void unsafe_arena_set_allocated_drawable(
      ::TSP::Reference* drawable);
  ::TSP::Reference* unsafe_arena_release_drawable();

  // required .KN.BuildAttributesArchive attributes = 4;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::KN::BuildAttributesArchive& attributes() const;
  PROTOBUF_NODISCARD ::KN::BuildAttributesArchive* release_attributes();
  ::KN::BuildAttributesArchive* mutable_attributes();
  void set_allocated_attributes(::KN::BuildAttributesArchive* attributes);
  private:
  const ::KN::BuildAttributesArchive& _internal_attributes() const;
  ::KN::BuildAttributesArchive* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::KN::BuildAttributesArchive* attributes);
  ::KN::BuildAttributesArchive* unsafe_arena_release_attributes();

  // required double duration = 3;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  double duration() const;
  void set_duration(double value);
  private:
  double _internal_duration() const;
  void _internal_set_duration(double value);
  public:

  // @@protoc_insertion_point(class_scope:KN.BuildArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delivery_;
    ::TSP::Reference* drawable_;
    ::KN::BuildAttributesArchive* attributes_;
    double duration_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class PlaceholderArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.PlaceholderArchive) */ {
 public:
  inline PlaceholderArchive() : PlaceholderArchive(nullptr) {}
  ~PlaceholderArchive() override;
  explicit PROTOBUF_CONSTEXPR PlaceholderArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlaceholderArchive(const PlaceholderArchive& from);
  PlaceholderArchive(PlaceholderArchive&& from) noexcept
    : PlaceholderArchive() {
    *this = ::std::move(from);
  }

  inline PlaceholderArchive& operator=(const PlaceholderArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceholderArchive& operator=(PlaceholderArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlaceholderArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaceholderArchive* internal_default_instance() {
    return reinterpret_cast<const PlaceholderArchive*>(
               &_PlaceholderArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PlaceholderArchive& a, PlaceholderArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceholderArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaceholderArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlaceholderArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlaceholderArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlaceholderArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlaceholderArchive& from) {
    PlaceholderArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceholderArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.PlaceholderArchive";
  }
  protected:
  explicit PlaceholderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PlaceholderArchive_Kind Kind;
  static constexpr Kind kKindPlaceholder =
    PlaceholderArchive_Kind_kKindPlaceholder;
  static constexpr Kind kKindSlideNumberPlaceholder =
    PlaceholderArchive_Kind_kKindSlideNumberPlaceholder;
  static constexpr Kind kKindTitlePlaceholder =
    PlaceholderArchive_Kind_kKindTitlePlaceholder;
  static constexpr Kind kKindBodyPlaceholder =
    PlaceholderArchive_Kind_kKindBodyPlaceholder;
  static constexpr Kind kKindObjectPlaceholder =
    PlaceholderArchive_Kind_kKindObjectPlaceholder;
  static inline bool Kind_IsValid(int value) {
    return PlaceholderArchive_Kind_IsValid(value);
  }
  static constexpr Kind Kind_MIN =
    PlaceholderArchive_Kind_Kind_MIN;
  static constexpr Kind Kind_MAX =
    PlaceholderArchive_Kind_Kind_MAX;
  static constexpr int Kind_ARRAYSIZE =
    PlaceholderArchive_Kind_Kind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Kind_descriptor() {
    return PlaceholderArchive_Kind_descriptor();
  }
  template<typename T>
  static inline const std::string& Kind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Kind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Kind_Name.");
    return PlaceholderArchive_Kind_Name(enum_t_value);
  }
  static inline bool Kind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Kind* value) {
    return PlaceholderArchive_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kKindFieldNumber = 2,
  };
  // required .TSWP.ShapeInfoArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::ShapeInfoArchive& super() const;
  PROTOBUF_NODISCARD ::TSWP::ShapeInfoArchive* release_super();
  ::TSWP::ShapeInfoArchive* mutable_super();
  void set_allocated_super(::TSWP::ShapeInfoArchive* super);
  private:
  const ::TSWP::ShapeInfoArchive& _internal_super() const;
  ::TSWP::ShapeInfoArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::ShapeInfoArchive* super);
  ::TSWP::ShapeInfoArchive* unsafe_arena_release_super();

  // optional .KN.PlaceholderArchive.Kind kind = 2 [default = kKindPlaceholder];
  bool has_kind() const;
  private:
  bool _internal_has_kind() const;
  public:
  void clear_kind();
  ::KN::PlaceholderArchive_Kind kind() const;
  void set_kind(::KN::PlaceholderArchive_Kind value);
  private:
  ::KN::PlaceholderArchive_Kind _internal_kind() const;
  void _internal_set_kind(::KN::PlaceholderArchive_Kind value);
  public:

  // @@protoc_insertion_point(class_scope:KN.PlaceholderArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSWP::ShapeInfoArchive* super_;
    int kind_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class NoteArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.NoteArchive) */ {
 public:
  inline NoteArchive() : NoteArchive(nullptr) {}
  ~NoteArchive() override;
  explicit PROTOBUF_CONSTEXPR NoteArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NoteArchive(const NoteArchive& from);
  NoteArchive(NoteArchive&& from) noexcept
    : NoteArchive() {
    *this = ::std::move(from);
  }

  inline NoteArchive& operator=(const NoteArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoteArchive& operator=(NoteArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NoteArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const NoteArchive* internal_default_instance() {
    return reinterpret_cast<const NoteArchive*>(
               &_NoteArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(NoteArchive& a, NoteArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(NoteArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NoteArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NoteArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NoteArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NoteArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NoteArchive& from) {
    NoteArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoteArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.NoteArchive";
  }
  protected:
  explicit NoteArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainedStorageFieldNumber = 1,
  };
  // required .TSP.Reference containedStorage = 1;
  bool has_containedstorage() const;
  private:
  bool _internal_has_containedstorage() const;
  public:
  void clear_containedstorage();
  const ::TSP::Reference& containedstorage() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_containedstorage();
  ::TSP::Reference* mutable_containedstorage();
  void set_allocated_containedstorage(::TSP::Reference* containedstorage);
  private:
  const ::TSP::Reference& _internal_containedstorage() const;
  ::TSP::Reference* _internal_mutable_containedstorage();
  public:
  void unsafe_arena_set_allocated_containedstorage(
      ::TSP::Reference* containedstorage);
  ::TSP::Reference* unsafe_arena_release_containedstorage();

  // @@protoc_insertion_point(class_scope:KN.NoteArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* containedstorage_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class ClassicStylesheetRecordArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.ClassicStylesheetRecordArchive) */ {
 public:
  inline ClassicStylesheetRecordArchive() : ClassicStylesheetRecordArchive(nullptr) {}
  ~ClassicStylesheetRecordArchive() override;
  explicit PROTOBUF_CONSTEXPR ClassicStylesheetRecordArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClassicStylesheetRecordArchive(const ClassicStylesheetRecordArchive& from);
  ClassicStylesheetRecordArchive(ClassicStylesheetRecordArchive&& from) noexcept
    : ClassicStylesheetRecordArchive() {
    *this = ::std::move(from);
  }

  inline ClassicStylesheetRecordArchive& operator=(const ClassicStylesheetRecordArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassicStylesheetRecordArchive& operator=(ClassicStylesheetRecordArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClassicStylesheetRecordArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClassicStylesheetRecordArchive* internal_default_instance() {
    return reinterpret_cast<const ClassicStylesheetRecordArchive*>(
               &_ClassicStylesheetRecordArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ClassicStylesheetRecordArchive& a, ClassicStylesheetRecordArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ClassicStylesheetRecordArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClassicStylesheetRecordArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClassicStylesheetRecordArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClassicStylesheetRecordArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClassicStylesheetRecordArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClassicStylesheetRecordArchive& from) {
    ClassicStylesheetRecordArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassicStylesheetRecordArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.ClassicStylesheetRecordArchive";
  }
  protected:
  explicit ClassicStylesheetRecordArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierToStyleMapFieldNumber = 1,
    kThemeFieldNumber = 2,
  };
  // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 1;
  int identifier_to_style_map_size() const;
  private:
  int _internal_identifier_to_style_map_size() const;
  public:
  void clear_identifier_to_style_map();
  ::TSS::StylesheetArchive_IdentifiedStyleEntry* mutable_identifier_to_style_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_IdentifiedStyleEntry >*
      mutable_identifier_to_style_map();
  private:
  const ::TSS::StylesheetArchive_IdentifiedStyleEntry& _internal_identifier_to_style_map(int index) const;
  ::TSS::StylesheetArchive_IdentifiedStyleEntry* _internal_add_identifier_to_style_map();
  public:
  const ::TSS::StylesheetArchive_IdentifiedStyleEntry& identifier_to_style_map(int index) const;
  ::TSS::StylesheetArchive_IdentifiedStyleEntry* add_identifier_to_style_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_IdentifiedStyleEntry >&
      identifier_to_style_map() const;

  // optional .TSP.Reference theme = 2;
  bool has_theme() const;
  private:
  bool _internal_has_theme() const;
  public:
  void clear_theme();
  const ::TSP::Reference& theme() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_theme();
  ::TSP::Reference* mutable_theme();
  void set_allocated_theme(::TSP::Reference* theme);
  private:
  const ::TSP::Reference& _internal_theme() const;
  ::TSP::Reference* _internal_mutable_theme();
  public:
  void unsafe_arena_set_allocated_theme(
      ::TSP::Reference* theme);
  ::TSP::Reference* unsafe_arena_release_theme();

  // @@protoc_insertion_point(class_scope:KN.ClassicStylesheetRecordArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_IdentifiedStyleEntry > identifier_to_style_map_;
    ::TSP::Reference* theme_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class ClassicThemeRecordArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.ClassicThemeRecordArchive) */ {
 public:
  inline ClassicThemeRecordArchive() : ClassicThemeRecordArchive(nullptr) {}
  ~ClassicThemeRecordArchive() override;
  explicit PROTOBUF_CONSTEXPR ClassicThemeRecordArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClassicThemeRecordArchive(const ClassicThemeRecordArchive& from);
  ClassicThemeRecordArchive(ClassicThemeRecordArchive&& from) noexcept
    : ClassicThemeRecordArchive() {
    *this = ::std::move(from);
  }

  inline ClassicThemeRecordArchive& operator=(const ClassicThemeRecordArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassicThemeRecordArchive& operator=(ClassicThemeRecordArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClassicThemeRecordArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClassicThemeRecordArchive* internal_default_instance() {
    return reinterpret_cast<const ClassicThemeRecordArchive*>(
               &_ClassicThemeRecordArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ClassicThemeRecordArchive& a, ClassicThemeRecordArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ClassicThemeRecordArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClassicThemeRecordArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClassicThemeRecordArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClassicThemeRecordArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClassicThemeRecordArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClassicThemeRecordArchive& from) {
    ClassicThemeRecordArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassicThemeRecordArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.ClassicThemeRecordArchive";
  }
  protected:
  explicit ClassicThemeRecordArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMastersFieldNumber = 3,
    kUuidFieldNumber = 1,
    kStylesheetRecordFieldNumber = 2,
  };
  // repeated .TSP.Reference masters = 3;
  int masters_size() const;
  private:
  int _internal_masters_size() const;
  public:
  void clear_masters();
  ::TSP::Reference* mutable_masters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_masters();
  private:
  const ::TSP::Reference& _internal_masters(int index) const;
  ::TSP::Reference* _internal_add_masters();
  public:
  const ::TSP::Reference& masters(int index) const;
  ::TSP::Reference* add_masters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      masters() const;

  // optional string uuid = 1;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // optional .TSP.Reference stylesheetRecord = 2;
  bool has_stylesheetrecord() const;
  private:
  bool _internal_has_stylesheetrecord() const;
  public:
  void clear_stylesheetrecord();
  const ::TSP::Reference& stylesheetrecord() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_stylesheetrecord();
  ::TSP::Reference* mutable_stylesheetrecord();
  void set_allocated_stylesheetrecord(::TSP::Reference* stylesheetrecord);
  private:
  const ::TSP::Reference& _internal_stylesheetrecord() const;
  ::TSP::Reference* _internal_mutable_stylesheetrecord();
  public:
  void unsafe_arena_set_allocated_stylesheetrecord(
      ::TSP::Reference* stylesheetrecord);
  ::TSP::Reference* unsafe_arena_release_stylesheetrecord();

  // @@protoc_insertion_point(class_scope:KN.ClassicThemeRecordArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > masters_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::TSP::Reference* stylesheetrecord_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class SlideArchive_SageTagMapEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.SlideArchive.SageTagMapEntry) */ {
 public:
  inline SlideArchive_SageTagMapEntry() : SlideArchive_SageTagMapEntry(nullptr) {}
  ~SlideArchive_SageTagMapEntry() override;
  explicit PROTOBUF_CONSTEXPR SlideArchive_SageTagMapEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlideArchive_SageTagMapEntry(const SlideArchive_SageTagMapEntry& from);
  SlideArchive_SageTagMapEntry(SlideArchive_SageTagMapEntry&& from) noexcept
    : SlideArchive_SageTagMapEntry() {
    *this = ::std::move(from);
  }

  inline SlideArchive_SageTagMapEntry& operator=(const SlideArchive_SageTagMapEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlideArchive_SageTagMapEntry& operator=(SlideArchive_SageTagMapEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlideArchive_SageTagMapEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlideArchive_SageTagMapEntry* internal_default_instance() {
    return reinterpret_cast<const SlideArchive_SageTagMapEntry*>(
               &_SlideArchive_SageTagMapEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SlideArchive_SageTagMapEntry& a, SlideArchive_SageTagMapEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(SlideArchive_SageTagMapEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlideArchive_SageTagMapEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SlideArchive_SageTagMapEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SlideArchive_SageTagMapEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlideArchive_SageTagMapEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SlideArchive_SageTagMapEntry& from) {
    SlideArchive_SageTagMapEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlideArchive_SageTagMapEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.SlideArchive.SageTagMapEntry";
  }
  protected:
  explicit SlideArchive_SageTagMapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kInfoFieldNumber = 2,
  };
  // required string tag = 1;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // required .TSP.Reference info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::TSP::Reference& info() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_info();
  ::TSP::Reference* mutable_info();
  void set_allocated_info(::TSP::Reference* info);
  private:
  const ::TSP::Reference& _internal_info() const;
  ::TSP::Reference* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::TSP::Reference* info);
  ::TSP::Reference* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:KN.SlideArchive.SageTagMapEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
    ::TSP::Reference* info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class SlideArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.SlideArchive) */ {
 public:
  inline SlideArchive() : SlideArchive(nullptr) {}
  ~SlideArchive() override;
  explicit PROTOBUF_CONSTEXPR SlideArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlideArchive(const SlideArchive& from);
  SlideArchive(SlideArchive&& from) noexcept
    : SlideArchive() {
    *this = ::std::move(from);
  }

  inline SlideArchive& operator=(const SlideArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlideArchive& operator=(SlideArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlideArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlideArchive* internal_default_instance() {
    return reinterpret_cast<const SlideArchive*>(
               &_SlideArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SlideArchive& a, SlideArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SlideArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlideArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SlideArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SlideArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlideArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SlideArchive& from) {
    SlideArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlideArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.SlideArchive";
  }
  protected:
  explicit SlideArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SlideArchive_SageTagMapEntry SageTagMapEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kBuildsFieldNumber = 2,
    kBuildChunksFieldNumber = 3,
    kDrawablesFieldNumber = 7,
    kStaticGuidesFieldNumber = 18,
    kSageTagToInfoMapFieldNumber = 28,
    kBodyParagraphStylesFieldNumber = 31,
    kBodyListStylesFieldNumber = 35,
    kNameFieldNumber = 10,
    kThumbnailTextForTitlePlaceholderFieldNumber = 37,
    kThumbnailTextForBodyPlaceholderFieldNumber = 38,
    kStyleFieldNumber = 1,
    kTransitionFieldNumber = 4,
    kTitlePlaceholderFieldNumber = 5,
    kBodyPlaceholderFieldNumber = 6,
    kTitlePlaceholderGeometryFieldNumber = 11,
    kBodyPlaceholderGeometryFieldNumber = 14,
    kMasterFieldNumber = 17,
    kSlideNumberPlaceholderFieldNumber = 20,
    kSlideNumberPlaceholderGeometryFieldNumber = 21,
    kTitleLayoutPropertiesFieldNumber = 24,
    kBodyLayoutPropertiesFieldNumber = 25,
    kSlideNumberLayoutPropertiesFieldNumber = 26,
    kNoteFieldNumber = 27,
    kClassicStylesheetRecordFieldNumber = 29,
    kObjectPlaceholderFieldNumber = 30,
    kUserDefinedGuideStorageFieldNumber = 36,
    kInfoUsingObjectPlaceholderGeometryFieldNumber = 39,
    kTitlePlaceholderShapeStyleIndexFieldNumber = 12,
    kTitlePlaceholderTextStyleIndexFieldNumber = 13,
    kBodyPlaceholderShapeStyleIndexFieldNumber = 15,
    kBodyPlaceholderTextStyleIndexFieldNumber = 16,
    kSlideNumberPlaceholderShapeStyleIndexFieldNumber = 22,
    kSlideNumberPlaceholderTextStyleIndexFieldNumber = 23,
    kInDocumentFieldNumber = 19,
    kInfoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometryFieldNumber = 40,
    kDeprecatedObjectPlaceholderVisibleForExportFieldNumber = 34,
  };
  // repeated .TSP.Reference builds = 2;
  int builds_size() const;
  private:
  int _internal_builds_size() const;
  public:
  void clear_builds();
  ::TSP::Reference* mutable_builds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_builds();
  private:
  const ::TSP::Reference& _internal_builds(int index) const;
  ::TSP::Reference* _internal_add_builds();
  public:
  const ::TSP::Reference& builds(int index) const;
  ::TSP::Reference* add_builds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      builds() const;

  // repeated .KN.BuildChunkArchive buildChunks = 3;
  int buildchunks_size() const;
  private:
  int _internal_buildchunks_size() const;
  public:
  void clear_buildchunks();
  ::KN::BuildChunkArchive* mutable_buildchunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkArchive >*
      mutable_buildchunks();
  private:
  const ::KN::BuildChunkArchive& _internal_buildchunks(int index) const;
  ::KN::BuildChunkArchive* _internal_add_buildchunks();
  public:
  const ::KN::BuildChunkArchive& buildchunks(int index) const;
  ::KN::BuildChunkArchive* add_buildchunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkArchive >&
      buildchunks() const;

  // repeated .TSP.Reference drawables = 7;
  int drawables_size() const;
  private:
  int _internal_drawables_size() const;
  public:
  void clear_drawables();
  ::TSP::Reference* mutable_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_drawables();
  private:
  const ::TSP::Reference& _internal_drawables(int index) const;
  ::TSP::Reference* _internal_add_drawables();
  public:
  const ::TSP::Reference& drawables(int index) const;
  ::TSP::Reference* add_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      drawables() const;

  // repeated .TSD.GuideArchive staticGuides = 18;
  int staticguides_size() const;
  private:
  int _internal_staticguides_size() const;
  public:
  void clear_staticguides();
  ::TSD::GuideArchive* mutable_staticguides(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::GuideArchive >*
      mutable_staticguides();
  private:
  const ::TSD::GuideArchive& _internal_staticguides(int index) const;
  ::TSD::GuideArchive* _internal_add_staticguides();
  public:
  const ::TSD::GuideArchive& staticguides(int index) const;
  ::TSD::GuideArchive* add_staticguides();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::GuideArchive >&
      staticguides() const;

  // repeated .KN.SlideArchive.SageTagMapEntry sage_tag_to_info_map = 28;
  int sage_tag_to_info_map_size() const;
  private:
  int _internal_sage_tag_to_info_map_size() const;
  public:
  void clear_sage_tag_to_info_map();
  ::KN::SlideArchive_SageTagMapEntry* mutable_sage_tag_to_info_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::SlideArchive_SageTagMapEntry >*
      mutable_sage_tag_to_info_map();
  private:
  const ::KN::SlideArchive_SageTagMapEntry& _internal_sage_tag_to_info_map(int index) const;
  ::KN::SlideArchive_SageTagMapEntry* _internal_add_sage_tag_to_info_map();
  public:
  const ::KN::SlideArchive_SageTagMapEntry& sage_tag_to_info_map(int index) const;
  ::KN::SlideArchive_SageTagMapEntry* add_sage_tag_to_info_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::SlideArchive_SageTagMapEntry >&
      sage_tag_to_info_map() const;

  // repeated .TSP.Reference bodyParagraphStyles = 31;
  int bodyparagraphstyles_size() const;
  private:
  int _internal_bodyparagraphstyles_size() const;
  public:
  void clear_bodyparagraphstyles();
  ::TSP::Reference* mutable_bodyparagraphstyles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_bodyparagraphstyles();
  private:
  const ::TSP::Reference& _internal_bodyparagraphstyles(int index) const;
  ::TSP::Reference* _internal_add_bodyparagraphstyles();
  public:
  const ::TSP::Reference& bodyparagraphstyles(int index) const;
  ::TSP::Reference* add_bodyparagraphstyles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      bodyparagraphstyles() const;

  // repeated .TSP.Reference bodyListStyles = 35;
  int bodyliststyles_size() const;
  private:
  int _internal_bodyliststyles_size() const;
  public:
  void clear_bodyliststyles();
  ::TSP::Reference* mutable_bodyliststyles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_bodyliststyles();
  private:
  const ::TSP::Reference& _internal_bodyliststyles(int index) const;
  ::TSP::Reference* _internal_add_bodyliststyles();
  public:
  const ::TSP::Reference& bodyliststyles(int index) const;
  ::TSP::Reference* add_bodyliststyles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      bodyliststyles() const;

  // optional string name = 10;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string thumbnailTextForTitlePlaceholder = 37;
  bool has_thumbnailtextfortitleplaceholder() const;
  private:
  bool _internal_has_thumbnailtextfortitleplaceholder() const;
  public:
  void clear_thumbnailtextfortitleplaceholder();
  const std::string& thumbnailtextfortitleplaceholder() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_thumbnailtextfortitleplaceholder(ArgT0&& arg0, ArgT... args);
  std::string* mutable_thumbnailtextfortitleplaceholder();
  PROTOBUF_NODISCARD std::string* release_thumbnailtextfortitleplaceholder();
  void set_allocated_thumbnailtextfortitleplaceholder(std::string* thumbnailtextfortitleplaceholder);
  private:
  const std::string& _internal_thumbnailtextfortitleplaceholder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_thumbnailtextfortitleplaceholder(const std::string& value);
  std::string* _internal_mutable_thumbnailtextfortitleplaceholder();
  public:

  // optional string thumbnailTextForBodyPlaceholder = 38;
  bool has_thumbnailtextforbodyplaceholder() const;
  private:
  bool _internal_has_thumbnailtextforbodyplaceholder() const;
  public:
  void clear_thumbnailtextforbodyplaceholder();
  const std::string& thumbnailtextforbodyplaceholder() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_thumbnailtextforbodyplaceholder(ArgT0&& arg0, ArgT... args);
  std::string* mutable_thumbnailtextforbodyplaceholder();
  PROTOBUF_NODISCARD std::string* release_thumbnailtextforbodyplaceholder();
  void set_allocated_thumbnailtextforbodyplaceholder(std::string* thumbnailtextforbodyplaceholder);
  private:
  const std::string& _internal_thumbnailtextforbodyplaceholder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_thumbnailtextforbodyplaceholder(const std::string& value);
  std::string* _internal_mutable_thumbnailtextforbodyplaceholder();
  public:

  // required .TSP.Reference style = 1;
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  const ::TSP::Reference& style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_style();
  ::TSP::Reference* mutable_style();
  void set_allocated_style(::TSP::Reference* style);
  private:
  const ::TSP::Reference& _internal_style() const;
  ::TSP::Reference* _internal_mutable_style();
  public:
  void unsafe_arena_set_allocated_style(
      ::TSP::Reference* style);
  ::TSP::Reference* unsafe_arena_release_style();

  // required .KN.TransitionArchive transition = 4;
  bool has_transition() const;
  private:
  bool _internal_has_transition() const;
  public:
  void clear_transition();
  const ::KN::TransitionArchive& transition() const;
  PROTOBUF_NODISCARD ::KN::TransitionArchive* release_transition();
  ::KN::TransitionArchive* mutable_transition();
  void set_allocated_transition(::KN::TransitionArchive* transition);
  private:
  const ::KN::TransitionArchive& _internal_transition() const;
  ::KN::TransitionArchive* _internal_mutable_transition();
  public:
  void unsafe_arena_set_allocated_transition(
      ::KN::TransitionArchive* transition);
  ::KN::TransitionArchive* unsafe_arena_release_transition();

  // optional .TSP.Reference titlePlaceholder = 5;
  bool has_titleplaceholder() const;
  private:
  bool _internal_has_titleplaceholder() const;
  public:
  void clear_titleplaceholder();
  const ::TSP::Reference& titleplaceholder() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_titleplaceholder();
  ::TSP::Reference* mutable_titleplaceholder();
  void set_allocated_titleplaceholder(::TSP::Reference* titleplaceholder);
  private:
  const ::TSP::Reference& _internal_titleplaceholder() const;
  ::TSP::Reference* _internal_mutable_titleplaceholder();
  public:
  void unsafe_arena_set_allocated_titleplaceholder(
      ::TSP::Reference* titleplaceholder);
  ::TSP::Reference* unsafe_arena_release_titleplaceholder();

  // optional .TSP.Reference bodyPlaceholder = 6;
  bool has_bodyplaceholder() const;
  private:
  bool _internal_has_bodyplaceholder() const;
  public:
  void clear_bodyplaceholder();
  const ::TSP::Reference& bodyplaceholder() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_bodyplaceholder();
  ::TSP::Reference* mutable_bodyplaceholder();
  void set_allocated_bodyplaceholder(::TSP::Reference* bodyplaceholder);
  private:
  const ::TSP::Reference& _internal_bodyplaceholder() const;
  ::TSP::Reference* _internal_mutable_bodyplaceholder();
  public:
  void unsafe_arena_set_allocated_bodyplaceholder(
      ::TSP::Reference* bodyplaceholder);
  ::TSP::Reference* unsafe_arena_release_bodyplaceholder();

  // optional .TSD.GeometryArchive titlePlaceholderGeometry = 11;
  bool has_titleplaceholdergeometry() const;
  private:
  bool _internal_has_titleplaceholdergeometry() const;
  public:
  void clear_titleplaceholdergeometry();
  const ::TSD::GeometryArchive& titleplaceholdergeometry() const;
  PROTOBUF_NODISCARD ::TSD::GeometryArchive* release_titleplaceholdergeometry();
  ::TSD::GeometryArchive* mutable_titleplaceholdergeometry();
  void set_allocated_titleplaceholdergeometry(::TSD::GeometryArchive* titleplaceholdergeometry);
  private:
  const ::TSD::GeometryArchive& _internal_titleplaceholdergeometry() const;
  ::TSD::GeometryArchive* _internal_mutable_titleplaceholdergeometry();
  public:
  void unsafe_arena_set_allocated_titleplaceholdergeometry(
      ::TSD::GeometryArchive* titleplaceholdergeometry);
  ::TSD::GeometryArchive* unsafe_arena_release_titleplaceholdergeometry();

  // optional .TSD.GeometryArchive bodyPlaceholderGeometry = 14;
  bool has_bodyplaceholdergeometry() const;
  private:
  bool _internal_has_bodyplaceholdergeometry() const;
  public:
  void clear_bodyplaceholdergeometry();
  const ::TSD::GeometryArchive& bodyplaceholdergeometry() const;
  PROTOBUF_NODISCARD ::TSD::GeometryArchive* release_bodyplaceholdergeometry();
  ::TSD::GeometryArchive* mutable_bodyplaceholdergeometry();
  void set_allocated_bodyplaceholdergeometry(::TSD::GeometryArchive* bodyplaceholdergeometry);
  private:
  const ::TSD::GeometryArchive& _internal_bodyplaceholdergeometry() const;
  ::TSD::GeometryArchive* _internal_mutable_bodyplaceholdergeometry();
  public:
  void unsafe_arena_set_allocated_bodyplaceholdergeometry(
      ::TSD::GeometryArchive* bodyplaceholdergeometry);
  ::TSD::GeometryArchive* unsafe_arena_release_bodyplaceholdergeometry();

  // optional .TSP.Reference master = 17;
  bool has_master() const;
  private:
  bool _internal_has_master() const;
  public:
  void clear_master();
  const ::TSP::Reference& master() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_master();
  ::TSP::Reference* mutable_master();
  void set_allocated_master(::TSP::Reference* master);
  private:
  const ::TSP::Reference& _internal_master() const;
  ::TSP::Reference* _internal_mutable_master();
  public:
  void unsafe_arena_set_allocated_master(
      ::TSP::Reference* master);
  ::TSP::Reference* unsafe_arena_release_master();

  // optional .TSP.Reference slideNumberPlaceholder = 20;
  bool has_slidenumberplaceholder() const;
  private:
  bool _internal_has_slidenumberplaceholder() const;
  public:
  void clear_slidenumberplaceholder();
  const ::TSP::Reference& slidenumberplaceholder() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_slidenumberplaceholder();
  ::TSP::Reference* mutable_slidenumberplaceholder();
  void set_allocated_slidenumberplaceholder(::TSP::Reference* slidenumberplaceholder);
  private:
  const ::TSP::Reference& _internal_slidenumberplaceholder() const;
  ::TSP::Reference* _internal_mutable_slidenumberplaceholder();
  public:
  void unsafe_arena_set_allocated_slidenumberplaceholder(
      ::TSP::Reference* slidenumberplaceholder);
  ::TSP::Reference* unsafe_arena_release_slidenumberplaceholder();

  // optional .TSD.GeometryArchive slideNumberPlaceholderGeometry = 21;
  bool has_slidenumberplaceholdergeometry() const;
  private:
  bool _internal_has_slidenumberplaceholdergeometry() const;
  public:
  void clear_slidenumberplaceholdergeometry();
  const ::TSD::GeometryArchive& slidenumberplaceholdergeometry() const;
  PROTOBUF_NODISCARD ::TSD::GeometryArchive* release_slidenumberplaceholdergeometry();
  ::TSD::GeometryArchive* mutable_slidenumberplaceholdergeometry();
  void set_allocated_slidenumberplaceholdergeometry(::TSD::GeometryArchive* slidenumberplaceholdergeometry);
  private:
  const ::TSD::GeometryArchive& _internal_slidenumberplaceholdergeometry() const;
  ::TSD::GeometryArchive* _internal_mutable_slidenumberplaceholdergeometry();
  public:
  void unsafe_arena_set_allocated_slidenumberplaceholdergeometry(
      ::TSD::GeometryArchive* slidenumberplaceholdergeometry);
  ::TSD::GeometryArchive* unsafe_arena_release_slidenumberplaceholdergeometry();

  // optional .TSWP.ShapeStylePropertiesArchive titleLayoutProperties = 24;
  bool has_titlelayoutproperties() const;
  private:
  bool _internal_has_titlelayoutproperties() const;
  public:
  void clear_titlelayoutproperties();
  const ::TSWP::ShapeStylePropertiesArchive& titlelayoutproperties() const;
  PROTOBUF_NODISCARD ::TSWP::ShapeStylePropertiesArchive* release_titlelayoutproperties();
  ::TSWP::ShapeStylePropertiesArchive* mutable_titlelayoutproperties();
  void set_allocated_titlelayoutproperties(::TSWP::ShapeStylePropertiesArchive* titlelayoutproperties);
  private:
  const ::TSWP::ShapeStylePropertiesArchive& _internal_titlelayoutproperties() const;
  ::TSWP::ShapeStylePropertiesArchive* _internal_mutable_titlelayoutproperties();
  public:
  void unsafe_arena_set_allocated_titlelayoutproperties(
      ::TSWP::ShapeStylePropertiesArchive* titlelayoutproperties);
  ::TSWP::ShapeStylePropertiesArchive* unsafe_arena_release_titlelayoutproperties();

  // optional .TSWP.ShapeStylePropertiesArchive bodyLayoutProperties = 25;
  bool has_bodylayoutproperties() const;
  private:
  bool _internal_has_bodylayoutproperties() const;
  public:
  void clear_bodylayoutproperties();
  const ::TSWP::ShapeStylePropertiesArchive& bodylayoutproperties() const;
  PROTOBUF_NODISCARD ::TSWP::ShapeStylePropertiesArchive* release_bodylayoutproperties();
  ::TSWP::ShapeStylePropertiesArchive* mutable_bodylayoutproperties();
  void set_allocated_bodylayoutproperties(::TSWP::ShapeStylePropertiesArchive* bodylayoutproperties);
  private:
  const ::TSWP::ShapeStylePropertiesArchive& _internal_bodylayoutproperties() const;
  ::TSWP::ShapeStylePropertiesArchive* _internal_mutable_bodylayoutproperties();
  public:
  void unsafe_arena_set_allocated_bodylayoutproperties(
      ::TSWP::ShapeStylePropertiesArchive* bodylayoutproperties);
  ::TSWP::ShapeStylePropertiesArchive* unsafe_arena_release_bodylayoutproperties();

  // optional .TSWP.ShapeStylePropertiesArchive slideNumberLayoutProperties = 26;
  bool has_slidenumberlayoutproperties() const;
  private:
  bool _internal_has_slidenumberlayoutproperties() const;
  public:
  void clear_slidenumberlayoutproperties();
  const ::TSWP::ShapeStylePropertiesArchive& slidenumberlayoutproperties() const;
  PROTOBUF_NODISCARD ::TSWP::ShapeStylePropertiesArchive* release_slidenumberlayoutproperties();
  ::TSWP::ShapeStylePropertiesArchive* mutable_slidenumberlayoutproperties();
  void set_allocated_slidenumberlayoutproperties(::TSWP::ShapeStylePropertiesArchive* slidenumberlayoutproperties);
  private:
  const ::TSWP::ShapeStylePropertiesArchive& _internal_slidenumberlayoutproperties() const;
  ::TSWP::ShapeStylePropertiesArchive* _internal_mutable_slidenumberlayoutproperties();
  public:
  void unsafe_arena_set_allocated_slidenumberlayoutproperties(
      ::TSWP::ShapeStylePropertiesArchive* slidenumberlayoutproperties);
  ::TSWP::ShapeStylePropertiesArchive* unsafe_arena_release_slidenumberlayoutproperties();

  // optional .TSP.Reference note = 27;
  bool has_note() const;
  private:
  bool _internal_has_note() const;
  public:
  void clear_note();
  const ::TSP::Reference& note() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_note();
  ::TSP::Reference* mutable_note();
  void set_allocated_note(::TSP::Reference* note);
  private:
  const ::TSP::Reference& _internal_note() const;
  ::TSP::Reference* _internal_mutable_note();
  public:
  void unsafe_arena_set_allocated_note(
      ::TSP::Reference* note);
  ::TSP::Reference* unsafe_arena_release_note();

  // optional .TSP.Reference classicStylesheetRecord = 29;
  bool has_classicstylesheetrecord() const;
  private:
  bool _internal_has_classicstylesheetrecord() const;
  public:
  void clear_classicstylesheetrecord();
  const ::TSP::Reference& classicstylesheetrecord() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_classicstylesheetrecord();
  ::TSP::Reference* mutable_classicstylesheetrecord();
  void set_allocated_classicstylesheetrecord(::TSP::Reference* classicstylesheetrecord);
  private:
  const ::TSP::Reference& _internal_classicstylesheetrecord() const;
  ::TSP::Reference* _internal_mutable_classicstylesheetrecord();
  public:
  void unsafe_arena_set_allocated_classicstylesheetrecord(
      ::TSP::Reference* classicstylesheetrecord);
  ::TSP::Reference* unsafe_arena_release_classicstylesheetrecord();

  // optional .TSP.Reference objectPlaceholder = 30;
  bool has_objectplaceholder() const;
  private:
  bool _internal_has_objectplaceholder() const;
  public:
  void clear_objectplaceholder();
  const ::TSP::Reference& objectplaceholder() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_objectplaceholder();
  ::TSP::Reference* mutable_objectplaceholder();
  void set_allocated_objectplaceholder(::TSP::Reference* objectplaceholder);
  private:
  const ::TSP::Reference& _internal_objectplaceholder() const;
  ::TSP::Reference* _internal_mutable_objectplaceholder();
  public:
  void unsafe_arena_set_allocated_objectplaceholder(
      ::TSP::Reference* objectplaceholder);
  ::TSP::Reference* unsafe_arena_release_objectplaceholder();

  // optional .TSP.Reference userDefinedGuideStorage = 36;
  bool has_userdefinedguidestorage() const;
  private:
  bool _internal_has_userdefinedguidestorage() const;
  public:
  void clear_userdefinedguidestorage();
  const ::TSP::Reference& userdefinedguidestorage() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_userdefinedguidestorage();
  ::TSP::Reference* mutable_userdefinedguidestorage();
  void set_allocated_userdefinedguidestorage(::TSP::Reference* userdefinedguidestorage);
  private:
  const ::TSP::Reference& _internal_userdefinedguidestorage() const;
  ::TSP::Reference* _internal_mutable_userdefinedguidestorage();
  public:
  void unsafe_arena_set_allocated_userdefinedguidestorage(
      ::TSP::Reference* userdefinedguidestorage);
  ::TSP::Reference* unsafe_arena_release_userdefinedguidestorage();

  // optional .TSP.Reference info_using_object_placeholder_geometry = 39;
  bool has_info_using_object_placeholder_geometry() const;
  private:
  bool _internal_has_info_using_object_placeholder_geometry() const;
  public:
  void clear_info_using_object_placeholder_geometry();
  const ::TSP::Reference& info_using_object_placeholder_geometry() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_info_using_object_placeholder_geometry();
  ::TSP::Reference* mutable_info_using_object_placeholder_geometry();
  void set_allocated_info_using_object_placeholder_geometry(::TSP::Reference* info_using_object_placeholder_geometry);
  private:
  const ::TSP::Reference& _internal_info_using_object_placeholder_geometry() const;
  ::TSP::Reference* _internal_mutable_info_using_object_placeholder_geometry();
  public:
  void unsafe_arena_set_allocated_info_using_object_placeholder_geometry(
      ::TSP::Reference* info_using_object_placeholder_geometry);
  ::TSP::Reference* unsafe_arena_release_info_using_object_placeholder_geometry();

  // optional uint32 titlePlaceholderShapeStyleIndex = 12;
  bool has_titleplaceholdershapestyleindex() const;
  private:
  bool _internal_has_titleplaceholdershapestyleindex() const;
  public:
  void clear_titleplaceholdershapestyleindex();
  uint32_t titleplaceholdershapestyleindex() const;
  void set_titleplaceholdershapestyleindex(uint32_t value);
  private:
  uint32_t _internal_titleplaceholdershapestyleindex() const;
  void _internal_set_titleplaceholdershapestyleindex(uint32_t value);
  public:

  // optional uint32 titlePlaceholderTextStyleIndex = 13;
  bool has_titleplaceholdertextstyleindex() const;
  private:
  bool _internal_has_titleplaceholdertextstyleindex() const;
  public:
  void clear_titleplaceholdertextstyleindex();
  uint32_t titleplaceholdertextstyleindex() const;
  void set_titleplaceholdertextstyleindex(uint32_t value);
  private:
  uint32_t _internal_titleplaceholdertextstyleindex() const;
  void _internal_set_titleplaceholdertextstyleindex(uint32_t value);
  public:

  // optional uint32 bodyPlaceholderShapeStyleIndex = 15;
  bool has_bodyplaceholdershapestyleindex() const;
  private:
  bool _internal_has_bodyplaceholdershapestyleindex() const;
  public:
  void clear_bodyplaceholdershapestyleindex();
  uint32_t bodyplaceholdershapestyleindex() const;
  void set_bodyplaceholdershapestyleindex(uint32_t value);
  private:
  uint32_t _internal_bodyplaceholdershapestyleindex() const;
  void _internal_set_bodyplaceholdershapestyleindex(uint32_t value);
  public:

  // optional uint32 bodyPlaceholderTextStyleIndex = 16;
  bool has_bodyplaceholdertextstyleindex() const;
  private:
  bool _internal_has_bodyplaceholdertextstyleindex() const;
  public:
  void clear_bodyplaceholdertextstyleindex();
  uint32_t bodyplaceholdertextstyleindex() const;
  void set_bodyplaceholdertextstyleindex(uint32_t value);
  private:
  uint32_t _internal_bodyplaceholdertextstyleindex() const;
  void _internal_set_bodyplaceholdertextstyleindex(uint32_t value);
  public:

  // optional uint32 slideNumberPlaceholderShapeStyleIndex = 22;
  bool has_slidenumberplaceholdershapestyleindex() const;
  private:
  bool _internal_has_slidenumberplaceholdershapestyleindex() const;
  public:
  void clear_slidenumberplaceholdershapestyleindex();
  uint32_t slidenumberplaceholdershapestyleindex() const;
  void set_slidenumberplaceholdershapestyleindex(uint32_t value);
  private:
  uint32_t _internal_slidenumberplaceholdershapestyleindex() const;
  void _internal_set_slidenumberplaceholdershapestyleindex(uint32_t value);
  public:

  // optional uint32 slideNumberPlaceholderTextStyleIndex = 23;
  bool has_slidenumberplaceholdertextstyleindex() const;
  private:
  bool _internal_has_slidenumberplaceholdertextstyleindex() const;
  public:
  void clear_slidenumberplaceholdertextstyleindex();
  uint32_t slidenumberplaceholdertextstyleindex() const;
  void set_slidenumberplaceholdertextstyleindex(uint32_t value);
  private:
  uint32_t _internal_slidenumberplaceholdertextstyleindex() const;
  void _internal_set_slidenumberplaceholdertextstyleindex(uint32_t value);
  public:

  // required bool inDocument = 19;
  bool has_indocument() const;
  private:
  bool _internal_has_indocument() const;
  public:
  void clear_indocument();
  bool indocument() const;
  void set_indocument(bool value);
  private:
  bool _internal_indocument() const;
  void _internal_set_indocument(bool value);
  public:

  // optional bool info_using_object_placeholder_geometry_matches_object_placeholder_geometry = 40;
  bool has_info_using_object_placeholder_geometry_matches_object_placeholder_geometry() const;
  private:
  bool _internal_has_info_using_object_placeholder_geometry_matches_object_placeholder_geometry() const;
  public:
  void clear_info_using_object_placeholder_geometry_matches_object_placeholder_geometry();
  bool info_using_object_placeholder_geometry_matches_object_placeholder_geometry() const;
  void set_info_using_object_placeholder_geometry_matches_object_placeholder_geometry(bool value);
  private:
  bool _internal_info_using_object_placeholder_geometry_matches_object_placeholder_geometry() const;
  void _internal_set_info_using_object_placeholder_geometry_matches_object_placeholder_geometry(bool value);
  public:

  // optional bool deprecated_objectPlaceholderVisibleForExport = 34;
  bool has_deprecated_objectplaceholdervisibleforexport() const;
  private:
  bool _internal_has_deprecated_objectplaceholdervisibleforexport() const;
  public:
  void clear_deprecated_objectplaceholdervisibleforexport();
  bool deprecated_objectplaceholdervisibleforexport() const;
  void set_deprecated_objectplaceholdervisibleforexport(bool value);
  private:
  bool _internal_deprecated_objectplaceholdervisibleforexport() const;
  void _internal_set_deprecated_objectplaceholdervisibleforexport(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.SlideArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > builds_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkArchive > buildchunks_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > drawables_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::GuideArchive > staticguides_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::SlideArchive_SageTagMapEntry > sage_tag_to_info_map_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > bodyparagraphstyles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > bodyliststyles_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thumbnailtextfortitleplaceholder_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thumbnailtextforbodyplaceholder_;
    ::TSP::Reference* style_;
    ::KN::TransitionArchive* transition_;
    ::TSP::Reference* titleplaceholder_;
    ::TSP::Reference* bodyplaceholder_;
    ::TSD::GeometryArchive* titleplaceholdergeometry_;
    ::TSD::GeometryArchive* bodyplaceholdergeometry_;
    ::TSP::Reference* master_;
    ::TSP::Reference* slidenumberplaceholder_;
    ::TSD::GeometryArchive* slidenumberplaceholdergeometry_;
    ::TSWP::ShapeStylePropertiesArchive* titlelayoutproperties_;
    ::TSWP::ShapeStylePropertiesArchive* bodylayoutproperties_;
    ::TSWP::ShapeStylePropertiesArchive* slidenumberlayoutproperties_;
    ::TSP::Reference* note_;
    ::TSP::Reference* classicstylesheetrecord_;
    ::TSP::Reference* objectplaceholder_;
    ::TSP::Reference* userdefinedguidestorage_;
    ::TSP::Reference* info_using_object_placeholder_geometry_;
    uint32_t titleplaceholdershapestyleindex_;
    uint32_t titleplaceholdertextstyleindex_;
    uint32_t bodyplaceholdershapestyleindex_;
    uint32_t bodyplaceholdertextstyleindex_;
    uint32_t slidenumberplaceholdershapestyleindex_;
    uint32_t slidenumberplaceholdertextstyleindex_;
    bool indocument_;
    bool info_using_object_placeholder_geometry_matches_object_placeholder_geometry_;
    bool deprecated_objectplaceholdervisibleforexport_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class SlideNodeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.SlideNodeArchive) */ {
 public:
  inline SlideNodeArchive() : SlideNodeArchive(nullptr) {}
  ~SlideNodeArchive() override;
  explicit PROTOBUF_CONSTEXPR SlideNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlideNodeArchive(const SlideNodeArchive& from);
  SlideNodeArchive(SlideNodeArchive&& from) noexcept
    : SlideNodeArchive() {
    *this = ::std::move(from);
  }

  inline SlideNodeArchive& operator=(const SlideNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlideNodeArchive& operator=(SlideNodeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlideNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlideNodeArchive* internal_default_instance() {
    return reinterpret_cast<const SlideNodeArchive*>(
               &_SlideNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SlideNodeArchive& a, SlideNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SlideNodeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlideNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SlideNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SlideNodeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlideNodeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SlideNodeArchive& from) {
    SlideNodeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlideNodeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.SlideNodeArchive";
  }
  protected:
  explicit SlideNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 1,
    kDatabaseThumbnailsFieldNumber = 9,
    kThumbnailSizesFieldNumber = 10,
    kThumbnailsFieldNumber = 16,
    kUniqueIdentifierFieldNumber = 11,
    kCopyFromSlideIdentifierFieldNumber = 12,
    kSlideFieldNumber = 2,
    kDatabaseThumbnailFieldNumber = 3,
    kThumbnailsAreDirtyFieldNumber = 14,
    kIsHiddenFieldNumber = 4,
    kIsCollapsedFieldNumber = 5,
    kIsCollapsedInOutlineViewFieldNumber = 17,
    kHasBodyInOutlineViewFieldNumber = 19,
    kHasBuildsFieldNumber = 6,
    kHasTransitionFieldNumber = 7,
    kHasNoteFieldNumber = 8,
    kSlideSpecificHyperlinkCountFieldNumber = 13,
    kEventCountFieldNumber = 15,
    kIsSlideNumberVisibleFieldNumber = 18,
  };
  // repeated .TSP.Reference children = 1;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::TSP::Reference* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_children();
  private:
  const ::TSP::Reference& _internal_children(int index) const;
  ::TSP::Reference* _internal_add_children();
  public:
  const ::TSP::Reference& children(int index) const;
  ::TSP::Reference* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      children() const;

  // repeated .TSP.Reference database_thumbnails = 9;
  int database_thumbnails_size() const;
  private:
  int _internal_database_thumbnails_size() const;
  public:
  void clear_database_thumbnails();
  ::TSP::Reference* mutable_database_thumbnails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_database_thumbnails();
  private:
  const ::TSP::Reference& _internal_database_thumbnails(int index) const;
  ::TSP::Reference* _internal_add_database_thumbnails();
  public:
  const ::TSP::Reference& database_thumbnails(int index) const;
  ::TSP::Reference* add_database_thumbnails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      database_thumbnails() const;

  // repeated .TSP.Size thumbnailSizes = 10;
  int thumbnailsizes_size() const;
  private:
  int _internal_thumbnailsizes_size() const;
  public:
  void clear_thumbnailsizes();
  ::TSP::Size* mutable_thumbnailsizes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Size >*
      mutable_thumbnailsizes();
  private:
  const ::TSP::Size& _internal_thumbnailsizes(int index) const;
  ::TSP::Size* _internal_add_thumbnailsizes();
  public:
  const ::TSP::Size& thumbnailsizes(int index) const;
  ::TSP::Size* add_thumbnailsizes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Size >&
      thumbnailsizes() const;

  // repeated .TSP.DataReference thumbnails = 16;
  int thumbnails_size() const;
  private:
  int _internal_thumbnails_size() const;
  public:
  void clear_thumbnails();
  ::TSP::DataReference* mutable_thumbnails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >*
      mutable_thumbnails();
  private:
  const ::TSP::DataReference& _internal_thumbnails(int index) const;
  ::TSP::DataReference* _internal_add_thumbnails();
  public:
  const ::TSP::DataReference& thumbnails(int index) const;
  ::TSP::DataReference* add_thumbnails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >&
      thumbnails() const;

  // optional string uniqueIdentifier = 11;
  bool has_uniqueidentifier() const;
  private:
  bool _internal_has_uniqueidentifier() const;
  public:
  void clear_uniqueidentifier();
  const std::string& uniqueidentifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uniqueidentifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uniqueidentifier();
  PROTOBUF_NODISCARD std::string* release_uniqueidentifier();
  void set_allocated_uniqueidentifier(std::string* uniqueidentifier);
  private:
  const std::string& _internal_uniqueidentifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uniqueidentifier(const std::string& value);
  std::string* _internal_mutable_uniqueidentifier();
  public:

  // optional string copyFromSlideIdentifier = 12;
  bool has_copyfromslideidentifier() const;
  private:
  bool _internal_has_copyfromslideidentifier() const;
  public:
  void clear_copyfromslideidentifier();
  const std::string& copyfromslideidentifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_copyfromslideidentifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_copyfromslideidentifier();
  PROTOBUF_NODISCARD std::string* release_copyfromslideidentifier();
  void set_allocated_copyfromslideidentifier(std::string* copyfromslideidentifier);
  private:
  const std::string& _internal_copyfromslideidentifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_copyfromslideidentifier(const std::string& value);
  std::string* _internal_mutable_copyfromslideidentifier();
  public:

  // optional .TSP.Reference slide = 2;
  bool has_slide() const;
  private:
  bool _internal_has_slide() const;
  public:
  void clear_slide();
  const ::TSP::Reference& slide() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_slide();
  ::TSP::Reference* mutable_slide();
  void set_allocated_slide(::TSP::Reference* slide);
  private:
  const ::TSP::Reference& _internal_slide() const;
  ::TSP::Reference* _internal_mutable_slide();
  public:
  void unsafe_arena_set_allocated_slide(
      ::TSP::Reference* slide);
  ::TSP::Reference* unsafe_arena_release_slide();

  // optional .TSP.Reference database_thumbnail = 3;
  bool has_database_thumbnail() const;
  private:
  bool _internal_has_database_thumbnail() const;
  public:
  void clear_database_thumbnail();
  const ::TSP::Reference& database_thumbnail() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_database_thumbnail();
  ::TSP::Reference* mutable_database_thumbnail();
  void set_allocated_database_thumbnail(::TSP::Reference* database_thumbnail);
  private:
  const ::TSP::Reference& _internal_database_thumbnail() const;
  ::TSP::Reference* _internal_mutable_database_thumbnail();
  public:
  void unsafe_arena_set_allocated_database_thumbnail(
      ::TSP::Reference* database_thumbnail);
  ::TSP::Reference* unsafe_arena_release_database_thumbnail();

  // optional bool thumbnailsAreDirty = 14;
  bool has_thumbnailsaredirty() const;
  private:
  bool _internal_has_thumbnailsaredirty() const;
  public:
  void clear_thumbnailsaredirty();
  bool thumbnailsaredirty() const;
  void set_thumbnailsaredirty(bool value);
  private:
  bool _internal_thumbnailsaredirty() const;
  void _internal_set_thumbnailsaredirty(bool value);
  public:

  // required bool isHidden = 4;
  bool has_ishidden() const;
  private:
  bool _internal_has_ishidden() const;
  public:
  void clear_ishidden();
  bool ishidden() const;
  void set_ishidden(bool value);
  private:
  bool _internal_ishidden() const;
  void _internal_set_ishidden(bool value);
  public:

  // required bool isCollapsed = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_iscollapsed() const;
  private:
  bool _internal_has_iscollapsed() const;
  public:
  PROTOBUF_DEPRECATED void clear_iscollapsed();
  PROTOBUF_DEPRECATED bool iscollapsed() const;
  PROTOBUF_DEPRECATED void set_iscollapsed(bool value);
  private:
  bool _internal_iscollapsed() const;
  void _internal_set_iscollapsed(bool value);
  public:

  // optional bool isCollapsedInOutlineView = 17;
  bool has_iscollapsedinoutlineview() const;
  private:
  bool _internal_has_iscollapsedinoutlineview() const;
  public:
  void clear_iscollapsedinoutlineview();
  bool iscollapsedinoutlineview() const;
  void set_iscollapsedinoutlineview(bool value);
  private:
  bool _internal_iscollapsedinoutlineview() const;
  void _internal_set_iscollapsedinoutlineview(bool value);
  public:

  // optional bool hasBodyInOutlineView = 19;
  bool has_hasbodyinoutlineview() const;
  private:
  bool _internal_has_hasbodyinoutlineview() const;
  public:
  void clear_hasbodyinoutlineview();
  bool hasbodyinoutlineview() const;
  void set_hasbodyinoutlineview(bool value);
  private:
  bool _internal_hasbodyinoutlineview() const;
  void _internal_set_hasbodyinoutlineview(bool value);
  public:

  // required bool hasBuilds = 6;
  bool has_hasbuilds() const;
  private:
  bool _internal_has_hasbuilds() const;
  public:
  void clear_hasbuilds();
  bool hasbuilds() const;
  void set_hasbuilds(bool value);
  private:
  bool _internal_hasbuilds() const;
  void _internal_set_hasbuilds(bool value);
  public:

  // required bool hasTransition = 7;
  bool has_hastransition() const;
  private:
  bool _internal_has_hastransition() const;
  public:
  void clear_hastransition();
  bool hastransition() const;
  void set_hastransition(bool value);
  private:
  bool _internal_hastransition() const;
  void _internal_set_hastransition(bool value);
  public:

  // optional bool hasNote = 8;
  bool has_hasnote() const;
  private:
  bool _internal_has_hasnote() const;
  public:
  void clear_hasnote();
  bool hasnote() const;
  void set_hasnote(bool value);
  private:
  bool _internal_hasnote() const;
  void _internal_set_hasnote(bool value);
  public:

  // optional uint32 slideSpecificHyperlinkCount = 13;
  bool has_slidespecifichyperlinkcount() const;
  private:
  bool _internal_has_slidespecifichyperlinkcount() const;
  public:
  void clear_slidespecifichyperlinkcount();
  uint32_t slidespecifichyperlinkcount() const;
  void set_slidespecifichyperlinkcount(uint32_t value);
  private:
  uint32_t _internal_slidespecifichyperlinkcount() const;
  void _internal_set_slidespecifichyperlinkcount(uint32_t value);
  public:

  // optional uint32 eventCount = 15;
  bool has_eventcount() const;
  private:
  bool _internal_has_eventcount() const;
  public:
  void clear_eventcount();
  uint32_t eventcount() const;
  void set_eventcount(uint32_t value);
  private:
  uint32_t _internal_eventcount() const;
  void _internal_set_eventcount(uint32_t value);
  public:

  // optional bool isSlideNumberVisible = 18 [default = false];
  bool has_isslidenumbervisible() const;
  private:
  bool _internal_has_isslidenumbervisible() const;
  public:
  void clear_isslidenumbervisible();
  bool isslidenumbervisible() const;
  void set_isslidenumbervisible(bool value);
  private:
  bool _internal_isslidenumbervisible() const;
  void _internal_set_isslidenumbervisible(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.SlideNodeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > children_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > database_thumbnails_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Size > thumbnailsizes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference > thumbnails_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uniqueidentifier_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr copyfromslideidentifier_;
    ::TSP::Reference* slide_;
    ::TSP::Reference* database_thumbnail_;
    bool thumbnailsaredirty_;
    bool ishidden_;
    bool iscollapsed_;
    bool iscollapsedinoutlineview_;
    bool hasbodyinoutlineview_;
    bool hasbuilds_;
    bool hastransition_;
    bool hasnote_;
    uint32_t slidespecifichyperlinkcount_;
    uint32_t eventcount_;
    bool isslidenumbervisible_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class DesktopUILayoutArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.DesktopUILayoutArchive) */ {
 public:
  inline DesktopUILayoutArchive() : DesktopUILayoutArchive(nullptr) {}
  ~DesktopUILayoutArchive() override;
  explicit PROTOBUF_CONSTEXPR DesktopUILayoutArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DesktopUILayoutArchive(const DesktopUILayoutArchive& from);
  DesktopUILayoutArchive(DesktopUILayoutArchive&& from) noexcept
    : DesktopUILayoutArchive() {
    *this = ::std::move(from);
  }

  inline DesktopUILayoutArchive& operator=(const DesktopUILayoutArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DesktopUILayoutArchive& operator=(DesktopUILayoutArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DesktopUILayoutArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DesktopUILayoutArchive* internal_default_instance() {
    return reinterpret_cast<const DesktopUILayoutArchive*>(
               &_DesktopUILayoutArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DesktopUILayoutArchive& a, DesktopUILayoutArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DesktopUILayoutArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DesktopUILayoutArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DesktopUILayoutArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DesktopUILayoutArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DesktopUILayoutArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DesktopUILayoutArchive& from) {
    DesktopUILayoutArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DesktopUILayoutArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.DesktopUILayoutArchive";
  }
  protected:
  explicit DesktopUILayoutArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DesktopUILayoutArchive_SidebarViewMode SidebarViewMode;
  static constexpr SidebarViewMode kSidebarViewModeNavigator =
    DesktopUILayoutArchive_SidebarViewMode_kSidebarViewModeNavigator;
  static constexpr SidebarViewMode kSidebarViewModeOutline =
    DesktopUILayoutArchive_SidebarViewMode_kSidebarViewModeOutline;
  static inline bool SidebarViewMode_IsValid(int value) {
    return DesktopUILayoutArchive_SidebarViewMode_IsValid(value);
  }
  static constexpr SidebarViewMode SidebarViewMode_MIN =
    DesktopUILayoutArchive_SidebarViewMode_SidebarViewMode_MIN;
  static constexpr SidebarViewMode SidebarViewMode_MAX =
    DesktopUILayoutArchive_SidebarViewMode_SidebarViewMode_MAX;
  static constexpr int SidebarViewMode_ARRAYSIZE =
    DesktopUILayoutArchive_SidebarViewMode_SidebarViewMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SidebarViewMode_descriptor() {
    return DesktopUILayoutArchive_SidebarViewMode_descriptor();
  }
  template<typename T>
  static inline const std::string& SidebarViewMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SidebarViewMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SidebarViewMode_Name.");
    return DesktopUILayoutArchive_SidebarViewMode_Name(enum_t_value);
  }
  static inline bool SidebarViewMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SidebarViewMode* value) {
    return DesktopUILayoutArchive_SidebarViewMode_Parse(name, value);
  }

  typedef DesktopUILayoutArchive_InspectorPaneViewMode InspectorPaneViewMode;
  static constexpr InspectorPaneViewMode kInspectorPaneViewModeFormat =
    DesktopUILayoutArchive_InspectorPaneViewMode_kInspectorPaneViewModeFormat;
  static constexpr InspectorPaneViewMode kInspectorPaneViewModeAnimate =
    DesktopUILayoutArchive_InspectorPaneViewMode_kInspectorPaneViewModeAnimate;
  static constexpr InspectorPaneViewMode kInspectorPaneViewModeSetup =
    DesktopUILayoutArchive_InspectorPaneViewMode_kInspectorPaneViewModeSetup;
  static inline bool InspectorPaneViewMode_IsValid(int value) {
    return DesktopUILayoutArchive_InspectorPaneViewMode_IsValid(value);
  }
  static constexpr InspectorPaneViewMode InspectorPaneViewMode_MIN =
    DesktopUILayoutArchive_InspectorPaneViewMode_InspectorPaneViewMode_MIN;
  static constexpr InspectorPaneViewMode InspectorPaneViewMode_MAX =
    DesktopUILayoutArchive_InspectorPaneViewMode_InspectorPaneViewMode_MAX;
  static constexpr int InspectorPaneViewMode_ARRAYSIZE =
    DesktopUILayoutArchive_InspectorPaneViewMode_InspectorPaneViewMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  InspectorPaneViewMode_descriptor() {
    return DesktopUILayoutArchive_InspectorPaneViewMode_descriptor();
  }
  template<typename T>
  static inline const std::string& InspectorPaneViewMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InspectorPaneViewMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InspectorPaneViewMode_Name.");
    return DesktopUILayoutArchive_InspectorPaneViewMode_Name(enum_t_value);
  }
  static inline bool InspectorPaneViewMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      InspectorPaneViewMode* value) {
    return DesktopUILayoutArchive_InspectorPaneViewMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSidebarViewModeFieldNumber = 2,
    kSidebarVisibleFieldNumber = 1,
    kNotesVisibleFieldNumber = 3,
    kLightTableVisibleFieldNumber = 5,
    kInspectorPaneViewModeFieldNumber = 7,
    kInspectorPaneVisibleFieldNumber = 6,
  };
  // optional .KN.DesktopUILayoutArchive.SidebarViewMode sidebar_view_mode = 2;
  bool has_sidebar_view_mode() const;
  private:
  bool _internal_has_sidebar_view_mode() const;
  public:
  void clear_sidebar_view_mode();
  ::KN::DesktopUILayoutArchive_SidebarViewMode sidebar_view_mode() const;
  void set_sidebar_view_mode(::KN::DesktopUILayoutArchive_SidebarViewMode value);
  private:
  ::KN::DesktopUILayoutArchive_SidebarViewMode _internal_sidebar_view_mode() const;
  void _internal_set_sidebar_view_mode(::KN::DesktopUILayoutArchive_SidebarViewMode value);
  public:

  // optional bool sidebar_visible = 1;
  bool has_sidebar_visible() const;
  private:
  bool _internal_has_sidebar_visible() const;
  public:
  void clear_sidebar_visible();
  bool sidebar_visible() const;
  void set_sidebar_visible(bool value);
  private:
  bool _internal_sidebar_visible() const;
  void _internal_set_sidebar_visible(bool value);
  public:

  // optional bool notes_visible = 3;
  bool has_notes_visible() const;
  private:
  bool _internal_has_notes_visible() const;
  public:
  void clear_notes_visible();
  bool notes_visible() const;
  void set_notes_visible(bool value);
  private:
  bool _internal_notes_visible() const;
  void _internal_set_notes_visible(bool value);
  public:

  // optional bool light_table_visible = 5;
  bool has_light_table_visible() const;
  private:
  bool _internal_has_light_table_visible() const;
  public:
  void clear_light_table_visible();
  bool light_table_visible() const;
  void set_light_table_visible(bool value);
  private:
  bool _internal_light_table_visible() const;
  void _internal_set_light_table_visible(bool value);
  public:

  // optional .KN.DesktopUILayoutArchive.InspectorPaneViewMode inspector_pane_view_mode = 7 [default = kInspectorPaneViewModeFormat];
  bool has_inspector_pane_view_mode() const;
  private:
  bool _internal_has_inspector_pane_view_mode() const;
  public:
  void clear_inspector_pane_view_mode();
  ::KN::DesktopUILayoutArchive_InspectorPaneViewMode inspector_pane_view_mode() const;
  void set_inspector_pane_view_mode(::KN::DesktopUILayoutArchive_InspectorPaneViewMode value);
  private:
  ::KN::DesktopUILayoutArchive_InspectorPaneViewMode _internal_inspector_pane_view_mode() const;
  void _internal_set_inspector_pane_view_mode(::KN::DesktopUILayoutArchive_InspectorPaneViewMode value);
  public:

  // optional bool inspector_pane_visible = 6 [default = true];
  bool has_inspector_pane_visible() const;
  private:
  bool _internal_has_inspector_pane_visible() const;
  public:
  void clear_inspector_pane_visible();
  bool inspector_pane_visible() const;
  void set_inspector_pane_visible(bool value);
  private:
  bool _internal_inspector_pane_visible() const;
  void _internal_set_inspector_pane_visible(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.DesktopUILayoutArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int sidebar_view_mode_;
    bool sidebar_visible_;
    bool notes_visible_;
    bool light_table_visible_;
    int inspector_pane_view_mode_;
    bool inspector_pane_visible_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class UIStateArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.UIStateArchive) */ {
 public:
  inline UIStateArchive() : UIStateArchive(nullptr) {}
  ~UIStateArchive() override;
  explicit PROTOBUF_CONSTEXPR UIStateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UIStateArchive(const UIStateArchive& from);
  UIStateArchive(UIStateArchive&& from) noexcept
    : UIStateArchive() {
    *this = ::std::move(from);
  }

  inline UIStateArchive& operator=(const UIStateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UIStateArchive& operator=(UIStateArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UIStateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UIStateArchive* internal_default_instance() {
    return reinterpret_cast<const UIStateArchive*>(
               &_UIStateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(UIStateArchive& a, UIStateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UIStateArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UIStateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UIStateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UIStateArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UIStateArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UIStateArchive& from) {
    UIStateArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UIStateArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.UIStateArchive";
  }
  protected:
  explicit UIStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectedSlideNodesFieldNumber = 6,
    kChartUiStateFieldNumber = 15,
    kCollapsedSlideNodesFieldNumber = 19,
    kSlideNodeToEditFieldNumber = 1,
    kDeprecatedMasterSlideNodeToApplyFieldNumber = 2,
    kDeprecatedSlideThumbnailSizeFieldNumber = 3,
    kCanvasOffsetFieldNumber = 5,
    kIPhoneCanvasOffsetFieldNumber = 8,
    kIPhone568CanvasOffsetFieldNumber = 10,
    kDesktopUiLayoutFieldNumber = 11,
    kDesktopCanvasOffsetFieldNumber = 21,
    kDesktopMainContentSizeFieldNumber = 24,
    kCanvasViewScaleFieldNumber = 4,
    kIPhoneCanvasViewScaleFieldNumber = 7,
    kIPhone568CanvasViewScaleFieldNumber = 9,
    kDesktopCanvasViewScaleFieldNumber = 13,
    kLightTableZoomScaleFieldNumber = 14,
    kDesktopSlideViewContentFitsWindowFieldNumber = 12,
    kShowSlideGuidesFieldNumber = 16,
    kShowMasterGuidesFieldNumber = 17,
    kShowsCommentsFieldNumber = 18,
    kShowsRulerFieldNumber = 20,
    kDesktopNavigatorViewWidthFieldNumber = 22,
    kDesktopOutlineViewWidthFieldNumber = 23,
  };
  // repeated .TSP.Reference selectedSlideNodes = 6;
  int selectedslidenodes_size() const;
  private:
  int _internal_selectedslidenodes_size() const;
  public:
  void clear_selectedslidenodes();
  ::TSP::Reference* mutable_selectedslidenodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_selectedslidenodes();
  private:
  const ::TSP::Reference& _internal_selectedslidenodes(int index) const;
  ::TSP::Reference* _internal_add_selectedslidenodes();
  public:
  const ::TSP::Reference& selectedslidenodes(int index) const;
  ::TSP::Reference* add_selectedslidenodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      selectedslidenodes() const;

  // repeated .TSCH.ChartUIState chart_ui_state = 15;
  int chart_ui_state_size() const;
  private:
  int _internal_chart_ui_state_size() const;
  public:
  void clear_chart_ui_state();
  ::TSCH::ChartUIState* mutable_chart_ui_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartUIState >*
      mutable_chart_ui_state();
  private:
  const ::TSCH::ChartUIState& _internal_chart_ui_state(int index) const;
  ::TSCH::ChartUIState* _internal_add_chart_ui_state();
  public:
  const ::TSCH::ChartUIState& chart_ui_state(int index) const;
  ::TSCH::ChartUIState* add_chart_ui_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartUIState >&
      chart_ui_state() const;

  // repeated .TSP.Reference collapsed_slide_nodes = 19;
  int collapsed_slide_nodes_size() const;
  private:
  int _internal_collapsed_slide_nodes_size() const;
  public:
  void clear_collapsed_slide_nodes();
  ::TSP::Reference* mutable_collapsed_slide_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_collapsed_slide_nodes();
  private:
  const ::TSP::Reference& _internal_collapsed_slide_nodes(int index) const;
  ::TSP::Reference* _internal_add_collapsed_slide_nodes();
  public:
  const ::TSP::Reference& collapsed_slide_nodes(int index) const;
  ::TSP::Reference* add_collapsed_slide_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      collapsed_slide_nodes() const;

  // optional .TSP.Reference slideNodeToEdit = 1;
  bool has_slidenodetoedit() const;
  private:
  bool _internal_has_slidenodetoedit() const;
  public:
  void clear_slidenodetoedit();
  const ::TSP::Reference& slidenodetoedit() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_slidenodetoedit();
  ::TSP::Reference* mutable_slidenodetoedit();
  void set_allocated_slidenodetoedit(::TSP::Reference* slidenodetoedit);
  private:
  const ::TSP::Reference& _internal_slidenodetoedit() const;
  ::TSP::Reference* _internal_mutable_slidenodetoedit();
  public:
  void unsafe_arena_set_allocated_slidenodetoedit(
      ::TSP::Reference* slidenodetoedit);
  ::TSP::Reference* unsafe_arena_release_slidenodetoedit();

  // optional .TSP.Reference deprecated_masterSlideNodeToApply = 2;
  bool has_deprecated_masterslidenodetoapply() const;
  private:
  bool _internal_has_deprecated_masterslidenodetoapply() const;
  public:
  void clear_deprecated_masterslidenodetoapply();
  const ::TSP::Reference& deprecated_masterslidenodetoapply() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_deprecated_masterslidenodetoapply();
  ::TSP::Reference* mutable_deprecated_masterslidenodetoapply();
  void set_allocated_deprecated_masterslidenodetoapply(::TSP::Reference* deprecated_masterslidenodetoapply);
  private:
  const ::TSP::Reference& _internal_deprecated_masterslidenodetoapply() const;
  ::TSP::Reference* _internal_mutable_deprecated_masterslidenodetoapply();
  public:
  void unsafe_arena_set_allocated_deprecated_masterslidenodetoapply(
      ::TSP::Reference* deprecated_masterslidenodetoapply);
  ::TSP::Reference* unsafe_arena_release_deprecated_masterslidenodetoapply();

  // optional .TSP.Size deprecated_slideThumbnailSize = 3;
  bool has_deprecated_slidethumbnailsize() const;
  private:
  bool _internal_has_deprecated_slidethumbnailsize() const;
  public:
  void clear_deprecated_slidethumbnailsize();
  const ::TSP::Size& deprecated_slidethumbnailsize() const;
  PROTOBUF_NODISCARD ::TSP::Size* release_deprecated_slidethumbnailsize();
  ::TSP::Size* mutable_deprecated_slidethumbnailsize();
  void set_allocated_deprecated_slidethumbnailsize(::TSP::Size* deprecated_slidethumbnailsize);
  private:
  const ::TSP::Size& _internal_deprecated_slidethumbnailsize() const;
  ::TSP::Size* _internal_mutable_deprecated_slidethumbnailsize();
  public:
  void unsafe_arena_set_allocated_deprecated_slidethumbnailsize(
      ::TSP::Size* deprecated_slidethumbnailsize);
  ::TSP::Size* unsafe_arena_release_deprecated_slidethumbnailsize();

  // optional .TSP.Point canvasOffset = 5;
  bool has_canvasoffset() const;
  private:
  bool _internal_has_canvasoffset() const;
  public:
  void clear_canvasoffset();
  const ::TSP::Point& canvasoffset() const;
  PROTOBUF_NODISCARD ::TSP::Point* release_canvasoffset();
  ::TSP::Point* mutable_canvasoffset();
  void set_allocated_canvasoffset(::TSP::Point* canvasoffset);
  private:
  const ::TSP::Point& _internal_canvasoffset() const;
  ::TSP::Point* _internal_mutable_canvasoffset();
  public:
  void unsafe_arena_set_allocated_canvasoffset(
      ::TSP::Point* canvasoffset);
  ::TSP::Point* unsafe_arena_release_canvasoffset();

  // optional .TSP.Point iPhoneCanvasOffset = 8;
  bool has_iphonecanvasoffset() const;
  private:
  bool _internal_has_iphonecanvasoffset() const;
  public:
  void clear_iphonecanvasoffset();
  const ::TSP::Point& iphonecanvasoffset() const;
  PROTOBUF_NODISCARD ::TSP::Point* release_iphonecanvasoffset();
  ::TSP::Point* mutable_iphonecanvasoffset();
  void set_allocated_iphonecanvasoffset(::TSP::Point* iphonecanvasoffset);
  private:
  const ::TSP::Point& _internal_iphonecanvasoffset() const;
  ::TSP::Point* _internal_mutable_iphonecanvasoffset();
  public:
  void unsafe_arena_set_allocated_iphonecanvasoffset(
      ::TSP::Point* iphonecanvasoffset);
  ::TSP::Point* unsafe_arena_release_iphonecanvasoffset();

  // optional .TSP.Point iPhone568CanvasOffset = 10;
  bool has_iphone568canvasoffset() const;
  private:
  bool _internal_has_iphone568canvasoffset() const;
  public:
  void clear_iphone568canvasoffset();
  const ::TSP::Point& iphone568canvasoffset() const;
  PROTOBUF_NODISCARD ::TSP::Point* release_iphone568canvasoffset();
  ::TSP::Point* mutable_iphone568canvasoffset();
  void set_allocated_iphone568canvasoffset(::TSP::Point* iphone568canvasoffset);
  private:
  const ::TSP::Point& _internal_iphone568canvasoffset() const;
  ::TSP::Point* _internal_mutable_iphone568canvasoffset();
  public:
  void unsafe_arena_set_allocated_iphone568canvasoffset(
      ::TSP::Point* iphone568canvasoffset);
  ::TSP::Point* unsafe_arena_release_iphone568canvasoffset();

  // optional .TSP.Reference desktop_ui_layout = 11;
  bool has_desktop_ui_layout() const;
  private:
  bool _internal_has_desktop_ui_layout() const;
  public:
  void clear_desktop_ui_layout();
  const ::TSP::Reference& desktop_ui_layout() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_desktop_ui_layout();
  ::TSP::Reference* mutable_desktop_ui_layout();
  void set_allocated_desktop_ui_layout(::TSP::Reference* desktop_ui_layout);
  private:
  const ::TSP::Reference& _internal_desktop_ui_layout() const;
  ::TSP::Reference* _internal_mutable_desktop_ui_layout();
  public:
  void unsafe_arena_set_allocated_desktop_ui_layout(
      ::TSP::Reference* desktop_ui_layout);
  ::TSP::Reference* unsafe_arena_release_desktop_ui_layout();

  // optional .TSP.Point desktop_canvas_offset = 21;
  bool has_desktop_canvas_offset() const;
  private:
  bool _internal_has_desktop_canvas_offset() const;
  public:
  void clear_desktop_canvas_offset();
  const ::TSP::Point& desktop_canvas_offset() const;
  PROTOBUF_NODISCARD ::TSP::Point* release_desktop_canvas_offset();
  ::TSP::Point* mutable_desktop_canvas_offset();
  void set_allocated_desktop_canvas_offset(::TSP::Point* desktop_canvas_offset);
  private:
  const ::TSP::Point& _internal_desktop_canvas_offset() const;
  ::TSP::Point* _internal_mutable_desktop_canvas_offset();
  public:
  void unsafe_arena_set_allocated_desktop_canvas_offset(
      ::TSP::Point* desktop_canvas_offset);
  ::TSP::Point* unsafe_arena_release_desktop_canvas_offset();

  // optional .TSP.Size desktop_main_content_size = 24;
  bool has_desktop_main_content_size() const;
  private:
  bool _internal_has_desktop_main_content_size() const;
  public:
  void clear_desktop_main_content_size();
  const ::TSP::Size& desktop_main_content_size() const;
  PROTOBUF_NODISCARD ::TSP::Size* release_desktop_main_content_size();
  ::TSP::Size* mutable_desktop_main_content_size();
  void set_allocated_desktop_main_content_size(::TSP::Size* desktop_main_content_size);
  private:
  const ::TSP::Size& _internal_desktop_main_content_size() const;
  ::TSP::Size* _internal_mutable_desktop_main_content_size();
  public:
  void unsafe_arena_set_allocated_desktop_main_content_size(
      ::TSP::Size* desktop_main_content_size);
  ::TSP::Size* unsafe_arena_release_desktop_main_content_size();

  // optional float canvasViewScale = 4;
  bool has_canvasviewscale() const;
  private:
  bool _internal_has_canvasviewscale() const;
  public:
  void clear_canvasviewscale();
  float canvasviewscale() const;
  void set_canvasviewscale(float value);
  private:
  float _internal_canvasviewscale() const;
  void _internal_set_canvasviewscale(float value);
  public:

  // optional float iPhoneCanvasViewScale = 7;
  bool has_iphonecanvasviewscale() const;
  private:
  bool _internal_has_iphonecanvasviewscale() const;
  public:
  void clear_iphonecanvasviewscale();
  float iphonecanvasviewscale() const;
  void set_iphonecanvasviewscale(float value);
  private:
  float _internal_iphonecanvasviewscale() const;
  void _internal_set_iphonecanvasviewscale(float value);
  public:

  // optional float iPhone568CanvasViewScale = 9;
  bool has_iphone568canvasviewscale() const;
  private:
  bool _internal_has_iphone568canvasviewscale() const;
  public:
  void clear_iphone568canvasviewscale();
  float iphone568canvasviewscale() const;
  void set_iphone568canvasviewscale(float value);
  private:
  float _internal_iphone568canvasviewscale() const;
  void _internal_set_iphone568canvasviewscale(float value);
  public:

  // optional float desktop_canvas_view_scale = 13;
  bool has_desktop_canvas_view_scale() const;
  private:
  bool _internal_has_desktop_canvas_view_scale() const;
  public:
  void clear_desktop_canvas_view_scale();
  float desktop_canvas_view_scale() const;
  void set_desktop_canvas_view_scale(float value);
  private:
  float _internal_desktop_canvas_view_scale() const;
  void _internal_set_desktop_canvas_view_scale(float value);
  public:

  // optional float light_table_zoom_scale = 14;
  bool has_light_table_zoom_scale() const;
  private:
  bool _internal_has_light_table_zoom_scale() const;
  public:
  void clear_light_table_zoom_scale();
  float light_table_zoom_scale() const;
  void set_light_table_zoom_scale(float value);
  private:
  float _internal_light_table_zoom_scale() const;
  void _internal_set_light_table_zoom_scale(float value);
  public:

  // optional bool desktop_slide_view_content_fits_window = 12;
  bool has_desktop_slide_view_content_fits_window() const;
  private:
  bool _internal_has_desktop_slide_view_content_fits_window() const;
  public:
  void clear_desktop_slide_view_content_fits_window();
  bool desktop_slide_view_content_fits_window() const;
  void set_desktop_slide_view_content_fits_window(bool value);
  private:
  bool _internal_desktop_slide_view_content_fits_window() const;
  void _internal_set_desktop_slide_view_content_fits_window(bool value);
  public:

  // optional bool show_slide_guides = 16;
  bool has_show_slide_guides() const;
  private:
  bool _internal_has_show_slide_guides() const;
  public:
  void clear_show_slide_guides();
  bool show_slide_guides() const;
  void set_show_slide_guides(bool value);
  private:
  bool _internal_show_slide_guides() const;
  void _internal_set_show_slide_guides(bool value);
  public:

  // optional bool show_master_guides = 17;
  bool has_show_master_guides() const;
  private:
  bool _internal_has_show_master_guides() const;
  public:
  void clear_show_master_guides();
  bool show_master_guides() const;
  void set_show_master_guides(bool value);
  private:
  bool _internal_show_master_guides() const;
  void _internal_set_show_master_guides(bool value);
  public:

  // optional bool shows_comments = 18;
  bool has_shows_comments() const;
  private:
  bool _internal_has_shows_comments() const;
  public:
  void clear_shows_comments();
  bool shows_comments() const;
  void set_shows_comments(bool value);
  private:
  bool _internal_shows_comments() const;
  void _internal_set_shows_comments(bool value);
  public:

  // optional bool shows_ruler = 20;
  bool has_shows_ruler() const;
  private:
  bool _internal_has_shows_ruler() const;
  public:
  void clear_shows_ruler();
  bool shows_ruler() const;
  void set_shows_ruler(bool value);
  private:
  bool _internal_shows_ruler() const;
  void _internal_set_shows_ruler(bool value);
  public:

  // optional float desktop_navigator_view_width = 22;
  bool has_desktop_navigator_view_width() const;
  private:
  bool _internal_has_desktop_navigator_view_width() const;
  public:
  void clear_desktop_navigator_view_width();
  float desktop_navigator_view_width() const;
  void set_desktop_navigator_view_width(float value);
  private:
  float _internal_desktop_navigator_view_width() const;
  void _internal_set_desktop_navigator_view_width(float value);
  public:

  // optional float desktop_outline_view_width = 23;
  bool has_desktop_outline_view_width() const;
  private:
  bool _internal_has_desktop_outline_view_width() const;
  public:
  void clear_desktop_outline_view_width();
  float desktop_outline_view_width() const;
  void set_desktop_outline_view_width(float value);
  private:
  float _internal_desktop_outline_view_width() const;
  void _internal_set_desktop_outline_view_width(float value);
  public:

  // @@protoc_insertion_point(class_scope:KN.UIStateArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > selectedslidenodes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartUIState > chart_ui_state_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > collapsed_slide_nodes_;
    ::TSP::Reference* slidenodetoedit_;
    ::TSP::Reference* deprecated_masterslidenodetoapply_;
    ::TSP::Size* deprecated_slidethumbnailsize_;
    ::TSP::Point* canvasoffset_;
    ::TSP::Point* iphonecanvasoffset_;
    ::TSP::Point* iphone568canvasoffset_;
    ::TSP::Reference* desktop_ui_layout_;
    ::TSP::Point* desktop_canvas_offset_;
    ::TSP::Size* desktop_main_content_size_;
    float canvasviewscale_;
    float iphonecanvasviewscale_;
    float iphone568canvasviewscale_;
    float desktop_canvas_view_scale_;
    float light_table_zoom_scale_;
    bool desktop_slide_view_content_fits_window_;
    bool show_slide_guides_;
    bool show_master_guides_;
    bool shows_comments_;
    bool shows_ruler_;
    float desktop_navigator_view_width_;
    float desktop_outline_view_width_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class CanvasSelectionArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CanvasSelectionArchive) */ {
 public:
  inline CanvasSelectionArchive() : CanvasSelectionArchive(nullptr) {}
  ~CanvasSelectionArchive() override;
  explicit PROTOBUF_CONSTEXPR CanvasSelectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CanvasSelectionArchive(const CanvasSelectionArchive& from);
  CanvasSelectionArchive(CanvasSelectionArchive&& from) noexcept
    : CanvasSelectionArchive() {
    *this = ::std::move(from);
  }

  inline CanvasSelectionArchive& operator=(const CanvasSelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanvasSelectionArchive& operator=(CanvasSelectionArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CanvasSelectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CanvasSelectionArchive* internal_default_instance() {
    return reinterpret_cast<const CanvasSelectionArchive*>(
               &_CanvasSelectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CanvasSelectionArchive& a, CanvasSelectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CanvasSelectionArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CanvasSelectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CanvasSelectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CanvasSelectionArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CanvasSelectionArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CanvasSelectionArchive& from) {
    CanvasSelectionArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CanvasSelectionArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CanvasSelectionArchive";
  }
  protected:
  explicit CanvasSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 1,
    kDatabaseActionGhostIndexesFieldNumber = 2,
    kActionGhostIndexesFieldNumber = 3,
  };
  // repeated .TSP.Reference infos = 1;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::TSP::Reference* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_infos();
  private:
  const ::TSP::Reference& _internal_infos(int index) const;
  ::TSP::Reference* _internal_add_infos();
  public:
  const ::TSP::Reference& infos(int index) const;
  ::TSP::Reference* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      infos() const;

  // repeated uint32 database_action_ghost_indexes = 2 [deprecated = true];
  PROTOBUF_DEPRECATED int database_action_ghost_indexes_size() const;
  private:
  int _internal_database_action_ghost_indexes_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_database_action_ghost_indexes();
  private:
  uint32_t _internal_database_action_ghost_indexes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_database_action_ghost_indexes() const;
  void _internal_add_database_action_ghost_indexes(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_database_action_ghost_indexes();
  public:
  PROTOBUF_DEPRECATED uint32_t database_action_ghost_indexes(int index) const;
  PROTOBUF_DEPRECATED void set_database_action_ghost_indexes(int index, uint32_t value);
  PROTOBUF_DEPRECATED void add_database_action_ghost_indexes(uint32_t value);
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      database_action_ghost_indexes() const;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_database_action_ghost_indexes();

  // repeated .TSP.IndexSet action_ghost_indexes = 3;
  int action_ghost_indexes_size() const;
  private:
  int _internal_action_ghost_indexes_size() const;
  public:
  void clear_action_ghost_indexes();
  ::TSP::IndexSet* mutable_action_ghost_indexes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::IndexSet >*
      mutable_action_ghost_indexes();
  private:
  const ::TSP::IndexSet& _internal_action_ghost_indexes(int index) const;
  ::TSP::IndexSet* _internal_add_action_ghost_indexes();
  public:
  const ::TSP::IndexSet& action_ghost_indexes(int index) const;
  ::TSP::IndexSet* add_action_ghost_indexes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::IndexSet >&
      action_ghost_indexes() const;

  // @@protoc_insertion_point(class_scope:KN.CanvasSelectionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > infos_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > database_action_ghost_indexes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::IndexSet > action_ghost_indexes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class ThemeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.ThemeArchive) */ {
 public:
  inline ThemeArchive() : ThemeArchive(nullptr) {}
  ~ThemeArchive() override;
  explicit PROTOBUF_CONSTEXPR ThemeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThemeArchive(const ThemeArchive& from);
  ThemeArchive(ThemeArchive&& from) noexcept
    : ThemeArchive() {
    *this = ::std::move(from);
  }

  inline ThemeArchive& operator=(const ThemeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThemeArchive& operator=(ThemeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThemeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThemeArchive* internal_default_instance() {
    return reinterpret_cast<const ThemeArchive*>(
               &_ThemeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ThemeArchive& a, ThemeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ThemeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThemeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThemeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ThemeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ThemeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ThemeArchive& from) {
    ThemeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThemeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.ThemeArchive";
  }
  protected:
  explicit ThemeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMastersFieldNumber = 2,
    kClassicThemeRecordsFieldNumber = 4,
    kUuidFieldNumber = 3,
    kSuperFieldNumber = 1,
    kDefaultMasterSlideNodeFieldNumber = 5,
  };
  // repeated .TSP.Reference masters = 2;
  int masters_size() const;
  private:
  int _internal_masters_size() const;
  public:
  void clear_masters();
  ::TSP::Reference* mutable_masters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_masters();
  private:
  const ::TSP::Reference& _internal_masters(int index) const;
  ::TSP::Reference* _internal_add_masters();
  public:
  const ::TSP::Reference& masters(int index) const;
  ::TSP::Reference* add_masters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      masters() const;

  // repeated .TSP.Reference classicThemeRecords = 4;
  int classicthemerecords_size() const;
  private:
  int _internal_classicthemerecords_size() const;
  public:
  void clear_classicthemerecords();
  ::TSP::Reference* mutable_classicthemerecords(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_classicthemerecords();
  private:
  const ::TSP::Reference& _internal_classicthemerecords(int index) const;
  ::TSP::Reference* _internal_add_classicthemerecords();
  public:
  const ::TSP::Reference& classicthemerecords(int index) const;
  ::TSP::Reference* add_classicthemerecords();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      classicthemerecords() const;

  // optional string uuid = 3;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // required .TSS.ThemeArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::ThemeArchive& super() const;
  PROTOBUF_NODISCARD ::TSS::ThemeArchive* release_super();
  ::TSS::ThemeArchive* mutable_super();
  void set_allocated_super(::TSS::ThemeArchive* super);
  private:
  const ::TSS::ThemeArchive& _internal_super() const;
  ::TSS::ThemeArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::ThemeArchive* super);
  ::TSS::ThemeArchive* unsafe_arena_release_super();

  // optional .TSP.Reference defaultMasterSlideNode = 5;
  bool has_defaultmasterslidenode() const;
  private:
  bool _internal_has_defaultmasterslidenode() const;
  public:
  void clear_defaultmasterslidenode();
  const ::TSP::Reference& defaultmasterslidenode() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_defaultmasterslidenode();
  ::TSP::Reference* mutable_defaultmasterslidenode();
  void set_allocated_defaultmasterslidenode(::TSP::Reference* defaultmasterslidenode);
  private:
  const ::TSP::Reference& _internal_defaultmasterslidenode() const;
  ::TSP::Reference* _internal_mutable_defaultmasterslidenode();
  public:
  void unsafe_arena_set_allocated_defaultmasterslidenode(
      ::TSP::Reference* defaultmasterslidenode);
  ::TSP::Reference* unsafe_arena_release_defaultmasterslidenode();

  // @@protoc_insertion_point(class_scope:KN.ThemeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > masters_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > classicthemerecords_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::TSS::ThemeArchive* super_;
    ::TSP::Reference* defaultmasterslidenode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class SlideTreeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.SlideTreeArchive) */ {
 public:
  inline SlideTreeArchive() : SlideTreeArchive(nullptr) {}
  ~SlideTreeArchive() override;
  explicit PROTOBUF_CONSTEXPR SlideTreeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlideTreeArchive(const SlideTreeArchive& from);
  SlideTreeArchive(SlideTreeArchive&& from) noexcept
    : SlideTreeArchive() {
    *this = ::std::move(from);
  }

  inline SlideTreeArchive& operator=(const SlideTreeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlideTreeArchive& operator=(SlideTreeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlideTreeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlideTreeArchive* internal_default_instance() {
    return reinterpret_cast<const SlideTreeArchive*>(
               &_SlideTreeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SlideTreeArchive& a, SlideTreeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SlideTreeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlideTreeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SlideTreeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SlideTreeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlideTreeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SlideTreeArchive& from) {
    SlideTreeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlideTreeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.SlideTreeArchive";
  }
  protected:
  explicit SlideTreeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootSlideNodeFieldNumber = 1,
  };
  // optional .TSP.Reference rootSlideNode = 1;
  bool has_rootslidenode() const;
  private:
  bool _internal_has_rootslidenode() const;
  public:
  void clear_rootslidenode();
  const ::TSP::Reference& rootslidenode() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_rootslidenode();
  ::TSP::Reference* mutable_rootslidenode();
  void set_allocated_rootslidenode(::TSP::Reference* rootslidenode);
  private:
  const ::TSP::Reference& _internal_rootslidenode() const;
  ::TSP::Reference* _internal_mutable_rootslidenode();
  public:
  void unsafe_arena_set_allocated_rootslidenode(
      ::TSP::Reference* rootslidenode);
  ::TSP::Reference* unsafe_arena_release_rootslidenode();

  // @@protoc_insertion_point(class_scope:KN.SlideTreeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* rootslidenode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class ShowArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.ShowArchive) */ {
 public:
  inline ShowArchive() : ShowArchive(nullptr) {}
  ~ShowArchive() override;
  explicit PROTOBUF_CONSTEXPR ShowArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShowArchive(const ShowArchive& from);
  ShowArchive(ShowArchive&& from) noexcept
    : ShowArchive() {
    *this = ::std::move(from);
  }

  inline ShowArchive& operator=(const ShowArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowArchive& operator=(ShowArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShowArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShowArchive* internal_default_instance() {
    return reinterpret_cast<const ShowArchive*>(
               &_ShowArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ShowArchive& a, ShowArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShowArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShowArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShowArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShowArchive& from) {
    ShowArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.ShowArchive";
  }
  protected:
  explicit ShowArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ShowArchive_KNShowMode KNShowMode;
  static constexpr KNShowMode kKNShowModeNormal =
    ShowArchive_KNShowMode_kKNShowModeNormal;
  static constexpr KNShowMode kKNShowModeAutoPlay =
    ShowArchive_KNShowMode_kKNShowModeAutoPlay;
  static constexpr KNShowMode kKNShowModeHyperlinksOnly =
    ShowArchive_KNShowMode_kKNShowModeHyperlinksOnly;
  static inline bool KNShowMode_IsValid(int value) {
    return ShowArchive_KNShowMode_IsValid(value);
  }
  static constexpr KNShowMode KNShowMode_MIN =
    ShowArchive_KNShowMode_KNShowMode_MIN;
  static constexpr KNShowMode KNShowMode_MAX =
    ShowArchive_KNShowMode_KNShowMode_MAX;
  static constexpr int KNShowMode_ARRAYSIZE =
    ShowArchive_KNShowMode_KNShowMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  KNShowMode_descriptor() {
    return ShowArchive_KNShowMode_descriptor();
  }
  template<typename T>
  static inline const std::string& KNShowMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, KNShowMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function KNShowMode_Name.");
    return ShowArchive_KNShowMode_Name(enum_t_value);
  }
  static inline bool KNShowMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      KNShowMode* value) {
    return ShowArchive_KNShowMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUiStateFieldNumber = 1,
    kThemeFieldNumber = 2,
    kSlideTreeFieldNumber = 3,
    kSizeFieldNumber = 4,
    kStylesheetFieldNumber = 5,
    kRecordingFieldNumber = 7,
    kSoundtrackFieldNumber = 17,
    kModeFieldNumber = 9,
    kSlideNumbersVisibleFieldNumber = 6,
    kLoopPresentationFieldNumber = 8,
    kIdleTimerActiveFieldNumber = 15,
    kAutomaticallyPlaysUponOpenFieldNumber = 18,
    kAutoplayTransitionDelayFieldNumber = 10,
    kAutoplayBuildDelayFieldNumber = 11,
    kIdleTimerDelayFieldNumber = 16,
  };
  // optional .TSP.Reference uiState = 1;
  bool has_uistate() const;
  private:
  bool _internal_has_uistate() const;
  public:
  void clear_uistate();
  const ::TSP::Reference& uistate() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_uistate();
  ::TSP::Reference* mutable_uistate();
  void set_allocated_uistate(::TSP::Reference* uistate);
  private:
  const ::TSP::Reference& _internal_uistate() const;
  ::TSP::Reference* _internal_mutable_uistate();
  public:
  void unsafe_arena_set_allocated_uistate(
      ::TSP::Reference* uistate);
  ::TSP::Reference* unsafe_arena_release_uistate();

  // required .TSP.Reference theme = 2;
  bool has_theme() const;
  private:
  bool _internal_has_theme() const;
  public:
  void clear_theme();
  const ::TSP::Reference& theme() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_theme();
  ::TSP::Reference* mutable_theme();
  void set_allocated_theme(::TSP::Reference* theme);
  private:
  const ::TSP::Reference& _internal_theme() const;
  ::TSP::Reference* _internal_mutable_theme();
  public:
  void unsafe_arena_set_allocated_theme(
      ::TSP::Reference* theme);
  ::TSP::Reference* unsafe_arena_release_theme();

  // required .KN.SlideTreeArchive slideTree = 3;
  bool has_slidetree() const;
  private:
  bool _internal_has_slidetree() const;
  public:
  void clear_slidetree();
  const ::KN::SlideTreeArchive& slidetree() const;
  PROTOBUF_NODISCARD ::KN::SlideTreeArchive* release_slidetree();
  ::KN::SlideTreeArchive* mutable_slidetree();
  void set_allocated_slidetree(::KN::SlideTreeArchive* slidetree);
  private:
  const ::KN::SlideTreeArchive& _internal_slidetree() const;
  ::KN::SlideTreeArchive* _internal_mutable_slidetree();
  public:
  void unsafe_arena_set_allocated_slidetree(
      ::KN::SlideTreeArchive* slidetree);
  ::KN::SlideTreeArchive* unsafe_arena_release_slidetree();

  // required .TSP.Size size = 4;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::TSP::Size& size() const;
  PROTOBUF_NODISCARD ::TSP::Size* release_size();
  ::TSP::Size* mutable_size();
  void set_allocated_size(::TSP::Size* size);
  private:
  const ::TSP::Size& _internal_size() const;
  ::TSP::Size* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::TSP::Size* size);
  ::TSP::Size* unsafe_arena_release_size();

  // required .TSP.Reference stylesheet = 5;
  bool has_stylesheet() const;
  private:
  bool _internal_has_stylesheet() const;
  public:
  void clear_stylesheet();
  const ::TSP::Reference& stylesheet() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_stylesheet();
  ::TSP::Reference* mutable_stylesheet();
  void set_allocated_stylesheet(::TSP::Reference* stylesheet);
  private:
  const ::TSP::Reference& _internal_stylesheet() const;
  ::TSP::Reference* _internal_mutable_stylesheet();
  public:
  void unsafe_arena_set_allocated_stylesheet(
      ::TSP::Reference* stylesheet);
  ::TSP::Reference* unsafe_arena_release_stylesheet();

  // optional .TSP.Reference recording = 7;
  bool has_recording() const;
  private:
  bool _internal_has_recording() const;
  public:
  void clear_recording();
  const ::TSP::Reference& recording() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_recording();
  ::TSP::Reference* mutable_recording();
  void set_allocated_recording(::TSP::Reference* recording);
  private:
  const ::TSP::Reference& _internal_recording() const;
  ::TSP::Reference* _internal_mutable_recording();
  public:
  void unsafe_arena_set_allocated_recording(
      ::TSP::Reference* recording);
  ::TSP::Reference* unsafe_arena_release_recording();

  // optional .TSP.Reference soundtrack = 17;
  bool has_soundtrack() const;
  private:
  bool _internal_has_soundtrack() const;
  public:
  void clear_soundtrack();
  const ::TSP::Reference& soundtrack() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_soundtrack();
  ::TSP::Reference* mutable_soundtrack();
  void set_allocated_soundtrack(::TSP::Reference* soundtrack);
  private:
  const ::TSP::Reference& _internal_soundtrack() const;
  ::TSP::Reference* _internal_mutable_soundtrack();
  public:
  void unsafe_arena_set_allocated_soundtrack(
      ::TSP::Reference* soundtrack);
  ::TSP::Reference* unsafe_arena_release_soundtrack();

  // optional .KN.ShowArchive.KNShowMode mode = 9 [default = kKNShowModeNormal];
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::KN::ShowArchive_KNShowMode mode() const;
  void set_mode(::KN::ShowArchive_KNShowMode value);
  private:
  ::KN::ShowArchive_KNShowMode _internal_mode() const;
  void _internal_set_mode(::KN::ShowArchive_KNShowMode value);
  public:

  // optional bool slideNumbersVisible = 6;
  bool has_slidenumbersvisible() const;
  private:
  bool _internal_has_slidenumbersvisible() const;
  public:
  void clear_slidenumbersvisible();
  bool slidenumbersvisible() const;
  void set_slidenumbersvisible(bool value);
  private:
  bool _internal_slidenumbersvisible() const;
  void _internal_set_slidenumbersvisible(bool value);
  public:

  // optional bool loop_presentation = 8;
  bool has_loop_presentation() const;
  private:
  bool _internal_has_loop_presentation() const;
  public:
  void clear_loop_presentation();
  bool loop_presentation() const;
  void set_loop_presentation(bool value);
  private:
  bool _internal_loop_presentation() const;
  void _internal_set_loop_presentation(bool value);
  public:

  // optional bool idle_timer_active = 15;
  bool has_idle_timer_active() const;
  private:
  bool _internal_has_idle_timer_active() const;
  public:
  void clear_idle_timer_active();
  bool idle_timer_active() const;
  void set_idle_timer_active(bool value);
  private:
  bool _internal_idle_timer_active() const;
  void _internal_set_idle_timer_active(bool value);
  public:

  // optional bool automatically_plays_upon_open = 18;
  bool has_automatically_plays_upon_open() const;
  private:
  bool _internal_has_automatically_plays_upon_open() const;
  public:
  void clear_automatically_plays_upon_open();
  bool automatically_plays_upon_open() const;
  void set_automatically_plays_upon_open(bool value);
  private:
  bool _internal_automatically_plays_upon_open() const;
  void _internal_set_automatically_plays_upon_open(bool value);
  public:

  // optional double autoplay_transition_delay = 10 [default = 5];
  bool has_autoplay_transition_delay() const;
  private:
  bool _internal_has_autoplay_transition_delay() const;
  public:
  void clear_autoplay_transition_delay();
  double autoplay_transition_delay() const;
  void set_autoplay_transition_delay(double value);
  private:
  double _internal_autoplay_transition_delay() const;
  void _internal_set_autoplay_transition_delay(double value);
  public:

  // optional double autoplay_build_delay = 11 [default = 2];
  bool has_autoplay_build_delay() const;
  private:
  bool _internal_has_autoplay_build_delay() const;
  public:
  void clear_autoplay_build_delay();
  double autoplay_build_delay() const;
  void set_autoplay_build_delay(double value);
  private:
  double _internal_autoplay_build_delay() const;
  void _internal_set_autoplay_build_delay(double value);
  public:

  // optional double idle_timer_delay = 16 [default = 900];
  bool has_idle_timer_delay() const;
  private:
  bool _internal_has_idle_timer_delay() const;
  public:
  void clear_idle_timer_delay();
  double idle_timer_delay() const;
  void set_idle_timer_delay(double value);
  private:
  double _internal_idle_timer_delay() const;
  void _internal_set_idle_timer_delay(double value);
  public:

  // @@protoc_insertion_point(class_scope:KN.ShowArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* uistate_;
    ::TSP::Reference* theme_;
    ::KN::SlideTreeArchive* slidetree_;
    ::TSP::Size* size_;
    ::TSP::Reference* stylesheet_;
    ::TSP::Reference* recording_;
    ::TSP::Reference* soundtrack_;
    int mode_;
    bool slidenumbersvisible_;
    bool loop_presentation_;
    bool idle_timer_active_;
    bool automatically_plays_upon_open_;
    double autoplay_transition_delay_;
    double autoplay_build_delay_;
    double idle_timer_delay_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class DocumentArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.DocumentArchive) */ {
 public:
  inline DocumentArchive() : DocumentArchive(nullptr) {}
  ~DocumentArchive() override;
  explicit PROTOBUF_CONSTEXPR DocumentArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DocumentArchive(const DocumentArchive& from);
  DocumentArchive(DocumentArchive&& from) noexcept
    : DocumentArchive() {
    *this = ::std::move(from);
  }

  inline DocumentArchive& operator=(const DocumentArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DocumentArchive& operator=(DocumentArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DocumentArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DocumentArchive* internal_default_instance() {
    return reinterpret_cast<const DocumentArchive*>(
               &_DocumentArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(DocumentArchive& a, DocumentArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DocumentArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DocumentArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DocumentArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DocumentArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DocumentArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DocumentArchive& from) {
    DocumentArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocumentArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.DocumentArchive";
  }
  protected:
  explicit DocumentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowFieldNumber = 2,
    kSuperFieldNumber = 3,
    kTablesCustomFormatListFieldNumber = 4,
  };
  // required .TSP.Reference show = 2;
  bool has_show() const;
  private:
  bool _internal_has_show() const;
  public:
  void clear_show();
  const ::TSP::Reference& show() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_show();
  ::TSP::Reference* mutable_show();
  void set_allocated_show(::TSP::Reference* show);
  private:
  const ::TSP::Reference& _internal_show() const;
  ::TSP::Reference* _internal_mutable_show();
  public:
  void unsafe_arena_set_allocated_show(
      ::TSP::Reference* show);
  ::TSP::Reference* unsafe_arena_release_show();

  // required .TSA.DocumentArchive super = 3;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSA::DocumentArchive& super() const;
  PROTOBUF_NODISCARD ::TSA::DocumentArchive* release_super();
  ::TSA::DocumentArchive* mutable_super();
  void set_allocated_super(::TSA::DocumentArchive* super);
  private:
  const ::TSA::DocumentArchive& _internal_super() const;
  ::TSA::DocumentArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSA::DocumentArchive* super);
  ::TSA::DocumentArchive* unsafe_arena_release_super();

  // optional .TSP.Reference tables_custom_format_list = 4;
  bool has_tables_custom_format_list() const;
  private:
  bool _internal_has_tables_custom_format_list() const;
  public:
  void clear_tables_custom_format_list();
  const ::TSP::Reference& tables_custom_format_list() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_tables_custom_format_list();
  ::TSP::Reference* mutable_tables_custom_format_list();
  void set_allocated_tables_custom_format_list(::TSP::Reference* tables_custom_format_list);
  private:
  const ::TSP::Reference& _internal_tables_custom_format_list() const;
  ::TSP::Reference* _internal_mutable_tables_custom_format_list();
  public:
  void unsafe_arena_set_allocated_tables_custom_format_list(
      ::TSP::Reference* tables_custom_format_list);
  ::TSP::Reference* unsafe_arena_release_tables_custom_format_list();

  // @@protoc_insertion_point(class_scope:KN.DocumentArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* show_;
    ::TSA::DocumentArchive* super_;
    ::TSP::Reference* tables_custom_format_list_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class SlideStylePropertiesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.SlideStylePropertiesArchive) */ {
 public:
  inline SlideStylePropertiesArchive() : SlideStylePropertiesArchive(nullptr) {}
  ~SlideStylePropertiesArchive() override;
  explicit PROTOBUF_CONSTEXPR SlideStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlideStylePropertiesArchive(const SlideStylePropertiesArchive& from);
  SlideStylePropertiesArchive(SlideStylePropertiesArchive&& from) noexcept
    : SlideStylePropertiesArchive() {
    *this = ::std::move(from);
  }

  inline SlideStylePropertiesArchive& operator=(const SlideStylePropertiesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlideStylePropertiesArchive& operator=(SlideStylePropertiesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlideStylePropertiesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlideStylePropertiesArchive* internal_default_instance() {
    return reinterpret_cast<const SlideStylePropertiesArchive*>(
               &_SlideStylePropertiesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SlideStylePropertiesArchive& a, SlideStylePropertiesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SlideStylePropertiesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlideStylePropertiesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SlideStylePropertiesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SlideStylePropertiesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlideStylePropertiesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SlideStylePropertiesArchive& from) {
    SlideStylePropertiesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlideStylePropertiesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.SlideStylePropertiesArchive";
  }
  protected:
  explicit SlideStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFillFieldNumber = 1,
    kTransitionFieldNumber = 2,
    kTransitionNullFieldNumber = 3,
    kTitlePlaceholderVisibilityFieldNumber = 4,
    kBodyPlaceholderVisibilityFieldNumber = 5,
    kObjectPlaceholderVisibilityFieldNumber = 7,
    kSlideNumberPlaceholderVisibilityFieldNumber = 6,
  };
  // optional .TSD.FillArchive fill = 1;
  bool has_fill() const;
  private:
  bool _internal_has_fill() const;
  public:
  void clear_fill();
  const ::TSD::FillArchive& fill() const;
  PROTOBUF_NODISCARD ::TSD::FillArchive* release_fill();
  ::TSD::FillArchive* mutable_fill();
  void set_allocated_fill(::TSD::FillArchive* fill);
  private:
  const ::TSD::FillArchive& _internal_fill() const;
  ::TSD::FillArchive* _internal_mutable_fill();
  public:
  void unsafe_arena_set_allocated_fill(
      ::TSD::FillArchive* fill);
  ::TSD::FillArchive* unsafe_arena_release_fill();

  // optional .KN.TransitionAttributesArchive transition = 2;
  bool has_transition() const;
  private:
  bool _internal_has_transition() const;
  public:
  void clear_transition();
  const ::KN::TransitionAttributesArchive& transition() const;
  PROTOBUF_NODISCARD ::KN::TransitionAttributesArchive* release_transition();
  ::KN::TransitionAttributesArchive* mutable_transition();
  void set_allocated_transition(::KN::TransitionAttributesArchive* transition);
  private:
  const ::KN::TransitionAttributesArchive& _internal_transition() const;
  ::KN::TransitionAttributesArchive* _internal_mutable_transition();
  public:
  void unsafe_arena_set_allocated_transition(
      ::KN::TransitionAttributesArchive* transition);
  ::KN::TransitionAttributesArchive* unsafe_arena_release_transition();

  // optional bool transition_null = 3;
  bool has_transition_null() const;
  private:
  bool _internal_has_transition_null() const;
  public:
  void clear_transition_null();
  bool transition_null() const;
  void set_transition_null(bool value);
  private:
  bool _internal_transition_null() const;
  void _internal_set_transition_null(bool value);
  public:

  // optional bool titlePlaceholderVisibility = 4;
  bool has_titleplaceholdervisibility() const;
  private:
  bool _internal_has_titleplaceholdervisibility() const;
  public:
  void clear_titleplaceholdervisibility();
  bool titleplaceholdervisibility() const;
  void set_titleplaceholdervisibility(bool value);
  private:
  bool _internal_titleplaceholdervisibility() const;
  void _internal_set_titleplaceholdervisibility(bool value);
  public:

  // optional bool bodyPlaceholderVisibility = 5;
  bool has_bodyplaceholdervisibility() const;
  private:
  bool _internal_has_bodyplaceholdervisibility() const;
  public:
  void clear_bodyplaceholdervisibility();
  bool bodyplaceholdervisibility() const;
  void set_bodyplaceholdervisibility(bool value);
  private:
  bool _internal_bodyplaceholdervisibility() const;
  void _internal_set_bodyplaceholdervisibility(bool value);
  public:

  // optional bool objectPlaceholderVisibility = 7;
  bool has_objectplaceholdervisibility() const;
  private:
  bool _internal_has_objectplaceholdervisibility() const;
  public:
  void clear_objectplaceholdervisibility();
  bool objectplaceholdervisibility() const;
  void set_objectplaceholdervisibility(bool value);
  private:
  bool _internal_objectplaceholdervisibility() const;
  void _internal_set_objectplaceholdervisibility(bool value);
  public:

  // optional bool slideNumberPlaceholderVisibility = 6;
  bool has_slidenumberplaceholdervisibility() const;
  private:
  bool _internal_has_slidenumberplaceholdervisibility() const;
  public:
  void clear_slidenumberplaceholdervisibility();
  bool slidenumberplaceholdervisibility() const;
  void set_slidenumberplaceholdervisibility(bool value);
  private:
  bool _internal_slidenumberplaceholdervisibility() const;
  void _internal_set_slidenumberplaceholdervisibility(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.SlideStylePropertiesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSD::FillArchive* fill_;
    ::KN::TransitionAttributesArchive* transition_;
    bool transition_null_;
    bool titleplaceholdervisibility_;
    bool bodyplaceholdervisibility_;
    bool objectplaceholdervisibility_;
    bool slidenumberplaceholdervisibility_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class SlideStyleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.SlideStyleArchive) */ {
 public:
  inline SlideStyleArchive() : SlideStyleArchive(nullptr) {}
  ~SlideStyleArchive() override;
  explicit PROTOBUF_CONSTEXPR SlideStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlideStyleArchive(const SlideStyleArchive& from);
  SlideStyleArchive(SlideStyleArchive&& from) noexcept
    : SlideStyleArchive() {
    *this = ::std::move(from);
  }

  inline SlideStyleArchive& operator=(const SlideStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlideStyleArchive& operator=(SlideStyleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlideStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlideStyleArchive* internal_default_instance() {
    return reinterpret_cast<const SlideStyleArchive*>(
               &_SlideStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SlideStyleArchive& a, SlideStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SlideStyleArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlideStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SlideStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SlideStyleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlideStyleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SlideStyleArchive& from) {
    SlideStyleArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlideStyleArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.SlideStyleArchive";
  }
  protected:
  explicit SlideStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSlidePropertiesFieldNumber = 11,
    kOverrideCountFieldNumber = 10,
  };
  // required .TSS.StyleArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::StyleArchive& super() const;
  PROTOBUF_NODISCARD ::TSS::StyleArchive* release_super();
  ::TSS::StyleArchive* mutable_super();
  void set_allocated_super(::TSS::StyleArchive* super);
  private:
  const ::TSS::StyleArchive& _internal_super() const;
  ::TSS::StyleArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::StyleArchive* super);
  ::TSS::StyleArchive* unsafe_arena_release_super();

  // optional .KN.SlideStylePropertiesArchive slide_properties = 11;
  bool has_slide_properties() const;
  private:
  bool _internal_has_slide_properties() const;
  public:
  void clear_slide_properties();
  const ::KN::SlideStylePropertiesArchive& slide_properties() const;
  PROTOBUF_NODISCARD ::KN::SlideStylePropertiesArchive* release_slide_properties();
  ::KN::SlideStylePropertiesArchive* mutable_slide_properties();
  void set_allocated_slide_properties(::KN::SlideStylePropertiesArchive* slide_properties);
  private:
  const ::KN::SlideStylePropertiesArchive& _internal_slide_properties() const;
  ::KN::SlideStylePropertiesArchive* _internal_mutable_slide_properties();
  public:
  void unsafe_arena_set_allocated_slide_properties(
      ::KN::SlideStylePropertiesArchive* slide_properties);
  ::KN::SlideStylePropertiesArchive* unsafe_arena_release_slide_properties();

  // optional uint32 override_count = 10 [default = 0];
  bool has_override_count() const;
  private:
  bool _internal_has_override_count() const;
  public:
  void clear_override_count();
  uint32_t override_count() const;
  void set_override_count(uint32_t value);
  private:
  uint32_t _internal_override_count() const;
  void _internal_set_override_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:KN.SlideStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSS::StyleArchive* super_;
    ::KN::SlideStylePropertiesArchive* slide_properties_;
    uint32_t override_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class PasteboardNativeStorageArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.PasteboardNativeStorageArchive) */ {
 public:
  inline PasteboardNativeStorageArchive() : PasteboardNativeStorageArchive(nullptr) {}
  ~PasteboardNativeStorageArchive() override;
  explicit PROTOBUF_CONSTEXPR PasteboardNativeStorageArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PasteboardNativeStorageArchive(const PasteboardNativeStorageArchive& from);
  PasteboardNativeStorageArchive(PasteboardNativeStorageArchive&& from) noexcept
    : PasteboardNativeStorageArchive() {
    *this = ::std::move(from);
  }

  inline PasteboardNativeStorageArchive& operator=(const PasteboardNativeStorageArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasteboardNativeStorageArchive& operator=(PasteboardNativeStorageArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PasteboardNativeStorageArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PasteboardNativeStorageArchive* internal_default_instance() {
    return reinterpret_cast<const PasteboardNativeStorageArchive*>(
               &_PasteboardNativeStorageArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(PasteboardNativeStorageArchive& a, PasteboardNativeStorageArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PasteboardNativeStorageArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PasteboardNativeStorageArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PasteboardNativeStorageArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PasteboardNativeStorageArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PasteboardNativeStorageArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PasteboardNativeStorageArchive& from) {
    PasteboardNativeStorageArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PasteboardNativeStorageArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.PasteboardNativeStorageArchive";
  }
  protected:
  explicit PasteboardNativeStorageArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawablesFieldNumber = 1,
    kBuildsFieldNumber = 2,
    kBuildChunksFieldNumber = 3,
    kSlideNodesFieldNumber = 4,
    kTitleRangesFieldNumber = 6,
    kOriginalShowSizeFieldNumber = 5,
  };
  // repeated .TSP.Reference drawables = 1;
  int drawables_size() const;
  private:
  int _internal_drawables_size() const;
  public:
  void clear_drawables();
  ::TSP::Reference* mutable_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_drawables();
  private:
  const ::TSP::Reference& _internal_drawables(int index) const;
  ::TSP::Reference* _internal_add_drawables();
  public:
  const ::TSP::Reference& drawables(int index) const;
  ::TSP::Reference* add_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      drawables() const;

  // repeated .TSP.Reference builds = 2;
  int builds_size() const;
  private:
  int _internal_builds_size() const;
  public:
  void clear_builds();
  ::TSP::Reference* mutable_builds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_builds();
  private:
  const ::TSP::Reference& _internal_builds(int index) const;
  ::TSP::Reference* _internal_add_builds();
  public:
  const ::TSP::Reference& builds(int index) const;
  ::TSP::Reference* add_builds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      builds() const;

  // repeated .KN.BuildChunkArchive buildChunks = 3;
  int buildchunks_size() const;
  private:
  int _internal_buildchunks_size() const;
  public:
  void clear_buildchunks();
  ::KN::BuildChunkArchive* mutable_buildchunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkArchive >*
      mutable_buildchunks();
  private:
  const ::KN::BuildChunkArchive& _internal_buildchunks(int index) const;
  ::KN::BuildChunkArchive* _internal_add_buildchunks();
  public:
  const ::KN::BuildChunkArchive& buildchunks(int index) const;
  ::KN::BuildChunkArchive* add_buildchunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkArchive >&
      buildchunks() const;

  // repeated .TSP.Reference slideNodes = 4;
  int slidenodes_size() const;
  private:
  int _internal_slidenodes_size() const;
  public:
  void clear_slidenodes();
  ::TSP::Reference* mutable_slidenodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_slidenodes();
  private:
  const ::TSP::Reference& _internal_slidenodes(int index) const;
  ::TSP::Reference* _internal_add_slidenodes();
  public:
  const ::TSP::Reference& slidenodes(int index) const;
  ::TSP::Reference* add_slidenodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      slidenodes() const;

  // repeated .TSP.Range titleRanges = 6;
  int titleranges_size() const;
  private:
  int _internal_titleranges_size() const;
  public:
  void clear_titleranges();
  ::TSP::Range* mutable_titleranges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >*
      mutable_titleranges();
  private:
  const ::TSP::Range& _internal_titleranges(int index) const;
  ::TSP::Range* _internal_add_titleranges();
  public:
  const ::TSP::Range& titleranges(int index) const;
  ::TSP::Range* add_titleranges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >&
      titleranges() const;

  // optional .TSP.Size originalShowSize = 5;
  bool has_originalshowsize() const;
  private:
  bool _internal_has_originalshowsize() const;
  public:
  void clear_originalshowsize();
  const ::TSP::Size& originalshowsize() const;
  PROTOBUF_NODISCARD ::TSP::Size* release_originalshowsize();
  ::TSP::Size* mutable_originalshowsize();
  void set_allocated_originalshowsize(::TSP::Size* originalshowsize);
  private:
  const ::TSP::Size& _internal_originalshowsize() const;
  ::TSP::Size* _internal_mutable_originalshowsize();
  public:
  void unsafe_arena_set_allocated_originalshowsize(
      ::TSP::Size* originalshowsize);
  ::TSP::Size* unsafe_arena_release_originalshowsize();

  // @@protoc_insertion_point(class_scope:KN.PasteboardNativeStorageArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > drawables_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > builds_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkArchive > buildchunks_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > slidenodes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range > titleranges_;
    ::TSP::Size* originalshowsize_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class MasterChangeBlobArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.MasterChangeBlobArchive) */ {
 public:
  inline MasterChangeBlobArchive() : MasterChangeBlobArchive(nullptr) {}
  ~MasterChangeBlobArchive() override;
  explicit PROTOBUF_CONSTEXPR MasterChangeBlobArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MasterChangeBlobArchive(const MasterChangeBlobArchive& from);
  MasterChangeBlobArchive(MasterChangeBlobArchive&& from) noexcept
    : MasterChangeBlobArchive() {
    *this = ::std::move(from);
  }

  inline MasterChangeBlobArchive& operator=(const MasterChangeBlobArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MasterChangeBlobArchive& operator=(MasterChangeBlobArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MasterChangeBlobArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MasterChangeBlobArchive* internal_default_instance() {
    return reinterpret_cast<const MasterChangeBlobArchive*>(
               &_MasterChangeBlobArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(MasterChangeBlobArchive& a, MasterChangeBlobArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MasterChangeBlobArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MasterChangeBlobArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MasterChangeBlobArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MasterChangeBlobArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MasterChangeBlobArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MasterChangeBlobArchive& from) {
    MasterChangeBlobArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MasterChangeBlobArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.MasterChangeBlobArchive";
  }
  protected:
  explicit MasterChangeBlobArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawablesFieldNumber = 6,
    kSlideFieldNumber = 1,
    kMasterFieldNumber = 2,
    kSlideStyleFieldNumber = 3,
    kTitlePlaceholderFieldNumber = 4,
    kBodyPlaceholderFieldNumber = 5,
    kObjectPlaceholderFieldNumber = 7,
  };
  // repeated .TSP.Reference drawables = 6;
  int drawables_size() const;
  private:
  int _internal_drawables_size() const;
  public:
  void clear_drawables();
  ::TSP::Reference* mutable_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_drawables();
  private:
  const ::TSP::Reference& _internal_drawables(int index) const;
  ::TSP::Reference* _internal_add_drawables();
  public:
  const ::TSP::Reference& drawables(int index) const;
  ::TSP::Reference* add_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      drawables() const;

  // optional .TSP.Reference slide = 1;
  bool has_slide() const;
  private:
  bool _internal_has_slide() const;
  public:
  void clear_slide();
  const ::TSP::Reference& slide() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_slide();
  ::TSP::Reference* mutable_slide();
  void set_allocated_slide(::TSP::Reference* slide);
  private:
  const ::TSP::Reference& _internal_slide() const;
  ::TSP::Reference* _internal_mutable_slide();
  public:
  void unsafe_arena_set_allocated_slide(
      ::TSP::Reference* slide);
  ::TSP::Reference* unsafe_arena_release_slide();

  // optional .TSP.Reference master = 2;
  bool has_master() const;
  private:
  bool _internal_has_master() const;
  public:
  void clear_master();
  const ::TSP::Reference& master() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_master();
  ::TSP::Reference* mutable_master();
  void set_allocated_master(::TSP::Reference* master);
  private:
  const ::TSP::Reference& _internal_master() const;
  ::TSP::Reference* _internal_mutable_master();
  public:
  void unsafe_arena_set_allocated_master(
      ::TSP::Reference* master);
  ::TSP::Reference* unsafe_arena_release_master();

  // optional .TSP.Reference slide_style = 3;
  bool has_slide_style() const;
  private:
  bool _internal_has_slide_style() const;
  public:
  void clear_slide_style();
  const ::TSP::Reference& slide_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_slide_style();
  ::TSP::Reference* mutable_slide_style();
  void set_allocated_slide_style(::TSP::Reference* slide_style);
  private:
  const ::TSP::Reference& _internal_slide_style() const;
  ::TSP::Reference* _internal_mutable_slide_style();
  public:
  void unsafe_arena_set_allocated_slide_style(
      ::TSP::Reference* slide_style);
  ::TSP::Reference* unsafe_arena_release_slide_style();

  // optional .TSP.Reference title_placeholder = 4;
  bool has_title_placeholder() const;
  private:
  bool _internal_has_title_placeholder() const;
  public:
  void clear_title_placeholder();
  const ::TSP::Reference& title_placeholder() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_title_placeholder();
  ::TSP::Reference* mutable_title_placeholder();
  void set_allocated_title_placeholder(::TSP::Reference* title_placeholder);
  private:
  const ::TSP::Reference& _internal_title_placeholder() const;
  ::TSP::Reference* _internal_mutable_title_placeholder();
  public:
  void unsafe_arena_set_allocated_title_placeholder(
      ::TSP::Reference* title_placeholder);
  ::TSP::Reference* unsafe_arena_release_title_placeholder();

  // optional .TSP.Reference body_placeholder = 5;
  bool has_body_placeholder() const;
  private:
  bool _internal_has_body_placeholder() const;
  public:
  void clear_body_placeholder();
  const ::TSP::Reference& body_placeholder() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_body_placeholder();
  ::TSP::Reference* mutable_body_placeholder();
  void set_allocated_body_placeholder(::TSP::Reference* body_placeholder);
  private:
  const ::TSP::Reference& _internal_body_placeholder() const;
  ::TSP::Reference* _internal_mutable_body_placeholder();
  public:
  void unsafe_arena_set_allocated_body_placeholder(
      ::TSP::Reference* body_placeholder);
  ::TSP::Reference* unsafe_arena_release_body_placeholder();

  // optional .TSP.Reference object_placeholder = 7;
  bool has_object_placeholder() const;
  private:
  bool _internal_has_object_placeholder() const;
  public:
  void clear_object_placeholder();
  const ::TSP::Reference& object_placeholder() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_object_placeholder();
  ::TSP::Reference* mutable_object_placeholder();
  void set_allocated_object_placeholder(::TSP::Reference* object_placeholder);
  private:
  const ::TSP::Reference& _internal_object_placeholder() const;
  ::TSP::Reference* _internal_mutable_object_placeholder();
  public:
  void unsafe_arena_set_allocated_object_placeholder(
      ::TSP::Reference* object_placeholder);
  ::TSP::Reference* unsafe_arena_release_object_placeholder();

  // @@protoc_insertion_point(class_scope:KN.MasterChangeBlobArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > drawables_;
    ::TSP::Reference* slide_;
    ::TSP::Reference* master_;
    ::TSP::Reference* slide_style_;
    ::TSP::Reference* title_placeholder_;
    ::TSP::Reference* body_placeholder_;
    ::TSP::Reference* object_placeholder_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class RecordingArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.RecordingArchive) */ {
 public:
  inline RecordingArchive() : RecordingArchive(nullptr) {}
  ~RecordingArchive() override;
  explicit PROTOBUF_CONSTEXPR RecordingArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordingArchive(const RecordingArchive& from);
  RecordingArchive(RecordingArchive&& from) noexcept
    : RecordingArchive() {
    *this = ::std::move(from);
  }

  inline RecordingArchive& operator=(const RecordingArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordingArchive& operator=(RecordingArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordingArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordingArchive* internal_default_instance() {
    return reinterpret_cast<const RecordingArchive*>(
               &_RecordingArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(RecordingArchive& a, RecordingArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordingArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordingArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordingArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordingArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordingArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecordingArchive& from) {
    RecordingArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordingArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.RecordingArchive";
  }
  protected:
  explicit RecordingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RecordingArchive_RecordingSyncState RecordingSyncState;
  static constexpr RecordingSyncState kRecordingSyncStateInSyncWithShow =
    RecordingArchive_RecordingSyncState_kRecordingSyncStateInSyncWithShow;
  static constexpr RecordingSyncState kRecordingSyncStateOutOfSyncWithShow =
    RecordingArchive_RecordingSyncState_kRecordingSyncStateOutOfSyncWithShow;
  static inline bool RecordingSyncState_IsValid(int value) {
    return RecordingArchive_RecordingSyncState_IsValid(value);
  }
  static constexpr RecordingSyncState RecordingSyncState_MIN =
    RecordingArchive_RecordingSyncState_RecordingSyncState_MIN;
  static constexpr RecordingSyncState RecordingSyncState_MAX =
    RecordingArchive_RecordingSyncState_RecordingSyncState_MAX;
  static constexpr int RecordingSyncState_ARRAYSIZE =
    RecordingArchive_RecordingSyncState_RecordingSyncState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RecordingSyncState_descriptor() {
    return RecordingArchive_RecordingSyncState_descriptor();
  }
  template<typename T>
  static inline const std::string& RecordingSyncState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RecordingSyncState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RecordingSyncState_Name.");
    return RecordingArchive_RecordingSyncState_Name(enum_t_value);
  }
  static inline bool RecordingSyncState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RecordingSyncState* value) {
    return RecordingArchive_RecordingSyncState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEventTracksFieldNumber = 1,
    kMovieTrackFieldNumber = 2,
    kModificationDateFieldNumber = 5,
    kDurationFieldNumber = 3,
    kSyncStateFieldNumber = 4,
  };
  // repeated .TSP.Reference event_tracks = 1;
  int event_tracks_size() const;
  private:
  int _internal_event_tracks_size() const;
  public:
  void clear_event_tracks();
  ::TSP::Reference* mutable_event_tracks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_event_tracks();
  private:
  const ::TSP::Reference& _internal_event_tracks(int index) const;
  ::TSP::Reference* _internal_add_event_tracks();
  public:
  const ::TSP::Reference& event_tracks(int index) const;
  ::TSP::Reference* add_event_tracks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      event_tracks() const;

  // optional .TSP.Reference movie_track = 2;
  bool has_movie_track() const;
  private:
  bool _internal_has_movie_track() const;
  public:
  void clear_movie_track();
  const ::TSP::Reference& movie_track() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_movie_track();
  ::TSP::Reference* mutable_movie_track();
  void set_allocated_movie_track(::TSP::Reference* movie_track);
  private:
  const ::TSP::Reference& _internal_movie_track() const;
  ::TSP::Reference* _internal_mutable_movie_track();
  public:
  void unsafe_arena_set_allocated_movie_track(
      ::TSP::Reference* movie_track);
  ::TSP::Reference* unsafe_arena_release_movie_track();

  // optional .TSP.Date modification_date = 5;
  bool has_modification_date() const;
  private:
  bool _internal_has_modification_date() const;
  public:
  void clear_modification_date();
  const ::TSP::Date& modification_date() const;
  PROTOBUF_NODISCARD ::TSP::Date* release_modification_date();
  ::TSP::Date* mutable_modification_date();
  void set_allocated_modification_date(::TSP::Date* modification_date);
  private:
  const ::TSP::Date& _internal_modification_date() const;
  ::TSP::Date* _internal_mutable_modification_date();
  public:
  void unsafe_arena_set_allocated_modification_date(
      ::TSP::Date* modification_date);
  ::TSP::Date* unsafe_arena_release_modification_date();

  // optional double duration = 3;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  double duration() const;
  void set_duration(double value);
  private:
  double _internal_duration() const;
  void _internal_set_duration(double value);
  public:

  // optional .KN.RecordingArchive.RecordingSyncState sync_state = 4 [default = kRecordingSyncStateInSyncWithShow];
  bool has_sync_state() const;
  private:
  bool _internal_has_sync_state() const;
  public:
  void clear_sync_state();
  ::KN::RecordingArchive_RecordingSyncState sync_state() const;
  void set_sync_state(::KN::RecordingArchive_RecordingSyncState value);
  private:
  ::KN::RecordingArchive_RecordingSyncState _internal_sync_state() const;
  void _internal_set_sync_state(::KN::RecordingArchive_RecordingSyncState value);
  public:

  // @@protoc_insertion_point(class_scope:KN.RecordingArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > event_tracks_;
    ::TSP::Reference* movie_track_;
    ::TSP::Date* modification_date_;
    double duration_;
    int sync_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class RecordingEventTrackArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.RecordingEventTrackArchive) */ {
 public:
  inline RecordingEventTrackArchive() : RecordingEventTrackArchive(nullptr) {}
  ~RecordingEventTrackArchive() override;
  explicit PROTOBUF_CONSTEXPR RecordingEventTrackArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordingEventTrackArchive(const RecordingEventTrackArchive& from);
  RecordingEventTrackArchive(RecordingEventTrackArchive&& from) noexcept
    : RecordingEventTrackArchive() {
    *this = ::std::move(from);
  }

  inline RecordingEventTrackArchive& operator=(const RecordingEventTrackArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordingEventTrackArchive& operator=(RecordingEventTrackArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordingEventTrackArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordingEventTrackArchive* internal_default_instance() {
    return reinterpret_cast<const RecordingEventTrackArchive*>(
               &_RecordingEventTrackArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(RecordingEventTrackArchive& a, RecordingEventTrackArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordingEventTrackArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordingEventTrackArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordingEventTrackArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordingEventTrackArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordingEventTrackArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecordingEventTrackArchive& from) {
    RecordingEventTrackArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordingEventTrackArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.RecordingEventTrackArchive";
  }
  protected:
  explicit RecordingEventTrackArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .KN.RecordingEventArchive events = 2;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::KN::RecordingEventArchive* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::RecordingEventArchive >*
      mutable_events();
  private:
  const ::KN::RecordingEventArchive& _internal_events(int index) const;
  ::KN::RecordingEventArchive* _internal_add_events();
  public:
  const ::KN::RecordingEventArchive& events(int index) const;
  ::KN::RecordingEventArchive* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::RecordingEventArchive >&
      events() const;

  // optional string type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:KN.RecordingEventTrackArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::RecordingEventArchive > events_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class RecordingEventArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.RecordingEventArchive) */ {
 public:
  inline RecordingEventArchive() : RecordingEventArchive(nullptr) {}
  ~RecordingEventArchive() override;
  explicit PROTOBUF_CONSTEXPR RecordingEventArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordingEventArchive(const RecordingEventArchive& from);
  RecordingEventArchive(RecordingEventArchive&& from) noexcept
    : RecordingEventArchive() {
    *this = ::std::move(from);
  }

  inline RecordingEventArchive& operator=(const RecordingEventArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordingEventArchive& operator=(RecordingEventArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordingEventArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordingEventArchive* internal_default_instance() {
    return reinterpret_cast<const RecordingEventArchive*>(
               &_RecordingEventArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(RecordingEventArchive& a, RecordingEventArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordingEventArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordingEventArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordingEventArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordingEventArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordingEventArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecordingEventArchive& from) {
    RecordingEventArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordingEventArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.RecordingEventArchive";
  }
  protected:
  explicit RecordingEventArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNavigationEventArchiveFieldNumber = 1000,
    kLaserEventArchiveFieldNumber = 1001,
    kPauseEventArchiveFieldNumber = 1002,
    kMovieEventArchiveFieldNumber = 1003,
    kStartTimeFieldNumber = 1,
  };
  // optional .KN.RecordingNavigationEventArchive navigation_event_archive = 1000;
  bool has_navigation_event_archive() const;
  private:
  bool _internal_has_navigation_event_archive() const;
  public:
  void clear_navigation_event_archive();
  const ::KN::RecordingNavigationEventArchive& navigation_event_archive() const;
  PROTOBUF_NODISCARD ::KN::RecordingNavigationEventArchive* release_navigation_event_archive();
  ::KN::RecordingNavigationEventArchive* mutable_navigation_event_archive();
  void set_allocated_navigation_event_archive(::KN::RecordingNavigationEventArchive* navigation_event_archive);
  private:
  const ::KN::RecordingNavigationEventArchive& _internal_navigation_event_archive() const;
  ::KN::RecordingNavigationEventArchive* _internal_mutable_navigation_event_archive();
  public:
  void unsafe_arena_set_allocated_navigation_event_archive(
      ::KN::RecordingNavigationEventArchive* navigation_event_archive);
  ::KN::RecordingNavigationEventArchive* unsafe_arena_release_navigation_event_archive();

  // optional .KN.RecordingLaserEventArchive laser_event_archive = 1001;
  bool has_laser_event_archive() const;
  private:
  bool _internal_has_laser_event_archive() const;
  public:
  void clear_laser_event_archive();
  const ::KN::RecordingLaserEventArchive& laser_event_archive() const;
  PROTOBUF_NODISCARD ::KN::RecordingLaserEventArchive* release_laser_event_archive();
  ::KN::RecordingLaserEventArchive* mutable_laser_event_archive();
  void set_allocated_laser_event_archive(::KN::RecordingLaserEventArchive* laser_event_archive);
  private:
  const ::KN::RecordingLaserEventArchive& _internal_laser_event_archive() const;
  ::KN::RecordingLaserEventArchive* _internal_mutable_laser_event_archive();
  public:
  void unsafe_arena_set_allocated_laser_event_archive(
      ::KN::RecordingLaserEventArchive* laser_event_archive);
  ::KN::RecordingLaserEventArchive* unsafe_arena_release_laser_event_archive();

  // optional .KN.RecordingPauseEventArchive pause_event_archive = 1002;
  bool has_pause_event_archive() const;
  private:
  bool _internal_has_pause_event_archive() const;
  public:
  void clear_pause_event_archive();
  const ::KN::RecordingPauseEventArchive& pause_event_archive() const;
  PROTOBUF_NODISCARD ::KN::RecordingPauseEventArchive* release_pause_event_archive();
  ::KN::RecordingPauseEventArchive* mutable_pause_event_archive();
  void set_allocated_pause_event_archive(::KN::RecordingPauseEventArchive* pause_event_archive);
  private:
  const ::KN::RecordingPauseEventArchive& _internal_pause_event_archive() const;
  ::KN::RecordingPauseEventArchive* _internal_mutable_pause_event_archive();
  public:
  void unsafe_arena_set_allocated_pause_event_archive(
      ::KN::RecordingPauseEventArchive* pause_event_archive);
  ::KN::RecordingPauseEventArchive* unsafe_arena_release_pause_event_archive();

  // optional .KN.RecordingMovieEventArchive movie_event_archive = 1003;
  bool has_movie_event_archive() const;
  private:
  bool _internal_has_movie_event_archive() const;
  public:
  void clear_movie_event_archive();
  const ::KN::RecordingMovieEventArchive& movie_event_archive() const;
  PROTOBUF_NODISCARD ::KN::RecordingMovieEventArchive* release_movie_event_archive();
  ::KN::RecordingMovieEventArchive* mutable_movie_event_archive();
  void set_allocated_movie_event_archive(::KN::RecordingMovieEventArchive* movie_event_archive);
  private:
  const ::KN::RecordingMovieEventArchive& _internal_movie_event_archive() const;
  ::KN::RecordingMovieEventArchive* _internal_mutable_movie_event_archive();
  public:
  void unsafe_arena_set_allocated_movie_event_archive(
      ::KN::RecordingMovieEventArchive* movie_event_archive);
  ::KN::RecordingMovieEventArchive* unsafe_arena_release_movie_event_archive();

  // optional double start_time = 1 [default = -1];
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  double start_time() const;
  void set_start_time(double value);
  private:
  double _internal_start_time() const;
  void _internal_set_start_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:KN.RecordingEventArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::KN::RecordingNavigationEventArchive* navigation_event_archive_;
    ::KN::RecordingLaserEventArchive* laser_event_archive_;
    ::KN::RecordingPauseEventArchive* pause_event_archive_;
    ::KN::RecordingMovieEventArchive* movie_event_archive_;
    double start_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class RecordingNavigationEventArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.RecordingNavigationEventArchive) */ {
 public:
  inline RecordingNavigationEventArchive() : RecordingNavigationEventArchive(nullptr) {}
  ~RecordingNavigationEventArchive() override;
  explicit PROTOBUF_CONSTEXPR RecordingNavigationEventArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordingNavigationEventArchive(const RecordingNavigationEventArchive& from);
  RecordingNavigationEventArchive(RecordingNavigationEventArchive&& from) noexcept
    : RecordingNavigationEventArchive() {
    *this = ::std::move(from);
  }

  inline RecordingNavigationEventArchive& operator=(const RecordingNavigationEventArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordingNavigationEventArchive& operator=(RecordingNavigationEventArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordingNavigationEventArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordingNavigationEventArchive* internal_default_instance() {
    return reinterpret_cast<const RecordingNavigationEventArchive*>(
               &_RecordingNavigationEventArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(RecordingNavigationEventArchive& a, RecordingNavigationEventArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordingNavigationEventArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordingNavigationEventArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordingNavigationEventArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordingNavigationEventArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordingNavigationEventArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecordingNavigationEventArchive& from) {
    RecordingNavigationEventArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordingNavigationEventArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.RecordingNavigationEventArchive";
  }
  protected:
  explicit RecordingNavigationEventArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase RecordingNavigationEventAnimationPhase;
  static constexpr RecordingNavigationEventAnimationPhase kRecordingNavigationEventAnimationNone =
    RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_kRecordingNavigationEventAnimationNone;
  static constexpr RecordingNavigationEventAnimationPhase kRecordingNavigationEventAnimationStart =
    RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_kRecordingNavigationEventAnimationStart;
  static constexpr RecordingNavigationEventAnimationPhase kRecordingNavigationEventAnimationEnd =
    RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_kRecordingNavigationEventAnimationEnd;
  static inline bool RecordingNavigationEventAnimationPhase_IsValid(int value) {
    return RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_IsValid(value);
  }
  static constexpr RecordingNavigationEventAnimationPhase RecordingNavigationEventAnimationPhase_MIN =
    RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_RecordingNavigationEventAnimationPhase_MIN;
  static constexpr RecordingNavigationEventAnimationPhase RecordingNavigationEventAnimationPhase_MAX =
    RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_RecordingNavigationEventAnimationPhase_MAX;
  static constexpr int RecordingNavigationEventAnimationPhase_ARRAYSIZE =
    RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_RecordingNavigationEventAnimationPhase_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RecordingNavigationEventAnimationPhase_descriptor() {
    return RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_descriptor();
  }
  template<typename T>
  static inline const std::string& RecordingNavigationEventAnimationPhase_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RecordingNavigationEventAnimationPhase>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RecordingNavigationEventAnimationPhase_Name.");
    return RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_Name(enum_t_value);
  }
  static inline bool RecordingNavigationEventAnimationPhase_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RecordingNavigationEventAnimationPhase* value) {
    return RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTargetSlideNodeReferenceFieldNumber = 1,
    kTargetEventIndexFieldNumber = 2,
    kAnimationPhaseFieldNumber = 3,
  };
  // optional .TSP.Reference target_slide_node_reference = 1;
  bool has_target_slide_node_reference() const;
  private:
  bool _internal_has_target_slide_node_reference() const;
  public:
  void clear_target_slide_node_reference();
  const ::TSP::Reference& target_slide_node_reference() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_target_slide_node_reference();
  ::TSP::Reference* mutable_target_slide_node_reference();
  void set_allocated_target_slide_node_reference(::TSP::Reference* target_slide_node_reference);
  private:
  const ::TSP::Reference& _internal_target_slide_node_reference() const;
  ::TSP::Reference* _internal_mutable_target_slide_node_reference();
  public:
  void unsafe_arena_set_allocated_target_slide_node_reference(
      ::TSP::Reference* target_slide_node_reference);
  ::TSP::Reference* unsafe_arena_release_target_slide_node_reference();

  // optional uint32 target_event_index = 2;
  bool has_target_event_index() const;
  private:
  bool _internal_has_target_event_index() const;
  public:
  void clear_target_event_index();
  uint32_t target_event_index() const;
  void set_target_event_index(uint32_t value);
  private:
  uint32_t _internal_target_event_index() const;
  void _internal_set_target_event_index(uint32_t value);
  public:

  // optional .KN.RecordingNavigationEventArchive.RecordingNavigationEventAnimationPhase animation_phase = 3 [default = kRecordingNavigationEventAnimationNone];
  bool has_animation_phase() const;
  private:
  bool _internal_has_animation_phase() const;
  public:
  void clear_animation_phase();
  ::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase animation_phase() const;
  void set_animation_phase(::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase value);
  private:
  ::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase _internal_animation_phase() const;
  void _internal_set_animation_phase(::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase value);
  public:

  // @@protoc_insertion_point(class_scope:KN.RecordingNavigationEventArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* target_slide_node_reference_;
    uint32_t target_event_index_;
    int animation_phase_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class RecordingLaserEventArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.RecordingLaserEventArchive) */ {
 public:
  inline RecordingLaserEventArchive() : RecordingLaserEventArchive(nullptr) {}
  ~RecordingLaserEventArchive() override;
  explicit PROTOBUF_CONSTEXPR RecordingLaserEventArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordingLaserEventArchive(const RecordingLaserEventArchive& from);
  RecordingLaserEventArchive(RecordingLaserEventArchive&& from) noexcept
    : RecordingLaserEventArchive() {
    *this = ::std::move(from);
  }

  inline RecordingLaserEventArchive& operator=(const RecordingLaserEventArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordingLaserEventArchive& operator=(RecordingLaserEventArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordingLaserEventArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordingLaserEventArchive* internal_default_instance() {
    return reinterpret_cast<const RecordingLaserEventArchive*>(
               &_RecordingLaserEventArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(RecordingLaserEventArchive& a, RecordingLaserEventArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordingLaserEventArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordingLaserEventArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordingLaserEventArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordingLaserEventArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordingLaserEventArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecordingLaserEventArchive& from) {
    RecordingLaserEventArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordingLaserEventArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.RecordingLaserEventArchive";
  }
  protected:
  explicit RecordingLaserEventArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnscaledLocationFieldNumber = 1,
  };
  // optional .TSP.Point unscaled_location = 1;
  bool has_unscaled_location() const;
  private:
  bool _internal_has_unscaled_location() const;
  public:
  void clear_unscaled_location();
  const ::TSP::Point& unscaled_location() const;
  PROTOBUF_NODISCARD ::TSP::Point* release_unscaled_location();
  ::TSP::Point* mutable_unscaled_location();
  void set_allocated_unscaled_location(::TSP::Point* unscaled_location);
  private:
  const ::TSP::Point& _internal_unscaled_location() const;
  ::TSP::Point* _internal_mutable_unscaled_location();
  public:
  void unsafe_arena_set_allocated_unscaled_location(
      ::TSP::Point* unscaled_location);
  ::TSP::Point* unsafe_arena_release_unscaled_location();

  // @@protoc_insertion_point(class_scope:KN.RecordingLaserEventArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Point* unscaled_location_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class RecordingPauseEventArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.RecordingPauseEventArchive) */ {
 public:
  inline RecordingPauseEventArchive() : RecordingPauseEventArchive(nullptr) {}
  ~RecordingPauseEventArchive() override;
  explicit PROTOBUF_CONSTEXPR RecordingPauseEventArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordingPauseEventArchive(const RecordingPauseEventArchive& from);
  RecordingPauseEventArchive(RecordingPauseEventArchive&& from) noexcept
    : RecordingPauseEventArchive() {
    *this = ::std::move(from);
  }

  inline RecordingPauseEventArchive& operator=(const RecordingPauseEventArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordingPauseEventArchive& operator=(RecordingPauseEventArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordingPauseEventArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordingPauseEventArchive* internal_default_instance() {
    return reinterpret_cast<const RecordingPauseEventArchive*>(
               &_RecordingPauseEventArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(RecordingPauseEventArchive& a, RecordingPauseEventArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordingPauseEventArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordingPauseEventArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordingPauseEventArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordingPauseEventArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordingPauseEventArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecordingPauseEventArchive& from) {
    RecordingPauseEventArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordingPauseEventArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.RecordingPauseEventArchive";
  }
  protected:
  explicit RecordingPauseEventArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventType;
  static constexpr RecordingPauseEventType kRecordingPauseEventTypeResume =
    RecordingPauseEventArchive_RecordingPauseEventType_kRecordingPauseEventTypeResume;
  static constexpr RecordingPauseEventType kRecordingPauseEventTypePause =
    RecordingPauseEventArchive_RecordingPauseEventType_kRecordingPauseEventTypePause;
  static constexpr RecordingPauseEventType kRecordingPauseEventTypeConcealWithBlack =
    RecordingPauseEventArchive_RecordingPauseEventType_kRecordingPauseEventTypeConcealWithBlack;
  static constexpr RecordingPauseEventType kRecordingPauseEventTypeConcealWithWhite =
    RecordingPauseEventArchive_RecordingPauseEventType_kRecordingPauseEventTypeConcealWithWhite;
  static inline bool RecordingPauseEventType_IsValid(int value) {
    return RecordingPauseEventArchive_RecordingPauseEventType_IsValid(value);
  }
  static constexpr RecordingPauseEventType RecordingPauseEventType_MIN =
    RecordingPauseEventArchive_RecordingPauseEventType_RecordingPauseEventType_MIN;
  static constexpr RecordingPauseEventType RecordingPauseEventType_MAX =
    RecordingPauseEventArchive_RecordingPauseEventType_RecordingPauseEventType_MAX;
  static constexpr int RecordingPauseEventType_ARRAYSIZE =
    RecordingPauseEventArchive_RecordingPauseEventType_RecordingPauseEventType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RecordingPauseEventType_descriptor() {
    return RecordingPauseEventArchive_RecordingPauseEventType_descriptor();
  }
  template<typename T>
  static inline const std::string& RecordingPauseEventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RecordingPauseEventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RecordingPauseEventType_Name.");
    return RecordingPauseEventArchive_RecordingPauseEventType_Name(enum_t_value);
  }
  static inline bool RecordingPauseEventType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RecordingPauseEventType* value) {
    return RecordingPauseEventArchive_RecordingPauseEventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPauseEventTypeFieldNumber = 1,
  };
  // optional .KN.RecordingPauseEventArchive.RecordingPauseEventType pause_event_type = 1 [default = kRecordingPauseEventTypeResume];
  bool has_pause_event_type() const;
  private:
  bool _internal_has_pause_event_type() const;
  public:
  void clear_pause_event_type();
  ::KN::RecordingPauseEventArchive_RecordingPauseEventType pause_event_type() const;
  void set_pause_event_type(::KN::RecordingPauseEventArchive_RecordingPauseEventType value);
  private:
  ::KN::RecordingPauseEventArchive_RecordingPauseEventType _internal_pause_event_type() const;
  void _internal_set_pause_event_type(::KN::RecordingPauseEventArchive_RecordingPauseEventType value);
  public:

  // @@protoc_insertion_point(class_scope:KN.RecordingPauseEventArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int pause_event_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class RecordingMovieEventArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.RecordingMovieEventArchive) */ {
 public:
  inline RecordingMovieEventArchive() : RecordingMovieEventArchive(nullptr) {}
  ~RecordingMovieEventArchive() override;
  explicit PROTOBUF_CONSTEXPR RecordingMovieEventArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordingMovieEventArchive(const RecordingMovieEventArchive& from);
  RecordingMovieEventArchive(RecordingMovieEventArchive&& from) noexcept
    : RecordingMovieEventArchive() {
    *this = ::std::move(from);
  }

  inline RecordingMovieEventArchive& operator=(const RecordingMovieEventArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordingMovieEventArchive& operator=(RecordingMovieEventArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordingMovieEventArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordingMovieEventArchive* internal_default_instance() {
    return reinterpret_cast<const RecordingMovieEventArchive*>(
               &_RecordingMovieEventArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(RecordingMovieEventArchive& a, RecordingMovieEventArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordingMovieEventArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordingMovieEventArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordingMovieEventArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordingMovieEventArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordingMovieEventArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecordingMovieEventArchive& from) {
    RecordingMovieEventArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordingMovieEventArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.RecordingMovieEventArchive";
  }
  protected:
  explicit RecordingMovieEventArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventType;
  static constexpr RecordingMovieEventType kRecordingMovieEventNone =
    RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventNone;
  static constexpr RecordingMovieEventType kRecordingMovieEventSeek =
    RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventSeek;
  static constexpr RecordingMovieEventType kRecordingMovieEventSetRate =
    RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventSetRate;
  static constexpr RecordingMovieEventType kRecordingMovieEventStartPlayback =
    RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventStartPlayback;
  static constexpr RecordingMovieEventType kRecordingMovieEventStopPlayback =
    RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventStopPlayback;
  static constexpr RecordingMovieEventType kRecordingMovieEventBeginScrubbing =
    RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventBeginScrubbing;
  static constexpr RecordingMovieEventType kRecordingMovieEventEndScrubbing =
    RecordingMovieEventArchive_RecordingMovieEventType_kRecordingMovieEventEndScrubbing;
  static inline bool RecordingMovieEventType_IsValid(int value) {
    return RecordingMovieEventArchive_RecordingMovieEventType_IsValid(value);
  }
  static constexpr RecordingMovieEventType RecordingMovieEventType_MIN =
    RecordingMovieEventArchive_RecordingMovieEventType_RecordingMovieEventType_MIN;
  static constexpr RecordingMovieEventType RecordingMovieEventType_MAX =
    RecordingMovieEventArchive_RecordingMovieEventType_RecordingMovieEventType_MAX;
  static constexpr int RecordingMovieEventType_ARRAYSIZE =
    RecordingMovieEventArchive_RecordingMovieEventType_RecordingMovieEventType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RecordingMovieEventType_descriptor() {
    return RecordingMovieEventArchive_RecordingMovieEventType_descriptor();
  }
  template<typename T>
  static inline const std::string& RecordingMovieEventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RecordingMovieEventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RecordingMovieEventType_Name.");
    return RecordingMovieEventArchive_RecordingMovieEventType_Name(enum_t_value);
  }
  static inline bool RecordingMovieEventType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RecordingMovieEventType* value) {
    return RecordingMovieEventArchive_RecordingMovieEventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMovieInfoReferenceFieldNumber = 1,
    kMovieEventValueFieldNumber = 3,
    kMovieEventTypeFieldNumber = 2,
  };
  // optional .TSP.Reference movie_info_reference = 1;
  bool has_movie_info_reference() const;
  private:
  bool _internal_has_movie_info_reference() const;
  public:
  void clear_movie_info_reference();
  const ::TSP::Reference& movie_info_reference() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_movie_info_reference();
  ::TSP::Reference* mutable_movie_info_reference();
  void set_allocated_movie_info_reference(::TSP::Reference* movie_info_reference);
  private:
  const ::TSP::Reference& _internal_movie_info_reference() const;
  ::TSP::Reference* _internal_mutable_movie_info_reference();
  public:
  void unsafe_arena_set_allocated_movie_info_reference(
      ::TSP::Reference* movie_info_reference);
  ::TSP::Reference* unsafe_arena_release_movie_info_reference();

  // optional double movie_event_value = 3;
  bool has_movie_event_value() const;
  private:
  bool _internal_has_movie_event_value() const;
  public:
  void clear_movie_event_value();
  double movie_event_value() const;
  void set_movie_event_value(double value);
  private:
  double _internal_movie_event_value() const;
  void _internal_set_movie_event_value(double value);
  public:

  // optional .KN.RecordingMovieEventArchive.RecordingMovieEventType movie_event_type = 2 [default = kRecordingMovieEventSeek];
  bool has_movie_event_type() const;
  private:
  bool _internal_has_movie_event_type() const;
  public:
  void clear_movie_event_type();
  ::KN::RecordingMovieEventArchive_RecordingMovieEventType movie_event_type() const;
  void set_movie_event_type(::KN::RecordingMovieEventArchive_RecordingMovieEventType value);
  private:
  ::KN::RecordingMovieEventArchive_RecordingMovieEventType _internal_movie_event_type() const;
  void _internal_set_movie_event_type(::KN::RecordingMovieEventArchive_RecordingMovieEventType value);
  public:

  // @@protoc_insertion_point(class_scope:KN.RecordingMovieEventArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* movie_info_reference_;
    double movie_event_value_;
    int movie_event_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class RecordingMovieTrackArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.RecordingMovieTrackArchive) */ {
 public:
  inline RecordingMovieTrackArchive() : RecordingMovieTrackArchive(nullptr) {}
  ~RecordingMovieTrackArchive() override;
  explicit PROTOBUF_CONSTEXPR RecordingMovieTrackArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordingMovieTrackArchive(const RecordingMovieTrackArchive& from);
  RecordingMovieTrackArchive(RecordingMovieTrackArchive&& from) noexcept
    : RecordingMovieTrackArchive() {
    *this = ::std::move(from);
  }

  inline RecordingMovieTrackArchive& operator=(const RecordingMovieTrackArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordingMovieTrackArchive& operator=(RecordingMovieTrackArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordingMovieTrackArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordingMovieTrackArchive* internal_default_instance() {
    return reinterpret_cast<const RecordingMovieTrackArchive*>(
               &_RecordingMovieTrackArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(RecordingMovieTrackArchive& a, RecordingMovieTrackArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordingMovieTrackArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordingMovieTrackArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordingMovieTrackArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordingMovieTrackArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordingMovieTrackArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecordingMovieTrackArchive& from) {
    RecordingMovieTrackArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordingMovieTrackArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.RecordingMovieTrackArchive";
  }
  protected:
  explicit RecordingMovieTrackArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMovieSegmentsFieldNumber = 1,
  };
  // repeated .KN.MovieSegmentArchive movie_segments = 1;
  int movie_segments_size() const;
  private:
  int _internal_movie_segments_size() const;
  public:
  void clear_movie_segments();
  ::KN::MovieSegmentArchive* mutable_movie_segments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::MovieSegmentArchive >*
      mutable_movie_segments();
  private:
  const ::KN::MovieSegmentArchive& _internal_movie_segments(int index) const;
  ::KN::MovieSegmentArchive* _internal_add_movie_segments();
  public:
  const ::KN::MovieSegmentArchive& movie_segments(int index) const;
  ::KN::MovieSegmentArchive* add_movie_segments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::MovieSegmentArchive >&
      movie_segments() const;

  // @@protoc_insertion_point(class_scope:KN.RecordingMovieTrackArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::MovieSegmentArchive > movie_segments_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class MovieSegmentArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.MovieSegmentArchive) */ {
 public:
  inline MovieSegmentArchive() : MovieSegmentArchive(nullptr) {}
  ~MovieSegmentArchive() override;
  explicit PROTOBUF_CONSTEXPR MovieSegmentArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MovieSegmentArchive(const MovieSegmentArchive& from);
  MovieSegmentArchive(MovieSegmentArchive&& from) noexcept
    : MovieSegmentArchive() {
    *this = ::std::move(from);
  }

  inline MovieSegmentArchive& operator=(const MovieSegmentArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MovieSegmentArchive& operator=(MovieSegmentArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MovieSegmentArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MovieSegmentArchive* internal_default_instance() {
    return reinterpret_cast<const MovieSegmentArchive*>(
               &_MovieSegmentArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(MovieSegmentArchive& a, MovieSegmentArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MovieSegmentArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MovieSegmentArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MovieSegmentArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MovieSegmentArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MovieSegmentArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MovieSegmentArchive& from) {
    MovieSegmentArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MovieSegmentArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.MovieSegmentArchive";
  }
  protected:
  explicit MovieSegmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseMovieDataFieldNumber = 1,
    kMovieDataFieldNumber = 3,
    kStartTimeFieldNumber = 2,
  };
  // optional .TSP.Reference database_movie_data = 1;
  bool has_database_movie_data() const;
  private:
  bool _internal_has_database_movie_data() const;
  public:
  void clear_database_movie_data();
  const ::TSP::Reference& database_movie_data() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_database_movie_data();
  ::TSP::Reference* mutable_database_movie_data();
  void set_allocated_database_movie_data(::TSP::Reference* database_movie_data);
  private:
  const ::TSP::Reference& _internal_database_movie_data() const;
  ::TSP::Reference* _internal_mutable_database_movie_data();
  public:
  void unsafe_arena_set_allocated_database_movie_data(
      ::TSP::Reference* database_movie_data);
  ::TSP::Reference* unsafe_arena_release_database_movie_data();

  // optional .TSP.DataReference movie_data = 3;
  bool has_movie_data() const;
  private:
  bool _internal_has_movie_data() const;
  public:
  void clear_movie_data();
  const ::TSP::DataReference& movie_data() const;
  PROTOBUF_NODISCARD ::TSP::DataReference* release_movie_data();
  ::TSP::DataReference* mutable_movie_data();
  void set_allocated_movie_data(::TSP::DataReference* movie_data);
  private:
  const ::TSP::DataReference& _internal_movie_data() const;
  ::TSP::DataReference* _internal_mutable_movie_data();
  public:
  void unsafe_arena_set_allocated_movie_data(
      ::TSP::DataReference* movie_data);
  ::TSP::DataReference* unsafe_arena_release_movie_data();

  // optional double start_time = 2 [default = -1];
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  double start_time() const;
  void set_start_time(double value);
  private:
  double _internal_start_time() const;
  void _internal_set_start_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:KN.MovieSegmentArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* database_movie_data_;
    ::TSP::DataReference* movie_data_;
    double start_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class Soundtrack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.Soundtrack) */ {
 public:
  inline Soundtrack() : Soundtrack(nullptr) {}
  ~Soundtrack() override;
  explicit PROTOBUF_CONSTEXPR Soundtrack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Soundtrack(const Soundtrack& from);
  Soundtrack(Soundtrack&& from) noexcept
    : Soundtrack() {
    *this = ::std::move(from);
  }

  inline Soundtrack& operator=(const Soundtrack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Soundtrack& operator=(Soundtrack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Soundtrack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Soundtrack* internal_default_instance() {
    return reinterpret_cast<const Soundtrack*>(
               &_Soundtrack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(Soundtrack& a, Soundtrack& b) {
    a.Swap(&b);
  }
  inline void Swap(Soundtrack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Soundtrack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Soundtrack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Soundtrack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Soundtrack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Soundtrack& from) {
    Soundtrack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Soundtrack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.Soundtrack";
  }
  protected:
  explicit Soundtrack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Soundtrack_SoundtrackMode SoundtrackMode;
  static constexpr SoundtrackMode kKNSoundtrackModePlayOnce =
    Soundtrack_SoundtrackMode_kKNSoundtrackModePlayOnce;
  static constexpr SoundtrackMode kKNSoundtrackModeLoop =
    Soundtrack_SoundtrackMode_kKNSoundtrackModeLoop;
  static constexpr SoundtrackMode kKNSoundtrackModeDoNotPlay =
    Soundtrack_SoundtrackMode_kKNSoundtrackModeDoNotPlay;
  static inline bool SoundtrackMode_IsValid(int value) {
    return Soundtrack_SoundtrackMode_IsValid(value);
  }
  static constexpr SoundtrackMode SoundtrackMode_MIN =
    Soundtrack_SoundtrackMode_SoundtrackMode_MIN;
  static constexpr SoundtrackMode SoundtrackMode_MAX =
    Soundtrack_SoundtrackMode_SoundtrackMode_MAX;
  static constexpr int SoundtrackMode_ARRAYSIZE =
    Soundtrack_SoundtrackMode_SoundtrackMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SoundtrackMode_descriptor() {
    return Soundtrack_SoundtrackMode_descriptor();
  }
  template<typename T>
  static inline const std::string& SoundtrackMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SoundtrackMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SoundtrackMode_Name.");
    return Soundtrack_SoundtrackMode_Name(enum_t_value);
  }
  static inline bool SoundtrackMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SoundtrackMode* value) {
    return Soundtrack_SoundtrackMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMovieMediaFieldNumber = 3,
    kVolumeFieldNumber = 1,
    kModeFieldNumber = 2,
  };
  // repeated .TSP.DataReference movie_media = 3;
  int movie_media_size() const;
  private:
  int _internal_movie_media_size() const;
  public:
  void clear_movie_media();
  ::TSP::DataReference* mutable_movie_media(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >*
      mutable_movie_media();
  private:
  const ::TSP::DataReference& _internal_movie_media(int index) const;
  ::TSP::DataReference* _internal_add_movie_media();
  public:
  const ::TSP::DataReference& movie_media(int index) const;
  ::TSP::DataReference* add_movie_media();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >&
      movie_media() const;

  // optional double volume = 1;
  bool has_volume() const;
  private:
  bool _internal_has_volume() const;
  public:
  void clear_volume();
  double volume() const;
  void set_volume(double value);
  private:
  double _internal_volume() const;
  void _internal_set_volume(double value);
  public:

  // optional .KN.Soundtrack.SoundtrackMode mode = 2 [default = kKNSoundtrackModePlayOnce];
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::KN::Soundtrack_SoundtrackMode mode() const;
  void set_mode(::KN::Soundtrack_SoundtrackMode value);
  private:
  ::KN::Soundtrack_SoundtrackMode _internal_mode() const;
  void _internal_set_mode(::KN::Soundtrack_SoundtrackMode value);
  public:

  // @@protoc_insertion_point(class_scope:KN.Soundtrack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference > movie_media_;
    double volume_;
    int mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class SlideNumberAttachmentArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.SlideNumberAttachmentArchive) */ {
 public:
  inline SlideNumberAttachmentArchive() : SlideNumberAttachmentArchive(nullptr) {}
  ~SlideNumberAttachmentArchive() override;
  explicit PROTOBUF_CONSTEXPR SlideNumberAttachmentArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlideNumberAttachmentArchive(const SlideNumberAttachmentArchive& from);
  SlideNumberAttachmentArchive(SlideNumberAttachmentArchive&& from) noexcept
    : SlideNumberAttachmentArchive() {
    *this = ::std::move(from);
  }

  inline SlideNumberAttachmentArchive& operator=(const SlideNumberAttachmentArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlideNumberAttachmentArchive& operator=(SlideNumberAttachmentArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlideNumberAttachmentArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlideNumberAttachmentArchive* internal_default_instance() {
    return reinterpret_cast<const SlideNumberAttachmentArchive*>(
               &_SlideNumberAttachmentArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(SlideNumberAttachmentArchive& a, SlideNumberAttachmentArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SlideNumberAttachmentArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlideNumberAttachmentArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SlideNumberAttachmentArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SlideNumberAttachmentArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlideNumberAttachmentArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SlideNumberAttachmentArchive& from) {
    SlideNumberAttachmentArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlideNumberAttachmentArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.SlideNumberAttachmentArchive";
  }
  protected:
  explicit SlideNumberAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSWP.TextualAttachmentArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::TextualAttachmentArchive& super() const;
  PROTOBUF_NODISCARD ::TSWP::TextualAttachmentArchive* release_super();
  ::TSWP::TextualAttachmentArchive* mutable_super();
  void set_allocated_super(::TSWP::TextualAttachmentArchive* super);
  private:
  const ::TSWP::TextualAttachmentArchive& _internal_super() const;
  ::TSWP::TextualAttachmentArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::TextualAttachmentArchive* super);
  ::TSWP::TextualAttachmentArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:KN.SlideNumberAttachmentArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSWP::TextualAttachmentArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class SlideCollectionSelectionArchive_OutlineSelection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.SlideCollectionSelectionArchive.OutlineSelection) */ {
 public:
  inline SlideCollectionSelectionArchive_OutlineSelection() : SlideCollectionSelectionArchive_OutlineSelection(nullptr) {}
  ~SlideCollectionSelectionArchive_OutlineSelection() override;
  explicit PROTOBUF_CONSTEXPR SlideCollectionSelectionArchive_OutlineSelection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlideCollectionSelectionArchive_OutlineSelection(const SlideCollectionSelectionArchive_OutlineSelection& from);
  SlideCollectionSelectionArchive_OutlineSelection(SlideCollectionSelectionArchive_OutlineSelection&& from) noexcept
    : SlideCollectionSelectionArchive_OutlineSelection() {
    *this = ::std::move(from);
  }

  inline SlideCollectionSelectionArchive_OutlineSelection& operator=(const SlideCollectionSelectionArchive_OutlineSelection& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlideCollectionSelectionArchive_OutlineSelection& operator=(SlideCollectionSelectionArchive_OutlineSelection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlideCollectionSelectionArchive_OutlineSelection& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlideCollectionSelectionArchive_OutlineSelection* internal_default_instance() {
    return reinterpret_cast<const SlideCollectionSelectionArchive_OutlineSelection*>(
               &_SlideCollectionSelectionArchive_OutlineSelection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(SlideCollectionSelectionArchive_OutlineSelection& a, SlideCollectionSelectionArchive_OutlineSelection& b) {
    a.Swap(&b);
  }
  inline void Swap(SlideCollectionSelectionArchive_OutlineSelection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlideCollectionSelectionArchive_OutlineSelection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SlideCollectionSelectionArchive_OutlineSelection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SlideCollectionSelectionArchive_OutlineSelection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlideCollectionSelectionArchive_OutlineSelection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SlideCollectionSelectionArchive_OutlineSelection& from) {
    SlideCollectionSelectionArchive_OutlineSelection::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlideCollectionSelectionArchive_OutlineSelection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.SlideCollectionSelectionArchive.OutlineSelection";
  }
  protected:
  explicit SlideCollectionSelectionArchive_OutlineSelection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlideNodeFieldNumber = 1,
    kSelectedParagraphIndexesFieldNumber = 2,
  };
  // required .TSP.Reference slide_node = 1;
  bool has_slide_node() const;
  private:
  bool _internal_has_slide_node() const;
  public:
  void clear_slide_node();
  const ::TSP::Reference& slide_node() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_slide_node();
  ::TSP::Reference* mutable_slide_node();
  void set_allocated_slide_node(::TSP::Reference* slide_node);
  private:
  const ::TSP::Reference& _internal_slide_node() const;
  ::TSP::Reference* _internal_mutable_slide_node();
  public:
  void unsafe_arena_set_allocated_slide_node(
      ::TSP::Reference* slide_node);
  ::TSP::Reference* unsafe_arena_release_slide_node();

  // required .TSP.IndexSet selected_paragraph_indexes = 2;
  bool has_selected_paragraph_indexes() const;
  private:
  bool _internal_has_selected_paragraph_indexes() const;
  public:
  void clear_selected_paragraph_indexes();
  const ::TSP::IndexSet& selected_paragraph_indexes() const;
  PROTOBUF_NODISCARD ::TSP::IndexSet* release_selected_paragraph_indexes();
  ::TSP::IndexSet* mutable_selected_paragraph_indexes();
  void set_allocated_selected_paragraph_indexes(::TSP::IndexSet* selected_paragraph_indexes);
  private:
  const ::TSP::IndexSet& _internal_selected_paragraph_indexes() const;
  ::TSP::IndexSet* _internal_mutable_selected_paragraph_indexes();
  public:
  void unsafe_arena_set_allocated_selected_paragraph_indexes(
      ::TSP::IndexSet* selected_paragraph_indexes);
  ::TSP::IndexSet* unsafe_arena_release_selected_paragraph_indexes();

  // @@protoc_insertion_point(class_scope:KN.SlideCollectionSelectionArchive.OutlineSelection)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* slide_node_;
    ::TSP::IndexSet* selected_paragraph_indexes_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// -------------------------------------------------------------------

class SlideCollectionSelectionArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.SlideCollectionSelectionArchive) */ {
 public:
  inline SlideCollectionSelectionArchive() : SlideCollectionSelectionArchive(nullptr) {}
  ~SlideCollectionSelectionArchive() override;
  explicit PROTOBUF_CONSTEXPR SlideCollectionSelectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlideCollectionSelectionArchive(const SlideCollectionSelectionArchive& from);
  SlideCollectionSelectionArchive(SlideCollectionSelectionArchive&& from) noexcept
    : SlideCollectionSelectionArchive() {
    *this = ::std::move(from);
  }

  inline SlideCollectionSelectionArchive& operator=(const SlideCollectionSelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlideCollectionSelectionArchive& operator=(SlideCollectionSelectionArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlideCollectionSelectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlideCollectionSelectionArchive* internal_default_instance() {
    return reinterpret_cast<const SlideCollectionSelectionArchive*>(
               &_SlideCollectionSelectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(SlideCollectionSelectionArchive& a, SlideCollectionSelectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SlideCollectionSelectionArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlideCollectionSelectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SlideCollectionSelectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SlideCollectionSelectionArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlideCollectionSelectionArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SlideCollectionSelectionArchive& from) {
    SlideCollectionSelectionArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlideCollectionSelectionArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.SlideCollectionSelectionArchive";
  }
  protected:
  explicit SlideCollectionSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SlideCollectionSelectionArchive_OutlineSelection OutlineSelection;

  // accessors -------------------------------------------------------

  enum : int {
    kSlideNodesFieldNumber = 1,
    kSelectedParagraphIndexesForSlideNodesFieldNumber = 3,
    kSlideNodeToEditFieldNumber = 2,
    kRangeInSelectedParagraphFieldNumber = 4,
  };
  // repeated .TSP.Reference slide_nodes = 1;
  int slide_nodes_size() const;
  private:
  int _internal_slide_nodes_size() const;
  public:
  void clear_slide_nodes();
  ::TSP::Reference* mutable_slide_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_slide_nodes();
  private:
  const ::TSP::Reference& _internal_slide_nodes(int index) const;
  ::TSP::Reference* _internal_add_slide_nodes();
  public:
  const ::TSP::Reference& slide_nodes(int index) const;
  ::TSP::Reference* add_slide_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      slide_nodes() const;

  // repeated .KN.SlideCollectionSelectionArchive.OutlineSelection selected_paragraph_indexes_for_slide_nodes = 3;
  int selected_paragraph_indexes_for_slide_nodes_size() const;
  private:
  int _internal_selected_paragraph_indexes_for_slide_nodes_size() const;
  public:
  void clear_selected_paragraph_indexes_for_slide_nodes();
  ::KN::SlideCollectionSelectionArchive_OutlineSelection* mutable_selected_paragraph_indexes_for_slide_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::SlideCollectionSelectionArchive_OutlineSelection >*
      mutable_selected_paragraph_indexes_for_slide_nodes();
  private:
  const ::KN::SlideCollectionSelectionArchive_OutlineSelection& _internal_selected_paragraph_indexes_for_slide_nodes(int index) const;
  ::KN::SlideCollectionSelectionArchive_OutlineSelection* _internal_add_selected_paragraph_indexes_for_slide_nodes();
  public:
  const ::KN::SlideCollectionSelectionArchive_OutlineSelection& selected_paragraph_indexes_for_slide_nodes(int index) const;
  ::KN::SlideCollectionSelectionArchive_OutlineSelection* add_selected_paragraph_indexes_for_slide_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::SlideCollectionSelectionArchive_OutlineSelection >&
      selected_paragraph_indexes_for_slide_nodes() const;

  // optional .TSP.Reference slide_node_to_edit = 2;
  bool has_slide_node_to_edit() const;
  private:
  bool _internal_has_slide_node_to_edit() const;
  public:
  void clear_slide_node_to_edit();
  const ::TSP::Reference& slide_node_to_edit() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_slide_node_to_edit();
  ::TSP::Reference* mutable_slide_node_to_edit();
  void set_allocated_slide_node_to_edit(::TSP::Reference* slide_node_to_edit);
  private:
  const ::TSP::Reference& _internal_slide_node_to_edit() const;
  ::TSP::Reference* _internal_mutable_slide_node_to_edit();
  public:
  void unsafe_arena_set_allocated_slide_node_to_edit(
      ::TSP::Reference* slide_node_to_edit);
  ::TSP::Reference* unsafe_arena_release_slide_node_to_edit();

  // optional .TSP.Range range_in_selected_paragraph = 4;
  bool has_range_in_selected_paragraph() const;
  private:
  bool _internal_has_range_in_selected_paragraph() const;
  public:
  void clear_range_in_selected_paragraph();
  const ::TSP::Range& range_in_selected_paragraph() const;
  PROTOBUF_NODISCARD ::TSP::Range* release_range_in_selected_paragraph();
  ::TSP::Range* mutable_range_in_selected_paragraph();
  void set_allocated_range_in_selected_paragraph(::TSP::Range* range_in_selected_paragraph);
  private:
  const ::TSP::Range& _internal_range_in_selected_paragraph() const;
  ::TSP::Range* _internal_mutable_range_in_selected_paragraph();
  public:
  void unsafe_arena_set_allocated_range_in_selected_paragraph(
      ::TSP::Range* range_in_selected_paragraph);
  ::TSP::Range* unsafe_arena_release_range_in_selected_paragraph();

  // @@protoc_insertion_point(class_scope:KN.SlideCollectionSelectionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > slide_nodes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::SlideCollectionSelectionArchive_OutlineSelection > selected_paragraph_indexes_for_slide_nodes_;
    ::TSP::Reference* slide_node_to_edit_;
    ::TSP::Range* range_in_selected_paragraph_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNArchives_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AnimationAttributesArchive

// optional string animationType = 1;
inline bool AnimationAttributesArchive::_internal_has_animationtype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AnimationAttributesArchive::has_animationtype() const {
  return _internal_has_animationtype();
}
inline void AnimationAttributesArchive::clear_animationtype() {
  _impl_.animationtype_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AnimationAttributesArchive::animationtype() const {
  // @@protoc_insertion_point(field_get:KN.AnimationAttributesArchive.animationType)
  return _internal_animationtype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnimationAttributesArchive::set_animationtype(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.animationtype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.AnimationAttributesArchive.animationType)
}
inline std::string* AnimationAttributesArchive::mutable_animationtype() {
  std::string* _s = _internal_mutable_animationtype();
  // @@protoc_insertion_point(field_mutable:KN.AnimationAttributesArchive.animationType)
  return _s;
}
inline const std::string& AnimationAttributesArchive::_internal_animationtype() const {
  return _impl_.animationtype_.Get();
}
inline void AnimationAttributesArchive::_internal_set_animationtype(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.animationtype_.Set(value, GetArenaForAllocation());
}
inline std::string* AnimationAttributesArchive::_internal_mutable_animationtype() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.animationtype_.Mutable(GetArenaForAllocation());
}
inline std::string* AnimationAttributesArchive::release_animationtype() {
  // @@protoc_insertion_point(field_release:KN.AnimationAttributesArchive.animationType)
  if (!_internal_has_animationtype()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.animationtype_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.animationtype_.IsDefault()) {
    _impl_.animationtype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AnimationAttributesArchive::set_allocated_animationtype(std::string* animationtype) {
  if (animationtype != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.animationtype_.SetAllocated(animationtype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.animationtype_.IsDefault()) {
    _impl_.animationtype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.AnimationAttributesArchive.animationType)
}

// optional string effect = 2;
inline bool AnimationAttributesArchive::_internal_has_effect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AnimationAttributesArchive::has_effect() const {
  return _internal_has_effect();
}
inline void AnimationAttributesArchive::clear_effect() {
  _impl_.effect_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AnimationAttributesArchive::effect() const {
  // @@protoc_insertion_point(field_get:KN.AnimationAttributesArchive.effect)
  return _internal_effect();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnimationAttributesArchive::set_effect(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.effect_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.AnimationAttributesArchive.effect)
}
inline std::string* AnimationAttributesArchive::mutable_effect() {
  std::string* _s = _internal_mutable_effect();
  // @@protoc_insertion_point(field_mutable:KN.AnimationAttributesArchive.effect)
  return _s;
}
inline const std::string& AnimationAttributesArchive::_internal_effect() const {
  return _impl_.effect_.Get();
}
inline void AnimationAttributesArchive::_internal_set_effect(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.effect_.Set(value, GetArenaForAllocation());
}
inline std::string* AnimationAttributesArchive::_internal_mutable_effect() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.effect_.Mutable(GetArenaForAllocation());
}
inline std::string* AnimationAttributesArchive::release_effect() {
  // @@protoc_insertion_point(field_release:KN.AnimationAttributesArchive.effect)
  if (!_internal_has_effect()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.effect_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.effect_.IsDefault()) {
    _impl_.effect_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AnimationAttributesArchive::set_allocated_effect(std::string* effect) {
  if (effect != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.effect_.SetAllocated(effect, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.effect_.IsDefault()) {
    _impl_.effect_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.AnimationAttributesArchive.effect)
}

// optional double duration = 3;
inline bool AnimationAttributesArchive::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AnimationAttributesArchive::has_duration() const {
  return _internal_has_duration();
}
inline void AnimationAttributesArchive::clear_duration() {
  _impl_.duration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double AnimationAttributesArchive::_internal_duration() const {
  return _impl_.duration_;
}
inline double AnimationAttributesArchive::duration() const {
  // @@protoc_insertion_point(field_get:KN.AnimationAttributesArchive.duration)
  return _internal_duration();
}
inline void AnimationAttributesArchive::_internal_set_duration(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.duration_ = value;
}
inline void AnimationAttributesArchive::set_duration(double value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:KN.AnimationAttributesArchive.duration)
}

// optional uint32 direction = 4;
inline bool AnimationAttributesArchive::_internal_has_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AnimationAttributesArchive::has_direction() const {
  return _internal_has_direction();
}
inline void AnimationAttributesArchive::clear_direction() {
  _impl_.direction_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t AnimationAttributesArchive::_internal_direction() const {
  return _impl_.direction_;
}
inline uint32_t AnimationAttributesArchive::direction() const {
  // @@protoc_insertion_point(field_get:KN.AnimationAttributesArchive.direction)
  return _internal_direction();
}
inline void AnimationAttributesArchive::_internal_set_direction(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.direction_ = value;
}
inline void AnimationAttributesArchive::set_direction(uint32_t value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:KN.AnimationAttributesArchive.direction)
}

// optional double delay = 5;
inline bool AnimationAttributesArchive::_internal_has_delay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AnimationAttributesArchive::has_delay() const {
  return _internal_has_delay();
}
inline void AnimationAttributesArchive::clear_delay() {
  _impl_.delay_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double AnimationAttributesArchive::_internal_delay() const {
  return _impl_.delay_;
}
inline double AnimationAttributesArchive::delay() const {
  // @@protoc_insertion_point(field_get:KN.AnimationAttributesArchive.delay)
  return _internal_delay();
}
inline void AnimationAttributesArchive::_internal_set_delay(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.delay_ = value;
}
inline void AnimationAttributesArchive::set_delay(double value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:KN.AnimationAttributesArchive.delay)
}

// optional bool isAutomatic = 6;
inline bool AnimationAttributesArchive::_internal_has_isautomatic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AnimationAttributesArchive::has_isautomatic() const {
  return _internal_has_isautomatic();
}
inline void AnimationAttributesArchive::clear_isautomatic() {
  _impl_.isautomatic_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool AnimationAttributesArchive::_internal_isautomatic() const {
  return _impl_.isautomatic_;
}
inline bool AnimationAttributesArchive::isautomatic() const {
  // @@protoc_insertion_point(field_get:KN.AnimationAttributesArchive.isAutomatic)
  return _internal_isautomatic();
}
inline void AnimationAttributesArchive::_internal_set_isautomatic(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.isautomatic_ = value;
}
inline void AnimationAttributesArchive::set_isautomatic(bool value) {
  _internal_set_isautomatic(value);
  // @@protoc_insertion_point(field_set:KN.AnimationAttributesArchive.isAutomatic)
}

// optional .TSP.Color color = 7;
inline bool AnimationAttributesArchive::_internal_has_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.color_ != nullptr);
  return value;
}
inline bool AnimationAttributesArchive::has_color() const {
  return _internal_has_color();
}
inline const ::TSP::Color& AnimationAttributesArchive::_internal_color() const {
  const ::TSP::Color* p = _impl_.color_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Color&>(
      ::TSP::_Color_default_instance_);
}
inline const ::TSP::Color& AnimationAttributesArchive::color() const {
  // @@protoc_insertion_point(field_get:KN.AnimationAttributesArchive.color)
  return _internal_color();
}
inline void AnimationAttributesArchive::unsafe_arena_set_allocated_color(
    ::TSP::Color* color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_);
  }
  _impl_.color_ = color;
  if (color) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.AnimationAttributesArchive.color)
}
inline ::TSP::Color* AnimationAttributesArchive::release_color() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Color* temp = _impl_.color_;
  _impl_.color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Color* AnimationAttributesArchive::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:KN.AnimationAttributesArchive.color)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Color* temp = _impl_.color_;
  _impl_.color_ = nullptr;
  return temp;
}
inline ::TSP::Color* AnimationAttributesArchive::_internal_mutable_color() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.color_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Color>(GetArenaForAllocation());
    _impl_.color_ = p;
  }
  return _impl_.color_;
}
inline ::TSP::Color* AnimationAttributesArchive::mutable_color() {
  ::TSP::Color* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:KN.AnimationAttributesArchive.color)
  return _msg;
}
inline void AnimationAttributesArchive::set_allocated_color(::TSP::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_);
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color));
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.color_ = color;
  // @@protoc_insertion_point(field_set_allocated:KN.AnimationAttributesArchive.color)
}

// -------------------------------------------------------------------

// TransitionAttributesArchive

// optional .KN.AnimationAttributesArchive animationAttributes = 8;
inline bool TransitionAttributesArchive::_internal_has_animationattributes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.animationattributes_ != nullptr);
  return value;
}
inline bool TransitionAttributesArchive::has_animationattributes() const {
  return _internal_has_animationattributes();
}
inline void TransitionAttributesArchive::clear_animationattributes() {
  if (_impl_.animationattributes_ != nullptr) _impl_.animationattributes_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::KN::AnimationAttributesArchive& TransitionAttributesArchive::_internal_animationattributes() const {
  const ::KN::AnimationAttributesArchive* p = _impl_.animationattributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::AnimationAttributesArchive&>(
      ::KN::_AnimationAttributesArchive_default_instance_);
}
inline const ::KN::AnimationAttributesArchive& TransitionAttributesArchive::animationattributes() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.animationAttributes)
  return _internal_animationattributes();
}
inline void TransitionAttributesArchive::unsafe_arena_set_allocated_animationattributes(
    ::KN::AnimationAttributesArchive* animationattributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.animationattributes_);
  }
  _impl_.animationattributes_ = animationattributes;
  if (animationattributes) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.TransitionAttributesArchive.animationAttributes)
}
inline ::KN::AnimationAttributesArchive* TransitionAttributesArchive::release_animationattributes() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::KN::AnimationAttributesArchive* temp = _impl_.animationattributes_;
  _impl_.animationattributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::AnimationAttributesArchive* TransitionAttributesArchive::unsafe_arena_release_animationattributes() {
  // @@protoc_insertion_point(field_release:KN.TransitionAttributesArchive.animationAttributes)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::KN::AnimationAttributesArchive* temp = _impl_.animationattributes_;
  _impl_.animationattributes_ = nullptr;
  return temp;
}
inline ::KN::AnimationAttributesArchive* TransitionAttributesArchive::_internal_mutable_animationattributes() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.animationattributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::AnimationAttributesArchive>(GetArenaForAllocation());
    _impl_.animationattributes_ = p;
  }
  return _impl_.animationattributes_;
}
inline ::KN::AnimationAttributesArchive* TransitionAttributesArchive::mutable_animationattributes() {
  ::KN::AnimationAttributesArchive* _msg = _internal_mutable_animationattributes();
  // @@protoc_insertion_point(field_mutable:KN.TransitionAttributesArchive.animationAttributes)
  return _msg;
}
inline void TransitionAttributesArchive::set_allocated_animationattributes(::KN::AnimationAttributesArchive* animationattributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.animationattributes_;
  }
  if (animationattributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(animationattributes);
    if (message_arena != submessage_arena) {
      animationattributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, animationattributes, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.animationattributes_ = animationattributes;
  // @@protoc_insertion_point(field_set_allocated:KN.TransitionAttributesArchive.animationAttributes)
}

// optional bool isAutomatic = 6;
inline bool TransitionAttributesArchive::_internal_has_isautomatic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TransitionAttributesArchive::has_isautomatic() const {
  return _internal_has_isautomatic();
}
inline void TransitionAttributesArchive::clear_isautomatic() {
  _impl_.isautomatic_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool TransitionAttributesArchive::_internal_isautomatic() const {
  return _impl_.isautomatic_;
}
inline bool TransitionAttributesArchive::isautomatic() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.isAutomatic)
  return _internal_isautomatic();
}
inline void TransitionAttributesArchive::_internal_set_isautomatic(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.isautomatic_ = value;
}
inline void TransitionAttributesArchive::set_isautomatic(bool value) {
  _internal_set_isautomatic(value);
  // @@protoc_insertion_point(field_set:KN.TransitionAttributesArchive.isAutomatic)
}

// optional float custom_twist = 9;
inline bool TransitionAttributesArchive::_internal_has_custom_twist() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TransitionAttributesArchive::has_custom_twist() const {
  return _internal_has_custom_twist();
}
inline void TransitionAttributesArchive::clear_custom_twist() {
  _impl_.custom_twist_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float TransitionAttributesArchive::_internal_custom_twist() const {
  return _impl_.custom_twist_;
}
inline float TransitionAttributesArchive::custom_twist() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.custom_twist)
  return _internal_custom_twist();
}
inline void TransitionAttributesArchive::_internal_set_custom_twist(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.custom_twist_ = value;
}
inline void TransitionAttributesArchive::set_custom_twist(float value) {
  _internal_set_custom_twist(value);
  // @@protoc_insertion_point(field_set:KN.TransitionAttributesArchive.custom_twist)
}

// optional uint32 custom_mosaic_size = 10;
inline bool TransitionAttributesArchive::_internal_has_custom_mosaic_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TransitionAttributesArchive::has_custom_mosaic_size() const {
  return _internal_has_custom_mosaic_size();
}
inline void TransitionAttributesArchive::clear_custom_mosaic_size() {
  _impl_.custom_mosaic_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t TransitionAttributesArchive::_internal_custom_mosaic_size() const {
  return _impl_.custom_mosaic_size_;
}
inline uint32_t TransitionAttributesArchive::custom_mosaic_size() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.custom_mosaic_size)
  return _internal_custom_mosaic_size();
}
inline void TransitionAttributesArchive::_internal_set_custom_mosaic_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.custom_mosaic_size_ = value;
}
inline void TransitionAttributesArchive::set_custom_mosaic_size(uint32_t value) {
  _internal_set_custom_mosaic_size(value);
  // @@protoc_insertion_point(field_set:KN.TransitionAttributesArchive.custom_mosaic_size)
}

// optional uint32 custom_mosaic_type = 11;
inline bool TransitionAttributesArchive::_internal_has_custom_mosaic_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TransitionAttributesArchive::has_custom_mosaic_type() const {
  return _internal_has_custom_mosaic_type();
}
inline void TransitionAttributesArchive::clear_custom_mosaic_type() {
  _impl_.custom_mosaic_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t TransitionAttributesArchive::_internal_custom_mosaic_type() const {
  return _impl_.custom_mosaic_type_;
}
inline uint32_t TransitionAttributesArchive::custom_mosaic_type() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.custom_mosaic_type)
  return _internal_custom_mosaic_type();
}
inline void TransitionAttributesArchive::_internal_set_custom_mosaic_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.custom_mosaic_type_ = value;
}
inline void TransitionAttributesArchive::set_custom_mosaic_type(uint32_t value) {
  _internal_set_custom_mosaic_type(value);
  // @@protoc_insertion_point(field_set:KN.TransitionAttributesArchive.custom_mosaic_type)
}

// optional bool custom_bounce = 12;
inline bool TransitionAttributesArchive::_internal_has_custom_bounce() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TransitionAttributesArchive::has_custom_bounce() const {
  return _internal_has_custom_bounce();
}
inline void TransitionAttributesArchive::clear_custom_bounce() {
  _impl_.custom_bounce_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool TransitionAttributesArchive::_internal_custom_bounce() const {
  return _impl_.custom_bounce_;
}
inline bool TransitionAttributesArchive::custom_bounce() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.custom_bounce)
  return _internal_custom_bounce();
}
inline void TransitionAttributesArchive::_internal_set_custom_bounce(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.custom_bounce_ = value;
}
inline void TransitionAttributesArchive::set_custom_bounce(bool value) {
  _internal_set_custom_bounce(value);
  // @@protoc_insertion_point(field_set:KN.TransitionAttributesArchive.custom_bounce)
}

// optional bool custom_magic_move_fade_unmatched_objects = 13;
inline bool TransitionAttributesArchive::_internal_has_custom_magic_move_fade_unmatched_objects() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TransitionAttributesArchive::has_custom_magic_move_fade_unmatched_objects() const {
  return _internal_has_custom_magic_move_fade_unmatched_objects();
}
inline void TransitionAttributesArchive::clear_custom_magic_move_fade_unmatched_objects() {
  _impl_.custom_magic_move_fade_unmatched_objects_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool TransitionAttributesArchive::_internal_custom_magic_move_fade_unmatched_objects() const {
  return _impl_.custom_magic_move_fade_unmatched_objects_;
}
inline bool TransitionAttributesArchive::custom_magic_move_fade_unmatched_objects() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.custom_magic_move_fade_unmatched_objects)
  return _internal_custom_magic_move_fade_unmatched_objects();
}
inline void TransitionAttributesArchive::_internal_set_custom_magic_move_fade_unmatched_objects(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.custom_magic_move_fade_unmatched_objects_ = value;
}
inline void TransitionAttributesArchive::set_custom_magic_move_fade_unmatched_objects(bool value) {
  _internal_set_custom_magic_move_fade_unmatched_objects(value);
  // @@protoc_insertion_point(field_set:KN.TransitionAttributesArchive.custom_magic_move_fade_unmatched_objects)
}

// optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTimingCurveType custom_timing_curve = 15;
inline bool TransitionAttributesArchive::_internal_has_custom_timing_curve() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TransitionAttributesArchive::has_custom_timing_curve() const {
  return _internal_has_custom_timing_curve();
}
inline void TransitionAttributesArchive::clear_custom_timing_curve() {
  _impl_.custom_timing_curve_ = 1;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive::_internal_custom_timing_curve() const {
  return static_cast< ::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType >(_impl_.custom_timing_curve_);
}
inline ::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive::custom_timing_curve() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.custom_timing_curve)
  return _internal_custom_timing_curve();
}
inline void TransitionAttributesArchive::_internal_set_custom_timing_curve(::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType value) {
  assert(::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.custom_timing_curve_ = value;
}
inline void TransitionAttributesArchive::set_custom_timing_curve(::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType value) {
  _internal_set_custom_timing_curve(value);
  // @@protoc_insertion_point(field_set:KN.TransitionAttributesArchive.custom_timing_curve)
}

// optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTextDeliveryType custom_text_delivery_type = 16;
inline bool TransitionAttributesArchive::_internal_has_custom_text_delivery_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TransitionAttributesArchive::has_custom_text_delivery_type() const {
  return _internal_has_custom_text_delivery_type();
}
inline void TransitionAttributesArchive::clear_custom_text_delivery_type() {
  _impl_.custom_text_delivery_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive::_internal_custom_text_delivery_type() const {
  return static_cast< ::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType >(_impl_.custom_text_delivery_type_);
}
inline ::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive::custom_text_delivery_type() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.custom_text_delivery_type)
  return _internal_custom_text_delivery_type();
}
inline void TransitionAttributesArchive::_internal_set_custom_text_delivery_type(::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType value) {
  assert(::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.custom_text_delivery_type_ = value;
}
inline void TransitionAttributesArchive::set_custom_text_delivery_type(::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType value) {
  _internal_set_custom_text_delivery_type(value);
  // @@protoc_insertion_point(field_set:KN.TransitionAttributesArchive.custom_text_delivery_type)
}

// optional string database_animationType = 1;
inline bool TransitionAttributesArchive::_internal_has_database_animationtype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TransitionAttributesArchive::has_database_animationtype() const {
  return _internal_has_database_animationtype();
}
inline void TransitionAttributesArchive::clear_database_animationtype() {
  _impl_.database_animationtype_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TransitionAttributesArchive::database_animationtype() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.database_animationType)
  return _internal_database_animationtype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransitionAttributesArchive::set_database_animationtype(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.database_animationtype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.TransitionAttributesArchive.database_animationType)
}
inline std::string* TransitionAttributesArchive::mutable_database_animationtype() {
  std::string* _s = _internal_mutable_database_animationtype();
  // @@protoc_insertion_point(field_mutable:KN.TransitionAttributesArchive.database_animationType)
  return _s;
}
inline const std::string& TransitionAttributesArchive::_internal_database_animationtype() const {
  return _impl_.database_animationtype_.Get();
}
inline void TransitionAttributesArchive::_internal_set_database_animationtype(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.database_animationtype_.Set(value, GetArenaForAllocation());
}
inline std::string* TransitionAttributesArchive::_internal_mutable_database_animationtype() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.database_animationtype_.Mutable(GetArenaForAllocation());
}
inline std::string* TransitionAttributesArchive::release_database_animationtype() {
  // @@protoc_insertion_point(field_release:KN.TransitionAttributesArchive.database_animationType)
  if (!_internal_has_database_animationtype()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.database_animationtype_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.database_animationtype_.IsDefault()) {
    _impl_.database_animationtype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TransitionAttributesArchive::set_allocated_database_animationtype(std::string* database_animationtype) {
  if (database_animationtype != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.database_animationtype_.SetAllocated(database_animationtype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.database_animationtype_.IsDefault()) {
    _impl_.database_animationtype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.TransitionAttributesArchive.database_animationType)
}

// optional string database_effect = 2;
inline bool TransitionAttributesArchive::_internal_has_database_effect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TransitionAttributesArchive::has_database_effect() const {
  return _internal_has_database_effect();
}
inline void TransitionAttributesArchive::clear_database_effect() {
  _impl_.database_effect_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TransitionAttributesArchive::database_effect() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.database_effect)
  return _internal_database_effect();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransitionAttributesArchive::set_database_effect(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.database_effect_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.TransitionAttributesArchive.database_effect)
}
inline std::string* TransitionAttributesArchive::mutable_database_effect() {
  std::string* _s = _internal_mutable_database_effect();
  // @@protoc_insertion_point(field_mutable:KN.TransitionAttributesArchive.database_effect)
  return _s;
}
inline const std::string& TransitionAttributesArchive::_internal_database_effect() const {
  return _impl_.database_effect_.Get();
}
inline void TransitionAttributesArchive::_internal_set_database_effect(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.database_effect_.Set(value, GetArenaForAllocation());
}
inline std::string* TransitionAttributesArchive::_internal_mutable_database_effect() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.database_effect_.Mutable(GetArenaForAllocation());
}
inline std::string* TransitionAttributesArchive::release_database_effect() {
  // @@protoc_insertion_point(field_release:KN.TransitionAttributesArchive.database_effect)
  if (!_internal_has_database_effect()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.database_effect_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.database_effect_.IsDefault()) {
    _impl_.database_effect_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TransitionAttributesArchive::set_allocated_database_effect(std::string* database_effect) {
  if (database_effect != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.database_effect_.SetAllocated(database_effect, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.database_effect_.IsDefault()) {
    _impl_.database_effect_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.TransitionAttributesArchive.database_effect)
}

// optional double database_duration = 3;
inline bool TransitionAttributesArchive::_internal_has_database_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TransitionAttributesArchive::has_database_duration() const {
  return _internal_has_database_duration();
}
inline void TransitionAttributesArchive::clear_database_duration() {
  _impl_.database_duration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double TransitionAttributesArchive::_internal_database_duration() const {
  return _impl_.database_duration_;
}
inline double TransitionAttributesArchive::database_duration() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.database_duration)
  return _internal_database_duration();
}
inline void TransitionAttributesArchive::_internal_set_database_duration(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.database_duration_ = value;
}
inline void TransitionAttributesArchive::set_database_duration(double value) {
  _internal_set_database_duration(value);
  // @@protoc_insertion_point(field_set:KN.TransitionAttributesArchive.database_duration)
}

// optional uint32 database_direction = 4;
inline bool TransitionAttributesArchive::_internal_has_database_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TransitionAttributesArchive::has_database_direction() const {
  return _internal_has_database_direction();
}
inline void TransitionAttributesArchive::clear_database_direction() {
  _impl_.database_direction_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t TransitionAttributesArchive::_internal_database_direction() const {
  return _impl_.database_direction_;
}
inline uint32_t TransitionAttributesArchive::database_direction() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.database_direction)
  return _internal_database_direction();
}
inline void TransitionAttributesArchive::_internal_set_database_direction(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.database_direction_ = value;
}
inline void TransitionAttributesArchive::set_database_direction(uint32_t value) {
  _internal_set_database_direction(value);
  // @@protoc_insertion_point(field_set:KN.TransitionAttributesArchive.database_direction)
}

// optional float database_delay = 5;
inline bool TransitionAttributesArchive::_internal_has_database_delay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TransitionAttributesArchive::has_database_delay() const {
  return _internal_has_database_delay();
}
inline void TransitionAttributesArchive::clear_database_delay() {
  _impl_.database_delay_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float TransitionAttributesArchive::_internal_database_delay() const {
  return _impl_.database_delay_;
}
inline float TransitionAttributesArchive::database_delay() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.database_delay)
  return _internal_database_delay();
}
inline void TransitionAttributesArchive::_internal_set_database_delay(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.database_delay_ = value;
}
inline void TransitionAttributesArchive::set_database_delay(float value) {
  _internal_set_database_delay(value);
  // @@protoc_insertion_point(field_set:KN.TransitionAttributesArchive.database_delay)
}

// optional .TSP.Color database_color = 7;
inline bool TransitionAttributesArchive::_internal_has_database_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.database_color_ != nullptr);
  return value;
}
inline bool TransitionAttributesArchive::has_database_color() const {
  return _internal_has_database_color();
}
inline const ::TSP::Color& TransitionAttributesArchive::_internal_database_color() const {
  const ::TSP::Color* p = _impl_.database_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Color&>(
      ::TSP::_Color_default_instance_);
}
inline const ::TSP::Color& TransitionAttributesArchive::database_color() const {
  // @@protoc_insertion_point(field_get:KN.TransitionAttributesArchive.database_color)
  return _internal_database_color();
}
inline void TransitionAttributesArchive::unsafe_arena_set_allocated_database_color(
    ::TSP::Color* database_color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.database_color_);
  }
  _impl_.database_color_ = database_color;
  if (database_color) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.TransitionAttributesArchive.database_color)
}
inline ::TSP::Color* TransitionAttributesArchive::release_database_color() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Color* temp = _impl_.database_color_;
  _impl_.database_color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Color* TransitionAttributesArchive::unsafe_arena_release_database_color() {
  // @@protoc_insertion_point(field_release:KN.TransitionAttributesArchive.database_color)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Color* temp = _impl_.database_color_;
  _impl_.database_color_ = nullptr;
  return temp;
}
inline ::TSP::Color* TransitionAttributesArchive::_internal_mutable_database_color() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.database_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Color>(GetArenaForAllocation());
    _impl_.database_color_ = p;
  }
  return _impl_.database_color_;
}
inline ::TSP::Color* TransitionAttributesArchive::mutable_database_color() {
  ::TSP::Color* _msg = _internal_mutable_database_color();
  // @@protoc_insertion_point(field_mutable:KN.TransitionAttributesArchive.database_color)
  return _msg;
}
inline void TransitionAttributesArchive::set_allocated_database_color(::TSP::Color* database_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.database_color_);
  }
  if (database_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_color));
    if (message_arena != submessage_arena) {
      database_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, database_color, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.database_color_ = database_color;
  // @@protoc_insertion_point(field_set_allocated:KN.TransitionAttributesArchive.database_color)
}

// -------------------------------------------------------------------

// TransitionArchive

// required .KN.TransitionAttributesArchive attributes = 2;
inline bool TransitionArchive::_internal_has_attributes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.attributes_ != nullptr);
  return value;
}
inline bool TransitionArchive::has_attributes() const {
  return _internal_has_attributes();
}
inline void TransitionArchive::clear_attributes() {
  if (_impl_.attributes_ != nullptr) _impl_.attributes_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::KN::TransitionAttributesArchive& TransitionArchive::_internal_attributes() const {
  const ::KN::TransitionAttributesArchive* p = _impl_.attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::TransitionAttributesArchive&>(
      ::KN::_TransitionAttributesArchive_default_instance_);
}
inline const ::KN::TransitionAttributesArchive& TransitionArchive::attributes() const {
  // @@protoc_insertion_point(field_get:KN.TransitionArchive.attributes)
  return _internal_attributes();
}
inline void TransitionArchive::unsafe_arena_set_allocated_attributes(
    ::KN::TransitionAttributesArchive* attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  _impl_.attributes_ = attributes;
  if (attributes) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.TransitionArchive.attributes)
}
inline ::KN::TransitionAttributesArchive* TransitionArchive::release_attributes() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::KN::TransitionAttributesArchive* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::TransitionAttributesArchive* TransitionArchive::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:KN.TransitionArchive.attributes)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::KN::TransitionAttributesArchive* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
  return temp;
}
inline ::KN::TransitionAttributesArchive* TransitionArchive::_internal_mutable_attributes() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::TransitionAttributesArchive>(GetArenaForAllocation());
    _impl_.attributes_ = p;
  }
  return _impl_.attributes_;
}
inline ::KN::TransitionAttributesArchive* TransitionArchive::mutable_attributes() {
  ::KN::TransitionAttributesArchive* _msg = _internal_mutable_attributes();
  // @@protoc_insertion_point(field_mutable:KN.TransitionArchive.attributes)
  return _msg;
}
inline void TransitionArchive::set_allocated_attributes(::KN::TransitionAttributesArchive* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.attributes_;
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attributes);
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:KN.TransitionArchive.attributes)
}

// -------------------------------------------------------------------

// BuildChunkArchive

// required .TSP.Reference build = 1;
inline bool BuildChunkArchive::_internal_has_build() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.build_ != nullptr);
  return value;
}
inline bool BuildChunkArchive::has_build() const {
  return _internal_has_build();
}
inline const ::TSP::Reference& BuildChunkArchive::_internal_build() const {
  const ::TSP::Reference* p = _impl_.build_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& BuildChunkArchive::build() const {
  // @@protoc_insertion_point(field_get:KN.BuildChunkArchive.build)
  return _internal_build();
}
inline void BuildChunkArchive::unsafe_arena_set_allocated_build(
    ::TSP::Reference* build) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.build_);
  }
  _impl_.build_ = build;
  if (build) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.BuildChunkArchive.build)
}
inline ::TSP::Reference* BuildChunkArchive::release_build() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.build_;
  _impl_.build_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* BuildChunkArchive::unsafe_arena_release_build() {
  // @@protoc_insertion_point(field_release:KN.BuildChunkArchive.build)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.build_;
  _impl_.build_ = nullptr;
  return temp;
}
inline ::TSP::Reference* BuildChunkArchive::_internal_mutable_build() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.build_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.build_ = p;
  }
  return _impl_.build_;
}
inline ::TSP::Reference* BuildChunkArchive::mutable_build() {
  ::TSP::Reference* _msg = _internal_mutable_build();
  // @@protoc_insertion_point(field_mutable:KN.BuildChunkArchive.build)
  return _msg;
}
inline void BuildChunkArchive::set_allocated_build(::TSP::Reference* build) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.build_);
  }
  if (build) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(build));
    if (message_arena != submessage_arena) {
      build = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, build, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.build_ = build;
  // @@protoc_insertion_point(field_set_allocated:KN.BuildChunkArchive.build)
}

// required uint32 index = 2;
inline bool BuildChunkArchive::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BuildChunkArchive::has_index() const {
  return _internal_has_index();
}
inline void BuildChunkArchive::clear_index() {
  _impl_.index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t BuildChunkArchive::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t BuildChunkArchive::index() const {
  // @@protoc_insertion_point(field_get:KN.BuildChunkArchive.index)
  return _internal_index();
}
inline void BuildChunkArchive::_internal_set_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.index_ = value;
}
inline void BuildChunkArchive::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:KN.BuildChunkArchive.index)
}

// optional double delay = 3;
inline bool BuildChunkArchive::_internal_has_delay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BuildChunkArchive::has_delay() const {
  return _internal_has_delay();
}
inline void BuildChunkArchive::clear_delay() {
  _impl_.delay_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double BuildChunkArchive::_internal_delay() const {
  return _impl_.delay_;
}
inline double BuildChunkArchive::delay() const {
  // @@protoc_insertion_point(field_get:KN.BuildChunkArchive.delay)
  return _internal_delay();
}
inline void BuildChunkArchive::_internal_set_delay(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.delay_ = value;
}
inline void BuildChunkArchive::set_delay(double value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:KN.BuildChunkArchive.delay)
}

// optional double duration = 4;
inline bool BuildChunkArchive::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BuildChunkArchive::has_duration() const {
  return _internal_has_duration();
}
inline void BuildChunkArchive::clear_duration() {
  _impl_.duration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double BuildChunkArchive::_internal_duration() const {
  return _impl_.duration_;
}
inline double BuildChunkArchive::duration() const {
  // @@protoc_insertion_point(field_get:KN.BuildChunkArchive.duration)
  return _internal_duration();
}
inline void BuildChunkArchive::_internal_set_duration(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.duration_ = value;
}
inline void BuildChunkArchive::set_duration(double value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:KN.BuildChunkArchive.duration)
}

// optional bool automatic = 5;
inline bool BuildChunkArchive::_internal_has_automatic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BuildChunkArchive::has_automatic() const {
  return _internal_has_automatic();
}
inline void BuildChunkArchive::clear_automatic() {
  _impl_.automatic_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool BuildChunkArchive::_internal_automatic() const {
  return _impl_.automatic_;
}
inline bool BuildChunkArchive::automatic() const {
  // @@protoc_insertion_point(field_get:KN.BuildChunkArchive.automatic)
  return _internal_automatic();
}
inline void BuildChunkArchive::_internal_set_automatic(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.automatic_ = value;
}
inline void BuildChunkArchive::set_automatic(bool value) {
  _internal_set_automatic(value);
  // @@protoc_insertion_point(field_set:KN.BuildChunkArchive.automatic)
}

// optional bool referent = 6;
inline bool BuildChunkArchive::_internal_has_referent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BuildChunkArchive::has_referent() const {
  return _internal_has_referent();
}
inline void BuildChunkArchive::clear_referent() {
  _impl_.referent_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool BuildChunkArchive::_internal_referent() const {
  return _impl_.referent_;
}
inline bool BuildChunkArchive::referent() const {
  // @@protoc_insertion_point(field_get:KN.BuildChunkArchive.referent)
  return _internal_referent();
}
inline void BuildChunkArchive::_internal_set_referent(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.referent_ = value;
}
inline void BuildChunkArchive::set_referent(bool value) {
  _internal_set_referent(value);
  // @@protoc_insertion_point(field_set:KN.BuildChunkArchive.referent)
}

// -------------------------------------------------------------------

// BuildAttributesArchive

// optional .KN.AnimationAttributesArchive animationAttributes = 18;
inline bool BuildAttributesArchive::_internal_has_animationattributes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.animationattributes_ != nullptr);
  return value;
}
inline bool BuildAttributesArchive::has_animationattributes() const {
  return _internal_has_animationattributes();
}
inline void BuildAttributesArchive::clear_animationattributes() {
  if (_impl_.animationattributes_ != nullptr) _impl_.animationattributes_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::KN::AnimationAttributesArchive& BuildAttributesArchive::_internal_animationattributes() const {
  const ::KN::AnimationAttributesArchive* p = _impl_.animationattributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::AnimationAttributesArchive&>(
      ::KN::_AnimationAttributesArchive_default_instance_);
}
inline const ::KN::AnimationAttributesArchive& BuildAttributesArchive::animationattributes() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.animationAttributes)
  return _internal_animationattributes();
}
inline void BuildAttributesArchive::unsafe_arena_set_allocated_animationattributes(
    ::KN::AnimationAttributesArchive* animationattributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.animationattributes_);
  }
  _impl_.animationattributes_ = animationattributes;
  if (animationattributes) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.BuildAttributesArchive.animationAttributes)
}
inline ::KN::AnimationAttributesArchive* BuildAttributesArchive::release_animationattributes() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::KN::AnimationAttributesArchive* temp = _impl_.animationattributes_;
  _impl_.animationattributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::AnimationAttributesArchive* BuildAttributesArchive::unsafe_arena_release_animationattributes() {
  // @@protoc_insertion_point(field_release:KN.BuildAttributesArchive.animationAttributes)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::KN::AnimationAttributesArchive* temp = _impl_.animationattributes_;
  _impl_.animationattributes_ = nullptr;
  return temp;
}
inline ::KN::AnimationAttributesArchive* BuildAttributesArchive::_internal_mutable_animationattributes() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.animationattributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::AnimationAttributesArchive>(GetArenaForAllocation());
    _impl_.animationattributes_ = p;
  }
  return _impl_.animationattributes_;
}
inline ::KN::AnimationAttributesArchive* BuildAttributesArchive::mutable_animationattributes() {
  ::KN::AnimationAttributesArchive* _msg = _internal_mutable_animationattributes();
  // @@protoc_insertion_point(field_mutable:KN.BuildAttributesArchive.animationAttributes)
  return _msg;
}
inline void BuildAttributesArchive::set_allocated_animationattributes(::KN::AnimationAttributesArchive* animationattributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.animationattributes_;
  }
  if (animationattributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(animationattributes);
    if (message_arena != submessage_arena) {
      animationattributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, animationattributes, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.animationattributes_ = animationattributes;
  // @@protoc_insertion_point(field_set_allocated:KN.BuildAttributesArchive.animationAttributes)
}

// optional uint32 eventTrigger = 4;
inline bool BuildAttributesArchive::_internal_has_eventtrigger() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_eventtrigger() const {
  return _internal_has_eventtrigger();
}
inline void BuildAttributesArchive::clear_eventtrigger() {
  _impl_.eventtrigger_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t BuildAttributesArchive::_internal_eventtrigger() const {
  return _impl_.eventtrigger_;
}
inline uint32_t BuildAttributesArchive::eventtrigger() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.eventTrigger)
  return _internal_eventtrigger();
}
inline void BuildAttributesArchive::_internal_set_eventtrigger(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.eventtrigger_ = value;
}
inline void BuildAttributesArchive::set_eventtrigger(uint32_t value) {
  _internal_set_eventtrigger(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.eventTrigger)
}

// optional double delayAutomaticAfter = 6;
inline bool BuildAttributesArchive::_internal_has_delayautomaticafter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_delayautomaticafter() const {
  return _internal_has_delayautomaticafter();
}
inline void BuildAttributesArchive::clear_delayautomaticafter() {
  _impl_.delayautomaticafter_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double BuildAttributesArchive::_internal_delayautomaticafter() const {
  return _impl_.delayautomaticafter_;
}
inline double BuildAttributesArchive::delayautomaticafter() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.delayAutomaticAfter)
  return _internal_delayautomaticafter();
}
inline void BuildAttributesArchive::_internal_set_delayautomaticafter(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.delayautomaticafter_ = value;
}
inline void BuildAttributesArchive::set_delayautomaticafter(double value) {
  _internal_set_delayautomaticafter(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.delayAutomaticAfter)
}

// optional double delayAutomaticWith = 7;
inline bool BuildAttributesArchive::_internal_has_delayautomaticwith() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_delayautomaticwith() const {
  return _internal_has_delayautomaticwith();
}
inline void BuildAttributesArchive::clear_delayautomaticwith() {
  _impl_.delayautomaticwith_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double BuildAttributesArchive::_internal_delayautomaticwith() const {
  return _impl_.delayautomaticwith_;
}
inline double BuildAttributesArchive::delayautomaticwith() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.delayAutomaticWith)
  return _internal_delayautomaticwith();
}
inline void BuildAttributesArchive::_internal_set_delayautomaticwith(double value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.delayautomaticwith_ = value;
}
inline void BuildAttributesArchive::set_delayautomaticwith(double value) {
  _internal_set_delayautomaticwith(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.delayAutomaticWith)
}

// optional .KN.BuildAttributesArchive.BuildAttributesCurveStyle curveStyle = 14;
inline bool BuildAttributesArchive::_internal_has_curvestyle() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_curvestyle() const {
  return _internal_has_curvestyle();
}
inline void BuildAttributesArchive::clear_curvestyle() {
  _impl_.curvestyle_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::KN::BuildAttributesArchive_BuildAttributesCurveStyle BuildAttributesArchive::_internal_curvestyle() const {
  return static_cast< ::KN::BuildAttributesArchive_BuildAttributesCurveStyle >(_impl_.curvestyle_);
}
inline ::KN::BuildAttributesArchive_BuildAttributesCurveStyle BuildAttributesArchive::curvestyle() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.curveStyle)
  return _internal_curvestyle();
}
inline void BuildAttributesArchive::_internal_set_curvestyle(::KN::BuildAttributesArchive_BuildAttributesCurveStyle value) {
  assert(::KN::BuildAttributesArchive_BuildAttributesCurveStyle_IsValid(value));
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.curvestyle_ = value;
}
inline void BuildAttributesArchive::set_curvestyle(::KN::BuildAttributesArchive_BuildAttributesCurveStyle value) {
  _internal_set_curvestyle(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.curveStyle)
}

// optional double ChartRotation3D = 17;
inline bool BuildAttributesArchive::_internal_has_chartrotation3d() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_chartrotation3d() const {
  return _internal_has_chartrotation3d();
}
inline void BuildAttributesArchive::clear_chartrotation3d() {
  _impl_.chartrotation3d_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline double BuildAttributesArchive::_internal_chartrotation3d() const {
  return _impl_.chartrotation3d_;
}
inline double BuildAttributesArchive::chartrotation3d() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.ChartRotation3D)
  return _internal_chartrotation3d();
}
inline void BuildAttributesArchive::_internal_set_chartrotation3d(double value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.chartrotation3d_ = value;
}
inline void BuildAttributesArchive::set_chartrotation3d(double value) {
  _internal_set_chartrotation3d(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.ChartRotation3D)
}

// optional uint32 startOffset = 27;
inline bool BuildAttributesArchive::_internal_has_startoffset() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_startoffset() const {
  return _internal_has_startoffset();
}
inline void BuildAttributesArchive::clear_startoffset() {
  _impl_.startoffset_ = 0u;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline uint32_t BuildAttributesArchive::_internal_startoffset() const {
  return _impl_.startoffset_;
}
inline uint32_t BuildAttributesArchive::startoffset() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.startOffset)
  return _internal_startoffset();
}
inline void BuildAttributesArchive::_internal_set_startoffset(uint32_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.startoffset_ = value;
}
inline void BuildAttributesArchive::set_startoffset(uint32_t value) {
  _internal_set_startoffset(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.startOffset)
}

// optional uint32 endOffset = 28;
inline bool BuildAttributesArchive::_internal_has_endoffset() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_endoffset() const {
  return _internal_has_endoffset();
}
inline void BuildAttributesArchive::clear_endoffset() {
  _impl_.endoffset_ = 0u;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline uint32_t BuildAttributesArchive::_internal_endoffset() const {
  return _impl_.endoffset_;
}
inline uint32_t BuildAttributesArchive::endoffset() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.endOffset)
  return _internal_endoffset();
}
inline void BuildAttributesArchive::_internal_set_endoffset(uint32_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.endoffset_ = value;
}
inline void BuildAttributesArchive::set_endoffset(uint32_t value) {
  _internal_set_endoffset(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.endOffset)
}

// optional double action_rotationAngle = 9;
inline bool BuildAttributesArchive::_internal_has_action_rotationangle() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_action_rotationangle() const {
  return _internal_has_action_rotationangle();
}
inline void BuildAttributesArchive::clear_action_rotationangle() {
  _impl_.action_rotationangle_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double BuildAttributesArchive::_internal_action_rotationangle() const {
  return _impl_.action_rotationangle_;
}
inline double BuildAttributesArchive::action_rotationangle() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.action_rotationAngle)
  return _internal_action_rotationangle();
}
inline void BuildAttributesArchive::_internal_set_action_rotationangle(double value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.action_rotationangle_ = value;
}
inline void BuildAttributesArchive::set_action_rotationangle(double value) {
  _internal_set_action_rotationangle(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.action_rotationAngle)
}

// optional .KN.BuildAttributesArchive.BuildAttributesRotationDirection action_rotationDirection = 10;
inline bool BuildAttributesArchive::_internal_has_action_rotationdirection() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_action_rotationdirection() const {
  return _internal_has_action_rotationdirection();
}
inline void BuildAttributesArchive::clear_action_rotationdirection() {
  _impl_.action_rotationdirection_ = 31;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline ::KN::BuildAttributesArchive_BuildAttributesRotationDirection BuildAttributesArchive::_internal_action_rotationdirection() const {
  return static_cast< ::KN::BuildAttributesArchive_BuildAttributesRotationDirection >(_impl_.action_rotationdirection_);
}
inline ::KN::BuildAttributesArchive_BuildAttributesRotationDirection BuildAttributesArchive::action_rotationdirection() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.action_rotationDirection)
  return _internal_action_rotationdirection();
}
inline void BuildAttributesArchive::_internal_set_action_rotationdirection(::KN::BuildAttributesArchive_BuildAttributesRotationDirection value) {
  assert(::KN::BuildAttributesArchive_BuildAttributesRotationDirection_IsValid(value));
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.action_rotationdirection_ = value;
}
inline void BuildAttributesArchive::set_action_rotationdirection(::KN::BuildAttributesArchive_BuildAttributesRotationDirection value) {
  _internal_set_action_rotationdirection(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.action_rotationDirection)
}

// optional double action_scaleSize = 11;
inline bool BuildAttributesArchive::_internal_has_action_scalesize() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_action_scalesize() const {
  return _internal_has_action_scalesize();
}
inline void BuildAttributesArchive::clear_action_scalesize() {
  _impl_.action_scalesize_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double BuildAttributesArchive::_internal_action_scalesize() const {
  return _impl_.action_scalesize_;
}
inline double BuildAttributesArchive::action_scalesize() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.action_scaleSize)
  return _internal_action_scalesize();
}
inline void BuildAttributesArchive::_internal_set_action_scalesize(double value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.action_scalesize_ = value;
}
inline void BuildAttributesArchive::set_action_scalesize(double value) {
  _internal_set_action_scalesize(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.action_scaleSize)
}

// optional double action_colorAlpha = 12;
inline bool BuildAttributesArchive::_internal_has_action_coloralpha() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_action_coloralpha() const {
  return _internal_has_action_coloralpha();
}
inline void BuildAttributesArchive::clear_action_coloralpha() {
  _impl_.action_coloralpha_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double BuildAttributesArchive::_internal_action_coloralpha() const {
  return _impl_.action_coloralpha_;
}
inline double BuildAttributesArchive::action_coloralpha() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.action_colorAlpha)
  return _internal_action_coloralpha();
}
inline void BuildAttributesArchive::_internal_set_action_coloralpha(double value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.action_coloralpha_ = value;
}
inline void BuildAttributesArchive::set_action_coloralpha(double value) {
  _internal_set_action_coloralpha(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.action_colorAlpha)
}

// optional .KN.BuildAttributesArchive.BuildAttributesAcceleration action_acceleration = 13;
inline bool BuildAttributesArchive::_internal_has_action_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_action_acceleration() const {
  return _internal_has_action_acceleration();
}
inline void BuildAttributesArchive::clear_action_acceleration() {
  _impl_.action_acceleration_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::KN::BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive::_internal_action_acceleration() const {
  return static_cast< ::KN::BuildAttributesArchive_BuildAttributesAcceleration >(_impl_.action_acceleration_);
}
inline ::KN::BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive::action_acceleration() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.action_acceleration)
  return _internal_action_acceleration();
}
inline void BuildAttributesArchive::_internal_set_action_acceleration(::KN::BuildAttributesArchive_BuildAttributesAcceleration value) {
  assert(::KN::BuildAttributesArchive_BuildAttributesAcceleration_IsValid(value));
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.action_acceleration_ = value;
}
inline void BuildAttributesArchive::set_action_acceleration(::KN::BuildAttributesArchive_BuildAttributesAcceleration value) {
  _internal_set_action_acceleration(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.action_acceleration)
}

// optional .TSD.PathSourceArchive action_motionPathSource = 22;
inline bool BuildAttributesArchive::_internal_has_action_motionpathsource() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.action_motionpathsource_ != nullptr);
  return value;
}
inline bool BuildAttributesArchive::has_action_motionpathsource() const {
  return _internal_has_action_motionpathsource();
}
inline const ::TSD::PathSourceArchive& BuildAttributesArchive::_internal_action_motionpathsource() const {
  const ::TSD::PathSourceArchive* p = _impl_.action_motionpathsource_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::PathSourceArchive&>(
      ::TSD::_PathSourceArchive_default_instance_);
}
inline const ::TSD::PathSourceArchive& BuildAttributesArchive::action_motionpathsource() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.action_motionPathSource)
  return _internal_action_motionpathsource();
}
inline void BuildAttributesArchive::unsafe_arena_set_allocated_action_motionpathsource(
    ::TSD::PathSourceArchive* action_motionpathsource) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.action_motionpathsource_);
  }
  _impl_.action_motionpathsource_ = action_motionpathsource;
  if (action_motionpathsource) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.BuildAttributesArchive.action_motionPathSource)
}
inline ::TSD::PathSourceArchive* BuildAttributesArchive::release_action_motionpathsource() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSD::PathSourceArchive* temp = _impl_.action_motionpathsource_;
  _impl_.action_motionpathsource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::PathSourceArchive* BuildAttributesArchive::unsafe_arena_release_action_motionpathsource() {
  // @@protoc_insertion_point(field_release:KN.BuildAttributesArchive.action_motionPathSource)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSD::PathSourceArchive* temp = _impl_.action_motionpathsource_;
  _impl_.action_motionpathsource_ = nullptr;
  return temp;
}
inline ::TSD::PathSourceArchive* BuildAttributesArchive::_internal_mutable_action_motionpathsource() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.action_motionpathsource_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::PathSourceArchive>(GetArenaForAllocation());
    _impl_.action_motionpathsource_ = p;
  }
  return _impl_.action_motionpathsource_;
}
inline ::TSD::PathSourceArchive* BuildAttributesArchive::mutable_action_motionpathsource() {
  ::TSD::PathSourceArchive* _msg = _internal_mutable_action_motionpathsource();
  // @@protoc_insertion_point(field_mutable:KN.BuildAttributesArchive.action_motionPathSource)
  return _msg;
}
inline void BuildAttributesArchive::set_allocated_action_motionpathsource(::TSD::PathSourceArchive* action_motionpathsource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.action_motionpathsource_);
  }
  if (action_motionpathsource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_motionpathsource));
    if (message_arena != submessage_arena) {
      action_motionpathsource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_motionpathsource, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.action_motionpathsource_ = action_motionpathsource;
  // @@protoc_insertion_point(field_set_allocated:KN.BuildAttributesArchive.action_motionPathSource)
}

// optional bool custom_bounce = 19;
inline bool BuildAttributesArchive::_internal_has_custom_bounce() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_custom_bounce() const {
  return _internal_has_custom_bounce();
}
inline void BuildAttributesArchive::clear_custom_bounce() {
  _impl_.custom_bounce_ = false;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline bool BuildAttributesArchive::_internal_custom_bounce() const {
  return _impl_.custom_bounce_;
}
inline bool BuildAttributesArchive::custom_bounce() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.custom_bounce)
  return _internal_custom_bounce();
}
inline void BuildAttributesArchive::_internal_set_custom_bounce(bool value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.custom_bounce_ = value;
}
inline void BuildAttributesArchive::set_custom_bounce(bool value) {
  _internal_set_custom_bounce(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.custom_bounce)
}

// optional .KN.BuildAttributesArchive.BuildAttributesTextDelivery custom_textDelivery = 20;
inline bool BuildAttributesArchive::_internal_has_custom_textdelivery() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_custom_textdelivery() const {
  return _internal_has_custom_textdelivery();
}
inline void BuildAttributesArchive::clear_custom_textdelivery() {
  _impl_.custom_textdelivery_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::KN::BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::_internal_custom_textdelivery() const {
  return static_cast< ::KN::BuildAttributesArchive_BuildAttributesTextDelivery >(_impl_.custom_textdelivery_);
}
inline ::KN::BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::custom_textdelivery() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.custom_textDelivery)
  return _internal_custom_textdelivery();
}
inline void BuildAttributesArchive::_internal_set_custom_textdelivery(::KN::BuildAttributesArchive_BuildAttributesTextDelivery value) {
  assert(::KN::BuildAttributesArchive_BuildAttributesTextDelivery_IsValid(value));
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.custom_textdelivery_ = value;
}
inline void BuildAttributesArchive::set_custom_textdelivery(::KN::BuildAttributesArchive_BuildAttributesTextDelivery value) {
  _internal_set_custom_textdelivery(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.custom_textDelivery)
}

// optional .KN.BuildAttributesArchive.BuildAttributesDeliveryOption custom_deliveryOption = 21;
inline bool BuildAttributesArchive::_internal_has_custom_deliveryoption() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_custom_deliveryoption() const {
  return _internal_has_custom_deliveryoption();
}
inline void BuildAttributesArchive::clear_custom_deliveryoption() {
  _impl_.custom_deliveryoption_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::KN::BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::_internal_custom_deliveryoption() const {
  return static_cast< ::KN::BuildAttributesArchive_BuildAttributesDeliveryOption >(_impl_.custom_deliveryoption_);
}
inline ::KN::BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::custom_deliveryoption() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.custom_deliveryOption)
  return _internal_custom_deliveryoption();
}
inline void BuildAttributesArchive::_internal_set_custom_deliveryoption(::KN::BuildAttributesArchive_BuildAttributesDeliveryOption value) {
  assert(::KN::BuildAttributesArchive_BuildAttributesDeliveryOption_IsValid(value));
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.custom_deliveryoption_ = value;
}
inline void BuildAttributesArchive::set_custom_deliveryoption(::KN::BuildAttributesArchive_BuildAttributesDeliveryOption value) {
  _internal_set_custom_deliveryoption(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.custom_deliveryOption)
}

// optional bool custom_action_decay = 23;
inline bool BuildAttributesArchive::_internal_has_custom_action_decay() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_custom_action_decay() const {
  return _internal_has_custom_action_decay();
}
inline void BuildAttributesArchive::clear_custom_action_decay() {
  _impl_.custom_action_decay_ = false;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline bool BuildAttributesArchive::_internal_custom_action_decay() const {
  return _impl_.custom_action_decay_;
}
inline bool BuildAttributesArchive::custom_action_decay() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.custom_action_decay)
  return _internal_custom_action_decay();
}
inline void BuildAttributesArchive::_internal_set_custom_action_decay(bool value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.custom_action_decay_ = value;
}
inline void BuildAttributesArchive::set_custom_action_decay(bool value) {
  _internal_set_custom_action_decay(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.custom_action_decay)
}

// optional uint32 custom_action_repeatCount = 24;
inline bool BuildAttributesArchive::_internal_has_custom_action_repeatcount() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_custom_action_repeatcount() const {
  return _internal_has_custom_action_repeatcount();
}
inline void BuildAttributesArchive::clear_custom_action_repeatcount() {
  _impl_.custom_action_repeatcount_ = 0u;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline uint32_t BuildAttributesArchive::_internal_custom_action_repeatcount() const {
  return _impl_.custom_action_repeatcount_;
}
inline uint32_t BuildAttributesArchive::custom_action_repeatcount() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.custom_action_repeatCount)
  return _internal_custom_action_repeatcount();
}
inline void BuildAttributesArchive::_internal_set_custom_action_repeatcount(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.custom_action_repeatcount_ = value;
}
inline void BuildAttributesArchive::set_custom_action_repeatcount(uint32_t value) {
  _internal_set_custom_action_repeatcount(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.custom_action_repeatCount)
}

// optional double custom_action_scale = 25;
inline bool BuildAttributesArchive::_internal_has_custom_action_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_custom_action_scale() const {
  return _internal_has_custom_action_scale();
}
inline void BuildAttributesArchive::clear_custom_action_scale() {
  _impl_.custom_action_scale_ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline double BuildAttributesArchive::_internal_custom_action_scale() const {
  return _impl_.custom_action_scale_;
}
inline double BuildAttributesArchive::custom_action_scale() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.custom_action_scale)
  return _internal_custom_action_scale();
}
inline void BuildAttributesArchive::_internal_set_custom_action_scale(double value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.custom_action_scale_ = value;
}
inline void BuildAttributesArchive::set_custom_action_scale(double value) {
  _internal_set_custom_action_scale(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.custom_action_scale)
}

// optional .KN.BuildAttributesArchive.ActionBuildAttributesJiggleIntensity custom_action_jiggleIntensity = 26;
inline bool BuildAttributesArchive::_internal_has_custom_action_jiggleintensity() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_custom_action_jiggleintensity() const {
  return _internal_has_custom_action_jiggleintensity();
}
inline void BuildAttributesArchive::clear_custom_action_jiggleintensity() {
  _impl_.custom_action_jiggleintensity_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline ::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity BuildAttributesArchive::_internal_custom_action_jiggleintensity() const {
  return static_cast< ::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity >(_impl_.custom_action_jiggleintensity_);
}
inline ::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity BuildAttributesArchive::custom_action_jiggleintensity() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.custom_action_jiggleIntensity)
  return _internal_custom_action_jiggleintensity();
}
inline void BuildAttributesArchive::_internal_set_custom_action_jiggleintensity(::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity value) {
  assert(::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_IsValid(value));
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.custom_action_jiggleintensity_ = value;
}
inline void BuildAttributesArchive::set_custom_action_jiggleintensity(::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity value) {
  _internal_set_custom_action_jiggleintensity(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.custom_action_jiggleIntensity)
}

// optional string database_animationType = 1;
inline bool BuildAttributesArchive::_internal_has_database_animationtype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_database_animationtype() const {
  return _internal_has_database_animationtype();
}
inline void BuildAttributesArchive::clear_database_animationtype() {
  _impl_.database_animationtype_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BuildAttributesArchive::database_animationtype() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.database_animationType)
  return _internal_database_animationtype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuildAttributesArchive::set_database_animationtype(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.database_animationtype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.database_animationType)
}
inline std::string* BuildAttributesArchive::mutable_database_animationtype() {
  std::string* _s = _internal_mutable_database_animationtype();
  // @@protoc_insertion_point(field_mutable:KN.BuildAttributesArchive.database_animationType)
  return _s;
}
inline const std::string& BuildAttributesArchive::_internal_database_animationtype() const {
  return _impl_.database_animationtype_.Get();
}
inline void BuildAttributesArchive::_internal_set_database_animationtype(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.database_animationtype_.Set(value, GetArenaForAllocation());
}
inline std::string* BuildAttributesArchive::_internal_mutable_database_animationtype() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.database_animationtype_.Mutable(GetArenaForAllocation());
}
inline std::string* BuildAttributesArchive::release_database_animationtype() {
  // @@protoc_insertion_point(field_release:KN.BuildAttributesArchive.database_animationType)
  if (!_internal_has_database_animationtype()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.database_animationtype_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.database_animationtype_.IsDefault()) {
    _impl_.database_animationtype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BuildAttributesArchive::set_allocated_database_animationtype(std::string* database_animationtype) {
  if (database_animationtype != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.database_animationtype_.SetAllocated(database_animationtype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.database_animationtype_.IsDefault()) {
    _impl_.database_animationtype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.BuildAttributesArchive.database_animationType)
}

// optional string database_effect = 2;
inline bool BuildAttributesArchive::_internal_has_database_effect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_database_effect() const {
  return _internal_has_database_effect();
}
inline void BuildAttributesArchive::clear_database_effect() {
  _impl_.database_effect_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BuildAttributesArchive::database_effect() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.database_effect)
  return _internal_database_effect();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuildAttributesArchive::set_database_effect(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.database_effect_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.database_effect)
}
inline std::string* BuildAttributesArchive::mutable_database_effect() {
  std::string* _s = _internal_mutable_database_effect();
  // @@protoc_insertion_point(field_mutable:KN.BuildAttributesArchive.database_effect)
  return _s;
}
inline const std::string& BuildAttributesArchive::_internal_database_effect() const {
  return _impl_.database_effect_.Get();
}
inline void BuildAttributesArchive::_internal_set_database_effect(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.database_effect_.Set(value, GetArenaForAllocation());
}
inline std::string* BuildAttributesArchive::_internal_mutable_database_effect() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.database_effect_.Mutable(GetArenaForAllocation());
}
inline std::string* BuildAttributesArchive::release_database_effect() {
  // @@protoc_insertion_point(field_release:KN.BuildAttributesArchive.database_effect)
  if (!_internal_has_database_effect()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.database_effect_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.database_effect_.IsDefault()) {
    _impl_.database_effect_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BuildAttributesArchive::set_allocated_database_effect(std::string* database_effect) {
  if (database_effect != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.database_effect_.SetAllocated(database_effect, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.database_effect_.IsDefault()) {
    _impl_.database_effect_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.BuildAttributesArchive.database_effect)
}

// optional uint32 database_direction = 3;
inline bool BuildAttributesArchive::_internal_has_database_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_database_direction() const {
  return _internal_has_database_direction();
}
inline void BuildAttributesArchive::clear_database_direction() {
  _impl_.database_direction_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t BuildAttributesArchive::_internal_database_direction() const {
  return _impl_.database_direction_;
}
inline uint32_t BuildAttributesArchive::database_direction() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.database_direction)
  return _internal_database_direction();
}
inline void BuildAttributesArchive::_internal_set_database_direction(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.database_direction_ = value;
}
inline void BuildAttributesArchive::set_database_direction(uint32_t value) {
  _internal_set_database_direction(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.database_direction)
}

// optional double database_delay = 5;
inline bool BuildAttributesArchive::_internal_has_database_delay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_database_delay() const {
  return _internal_has_database_delay();
}
inline void BuildAttributesArchive::clear_database_delay() {
  _impl_.database_delay_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double BuildAttributesArchive::_internal_database_delay() const {
  return _impl_.database_delay_;
}
inline double BuildAttributesArchive::database_delay() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.database_delay)
  return _internal_database_delay();
}
inline void BuildAttributesArchive::_internal_set_database_delay(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.database_delay_ = value;
}
inline void BuildAttributesArchive::set_database_delay(double value) {
  _internal_set_database_delay(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.database_delay)
}

// optional double database_duration = 8;
inline bool BuildAttributesArchive::_internal_has_database_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_database_duration() const {
  return _internal_has_database_duration();
}
inline void BuildAttributesArchive::clear_database_duration() {
  _impl_.database_duration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double BuildAttributesArchive::_internal_database_duration() const {
  return _impl_.database_duration_;
}
inline double BuildAttributesArchive::database_duration() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.database_duration)
  return _internal_database_duration();
}
inline void BuildAttributesArchive::_internal_set_database_duration(double value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.database_duration_ = value;
}
inline void BuildAttributesArchive::set_database_duration(double value) {
  _internal_set_database_duration(value);
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.database_duration)
}

// optional .TSP.Color database_color = 16;
inline bool BuildAttributesArchive::_internal_has_database_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.database_color_ != nullptr);
  return value;
}
inline bool BuildAttributesArchive::has_database_color() const {
  return _internal_has_database_color();
}
inline const ::TSP::Color& BuildAttributesArchive::_internal_database_color() const {
  const ::TSP::Color* p = _impl_.database_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Color&>(
      ::TSP::_Color_default_instance_);
}
inline const ::TSP::Color& BuildAttributesArchive::database_color() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.database_color)
  return _internal_database_color();
}
inline void BuildAttributesArchive::unsafe_arena_set_allocated_database_color(
    ::TSP::Color* database_color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.database_color_);
  }
  _impl_.database_color_ = database_color;
  if (database_color) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.BuildAttributesArchive.database_color)
}
inline ::TSP::Color* BuildAttributesArchive::release_database_color() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Color* temp = _impl_.database_color_;
  _impl_.database_color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Color* BuildAttributesArchive::unsafe_arena_release_database_color() {
  // @@protoc_insertion_point(field_release:KN.BuildAttributesArchive.database_color)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Color* temp = _impl_.database_color_;
  _impl_.database_color_ = nullptr;
  return temp;
}
inline ::TSP::Color* BuildAttributesArchive::_internal_mutable_database_color() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.database_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Color>(GetArenaForAllocation());
    _impl_.database_color_ = p;
  }
  return _impl_.database_color_;
}
inline ::TSP::Color* BuildAttributesArchive::mutable_database_color() {
  ::TSP::Color* _msg = _internal_mutable_database_color();
  // @@protoc_insertion_point(field_mutable:KN.BuildAttributesArchive.database_color)
  return _msg;
}
inline void BuildAttributesArchive::set_allocated_database_color(::TSP::Color* database_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.database_color_);
  }
  if (database_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_color));
    if (message_arena != submessage_arena) {
      database_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, database_color, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.database_color_ = database_color;
  // @@protoc_insertion_point(field_set_allocated:KN.BuildAttributesArchive.database_color)
}

// optional string motionPathString = 15 [deprecated = true];
inline bool BuildAttributesArchive::_internal_has_motionpathstring() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BuildAttributesArchive::has_motionpathstring() const {
  return _internal_has_motionpathstring();
}
inline void BuildAttributesArchive::clear_motionpathstring() {
  _impl_.motionpathstring_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BuildAttributesArchive::motionpathstring() const {
  // @@protoc_insertion_point(field_get:KN.BuildAttributesArchive.motionPathString)
  return _internal_motionpathstring();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuildAttributesArchive::set_motionpathstring(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.motionpathstring_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.BuildAttributesArchive.motionPathString)
}
inline std::string* BuildAttributesArchive::mutable_motionpathstring() {
  std::string* _s = _internal_mutable_motionpathstring();
  // @@protoc_insertion_point(field_mutable:KN.BuildAttributesArchive.motionPathString)
  return _s;
}
inline const std::string& BuildAttributesArchive::_internal_motionpathstring() const {
  return _impl_.motionpathstring_.Get();
}
inline void BuildAttributesArchive::_internal_set_motionpathstring(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.motionpathstring_.Set(value, GetArenaForAllocation());
}
inline std::string* BuildAttributesArchive::_internal_mutable_motionpathstring() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.motionpathstring_.Mutable(GetArenaForAllocation());
}
inline std::string* BuildAttributesArchive::release_motionpathstring() {
  // @@protoc_insertion_point(field_release:KN.BuildAttributesArchive.motionPathString)
  if (!_internal_has_motionpathstring()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.motionpathstring_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.motionpathstring_.IsDefault()) {
    _impl_.motionpathstring_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BuildAttributesArchive::set_allocated_motionpathstring(std::string* motionpathstring) {
  if (motionpathstring != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.motionpathstring_.SetAllocated(motionpathstring, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.motionpathstring_.IsDefault()) {
    _impl_.motionpathstring_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.BuildAttributesArchive.motionPathString)
}

// -------------------------------------------------------------------

// BuildArchive

// required .TSP.Reference drawable = 1;
inline bool BuildArchive::_internal_has_drawable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.drawable_ != nullptr);
  return value;
}
inline bool BuildArchive::has_drawable() const {
  return _internal_has_drawable();
}
inline const ::TSP::Reference& BuildArchive::_internal_drawable() const {
  const ::TSP::Reference* p = _impl_.drawable_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& BuildArchive::drawable() const {
  // @@protoc_insertion_point(field_get:KN.BuildArchive.drawable)
  return _internal_drawable();
}
inline void BuildArchive::unsafe_arena_set_allocated_drawable(
    ::TSP::Reference* drawable) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drawable_);
  }
  _impl_.drawable_ = drawable;
  if (drawable) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.BuildArchive.drawable)
}
inline ::TSP::Reference* BuildArchive::release_drawable() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.drawable_;
  _impl_.drawable_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* BuildArchive::unsafe_arena_release_drawable() {
  // @@protoc_insertion_point(field_release:KN.BuildArchive.drawable)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.drawable_;
  _impl_.drawable_ = nullptr;
  return temp;
}
inline ::TSP::Reference* BuildArchive::_internal_mutable_drawable() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.drawable_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.drawable_ = p;
  }
  return _impl_.drawable_;
}
inline ::TSP::Reference* BuildArchive::mutable_drawable() {
  ::TSP::Reference* _msg = _internal_mutable_drawable();
  // @@protoc_insertion_point(field_mutable:KN.BuildArchive.drawable)
  return _msg;
}
inline void BuildArchive::set_allocated_drawable(::TSP::Reference* drawable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drawable_);
  }
  if (drawable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable));
    if (message_arena != submessage_arena) {
      drawable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drawable, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.drawable_ = drawable;
  // @@protoc_insertion_point(field_set_allocated:KN.BuildArchive.drawable)
}

// required string delivery = 2;
inline bool BuildArchive::_internal_has_delivery() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BuildArchive::has_delivery() const {
  return _internal_has_delivery();
}
inline void BuildArchive::clear_delivery() {
  _impl_.delivery_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BuildArchive::delivery() const {
  // @@protoc_insertion_point(field_get:KN.BuildArchive.delivery)
  return _internal_delivery();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuildArchive::set_delivery(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.delivery_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.BuildArchive.delivery)
}
inline std::string* BuildArchive::mutable_delivery() {
  std::string* _s = _internal_mutable_delivery();
  // @@protoc_insertion_point(field_mutable:KN.BuildArchive.delivery)
  return _s;
}
inline const std::string& BuildArchive::_internal_delivery() const {
  return _impl_.delivery_.Get();
}
inline void BuildArchive::_internal_set_delivery(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.delivery_.Set(value, GetArenaForAllocation());
}
inline std::string* BuildArchive::_internal_mutable_delivery() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.delivery_.Mutable(GetArenaForAllocation());
}
inline std::string* BuildArchive::release_delivery() {
  // @@protoc_insertion_point(field_release:KN.BuildArchive.delivery)
  if (!_internal_has_delivery()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.delivery_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.delivery_.IsDefault()) {
    _impl_.delivery_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BuildArchive::set_allocated_delivery(std::string* delivery) {
  if (delivery != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.delivery_.SetAllocated(delivery, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.delivery_.IsDefault()) {
    _impl_.delivery_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.BuildArchive.delivery)
}

// required double duration = 3;
inline bool BuildArchive::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BuildArchive::has_duration() const {
  return _internal_has_duration();
}
inline void BuildArchive::clear_duration() {
  _impl_.duration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double BuildArchive::_internal_duration() const {
  return _impl_.duration_;
}
inline double BuildArchive::duration() const {
  // @@protoc_insertion_point(field_get:KN.BuildArchive.duration)
  return _internal_duration();
}
inline void BuildArchive::_internal_set_duration(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.duration_ = value;
}
inline void BuildArchive::set_duration(double value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:KN.BuildArchive.duration)
}

// required .KN.BuildAttributesArchive attributes = 4;
inline bool BuildArchive::_internal_has_attributes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.attributes_ != nullptr);
  return value;
}
inline bool BuildArchive::has_attributes() const {
  return _internal_has_attributes();
}
inline void BuildArchive::clear_attributes() {
  if (_impl_.attributes_ != nullptr) _impl_.attributes_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::KN::BuildAttributesArchive& BuildArchive::_internal_attributes() const {
  const ::KN::BuildAttributesArchive* p = _impl_.attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::BuildAttributesArchive&>(
      ::KN::_BuildAttributesArchive_default_instance_);
}
inline const ::KN::BuildAttributesArchive& BuildArchive::attributes() const {
  // @@protoc_insertion_point(field_get:KN.BuildArchive.attributes)
  return _internal_attributes();
}
inline void BuildArchive::unsafe_arena_set_allocated_attributes(
    ::KN::BuildAttributesArchive* attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  _impl_.attributes_ = attributes;
  if (attributes) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.BuildArchive.attributes)
}
inline ::KN::BuildAttributesArchive* BuildArchive::release_attributes() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::KN::BuildAttributesArchive* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::BuildAttributesArchive* BuildArchive::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:KN.BuildArchive.attributes)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::KN::BuildAttributesArchive* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
  return temp;
}
inline ::KN::BuildAttributesArchive* BuildArchive::_internal_mutable_attributes() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::BuildAttributesArchive>(GetArenaForAllocation());
    _impl_.attributes_ = p;
  }
  return _impl_.attributes_;
}
inline ::KN::BuildAttributesArchive* BuildArchive::mutable_attributes() {
  ::KN::BuildAttributesArchive* _msg = _internal_mutable_attributes();
  // @@protoc_insertion_point(field_mutable:KN.BuildArchive.attributes)
  return _msg;
}
inline void BuildArchive::set_allocated_attributes(::KN::BuildAttributesArchive* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.attributes_;
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attributes);
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:KN.BuildArchive.attributes)
}

// -------------------------------------------------------------------

// PlaceholderArchive

// required .TSWP.ShapeInfoArchive super = 1;
inline bool PlaceholderArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool PlaceholderArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSWP::ShapeInfoArchive& PlaceholderArchive::_internal_super() const {
  const ::TSWP::ShapeInfoArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ShapeInfoArchive&>(
      ::TSWP::_ShapeInfoArchive_default_instance_);
}
inline const ::TSWP::ShapeInfoArchive& PlaceholderArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.PlaceholderArchive.super)
  return _internal_super();
}
inline void PlaceholderArchive::unsafe_arena_set_allocated_super(
    ::TSWP::ShapeInfoArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.PlaceholderArchive.super)
}
inline ::TSWP::ShapeInfoArchive* PlaceholderArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSWP::ShapeInfoArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::ShapeInfoArchive* PlaceholderArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.PlaceholderArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSWP::ShapeInfoArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSWP::ShapeInfoArchive* PlaceholderArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ShapeInfoArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSWP::ShapeInfoArchive* PlaceholderArchive::mutable_super() {
  ::TSWP::ShapeInfoArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.PlaceholderArchive.super)
  return _msg;
}
inline void PlaceholderArchive::set_allocated_super(::TSWP::ShapeInfoArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.PlaceholderArchive.super)
}

// optional .KN.PlaceholderArchive.Kind kind = 2 [default = kKindPlaceholder];
inline bool PlaceholderArchive::_internal_has_kind() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlaceholderArchive::has_kind() const {
  return _internal_has_kind();
}
inline void PlaceholderArchive::clear_kind() {
  _impl_.kind_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::KN::PlaceholderArchive_Kind PlaceholderArchive::_internal_kind() const {
  return static_cast< ::KN::PlaceholderArchive_Kind >(_impl_.kind_);
}
inline ::KN::PlaceholderArchive_Kind PlaceholderArchive::kind() const {
  // @@protoc_insertion_point(field_get:KN.PlaceholderArchive.kind)
  return _internal_kind();
}
inline void PlaceholderArchive::_internal_set_kind(::KN::PlaceholderArchive_Kind value) {
  assert(::KN::PlaceholderArchive_Kind_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.kind_ = value;
}
inline void PlaceholderArchive::set_kind(::KN::PlaceholderArchive_Kind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:KN.PlaceholderArchive.kind)
}

// -------------------------------------------------------------------

// NoteArchive

// required .TSP.Reference containedStorage = 1;
inline bool NoteArchive::_internal_has_containedstorage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.containedstorage_ != nullptr);
  return value;
}
inline bool NoteArchive::has_containedstorage() const {
  return _internal_has_containedstorage();
}
inline const ::TSP::Reference& NoteArchive::_internal_containedstorage() const {
  const ::TSP::Reference* p = _impl_.containedstorage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& NoteArchive::containedstorage() const {
  // @@protoc_insertion_point(field_get:KN.NoteArchive.containedStorage)
  return _internal_containedstorage();
}
inline void NoteArchive::unsafe_arena_set_allocated_containedstorage(
    ::TSP::Reference* containedstorage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.containedstorage_);
  }
  _impl_.containedstorage_ = containedstorage;
  if (containedstorage) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.NoteArchive.containedStorage)
}
inline ::TSP::Reference* NoteArchive::release_containedstorage() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.containedstorage_;
  _impl_.containedstorage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* NoteArchive::unsafe_arena_release_containedstorage() {
  // @@protoc_insertion_point(field_release:KN.NoteArchive.containedStorage)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.containedstorage_;
  _impl_.containedstorage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* NoteArchive::_internal_mutable_containedstorage() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.containedstorage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.containedstorage_ = p;
  }
  return _impl_.containedstorage_;
}
inline ::TSP::Reference* NoteArchive::mutable_containedstorage() {
  ::TSP::Reference* _msg = _internal_mutable_containedstorage();
  // @@protoc_insertion_point(field_mutable:KN.NoteArchive.containedStorage)
  return _msg;
}
inline void NoteArchive::set_allocated_containedstorage(::TSP::Reference* containedstorage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.containedstorage_);
  }
  if (containedstorage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(containedstorage));
    if (message_arena != submessage_arena) {
      containedstorage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, containedstorage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.containedstorage_ = containedstorage;
  // @@protoc_insertion_point(field_set_allocated:KN.NoteArchive.containedStorage)
}

// -------------------------------------------------------------------

// ClassicStylesheetRecordArchive

// repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 1;
inline int ClassicStylesheetRecordArchive::_internal_identifier_to_style_map_size() const {
  return _impl_.identifier_to_style_map_.size();
}
inline int ClassicStylesheetRecordArchive::identifier_to_style_map_size() const {
  return _internal_identifier_to_style_map_size();
}
inline ::TSS::StylesheetArchive_IdentifiedStyleEntry* ClassicStylesheetRecordArchive::mutable_identifier_to_style_map(int index) {
  // @@protoc_insertion_point(field_mutable:KN.ClassicStylesheetRecordArchive.identifier_to_style_map)
  return _impl_.identifier_to_style_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_IdentifiedStyleEntry >*
ClassicStylesheetRecordArchive::mutable_identifier_to_style_map() {
  // @@protoc_insertion_point(field_mutable_list:KN.ClassicStylesheetRecordArchive.identifier_to_style_map)
  return &_impl_.identifier_to_style_map_;
}
inline const ::TSS::StylesheetArchive_IdentifiedStyleEntry& ClassicStylesheetRecordArchive::_internal_identifier_to_style_map(int index) const {
  return _impl_.identifier_to_style_map_.Get(index);
}
inline const ::TSS::StylesheetArchive_IdentifiedStyleEntry& ClassicStylesheetRecordArchive::identifier_to_style_map(int index) const {
  // @@protoc_insertion_point(field_get:KN.ClassicStylesheetRecordArchive.identifier_to_style_map)
  return _internal_identifier_to_style_map(index);
}
inline ::TSS::StylesheetArchive_IdentifiedStyleEntry* ClassicStylesheetRecordArchive::_internal_add_identifier_to_style_map() {
  return _impl_.identifier_to_style_map_.Add();
}
inline ::TSS::StylesheetArchive_IdentifiedStyleEntry* ClassicStylesheetRecordArchive::add_identifier_to_style_map() {
  ::TSS::StylesheetArchive_IdentifiedStyleEntry* _add = _internal_add_identifier_to_style_map();
  // @@protoc_insertion_point(field_add:KN.ClassicStylesheetRecordArchive.identifier_to_style_map)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_IdentifiedStyleEntry >&
ClassicStylesheetRecordArchive::identifier_to_style_map() const {
  // @@protoc_insertion_point(field_list:KN.ClassicStylesheetRecordArchive.identifier_to_style_map)
  return _impl_.identifier_to_style_map_;
}

// optional .TSP.Reference theme = 2;
inline bool ClassicStylesheetRecordArchive::_internal_has_theme() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.theme_ != nullptr);
  return value;
}
inline bool ClassicStylesheetRecordArchive::has_theme() const {
  return _internal_has_theme();
}
inline const ::TSP::Reference& ClassicStylesheetRecordArchive::_internal_theme() const {
  const ::TSP::Reference* p = _impl_.theme_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ClassicStylesheetRecordArchive::theme() const {
  // @@protoc_insertion_point(field_get:KN.ClassicStylesheetRecordArchive.theme)
  return _internal_theme();
}
inline void ClassicStylesheetRecordArchive::unsafe_arena_set_allocated_theme(
    ::TSP::Reference* theme) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.theme_);
  }
  _impl_.theme_ = theme;
  if (theme) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ClassicStylesheetRecordArchive.theme)
}
inline ::TSP::Reference* ClassicStylesheetRecordArchive::release_theme() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.theme_;
  _impl_.theme_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ClassicStylesheetRecordArchive::unsafe_arena_release_theme() {
  // @@protoc_insertion_point(field_release:KN.ClassicStylesheetRecordArchive.theme)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.theme_;
  _impl_.theme_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ClassicStylesheetRecordArchive::_internal_mutable_theme() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.theme_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.theme_ = p;
  }
  return _impl_.theme_;
}
inline ::TSP::Reference* ClassicStylesheetRecordArchive::mutable_theme() {
  ::TSP::Reference* _msg = _internal_mutable_theme();
  // @@protoc_insertion_point(field_mutable:KN.ClassicStylesheetRecordArchive.theme)
  return _msg;
}
inline void ClassicStylesheetRecordArchive::set_allocated_theme(::TSP::Reference* theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.theme_);
  }
  if (theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme));
    if (message_arena != submessage_arena) {
      theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, theme, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.theme_ = theme;
  // @@protoc_insertion_point(field_set_allocated:KN.ClassicStylesheetRecordArchive.theme)
}

// -------------------------------------------------------------------

// ClassicThemeRecordArchive

// optional string uuid = 1;
inline bool ClassicThemeRecordArchive::_internal_has_uuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClassicThemeRecordArchive::has_uuid() const {
  return _internal_has_uuid();
}
inline void ClassicThemeRecordArchive::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClassicThemeRecordArchive::uuid() const {
  // @@protoc_insertion_point(field_get:KN.ClassicThemeRecordArchive.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClassicThemeRecordArchive::set_uuid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.ClassicThemeRecordArchive.uuid)
}
inline std::string* ClassicThemeRecordArchive::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:KN.ClassicThemeRecordArchive.uuid)
  return _s;
}
inline const std::string& ClassicThemeRecordArchive::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void ClassicThemeRecordArchive::_internal_set_uuid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* ClassicThemeRecordArchive::_internal_mutable_uuid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* ClassicThemeRecordArchive::release_uuid() {
  // @@protoc_insertion_point(field_release:KN.ClassicThemeRecordArchive.uuid)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.uuid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClassicThemeRecordArchive::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.ClassicThemeRecordArchive.uuid)
}

// optional .TSP.Reference stylesheetRecord = 2;
inline bool ClassicThemeRecordArchive::_internal_has_stylesheetrecord() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stylesheetrecord_ != nullptr);
  return value;
}
inline bool ClassicThemeRecordArchive::has_stylesheetrecord() const {
  return _internal_has_stylesheetrecord();
}
inline const ::TSP::Reference& ClassicThemeRecordArchive::_internal_stylesheetrecord() const {
  const ::TSP::Reference* p = _impl_.stylesheetrecord_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ClassicThemeRecordArchive::stylesheetrecord() const {
  // @@protoc_insertion_point(field_get:KN.ClassicThemeRecordArchive.stylesheetRecord)
  return _internal_stylesheetrecord();
}
inline void ClassicThemeRecordArchive::unsafe_arena_set_allocated_stylesheetrecord(
    ::TSP::Reference* stylesheetrecord) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stylesheetrecord_);
  }
  _impl_.stylesheetrecord_ = stylesheetrecord;
  if (stylesheetrecord) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ClassicThemeRecordArchive.stylesheetRecord)
}
inline ::TSP::Reference* ClassicThemeRecordArchive::release_stylesheetrecord() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.stylesheetrecord_;
  _impl_.stylesheetrecord_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ClassicThemeRecordArchive::unsafe_arena_release_stylesheetrecord() {
  // @@protoc_insertion_point(field_release:KN.ClassicThemeRecordArchive.stylesheetRecord)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.stylesheetrecord_;
  _impl_.stylesheetrecord_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ClassicThemeRecordArchive::_internal_mutable_stylesheetrecord() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.stylesheetrecord_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.stylesheetrecord_ = p;
  }
  return _impl_.stylesheetrecord_;
}
inline ::TSP::Reference* ClassicThemeRecordArchive::mutable_stylesheetrecord() {
  ::TSP::Reference* _msg = _internal_mutable_stylesheetrecord();
  // @@protoc_insertion_point(field_mutable:KN.ClassicThemeRecordArchive.stylesheetRecord)
  return _msg;
}
inline void ClassicThemeRecordArchive::set_allocated_stylesheetrecord(::TSP::Reference* stylesheetrecord) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stylesheetrecord_);
  }
  if (stylesheetrecord) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stylesheetrecord));
    if (message_arena != submessage_arena) {
      stylesheetrecord = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stylesheetrecord, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.stylesheetrecord_ = stylesheetrecord;
  // @@protoc_insertion_point(field_set_allocated:KN.ClassicThemeRecordArchive.stylesheetRecord)
}

// repeated .TSP.Reference masters = 3;
inline int ClassicThemeRecordArchive::_internal_masters_size() const {
  return _impl_.masters_.size();
}
inline int ClassicThemeRecordArchive::masters_size() const {
  return _internal_masters_size();
}
inline ::TSP::Reference* ClassicThemeRecordArchive::mutable_masters(int index) {
  // @@protoc_insertion_point(field_mutable:KN.ClassicThemeRecordArchive.masters)
  return _impl_.masters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ClassicThemeRecordArchive::mutable_masters() {
  // @@protoc_insertion_point(field_mutable_list:KN.ClassicThemeRecordArchive.masters)
  return &_impl_.masters_;
}
inline const ::TSP::Reference& ClassicThemeRecordArchive::_internal_masters(int index) const {
  return _impl_.masters_.Get(index);
}
inline const ::TSP::Reference& ClassicThemeRecordArchive::masters(int index) const {
  // @@protoc_insertion_point(field_get:KN.ClassicThemeRecordArchive.masters)
  return _internal_masters(index);
}
inline ::TSP::Reference* ClassicThemeRecordArchive::_internal_add_masters() {
  return _impl_.masters_.Add();
}
inline ::TSP::Reference* ClassicThemeRecordArchive::add_masters() {
  ::TSP::Reference* _add = _internal_add_masters();
  // @@protoc_insertion_point(field_add:KN.ClassicThemeRecordArchive.masters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ClassicThemeRecordArchive::masters() const {
  // @@protoc_insertion_point(field_list:KN.ClassicThemeRecordArchive.masters)
  return _impl_.masters_;
}

// -------------------------------------------------------------------

// SlideArchive_SageTagMapEntry

// required string tag = 1;
inline bool SlideArchive_SageTagMapEntry::_internal_has_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SlideArchive_SageTagMapEntry::has_tag() const {
  return _internal_has_tag();
}
inline void SlideArchive_SageTagMapEntry::clear_tag() {
  _impl_.tag_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SlideArchive_SageTagMapEntry::tag() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.SageTagMapEntry.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SlideArchive_SageTagMapEntry::set_tag(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.SlideArchive.SageTagMapEntry.tag)
}
inline std::string* SlideArchive_SageTagMapEntry::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.SageTagMapEntry.tag)
  return _s;
}
inline const std::string& SlideArchive_SageTagMapEntry::_internal_tag() const {
  return _impl_.tag_.Get();
}
inline void SlideArchive_SageTagMapEntry::_internal_set_tag(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tag_.Set(value, GetArenaForAllocation());
}
inline std::string* SlideArchive_SageTagMapEntry::_internal_mutable_tag() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.tag_.Mutable(GetArenaForAllocation());
}
inline std::string* SlideArchive_SageTagMapEntry::release_tag() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.SageTagMapEntry.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SlideArchive_SageTagMapEntry::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tag_.SetAllocated(tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.SageTagMapEntry.tag)
}

// required .TSP.Reference info = 2;
inline bool SlideArchive_SageTagMapEntry::_internal_has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline bool SlideArchive_SageTagMapEntry::has_info() const {
  return _internal_has_info();
}
inline const ::TSP::Reference& SlideArchive_SageTagMapEntry::_internal_info() const {
  const ::TSP::Reference* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideArchive_SageTagMapEntry::info() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.SageTagMapEntry.info)
  return _internal_info();
}
inline void SlideArchive_SageTagMapEntry::unsafe_arena_set_allocated_info(
    ::TSP::Reference* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.SageTagMapEntry.info)
}
inline ::TSP::Reference* SlideArchive_SageTagMapEntry::release_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideArchive_SageTagMapEntry::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.SageTagMapEntry.info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideArchive_SageTagMapEntry::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::TSP::Reference* SlideArchive_SageTagMapEntry::mutable_info() {
  ::TSP::Reference* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.SageTagMapEntry.info)
  return _msg;
}
inline void SlideArchive_SageTagMapEntry::set_allocated_info(::TSP::Reference* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.SageTagMapEntry.info)
}

// -------------------------------------------------------------------

// SlideArchive

// required .TSP.Reference style = 1;
inline bool SlideArchive::_internal_has_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.style_ != nullptr);
  return value;
}
inline bool SlideArchive::has_style() const {
  return _internal_has_style();
}
inline const ::TSP::Reference& SlideArchive::_internal_style() const {
  const ::TSP::Reference* p = _impl_.style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideArchive::style() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.style)
  return _internal_style();
}
inline void SlideArchive::unsafe_arena_set_allocated_style(
    ::TSP::Reference* style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.style_);
  }
  _impl_.style_ = style;
  if (style) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.style)
}
inline ::TSP::Reference* SlideArchive::release_style() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.style_;
  _impl_.style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideArchive::unsafe_arena_release_style() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.style)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.style_;
  _impl_.style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideArchive::_internal_mutable_style() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.style_ = p;
  }
  return _impl_.style_;
}
inline ::TSP::Reference* SlideArchive::mutable_style() {
  ::TSP::Reference* _msg = _internal_mutable_style();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.style)
  return _msg;
}
inline void SlideArchive::set_allocated_style(::TSP::Reference* style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.style_);
  }
  if (style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style));
    if (message_arena != submessage_arena) {
      style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.style_ = style;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.style)
}

// repeated .TSP.Reference builds = 2;
inline int SlideArchive::_internal_builds_size() const {
  return _impl_.builds_.size();
}
inline int SlideArchive::builds_size() const {
  return _internal_builds_size();
}
inline ::TSP::Reference* SlideArchive::mutable_builds(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.builds)
  return _impl_.builds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SlideArchive::mutable_builds() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideArchive.builds)
  return &_impl_.builds_;
}
inline const ::TSP::Reference& SlideArchive::_internal_builds(int index) const {
  return _impl_.builds_.Get(index);
}
inline const ::TSP::Reference& SlideArchive::builds(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.builds)
  return _internal_builds(index);
}
inline ::TSP::Reference* SlideArchive::_internal_add_builds() {
  return _impl_.builds_.Add();
}
inline ::TSP::Reference* SlideArchive::add_builds() {
  ::TSP::Reference* _add = _internal_add_builds();
  // @@protoc_insertion_point(field_add:KN.SlideArchive.builds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SlideArchive::builds() const {
  // @@protoc_insertion_point(field_list:KN.SlideArchive.builds)
  return _impl_.builds_;
}

// repeated .KN.BuildChunkArchive buildChunks = 3;
inline int SlideArchive::_internal_buildchunks_size() const {
  return _impl_.buildchunks_.size();
}
inline int SlideArchive::buildchunks_size() const {
  return _internal_buildchunks_size();
}
inline void SlideArchive::clear_buildchunks() {
  _impl_.buildchunks_.Clear();
}
inline ::KN::BuildChunkArchive* SlideArchive::mutable_buildchunks(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.buildChunks)
  return _impl_.buildchunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkArchive >*
SlideArchive::mutable_buildchunks() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideArchive.buildChunks)
  return &_impl_.buildchunks_;
}
inline const ::KN::BuildChunkArchive& SlideArchive::_internal_buildchunks(int index) const {
  return _impl_.buildchunks_.Get(index);
}
inline const ::KN::BuildChunkArchive& SlideArchive::buildchunks(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.buildChunks)
  return _internal_buildchunks(index);
}
inline ::KN::BuildChunkArchive* SlideArchive::_internal_add_buildchunks() {
  return _impl_.buildchunks_.Add();
}
inline ::KN::BuildChunkArchive* SlideArchive::add_buildchunks() {
  ::KN::BuildChunkArchive* _add = _internal_add_buildchunks();
  // @@protoc_insertion_point(field_add:KN.SlideArchive.buildChunks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkArchive >&
SlideArchive::buildchunks() const {
  // @@protoc_insertion_point(field_list:KN.SlideArchive.buildChunks)
  return _impl_.buildchunks_;
}

// required .KN.TransitionArchive transition = 4;
inline bool SlideArchive::_internal_has_transition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transition_ != nullptr);
  return value;
}
inline bool SlideArchive::has_transition() const {
  return _internal_has_transition();
}
inline void SlideArchive::clear_transition() {
  if (_impl_.transition_ != nullptr) _impl_.transition_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::KN::TransitionArchive& SlideArchive::_internal_transition() const {
  const ::KN::TransitionArchive* p = _impl_.transition_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::TransitionArchive&>(
      ::KN::_TransitionArchive_default_instance_);
}
inline const ::KN::TransitionArchive& SlideArchive::transition() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.transition)
  return _internal_transition();
}
inline void SlideArchive::unsafe_arena_set_allocated_transition(
    ::KN::TransitionArchive* transition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transition_);
  }
  _impl_.transition_ = transition;
  if (transition) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.transition)
}
inline ::KN::TransitionArchive* SlideArchive::release_transition() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::KN::TransitionArchive* temp = _impl_.transition_;
  _impl_.transition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::TransitionArchive* SlideArchive::unsafe_arena_release_transition() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.transition)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::KN::TransitionArchive* temp = _impl_.transition_;
  _impl_.transition_ = nullptr;
  return temp;
}
inline ::KN::TransitionArchive* SlideArchive::_internal_mutable_transition() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.transition_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::TransitionArchive>(GetArenaForAllocation());
    _impl_.transition_ = p;
  }
  return _impl_.transition_;
}
inline ::KN::TransitionArchive* SlideArchive::mutable_transition() {
  ::KN::TransitionArchive* _msg = _internal_mutable_transition();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.transition)
  return _msg;
}
inline void SlideArchive::set_allocated_transition(::KN::TransitionArchive* transition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transition_;
  }
  if (transition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transition);
    if (message_arena != submessage_arena) {
      transition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transition, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.transition_ = transition;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.transition)
}

// optional .TSP.Reference titlePlaceholder = 5;
inline bool SlideArchive::_internal_has_titleplaceholder() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.titleplaceholder_ != nullptr);
  return value;
}
inline bool SlideArchive::has_titleplaceholder() const {
  return _internal_has_titleplaceholder();
}
inline const ::TSP::Reference& SlideArchive::_internal_titleplaceholder() const {
  const ::TSP::Reference* p = _impl_.titleplaceholder_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideArchive::titleplaceholder() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.titlePlaceholder)
  return _internal_titleplaceholder();
}
inline void SlideArchive::unsafe_arena_set_allocated_titleplaceholder(
    ::TSP::Reference* titleplaceholder) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.titleplaceholder_);
  }
  _impl_.titleplaceholder_ = titleplaceholder;
  if (titleplaceholder) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.titlePlaceholder)
}
inline ::TSP::Reference* SlideArchive::release_titleplaceholder() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.titleplaceholder_;
  _impl_.titleplaceholder_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideArchive::unsafe_arena_release_titleplaceholder() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.titlePlaceholder)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.titleplaceholder_;
  _impl_.titleplaceholder_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideArchive::_internal_mutable_titleplaceholder() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.titleplaceholder_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.titleplaceholder_ = p;
  }
  return _impl_.titleplaceholder_;
}
inline ::TSP::Reference* SlideArchive::mutable_titleplaceholder() {
  ::TSP::Reference* _msg = _internal_mutable_titleplaceholder();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.titlePlaceholder)
  return _msg;
}
inline void SlideArchive::set_allocated_titleplaceholder(::TSP::Reference* titleplaceholder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.titleplaceholder_);
  }
  if (titleplaceholder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(titleplaceholder));
    if (message_arena != submessage_arena) {
      titleplaceholder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, titleplaceholder, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.titleplaceholder_ = titleplaceholder;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.titlePlaceholder)
}

// optional .TSP.Reference bodyPlaceholder = 6;
inline bool SlideArchive::_internal_has_bodyplaceholder() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bodyplaceholder_ != nullptr);
  return value;
}
inline bool SlideArchive::has_bodyplaceholder() const {
  return _internal_has_bodyplaceholder();
}
inline const ::TSP::Reference& SlideArchive::_internal_bodyplaceholder() const {
  const ::TSP::Reference* p = _impl_.bodyplaceholder_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideArchive::bodyplaceholder() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.bodyPlaceholder)
  return _internal_bodyplaceholder();
}
inline void SlideArchive::unsafe_arena_set_allocated_bodyplaceholder(
    ::TSP::Reference* bodyplaceholder) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bodyplaceholder_);
  }
  _impl_.bodyplaceholder_ = bodyplaceholder;
  if (bodyplaceholder) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.bodyPlaceholder)
}
inline ::TSP::Reference* SlideArchive::release_bodyplaceholder() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.bodyplaceholder_;
  _impl_.bodyplaceholder_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideArchive::unsafe_arena_release_bodyplaceholder() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.bodyPlaceholder)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.bodyplaceholder_;
  _impl_.bodyplaceholder_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideArchive::_internal_mutable_bodyplaceholder() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.bodyplaceholder_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.bodyplaceholder_ = p;
  }
  return _impl_.bodyplaceholder_;
}
inline ::TSP::Reference* SlideArchive::mutable_bodyplaceholder() {
  ::TSP::Reference* _msg = _internal_mutable_bodyplaceholder();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.bodyPlaceholder)
  return _msg;
}
inline void SlideArchive::set_allocated_bodyplaceholder(::TSP::Reference* bodyplaceholder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bodyplaceholder_);
  }
  if (bodyplaceholder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bodyplaceholder));
    if (message_arena != submessage_arena) {
      bodyplaceholder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bodyplaceholder, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.bodyplaceholder_ = bodyplaceholder;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.bodyPlaceholder)
}

// optional .TSP.Reference objectPlaceholder = 30;
inline bool SlideArchive::_internal_has_objectplaceholder() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.objectplaceholder_ != nullptr);
  return value;
}
inline bool SlideArchive::has_objectplaceholder() const {
  return _internal_has_objectplaceholder();
}
inline const ::TSP::Reference& SlideArchive::_internal_objectplaceholder() const {
  const ::TSP::Reference* p = _impl_.objectplaceholder_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideArchive::objectplaceholder() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.objectPlaceholder)
  return _internal_objectplaceholder();
}
inline void SlideArchive::unsafe_arena_set_allocated_objectplaceholder(
    ::TSP::Reference* objectplaceholder) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectplaceholder_);
  }
  _impl_.objectplaceholder_ = objectplaceholder;
  if (objectplaceholder) {
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.objectPlaceholder)
}
inline ::TSP::Reference* SlideArchive::release_objectplaceholder() {
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::TSP::Reference* temp = _impl_.objectplaceholder_;
  _impl_.objectplaceholder_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideArchive::unsafe_arena_release_objectplaceholder() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.objectPlaceholder)
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::TSP::Reference* temp = _impl_.objectplaceholder_;
  _impl_.objectplaceholder_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideArchive::_internal_mutable_objectplaceholder() {
  _impl_._has_bits_[0] |= 0x00020000u;
  if (_impl_.objectplaceholder_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.objectplaceholder_ = p;
  }
  return _impl_.objectplaceholder_;
}
inline ::TSP::Reference* SlideArchive::mutable_objectplaceholder() {
  ::TSP::Reference* _msg = _internal_mutable_objectplaceholder();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.objectPlaceholder)
  return _msg;
}
inline void SlideArchive::set_allocated_objectplaceholder(::TSP::Reference* objectplaceholder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectplaceholder_);
  }
  if (objectplaceholder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectplaceholder));
    if (message_arena != submessage_arena) {
      objectplaceholder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectplaceholder, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  _impl_.objectplaceholder_ = objectplaceholder;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.objectPlaceholder)
}

// optional .TSP.Reference slideNumberPlaceholder = 20;
inline bool SlideArchive::_internal_has_slidenumberplaceholder() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slidenumberplaceholder_ != nullptr);
  return value;
}
inline bool SlideArchive::has_slidenumberplaceholder() const {
  return _internal_has_slidenumberplaceholder();
}
inline const ::TSP::Reference& SlideArchive::_internal_slidenumberplaceholder() const {
  const ::TSP::Reference* p = _impl_.slidenumberplaceholder_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideArchive::slidenumberplaceholder() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.slideNumberPlaceholder)
  return _internal_slidenumberplaceholder();
}
inline void SlideArchive::unsafe_arena_set_allocated_slidenumberplaceholder(
    ::TSP::Reference* slidenumberplaceholder) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidenumberplaceholder_);
  }
  _impl_.slidenumberplaceholder_ = slidenumberplaceholder;
  if (slidenumberplaceholder) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.slideNumberPlaceholder)
}
inline ::TSP::Reference* SlideArchive::release_slidenumberplaceholder() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TSP::Reference* temp = _impl_.slidenumberplaceholder_;
  _impl_.slidenumberplaceholder_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideArchive::unsafe_arena_release_slidenumberplaceholder() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.slideNumberPlaceholder)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TSP::Reference* temp = _impl_.slidenumberplaceholder_;
  _impl_.slidenumberplaceholder_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideArchive::_internal_mutable_slidenumberplaceholder() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.slidenumberplaceholder_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.slidenumberplaceholder_ = p;
  }
  return _impl_.slidenumberplaceholder_;
}
inline ::TSP::Reference* SlideArchive::mutable_slidenumberplaceholder() {
  ::TSP::Reference* _msg = _internal_mutable_slidenumberplaceholder();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.slideNumberPlaceholder)
  return _msg;
}
inline void SlideArchive::set_allocated_slidenumberplaceholder(::TSP::Reference* slidenumberplaceholder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidenumberplaceholder_);
  }
  if (slidenumberplaceholder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidenumberplaceholder));
    if (message_arena != submessage_arena) {
      slidenumberplaceholder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slidenumberplaceholder, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.slidenumberplaceholder_ = slidenumberplaceholder;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.slideNumberPlaceholder)
}

// repeated .TSP.Reference drawables = 7;
inline int SlideArchive::_internal_drawables_size() const {
  return _impl_.drawables_.size();
}
inline int SlideArchive::drawables_size() const {
  return _internal_drawables_size();
}
inline ::TSP::Reference* SlideArchive::mutable_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.drawables)
  return _impl_.drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SlideArchive::mutable_drawables() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideArchive.drawables)
  return &_impl_.drawables_;
}
inline const ::TSP::Reference& SlideArchive::_internal_drawables(int index) const {
  return _impl_.drawables_.Get(index);
}
inline const ::TSP::Reference& SlideArchive::drawables(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.drawables)
  return _internal_drawables(index);
}
inline ::TSP::Reference* SlideArchive::_internal_add_drawables() {
  return _impl_.drawables_.Add();
}
inline ::TSP::Reference* SlideArchive::add_drawables() {
  ::TSP::Reference* _add = _internal_add_drawables();
  // @@protoc_insertion_point(field_add:KN.SlideArchive.drawables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SlideArchive::drawables() const {
  // @@protoc_insertion_point(field_list:KN.SlideArchive.drawables)
  return _impl_.drawables_;
}

// repeated .KN.SlideArchive.SageTagMapEntry sage_tag_to_info_map = 28;
inline int SlideArchive::_internal_sage_tag_to_info_map_size() const {
  return _impl_.sage_tag_to_info_map_.size();
}
inline int SlideArchive::sage_tag_to_info_map_size() const {
  return _internal_sage_tag_to_info_map_size();
}
inline void SlideArchive::clear_sage_tag_to_info_map() {
  _impl_.sage_tag_to_info_map_.Clear();
}
inline ::KN::SlideArchive_SageTagMapEntry* SlideArchive::mutable_sage_tag_to_info_map(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.sage_tag_to_info_map)
  return _impl_.sage_tag_to_info_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::SlideArchive_SageTagMapEntry >*
SlideArchive::mutable_sage_tag_to_info_map() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideArchive.sage_tag_to_info_map)
  return &_impl_.sage_tag_to_info_map_;
}
inline const ::KN::SlideArchive_SageTagMapEntry& SlideArchive::_internal_sage_tag_to_info_map(int index) const {
  return _impl_.sage_tag_to_info_map_.Get(index);
}
inline const ::KN::SlideArchive_SageTagMapEntry& SlideArchive::sage_tag_to_info_map(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.sage_tag_to_info_map)
  return _internal_sage_tag_to_info_map(index);
}
inline ::KN::SlideArchive_SageTagMapEntry* SlideArchive::_internal_add_sage_tag_to_info_map() {
  return _impl_.sage_tag_to_info_map_.Add();
}
inline ::KN::SlideArchive_SageTagMapEntry* SlideArchive::add_sage_tag_to_info_map() {
  ::KN::SlideArchive_SageTagMapEntry* _add = _internal_add_sage_tag_to_info_map();
  // @@protoc_insertion_point(field_add:KN.SlideArchive.sage_tag_to_info_map)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::SlideArchive_SageTagMapEntry >&
SlideArchive::sage_tag_to_info_map() const {
  // @@protoc_insertion_point(field_list:KN.SlideArchive.sage_tag_to_info_map)
  return _impl_.sage_tag_to_info_map_;
}

// optional string name = 10;
inline bool SlideArchive::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SlideArchive::has_name() const {
  return _internal_has_name();
}
inline void SlideArchive::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SlideArchive::name() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SlideArchive::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.SlideArchive.name)
}
inline std::string* SlideArchive::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.name)
  return _s;
}
inline const std::string& SlideArchive::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SlideArchive::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SlideArchive::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SlideArchive::release_name() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SlideArchive::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.name)
}

// optional .TSD.GeometryArchive titlePlaceholderGeometry = 11;
inline bool SlideArchive::_internal_has_titleplaceholdergeometry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.titleplaceholdergeometry_ != nullptr);
  return value;
}
inline bool SlideArchive::has_titleplaceholdergeometry() const {
  return _internal_has_titleplaceholdergeometry();
}
inline const ::TSD::GeometryArchive& SlideArchive::_internal_titleplaceholdergeometry() const {
  const ::TSD::GeometryArchive* p = _impl_.titleplaceholdergeometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::GeometryArchive&>(
      ::TSD::_GeometryArchive_default_instance_);
}
inline const ::TSD::GeometryArchive& SlideArchive::titleplaceholdergeometry() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.titlePlaceholderGeometry)
  return _internal_titleplaceholdergeometry();
}
inline void SlideArchive::unsafe_arena_set_allocated_titleplaceholdergeometry(
    ::TSD::GeometryArchive* titleplaceholdergeometry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.titleplaceholdergeometry_);
  }
  _impl_.titleplaceholdergeometry_ = titleplaceholdergeometry;
  if (titleplaceholdergeometry) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.titlePlaceholderGeometry)
}
inline ::TSD::GeometryArchive* SlideArchive::release_titleplaceholdergeometry() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSD::GeometryArchive* temp = _impl_.titleplaceholdergeometry_;
  _impl_.titleplaceholdergeometry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::GeometryArchive* SlideArchive::unsafe_arena_release_titleplaceholdergeometry() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.titlePlaceholderGeometry)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSD::GeometryArchive* temp = _impl_.titleplaceholdergeometry_;
  _impl_.titleplaceholdergeometry_ = nullptr;
  return temp;
}
inline ::TSD::GeometryArchive* SlideArchive::_internal_mutable_titleplaceholdergeometry() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.titleplaceholdergeometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::GeometryArchive>(GetArenaForAllocation());
    _impl_.titleplaceholdergeometry_ = p;
  }
  return _impl_.titleplaceholdergeometry_;
}
inline ::TSD::GeometryArchive* SlideArchive::mutable_titleplaceholdergeometry() {
  ::TSD::GeometryArchive* _msg = _internal_mutable_titleplaceholdergeometry();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.titlePlaceholderGeometry)
  return _msg;
}
inline void SlideArchive::set_allocated_titleplaceholdergeometry(::TSD::GeometryArchive* titleplaceholdergeometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.titleplaceholdergeometry_);
  }
  if (titleplaceholdergeometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(titleplaceholdergeometry));
    if (message_arena != submessage_arena) {
      titleplaceholdergeometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, titleplaceholdergeometry, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.titleplaceholdergeometry_ = titleplaceholdergeometry;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.titlePlaceholderGeometry)
}

// optional uint32 titlePlaceholderShapeStyleIndex = 12;
inline bool SlideArchive::_internal_has_titleplaceholdershapestyleindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool SlideArchive::has_titleplaceholdershapestyleindex() const {
  return _internal_has_titleplaceholdershapestyleindex();
}
inline void SlideArchive::clear_titleplaceholdershapestyleindex() {
  _impl_.titleplaceholdershapestyleindex_ = 0u;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline uint32_t SlideArchive::_internal_titleplaceholdershapestyleindex() const {
  return _impl_.titleplaceholdershapestyleindex_;
}
inline uint32_t SlideArchive::titleplaceholdershapestyleindex() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.titlePlaceholderShapeStyleIndex)
  return _internal_titleplaceholdershapestyleindex();
}
inline void SlideArchive::_internal_set_titleplaceholdershapestyleindex(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.titleplaceholdershapestyleindex_ = value;
}
inline void SlideArchive::set_titleplaceholdershapestyleindex(uint32_t value) {
  _internal_set_titleplaceholdershapestyleindex(value);
  // @@protoc_insertion_point(field_set:KN.SlideArchive.titlePlaceholderShapeStyleIndex)
}

// optional uint32 titlePlaceholderTextStyleIndex = 13;
inline bool SlideArchive::_internal_has_titleplaceholdertextstyleindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool SlideArchive::has_titleplaceholdertextstyleindex() const {
  return _internal_has_titleplaceholdertextstyleindex();
}
inline void SlideArchive::clear_titleplaceholdertextstyleindex() {
  _impl_.titleplaceholdertextstyleindex_ = 0u;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline uint32_t SlideArchive::_internal_titleplaceholdertextstyleindex() const {
  return _impl_.titleplaceholdertextstyleindex_;
}
inline uint32_t SlideArchive::titleplaceholdertextstyleindex() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.titlePlaceholderTextStyleIndex)
  return _internal_titleplaceholdertextstyleindex();
}
inline void SlideArchive::_internal_set_titleplaceholdertextstyleindex(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.titleplaceholdertextstyleindex_ = value;
}
inline void SlideArchive::set_titleplaceholdertextstyleindex(uint32_t value) {
  _internal_set_titleplaceholdertextstyleindex(value);
  // @@protoc_insertion_point(field_set:KN.SlideArchive.titlePlaceholderTextStyleIndex)
}

// optional .TSWP.ShapeStylePropertiesArchive titleLayoutProperties = 24;
inline bool SlideArchive::_internal_has_titlelayoutproperties() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.titlelayoutproperties_ != nullptr);
  return value;
}
inline bool SlideArchive::has_titlelayoutproperties() const {
  return _internal_has_titlelayoutproperties();
}
inline const ::TSWP::ShapeStylePropertiesArchive& SlideArchive::_internal_titlelayoutproperties() const {
  const ::TSWP::ShapeStylePropertiesArchive* p = _impl_.titlelayoutproperties_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ShapeStylePropertiesArchive&>(
      ::TSWP::_ShapeStylePropertiesArchive_default_instance_);
}
inline const ::TSWP::ShapeStylePropertiesArchive& SlideArchive::titlelayoutproperties() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.titleLayoutProperties)
  return _internal_titlelayoutproperties();
}
inline void SlideArchive::unsafe_arena_set_allocated_titlelayoutproperties(
    ::TSWP::ShapeStylePropertiesArchive* titlelayoutproperties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.titlelayoutproperties_);
  }
  _impl_.titlelayoutproperties_ = titlelayoutproperties;
  if (titlelayoutproperties) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.titleLayoutProperties)
}
inline ::TSWP::ShapeStylePropertiesArchive* SlideArchive::release_titlelayoutproperties() {
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::TSWP::ShapeStylePropertiesArchive* temp = _impl_.titlelayoutproperties_;
  _impl_.titlelayoutproperties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::ShapeStylePropertiesArchive* SlideArchive::unsafe_arena_release_titlelayoutproperties() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.titleLayoutProperties)
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::TSWP::ShapeStylePropertiesArchive* temp = _impl_.titlelayoutproperties_;
  _impl_.titlelayoutproperties_ = nullptr;
  return temp;
}
inline ::TSWP::ShapeStylePropertiesArchive* SlideArchive::_internal_mutable_titlelayoutproperties() {
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.titlelayoutproperties_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ShapeStylePropertiesArchive>(GetArenaForAllocation());
    _impl_.titlelayoutproperties_ = p;
  }
  return _impl_.titlelayoutproperties_;
}
inline ::TSWP::ShapeStylePropertiesArchive* SlideArchive::mutable_titlelayoutproperties() {
  ::TSWP::ShapeStylePropertiesArchive* _msg = _internal_mutable_titlelayoutproperties();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.titleLayoutProperties)
  return _msg;
}
inline void SlideArchive::set_allocated_titlelayoutproperties(::TSWP::ShapeStylePropertiesArchive* titlelayoutproperties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.titlelayoutproperties_);
  }
  if (titlelayoutproperties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(titlelayoutproperties));
    if (message_arena != submessage_arena) {
      titlelayoutproperties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, titlelayoutproperties, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.titlelayoutproperties_ = titlelayoutproperties;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.titleLayoutProperties)
}

// optional .TSD.GeometryArchive bodyPlaceholderGeometry = 14;
inline bool SlideArchive::_internal_has_bodyplaceholdergeometry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bodyplaceholdergeometry_ != nullptr);
  return value;
}
inline bool SlideArchive::has_bodyplaceholdergeometry() const {
  return _internal_has_bodyplaceholdergeometry();
}
inline const ::TSD::GeometryArchive& SlideArchive::_internal_bodyplaceholdergeometry() const {
  const ::TSD::GeometryArchive* p = _impl_.bodyplaceholdergeometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::GeometryArchive&>(
      ::TSD::_GeometryArchive_default_instance_);
}
inline const ::TSD::GeometryArchive& SlideArchive::bodyplaceholdergeometry() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.bodyPlaceholderGeometry)
  return _internal_bodyplaceholdergeometry();
}
inline void SlideArchive::unsafe_arena_set_allocated_bodyplaceholdergeometry(
    ::TSD::GeometryArchive* bodyplaceholdergeometry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bodyplaceholdergeometry_);
  }
  _impl_.bodyplaceholdergeometry_ = bodyplaceholdergeometry;
  if (bodyplaceholdergeometry) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.bodyPlaceholderGeometry)
}
inline ::TSD::GeometryArchive* SlideArchive::release_bodyplaceholdergeometry() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSD::GeometryArchive* temp = _impl_.bodyplaceholdergeometry_;
  _impl_.bodyplaceholdergeometry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::GeometryArchive* SlideArchive::unsafe_arena_release_bodyplaceholdergeometry() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.bodyPlaceholderGeometry)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSD::GeometryArchive* temp = _impl_.bodyplaceholdergeometry_;
  _impl_.bodyplaceholdergeometry_ = nullptr;
  return temp;
}
inline ::TSD::GeometryArchive* SlideArchive::_internal_mutable_bodyplaceholdergeometry() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.bodyplaceholdergeometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::GeometryArchive>(GetArenaForAllocation());
    _impl_.bodyplaceholdergeometry_ = p;
  }
  return _impl_.bodyplaceholdergeometry_;
}
inline ::TSD::GeometryArchive* SlideArchive::mutable_bodyplaceholdergeometry() {
  ::TSD::GeometryArchive* _msg = _internal_mutable_bodyplaceholdergeometry();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.bodyPlaceholderGeometry)
  return _msg;
}
inline void SlideArchive::set_allocated_bodyplaceholdergeometry(::TSD::GeometryArchive* bodyplaceholdergeometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bodyplaceholdergeometry_);
  }
  if (bodyplaceholdergeometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bodyplaceholdergeometry));
    if (message_arena != submessage_arena) {
      bodyplaceholdergeometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bodyplaceholdergeometry, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.bodyplaceholdergeometry_ = bodyplaceholdergeometry;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.bodyPlaceholderGeometry)
}

// optional uint32 bodyPlaceholderShapeStyleIndex = 15;
inline bool SlideArchive::_internal_has_bodyplaceholdershapestyleindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool SlideArchive::has_bodyplaceholdershapestyleindex() const {
  return _internal_has_bodyplaceholdershapestyleindex();
}
inline void SlideArchive::clear_bodyplaceholdershapestyleindex() {
  _impl_.bodyplaceholdershapestyleindex_ = 0u;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline uint32_t SlideArchive::_internal_bodyplaceholdershapestyleindex() const {
  return _impl_.bodyplaceholdershapestyleindex_;
}
inline uint32_t SlideArchive::bodyplaceholdershapestyleindex() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.bodyPlaceholderShapeStyleIndex)
  return _internal_bodyplaceholdershapestyleindex();
}
inline void SlideArchive::_internal_set_bodyplaceholdershapestyleindex(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.bodyplaceholdershapestyleindex_ = value;
}
inline void SlideArchive::set_bodyplaceholdershapestyleindex(uint32_t value) {
  _internal_set_bodyplaceholdershapestyleindex(value);
  // @@protoc_insertion_point(field_set:KN.SlideArchive.bodyPlaceholderShapeStyleIndex)
}

// optional uint32 bodyPlaceholderTextStyleIndex = 16;
inline bool SlideArchive::_internal_has_bodyplaceholdertextstyleindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool SlideArchive::has_bodyplaceholdertextstyleindex() const {
  return _internal_has_bodyplaceholdertextstyleindex();
}
inline void SlideArchive::clear_bodyplaceholdertextstyleindex() {
  _impl_.bodyplaceholdertextstyleindex_ = 0u;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline uint32_t SlideArchive::_internal_bodyplaceholdertextstyleindex() const {
  return _impl_.bodyplaceholdertextstyleindex_;
}
inline uint32_t SlideArchive::bodyplaceholdertextstyleindex() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.bodyPlaceholderTextStyleIndex)
  return _internal_bodyplaceholdertextstyleindex();
}
inline void SlideArchive::_internal_set_bodyplaceholdertextstyleindex(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.bodyplaceholdertextstyleindex_ = value;
}
inline void SlideArchive::set_bodyplaceholdertextstyleindex(uint32_t value) {
  _internal_set_bodyplaceholdertextstyleindex(value);
  // @@protoc_insertion_point(field_set:KN.SlideArchive.bodyPlaceholderTextStyleIndex)
}

// optional .TSWP.ShapeStylePropertiesArchive bodyLayoutProperties = 25;
inline bool SlideArchive::_internal_has_bodylayoutproperties() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bodylayoutproperties_ != nullptr);
  return value;
}
inline bool SlideArchive::has_bodylayoutproperties() const {
  return _internal_has_bodylayoutproperties();
}
inline const ::TSWP::ShapeStylePropertiesArchive& SlideArchive::_internal_bodylayoutproperties() const {
  const ::TSWP::ShapeStylePropertiesArchive* p = _impl_.bodylayoutproperties_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ShapeStylePropertiesArchive&>(
      ::TSWP::_ShapeStylePropertiesArchive_default_instance_);
}
inline const ::TSWP::ShapeStylePropertiesArchive& SlideArchive::bodylayoutproperties() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.bodyLayoutProperties)
  return _internal_bodylayoutproperties();
}
inline void SlideArchive::unsafe_arena_set_allocated_bodylayoutproperties(
    ::TSWP::ShapeStylePropertiesArchive* bodylayoutproperties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bodylayoutproperties_);
  }
  _impl_.bodylayoutproperties_ = bodylayoutproperties;
  if (bodylayoutproperties) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.bodyLayoutProperties)
}
inline ::TSWP::ShapeStylePropertiesArchive* SlideArchive::release_bodylayoutproperties() {
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::TSWP::ShapeStylePropertiesArchive* temp = _impl_.bodylayoutproperties_;
  _impl_.bodylayoutproperties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::ShapeStylePropertiesArchive* SlideArchive::unsafe_arena_release_bodylayoutproperties() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.bodyLayoutProperties)
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::TSWP::ShapeStylePropertiesArchive* temp = _impl_.bodylayoutproperties_;
  _impl_.bodylayoutproperties_ = nullptr;
  return temp;
}
inline ::TSWP::ShapeStylePropertiesArchive* SlideArchive::_internal_mutable_bodylayoutproperties() {
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.bodylayoutproperties_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ShapeStylePropertiesArchive>(GetArenaForAllocation());
    _impl_.bodylayoutproperties_ = p;
  }
  return _impl_.bodylayoutproperties_;
}
inline ::TSWP::ShapeStylePropertiesArchive* SlideArchive::mutable_bodylayoutproperties() {
  ::TSWP::ShapeStylePropertiesArchive* _msg = _internal_mutable_bodylayoutproperties();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.bodyLayoutProperties)
  return _msg;
}
inline void SlideArchive::set_allocated_bodylayoutproperties(::TSWP::ShapeStylePropertiesArchive* bodylayoutproperties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bodylayoutproperties_);
  }
  if (bodylayoutproperties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bodylayoutproperties));
    if (message_arena != submessage_arena) {
      bodylayoutproperties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bodylayoutproperties, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.bodylayoutproperties_ = bodylayoutproperties;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.bodyLayoutProperties)
}

// optional .TSD.GeometryArchive slideNumberPlaceholderGeometry = 21;
inline bool SlideArchive::_internal_has_slidenumberplaceholdergeometry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slidenumberplaceholdergeometry_ != nullptr);
  return value;
}
inline bool SlideArchive::has_slidenumberplaceholdergeometry() const {
  return _internal_has_slidenumberplaceholdergeometry();
}
inline const ::TSD::GeometryArchive& SlideArchive::_internal_slidenumberplaceholdergeometry() const {
  const ::TSD::GeometryArchive* p = _impl_.slidenumberplaceholdergeometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::GeometryArchive&>(
      ::TSD::_GeometryArchive_default_instance_);
}
inline const ::TSD::GeometryArchive& SlideArchive::slidenumberplaceholdergeometry() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.slideNumberPlaceholderGeometry)
  return _internal_slidenumberplaceholdergeometry();
}
inline void SlideArchive::unsafe_arena_set_allocated_slidenumberplaceholdergeometry(
    ::TSD::GeometryArchive* slidenumberplaceholdergeometry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidenumberplaceholdergeometry_);
  }
  _impl_.slidenumberplaceholdergeometry_ = slidenumberplaceholdergeometry;
  if (slidenumberplaceholdergeometry) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.slideNumberPlaceholderGeometry)
}
inline ::TSD::GeometryArchive* SlideArchive::release_slidenumberplaceholdergeometry() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::TSD::GeometryArchive* temp = _impl_.slidenumberplaceholdergeometry_;
  _impl_.slidenumberplaceholdergeometry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::GeometryArchive* SlideArchive::unsafe_arena_release_slidenumberplaceholdergeometry() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.slideNumberPlaceholderGeometry)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::TSD::GeometryArchive* temp = _impl_.slidenumberplaceholdergeometry_;
  _impl_.slidenumberplaceholdergeometry_ = nullptr;
  return temp;
}
inline ::TSD::GeometryArchive* SlideArchive::_internal_mutable_slidenumberplaceholdergeometry() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.slidenumberplaceholdergeometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::GeometryArchive>(GetArenaForAllocation());
    _impl_.slidenumberplaceholdergeometry_ = p;
  }
  return _impl_.slidenumberplaceholdergeometry_;
}
inline ::TSD::GeometryArchive* SlideArchive::mutable_slidenumberplaceholdergeometry() {
  ::TSD::GeometryArchive* _msg = _internal_mutable_slidenumberplaceholdergeometry();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.slideNumberPlaceholderGeometry)
  return _msg;
}
inline void SlideArchive::set_allocated_slidenumberplaceholdergeometry(::TSD::GeometryArchive* slidenumberplaceholdergeometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidenumberplaceholdergeometry_);
  }
  if (slidenumberplaceholdergeometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidenumberplaceholdergeometry));
    if (message_arena != submessage_arena) {
      slidenumberplaceholdergeometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slidenumberplaceholdergeometry, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.slidenumberplaceholdergeometry_ = slidenumberplaceholdergeometry;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.slideNumberPlaceholderGeometry)
}

// optional uint32 slideNumberPlaceholderShapeStyleIndex = 22;
inline bool SlideArchive::_internal_has_slidenumberplaceholdershapestyleindex() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool SlideArchive::has_slidenumberplaceholdershapestyleindex() const {
  return _internal_has_slidenumberplaceholdershapestyleindex();
}
inline void SlideArchive::clear_slidenumberplaceholdershapestyleindex() {
  _impl_.slidenumberplaceholdershapestyleindex_ = 0u;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline uint32_t SlideArchive::_internal_slidenumberplaceholdershapestyleindex() const {
  return _impl_.slidenumberplaceholdershapestyleindex_;
}
inline uint32_t SlideArchive::slidenumberplaceholdershapestyleindex() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.slideNumberPlaceholderShapeStyleIndex)
  return _internal_slidenumberplaceholdershapestyleindex();
}
inline void SlideArchive::_internal_set_slidenumberplaceholdershapestyleindex(uint32_t value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.slidenumberplaceholdershapestyleindex_ = value;
}
inline void SlideArchive::set_slidenumberplaceholdershapestyleindex(uint32_t value) {
  _internal_set_slidenumberplaceholdershapestyleindex(value);
  // @@protoc_insertion_point(field_set:KN.SlideArchive.slideNumberPlaceholderShapeStyleIndex)
}

// optional uint32 slideNumberPlaceholderTextStyleIndex = 23;
inline bool SlideArchive::_internal_has_slidenumberplaceholdertextstyleindex() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool SlideArchive::has_slidenumberplaceholdertextstyleindex() const {
  return _internal_has_slidenumberplaceholdertextstyleindex();
}
inline void SlideArchive::clear_slidenumberplaceholdertextstyleindex() {
  _impl_.slidenumberplaceholdertextstyleindex_ = 0u;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline uint32_t SlideArchive::_internal_slidenumberplaceholdertextstyleindex() const {
  return _impl_.slidenumberplaceholdertextstyleindex_;
}
inline uint32_t SlideArchive::slidenumberplaceholdertextstyleindex() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.slideNumberPlaceholderTextStyleIndex)
  return _internal_slidenumberplaceholdertextstyleindex();
}
inline void SlideArchive::_internal_set_slidenumberplaceholdertextstyleindex(uint32_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.slidenumberplaceholdertextstyleindex_ = value;
}
inline void SlideArchive::set_slidenumberplaceholdertextstyleindex(uint32_t value) {
  _internal_set_slidenumberplaceholdertextstyleindex(value);
  // @@protoc_insertion_point(field_set:KN.SlideArchive.slideNumberPlaceholderTextStyleIndex)
}

// optional .TSWP.ShapeStylePropertiesArchive slideNumberLayoutProperties = 26;
inline bool SlideArchive::_internal_has_slidenumberlayoutproperties() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slidenumberlayoutproperties_ != nullptr);
  return value;
}
inline bool SlideArchive::has_slidenumberlayoutproperties() const {
  return _internal_has_slidenumberlayoutproperties();
}
inline const ::TSWP::ShapeStylePropertiesArchive& SlideArchive::_internal_slidenumberlayoutproperties() const {
  const ::TSWP::ShapeStylePropertiesArchive* p = _impl_.slidenumberlayoutproperties_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ShapeStylePropertiesArchive&>(
      ::TSWP::_ShapeStylePropertiesArchive_default_instance_);
}
inline const ::TSWP::ShapeStylePropertiesArchive& SlideArchive::slidenumberlayoutproperties() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.slideNumberLayoutProperties)
  return _internal_slidenumberlayoutproperties();
}
inline void SlideArchive::unsafe_arena_set_allocated_slidenumberlayoutproperties(
    ::TSWP::ShapeStylePropertiesArchive* slidenumberlayoutproperties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidenumberlayoutproperties_);
  }
  _impl_.slidenumberlayoutproperties_ = slidenumberlayoutproperties;
  if (slidenumberlayoutproperties) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.slideNumberLayoutProperties)
}
inline ::TSWP::ShapeStylePropertiesArchive* SlideArchive::release_slidenumberlayoutproperties() {
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::TSWP::ShapeStylePropertiesArchive* temp = _impl_.slidenumberlayoutproperties_;
  _impl_.slidenumberlayoutproperties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::ShapeStylePropertiesArchive* SlideArchive::unsafe_arena_release_slidenumberlayoutproperties() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.slideNumberLayoutProperties)
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::TSWP::ShapeStylePropertiesArchive* temp = _impl_.slidenumberlayoutproperties_;
  _impl_.slidenumberlayoutproperties_ = nullptr;
  return temp;
}
inline ::TSWP::ShapeStylePropertiesArchive* SlideArchive::_internal_mutable_slidenumberlayoutproperties() {
  _impl_._has_bits_[0] |= 0x00004000u;
  if (_impl_.slidenumberlayoutproperties_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ShapeStylePropertiesArchive>(GetArenaForAllocation());
    _impl_.slidenumberlayoutproperties_ = p;
  }
  return _impl_.slidenumberlayoutproperties_;
}
inline ::TSWP::ShapeStylePropertiesArchive* SlideArchive::mutable_slidenumberlayoutproperties() {
  ::TSWP::ShapeStylePropertiesArchive* _msg = _internal_mutable_slidenumberlayoutproperties();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.slideNumberLayoutProperties)
  return _msg;
}
inline void SlideArchive::set_allocated_slidenumberlayoutproperties(::TSWP::ShapeStylePropertiesArchive* slidenumberlayoutproperties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidenumberlayoutproperties_);
  }
  if (slidenumberlayoutproperties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidenumberlayoutproperties));
    if (message_arena != submessage_arena) {
      slidenumberlayoutproperties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slidenumberlayoutproperties, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.slidenumberlayoutproperties_ = slidenumberlayoutproperties;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.slideNumberLayoutProperties)
}

// optional .TSP.Reference classicStylesheetRecord = 29;
inline bool SlideArchive::_internal_has_classicstylesheetrecord() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.classicstylesheetrecord_ != nullptr);
  return value;
}
inline bool SlideArchive::has_classicstylesheetrecord() const {
  return _internal_has_classicstylesheetrecord();
}
inline const ::TSP::Reference& SlideArchive::_internal_classicstylesheetrecord() const {
  const ::TSP::Reference* p = _impl_.classicstylesheetrecord_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideArchive::classicstylesheetrecord() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.classicStylesheetRecord)
  return _internal_classicstylesheetrecord();
}
inline void SlideArchive::unsafe_arena_set_allocated_classicstylesheetrecord(
    ::TSP::Reference* classicstylesheetrecord) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.classicstylesheetrecord_);
  }
  _impl_.classicstylesheetrecord_ = classicstylesheetrecord;
  if (classicstylesheetrecord) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.classicStylesheetRecord)
}
inline ::TSP::Reference* SlideArchive::release_classicstylesheetrecord() {
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::TSP::Reference* temp = _impl_.classicstylesheetrecord_;
  _impl_.classicstylesheetrecord_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideArchive::unsafe_arena_release_classicstylesheetrecord() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.classicStylesheetRecord)
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::TSP::Reference* temp = _impl_.classicstylesheetrecord_;
  _impl_.classicstylesheetrecord_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideArchive::_internal_mutable_classicstylesheetrecord() {
  _impl_._has_bits_[0] |= 0x00010000u;
  if (_impl_.classicstylesheetrecord_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.classicstylesheetrecord_ = p;
  }
  return _impl_.classicstylesheetrecord_;
}
inline ::TSP::Reference* SlideArchive::mutable_classicstylesheetrecord() {
  ::TSP::Reference* _msg = _internal_mutable_classicstylesheetrecord();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.classicStylesheetRecord)
  return _msg;
}
inline void SlideArchive::set_allocated_classicstylesheetrecord(::TSP::Reference* classicstylesheetrecord) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.classicstylesheetrecord_);
  }
  if (classicstylesheetrecord) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(classicstylesheetrecord));
    if (message_arena != submessage_arena) {
      classicstylesheetrecord = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, classicstylesheetrecord, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  _impl_.classicstylesheetrecord_ = classicstylesheetrecord;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.classicStylesheetRecord)
}

// repeated .TSP.Reference bodyParagraphStyles = 31;
inline int SlideArchive::_internal_bodyparagraphstyles_size() const {
  return _impl_.bodyparagraphstyles_.size();
}
inline int SlideArchive::bodyparagraphstyles_size() const {
  return _internal_bodyparagraphstyles_size();
}
inline ::TSP::Reference* SlideArchive::mutable_bodyparagraphstyles(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.bodyParagraphStyles)
  return _impl_.bodyparagraphstyles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SlideArchive::mutable_bodyparagraphstyles() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideArchive.bodyParagraphStyles)
  return &_impl_.bodyparagraphstyles_;
}
inline const ::TSP::Reference& SlideArchive::_internal_bodyparagraphstyles(int index) const {
  return _impl_.bodyparagraphstyles_.Get(index);
}
inline const ::TSP::Reference& SlideArchive::bodyparagraphstyles(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.bodyParagraphStyles)
  return _internal_bodyparagraphstyles(index);
}
inline ::TSP::Reference* SlideArchive::_internal_add_bodyparagraphstyles() {
  return _impl_.bodyparagraphstyles_.Add();
}
inline ::TSP::Reference* SlideArchive::add_bodyparagraphstyles() {
  ::TSP::Reference* _add = _internal_add_bodyparagraphstyles();
  // @@protoc_insertion_point(field_add:KN.SlideArchive.bodyParagraphStyles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SlideArchive::bodyparagraphstyles() const {
  // @@protoc_insertion_point(field_list:KN.SlideArchive.bodyParagraphStyles)
  return _impl_.bodyparagraphstyles_;
}

// repeated .TSP.Reference bodyListStyles = 35;
inline int SlideArchive::_internal_bodyliststyles_size() const {
  return _impl_.bodyliststyles_.size();
}
inline int SlideArchive::bodyliststyles_size() const {
  return _internal_bodyliststyles_size();
}
inline ::TSP::Reference* SlideArchive::mutable_bodyliststyles(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.bodyListStyles)
  return _impl_.bodyliststyles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SlideArchive::mutable_bodyliststyles() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideArchive.bodyListStyles)
  return &_impl_.bodyliststyles_;
}
inline const ::TSP::Reference& SlideArchive::_internal_bodyliststyles(int index) const {
  return _impl_.bodyliststyles_.Get(index);
}
inline const ::TSP::Reference& SlideArchive::bodyliststyles(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.bodyListStyles)
  return _internal_bodyliststyles(index);
}
inline ::TSP::Reference* SlideArchive::_internal_add_bodyliststyles() {
  return _impl_.bodyliststyles_.Add();
}
inline ::TSP::Reference* SlideArchive::add_bodyliststyles() {
  ::TSP::Reference* _add = _internal_add_bodyliststyles();
  // @@protoc_insertion_point(field_add:KN.SlideArchive.bodyListStyles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SlideArchive::bodyliststyles() const {
  // @@protoc_insertion_point(field_list:KN.SlideArchive.bodyListStyles)
  return _impl_.bodyliststyles_;
}

// optional string thumbnailTextForTitlePlaceholder = 37;
inline bool SlideArchive::_internal_has_thumbnailtextfortitleplaceholder() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SlideArchive::has_thumbnailtextfortitleplaceholder() const {
  return _internal_has_thumbnailtextfortitleplaceholder();
}
inline void SlideArchive::clear_thumbnailtextfortitleplaceholder() {
  _impl_.thumbnailtextfortitleplaceholder_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SlideArchive::thumbnailtextfortitleplaceholder() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.thumbnailTextForTitlePlaceholder)
  return _internal_thumbnailtextfortitleplaceholder();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SlideArchive::set_thumbnailtextfortitleplaceholder(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.thumbnailtextfortitleplaceholder_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.SlideArchive.thumbnailTextForTitlePlaceholder)
}
inline std::string* SlideArchive::mutable_thumbnailtextfortitleplaceholder() {
  std::string* _s = _internal_mutable_thumbnailtextfortitleplaceholder();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.thumbnailTextForTitlePlaceholder)
  return _s;
}
inline const std::string& SlideArchive::_internal_thumbnailtextfortitleplaceholder() const {
  return _impl_.thumbnailtextfortitleplaceholder_.Get();
}
inline void SlideArchive::_internal_set_thumbnailtextfortitleplaceholder(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.thumbnailtextfortitleplaceholder_.Set(value, GetArenaForAllocation());
}
inline std::string* SlideArchive::_internal_mutable_thumbnailtextfortitleplaceholder() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.thumbnailtextfortitleplaceholder_.Mutable(GetArenaForAllocation());
}
inline std::string* SlideArchive::release_thumbnailtextfortitleplaceholder() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.thumbnailTextForTitlePlaceholder)
  if (!_internal_has_thumbnailtextfortitleplaceholder()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.thumbnailtextfortitleplaceholder_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.thumbnailtextfortitleplaceholder_.IsDefault()) {
    _impl_.thumbnailtextfortitleplaceholder_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SlideArchive::set_allocated_thumbnailtextfortitleplaceholder(std::string* thumbnailtextfortitleplaceholder) {
  if (thumbnailtextfortitleplaceholder != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.thumbnailtextfortitleplaceholder_.SetAllocated(thumbnailtextfortitleplaceholder, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.thumbnailtextfortitleplaceholder_.IsDefault()) {
    _impl_.thumbnailtextfortitleplaceholder_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.thumbnailTextForTitlePlaceholder)
}

// optional string thumbnailTextForBodyPlaceholder = 38;
inline bool SlideArchive::_internal_has_thumbnailtextforbodyplaceholder() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SlideArchive::has_thumbnailtextforbodyplaceholder() const {
  return _internal_has_thumbnailtextforbodyplaceholder();
}
inline void SlideArchive::clear_thumbnailtextforbodyplaceholder() {
  _impl_.thumbnailtextforbodyplaceholder_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SlideArchive::thumbnailtextforbodyplaceholder() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.thumbnailTextForBodyPlaceholder)
  return _internal_thumbnailtextforbodyplaceholder();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SlideArchive::set_thumbnailtextforbodyplaceholder(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.thumbnailtextforbodyplaceholder_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.SlideArchive.thumbnailTextForBodyPlaceholder)
}
inline std::string* SlideArchive::mutable_thumbnailtextforbodyplaceholder() {
  std::string* _s = _internal_mutable_thumbnailtextforbodyplaceholder();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.thumbnailTextForBodyPlaceholder)
  return _s;
}
inline const std::string& SlideArchive::_internal_thumbnailtextforbodyplaceholder() const {
  return _impl_.thumbnailtextforbodyplaceholder_.Get();
}
inline void SlideArchive::_internal_set_thumbnailtextforbodyplaceholder(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.thumbnailtextforbodyplaceholder_.Set(value, GetArenaForAllocation());
}
inline std::string* SlideArchive::_internal_mutable_thumbnailtextforbodyplaceholder() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.thumbnailtextforbodyplaceholder_.Mutable(GetArenaForAllocation());
}
inline std::string* SlideArchive::release_thumbnailtextforbodyplaceholder() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.thumbnailTextForBodyPlaceholder)
  if (!_internal_has_thumbnailtextforbodyplaceholder()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.thumbnailtextforbodyplaceholder_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.thumbnailtextforbodyplaceholder_.IsDefault()) {
    _impl_.thumbnailtextforbodyplaceholder_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SlideArchive::set_allocated_thumbnailtextforbodyplaceholder(std::string* thumbnailtextforbodyplaceholder) {
  if (thumbnailtextforbodyplaceholder != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.thumbnailtextforbodyplaceholder_.SetAllocated(thumbnailtextforbodyplaceholder, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.thumbnailtextforbodyplaceholder_.IsDefault()) {
    _impl_.thumbnailtextforbodyplaceholder_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.thumbnailTextForBodyPlaceholder)
}

// optional .TSP.Reference master = 17;
inline bool SlideArchive::_internal_has_master() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.master_ != nullptr);
  return value;
}
inline bool SlideArchive::has_master() const {
  return _internal_has_master();
}
inline const ::TSP::Reference& SlideArchive::_internal_master() const {
  const ::TSP::Reference* p = _impl_.master_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideArchive::master() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.master)
  return _internal_master();
}
inline void SlideArchive::unsafe_arena_set_allocated_master(
    ::TSP::Reference* master) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.master_);
  }
  _impl_.master_ = master;
  if (master) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.master)
}
inline ::TSP::Reference* SlideArchive::release_master() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = _impl_.master_;
  _impl_.master_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideArchive::unsafe_arena_release_master() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.master)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = _impl_.master_;
  _impl_.master_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideArchive::_internal_mutable_master() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.master_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.master_ = p;
  }
  return _impl_.master_;
}
inline ::TSP::Reference* SlideArchive::mutable_master() {
  ::TSP::Reference* _msg = _internal_mutable_master();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.master)
  return _msg;
}
inline void SlideArchive::set_allocated_master(::TSP::Reference* master) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.master_);
  }
  if (master) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(master));
    if (message_arena != submessage_arena) {
      master = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, master, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.master_ = master;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.master)
}

// repeated .TSD.GuideArchive staticGuides = 18;
inline int SlideArchive::_internal_staticguides_size() const {
  return _impl_.staticguides_.size();
}
inline int SlideArchive::staticguides_size() const {
  return _internal_staticguides_size();
}
inline ::TSD::GuideArchive* SlideArchive::mutable_staticguides(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.staticGuides)
  return _impl_.staticguides_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::GuideArchive >*
SlideArchive::mutable_staticguides() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideArchive.staticGuides)
  return &_impl_.staticguides_;
}
inline const ::TSD::GuideArchive& SlideArchive::_internal_staticguides(int index) const {
  return _impl_.staticguides_.Get(index);
}
inline const ::TSD::GuideArchive& SlideArchive::staticguides(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.staticGuides)
  return _internal_staticguides(index);
}
inline ::TSD::GuideArchive* SlideArchive::_internal_add_staticguides() {
  return _impl_.staticguides_.Add();
}
inline ::TSD::GuideArchive* SlideArchive::add_staticguides() {
  ::TSD::GuideArchive* _add = _internal_add_staticguides();
  // @@protoc_insertion_point(field_add:KN.SlideArchive.staticGuides)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::GuideArchive >&
SlideArchive::staticguides() const {
  // @@protoc_insertion_point(field_list:KN.SlideArchive.staticGuides)
  return _impl_.staticguides_;
}

// optional .TSP.Reference userDefinedGuideStorage = 36;
inline bool SlideArchive::_internal_has_userdefinedguidestorage() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.userdefinedguidestorage_ != nullptr);
  return value;
}
inline bool SlideArchive::has_userdefinedguidestorage() const {
  return _internal_has_userdefinedguidestorage();
}
inline const ::TSP::Reference& SlideArchive::_internal_userdefinedguidestorage() const {
  const ::TSP::Reference* p = _impl_.userdefinedguidestorage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideArchive::userdefinedguidestorage() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.userDefinedGuideStorage)
  return _internal_userdefinedguidestorage();
}
inline void SlideArchive::unsafe_arena_set_allocated_userdefinedguidestorage(
    ::TSP::Reference* userdefinedguidestorage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userdefinedguidestorage_);
  }
  _impl_.userdefinedguidestorage_ = userdefinedguidestorage;
  if (userdefinedguidestorage) {
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.userDefinedGuideStorage)
}
inline ::TSP::Reference* SlideArchive::release_userdefinedguidestorage() {
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::TSP::Reference* temp = _impl_.userdefinedguidestorage_;
  _impl_.userdefinedguidestorage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideArchive::unsafe_arena_release_userdefinedguidestorage() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.userDefinedGuideStorage)
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::TSP::Reference* temp = _impl_.userdefinedguidestorage_;
  _impl_.userdefinedguidestorage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideArchive::_internal_mutable_userdefinedguidestorage() {
  _impl_._has_bits_[0] |= 0x00040000u;
  if (_impl_.userdefinedguidestorage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.userdefinedguidestorage_ = p;
  }
  return _impl_.userdefinedguidestorage_;
}
inline ::TSP::Reference* SlideArchive::mutable_userdefinedguidestorage() {
  ::TSP::Reference* _msg = _internal_mutable_userdefinedguidestorage();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.userDefinedGuideStorage)
  return _msg;
}
inline void SlideArchive::set_allocated_userdefinedguidestorage(::TSP::Reference* userdefinedguidestorage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userdefinedguidestorage_);
  }
  if (userdefinedguidestorage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userdefinedguidestorage));
    if (message_arena != submessage_arena) {
      userdefinedguidestorage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userdefinedguidestorage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  _impl_.userdefinedguidestorage_ = userdefinedguidestorage;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.userDefinedGuideStorage)
}

// required bool inDocument = 19;
inline bool SlideArchive::_internal_has_indocument() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool SlideArchive::has_indocument() const {
  return _internal_has_indocument();
}
inline void SlideArchive::clear_indocument() {
  _impl_.indocument_ = false;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline bool SlideArchive::_internal_indocument() const {
  return _impl_.indocument_;
}
inline bool SlideArchive::indocument() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.inDocument)
  return _internal_indocument();
}
inline void SlideArchive::_internal_set_indocument(bool value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.indocument_ = value;
}
inline void SlideArchive::set_indocument(bool value) {
  _internal_set_indocument(value);
  // @@protoc_insertion_point(field_set:KN.SlideArchive.inDocument)
}

// optional .TSP.Reference note = 27;
inline bool SlideArchive::_internal_has_note() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.note_ != nullptr);
  return value;
}
inline bool SlideArchive::has_note() const {
  return _internal_has_note();
}
inline const ::TSP::Reference& SlideArchive::_internal_note() const {
  const ::TSP::Reference* p = _impl_.note_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideArchive::note() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.note)
  return _internal_note();
}
inline void SlideArchive::unsafe_arena_set_allocated_note(
    ::TSP::Reference* note) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.note_);
  }
  _impl_.note_ = note;
  if (note) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.note)
}
inline ::TSP::Reference* SlideArchive::release_note() {
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::TSP::Reference* temp = _impl_.note_;
  _impl_.note_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideArchive::unsafe_arena_release_note() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.note)
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::TSP::Reference* temp = _impl_.note_;
  _impl_.note_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideArchive::_internal_mutable_note() {
  _impl_._has_bits_[0] |= 0x00008000u;
  if (_impl_.note_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.note_ = p;
  }
  return _impl_.note_;
}
inline ::TSP::Reference* SlideArchive::mutable_note() {
  ::TSP::Reference* _msg = _internal_mutable_note();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.note)
  return _msg;
}
inline void SlideArchive::set_allocated_note(::TSP::Reference* note) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.note_);
  }
  if (note) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(note));
    if (message_arena != submessage_arena) {
      note = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, note, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  _impl_.note_ = note;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.note)
}

// optional .TSP.Reference info_using_object_placeholder_geometry = 39;
inline bool SlideArchive::_internal_has_info_using_object_placeholder_geometry() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_using_object_placeholder_geometry_ != nullptr);
  return value;
}
inline bool SlideArchive::has_info_using_object_placeholder_geometry() const {
  return _internal_has_info_using_object_placeholder_geometry();
}
inline const ::TSP::Reference& SlideArchive::_internal_info_using_object_placeholder_geometry() const {
  const ::TSP::Reference* p = _impl_.info_using_object_placeholder_geometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideArchive::info_using_object_placeholder_geometry() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.info_using_object_placeholder_geometry)
  return _internal_info_using_object_placeholder_geometry();
}
inline void SlideArchive::unsafe_arena_set_allocated_info_using_object_placeholder_geometry(
    ::TSP::Reference* info_using_object_placeholder_geometry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_using_object_placeholder_geometry_);
  }
  _impl_.info_using_object_placeholder_geometry_ = info_using_object_placeholder_geometry;
  if (info_using_object_placeholder_geometry) {
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideArchive.info_using_object_placeholder_geometry)
}
inline ::TSP::Reference* SlideArchive::release_info_using_object_placeholder_geometry() {
  _impl_._has_bits_[0] &= ~0x00080000u;
  ::TSP::Reference* temp = _impl_.info_using_object_placeholder_geometry_;
  _impl_.info_using_object_placeholder_geometry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideArchive::unsafe_arena_release_info_using_object_placeholder_geometry() {
  // @@protoc_insertion_point(field_release:KN.SlideArchive.info_using_object_placeholder_geometry)
  _impl_._has_bits_[0] &= ~0x00080000u;
  ::TSP::Reference* temp = _impl_.info_using_object_placeholder_geometry_;
  _impl_.info_using_object_placeholder_geometry_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideArchive::_internal_mutable_info_using_object_placeholder_geometry() {
  _impl_._has_bits_[0] |= 0x00080000u;
  if (_impl_.info_using_object_placeholder_geometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.info_using_object_placeholder_geometry_ = p;
  }
  return _impl_.info_using_object_placeholder_geometry_;
}
inline ::TSP::Reference* SlideArchive::mutable_info_using_object_placeholder_geometry() {
  ::TSP::Reference* _msg = _internal_mutable_info_using_object_placeholder_geometry();
  // @@protoc_insertion_point(field_mutable:KN.SlideArchive.info_using_object_placeholder_geometry)
  return _msg;
}
inline void SlideArchive::set_allocated_info_using_object_placeholder_geometry(::TSP::Reference* info_using_object_placeholder_geometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_using_object_placeholder_geometry_);
  }
  if (info_using_object_placeholder_geometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_using_object_placeholder_geometry));
    if (message_arena != submessage_arena) {
      info_using_object_placeholder_geometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info_using_object_placeholder_geometry, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  _impl_.info_using_object_placeholder_geometry_ = info_using_object_placeholder_geometry;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideArchive.info_using_object_placeholder_geometry)
}

// optional bool info_using_object_placeholder_geometry_matches_object_placeholder_geometry = 40;
inline bool SlideArchive::_internal_has_info_using_object_placeholder_geometry_matches_object_placeholder_geometry() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool SlideArchive::has_info_using_object_placeholder_geometry_matches_object_placeholder_geometry() const {
  return _internal_has_info_using_object_placeholder_geometry_matches_object_placeholder_geometry();
}
inline void SlideArchive::clear_info_using_object_placeholder_geometry_matches_object_placeholder_geometry() {
  _impl_.info_using_object_placeholder_geometry_matches_object_placeholder_geometry_ = false;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline bool SlideArchive::_internal_info_using_object_placeholder_geometry_matches_object_placeholder_geometry() const {
  return _impl_.info_using_object_placeholder_geometry_matches_object_placeholder_geometry_;
}
inline bool SlideArchive::info_using_object_placeholder_geometry_matches_object_placeholder_geometry() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.info_using_object_placeholder_geometry_matches_object_placeholder_geometry)
  return _internal_info_using_object_placeholder_geometry_matches_object_placeholder_geometry();
}
inline void SlideArchive::_internal_set_info_using_object_placeholder_geometry_matches_object_placeholder_geometry(bool value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.info_using_object_placeholder_geometry_matches_object_placeholder_geometry_ = value;
}
inline void SlideArchive::set_info_using_object_placeholder_geometry_matches_object_placeholder_geometry(bool value) {
  _internal_set_info_using_object_placeholder_geometry_matches_object_placeholder_geometry(value);
  // @@protoc_insertion_point(field_set:KN.SlideArchive.info_using_object_placeholder_geometry_matches_object_placeholder_geometry)
}

// optional bool deprecated_objectPlaceholderVisibleForExport = 34;
inline bool SlideArchive::_internal_has_deprecated_objectplaceholdervisibleforexport() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool SlideArchive::has_deprecated_objectplaceholdervisibleforexport() const {
  return _internal_has_deprecated_objectplaceholdervisibleforexport();
}
inline void SlideArchive::clear_deprecated_objectplaceholdervisibleforexport() {
  _impl_.deprecated_objectplaceholdervisibleforexport_ = false;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline bool SlideArchive::_internal_deprecated_objectplaceholdervisibleforexport() const {
  return _impl_.deprecated_objectplaceholdervisibleforexport_;
}
inline bool SlideArchive::deprecated_objectplaceholdervisibleforexport() const {
  // @@protoc_insertion_point(field_get:KN.SlideArchive.deprecated_objectPlaceholderVisibleForExport)
  return _internal_deprecated_objectplaceholdervisibleforexport();
}
inline void SlideArchive::_internal_set_deprecated_objectplaceholdervisibleforexport(bool value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.deprecated_objectplaceholdervisibleforexport_ = value;
}
inline void SlideArchive::set_deprecated_objectplaceholdervisibleforexport(bool value) {
  _internal_set_deprecated_objectplaceholdervisibleforexport(value);
  // @@protoc_insertion_point(field_set:KN.SlideArchive.deprecated_objectPlaceholderVisibleForExport)
}

// -------------------------------------------------------------------

// SlideNodeArchive

// repeated .TSP.Reference children = 1;
inline int SlideNodeArchive::_internal_children_size() const {
  return _impl_.children_.size();
}
inline int SlideNodeArchive::children_size() const {
  return _internal_children_size();
}
inline ::TSP::Reference* SlideNodeArchive::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideNodeArchive.children)
  return _impl_.children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SlideNodeArchive::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideNodeArchive.children)
  return &_impl_.children_;
}
inline const ::TSP::Reference& SlideNodeArchive::_internal_children(int index) const {
  return _impl_.children_.Get(index);
}
inline const ::TSP::Reference& SlideNodeArchive::children(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.children)
  return _internal_children(index);
}
inline ::TSP::Reference* SlideNodeArchive::_internal_add_children() {
  return _impl_.children_.Add();
}
inline ::TSP::Reference* SlideNodeArchive::add_children() {
  ::TSP::Reference* _add = _internal_add_children();
  // @@protoc_insertion_point(field_add:KN.SlideNodeArchive.children)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SlideNodeArchive::children() const {
  // @@protoc_insertion_point(field_list:KN.SlideNodeArchive.children)
  return _impl_.children_;
}

// optional .TSP.Reference slide = 2;
inline bool SlideNodeArchive::_internal_has_slide() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slide_ != nullptr);
  return value;
}
inline bool SlideNodeArchive::has_slide() const {
  return _internal_has_slide();
}
inline const ::TSP::Reference& SlideNodeArchive::_internal_slide() const {
  const ::TSP::Reference* p = _impl_.slide_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideNodeArchive::slide() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.slide)
  return _internal_slide();
}
inline void SlideNodeArchive::unsafe_arena_set_allocated_slide(
    ::TSP::Reference* slide) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_);
  }
  _impl_.slide_ = slide;
  if (slide) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideNodeArchive.slide)
}
inline ::TSP::Reference* SlideNodeArchive::release_slide() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.slide_;
  _impl_.slide_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideNodeArchive::unsafe_arena_release_slide() {
  // @@protoc_insertion_point(field_release:KN.SlideNodeArchive.slide)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.slide_;
  _impl_.slide_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideNodeArchive::_internal_mutable_slide() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.slide_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.slide_ = p;
  }
  return _impl_.slide_;
}
inline ::TSP::Reference* SlideNodeArchive::mutable_slide() {
  ::TSP::Reference* _msg = _internal_mutable_slide();
  // @@protoc_insertion_point(field_mutable:KN.SlideNodeArchive.slide)
  return _msg;
}
inline void SlideNodeArchive::set_allocated_slide(::TSP::Reference* slide) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_);
  }
  if (slide) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide));
    if (message_arena != submessage_arena) {
      slide = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.slide_ = slide;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideNodeArchive.slide)
}

// repeated .TSP.DataReference thumbnails = 16;
inline int SlideNodeArchive::_internal_thumbnails_size() const {
  return _impl_.thumbnails_.size();
}
inline int SlideNodeArchive::thumbnails_size() const {
  return _internal_thumbnails_size();
}
inline ::TSP::DataReference* SlideNodeArchive::mutable_thumbnails(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideNodeArchive.thumbnails)
  return _impl_.thumbnails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >*
SlideNodeArchive::mutable_thumbnails() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideNodeArchive.thumbnails)
  return &_impl_.thumbnails_;
}
inline const ::TSP::DataReference& SlideNodeArchive::_internal_thumbnails(int index) const {
  return _impl_.thumbnails_.Get(index);
}
inline const ::TSP::DataReference& SlideNodeArchive::thumbnails(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.thumbnails)
  return _internal_thumbnails(index);
}
inline ::TSP::DataReference* SlideNodeArchive::_internal_add_thumbnails() {
  return _impl_.thumbnails_.Add();
}
inline ::TSP::DataReference* SlideNodeArchive::add_thumbnails() {
  ::TSP::DataReference* _add = _internal_add_thumbnails();
  // @@protoc_insertion_point(field_add:KN.SlideNodeArchive.thumbnails)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >&
SlideNodeArchive::thumbnails() const {
  // @@protoc_insertion_point(field_list:KN.SlideNodeArchive.thumbnails)
  return _impl_.thumbnails_;
}

// repeated .TSP.Size thumbnailSizes = 10;
inline int SlideNodeArchive::_internal_thumbnailsizes_size() const {
  return _impl_.thumbnailsizes_.size();
}
inline int SlideNodeArchive::thumbnailsizes_size() const {
  return _internal_thumbnailsizes_size();
}
inline ::TSP::Size* SlideNodeArchive::mutable_thumbnailsizes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideNodeArchive.thumbnailSizes)
  return _impl_.thumbnailsizes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Size >*
SlideNodeArchive::mutable_thumbnailsizes() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideNodeArchive.thumbnailSizes)
  return &_impl_.thumbnailsizes_;
}
inline const ::TSP::Size& SlideNodeArchive::_internal_thumbnailsizes(int index) const {
  return _impl_.thumbnailsizes_.Get(index);
}
inline const ::TSP::Size& SlideNodeArchive::thumbnailsizes(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.thumbnailSizes)
  return _internal_thumbnailsizes(index);
}
inline ::TSP::Size* SlideNodeArchive::_internal_add_thumbnailsizes() {
  return _impl_.thumbnailsizes_.Add();
}
inline ::TSP::Size* SlideNodeArchive::add_thumbnailsizes() {
  ::TSP::Size* _add = _internal_add_thumbnailsizes();
  // @@protoc_insertion_point(field_add:KN.SlideNodeArchive.thumbnailSizes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Size >&
SlideNodeArchive::thumbnailsizes() const {
  // @@protoc_insertion_point(field_list:KN.SlideNodeArchive.thumbnailSizes)
  return _impl_.thumbnailsizes_;
}

// optional bool thumbnailsAreDirty = 14;
inline bool SlideNodeArchive::_internal_has_thumbnailsaredirty() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_thumbnailsaredirty() const {
  return _internal_has_thumbnailsaredirty();
}
inline void SlideNodeArchive::clear_thumbnailsaredirty() {
  _impl_.thumbnailsaredirty_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool SlideNodeArchive::_internal_thumbnailsaredirty() const {
  return _impl_.thumbnailsaredirty_;
}
inline bool SlideNodeArchive::thumbnailsaredirty() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.thumbnailsAreDirty)
  return _internal_thumbnailsaredirty();
}
inline void SlideNodeArchive::_internal_set_thumbnailsaredirty(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.thumbnailsaredirty_ = value;
}
inline void SlideNodeArchive::set_thumbnailsaredirty(bool value) {
  _internal_set_thumbnailsaredirty(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.thumbnailsAreDirty)
}

// required bool isHidden = 4;
inline bool SlideNodeArchive::_internal_has_ishidden() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_ishidden() const {
  return _internal_has_ishidden();
}
inline void SlideNodeArchive::clear_ishidden() {
  _impl_.ishidden_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool SlideNodeArchive::_internal_ishidden() const {
  return _impl_.ishidden_;
}
inline bool SlideNodeArchive::ishidden() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.isHidden)
  return _internal_ishidden();
}
inline void SlideNodeArchive::_internal_set_ishidden(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.ishidden_ = value;
}
inline void SlideNodeArchive::set_ishidden(bool value) {
  _internal_set_ishidden(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.isHidden)
}

// required bool isCollapsed = 5 [deprecated = true];
inline bool SlideNodeArchive::_internal_has_iscollapsed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_iscollapsed() const {
  return _internal_has_iscollapsed();
}
inline void SlideNodeArchive::clear_iscollapsed() {
  _impl_.iscollapsed_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool SlideNodeArchive::_internal_iscollapsed() const {
  return _impl_.iscollapsed_;
}
inline bool SlideNodeArchive::iscollapsed() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.isCollapsed)
  return _internal_iscollapsed();
}
inline void SlideNodeArchive::_internal_set_iscollapsed(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.iscollapsed_ = value;
}
inline void SlideNodeArchive::set_iscollapsed(bool value) {
  _internal_set_iscollapsed(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.isCollapsed)
}

// optional bool isCollapsedInOutlineView = 17;
inline bool SlideNodeArchive::_internal_has_iscollapsedinoutlineview() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_iscollapsedinoutlineview() const {
  return _internal_has_iscollapsedinoutlineview();
}
inline void SlideNodeArchive::clear_iscollapsedinoutlineview() {
  _impl_.iscollapsedinoutlineview_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool SlideNodeArchive::_internal_iscollapsedinoutlineview() const {
  return _impl_.iscollapsedinoutlineview_;
}
inline bool SlideNodeArchive::iscollapsedinoutlineview() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.isCollapsedInOutlineView)
  return _internal_iscollapsedinoutlineview();
}
inline void SlideNodeArchive::_internal_set_iscollapsedinoutlineview(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.iscollapsedinoutlineview_ = value;
}
inline void SlideNodeArchive::set_iscollapsedinoutlineview(bool value) {
  _internal_set_iscollapsedinoutlineview(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.isCollapsedInOutlineView)
}

// optional bool hasBodyInOutlineView = 19;
inline bool SlideNodeArchive::_internal_has_hasbodyinoutlineview() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_hasbodyinoutlineview() const {
  return _internal_has_hasbodyinoutlineview();
}
inline void SlideNodeArchive::clear_hasbodyinoutlineview() {
  _impl_.hasbodyinoutlineview_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool SlideNodeArchive::_internal_hasbodyinoutlineview() const {
  return _impl_.hasbodyinoutlineview_;
}
inline bool SlideNodeArchive::hasbodyinoutlineview() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.hasBodyInOutlineView)
  return _internal_hasbodyinoutlineview();
}
inline void SlideNodeArchive::_internal_set_hasbodyinoutlineview(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.hasbodyinoutlineview_ = value;
}
inline void SlideNodeArchive::set_hasbodyinoutlineview(bool value) {
  _internal_set_hasbodyinoutlineview(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.hasBodyInOutlineView)
}

// required bool hasBuilds = 6;
inline bool SlideNodeArchive::_internal_has_hasbuilds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_hasbuilds() const {
  return _internal_has_hasbuilds();
}
inline void SlideNodeArchive::clear_hasbuilds() {
  _impl_.hasbuilds_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool SlideNodeArchive::_internal_hasbuilds() const {
  return _impl_.hasbuilds_;
}
inline bool SlideNodeArchive::hasbuilds() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.hasBuilds)
  return _internal_hasbuilds();
}
inline void SlideNodeArchive::_internal_set_hasbuilds(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.hasbuilds_ = value;
}
inline void SlideNodeArchive::set_hasbuilds(bool value) {
  _internal_set_hasbuilds(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.hasBuilds)
}

// required bool hasTransition = 7;
inline bool SlideNodeArchive::_internal_has_hastransition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_hastransition() const {
  return _internal_has_hastransition();
}
inline void SlideNodeArchive::clear_hastransition() {
  _impl_.hastransition_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool SlideNodeArchive::_internal_hastransition() const {
  return _impl_.hastransition_;
}
inline bool SlideNodeArchive::hastransition() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.hasTransition)
  return _internal_hastransition();
}
inline void SlideNodeArchive::_internal_set_hastransition(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.hastransition_ = value;
}
inline void SlideNodeArchive::set_hastransition(bool value) {
  _internal_set_hastransition(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.hasTransition)
}

// optional bool hasNote = 8;
inline bool SlideNodeArchive::_internal_has_hasnote() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_hasnote() const {
  return _internal_has_hasnote();
}
inline void SlideNodeArchive::clear_hasnote() {
  _impl_.hasnote_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool SlideNodeArchive::_internal_hasnote() const {
  return _impl_.hasnote_;
}
inline bool SlideNodeArchive::hasnote() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.hasNote)
  return _internal_hasnote();
}
inline void SlideNodeArchive::_internal_set_hasnote(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.hasnote_ = value;
}
inline void SlideNodeArchive::set_hasnote(bool value) {
  _internal_set_hasnote(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.hasNote)
}

// optional bool isSlideNumberVisible = 18 [default = false];
inline bool SlideNodeArchive::_internal_has_isslidenumbervisible() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_isslidenumbervisible() const {
  return _internal_has_isslidenumbervisible();
}
inline void SlideNodeArchive::clear_isslidenumbervisible() {
  _impl_.isslidenumbervisible_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool SlideNodeArchive::_internal_isslidenumbervisible() const {
  return _impl_.isslidenumbervisible_;
}
inline bool SlideNodeArchive::isslidenumbervisible() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.isSlideNumberVisible)
  return _internal_isslidenumbervisible();
}
inline void SlideNodeArchive::_internal_set_isslidenumbervisible(bool value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.isslidenumbervisible_ = value;
}
inline void SlideNodeArchive::set_isslidenumbervisible(bool value) {
  _internal_set_isslidenumbervisible(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.isSlideNumberVisible)
}

// optional string uniqueIdentifier = 11;
inline bool SlideNodeArchive::_internal_has_uniqueidentifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_uniqueidentifier() const {
  return _internal_has_uniqueidentifier();
}
inline void SlideNodeArchive::clear_uniqueidentifier() {
  _impl_.uniqueidentifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SlideNodeArchive::uniqueidentifier() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.uniqueIdentifier)
  return _internal_uniqueidentifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SlideNodeArchive::set_uniqueidentifier(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.uniqueidentifier_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.uniqueIdentifier)
}
inline std::string* SlideNodeArchive::mutable_uniqueidentifier() {
  std::string* _s = _internal_mutable_uniqueidentifier();
  // @@protoc_insertion_point(field_mutable:KN.SlideNodeArchive.uniqueIdentifier)
  return _s;
}
inline const std::string& SlideNodeArchive::_internal_uniqueidentifier() const {
  return _impl_.uniqueidentifier_.Get();
}
inline void SlideNodeArchive::_internal_set_uniqueidentifier(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.uniqueidentifier_.Set(value, GetArenaForAllocation());
}
inline std::string* SlideNodeArchive::_internal_mutable_uniqueidentifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.uniqueidentifier_.Mutable(GetArenaForAllocation());
}
inline std::string* SlideNodeArchive::release_uniqueidentifier() {
  // @@protoc_insertion_point(field_release:KN.SlideNodeArchive.uniqueIdentifier)
  if (!_internal_has_uniqueidentifier()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.uniqueidentifier_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uniqueidentifier_.IsDefault()) {
    _impl_.uniqueidentifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SlideNodeArchive::set_allocated_uniqueidentifier(std::string* uniqueidentifier) {
  if (uniqueidentifier != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.uniqueidentifier_.SetAllocated(uniqueidentifier, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uniqueidentifier_.IsDefault()) {
    _impl_.uniqueidentifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.SlideNodeArchive.uniqueIdentifier)
}

// optional string copyFromSlideIdentifier = 12;
inline bool SlideNodeArchive::_internal_has_copyfromslideidentifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_copyfromslideidentifier() const {
  return _internal_has_copyfromslideidentifier();
}
inline void SlideNodeArchive::clear_copyfromslideidentifier() {
  _impl_.copyfromslideidentifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SlideNodeArchive::copyfromslideidentifier() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.copyFromSlideIdentifier)
  return _internal_copyfromslideidentifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SlideNodeArchive::set_copyfromslideidentifier(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.copyfromslideidentifier_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.copyFromSlideIdentifier)
}
inline std::string* SlideNodeArchive::mutable_copyfromslideidentifier() {
  std::string* _s = _internal_mutable_copyfromslideidentifier();
  // @@protoc_insertion_point(field_mutable:KN.SlideNodeArchive.copyFromSlideIdentifier)
  return _s;
}
inline const std::string& SlideNodeArchive::_internal_copyfromslideidentifier() const {
  return _impl_.copyfromslideidentifier_.Get();
}
inline void SlideNodeArchive::_internal_set_copyfromslideidentifier(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.copyfromslideidentifier_.Set(value, GetArenaForAllocation());
}
inline std::string* SlideNodeArchive::_internal_mutable_copyfromslideidentifier() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.copyfromslideidentifier_.Mutable(GetArenaForAllocation());
}
inline std::string* SlideNodeArchive::release_copyfromslideidentifier() {
  // @@protoc_insertion_point(field_release:KN.SlideNodeArchive.copyFromSlideIdentifier)
  if (!_internal_has_copyfromslideidentifier()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.copyfromslideidentifier_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.copyfromslideidentifier_.IsDefault()) {
    _impl_.copyfromslideidentifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SlideNodeArchive::set_allocated_copyfromslideidentifier(std::string* copyfromslideidentifier) {
  if (copyfromslideidentifier != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.copyfromslideidentifier_.SetAllocated(copyfromslideidentifier, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.copyfromslideidentifier_.IsDefault()) {
    _impl_.copyfromslideidentifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.SlideNodeArchive.copyFromSlideIdentifier)
}

// optional uint32 slideSpecificHyperlinkCount = 13;
inline bool SlideNodeArchive::_internal_has_slidespecifichyperlinkcount() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_slidespecifichyperlinkcount() const {
  return _internal_has_slidespecifichyperlinkcount();
}
inline void SlideNodeArchive::clear_slidespecifichyperlinkcount() {
  _impl_.slidespecifichyperlinkcount_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t SlideNodeArchive::_internal_slidespecifichyperlinkcount() const {
  return _impl_.slidespecifichyperlinkcount_;
}
inline uint32_t SlideNodeArchive::slidespecifichyperlinkcount() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.slideSpecificHyperlinkCount)
  return _internal_slidespecifichyperlinkcount();
}
inline void SlideNodeArchive::_internal_set_slidespecifichyperlinkcount(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.slidespecifichyperlinkcount_ = value;
}
inline void SlideNodeArchive::set_slidespecifichyperlinkcount(uint32_t value) {
  _internal_set_slidespecifichyperlinkcount(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.slideSpecificHyperlinkCount)
}

// optional uint32 eventCount = 15;
inline bool SlideNodeArchive::_internal_has_eventcount() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SlideNodeArchive::has_eventcount() const {
  return _internal_has_eventcount();
}
inline void SlideNodeArchive::clear_eventcount() {
  _impl_.eventcount_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t SlideNodeArchive::_internal_eventcount() const {
  return _impl_.eventcount_;
}
inline uint32_t SlideNodeArchive::eventcount() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.eventCount)
  return _internal_eventcount();
}
inline void SlideNodeArchive::_internal_set_eventcount(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.eventcount_ = value;
}
inline void SlideNodeArchive::set_eventcount(uint32_t value) {
  _internal_set_eventcount(value);
  // @@protoc_insertion_point(field_set:KN.SlideNodeArchive.eventCount)
}

// optional .TSP.Reference database_thumbnail = 3;
inline bool SlideNodeArchive::_internal_has_database_thumbnail() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.database_thumbnail_ != nullptr);
  return value;
}
inline bool SlideNodeArchive::has_database_thumbnail() const {
  return _internal_has_database_thumbnail();
}
inline const ::TSP::Reference& SlideNodeArchive::_internal_database_thumbnail() const {
  const ::TSP::Reference* p = _impl_.database_thumbnail_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideNodeArchive::database_thumbnail() const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.database_thumbnail)
  return _internal_database_thumbnail();
}
inline void SlideNodeArchive::unsafe_arena_set_allocated_database_thumbnail(
    ::TSP::Reference* database_thumbnail) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.database_thumbnail_);
  }
  _impl_.database_thumbnail_ = database_thumbnail;
  if (database_thumbnail) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideNodeArchive.database_thumbnail)
}
inline ::TSP::Reference* SlideNodeArchive::release_database_thumbnail() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.database_thumbnail_;
  _impl_.database_thumbnail_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideNodeArchive::unsafe_arena_release_database_thumbnail() {
  // @@protoc_insertion_point(field_release:KN.SlideNodeArchive.database_thumbnail)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.database_thumbnail_;
  _impl_.database_thumbnail_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideNodeArchive::_internal_mutable_database_thumbnail() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.database_thumbnail_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.database_thumbnail_ = p;
  }
  return _impl_.database_thumbnail_;
}
inline ::TSP::Reference* SlideNodeArchive::mutable_database_thumbnail() {
  ::TSP::Reference* _msg = _internal_mutable_database_thumbnail();
  // @@protoc_insertion_point(field_mutable:KN.SlideNodeArchive.database_thumbnail)
  return _msg;
}
inline void SlideNodeArchive::set_allocated_database_thumbnail(::TSP::Reference* database_thumbnail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.database_thumbnail_);
  }
  if (database_thumbnail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_thumbnail));
    if (message_arena != submessage_arena) {
      database_thumbnail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, database_thumbnail, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.database_thumbnail_ = database_thumbnail;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideNodeArchive.database_thumbnail)
}

// repeated .TSP.Reference database_thumbnails = 9;
inline int SlideNodeArchive::_internal_database_thumbnails_size() const {
  return _impl_.database_thumbnails_.size();
}
inline int SlideNodeArchive::database_thumbnails_size() const {
  return _internal_database_thumbnails_size();
}
inline ::TSP::Reference* SlideNodeArchive::mutable_database_thumbnails(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideNodeArchive.database_thumbnails)
  return _impl_.database_thumbnails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SlideNodeArchive::mutable_database_thumbnails() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideNodeArchive.database_thumbnails)
  return &_impl_.database_thumbnails_;
}
inline const ::TSP::Reference& SlideNodeArchive::_internal_database_thumbnails(int index) const {
  return _impl_.database_thumbnails_.Get(index);
}
inline const ::TSP::Reference& SlideNodeArchive::database_thumbnails(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideNodeArchive.database_thumbnails)
  return _internal_database_thumbnails(index);
}
inline ::TSP::Reference* SlideNodeArchive::_internal_add_database_thumbnails() {
  return _impl_.database_thumbnails_.Add();
}
inline ::TSP::Reference* SlideNodeArchive::add_database_thumbnails() {
  ::TSP::Reference* _add = _internal_add_database_thumbnails();
  // @@protoc_insertion_point(field_add:KN.SlideNodeArchive.database_thumbnails)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SlideNodeArchive::database_thumbnails() const {
  // @@protoc_insertion_point(field_list:KN.SlideNodeArchive.database_thumbnails)
  return _impl_.database_thumbnails_;
}

// -------------------------------------------------------------------

// DesktopUILayoutArchive

// optional bool sidebar_visible = 1;
inline bool DesktopUILayoutArchive::_internal_has_sidebar_visible() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DesktopUILayoutArchive::has_sidebar_visible() const {
  return _internal_has_sidebar_visible();
}
inline void DesktopUILayoutArchive::clear_sidebar_visible() {
  _impl_.sidebar_visible_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool DesktopUILayoutArchive::_internal_sidebar_visible() const {
  return _impl_.sidebar_visible_;
}
inline bool DesktopUILayoutArchive::sidebar_visible() const {
  // @@protoc_insertion_point(field_get:KN.DesktopUILayoutArchive.sidebar_visible)
  return _internal_sidebar_visible();
}
inline void DesktopUILayoutArchive::_internal_set_sidebar_visible(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.sidebar_visible_ = value;
}
inline void DesktopUILayoutArchive::set_sidebar_visible(bool value) {
  _internal_set_sidebar_visible(value);
  // @@protoc_insertion_point(field_set:KN.DesktopUILayoutArchive.sidebar_visible)
}

// optional .KN.DesktopUILayoutArchive.SidebarViewMode sidebar_view_mode = 2;
inline bool DesktopUILayoutArchive::_internal_has_sidebar_view_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DesktopUILayoutArchive::has_sidebar_view_mode() const {
  return _internal_has_sidebar_view_mode();
}
inline void DesktopUILayoutArchive::clear_sidebar_view_mode() {
  _impl_.sidebar_view_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::KN::DesktopUILayoutArchive_SidebarViewMode DesktopUILayoutArchive::_internal_sidebar_view_mode() const {
  return static_cast< ::KN::DesktopUILayoutArchive_SidebarViewMode >(_impl_.sidebar_view_mode_);
}
inline ::KN::DesktopUILayoutArchive_SidebarViewMode DesktopUILayoutArchive::sidebar_view_mode() const {
  // @@protoc_insertion_point(field_get:KN.DesktopUILayoutArchive.sidebar_view_mode)
  return _internal_sidebar_view_mode();
}
inline void DesktopUILayoutArchive::_internal_set_sidebar_view_mode(::KN::DesktopUILayoutArchive_SidebarViewMode value) {
  assert(::KN::DesktopUILayoutArchive_SidebarViewMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sidebar_view_mode_ = value;
}
inline void DesktopUILayoutArchive::set_sidebar_view_mode(::KN::DesktopUILayoutArchive_SidebarViewMode value) {
  _internal_set_sidebar_view_mode(value);
  // @@protoc_insertion_point(field_set:KN.DesktopUILayoutArchive.sidebar_view_mode)
}

// optional bool notes_visible = 3;
inline bool DesktopUILayoutArchive::_internal_has_notes_visible() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DesktopUILayoutArchive::has_notes_visible() const {
  return _internal_has_notes_visible();
}
inline void DesktopUILayoutArchive::clear_notes_visible() {
  _impl_.notes_visible_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool DesktopUILayoutArchive::_internal_notes_visible() const {
  return _impl_.notes_visible_;
}
inline bool DesktopUILayoutArchive::notes_visible() const {
  // @@protoc_insertion_point(field_get:KN.DesktopUILayoutArchive.notes_visible)
  return _internal_notes_visible();
}
inline void DesktopUILayoutArchive::_internal_set_notes_visible(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.notes_visible_ = value;
}
inline void DesktopUILayoutArchive::set_notes_visible(bool value) {
  _internal_set_notes_visible(value);
  // @@protoc_insertion_point(field_set:KN.DesktopUILayoutArchive.notes_visible)
}

// optional bool light_table_visible = 5;
inline bool DesktopUILayoutArchive::_internal_has_light_table_visible() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DesktopUILayoutArchive::has_light_table_visible() const {
  return _internal_has_light_table_visible();
}
inline void DesktopUILayoutArchive::clear_light_table_visible() {
  _impl_.light_table_visible_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool DesktopUILayoutArchive::_internal_light_table_visible() const {
  return _impl_.light_table_visible_;
}
inline bool DesktopUILayoutArchive::light_table_visible() const {
  // @@protoc_insertion_point(field_get:KN.DesktopUILayoutArchive.light_table_visible)
  return _internal_light_table_visible();
}
inline void DesktopUILayoutArchive::_internal_set_light_table_visible(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.light_table_visible_ = value;
}
inline void DesktopUILayoutArchive::set_light_table_visible(bool value) {
  _internal_set_light_table_visible(value);
  // @@protoc_insertion_point(field_set:KN.DesktopUILayoutArchive.light_table_visible)
}

// optional bool inspector_pane_visible = 6 [default = true];
inline bool DesktopUILayoutArchive::_internal_has_inspector_pane_visible() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DesktopUILayoutArchive::has_inspector_pane_visible() const {
  return _internal_has_inspector_pane_visible();
}
inline void DesktopUILayoutArchive::clear_inspector_pane_visible() {
  _impl_.inspector_pane_visible_ = true;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool DesktopUILayoutArchive::_internal_inspector_pane_visible() const {
  return _impl_.inspector_pane_visible_;
}
inline bool DesktopUILayoutArchive::inspector_pane_visible() const {
  // @@protoc_insertion_point(field_get:KN.DesktopUILayoutArchive.inspector_pane_visible)
  return _internal_inspector_pane_visible();
}
inline void DesktopUILayoutArchive::_internal_set_inspector_pane_visible(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.inspector_pane_visible_ = value;
}
inline void DesktopUILayoutArchive::set_inspector_pane_visible(bool value) {
  _internal_set_inspector_pane_visible(value);
  // @@protoc_insertion_point(field_set:KN.DesktopUILayoutArchive.inspector_pane_visible)
}

// optional .KN.DesktopUILayoutArchive.InspectorPaneViewMode inspector_pane_view_mode = 7 [default = kInspectorPaneViewModeFormat];
inline bool DesktopUILayoutArchive::_internal_has_inspector_pane_view_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DesktopUILayoutArchive::has_inspector_pane_view_mode() const {
  return _internal_has_inspector_pane_view_mode();
}
inline void DesktopUILayoutArchive::clear_inspector_pane_view_mode() {
  _impl_.inspector_pane_view_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::KN::DesktopUILayoutArchive_InspectorPaneViewMode DesktopUILayoutArchive::_internal_inspector_pane_view_mode() const {
  return static_cast< ::KN::DesktopUILayoutArchive_InspectorPaneViewMode >(_impl_.inspector_pane_view_mode_);
}
inline ::KN::DesktopUILayoutArchive_InspectorPaneViewMode DesktopUILayoutArchive::inspector_pane_view_mode() const {
  // @@protoc_insertion_point(field_get:KN.DesktopUILayoutArchive.inspector_pane_view_mode)
  return _internal_inspector_pane_view_mode();
}
inline void DesktopUILayoutArchive::_internal_set_inspector_pane_view_mode(::KN::DesktopUILayoutArchive_InspectorPaneViewMode value) {
  assert(::KN::DesktopUILayoutArchive_InspectorPaneViewMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.inspector_pane_view_mode_ = value;
}
inline void DesktopUILayoutArchive::set_inspector_pane_view_mode(::KN::DesktopUILayoutArchive_InspectorPaneViewMode value) {
  _internal_set_inspector_pane_view_mode(value);
  // @@protoc_insertion_point(field_set:KN.DesktopUILayoutArchive.inspector_pane_view_mode)
}

// -------------------------------------------------------------------

// UIStateArchive

// optional .TSP.Reference slideNodeToEdit = 1;
inline bool UIStateArchive::_internal_has_slidenodetoedit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slidenodetoedit_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_slidenodetoedit() const {
  return _internal_has_slidenodetoedit();
}
inline const ::TSP::Reference& UIStateArchive::_internal_slidenodetoedit() const {
  const ::TSP::Reference* p = _impl_.slidenodetoedit_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UIStateArchive::slidenodetoedit() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.slideNodeToEdit)
  return _internal_slidenodetoedit();
}
inline void UIStateArchive::unsafe_arena_set_allocated_slidenodetoedit(
    ::TSP::Reference* slidenodetoedit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidenodetoedit_);
  }
  _impl_.slidenodetoedit_ = slidenodetoedit;
  if (slidenodetoedit) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.UIStateArchive.slideNodeToEdit)
}
inline ::TSP::Reference* UIStateArchive::release_slidenodetoedit() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.slidenodetoedit_;
  _impl_.slidenodetoedit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* UIStateArchive::unsafe_arena_release_slidenodetoedit() {
  // @@protoc_insertion_point(field_release:KN.UIStateArchive.slideNodeToEdit)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.slidenodetoedit_;
  _impl_.slidenodetoedit_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UIStateArchive::_internal_mutable_slidenodetoedit() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.slidenodetoedit_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.slidenodetoedit_ = p;
  }
  return _impl_.slidenodetoedit_;
}
inline ::TSP::Reference* UIStateArchive::mutable_slidenodetoedit() {
  ::TSP::Reference* _msg = _internal_mutable_slidenodetoedit();
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.slideNodeToEdit)
  return _msg;
}
inline void UIStateArchive::set_allocated_slidenodetoedit(::TSP::Reference* slidenodetoedit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidenodetoedit_);
  }
  if (slidenodetoedit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidenodetoedit));
    if (message_arena != submessage_arena) {
      slidenodetoedit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slidenodetoedit, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.slidenodetoedit_ = slidenodetoedit;
  // @@protoc_insertion_point(field_set_allocated:KN.UIStateArchive.slideNodeToEdit)
}

// optional .TSP.Reference deprecated_masterSlideNodeToApply = 2;
inline bool UIStateArchive::_internal_has_deprecated_masterslidenodetoapply() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.deprecated_masterslidenodetoapply_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_deprecated_masterslidenodetoapply() const {
  return _internal_has_deprecated_masterslidenodetoapply();
}
inline const ::TSP::Reference& UIStateArchive::_internal_deprecated_masterslidenodetoapply() const {
  const ::TSP::Reference* p = _impl_.deprecated_masterslidenodetoapply_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UIStateArchive::deprecated_masterslidenodetoapply() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.deprecated_masterSlideNodeToApply)
  return _internal_deprecated_masterslidenodetoapply();
}
inline void UIStateArchive::unsafe_arena_set_allocated_deprecated_masterslidenodetoapply(
    ::TSP::Reference* deprecated_masterslidenodetoapply) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deprecated_masterslidenodetoapply_);
  }
  _impl_.deprecated_masterslidenodetoapply_ = deprecated_masterslidenodetoapply;
  if (deprecated_masterslidenodetoapply) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.UIStateArchive.deprecated_masterSlideNodeToApply)
}
inline ::TSP::Reference* UIStateArchive::release_deprecated_masterslidenodetoapply() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.deprecated_masterslidenodetoapply_;
  _impl_.deprecated_masterslidenodetoapply_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* UIStateArchive::unsafe_arena_release_deprecated_masterslidenodetoapply() {
  // @@protoc_insertion_point(field_release:KN.UIStateArchive.deprecated_masterSlideNodeToApply)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.deprecated_masterslidenodetoapply_;
  _impl_.deprecated_masterslidenodetoapply_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UIStateArchive::_internal_mutable_deprecated_masterslidenodetoapply() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.deprecated_masterslidenodetoapply_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.deprecated_masterslidenodetoapply_ = p;
  }
  return _impl_.deprecated_masterslidenodetoapply_;
}
inline ::TSP::Reference* UIStateArchive::mutable_deprecated_masterslidenodetoapply() {
  ::TSP::Reference* _msg = _internal_mutable_deprecated_masterslidenodetoapply();
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.deprecated_masterSlideNodeToApply)
  return _msg;
}
inline void UIStateArchive::set_allocated_deprecated_masterslidenodetoapply(::TSP::Reference* deprecated_masterslidenodetoapply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deprecated_masterslidenodetoapply_);
  }
  if (deprecated_masterslidenodetoapply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_masterslidenodetoapply));
    if (message_arena != submessage_arena) {
      deprecated_masterslidenodetoapply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_masterslidenodetoapply, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.deprecated_masterslidenodetoapply_ = deprecated_masterslidenodetoapply;
  // @@protoc_insertion_point(field_set_allocated:KN.UIStateArchive.deprecated_masterSlideNodeToApply)
}

// optional .TSP.Size deprecated_slideThumbnailSize = 3;
inline bool UIStateArchive::_internal_has_deprecated_slidethumbnailsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.deprecated_slidethumbnailsize_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_deprecated_slidethumbnailsize() const {
  return _internal_has_deprecated_slidethumbnailsize();
}
inline const ::TSP::Size& UIStateArchive::_internal_deprecated_slidethumbnailsize() const {
  const ::TSP::Size* p = _impl_.deprecated_slidethumbnailsize_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& UIStateArchive::deprecated_slidethumbnailsize() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.deprecated_slideThumbnailSize)
  return _internal_deprecated_slidethumbnailsize();
}
inline void UIStateArchive::unsafe_arena_set_allocated_deprecated_slidethumbnailsize(
    ::TSP::Size* deprecated_slidethumbnailsize) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deprecated_slidethumbnailsize_);
  }
  _impl_.deprecated_slidethumbnailsize_ = deprecated_slidethumbnailsize;
  if (deprecated_slidethumbnailsize) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.UIStateArchive.deprecated_slideThumbnailSize)
}
inline ::TSP::Size* UIStateArchive::release_deprecated_slidethumbnailsize() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Size* temp = _impl_.deprecated_slidethumbnailsize_;
  _impl_.deprecated_slidethumbnailsize_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Size* UIStateArchive::unsafe_arena_release_deprecated_slidethumbnailsize() {
  // @@protoc_insertion_point(field_release:KN.UIStateArchive.deprecated_slideThumbnailSize)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Size* temp = _impl_.deprecated_slidethumbnailsize_;
  _impl_.deprecated_slidethumbnailsize_ = nullptr;
  return temp;
}
inline ::TSP::Size* UIStateArchive::_internal_mutable_deprecated_slidethumbnailsize() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.deprecated_slidethumbnailsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArenaForAllocation());
    _impl_.deprecated_slidethumbnailsize_ = p;
  }
  return _impl_.deprecated_slidethumbnailsize_;
}
inline ::TSP::Size* UIStateArchive::mutable_deprecated_slidethumbnailsize() {
  ::TSP::Size* _msg = _internal_mutable_deprecated_slidethumbnailsize();
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.deprecated_slideThumbnailSize)
  return _msg;
}
inline void UIStateArchive::set_allocated_deprecated_slidethumbnailsize(::TSP::Size* deprecated_slidethumbnailsize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deprecated_slidethumbnailsize_);
  }
  if (deprecated_slidethumbnailsize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_slidethumbnailsize));
    if (message_arena != submessage_arena) {
      deprecated_slidethumbnailsize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_slidethumbnailsize, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.deprecated_slidethumbnailsize_ = deprecated_slidethumbnailsize;
  // @@protoc_insertion_point(field_set_allocated:KN.UIStateArchive.deprecated_slideThumbnailSize)
}

// optional float canvasViewScale = 4;
inline bool UIStateArchive::_internal_has_canvasviewscale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool UIStateArchive::has_canvasviewscale() const {
  return _internal_has_canvasviewscale();
}
inline void UIStateArchive::clear_canvasviewscale() {
  _impl_.canvasviewscale_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float UIStateArchive::_internal_canvasviewscale() const {
  return _impl_.canvasviewscale_;
}
inline float UIStateArchive::canvasviewscale() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.canvasViewScale)
  return _internal_canvasviewscale();
}
inline void UIStateArchive::_internal_set_canvasviewscale(float value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.canvasviewscale_ = value;
}
inline void UIStateArchive::set_canvasviewscale(float value) {
  _internal_set_canvasviewscale(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.canvasViewScale)
}

// optional .TSP.Point canvasOffset = 5;
inline bool UIStateArchive::_internal_has_canvasoffset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.canvasoffset_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_canvasoffset() const {
  return _internal_has_canvasoffset();
}
inline const ::TSP::Point& UIStateArchive::_internal_canvasoffset() const {
  const ::TSP::Point* p = _impl_.canvasoffset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& UIStateArchive::canvasoffset() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.canvasOffset)
  return _internal_canvasoffset();
}
inline void UIStateArchive::unsafe_arena_set_allocated_canvasoffset(
    ::TSP::Point* canvasoffset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.canvasoffset_);
  }
  _impl_.canvasoffset_ = canvasoffset;
  if (canvasoffset) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.UIStateArchive.canvasOffset)
}
inline ::TSP::Point* UIStateArchive::release_canvasoffset() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Point* temp = _impl_.canvasoffset_;
  _impl_.canvasoffset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Point* UIStateArchive::unsafe_arena_release_canvasoffset() {
  // @@protoc_insertion_point(field_release:KN.UIStateArchive.canvasOffset)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Point* temp = _impl_.canvasoffset_;
  _impl_.canvasoffset_ = nullptr;
  return temp;
}
inline ::TSP::Point* UIStateArchive::_internal_mutable_canvasoffset() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.canvasoffset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArenaForAllocation());
    _impl_.canvasoffset_ = p;
  }
  return _impl_.canvasoffset_;
}
inline ::TSP::Point* UIStateArchive::mutable_canvasoffset() {
  ::TSP::Point* _msg = _internal_mutable_canvasoffset();
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.canvasOffset)
  return _msg;
}
inline void UIStateArchive::set_allocated_canvasoffset(::TSP::Point* canvasoffset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.canvasoffset_);
  }
  if (canvasoffset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(canvasoffset));
    if (message_arena != submessage_arena) {
      canvasoffset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, canvasoffset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.canvasoffset_ = canvasoffset;
  // @@protoc_insertion_point(field_set_allocated:KN.UIStateArchive.canvasOffset)
}

// repeated .TSP.Reference selectedSlideNodes = 6;
inline int UIStateArchive::_internal_selectedslidenodes_size() const {
  return _impl_.selectedslidenodes_.size();
}
inline int UIStateArchive::selectedslidenodes_size() const {
  return _internal_selectedslidenodes_size();
}
inline ::TSP::Reference* UIStateArchive::mutable_selectedslidenodes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.selectedSlideNodes)
  return _impl_.selectedslidenodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
UIStateArchive::mutable_selectedslidenodes() {
  // @@protoc_insertion_point(field_mutable_list:KN.UIStateArchive.selectedSlideNodes)
  return &_impl_.selectedslidenodes_;
}
inline const ::TSP::Reference& UIStateArchive::_internal_selectedslidenodes(int index) const {
  return _impl_.selectedslidenodes_.Get(index);
}
inline const ::TSP::Reference& UIStateArchive::selectedslidenodes(int index) const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.selectedSlideNodes)
  return _internal_selectedslidenodes(index);
}
inline ::TSP::Reference* UIStateArchive::_internal_add_selectedslidenodes() {
  return _impl_.selectedslidenodes_.Add();
}
inline ::TSP::Reference* UIStateArchive::add_selectedslidenodes() {
  ::TSP::Reference* _add = _internal_add_selectedslidenodes();
  // @@protoc_insertion_point(field_add:KN.UIStateArchive.selectedSlideNodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
UIStateArchive::selectedslidenodes() const {
  // @@protoc_insertion_point(field_list:KN.UIStateArchive.selectedSlideNodes)
  return _impl_.selectedslidenodes_;
}

// optional float iPhoneCanvasViewScale = 7;
inline bool UIStateArchive::_internal_has_iphonecanvasviewscale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool UIStateArchive::has_iphonecanvasviewscale() const {
  return _internal_has_iphonecanvasviewscale();
}
inline void UIStateArchive::clear_iphonecanvasviewscale() {
  _impl_.iphonecanvasviewscale_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float UIStateArchive::_internal_iphonecanvasviewscale() const {
  return _impl_.iphonecanvasviewscale_;
}
inline float UIStateArchive::iphonecanvasviewscale() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.iPhoneCanvasViewScale)
  return _internal_iphonecanvasviewscale();
}
inline void UIStateArchive::_internal_set_iphonecanvasviewscale(float value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.iphonecanvasviewscale_ = value;
}
inline void UIStateArchive::set_iphonecanvasviewscale(float value) {
  _internal_set_iphonecanvasviewscale(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.iPhoneCanvasViewScale)
}

// optional .TSP.Point iPhoneCanvasOffset = 8;
inline bool UIStateArchive::_internal_has_iphonecanvasoffset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.iphonecanvasoffset_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_iphonecanvasoffset() const {
  return _internal_has_iphonecanvasoffset();
}
inline const ::TSP::Point& UIStateArchive::_internal_iphonecanvasoffset() const {
  const ::TSP::Point* p = _impl_.iphonecanvasoffset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& UIStateArchive::iphonecanvasoffset() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.iPhoneCanvasOffset)
  return _internal_iphonecanvasoffset();
}
inline void UIStateArchive::unsafe_arena_set_allocated_iphonecanvasoffset(
    ::TSP::Point* iphonecanvasoffset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.iphonecanvasoffset_);
  }
  _impl_.iphonecanvasoffset_ = iphonecanvasoffset;
  if (iphonecanvasoffset) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.UIStateArchive.iPhoneCanvasOffset)
}
inline ::TSP::Point* UIStateArchive::release_iphonecanvasoffset() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Point* temp = _impl_.iphonecanvasoffset_;
  _impl_.iphonecanvasoffset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Point* UIStateArchive::unsafe_arena_release_iphonecanvasoffset() {
  // @@protoc_insertion_point(field_release:KN.UIStateArchive.iPhoneCanvasOffset)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Point* temp = _impl_.iphonecanvasoffset_;
  _impl_.iphonecanvasoffset_ = nullptr;
  return temp;
}
inline ::TSP::Point* UIStateArchive::_internal_mutable_iphonecanvasoffset() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.iphonecanvasoffset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArenaForAllocation());
    _impl_.iphonecanvasoffset_ = p;
  }
  return _impl_.iphonecanvasoffset_;
}
inline ::TSP::Point* UIStateArchive::mutable_iphonecanvasoffset() {
  ::TSP::Point* _msg = _internal_mutable_iphonecanvasoffset();
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.iPhoneCanvasOffset)
  return _msg;
}
inline void UIStateArchive::set_allocated_iphonecanvasoffset(::TSP::Point* iphonecanvasoffset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.iphonecanvasoffset_);
  }
  if (iphonecanvasoffset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(iphonecanvasoffset));
    if (message_arena != submessage_arena) {
      iphonecanvasoffset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iphonecanvasoffset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.iphonecanvasoffset_ = iphonecanvasoffset;
  // @@protoc_insertion_point(field_set_allocated:KN.UIStateArchive.iPhoneCanvasOffset)
}

// optional float iPhone568CanvasViewScale = 9;
inline bool UIStateArchive::_internal_has_iphone568canvasviewscale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool UIStateArchive::has_iphone568canvasviewscale() const {
  return _internal_has_iphone568canvasviewscale();
}
inline void UIStateArchive::clear_iphone568canvasviewscale() {
  _impl_.iphone568canvasviewscale_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float UIStateArchive::_internal_iphone568canvasviewscale() const {
  return _impl_.iphone568canvasviewscale_;
}
inline float UIStateArchive::iphone568canvasviewscale() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.iPhone568CanvasViewScale)
  return _internal_iphone568canvasviewscale();
}
inline void UIStateArchive::_internal_set_iphone568canvasviewscale(float value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.iphone568canvasviewscale_ = value;
}
inline void UIStateArchive::set_iphone568canvasviewscale(float value) {
  _internal_set_iphone568canvasviewscale(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.iPhone568CanvasViewScale)
}

// optional .TSP.Point iPhone568CanvasOffset = 10;
inline bool UIStateArchive::_internal_has_iphone568canvasoffset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.iphone568canvasoffset_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_iphone568canvasoffset() const {
  return _internal_has_iphone568canvasoffset();
}
inline const ::TSP::Point& UIStateArchive::_internal_iphone568canvasoffset() const {
  const ::TSP::Point* p = _impl_.iphone568canvasoffset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& UIStateArchive::iphone568canvasoffset() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.iPhone568CanvasOffset)
  return _internal_iphone568canvasoffset();
}
inline void UIStateArchive::unsafe_arena_set_allocated_iphone568canvasoffset(
    ::TSP::Point* iphone568canvasoffset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.iphone568canvasoffset_);
  }
  _impl_.iphone568canvasoffset_ = iphone568canvasoffset;
  if (iphone568canvasoffset) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.UIStateArchive.iPhone568CanvasOffset)
}
inline ::TSP::Point* UIStateArchive::release_iphone568canvasoffset() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Point* temp = _impl_.iphone568canvasoffset_;
  _impl_.iphone568canvasoffset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Point* UIStateArchive::unsafe_arena_release_iphone568canvasoffset() {
  // @@protoc_insertion_point(field_release:KN.UIStateArchive.iPhone568CanvasOffset)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Point* temp = _impl_.iphone568canvasoffset_;
  _impl_.iphone568canvasoffset_ = nullptr;
  return temp;
}
inline ::TSP::Point* UIStateArchive::_internal_mutable_iphone568canvasoffset() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.iphone568canvasoffset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArenaForAllocation());
    _impl_.iphone568canvasoffset_ = p;
  }
  return _impl_.iphone568canvasoffset_;
}
inline ::TSP::Point* UIStateArchive::mutable_iphone568canvasoffset() {
  ::TSP::Point* _msg = _internal_mutable_iphone568canvasoffset();
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.iPhone568CanvasOffset)
  return _msg;
}
inline void UIStateArchive::set_allocated_iphone568canvasoffset(::TSP::Point* iphone568canvasoffset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.iphone568canvasoffset_);
  }
  if (iphone568canvasoffset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(iphone568canvasoffset));
    if (message_arena != submessage_arena) {
      iphone568canvasoffset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iphone568canvasoffset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.iphone568canvasoffset_ = iphone568canvasoffset;
  // @@protoc_insertion_point(field_set_allocated:KN.UIStateArchive.iPhone568CanvasOffset)
}

// optional .TSP.Reference desktop_ui_layout = 11;
inline bool UIStateArchive::_internal_has_desktop_ui_layout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.desktop_ui_layout_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_desktop_ui_layout() const {
  return _internal_has_desktop_ui_layout();
}
inline const ::TSP::Reference& UIStateArchive::_internal_desktop_ui_layout() const {
  const ::TSP::Reference* p = _impl_.desktop_ui_layout_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UIStateArchive::desktop_ui_layout() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.desktop_ui_layout)
  return _internal_desktop_ui_layout();
}
inline void UIStateArchive::unsafe_arena_set_allocated_desktop_ui_layout(
    ::TSP::Reference* desktop_ui_layout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.desktop_ui_layout_);
  }
  _impl_.desktop_ui_layout_ = desktop_ui_layout;
  if (desktop_ui_layout) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.UIStateArchive.desktop_ui_layout)
}
inline ::TSP::Reference* UIStateArchive::release_desktop_ui_layout() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.desktop_ui_layout_;
  _impl_.desktop_ui_layout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* UIStateArchive::unsafe_arena_release_desktop_ui_layout() {
  // @@protoc_insertion_point(field_release:KN.UIStateArchive.desktop_ui_layout)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.desktop_ui_layout_;
  _impl_.desktop_ui_layout_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UIStateArchive::_internal_mutable_desktop_ui_layout() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.desktop_ui_layout_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.desktop_ui_layout_ = p;
  }
  return _impl_.desktop_ui_layout_;
}
inline ::TSP::Reference* UIStateArchive::mutable_desktop_ui_layout() {
  ::TSP::Reference* _msg = _internal_mutable_desktop_ui_layout();
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.desktop_ui_layout)
  return _msg;
}
inline void UIStateArchive::set_allocated_desktop_ui_layout(::TSP::Reference* desktop_ui_layout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.desktop_ui_layout_);
  }
  if (desktop_ui_layout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(desktop_ui_layout));
    if (message_arena != submessage_arena) {
      desktop_ui_layout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, desktop_ui_layout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.desktop_ui_layout_ = desktop_ui_layout;
  // @@protoc_insertion_point(field_set_allocated:KN.UIStateArchive.desktop_ui_layout)
}

// optional bool desktop_slide_view_content_fits_window = 12;
inline bool UIStateArchive::_internal_has_desktop_slide_view_content_fits_window() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool UIStateArchive::has_desktop_slide_view_content_fits_window() const {
  return _internal_has_desktop_slide_view_content_fits_window();
}
inline void UIStateArchive::clear_desktop_slide_view_content_fits_window() {
  _impl_.desktop_slide_view_content_fits_window_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool UIStateArchive::_internal_desktop_slide_view_content_fits_window() const {
  return _impl_.desktop_slide_view_content_fits_window_;
}
inline bool UIStateArchive::desktop_slide_view_content_fits_window() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.desktop_slide_view_content_fits_window)
  return _internal_desktop_slide_view_content_fits_window();
}
inline void UIStateArchive::_internal_set_desktop_slide_view_content_fits_window(bool value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.desktop_slide_view_content_fits_window_ = value;
}
inline void UIStateArchive::set_desktop_slide_view_content_fits_window(bool value) {
  _internal_set_desktop_slide_view_content_fits_window(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.desktop_slide_view_content_fits_window)
}

// optional float desktop_canvas_view_scale = 13;
inline bool UIStateArchive::_internal_has_desktop_canvas_view_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool UIStateArchive::has_desktop_canvas_view_scale() const {
  return _internal_has_desktop_canvas_view_scale();
}
inline void UIStateArchive::clear_desktop_canvas_view_scale() {
  _impl_.desktop_canvas_view_scale_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float UIStateArchive::_internal_desktop_canvas_view_scale() const {
  return _impl_.desktop_canvas_view_scale_;
}
inline float UIStateArchive::desktop_canvas_view_scale() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.desktop_canvas_view_scale)
  return _internal_desktop_canvas_view_scale();
}
inline void UIStateArchive::_internal_set_desktop_canvas_view_scale(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.desktop_canvas_view_scale_ = value;
}
inline void UIStateArchive::set_desktop_canvas_view_scale(float value) {
  _internal_set_desktop_canvas_view_scale(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.desktop_canvas_view_scale)
}

// optional .TSP.Point desktop_canvas_offset = 21;
inline bool UIStateArchive::_internal_has_desktop_canvas_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.desktop_canvas_offset_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_desktop_canvas_offset() const {
  return _internal_has_desktop_canvas_offset();
}
inline const ::TSP::Point& UIStateArchive::_internal_desktop_canvas_offset() const {
  const ::TSP::Point* p = _impl_.desktop_canvas_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& UIStateArchive::desktop_canvas_offset() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.desktop_canvas_offset)
  return _internal_desktop_canvas_offset();
}
inline void UIStateArchive::unsafe_arena_set_allocated_desktop_canvas_offset(
    ::TSP::Point* desktop_canvas_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.desktop_canvas_offset_);
  }
  _impl_.desktop_canvas_offset_ = desktop_canvas_offset;
  if (desktop_canvas_offset) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.UIStateArchive.desktop_canvas_offset)
}
inline ::TSP::Point* UIStateArchive::release_desktop_canvas_offset() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSP::Point* temp = _impl_.desktop_canvas_offset_;
  _impl_.desktop_canvas_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Point* UIStateArchive::unsafe_arena_release_desktop_canvas_offset() {
  // @@protoc_insertion_point(field_release:KN.UIStateArchive.desktop_canvas_offset)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSP::Point* temp = _impl_.desktop_canvas_offset_;
  _impl_.desktop_canvas_offset_ = nullptr;
  return temp;
}
inline ::TSP::Point* UIStateArchive::_internal_mutable_desktop_canvas_offset() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.desktop_canvas_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArenaForAllocation());
    _impl_.desktop_canvas_offset_ = p;
  }
  return _impl_.desktop_canvas_offset_;
}
inline ::TSP::Point* UIStateArchive::mutable_desktop_canvas_offset() {
  ::TSP::Point* _msg = _internal_mutable_desktop_canvas_offset();
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.desktop_canvas_offset)
  return _msg;
}
inline void UIStateArchive::set_allocated_desktop_canvas_offset(::TSP::Point* desktop_canvas_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.desktop_canvas_offset_);
  }
  if (desktop_canvas_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(desktop_canvas_offset));
    if (message_arena != submessage_arena) {
      desktop_canvas_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, desktop_canvas_offset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.desktop_canvas_offset_ = desktop_canvas_offset;
  // @@protoc_insertion_point(field_set_allocated:KN.UIStateArchive.desktop_canvas_offset)
}

// optional float light_table_zoom_scale = 14;
inline bool UIStateArchive::_internal_has_light_table_zoom_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool UIStateArchive::has_light_table_zoom_scale() const {
  return _internal_has_light_table_zoom_scale();
}
inline void UIStateArchive::clear_light_table_zoom_scale() {
  _impl_.light_table_zoom_scale_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float UIStateArchive::_internal_light_table_zoom_scale() const {
  return _impl_.light_table_zoom_scale_;
}
inline float UIStateArchive::light_table_zoom_scale() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.light_table_zoom_scale)
  return _internal_light_table_zoom_scale();
}
inline void UIStateArchive::_internal_set_light_table_zoom_scale(float value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.light_table_zoom_scale_ = value;
}
inline void UIStateArchive::set_light_table_zoom_scale(float value) {
  _internal_set_light_table_zoom_scale(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.light_table_zoom_scale)
}

// repeated .TSCH.ChartUIState chart_ui_state = 15;
inline int UIStateArchive::_internal_chart_ui_state_size() const {
  return _impl_.chart_ui_state_.size();
}
inline int UIStateArchive::chart_ui_state_size() const {
  return _internal_chart_ui_state_size();
}
inline ::TSCH::ChartUIState* UIStateArchive::mutable_chart_ui_state(int index) {
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.chart_ui_state)
  return _impl_.chart_ui_state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartUIState >*
UIStateArchive::mutable_chart_ui_state() {
  // @@protoc_insertion_point(field_mutable_list:KN.UIStateArchive.chart_ui_state)
  return &_impl_.chart_ui_state_;
}
inline const ::TSCH::ChartUIState& UIStateArchive::_internal_chart_ui_state(int index) const {
  return _impl_.chart_ui_state_.Get(index);
}
inline const ::TSCH::ChartUIState& UIStateArchive::chart_ui_state(int index) const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.chart_ui_state)
  return _internal_chart_ui_state(index);
}
inline ::TSCH::ChartUIState* UIStateArchive::_internal_add_chart_ui_state() {
  return _impl_.chart_ui_state_.Add();
}
inline ::TSCH::ChartUIState* UIStateArchive::add_chart_ui_state() {
  ::TSCH::ChartUIState* _add = _internal_add_chart_ui_state();
  // @@protoc_insertion_point(field_add:KN.UIStateArchive.chart_ui_state)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartUIState >&
UIStateArchive::chart_ui_state() const {
  // @@protoc_insertion_point(field_list:KN.UIStateArchive.chart_ui_state)
  return _impl_.chart_ui_state_;
}

// optional bool show_slide_guides = 16;
inline bool UIStateArchive::_internal_has_show_slide_guides() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool UIStateArchive::has_show_slide_guides() const {
  return _internal_has_show_slide_guides();
}
inline void UIStateArchive::clear_show_slide_guides() {
  _impl_.show_slide_guides_ = false;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool UIStateArchive::_internal_show_slide_guides() const {
  return _impl_.show_slide_guides_;
}
inline bool UIStateArchive::show_slide_guides() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.show_slide_guides)
  return _internal_show_slide_guides();
}
inline void UIStateArchive::_internal_set_show_slide_guides(bool value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.show_slide_guides_ = value;
}
inline void UIStateArchive::set_show_slide_guides(bool value) {
  _internal_set_show_slide_guides(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.show_slide_guides)
}

// optional bool show_master_guides = 17;
inline bool UIStateArchive::_internal_has_show_master_guides() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool UIStateArchive::has_show_master_guides() const {
  return _internal_has_show_master_guides();
}
inline void UIStateArchive::clear_show_master_guides() {
  _impl_.show_master_guides_ = false;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline bool UIStateArchive::_internal_show_master_guides() const {
  return _impl_.show_master_guides_;
}
inline bool UIStateArchive::show_master_guides() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.show_master_guides)
  return _internal_show_master_guides();
}
inline void UIStateArchive::_internal_set_show_master_guides(bool value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.show_master_guides_ = value;
}
inline void UIStateArchive::set_show_master_guides(bool value) {
  _internal_set_show_master_guides(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.show_master_guides)
}

// optional bool shows_comments = 18;
inline bool UIStateArchive::_internal_has_shows_comments() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool UIStateArchive::has_shows_comments() const {
  return _internal_has_shows_comments();
}
inline void UIStateArchive::clear_shows_comments() {
  _impl_.shows_comments_ = false;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline bool UIStateArchive::_internal_shows_comments() const {
  return _impl_.shows_comments_;
}
inline bool UIStateArchive::shows_comments() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.shows_comments)
  return _internal_shows_comments();
}
inline void UIStateArchive::_internal_set_shows_comments(bool value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.shows_comments_ = value;
}
inline void UIStateArchive::set_shows_comments(bool value) {
  _internal_set_shows_comments(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.shows_comments)
}

// repeated .TSP.Reference collapsed_slide_nodes = 19;
inline int UIStateArchive::_internal_collapsed_slide_nodes_size() const {
  return _impl_.collapsed_slide_nodes_.size();
}
inline int UIStateArchive::collapsed_slide_nodes_size() const {
  return _internal_collapsed_slide_nodes_size();
}
inline ::TSP::Reference* UIStateArchive::mutable_collapsed_slide_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.collapsed_slide_nodes)
  return _impl_.collapsed_slide_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
UIStateArchive::mutable_collapsed_slide_nodes() {
  // @@protoc_insertion_point(field_mutable_list:KN.UIStateArchive.collapsed_slide_nodes)
  return &_impl_.collapsed_slide_nodes_;
}
inline const ::TSP::Reference& UIStateArchive::_internal_collapsed_slide_nodes(int index) const {
  return _impl_.collapsed_slide_nodes_.Get(index);
}
inline const ::TSP::Reference& UIStateArchive::collapsed_slide_nodes(int index) const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.collapsed_slide_nodes)
  return _internal_collapsed_slide_nodes(index);
}
inline ::TSP::Reference* UIStateArchive::_internal_add_collapsed_slide_nodes() {
  return _impl_.collapsed_slide_nodes_.Add();
}
inline ::TSP::Reference* UIStateArchive::add_collapsed_slide_nodes() {
  ::TSP::Reference* _add = _internal_add_collapsed_slide_nodes();
  // @@protoc_insertion_point(field_add:KN.UIStateArchive.collapsed_slide_nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
UIStateArchive::collapsed_slide_nodes() const {
  // @@protoc_insertion_point(field_list:KN.UIStateArchive.collapsed_slide_nodes)
  return _impl_.collapsed_slide_nodes_;
}

// optional bool shows_ruler = 20;
inline bool UIStateArchive::_internal_has_shows_ruler() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool UIStateArchive::has_shows_ruler() const {
  return _internal_has_shows_ruler();
}
inline void UIStateArchive::clear_shows_ruler() {
  _impl_.shows_ruler_ = false;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline bool UIStateArchive::_internal_shows_ruler() const {
  return _impl_.shows_ruler_;
}
inline bool UIStateArchive::shows_ruler() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.shows_ruler)
  return _internal_shows_ruler();
}
inline void UIStateArchive::_internal_set_shows_ruler(bool value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.shows_ruler_ = value;
}
inline void UIStateArchive::set_shows_ruler(bool value) {
  _internal_set_shows_ruler(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.shows_ruler)
}

// optional float desktop_navigator_view_width = 22;
inline bool UIStateArchive::_internal_has_desktop_navigator_view_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool UIStateArchive::has_desktop_navigator_view_width() const {
  return _internal_has_desktop_navigator_view_width();
}
inline void UIStateArchive::clear_desktop_navigator_view_width() {
  _impl_.desktop_navigator_view_width_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline float UIStateArchive::_internal_desktop_navigator_view_width() const {
  return _impl_.desktop_navigator_view_width_;
}
inline float UIStateArchive::desktop_navigator_view_width() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.desktop_navigator_view_width)
  return _internal_desktop_navigator_view_width();
}
inline void UIStateArchive::_internal_set_desktop_navigator_view_width(float value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.desktop_navigator_view_width_ = value;
}
inline void UIStateArchive::set_desktop_navigator_view_width(float value) {
  _internal_set_desktop_navigator_view_width(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.desktop_navigator_view_width)
}

// optional float desktop_outline_view_width = 23;
inline bool UIStateArchive::_internal_has_desktop_outline_view_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool UIStateArchive::has_desktop_outline_view_width() const {
  return _internal_has_desktop_outline_view_width();
}
inline void UIStateArchive::clear_desktop_outline_view_width() {
  _impl_.desktop_outline_view_width_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline float UIStateArchive::_internal_desktop_outline_view_width() const {
  return _impl_.desktop_outline_view_width_;
}
inline float UIStateArchive::desktop_outline_view_width() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.desktop_outline_view_width)
  return _internal_desktop_outline_view_width();
}
inline void UIStateArchive::_internal_set_desktop_outline_view_width(float value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.desktop_outline_view_width_ = value;
}
inline void UIStateArchive::set_desktop_outline_view_width(float value) {
  _internal_set_desktop_outline_view_width(value);
  // @@protoc_insertion_point(field_set:KN.UIStateArchive.desktop_outline_view_width)
}

// optional .TSP.Size desktop_main_content_size = 24;
inline bool UIStateArchive::_internal_has_desktop_main_content_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.desktop_main_content_size_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_desktop_main_content_size() const {
  return _internal_has_desktop_main_content_size();
}
inline const ::TSP::Size& UIStateArchive::_internal_desktop_main_content_size() const {
  const ::TSP::Size* p = _impl_.desktop_main_content_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& UIStateArchive::desktop_main_content_size() const {
  // @@protoc_insertion_point(field_get:KN.UIStateArchive.desktop_main_content_size)
  return _internal_desktop_main_content_size();
}
inline void UIStateArchive::unsafe_arena_set_allocated_desktop_main_content_size(
    ::TSP::Size* desktop_main_content_size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.desktop_main_content_size_);
  }
  _impl_.desktop_main_content_size_ = desktop_main_content_size;
  if (desktop_main_content_size) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.UIStateArchive.desktop_main_content_size)
}
inline ::TSP::Size* UIStateArchive::release_desktop_main_content_size() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSP::Size* temp = _impl_.desktop_main_content_size_;
  _impl_.desktop_main_content_size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Size* UIStateArchive::unsafe_arena_release_desktop_main_content_size() {
  // @@protoc_insertion_point(field_release:KN.UIStateArchive.desktop_main_content_size)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSP::Size* temp = _impl_.desktop_main_content_size_;
  _impl_.desktop_main_content_size_ = nullptr;
  return temp;
}
inline ::TSP::Size* UIStateArchive::_internal_mutable_desktop_main_content_size() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.desktop_main_content_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArenaForAllocation());
    _impl_.desktop_main_content_size_ = p;
  }
  return _impl_.desktop_main_content_size_;
}
inline ::TSP::Size* UIStateArchive::mutable_desktop_main_content_size() {
  ::TSP::Size* _msg = _internal_mutable_desktop_main_content_size();
  // @@protoc_insertion_point(field_mutable:KN.UIStateArchive.desktop_main_content_size)
  return _msg;
}
inline void UIStateArchive::set_allocated_desktop_main_content_size(::TSP::Size* desktop_main_content_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.desktop_main_content_size_);
  }
  if (desktop_main_content_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(desktop_main_content_size));
    if (message_arena != submessage_arena) {
      desktop_main_content_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, desktop_main_content_size, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.desktop_main_content_size_ = desktop_main_content_size;
  // @@protoc_insertion_point(field_set_allocated:KN.UIStateArchive.desktop_main_content_size)
}

// -------------------------------------------------------------------

// CanvasSelectionArchive

// repeated .TSP.Reference infos = 1;
inline int CanvasSelectionArchive::_internal_infos_size() const {
  return _impl_.infos_.size();
}
inline int CanvasSelectionArchive::infos_size() const {
  return _internal_infos_size();
}
inline ::TSP::Reference* CanvasSelectionArchive::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CanvasSelectionArchive.infos)
  return _impl_.infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CanvasSelectionArchive::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:KN.CanvasSelectionArchive.infos)
  return &_impl_.infos_;
}
inline const ::TSP::Reference& CanvasSelectionArchive::_internal_infos(int index) const {
  return _impl_.infos_.Get(index);
}
inline const ::TSP::Reference& CanvasSelectionArchive::infos(int index) const {
  // @@protoc_insertion_point(field_get:KN.CanvasSelectionArchive.infos)
  return _internal_infos(index);
}
inline ::TSP::Reference* CanvasSelectionArchive::_internal_add_infos() {
  return _impl_.infos_.Add();
}
inline ::TSP::Reference* CanvasSelectionArchive::add_infos() {
  ::TSP::Reference* _add = _internal_add_infos();
  // @@protoc_insertion_point(field_add:KN.CanvasSelectionArchive.infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CanvasSelectionArchive::infos() const {
  // @@protoc_insertion_point(field_list:KN.CanvasSelectionArchive.infos)
  return _impl_.infos_;
}

// repeated .TSP.IndexSet action_ghost_indexes = 3;
inline int CanvasSelectionArchive::_internal_action_ghost_indexes_size() const {
  return _impl_.action_ghost_indexes_.size();
}
inline int CanvasSelectionArchive::action_ghost_indexes_size() const {
  return _internal_action_ghost_indexes_size();
}
inline ::TSP::IndexSet* CanvasSelectionArchive::mutable_action_ghost_indexes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CanvasSelectionArchive.action_ghost_indexes)
  return _impl_.action_ghost_indexes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::IndexSet >*
CanvasSelectionArchive::mutable_action_ghost_indexes() {
  // @@protoc_insertion_point(field_mutable_list:KN.CanvasSelectionArchive.action_ghost_indexes)
  return &_impl_.action_ghost_indexes_;
}
inline const ::TSP::IndexSet& CanvasSelectionArchive::_internal_action_ghost_indexes(int index) const {
  return _impl_.action_ghost_indexes_.Get(index);
}
inline const ::TSP::IndexSet& CanvasSelectionArchive::action_ghost_indexes(int index) const {
  // @@protoc_insertion_point(field_get:KN.CanvasSelectionArchive.action_ghost_indexes)
  return _internal_action_ghost_indexes(index);
}
inline ::TSP::IndexSet* CanvasSelectionArchive::_internal_add_action_ghost_indexes() {
  return _impl_.action_ghost_indexes_.Add();
}
inline ::TSP::IndexSet* CanvasSelectionArchive::add_action_ghost_indexes() {
  ::TSP::IndexSet* _add = _internal_add_action_ghost_indexes();
  // @@protoc_insertion_point(field_add:KN.CanvasSelectionArchive.action_ghost_indexes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::IndexSet >&
CanvasSelectionArchive::action_ghost_indexes() const {
  // @@protoc_insertion_point(field_list:KN.CanvasSelectionArchive.action_ghost_indexes)
  return _impl_.action_ghost_indexes_;
}

// repeated uint32 database_action_ghost_indexes = 2 [deprecated = true];
inline int CanvasSelectionArchive::_internal_database_action_ghost_indexes_size() const {
  return _impl_.database_action_ghost_indexes_.size();
}
inline int CanvasSelectionArchive::database_action_ghost_indexes_size() const {
  return _internal_database_action_ghost_indexes_size();
}
inline void CanvasSelectionArchive::clear_database_action_ghost_indexes() {
  _impl_.database_action_ghost_indexes_.Clear();
}
inline uint32_t CanvasSelectionArchive::_internal_database_action_ghost_indexes(int index) const {
  return _impl_.database_action_ghost_indexes_.Get(index);
}
inline uint32_t CanvasSelectionArchive::database_action_ghost_indexes(int index) const {
  // @@protoc_insertion_point(field_get:KN.CanvasSelectionArchive.database_action_ghost_indexes)
  return _internal_database_action_ghost_indexes(index);
}
inline void CanvasSelectionArchive::set_database_action_ghost_indexes(int index, uint32_t value) {
  _impl_.database_action_ghost_indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CanvasSelectionArchive.database_action_ghost_indexes)
}
inline void CanvasSelectionArchive::_internal_add_database_action_ghost_indexes(uint32_t value) {
  _impl_.database_action_ghost_indexes_.Add(value);
}
inline void CanvasSelectionArchive::add_database_action_ghost_indexes(uint32_t value) {
  _internal_add_database_action_ghost_indexes(value);
  // @@protoc_insertion_point(field_add:KN.CanvasSelectionArchive.database_action_ghost_indexes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CanvasSelectionArchive::_internal_database_action_ghost_indexes() const {
  return _impl_.database_action_ghost_indexes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CanvasSelectionArchive::database_action_ghost_indexes() const {
  // @@protoc_insertion_point(field_list:KN.CanvasSelectionArchive.database_action_ghost_indexes)
  return _internal_database_action_ghost_indexes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CanvasSelectionArchive::_internal_mutable_database_action_ghost_indexes() {
  return &_impl_.database_action_ghost_indexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CanvasSelectionArchive::mutable_database_action_ghost_indexes() {
  // @@protoc_insertion_point(field_mutable_list:KN.CanvasSelectionArchive.database_action_ghost_indexes)
  return _internal_mutable_database_action_ghost_indexes();
}

// -------------------------------------------------------------------

// ThemeArchive

// required .TSS.ThemeArchive super = 1;
inline bool ThemeArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool ThemeArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::ThemeArchive& ThemeArchive::_internal_super() const {
  const ::TSS::ThemeArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::ThemeArchive&>(
      ::TSS::_ThemeArchive_default_instance_);
}
inline const ::TSS::ThemeArchive& ThemeArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.ThemeArchive.super)
  return _internal_super();
}
inline void ThemeArchive::unsafe_arena_set_allocated_super(
    ::TSS::ThemeArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ThemeArchive.super)
}
inline ::TSS::ThemeArchive* ThemeArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSS::ThemeArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSS::ThemeArchive* ThemeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.ThemeArchive.super)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSS::ThemeArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSS::ThemeArchive* ThemeArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::ThemeArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSS::ThemeArchive* ThemeArchive::mutable_super() {
  ::TSS::ThemeArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.ThemeArchive.super)
  return _msg;
}
inline void ThemeArchive::set_allocated_super(::TSS::ThemeArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.ThemeArchive.super)
}

// repeated .TSP.Reference masters = 2;
inline int ThemeArchive::_internal_masters_size() const {
  return _impl_.masters_.size();
}
inline int ThemeArchive::masters_size() const {
  return _internal_masters_size();
}
inline ::TSP::Reference* ThemeArchive::mutable_masters(int index) {
  // @@protoc_insertion_point(field_mutable:KN.ThemeArchive.masters)
  return _impl_.masters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ThemeArchive::mutable_masters() {
  // @@protoc_insertion_point(field_mutable_list:KN.ThemeArchive.masters)
  return &_impl_.masters_;
}
inline const ::TSP::Reference& ThemeArchive::_internal_masters(int index) const {
  return _impl_.masters_.Get(index);
}
inline const ::TSP::Reference& ThemeArchive::masters(int index) const {
  // @@protoc_insertion_point(field_get:KN.ThemeArchive.masters)
  return _internal_masters(index);
}
inline ::TSP::Reference* ThemeArchive::_internal_add_masters() {
  return _impl_.masters_.Add();
}
inline ::TSP::Reference* ThemeArchive::add_masters() {
  ::TSP::Reference* _add = _internal_add_masters();
  // @@protoc_insertion_point(field_add:KN.ThemeArchive.masters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ThemeArchive::masters() const {
  // @@protoc_insertion_point(field_list:KN.ThemeArchive.masters)
  return _impl_.masters_;
}

// optional string uuid = 3;
inline bool ThemeArchive::_internal_has_uuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ThemeArchive::has_uuid() const {
  return _internal_has_uuid();
}
inline void ThemeArchive::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ThemeArchive::uuid() const {
  // @@protoc_insertion_point(field_get:KN.ThemeArchive.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ThemeArchive::set_uuid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.ThemeArchive.uuid)
}
inline std::string* ThemeArchive::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:KN.ThemeArchive.uuid)
  return _s;
}
inline const std::string& ThemeArchive::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void ThemeArchive::_internal_set_uuid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* ThemeArchive::_internal_mutable_uuid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* ThemeArchive::release_uuid() {
  // @@protoc_insertion_point(field_release:KN.ThemeArchive.uuid)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.uuid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ThemeArchive::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.ThemeArchive.uuid)
}

// repeated .TSP.Reference classicThemeRecords = 4;
inline int ThemeArchive::_internal_classicthemerecords_size() const {
  return _impl_.classicthemerecords_.size();
}
inline int ThemeArchive::classicthemerecords_size() const {
  return _internal_classicthemerecords_size();
}
inline ::TSP::Reference* ThemeArchive::mutable_classicthemerecords(int index) {
  // @@protoc_insertion_point(field_mutable:KN.ThemeArchive.classicThemeRecords)
  return _impl_.classicthemerecords_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ThemeArchive::mutable_classicthemerecords() {
  // @@protoc_insertion_point(field_mutable_list:KN.ThemeArchive.classicThemeRecords)
  return &_impl_.classicthemerecords_;
}
inline const ::TSP::Reference& ThemeArchive::_internal_classicthemerecords(int index) const {
  return _impl_.classicthemerecords_.Get(index);
}
inline const ::TSP::Reference& ThemeArchive::classicthemerecords(int index) const {
  // @@protoc_insertion_point(field_get:KN.ThemeArchive.classicThemeRecords)
  return _internal_classicthemerecords(index);
}
inline ::TSP::Reference* ThemeArchive::_internal_add_classicthemerecords() {
  return _impl_.classicthemerecords_.Add();
}
inline ::TSP::Reference* ThemeArchive::add_classicthemerecords() {
  ::TSP::Reference* _add = _internal_add_classicthemerecords();
  // @@protoc_insertion_point(field_add:KN.ThemeArchive.classicThemeRecords)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ThemeArchive::classicthemerecords() const {
  // @@protoc_insertion_point(field_list:KN.ThemeArchive.classicThemeRecords)
  return _impl_.classicthemerecords_;
}

// optional .TSP.Reference defaultMasterSlideNode = 5;
inline bool ThemeArchive::_internal_has_defaultmasterslidenode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.defaultmasterslidenode_ != nullptr);
  return value;
}
inline bool ThemeArchive::has_defaultmasterslidenode() const {
  return _internal_has_defaultmasterslidenode();
}
inline const ::TSP::Reference& ThemeArchive::_internal_defaultmasterslidenode() const {
  const ::TSP::Reference* p = _impl_.defaultmasterslidenode_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ThemeArchive::defaultmasterslidenode() const {
  // @@protoc_insertion_point(field_get:KN.ThemeArchive.defaultMasterSlideNode)
  return _internal_defaultmasterslidenode();
}
inline void ThemeArchive::unsafe_arena_set_allocated_defaultmasterslidenode(
    ::TSP::Reference* defaultmasterslidenode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.defaultmasterslidenode_);
  }
  _impl_.defaultmasterslidenode_ = defaultmasterslidenode;
  if (defaultmasterslidenode) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ThemeArchive.defaultMasterSlideNode)
}
inline ::TSP::Reference* ThemeArchive::release_defaultmasterslidenode() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.defaultmasterslidenode_;
  _impl_.defaultmasterslidenode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ThemeArchive::unsafe_arena_release_defaultmasterslidenode() {
  // @@protoc_insertion_point(field_release:KN.ThemeArchive.defaultMasterSlideNode)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.defaultmasterslidenode_;
  _impl_.defaultmasterslidenode_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ThemeArchive::_internal_mutable_defaultmasterslidenode() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.defaultmasterslidenode_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.defaultmasterslidenode_ = p;
  }
  return _impl_.defaultmasterslidenode_;
}
inline ::TSP::Reference* ThemeArchive::mutable_defaultmasterslidenode() {
  ::TSP::Reference* _msg = _internal_mutable_defaultmasterslidenode();
  // @@protoc_insertion_point(field_mutable:KN.ThemeArchive.defaultMasterSlideNode)
  return _msg;
}
inline void ThemeArchive::set_allocated_defaultmasterslidenode(::TSP::Reference* defaultmasterslidenode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.defaultmasterslidenode_);
  }
  if (defaultmasterslidenode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultmasterslidenode));
    if (message_arena != submessage_arena) {
      defaultmasterslidenode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defaultmasterslidenode, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.defaultmasterslidenode_ = defaultmasterslidenode;
  // @@protoc_insertion_point(field_set_allocated:KN.ThemeArchive.defaultMasterSlideNode)
}

// -------------------------------------------------------------------

// SlideTreeArchive

// optional .TSP.Reference rootSlideNode = 1;
inline bool SlideTreeArchive::_internal_has_rootslidenode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rootslidenode_ != nullptr);
  return value;
}
inline bool SlideTreeArchive::has_rootslidenode() const {
  return _internal_has_rootslidenode();
}
inline const ::TSP::Reference& SlideTreeArchive::_internal_rootslidenode() const {
  const ::TSP::Reference* p = _impl_.rootslidenode_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideTreeArchive::rootslidenode() const {
  // @@protoc_insertion_point(field_get:KN.SlideTreeArchive.rootSlideNode)
  return _internal_rootslidenode();
}
inline void SlideTreeArchive::unsafe_arena_set_allocated_rootslidenode(
    ::TSP::Reference* rootslidenode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rootslidenode_);
  }
  _impl_.rootslidenode_ = rootslidenode;
  if (rootslidenode) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideTreeArchive.rootSlideNode)
}
inline ::TSP::Reference* SlideTreeArchive::release_rootslidenode() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.rootslidenode_;
  _impl_.rootslidenode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideTreeArchive::unsafe_arena_release_rootslidenode() {
  // @@protoc_insertion_point(field_release:KN.SlideTreeArchive.rootSlideNode)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.rootslidenode_;
  _impl_.rootslidenode_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideTreeArchive::_internal_mutable_rootslidenode() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.rootslidenode_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.rootslidenode_ = p;
  }
  return _impl_.rootslidenode_;
}
inline ::TSP::Reference* SlideTreeArchive::mutable_rootslidenode() {
  ::TSP::Reference* _msg = _internal_mutable_rootslidenode();
  // @@protoc_insertion_point(field_mutable:KN.SlideTreeArchive.rootSlideNode)
  return _msg;
}
inline void SlideTreeArchive::set_allocated_rootslidenode(::TSP::Reference* rootslidenode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rootslidenode_);
  }
  if (rootslidenode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rootslidenode));
    if (message_arena != submessage_arena) {
      rootslidenode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rootslidenode, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rootslidenode_ = rootslidenode;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideTreeArchive.rootSlideNode)
}

// -------------------------------------------------------------------

// ShowArchive

// optional .TSP.Reference uiState = 1;
inline bool ShowArchive::_internal_has_uistate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.uistate_ != nullptr);
  return value;
}
inline bool ShowArchive::has_uistate() const {
  return _internal_has_uistate();
}
inline const ::TSP::Reference& ShowArchive::_internal_uistate() const {
  const ::TSP::Reference* p = _impl_.uistate_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ShowArchive::uistate() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.uiState)
  return _internal_uistate();
}
inline void ShowArchive::unsafe_arena_set_allocated_uistate(
    ::TSP::Reference* uistate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uistate_);
  }
  _impl_.uistate_ = uistate;
  if (uistate) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ShowArchive.uiState)
}
inline ::TSP::Reference* ShowArchive::release_uistate() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.uistate_;
  _impl_.uistate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ShowArchive::unsafe_arena_release_uistate() {
  // @@protoc_insertion_point(field_release:KN.ShowArchive.uiState)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.uistate_;
  _impl_.uistate_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ShowArchive::_internal_mutable_uistate() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.uistate_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.uistate_ = p;
  }
  return _impl_.uistate_;
}
inline ::TSP::Reference* ShowArchive::mutable_uistate() {
  ::TSP::Reference* _msg = _internal_mutable_uistate();
  // @@protoc_insertion_point(field_mutable:KN.ShowArchive.uiState)
  return _msg;
}
inline void ShowArchive::set_allocated_uistate(::TSP::Reference* uistate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uistate_);
  }
  if (uistate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uistate));
    if (message_arena != submessage_arena) {
      uistate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uistate, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.uistate_ = uistate;
  // @@protoc_insertion_point(field_set_allocated:KN.ShowArchive.uiState)
}

// required .TSP.Reference theme = 2;
inline bool ShowArchive::_internal_has_theme() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.theme_ != nullptr);
  return value;
}
inline bool ShowArchive::has_theme() const {
  return _internal_has_theme();
}
inline const ::TSP::Reference& ShowArchive::_internal_theme() const {
  const ::TSP::Reference* p = _impl_.theme_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ShowArchive::theme() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.theme)
  return _internal_theme();
}
inline void ShowArchive::unsafe_arena_set_allocated_theme(
    ::TSP::Reference* theme) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.theme_);
  }
  _impl_.theme_ = theme;
  if (theme) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ShowArchive.theme)
}
inline ::TSP::Reference* ShowArchive::release_theme() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.theme_;
  _impl_.theme_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ShowArchive::unsafe_arena_release_theme() {
  // @@protoc_insertion_point(field_release:KN.ShowArchive.theme)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.theme_;
  _impl_.theme_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ShowArchive::_internal_mutable_theme() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.theme_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.theme_ = p;
  }
  return _impl_.theme_;
}
inline ::TSP::Reference* ShowArchive::mutable_theme() {
  ::TSP::Reference* _msg = _internal_mutable_theme();
  // @@protoc_insertion_point(field_mutable:KN.ShowArchive.theme)
  return _msg;
}
inline void ShowArchive::set_allocated_theme(::TSP::Reference* theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.theme_);
  }
  if (theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme));
    if (message_arena != submessage_arena) {
      theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, theme, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.theme_ = theme;
  // @@protoc_insertion_point(field_set_allocated:KN.ShowArchive.theme)
}

// required .KN.SlideTreeArchive slideTree = 3;
inline bool ShowArchive::_internal_has_slidetree() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slidetree_ != nullptr);
  return value;
}
inline bool ShowArchive::has_slidetree() const {
  return _internal_has_slidetree();
}
inline void ShowArchive::clear_slidetree() {
  if (_impl_.slidetree_ != nullptr) _impl_.slidetree_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::KN::SlideTreeArchive& ShowArchive::_internal_slidetree() const {
  const ::KN::SlideTreeArchive* p = _impl_.slidetree_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::SlideTreeArchive&>(
      ::KN::_SlideTreeArchive_default_instance_);
}
inline const ::KN::SlideTreeArchive& ShowArchive::slidetree() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.slideTree)
  return _internal_slidetree();
}
inline void ShowArchive::unsafe_arena_set_allocated_slidetree(
    ::KN::SlideTreeArchive* slidetree) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidetree_);
  }
  _impl_.slidetree_ = slidetree;
  if (slidetree) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ShowArchive.slideTree)
}
inline ::KN::SlideTreeArchive* ShowArchive::release_slidetree() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::KN::SlideTreeArchive* temp = _impl_.slidetree_;
  _impl_.slidetree_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::SlideTreeArchive* ShowArchive::unsafe_arena_release_slidetree() {
  // @@protoc_insertion_point(field_release:KN.ShowArchive.slideTree)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::KN::SlideTreeArchive* temp = _impl_.slidetree_;
  _impl_.slidetree_ = nullptr;
  return temp;
}
inline ::KN::SlideTreeArchive* ShowArchive::_internal_mutable_slidetree() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.slidetree_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::SlideTreeArchive>(GetArenaForAllocation());
    _impl_.slidetree_ = p;
  }
  return _impl_.slidetree_;
}
inline ::KN::SlideTreeArchive* ShowArchive::mutable_slidetree() {
  ::KN::SlideTreeArchive* _msg = _internal_mutable_slidetree();
  // @@protoc_insertion_point(field_mutable:KN.ShowArchive.slideTree)
  return _msg;
}
inline void ShowArchive::set_allocated_slidetree(::KN::SlideTreeArchive* slidetree) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.slidetree_;
  }
  if (slidetree) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(slidetree);
    if (message_arena != submessage_arena) {
      slidetree = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slidetree, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.slidetree_ = slidetree;
  // @@protoc_insertion_point(field_set_allocated:KN.ShowArchive.slideTree)
}

// required .TSP.Size size = 4;
inline bool ShowArchive::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.size_ != nullptr);
  return value;
}
inline bool ShowArchive::has_size() const {
  return _internal_has_size();
}
inline const ::TSP::Size& ShowArchive::_internal_size() const {
  const ::TSP::Size* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& ShowArchive::size() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.size)
  return _internal_size();
}
inline void ShowArchive::unsafe_arena_set_allocated_size(
    ::TSP::Size* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = size;
  if (size) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ShowArchive.size)
}
inline ::TSP::Size* ShowArchive::release_size() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Size* temp = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Size* ShowArchive::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:KN.ShowArchive.size)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Size* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::TSP::Size* ShowArchive::_internal_mutable_size() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArenaForAllocation());
    _impl_.size_ = p;
  }
  return _impl_.size_;
}
inline ::TSP::Size* ShowArchive::mutable_size() {
  ::TSP::Size* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:KN.ShowArchive.size)
  return _msg;
}
inline void ShowArchive::set_allocated_size(::TSP::Size* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size));
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.size_ = size;
  // @@protoc_insertion_point(field_set_allocated:KN.ShowArchive.size)
}

// required .TSP.Reference stylesheet = 5;
inline bool ShowArchive::_internal_has_stylesheet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stylesheet_ != nullptr);
  return value;
}
inline bool ShowArchive::has_stylesheet() const {
  return _internal_has_stylesheet();
}
inline const ::TSP::Reference& ShowArchive::_internal_stylesheet() const {
  const ::TSP::Reference* p = _impl_.stylesheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ShowArchive::stylesheet() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.stylesheet)
  return _internal_stylesheet();
}
inline void ShowArchive::unsafe_arena_set_allocated_stylesheet(
    ::TSP::Reference* stylesheet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stylesheet_);
  }
  _impl_.stylesheet_ = stylesheet;
  if (stylesheet) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ShowArchive.stylesheet)
}
inline ::TSP::Reference* ShowArchive::release_stylesheet() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.stylesheet_;
  _impl_.stylesheet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ShowArchive::unsafe_arena_release_stylesheet() {
  // @@protoc_insertion_point(field_release:KN.ShowArchive.stylesheet)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.stylesheet_;
  _impl_.stylesheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ShowArchive::_internal_mutable_stylesheet() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.stylesheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.stylesheet_ = p;
  }
  return _impl_.stylesheet_;
}
inline ::TSP::Reference* ShowArchive::mutable_stylesheet() {
  ::TSP::Reference* _msg = _internal_mutable_stylesheet();
  // @@protoc_insertion_point(field_mutable:KN.ShowArchive.stylesheet)
  return _msg;
}
inline void ShowArchive::set_allocated_stylesheet(::TSP::Reference* stylesheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stylesheet_);
  }
  if (stylesheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stylesheet));
    if (message_arena != submessage_arena) {
      stylesheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stylesheet, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.stylesheet_ = stylesheet;
  // @@protoc_insertion_point(field_set_allocated:KN.ShowArchive.stylesheet)
}

// optional bool slideNumbersVisible = 6;
inline bool ShowArchive::_internal_has_slidenumbersvisible() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ShowArchive::has_slidenumbersvisible() const {
  return _internal_has_slidenumbersvisible();
}
inline void ShowArchive::clear_slidenumbersvisible() {
  _impl_.slidenumbersvisible_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool ShowArchive::_internal_slidenumbersvisible() const {
  return _impl_.slidenumbersvisible_;
}
inline bool ShowArchive::slidenumbersvisible() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.slideNumbersVisible)
  return _internal_slidenumbersvisible();
}
inline void ShowArchive::_internal_set_slidenumbersvisible(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.slidenumbersvisible_ = value;
}
inline void ShowArchive::set_slidenumbersvisible(bool value) {
  _internal_set_slidenumbersvisible(value);
  // @@protoc_insertion_point(field_set:KN.ShowArchive.slideNumbersVisible)
}

// optional .TSP.Reference recording = 7;
inline bool ShowArchive::_internal_has_recording() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.recording_ != nullptr);
  return value;
}
inline bool ShowArchive::has_recording() const {
  return _internal_has_recording();
}
inline const ::TSP::Reference& ShowArchive::_internal_recording() const {
  const ::TSP::Reference* p = _impl_.recording_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ShowArchive::recording() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.recording)
  return _internal_recording();
}
inline void ShowArchive::unsafe_arena_set_allocated_recording(
    ::TSP::Reference* recording) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recording_);
  }
  _impl_.recording_ = recording;
  if (recording) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ShowArchive.recording)
}
inline ::TSP::Reference* ShowArchive::release_recording() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.recording_;
  _impl_.recording_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ShowArchive::unsafe_arena_release_recording() {
  // @@protoc_insertion_point(field_release:KN.ShowArchive.recording)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.recording_;
  _impl_.recording_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ShowArchive::_internal_mutable_recording() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.recording_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.recording_ = p;
  }
  return _impl_.recording_;
}
inline ::TSP::Reference* ShowArchive::mutable_recording() {
  ::TSP::Reference* _msg = _internal_mutable_recording();
  // @@protoc_insertion_point(field_mutable:KN.ShowArchive.recording)
  return _msg;
}
inline void ShowArchive::set_allocated_recording(::TSP::Reference* recording) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recording_);
  }
  if (recording) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recording));
    if (message_arena != submessage_arena) {
      recording = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recording, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.recording_ = recording;
  // @@protoc_insertion_point(field_set_allocated:KN.ShowArchive.recording)
}

// optional bool loop_presentation = 8;
inline bool ShowArchive::_internal_has_loop_presentation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ShowArchive::has_loop_presentation() const {
  return _internal_has_loop_presentation();
}
inline void ShowArchive::clear_loop_presentation() {
  _impl_.loop_presentation_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool ShowArchive::_internal_loop_presentation() const {
  return _impl_.loop_presentation_;
}
inline bool ShowArchive::loop_presentation() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.loop_presentation)
  return _internal_loop_presentation();
}
inline void ShowArchive::_internal_set_loop_presentation(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.loop_presentation_ = value;
}
inline void ShowArchive::set_loop_presentation(bool value) {
  _internal_set_loop_presentation(value);
  // @@protoc_insertion_point(field_set:KN.ShowArchive.loop_presentation)
}

// optional .KN.ShowArchive.KNShowMode mode = 9 [default = kKNShowModeNormal];
inline bool ShowArchive::_internal_has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ShowArchive::has_mode() const {
  return _internal_has_mode();
}
inline void ShowArchive::clear_mode() {
  _impl_.mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::KN::ShowArchive_KNShowMode ShowArchive::_internal_mode() const {
  return static_cast< ::KN::ShowArchive_KNShowMode >(_impl_.mode_);
}
inline ::KN::ShowArchive_KNShowMode ShowArchive::mode() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.mode)
  return _internal_mode();
}
inline void ShowArchive::_internal_set_mode(::KN::ShowArchive_KNShowMode value) {
  assert(::KN::ShowArchive_KNShowMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.mode_ = value;
}
inline void ShowArchive::set_mode(::KN::ShowArchive_KNShowMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:KN.ShowArchive.mode)
}

// optional double autoplay_transition_delay = 10 [default = 5];
inline bool ShowArchive::_internal_has_autoplay_transition_delay() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ShowArchive::has_autoplay_transition_delay() const {
  return _internal_has_autoplay_transition_delay();
}
inline void ShowArchive::clear_autoplay_transition_delay() {
  _impl_.autoplay_transition_delay_ = 5;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double ShowArchive::_internal_autoplay_transition_delay() const {
  return _impl_.autoplay_transition_delay_;
}
inline double ShowArchive::autoplay_transition_delay() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.autoplay_transition_delay)
  return _internal_autoplay_transition_delay();
}
inline void ShowArchive::_internal_set_autoplay_transition_delay(double value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.autoplay_transition_delay_ = value;
}
inline void ShowArchive::set_autoplay_transition_delay(double value) {
  _internal_set_autoplay_transition_delay(value);
  // @@protoc_insertion_point(field_set:KN.ShowArchive.autoplay_transition_delay)
}

// optional double autoplay_build_delay = 11 [default = 2];
inline bool ShowArchive::_internal_has_autoplay_build_delay() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ShowArchive::has_autoplay_build_delay() const {
  return _internal_has_autoplay_build_delay();
}
inline void ShowArchive::clear_autoplay_build_delay() {
  _impl_.autoplay_build_delay_ = 2;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double ShowArchive::_internal_autoplay_build_delay() const {
  return _impl_.autoplay_build_delay_;
}
inline double ShowArchive::autoplay_build_delay() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.autoplay_build_delay)
  return _internal_autoplay_build_delay();
}
inline void ShowArchive::_internal_set_autoplay_build_delay(double value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.autoplay_build_delay_ = value;
}
inline void ShowArchive::set_autoplay_build_delay(double value) {
  _internal_set_autoplay_build_delay(value);
  // @@protoc_insertion_point(field_set:KN.ShowArchive.autoplay_build_delay)
}

// optional bool idle_timer_active = 15;
inline bool ShowArchive::_internal_has_idle_timer_active() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ShowArchive::has_idle_timer_active() const {
  return _internal_has_idle_timer_active();
}
inline void ShowArchive::clear_idle_timer_active() {
  _impl_.idle_timer_active_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool ShowArchive::_internal_idle_timer_active() const {
  return _impl_.idle_timer_active_;
}
inline bool ShowArchive::idle_timer_active() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.idle_timer_active)
  return _internal_idle_timer_active();
}
inline void ShowArchive::_internal_set_idle_timer_active(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.idle_timer_active_ = value;
}
inline void ShowArchive::set_idle_timer_active(bool value) {
  _internal_set_idle_timer_active(value);
  // @@protoc_insertion_point(field_set:KN.ShowArchive.idle_timer_active)
}

// optional double idle_timer_delay = 16 [default = 900];
inline bool ShowArchive::_internal_has_idle_timer_delay() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ShowArchive::has_idle_timer_delay() const {
  return _internal_has_idle_timer_delay();
}
inline void ShowArchive::clear_idle_timer_delay() {
  _impl_.idle_timer_delay_ = 900;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double ShowArchive::_internal_idle_timer_delay() const {
  return _impl_.idle_timer_delay_;
}
inline double ShowArchive::idle_timer_delay() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.idle_timer_delay)
  return _internal_idle_timer_delay();
}
inline void ShowArchive::_internal_set_idle_timer_delay(double value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.idle_timer_delay_ = value;
}
inline void ShowArchive::set_idle_timer_delay(double value) {
  _internal_set_idle_timer_delay(value);
  // @@protoc_insertion_point(field_set:KN.ShowArchive.idle_timer_delay)
}

// optional .TSP.Reference soundtrack = 17;
inline bool ShowArchive::_internal_has_soundtrack() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.soundtrack_ != nullptr);
  return value;
}
inline bool ShowArchive::has_soundtrack() const {
  return _internal_has_soundtrack();
}
inline const ::TSP::Reference& ShowArchive::_internal_soundtrack() const {
  const ::TSP::Reference* p = _impl_.soundtrack_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ShowArchive::soundtrack() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.soundtrack)
  return _internal_soundtrack();
}
inline void ShowArchive::unsafe_arena_set_allocated_soundtrack(
    ::TSP::Reference* soundtrack) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.soundtrack_);
  }
  _impl_.soundtrack_ = soundtrack;
  if (soundtrack) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ShowArchive.soundtrack)
}
inline ::TSP::Reference* ShowArchive::release_soundtrack() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.soundtrack_;
  _impl_.soundtrack_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ShowArchive::unsafe_arena_release_soundtrack() {
  // @@protoc_insertion_point(field_release:KN.ShowArchive.soundtrack)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.soundtrack_;
  _impl_.soundtrack_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ShowArchive::_internal_mutable_soundtrack() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.soundtrack_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.soundtrack_ = p;
  }
  return _impl_.soundtrack_;
}
inline ::TSP::Reference* ShowArchive::mutable_soundtrack() {
  ::TSP::Reference* _msg = _internal_mutable_soundtrack();
  // @@protoc_insertion_point(field_mutable:KN.ShowArchive.soundtrack)
  return _msg;
}
inline void ShowArchive::set_allocated_soundtrack(::TSP::Reference* soundtrack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.soundtrack_);
  }
  if (soundtrack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soundtrack));
    if (message_arena != submessage_arena) {
      soundtrack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, soundtrack, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.soundtrack_ = soundtrack;
  // @@protoc_insertion_point(field_set_allocated:KN.ShowArchive.soundtrack)
}

// optional bool automatically_plays_upon_open = 18;
inline bool ShowArchive::_internal_has_automatically_plays_upon_open() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ShowArchive::has_automatically_plays_upon_open() const {
  return _internal_has_automatically_plays_upon_open();
}
inline void ShowArchive::clear_automatically_plays_upon_open() {
  _impl_.automatically_plays_upon_open_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool ShowArchive::_internal_automatically_plays_upon_open() const {
  return _impl_.automatically_plays_upon_open_;
}
inline bool ShowArchive::automatically_plays_upon_open() const {
  // @@protoc_insertion_point(field_get:KN.ShowArchive.automatically_plays_upon_open)
  return _internal_automatically_plays_upon_open();
}
inline void ShowArchive::_internal_set_automatically_plays_upon_open(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.automatically_plays_upon_open_ = value;
}
inline void ShowArchive::set_automatically_plays_upon_open(bool value) {
  _internal_set_automatically_plays_upon_open(value);
  // @@protoc_insertion_point(field_set:KN.ShowArchive.automatically_plays_upon_open)
}

// -------------------------------------------------------------------

// DocumentArchive

// required .TSA.DocumentArchive super = 3;
inline bool DocumentArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSA::DocumentArchive& DocumentArchive::_internal_super() const {
  const ::TSA::DocumentArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSA::DocumentArchive&>(
      ::TSA::_DocumentArchive_default_instance_);
}
inline const ::TSA::DocumentArchive& DocumentArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.DocumentArchive.super)
  return _internal_super();
}
inline void DocumentArchive::unsafe_arena_set_allocated_super(
    ::TSA::DocumentArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.DocumentArchive.super)
}
inline ::TSA::DocumentArchive* DocumentArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSA::DocumentArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSA::DocumentArchive* DocumentArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.DocumentArchive.super)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSA::DocumentArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSA::DocumentArchive* DocumentArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSA::DocumentArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSA::DocumentArchive* DocumentArchive::mutable_super() {
  ::TSA::DocumentArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.DocumentArchive.super)
  return _msg;
}
inline void DocumentArchive::set_allocated_super(::TSA::DocumentArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.DocumentArchive.super)
}

// required .TSP.Reference show = 2;
inline bool DocumentArchive::_internal_has_show() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.show_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_show() const {
  return _internal_has_show();
}
inline const ::TSP::Reference& DocumentArchive::_internal_show() const {
  const ::TSP::Reference* p = _impl_.show_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::show() const {
  // @@protoc_insertion_point(field_get:KN.DocumentArchive.show)
  return _internal_show();
}
inline void DocumentArchive::unsafe_arena_set_allocated_show(
    ::TSP::Reference* show) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.show_);
  }
  _impl_.show_ = show;
  if (show) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.DocumentArchive.show)
}
inline ::TSP::Reference* DocumentArchive::release_show() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.show_;
  _impl_.show_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_show() {
  // @@protoc_insertion_point(field_release:KN.DocumentArchive.show)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.show_;
  _impl_.show_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_show() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.show_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.show_ = p;
  }
  return _impl_.show_;
}
inline ::TSP::Reference* DocumentArchive::mutable_show() {
  ::TSP::Reference* _msg = _internal_mutable_show();
  // @@protoc_insertion_point(field_mutable:KN.DocumentArchive.show)
  return _msg;
}
inline void DocumentArchive::set_allocated_show(::TSP::Reference* show) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.show_);
  }
  if (show) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show));
    if (message_arena != submessage_arena) {
      show = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.show_ = show;
  // @@protoc_insertion_point(field_set_allocated:KN.DocumentArchive.show)
}

// optional .TSP.Reference tables_custom_format_list = 4;
inline bool DocumentArchive::_internal_has_tables_custom_format_list() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tables_custom_format_list_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_tables_custom_format_list() const {
  return _internal_has_tables_custom_format_list();
}
inline const ::TSP::Reference& DocumentArchive::_internal_tables_custom_format_list() const {
  const ::TSP::Reference* p = _impl_.tables_custom_format_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::tables_custom_format_list() const {
  // @@protoc_insertion_point(field_get:KN.DocumentArchive.tables_custom_format_list)
  return _internal_tables_custom_format_list();
}
inline void DocumentArchive::unsafe_arena_set_allocated_tables_custom_format_list(
    ::TSP::Reference* tables_custom_format_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tables_custom_format_list_);
  }
  _impl_.tables_custom_format_list_ = tables_custom_format_list;
  if (tables_custom_format_list) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.DocumentArchive.tables_custom_format_list)
}
inline ::TSP::Reference* DocumentArchive::release_tables_custom_format_list() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.tables_custom_format_list_;
  _impl_.tables_custom_format_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_tables_custom_format_list() {
  // @@protoc_insertion_point(field_release:KN.DocumentArchive.tables_custom_format_list)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.tables_custom_format_list_;
  _impl_.tables_custom_format_list_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_tables_custom_format_list() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.tables_custom_format_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.tables_custom_format_list_ = p;
  }
  return _impl_.tables_custom_format_list_;
}
inline ::TSP::Reference* DocumentArchive::mutable_tables_custom_format_list() {
  ::TSP::Reference* _msg = _internal_mutable_tables_custom_format_list();
  // @@protoc_insertion_point(field_mutable:KN.DocumentArchive.tables_custom_format_list)
  return _msg;
}
inline void DocumentArchive::set_allocated_tables_custom_format_list(::TSP::Reference* tables_custom_format_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tables_custom_format_list_);
  }
  if (tables_custom_format_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tables_custom_format_list));
    if (message_arena != submessage_arena) {
      tables_custom_format_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tables_custom_format_list, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.tables_custom_format_list_ = tables_custom_format_list;
  // @@protoc_insertion_point(field_set_allocated:KN.DocumentArchive.tables_custom_format_list)
}

// -------------------------------------------------------------------

// SlideStylePropertiesArchive

// optional .TSD.FillArchive fill = 1;
inline bool SlideStylePropertiesArchive::_internal_has_fill() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fill_ != nullptr);
  return value;
}
inline bool SlideStylePropertiesArchive::has_fill() const {
  return _internal_has_fill();
}
inline const ::TSD::FillArchive& SlideStylePropertiesArchive::_internal_fill() const {
  const ::TSD::FillArchive* p = _impl_.fill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& SlideStylePropertiesArchive::fill() const {
  // @@protoc_insertion_point(field_get:KN.SlideStylePropertiesArchive.fill)
  return _internal_fill();
}
inline void SlideStylePropertiesArchive::unsafe_arena_set_allocated_fill(
    ::TSD::FillArchive* fill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fill_);
  }
  _impl_.fill_ = fill;
  if (fill) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideStylePropertiesArchive.fill)
}
inline ::TSD::FillArchive* SlideStylePropertiesArchive::release_fill() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSD::FillArchive* temp = _impl_.fill_;
  _impl_.fill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* SlideStylePropertiesArchive::unsafe_arena_release_fill() {
  // @@protoc_insertion_point(field_release:KN.SlideStylePropertiesArchive.fill)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSD::FillArchive* temp = _impl_.fill_;
  _impl_.fill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* SlideStylePropertiesArchive::_internal_mutable_fill() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.fill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    _impl_.fill_ = p;
  }
  return _impl_.fill_;
}
inline ::TSD::FillArchive* SlideStylePropertiesArchive::mutable_fill() {
  ::TSD::FillArchive* _msg = _internal_mutable_fill();
  // @@protoc_insertion_point(field_mutable:KN.SlideStylePropertiesArchive.fill)
  return _msg;
}
inline void SlideStylePropertiesArchive::set_allocated_fill(::TSD::FillArchive* fill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fill_);
  }
  if (fill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fill));
    if (message_arena != submessage_arena) {
      fill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fill, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.fill_ = fill;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideStylePropertiesArchive.fill)
}

// optional .KN.TransitionAttributesArchive transition = 2;
inline bool SlideStylePropertiesArchive::_internal_has_transition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transition_ != nullptr);
  return value;
}
inline bool SlideStylePropertiesArchive::has_transition() const {
  return _internal_has_transition();
}
inline void SlideStylePropertiesArchive::clear_transition() {
  if (_impl_.transition_ != nullptr) _impl_.transition_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::KN::TransitionAttributesArchive& SlideStylePropertiesArchive::_internal_transition() const {
  const ::KN::TransitionAttributesArchive* p = _impl_.transition_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::TransitionAttributesArchive&>(
      ::KN::_TransitionAttributesArchive_default_instance_);
}
inline const ::KN::TransitionAttributesArchive& SlideStylePropertiesArchive::transition() const {
  // @@protoc_insertion_point(field_get:KN.SlideStylePropertiesArchive.transition)
  return _internal_transition();
}
inline void SlideStylePropertiesArchive::unsafe_arena_set_allocated_transition(
    ::KN::TransitionAttributesArchive* transition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transition_);
  }
  _impl_.transition_ = transition;
  if (transition) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideStylePropertiesArchive.transition)
}
inline ::KN::TransitionAttributesArchive* SlideStylePropertiesArchive::release_transition() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::KN::TransitionAttributesArchive* temp = _impl_.transition_;
  _impl_.transition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::TransitionAttributesArchive* SlideStylePropertiesArchive::unsafe_arena_release_transition() {
  // @@protoc_insertion_point(field_release:KN.SlideStylePropertiesArchive.transition)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::KN::TransitionAttributesArchive* temp = _impl_.transition_;
  _impl_.transition_ = nullptr;
  return temp;
}
inline ::KN::TransitionAttributesArchive* SlideStylePropertiesArchive::_internal_mutable_transition() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.transition_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::TransitionAttributesArchive>(GetArenaForAllocation());
    _impl_.transition_ = p;
  }
  return _impl_.transition_;
}
inline ::KN::TransitionAttributesArchive* SlideStylePropertiesArchive::mutable_transition() {
  ::KN::TransitionAttributesArchive* _msg = _internal_mutable_transition();
  // @@protoc_insertion_point(field_mutable:KN.SlideStylePropertiesArchive.transition)
  return _msg;
}
inline void SlideStylePropertiesArchive::set_allocated_transition(::KN::TransitionAttributesArchive* transition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transition_;
  }
  if (transition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transition);
    if (message_arena != submessage_arena) {
      transition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transition, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.transition_ = transition;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideStylePropertiesArchive.transition)
}

// optional bool transition_null = 3;
inline bool SlideStylePropertiesArchive::_internal_has_transition_null() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SlideStylePropertiesArchive::has_transition_null() const {
  return _internal_has_transition_null();
}
inline void SlideStylePropertiesArchive::clear_transition_null() {
  _impl_.transition_null_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool SlideStylePropertiesArchive::_internal_transition_null() const {
  return _impl_.transition_null_;
}
inline bool SlideStylePropertiesArchive::transition_null() const {
  // @@protoc_insertion_point(field_get:KN.SlideStylePropertiesArchive.transition_null)
  return _internal_transition_null();
}
inline void SlideStylePropertiesArchive::_internal_set_transition_null(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.transition_null_ = value;
}
inline void SlideStylePropertiesArchive::set_transition_null(bool value) {
  _internal_set_transition_null(value);
  // @@protoc_insertion_point(field_set:KN.SlideStylePropertiesArchive.transition_null)
}

// optional bool titlePlaceholderVisibility = 4;
inline bool SlideStylePropertiesArchive::_internal_has_titleplaceholdervisibility() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SlideStylePropertiesArchive::has_titleplaceholdervisibility() const {
  return _internal_has_titleplaceholdervisibility();
}
inline void SlideStylePropertiesArchive::clear_titleplaceholdervisibility() {
  _impl_.titleplaceholdervisibility_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool SlideStylePropertiesArchive::_internal_titleplaceholdervisibility() const {
  return _impl_.titleplaceholdervisibility_;
}
inline bool SlideStylePropertiesArchive::titleplaceholdervisibility() const {
  // @@protoc_insertion_point(field_get:KN.SlideStylePropertiesArchive.titlePlaceholderVisibility)
  return _internal_titleplaceholdervisibility();
}
inline void SlideStylePropertiesArchive::_internal_set_titleplaceholdervisibility(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.titleplaceholdervisibility_ = value;
}
inline void SlideStylePropertiesArchive::set_titleplaceholdervisibility(bool value) {
  _internal_set_titleplaceholdervisibility(value);
  // @@protoc_insertion_point(field_set:KN.SlideStylePropertiesArchive.titlePlaceholderVisibility)
}

// optional bool bodyPlaceholderVisibility = 5;
inline bool SlideStylePropertiesArchive::_internal_has_bodyplaceholdervisibility() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SlideStylePropertiesArchive::has_bodyplaceholdervisibility() const {
  return _internal_has_bodyplaceholdervisibility();
}
inline void SlideStylePropertiesArchive::clear_bodyplaceholdervisibility() {
  _impl_.bodyplaceholdervisibility_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool SlideStylePropertiesArchive::_internal_bodyplaceholdervisibility() const {
  return _impl_.bodyplaceholdervisibility_;
}
inline bool SlideStylePropertiesArchive::bodyplaceholdervisibility() const {
  // @@protoc_insertion_point(field_get:KN.SlideStylePropertiesArchive.bodyPlaceholderVisibility)
  return _internal_bodyplaceholdervisibility();
}
inline void SlideStylePropertiesArchive::_internal_set_bodyplaceholdervisibility(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.bodyplaceholdervisibility_ = value;
}
inline void SlideStylePropertiesArchive::set_bodyplaceholdervisibility(bool value) {
  _internal_set_bodyplaceholdervisibility(value);
  // @@protoc_insertion_point(field_set:KN.SlideStylePropertiesArchive.bodyPlaceholderVisibility)
}

// optional bool objectPlaceholderVisibility = 7;
inline bool SlideStylePropertiesArchive::_internal_has_objectplaceholdervisibility() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SlideStylePropertiesArchive::has_objectplaceholdervisibility() const {
  return _internal_has_objectplaceholdervisibility();
}
inline void SlideStylePropertiesArchive::clear_objectplaceholdervisibility() {
  _impl_.objectplaceholdervisibility_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool SlideStylePropertiesArchive::_internal_objectplaceholdervisibility() const {
  return _impl_.objectplaceholdervisibility_;
}
inline bool SlideStylePropertiesArchive::objectplaceholdervisibility() const {
  // @@protoc_insertion_point(field_get:KN.SlideStylePropertiesArchive.objectPlaceholderVisibility)
  return _internal_objectplaceholdervisibility();
}
inline void SlideStylePropertiesArchive::_internal_set_objectplaceholdervisibility(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.objectplaceholdervisibility_ = value;
}
inline void SlideStylePropertiesArchive::set_objectplaceholdervisibility(bool value) {
  _internal_set_objectplaceholdervisibility(value);
  // @@protoc_insertion_point(field_set:KN.SlideStylePropertiesArchive.objectPlaceholderVisibility)
}

// optional bool slideNumberPlaceholderVisibility = 6;
inline bool SlideStylePropertiesArchive::_internal_has_slidenumberplaceholdervisibility() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SlideStylePropertiesArchive::has_slidenumberplaceholdervisibility() const {
  return _internal_has_slidenumberplaceholdervisibility();
}
inline void SlideStylePropertiesArchive::clear_slidenumberplaceholdervisibility() {
  _impl_.slidenumberplaceholdervisibility_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool SlideStylePropertiesArchive::_internal_slidenumberplaceholdervisibility() const {
  return _impl_.slidenumberplaceholdervisibility_;
}
inline bool SlideStylePropertiesArchive::slidenumberplaceholdervisibility() const {
  // @@protoc_insertion_point(field_get:KN.SlideStylePropertiesArchive.slideNumberPlaceholderVisibility)
  return _internal_slidenumberplaceholdervisibility();
}
inline void SlideStylePropertiesArchive::_internal_set_slidenumberplaceholdervisibility(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.slidenumberplaceholdervisibility_ = value;
}
inline void SlideStylePropertiesArchive::set_slidenumberplaceholdervisibility(bool value) {
  _internal_set_slidenumberplaceholdervisibility(value);
  // @@protoc_insertion_point(field_set:KN.SlideStylePropertiesArchive.slideNumberPlaceholderVisibility)
}

// -------------------------------------------------------------------

// SlideStyleArchive

// required .TSS.StyleArchive super = 1;
inline bool SlideStyleArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool SlideStyleArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::StyleArchive& SlideStyleArchive::_internal_super() const {
  const ::TSS::StyleArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::StyleArchive&>(
      ::TSS::_StyleArchive_default_instance_);
}
inline const ::TSS::StyleArchive& SlideStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.SlideStyleArchive.super)
  return _internal_super();
}
inline void SlideStyleArchive::unsafe_arena_set_allocated_super(
    ::TSS::StyleArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideStyleArchive.super)
}
inline ::TSS::StyleArchive* SlideStyleArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSS::StyleArchive* SlideStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.SlideStyleArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSS::StyleArchive* SlideStyleArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::StyleArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSS::StyleArchive* SlideStyleArchive::mutable_super() {
  ::TSS::StyleArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.SlideStyleArchive.super)
  return _msg;
}
inline void SlideStyleArchive::set_allocated_super(::TSS::StyleArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideStyleArchive.super)
}

// optional uint32 override_count = 10 [default = 0];
inline bool SlideStyleArchive::_internal_has_override_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SlideStyleArchive::has_override_count() const {
  return _internal_has_override_count();
}
inline void SlideStyleArchive::clear_override_count() {
  _impl_.override_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t SlideStyleArchive::_internal_override_count() const {
  return _impl_.override_count_;
}
inline uint32_t SlideStyleArchive::override_count() const {
  // @@protoc_insertion_point(field_get:KN.SlideStyleArchive.override_count)
  return _internal_override_count();
}
inline void SlideStyleArchive::_internal_set_override_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.override_count_ = value;
}
inline void SlideStyleArchive::set_override_count(uint32_t value) {
  _internal_set_override_count(value);
  // @@protoc_insertion_point(field_set:KN.SlideStyleArchive.override_count)
}

// optional .KN.SlideStylePropertiesArchive slide_properties = 11;
inline bool SlideStyleArchive::_internal_has_slide_properties() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slide_properties_ != nullptr);
  return value;
}
inline bool SlideStyleArchive::has_slide_properties() const {
  return _internal_has_slide_properties();
}
inline void SlideStyleArchive::clear_slide_properties() {
  if (_impl_.slide_properties_ != nullptr) _impl_.slide_properties_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::KN::SlideStylePropertiesArchive& SlideStyleArchive::_internal_slide_properties() const {
  const ::KN::SlideStylePropertiesArchive* p = _impl_.slide_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::SlideStylePropertiesArchive&>(
      ::KN::_SlideStylePropertiesArchive_default_instance_);
}
inline const ::KN::SlideStylePropertiesArchive& SlideStyleArchive::slide_properties() const {
  // @@protoc_insertion_point(field_get:KN.SlideStyleArchive.slide_properties)
  return _internal_slide_properties();
}
inline void SlideStyleArchive::unsafe_arena_set_allocated_slide_properties(
    ::KN::SlideStylePropertiesArchive* slide_properties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_properties_);
  }
  _impl_.slide_properties_ = slide_properties;
  if (slide_properties) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideStyleArchive.slide_properties)
}
inline ::KN::SlideStylePropertiesArchive* SlideStyleArchive::release_slide_properties() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::KN::SlideStylePropertiesArchive* temp = _impl_.slide_properties_;
  _impl_.slide_properties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::SlideStylePropertiesArchive* SlideStyleArchive::unsafe_arena_release_slide_properties() {
  // @@protoc_insertion_point(field_release:KN.SlideStyleArchive.slide_properties)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::KN::SlideStylePropertiesArchive* temp = _impl_.slide_properties_;
  _impl_.slide_properties_ = nullptr;
  return temp;
}
inline ::KN::SlideStylePropertiesArchive* SlideStyleArchive::_internal_mutable_slide_properties() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.slide_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::SlideStylePropertiesArchive>(GetArenaForAllocation());
    _impl_.slide_properties_ = p;
  }
  return _impl_.slide_properties_;
}
inline ::KN::SlideStylePropertiesArchive* SlideStyleArchive::mutable_slide_properties() {
  ::KN::SlideStylePropertiesArchive* _msg = _internal_mutable_slide_properties();
  // @@protoc_insertion_point(field_mutable:KN.SlideStyleArchive.slide_properties)
  return _msg;
}
inline void SlideStyleArchive::set_allocated_slide_properties(::KN::SlideStylePropertiesArchive* slide_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.slide_properties_;
  }
  if (slide_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(slide_properties);
    if (message_arena != submessage_arena) {
      slide_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide_properties, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.slide_properties_ = slide_properties;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideStyleArchive.slide_properties)
}

// -------------------------------------------------------------------

// PasteboardNativeStorageArchive

// repeated .TSP.Reference drawables = 1;
inline int PasteboardNativeStorageArchive::_internal_drawables_size() const {
  return _impl_.drawables_.size();
}
inline int PasteboardNativeStorageArchive::drawables_size() const {
  return _internal_drawables_size();
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::mutable_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:KN.PasteboardNativeStorageArchive.drawables)
  return _impl_.drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
PasteboardNativeStorageArchive::mutable_drawables() {
  // @@protoc_insertion_point(field_mutable_list:KN.PasteboardNativeStorageArchive.drawables)
  return &_impl_.drawables_;
}
inline const ::TSP::Reference& PasteboardNativeStorageArchive::_internal_drawables(int index) const {
  return _impl_.drawables_.Get(index);
}
inline const ::TSP::Reference& PasteboardNativeStorageArchive::drawables(int index) const {
  // @@protoc_insertion_point(field_get:KN.PasteboardNativeStorageArchive.drawables)
  return _internal_drawables(index);
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::_internal_add_drawables() {
  return _impl_.drawables_.Add();
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::add_drawables() {
  ::TSP::Reference* _add = _internal_add_drawables();
  // @@protoc_insertion_point(field_add:KN.PasteboardNativeStorageArchive.drawables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
PasteboardNativeStorageArchive::drawables() const {
  // @@protoc_insertion_point(field_list:KN.PasteboardNativeStorageArchive.drawables)
  return _impl_.drawables_;
}

// repeated .TSP.Reference builds = 2;
inline int PasteboardNativeStorageArchive::_internal_builds_size() const {
  return _impl_.builds_.size();
}
inline int PasteboardNativeStorageArchive::builds_size() const {
  return _internal_builds_size();
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::mutable_builds(int index) {
  // @@protoc_insertion_point(field_mutable:KN.PasteboardNativeStorageArchive.builds)
  return _impl_.builds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
PasteboardNativeStorageArchive::mutable_builds() {
  // @@protoc_insertion_point(field_mutable_list:KN.PasteboardNativeStorageArchive.builds)
  return &_impl_.builds_;
}
inline const ::TSP::Reference& PasteboardNativeStorageArchive::_internal_builds(int index) const {
  return _impl_.builds_.Get(index);
}
inline const ::TSP::Reference& PasteboardNativeStorageArchive::builds(int index) const {
  // @@protoc_insertion_point(field_get:KN.PasteboardNativeStorageArchive.builds)
  return _internal_builds(index);
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::_internal_add_builds() {
  return _impl_.builds_.Add();
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::add_builds() {
  ::TSP::Reference* _add = _internal_add_builds();
  // @@protoc_insertion_point(field_add:KN.PasteboardNativeStorageArchive.builds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
PasteboardNativeStorageArchive::builds() const {
  // @@protoc_insertion_point(field_list:KN.PasteboardNativeStorageArchive.builds)
  return _impl_.builds_;
}

// repeated .KN.BuildChunkArchive buildChunks = 3;
inline int PasteboardNativeStorageArchive::_internal_buildchunks_size() const {
  return _impl_.buildchunks_.size();
}
inline int PasteboardNativeStorageArchive::buildchunks_size() const {
  return _internal_buildchunks_size();
}
inline void PasteboardNativeStorageArchive::clear_buildchunks() {
  _impl_.buildchunks_.Clear();
}
inline ::KN::BuildChunkArchive* PasteboardNativeStorageArchive::mutable_buildchunks(int index) {
  // @@protoc_insertion_point(field_mutable:KN.PasteboardNativeStorageArchive.buildChunks)
  return _impl_.buildchunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkArchive >*
PasteboardNativeStorageArchive::mutable_buildchunks() {
  // @@protoc_insertion_point(field_mutable_list:KN.PasteboardNativeStorageArchive.buildChunks)
  return &_impl_.buildchunks_;
}
inline const ::KN::BuildChunkArchive& PasteboardNativeStorageArchive::_internal_buildchunks(int index) const {
  return _impl_.buildchunks_.Get(index);
}
inline const ::KN::BuildChunkArchive& PasteboardNativeStorageArchive::buildchunks(int index) const {
  // @@protoc_insertion_point(field_get:KN.PasteboardNativeStorageArchive.buildChunks)
  return _internal_buildchunks(index);
}
inline ::KN::BuildChunkArchive* PasteboardNativeStorageArchive::_internal_add_buildchunks() {
  return _impl_.buildchunks_.Add();
}
inline ::KN::BuildChunkArchive* PasteboardNativeStorageArchive::add_buildchunks() {
  ::KN::BuildChunkArchive* _add = _internal_add_buildchunks();
  // @@protoc_insertion_point(field_add:KN.PasteboardNativeStorageArchive.buildChunks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkArchive >&
PasteboardNativeStorageArchive::buildchunks() const {
  // @@protoc_insertion_point(field_list:KN.PasteboardNativeStorageArchive.buildChunks)
  return _impl_.buildchunks_;
}

// repeated .TSP.Reference slideNodes = 4;
inline int PasteboardNativeStorageArchive::_internal_slidenodes_size() const {
  return _impl_.slidenodes_.size();
}
inline int PasteboardNativeStorageArchive::slidenodes_size() const {
  return _internal_slidenodes_size();
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::mutable_slidenodes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.PasteboardNativeStorageArchive.slideNodes)
  return _impl_.slidenodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
PasteboardNativeStorageArchive::mutable_slidenodes() {
  // @@protoc_insertion_point(field_mutable_list:KN.PasteboardNativeStorageArchive.slideNodes)
  return &_impl_.slidenodes_;
}
inline const ::TSP::Reference& PasteboardNativeStorageArchive::_internal_slidenodes(int index) const {
  return _impl_.slidenodes_.Get(index);
}
inline const ::TSP::Reference& PasteboardNativeStorageArchive::slidenodes(int index) const {
  // @@protoc_insertion_point(field_get:KN.PasteboardNativeStorageArchive.slideNodes)
  return _internal_slidenodes(index);
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::_internal_add_slidenodes() {
  return _impl_.slidenodes_.Add();
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::add_slidenodes() {
  ::TSP::Reference* _add = _internal_add_slidenodes();
  // @@protoc_insertion_point(field_add:KN.PasteboardNativeStorageArchive.slideNodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
PasteboardNativeStorageArchive::slidenodes() const {
  // @@protoc_insertion_point(field_list:KN.PasteboardNativeStorageArchive.slideNodes)
  return _impl_.slidenodes_;
}

// optional .TSP.Size originalShowSize = 5;
inline bool PasteboardNativeStorageArchive::_internal_has_originalshowsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.originalshowsize_ != nullptr);
  return value;
}
inline bool PasteboardNativeStorageArchive::has_originalshowsize() const {
  return _internal_has_originalshowsize();
}
inline const ::TSP::Size& PasteboardNativeStorageArchive::_internal_originalshowsize() const {
  const ::TSP::Size* p = _impl_.originalshowsize_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& PasteboardNativeStorageArchive::originalshowsize() const {
  // @@protoc_insertion_point(field_get:KN.PasteboardNativeStorageArchive.originalShowSize)
  return _internal_originalshowsize();
}
inline void PasteboardNativeStorageArchive::unsafe_arena_set_allocated_originalshowsize(
    ::TSP::Size* originalshowsize) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.originalshowsize_);
  }
  _impl_.originalshowsize_ = originalshowsize;
  if (originalshowsize) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.PasteboardNativeStorageArchive.originalShowSize)
}
inline ::TSP::Size* PasteboardNativeStorageArchive::release_originalshowsize() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Size* temp = _impl_.originalshowsize_;
  _impl_.originalshowsize_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Size* PasteboardNativeStorageArchive::unsafe_arena_release_originalshowsize() {
  // @@protoc_insertion_point(field_release:KN.PasteboardNativeStorageArchive.originalShowSize)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Size* temp = _impl_.originalshowsize_;
  _impl_.originalshowsize_ = nullptr;
  return temp;
}
inline ::TSP::Size* PasteboardNativeStorageArchive::_internal_mutable_originalshowsize() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.originalshowsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArenaForAllocation());
    _impl_.originalshowsize_ = p;
  }
  return _impl_.originalshowsize_;
}
inline ::TSP::Size* PasteboardNativeStorageArchive::mutable_originalshowsize() {
  ::TSP::Size* _msg = _internal_mutable_originalshowsize();
  // @@protoc_insertion_point(field_mutable:KN.PasteboardNativeStorageArchive.originalShowSize)
  return _msg;
}
inline void PasteboardNativeStorageArchive::set_allocated_originalshowsize(::TSP::Size* originalshowsize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.originalshowsize_);
  }
  if (originalshowsize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(originalshowsize));
    if (message_arena != submessage_arena) {
      originalshowsize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, originalshowsize, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.originalshowsize_ = originalshowsize;
  // @@protoc_insertion_point(field_set_allocated:KN.PasteboardNativeStorageArchive.originalShowSize)
}

// repeated .TSP.Range titleRanges = 6;
inline int PasteboardNativeStorageArchive::_internal_titleranges_size() const {
  return _impl_.titleranges_.size();
}
inline int PasteboardNativeStorageArchive::titleranges_size() const {
  return _internal_titleranges_size();
}
inline ::TSP::Range* PasteboardNativeStorageArchive::mutable_titleranges(int index) {
  // @@protoc_insertion_point(field_mutable:KN.PasteboardNativeStorageArchive.titleRanges)
  return _impl_.titleranges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >*
PasteboardNativeStorageArchive::mutable_titleranges() {
  // @@protoc_insertion_point(field_mutable_list:KN.PasteboardNativeStorageArchive.titleRanges)
  return &_impl_.titleranges_;
}
inline const ::TSP::Range& PasteboardNativeStorageArchive::_internal_titleranges(int index) const {
  return _impl_.titleranges_.Get(index);
}
inline const ::TSP::Range& PasteboardNativeStorageArchive::titleranges(int index) const {
  // @@protoc_insertion_point(field_get:KN.PasteboardNativeStorageArchive.titleRanges)
  return _internal_titleranges(index);
}
inline ::TSP::Range* PasteboardNativeStorageArchive::_internal_add_titleranges() {
  return _impl_.titleranges_.Add();
}
inline ::TSP::Range* PasteboardNativeStorageArchive::add_titleranges() {
  ::TSP::Range* _add = _internal_add_titleranges();
  // @@protoc_insertion_point(field_add:KN.PasteboardNativeStorageArchive.titleRanges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >&
PasteboardNativeStorageArchive::titleranges() const {
  // @@protoc_insertion_point(field_list:KN.PasteboardNativeStorageArchive.titleRanges)
  return _impl_.titleranges_;
}

// -------------------------------------------------------------------

// MasterChangeBlobArchive

// optional .TSP.Reference slide = 1;
inline bool MasterChangeBlobArchive::_internal_has_slide() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slide_ != nullptr);
  return value;
}
inline bool MasterChangeBlobArchive::has_slide() const {
  return _internal_has_slide();
}
inline const ::TSP::Reference& MasterChangeBlobArchive::_internal_slide() const {
  const ::TSP::Reference* p = _impl_.slide_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& MasterChangeBlobArchive::slide() const {
  // @@protoc_insertion_point(field_get:KN.MasterChangeBlobArchive.slide)
  return _internal_slide();
}
inline void MasterChangeBlobArchive::unsafe_arena_set_allocated_slide(
    ::TSP::Reference* slide) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_);
  }
  _impl_.slide_ = slide;
  if (slide) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.MasterChangeBlobArchive.slide)
}
inline ::TSP::Reference* MasterChangeBlobArchive::release_slide() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.slide_;
  _impl_.slide_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* MasterChangeBlobArchive::unsafe_arena_release_slide() {
  // @@protoc_insertion_point(field_release:KN.MasterChangeBlobArchive.slide)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.slide_;
  _impl_.slide_ = nullptr;
  return temp;
}
inline ::TSP::Reference* MasterChangeBlobArchive::_internal_mutable_slide() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.slide_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.slide_ = p;
  }
  return _impl_.slide_;
}
inline ::TSP::Reference* MasterChangeBlobArchive::mutable_slide() {
  ::TSP::Reference* _msg = _internal_mutable_slide();
  // @@protoc_insertion_point(field_mutable:KN.MasterChangeBlobArchive.slide)
  return _msg;
}
inline void MasterChangeBlobArchive::set_allocated_slide(::TSP::Reference* slide) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_);
  }
  if (slide) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide));
    if (message_arena != submessage_arena) {
      slide = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.slide_ = slide;
  // @@protoc_insertion_point(field_set_allocated:KN.MasterChangeBlobArchive.slide)
}

// optional .TSP.Reference master = 2;
inline bool MasterChangeBlobArchive::_internal_has_master() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.master_ != nullptr);
  return value;
}
inline bool MasterChangeBlobArchive::has_master() const {
  return _internal_has_master();
}
inline const ::TSP::Reference& MasterChangeBlobArchive::_internal_master() const {
  const ::TSP::Reference* p = _impl_.master_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& MasterChangeBlobArchive::master() const {
  // @@protoc_insertion_point(field_get:KN.MasterChangeBlobArchive.master)
  return _internal_master();
}
inline void MasterChangeBlobArchive::unsafe_arena_set_allocated_master(
    ::TSP::Reference* master) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.master_);
  }
  _impl_.master_ = master;
  if (master) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.MasterChangeBlobArchive.master)
}
inline ::TSP::Reference* MasterChangeBlobArchive::release_master() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.master_;
  _impl_.master_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* MasterChangeBlobArchive::unsafe_arena_release_master() {
  // @@protoc_insertion_point(field_release:KN.MasterChangeBlobArchive.master)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.master_;
  _impl_.master_ = nullptr;
  return temp;
}
inline ::TSP::Reference* MasterChangeBlobArchive::_internal_mutable_master() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.master_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.master_ = p;
  }
  return _impl_.master_;
}
inline ::TSP::Reference* MasterChangeBlobArchive::mutable_master() {
  ::TSP::Reference* _msg = _internal_mutable_master();
  // @@protoc_insertion_point(field_mutable:KN.MasterChangeBlobArchive.master)
  return _msg;
}
inline void MasterChangeBlobArchive::set_allocated_master(::TSP::Reference* master) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.master_);
  }
  if (master) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(master));
    if (message_arena != submessage_arena) {
      master = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, master, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.master_ = master;
  // @@protoc_insertion_point(field_set_allocated:KN.MasterChangeBlobArchive.master)
}

// optional .TSP.Reference slide_style = 3;
inline bool MasterChangeBlobArchive::_internal_has_slide_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slide_style_ != nullptr);
  return value;
}
inline bool MasterChangeBlobArchive::has_slide_style() const {
  return _internal_has_slide_style();
}
inline const ::TSP::Reference& MasterChangeBlobArchive::_internal_slide_style() const {
  const ::TSP::Reference* p = _impl_.slide_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& MasterChangeBlobArchive::slide_style() const {
  // @@protoc_insertion_point(field_get:KN.MasterChangeBlobArchive.slide_style)
  return _internal_slide_style();
}
inline void MasterChangeBlobArchive::unsafe_arena_set_allocated_slide_style(
    ::TSP::Reference* slide_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_style_);
  }
  _impl_.slide_style_ = slide_style;
  if (slide_style) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.MasterChangeBlobArchive.slide_style)
}
inline ::TSP::Reference* MasterChangeBlobArchive::release_slide_style() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.slide_style_;
  _impl_.slide_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* MasterChangeBlobArchive::unsafe_arena_release_slide_style() {
  // @@protoc_insertion_point(field_release:KN.MasterChangeBlobArchive.slide_style)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.slide_style_;
  _impl_.slide_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* MasterChangeBlobArchive::_internal_mutable_slide_style() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.slide_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.slide_style_ = p;
  }
  return _impl_.slide_style_;
}
inline ::TSP::Reference* MasterChangeBlobArchive::mutable_slide_style() {
  ::TSP::Reference* _msg = _internal_mutable_slide_style();
  // @@protoc_insertion_point(field_mutable:KN.MasterChangeBlobArchive.slide_style)
  return _msg;
}
inline void MasterChangeBlobArchive::set_allocated_slide_style(::TSP::Reference* slide_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_style_);
  }
  if (slide_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_style));
    if (message_arena != submessage_arena) {
      slide_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.slide_style_ = slide_style;
  // @@protoc_insertion_point(field_set_allocated:KN.MasterChangeBlobArchive.slide_style)
}

// optional .TSP.Reference title_placeholder = 4;
inline bool MasterChangeBlobArchive::_internal_has_title_placeholder() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.title_placeholder_ != nullptr);
  return value;
}
inline bool MasterChangeBlobArchive::has_title_placeholder() const {
  return _internal_has_title_placeholder();
}
inline const ::TSP::Reference& MasterChangeBlobArchive::_internal_title_placeholder() const {
  const ::TSP::Reference* p = _impl_.title_placeholder_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& MasterChangeBlobArchive::title_placeholder() const {
  // @@protoc_insertion_point(field_get:KN.MasterChangeBlobArchive.title_placeholder)
  return _internal_title_placeholder();
}
inline void MasterChangeBlobArchive::unsafe_arena_set_allocated_title_placeholder(
    ::TSP::Reference* title_placeholder) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.title_placeholder_);
  }
  _impl_.title_placeholder_ = title_placeholder;
  if (title_placeholder) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.MasterChangeBlobArchive.title_placeholder)
}
inline ::TSP::Reference* MasterChangeBlobArchive::release_title_placeholder() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.title_placeholder_;
  _impl_.title_placeholder_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* MasterChangeBlobArchive::unsafe_arena_release_title_placeholder() {
  // @@protoc_insertion_point(field_release:KN.MasterChangeBlobArchive.title_placeholder)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.title_placeholder_;
  _impl_.title_placeholder_ = nullptr;
  return temp;
}
inline ::TSP::Reference* MasterChangeBlobArchive::_internal_mutable_title_placeholder() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.title_placeholder_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.title_placeholder_ = p;
  }
  return _impl_.title_placeholder_;
}
inline ::TSP::Reference* MasterChangeBlobArchive::mutable_title_placeholder() {
  ::TSP::Reference* _msg = _internal_mutable_title_placeholder();
  // @@protoc_insertion_point(field_mutable:KN.MasterChangeBlobArchive.title_placeholder)
  return _msg;
}
inline void MasterChangeBlobArchive::set_allocated_title_placeholder(::TSP::Reference* title_placeholder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.title_placeholder_);
  }
  if (title_placeholder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(title_placeholder));
    if (message_arena != submessage_arena) {
      title_placeholder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, title_placeholder, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.title_placeholder_ = title_placeholder;
  // @@protoc_insertion_point(field_set_allocated:KN.MasterChangeBlobArchive.title_placeholder)
}

// optional .TSP.Reference body_placeholder = 5;
inline bool MasterChangeBlobArchive::_internal_has_body_placeholder() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.body_placeholder_ != nullptr);
  return value;
}
inline bool MasterChangeBlobArchive::has_body_placeholder() const {
  return _internal_has_body_placeholder();
}
inline const ::TSP::Reference& MasterChangeBlobArchive::_internal_body_placeholder() const {
  const ::TSP::Reference* p = _impl_.body_placeholder_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& MasterChangeBlobArchive::body_placeholder() const {
  // @@protoc_insertion_point(field_get:KN.MasterChangeBlobArchive.body_placeholder)
  return _internal_body_placeholder();
}
inline void MasterChangeBlobArchive::unsafe_arena_set_allocated_body_placeholder(
    ::TSP::Reference* body_placeholder) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_placeholder_);
  }
  _impl_.body_placeholder_ = body_placeholder;
  if (body_placeholder) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.MasterChangeBlobArchive.body_placeholder)
}
inline ::TSP::Reference* MasterChangeBlobArchive::release_body_placeholder() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.body_placeholder_;
  _impl_.body_placeholder_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* MasterChangeBlobArchive::unsafe_arena_release_body_placeholder() {
  // @@protoc_insertion_point(field_release:KN.MasterChangeBlobArchive.body_placeholder)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.body_placeholder_;
  _impl_.body_placeholder_ = nullptr;
  return temp;
}
inline ::TSP::Reference* MasterChangeBlobArchive::_internal_mutable_body_placeholder() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.body_placeholder_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.body_placeholder_ = p;
  }
  return _impl_.body_placeholder_;
}
inline ::TSP::Reference* MasterChangeBlobArchive::mutable_body_placeholder() {
  ::TSP::Reference* _msg = _internal_mutable_body_placeholder();
  // @@protoc_insertion_point(field_mutable:KN.MasterChangeBlobArchive.body_placeholder)
  return _msg;
}
inline void MasterChangeBlobArchive::set_allocated_body_placeholder(::TSP::Reference* body_placeholder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_placeholder_);
  }
  if (body_placeholder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_placeholder));
    if (message_arena != submessage_arena) {
      body_placeholder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body_placeholder, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.body_placeholder_ = body_placeholder;
  // @@protoc_insertion_point(field_set_allocated:KN.MasterChangeBlobArchive.body_placeholder)
}

// optional .TSP.Reference object_placeholder = 7;
inline bool MasterChangeBlobArchive::_internal_has_object_placeholder() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.object_placeholder_ != nullptr);
  return value;
}
inline bool MasterChangeBlobArchive::has_object_placeholder() const {
  return _internal_has_object_placeholder();
}
inline const ::TSP::Reference& MasterChangeBlobArchive::_internal_object_placeholder() const {
  const ::TSP::Reference* p = _impl_.object_placeholder_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& MasterChangeBlobArchive::object_placeholder() const {
  // @@protoc_insertion_point(field_get:KN.MasterChangeBlobArchive.object_placeholder)
  return _internal_object_placeholder();
}
inline void MasterChangeBlobArchive::unsafe_arena_set_allocated_object_placeholder(
    ::TSP::Reference* object_placeholder) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.object_placeholder_);
  }
  _impl_.object_placeholder_ = object_placeholder;
  if (object_placeholder) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.MasterChangeBlobArchive.object_placeholder)
}
inline ::TSP::Reference* MasterChangeBlobArchive::release_object_placeholder() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.object_placeholder_;
  _impl_.object_placeholder_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* MasterChangeBlobArchive::unsafe_arena_release_object_placeholder() {
  // @@protoc_insertion_point(field_release:KN.MasterChangeBlobArchive.object_placeholder)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.object_placeholder_;
  _impl_.object_placeholder_ = nullptr;
  return temp;
}
inline ::TSP::Reference* MasterChangeBlobArchive::_internal_mutable_object_placeholder() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.object_placeholder_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.object_placeholder_ = p;
  }
  return _impl_.object_placeholder_;
}
inline ::TSP::Reference* MasterChangeBlobArchive::mutable_object_placeholder() {
  ::TSP::Reference* _msg = _internal_mutable_object_placeholder();
  // @@protoc_insertion_point(field_mutable:KN.MasterChangeBlobArchive.object_placeholder)
  return _msg;
}
inline void MasterChangeBlobArchive::set_allocated_object_placeholder(::TSP::Reference* object_placeholder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.object_placeholder_);
  }
  if (object_placeholder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_placeholder));
    if (message_arena != submessage_arena) {
      object_placeholder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_placeholder, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.object_placeholder_ = object_placeholder;
  // @@protoc_insertion_point(field_set_allocated:KN.MasterChangeBlobArchive.object_placeholder)
}

// repeated .TSP.Reference drawables = 6;
inline int MasterChangeBlobArchive::_internal_drawables_size() const {
  return _impl_.drawables_.size();
}
inline int MasterChangeBlobArchive::drawables_size() const {
  return _internal_drawables_size();
}
inline ::TSP::Reference* MasterChangeBlobArchive::mutable_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:KN.MasterChangeBlobArchive.drawables)
  return _impl_.drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
MasterChangeBlobArchive::mutable_drawables() {
  // @@protoc_insertion_point(field_mutable_list:KN.MasterChangeBlobArchive.drawables)
  return &_impl_.drawables_;
}
inline const ::TSP::Reference& MasterChangeBlobArchive::_internal_drawables(int index) const {
  return _impl_.drawables_.Get(index);
}
inline const ::TSP::Reference& MasterChangeBlobArchive::drawables(int index) const {
  // @@protoc_insertion_point(field_get:KN.MasterChangeBlobArchive.drawables)
  return _internal_drawables(index);
}
inline ::TSP::Reference* MasterChangeBlobArchive::_internal_add_drawables() {
  return _impl_.drawables_.Add();
}
inline ::TSP::Reference* MasterChangeBlobArchive::add_drawables() {
  ::TSP::Reference* _add = _internal_add_drawables();
  // @@protoc_insertion_point(field_add:KN.MasterChangeBlobArchive.drawables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
MasterChangeBlobArchive::drawables() const {
  // @@protoc_insertion_point(field_list:KN.MasterChangeBlobArchive.drawables)
  return _impl_.drawables_;
}

// -------------------------------------------------------------------

// RecordingArchive

// repeated .TSP.Reference event_tracks = 1;
inline int RecordingArchive::_internal_event_tracks_size() const {
  return _impl_.event_tracks_.size();
}
inline int RecordingArchive::event_tracks_size() const {
  return _internal_event_tracks_size();
}
inline ::TSP::Reference* RecordingArchive::mutable_event_tracks(int index) {
  // @@protoc_insertion_point(field_mutable:KN.RecordingArchive.event_tracks)
  return _impl_.event_tracks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
RecordingArchive::mutable_event_tracks() {
  // @@protoc_insertion_point(field_mutable_list:KN.RecordingArchive.event_tracks)
  return &_impl_.event_tracks_;
}
inline const ::TSP::Reference& RecordingArchive::_internal_event_tracks(int index) const {
  return _impl_.event_tracks_.Get(index);
}
inline const ::TSP::Reference& RecordingArchive::event_tracks(int index) const {
  // @@protoc_insertion_point(field_get:KN.RecordingArchive.event_tracks)
  return _internal_event_tracks(index);
}
inline ::TSP::Reference* RecordingArchive::_internal_add_event_tracks() {
  return _impl_.event_tracks_.Add();
}
inline ::TSP::Reference* RecordingArchive::add_event_tracks() {
  ::TSP::Reference* _add = _internal_add_event_tracks();
  // @@protoc_insertion_point(field_add:KN.RecordingArchive.event_tracks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
RecordingArchive::event_tracks() const {
  // @@protoc_insertion_point(field_list:KN.RecordingArchive.event_tracks)
  return _impl_.event_tracks_;
}

// optional .TSP.Reference movie_track = 2;
inline bool RecordingArchive::_internal_has_movie_track() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.movie_track_ != nullptr);
  return value;
}
inline bool RecordingArchive::has_movie_track() const {
  return _internal_has_movie_track();
}
inline const ::TSP::Reference& RecordingArchive::_internal_movie_track() const {
  const ::TSP::Reference* p = _impl_.movie_track_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& RecordingArchive::movie_track() const {
  // @@protoc_insertion_point(field_get:KN.RecordingArchive.movie_track)
  return _internal_movie_track();
}
inline void RecordingArchive::unsafe_arena_set_allocated_movie_track(
    ::TSP::Reference* movie_track) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.movie_track_);
  }
  _impl_.movie_track_ = movie_track;
  if (movie_track) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.RecordingArchive.movie_track)
}
inline ::TSP::Reference* RecordingArchive::release_movie_track() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.movie_track_;
  _impl_.movie_track_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* RecordingArchive::unsafe_arena_release_movie_track() {
  // @@protoc_insertion_point(field_release:KN.RecordingArchive.movie_track)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.movie_track_;
  _impl_.movie_track_ = nullptr;
  return temp;
}
inline ::TSP::Reference* RecordingArchive::_internal_mutable_movie_track() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.movie_track_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.movie_track_ = p;
  }
  return _impl_.movie_track_;
}
inline ::TSP::Reference* RecordingArchive::mutable_movie_track() {
  ::TSP::Reference* _msg = _internal_mutable_movie_track();
  // @@protoc_insertion_point(field_mutable:KN.RecordingArchive.movie_track)
  return _msg;
}
inline void RecordingArchive::set_allocated_movie_track(::TSP::Reference* movie_track) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.movie_track_);
  }
  if (movie_track) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(movie_track));
    if (message_arena != submessage_arena) {
      movie_track = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, movie_track, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.movie_track_ = movie_track;
  // @@protoc_insertion_point(field_set_allocated:KN.RecordingArchive.movie_track)
}

// optional double duration = 3;
inline bool RecordingArchive::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RecordingArchive::has_duration() const {
  return _internal_has_duration();
}
inline void RecordingArchive::clear_duration() {
  _impl_.duration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double RecordingArchive::_internal_duration() const {
  return _impl_.duration_;
}
inline double RecordingArchive::duration() const {
  // @@protoc_insertion_point(field_get:KN.RecordingArchive.duration)
  return _internal_duration();
}
inline void RecordingArchive::_internal_set_duration(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.duration_ = value;
}
inline void RecordingArchive::set_duration(double value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:KN.RecordingArchive.duration)
}

// optional .KN.RecordingArchive.RecordingSyncState sync_state = 4 [default = kRecordingSyncStateInSyncWithShow];
inline bool RecordingArchive::_internal_has_sync_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RecordingArchive::has_sync_state() const {
  return _internal_has_sync_state();
}
inline void RecordingArchive::clear_sync_state() {
  _impl_.sync_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::KN::RecordingArchive_RecordingSyncState RecordingArchive::_internal_sync_state() const {
  return static_cast< ::KN::RecordingArchive_RecordingSyncState >(_impl_.sync_state_);
}
inline ::KN::RecordingArchive_RecordingSyncState RecordingArchive::sync_state() const {
  // @@protoc_insertion_point(field_get:KN.RecordingArchive.sync_state)
  return _internal_sync_state();
}
inline void RecordingArchive::_internal_set_sync_state(::KN::RecordingArchive_RecordingSyncState value) {
  assert(::KN::RecordingArchive_RecordingSyncState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.sync_state_ = value;
}
inline void RecordingArchive::set_sync_state(::KN::RecordingArchive_RecordingSyncState value) {
  _internal_set_sync_state(value);
  // @@protoc_insertion_point(field_set:KN.RecordingArchive.sync_state)
}

// optional .TSP.Date modification_date = 5;
inline bool RecordingArchive::_internal_has_modification_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.modification_date_ != nullptr);
  return value;
}
inline bool RecordingArchive::has_modification_date() const {
  return _internal_has_modification_date();
}
inline const ::TSP::Date& RecordingArchive::_internal_modification_date() const {
  const ::TSP::Date* p = _impl_.modification_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Date&>(
      ::TSP::_Date_default_instance_);
}
inline const ::TSP::Date& RecordingArchive::modification_date() const {
  // @@protoc_insertion_point(field_get:KN.RecordingArchive.modification_date)
  return _internal_modification_date();
}
inline void RecordingArchive::unsafe_arena_set_allocated_modification_date(
    ::TSP::Date* modification_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.modification_date_);
  }
  _impl_.modification_date_ = modification_date;
  if (modification_date) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.RecordingArchive.modification_date)
}
inline ::TSP::Date* RecordingArchive::release_modification_date() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Date* temp = _impl_.modification_date_;
  _impl_.modification_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Date* RecordingArchive::unsafe_arena_release_modification_date() {
  // @@protoc_insertion_point(field_release:KN.RecordingArchive.modification_date)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Date* temp = _impl_.modification_date_;
  _impl_.modification_date_ = nullptr;
  return temp;
}
inline ::TSP::Date* RecordingArchive::_internal_mutable_modification_date() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.modification_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Date>(GetArenaForAllocation());
    _impl_.modification_date_ = p;
  }
  return _impl_.modification_date_;
}
inline ::TSP::Date* RecordingArchive::mutable_modification_date() {
  ::TSP::Date* _msg = _internal_mutable_modification_date();
  // @@protoc_insertion_point(field_mutable:KN.RecordingArchive.modification_date)
  return _msg;
}
inline void RecordingArchive::set_allocated_modification_date(::TSP::Date* modification_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.modification_date_);
  }
  if (modification_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modification_date));
    if (message_arena != submessage_arena) {
      modification_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modification_date, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.modification_date_ = modification_date;
  // @@protoc_insertion_point(field_set_allocated:KN.RecordingArchive.modification_date)
}

// -------------------------------------------------------------------

// RecordingEventTrackArchive

// optional string type = 1;
inline bool RecordingEventTrackArchive::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RecordingEventTrackArchive::has_type() const {
  return _internal_has_type();
}
inline void RecordingEventTrackArchive::clear_type() {
  _impl_.type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RecordingEventTrackArchive::type() const {
  // @@protoc_insertion_point(field_get:KN.RecordingEventTrackArchive.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecordingEventTrackArchive::set_type(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.RecordingEventTrackArchive.type)
}
inline std::string* RecordingEventTrackArchive::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:KN.RecordingEventTrackArchive.type)
  return _s;
}
inline const std::string& RecordingEventTrackArchive::_internal_type() const {
  return _impl_.type_.Get();
}
inline void RecordingEventTrackArchive::_internal_set_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* RecordingEventTrackArchive::_internal_mutable_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* RecordingEventTrackArchive::release_type() {
  // @@protoc_insertion_point(field_release:KN.RecordingEventTrackArchive.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RecordingEventTrackArchive::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.RecordingEventTrackArchive.type)
}

// repeated .KN.RecordingEventArchive events = 2;
inline int RecordingEventTrackArchive::_internal_events_size() const {
  return _impl_.events_.size();
}
inline int RecordingEventTrackArchive::events_size() const {
  return _internal_events_size();
}
inline void RecordingEventTrackArchive::clear_events() {
  _impl_.events_.Clear();
}
inline ::KN::RecordingEventArchive* RecordingEventTrackArchive::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:KN.RecordingEventTrackArchive.events)
  return _impl_.events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::RecordingEventArchive >*
RecordingEventTrackArchive::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:KN.RecordingEventTrackArchive.events)
  return &_impl_.events_;
}
inline const ::KN::RecordingEventArchive& RecordingEventTrackArchive::_internal_events(int index) const {
  return _impl_.events_.Get(index);
}
inline const ::KN::RecordingEventArchive& RecordingEventTrackArchive::events(int index) const {
  // @@protoc_insertion_point(field_get:KN.RecordingEventTrackArchive.events)
  return _internal_events(index);
}
inline ::KN::RecordingEventArchive* RecordingEventTrackArchive::_internal_add_events() {
  return _impl_.events_.Add();
}
inline ::KN::RecordingEventArchive* RecordingEventTrackArchive::add_events() {
  ::KN::RecordingEventArchive* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:KN.RecordingEventTrackArchive.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::RecordingEventArchive >&
RecordingEventTrackArchive::events() const {
  // @@protoc_insertion_point(field_list:KN.RecordingEventTrackArchive.events)
  return _impl_.events_;
}

// -------------------------------------------------------------------

// RecordingEventArchive

// optional double start_time = 1 [default = -1];
inline bool RecordingEventArchive::_internal_has_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RecordingEventArchive::has_start_time() const {
  return _internal_has_start_time();
}
inline void RecordingEventArchive::clear_start_time() {
  _impl_.start_time_ = -1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double RecordingEventArchive::_internal_start_time() const {
  return _impl_.start_time_;
}
inline double RecordingEventArchive::start_time() const {
  // @@protoc_insertion_point(field_get:KN.RecordingEventArchive.start_time)
  return _internal_start_time();
}
inline void RecordingEventArchive::_internal_set_start_time(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.start_time_ = value;
}
inline void RecordingEventArchive::set_start_time(double value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:KN.RecordingEventArchive.start_time)
}

// optional .KN.RecordingNavigationEventArchive navigation_event_archive = 1000;
inline bool RecordingEventArchive::_internal_has_navigation_event_archive() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.navigation_event_archive_ != nullptr);
  return value;
}
inline bool RecordingEventArchive::has_navigation_event_archive() const {
  return _internal_has_navigation_event_archive();
}
inline void RecordingEventArchive::clear_navigation_event_archive() {
  if (_impl_.navigation_event_archive_ != nullptr) _impl_.navigation_event_archive_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::KN::RecordingNavigationEventArchive& RecordingEventArchive::_internal_navigation_event_archive() const {
  const ::KN::RecordingNavigationEventArchive* p = _impl_.navigation_event_archive_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::RecordingNavigationEventArchive&>(
      ::KN::_RecordingNavigationEventArchive_default_instance_);
}
inline const ::KN::RecordingNavigationEventArchive& RecordingEventArchive::navigation_event_archive() const {
  // @@protoc_insertion_point(field_get:KN.RecordingEventArchive.navigation_event_archive)
  return _internal_navigation_event_archive();
}
inline void RecordingEventArchive::unsafe_arena_set_allocated_navigation_event_archive(
    ::KN::RecordingNavigationEventArchive* navigation_event_archive) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.navigation_event_archive_);
  }
  _impl_.navigation_event_archive_ = navigation_event_archive;
  if (navigation_event_archive) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.RecordingEventArchive.navigation_event_archive)
}
inline ::KN::RecordingNavigationEventArchive* RecordingEventArchive::release_navigation_event_archive() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::KN::RecordingNavigationEventArchive* temp = _impl_.navigation_event_archive_;
  _impl_.navigation_event_archive_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::RecordingNavigationEventArchive* RecordingEventArchive::unsafe_arena_release_navigation_event_archive() {
  // @@protoc_insertion_point(field_release:KN.RecordingEventArchive.navigation_event_archive)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::KN::RecordingNavigationEventArchive* temp = _impl_.navigation_event_archive_;
  _impl_.navigation_event_archive_ = nullptr;
  return temp;
}
inline ::KN::RecordingNavigationEventArchive* RecordingEventArchive::_internal_mutable_navigation_event_archive() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.navigation_event_archive_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::RecordingNavigationEventArchive>(GetArenaForAllocation());
    _impl_.navigation_event_archive_ = p;
  }
  return _impl_.navigation_event_archive_;
}
inline ::KN::RecordingNavigationEventArchive* RecordingEventArchive::mutable_navigation_event_archive() {
  ::KN::RecordingNavigationEventArchive* _msg = _internal_mutable_navigation_event_archive();
  // @@protoc_insertion_point(field_mutable:KN.RecordingEventArchive.navigation_event_archive)
  return _msg;
}
inline void RecordingEventArchive::set_allocated_navigation_event_archive(::KN::RecordingNavigationEventArchive* navigation_event_archive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.navigation_event_archive_;
  }
  if (navigation_event_archive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(navigation_event_archive);
    if (message_arena != submessage_arena) {
      navigation_event_archive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, navigation_event_archive, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.navigation_event_archive_ = navigation_event_archive;
  // @@protoc_insertion_point(field_set_allocated:KN.RecordingEventArchive.navigation_event_archive)
}

// optional .KN.RecordingLaserEventArchive laser_event_archive = 1001;
inline bool RecordingEventArchive::_internal_has_laser_event_archive() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.laser_event_archive_ != nullptr);
  return value;
}
inline bool RecordingEventArchive::has_laser_event_archive() const {
  return _internal_has_laser_event_archive();
}
inline void RecordingEventArchive::clear_laser_event_archive() {
  if (_impl_.laser_event_archive_ != nullptr) _impl_.laser_event_archive_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::KN::RecordingLaserEventArchive& RecordingEventArchive::_internal_laser_event_archive() const {
  const ::KN::RecordingLaserEventArchive* p = _impl_.laser_event_archive_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::RecordingLaserEventArchive&>(
      ::KN::_RecordingLaserEventArchive_default_instance_);
}
inline const ::KN::RecordingLaserEventArchive& RecordingEventArchive::laser_event_archive() const {
  // @@protoc_insertion_point(field_get:KN.RecordingEventArchive.laser_event_archive)
  return _internal_laser_event_archive();
}
inline void RecordingEventArchive::unsafe_arena_set_allocated_laser_event_archive(
    ::KN::RecordingLaserEventArchive* laser_event_archive) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.laser_event_archive_);
  }
  _impl_.laser_event_archive_ = laser_event_archive;
  if (laser_event_archive) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.RecordingEventArchive.laser_event_archive)
}
inline ::KN::RecordingLaserEventArchive* RecordingEventArchive::release_laser_event_archive() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::KN::RecordingLaserEventArchive* temp = _impl_.laser_event_archive_;
  _impl_.laser_event_archive_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::RecordingLaserEventArchive* RecordingEventArchive::unsafe_arena_release_laser_event_archive() {
  // @@protoc_insertion_point(field_release:KN.RecordingEventArchive.laser_event_archive)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::KN::RecordingLaserEventArchive* temp = _impl_.laser_event_archive_;
  _impl_.laser_event_archive_ = nullptr;
  return temp;
}
inline ::KN::RecordingLaserEventArchive* RecordingEventArchive::_internal_mutable_laser_event_archive() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.laser_event_archive_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::RecordingLaserEventArchive>(GetArenaForAllocation());
    _impl_.laser_event_archive_ = p;
  }
  return _impl_.laser_event_archive_;
}
inline ::KN::RecordingLaserEventArchive* RecordingEventArchive::mutable_laser_event_archive() {
  ::KN::RecordingLaserEventArchive* _msg = _internal_mutable_laser_event_archive();
  // @@protoc_insertion_point(field_mutable:KN.RecordingEventArchive.laser_event_archive)
  return _msg;
}
inline void RecordingEventArchive::set_allocated_laser_event_archive(::KN::RecordingLaserEventArchive* laser_event_archive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.laser_event_archive_;
  }
  if (laser_event_archive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(laser_event_archive);
    if (message_arena != submessage_arena) {
      laser_event_archive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, laser_event_archive, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.laser_event_archive_ = laser_event_archive;
  // @@protoc_insertion_point(field_set_allocated:KN.RecordingEventArchive.laser_event_archive)
}

// optional .KN.RecordingPauseEventArchive pause_event_archive = 1002;
inline bool RecordingEventArchive::_internal_has_pause_event_archive() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pause_event_archive_ != nullptr);
  return value;
}
inline bool RecordingEventArchive::has_pause_event_archive() const {
  return _internal_has_pause_event_archive();
}
inline void RecordingEventArchive::clear_pause_event_archive() {
  if (_impl_.pause_event_archive_ != nullptr) _impl_.pause_event_archive_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::KN::RecordingPauseEventArchive& RecordingEventArchive::_internal_pause_event_archive() const {
  const ::KN::RecordingPauseEventArchive* p = _impl_.pause_event_archive_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::RecordingPauseEventArchive&>(
      ::KN::_RecordingPauseEventArchive_default_instance_);
}
inline const ::KN::RecordingPauseEventArchive& RecordingEventArchive::pause_event_archive() const {
  // @@protoc_insertion_point(field_get:KN.RecordingEventArchive.pause_event_archive)
  return _internal_pause_event_archive();
}
inline void RecordingEventArchive::unsafe_arena_set_allocated_pause_event_archive(
    ::KN::RecordingPauseEventArchive* pause_event_archive) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pause_event_archive_);
  }
  _impl_.pause_event_archive_ = pause_event_archive;
  if (pause_event_archive) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.RecordingEventArchive.pause_event_archive)
}
inline ::KN::RecordingPauseEventArchive* RecordingEventArchive::release_pause_event_archive() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::KN::RecordingPauseEventArchive* temp = _impl_.pause_event_archive_;
  _impl_.pause_event_archive_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::RecordingPauseEventArchive* RecordingEventArchive::unsafe_arena_release_pause_event_archive() {
  // @@protoc_insertion_point(field_release:KN.RecordingEventArchive.pause_event_archive)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::KN::RecordingPauseEventArchive* temp = _impl_.pause_event_archive_;
  _impl_.pause_event_archive_ = nullptr;
  return temp;
}
inline ::KN::RecordingPauseEventArchive* RecordingEventArchive::_internal_mutable_pause_event_archive() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.pause_event_archive_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::RecordingPauseEventArchive>(GetArenaForAllocation());
    _impl_.pause_event_archive_ = p;
  }
  return _impl_.pause_event_archive_;
}
inline ::KN::RecordingPauseEventArchive* RecordingEventArchive::mutable_pause_event_archive() {
  ::KN::RecordingPauseEventArchive* _msg = _internal_mutable_pause_event_archive();
  // @@protoc_insertion_point(field_mutable:KN.RecordingEventArchive.pause_event_archive)
  return _msg;
}
inline void RecordingEventArchive::set_allocated_pause_event_archive(::KN::RecordingPauseEventArchive* pause_event_archive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pause_event_archive_;
  }
  if (pause_event_archive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pause_event_archive);
    if (message_arena != submessage_arena) {
      pause_event_archive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pause_event_archive, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.pause_event_archive_ = pause_event_archive;
  // @@protoc_insertion_point(field_set_allocated:KN.RecordingEventArchive.pause_event_archive)
}

// optional .KN.RecordingMovieEventArchive movie_event_archive = 1003;
inline bool RecordingEventArchive::_internal_has_movie_event_archive() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.movie_event_archive_ != nullptr);
  return value;
}
inline bool RecordingEventArchive::has_movie_event_archive() const {
  return _internal_has_movie_event_archive();
}
inline void RecordingEventArchive::clear_movie_event_archive() {
  if (_impl_.movie_event_archive_ != nullptr) _impl_.movie_event_archive_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::KN::RecordingMovieEventArchive& RecordingEventArchive::_internal_movie_event_archive() const {
  const ::KN::RecordingMovieEventArchive* p = _impl_.movie_event_archive_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::RecordingMovieEventArchive&>(
      ::KN::_RecordingMovieEventArchive_default_instance_);
}
inline const ::KN::RecordingMovieEventArchive& RecordingEventArchive::movie_event_archive() const {
  // @@protoc_insertion_point(field_get:KN.RecordingEventArchive.movie_event_archive)
  return _internal_movie_event_archive();
}
inline void RecordingEventArchive::unsafe_arena_set_allocated_movie_event_archive(
    ::KN::RecordingMovieEventArchive* movie_event_archive) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.movie_event_archive_);
  }
  _impl_.movie_event_archive_ = movie_event_archive;
  if (movie_event_archive) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.RecordingEventArchive.movie_event_archive)
}
inline ::KN::RecordingMovieEventArchive* RecordingEventArchive::release_movie_event_archive() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::KN::RecordingMovieEventArchive* temp = _impl_.movie_event_archive_;
  _impl_.movie_event_archive_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::RecordingMovieEventArchive* RecordingEventArchive::unsafe_arena_release_movie_event_archive() {
  // @@protoc_insertion_point(field_release:KN.RecordingEventArchive.movie_event_archive)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::KN::RecordingMovieEventArchive* temp = _impl_.movie_event_archive_;
  _impl_.movie_event_archive_ = nullptr;
  return temp;
}
inline ::KN::RecordingMovieEventArchive* RecordingEventArchive::_internal_mutable_movie_event_archive() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.movie_event_archive_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::RecordingMovieEventArchive>(GetArenaForAllocation());
    _impl_.movie_event_archive_ = p;
  }
  return _impl_.movie_event_archive_;
}
inline ::KN::RecordingMovieEventArchive* RecordingEventArchive::mutable_movie_event_archive() {
  ::KN::RecordingMovieEventArchive* _msg = _internal_mutable_movie_event_archive();
  // @@protoc_insertion_point(field_mutable:KN.RecordingEventArchive.movie_event_archive)
  return _msg;
}
inline void RecordingEventArchive::set_allocated_movie_event_archive(::KN::RecordingMovieEventArchive* movie_event_archive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.movie_event_archive_;
  }
  if (movie_event_archive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(movie_event_archive);
    if (message_arena != submessage_arena) {
      movie_event_archive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, movie_event_archive, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.movie_event_archive_ = movie_event_archive;
  // @@protoc_insertion_point(field_set_allocated:KN.RecordingEventArchive.movie_event_archive)
}

// -------------------------------------------------------------------

// RecordingNavigationEventArchive

// optional .TSP.Reference target_slide_node_reference = 1;
inline bool RecordingNavigationEventArchive::_internal_has_target_slide_node_reference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_slide_node_reference_ != nullptr);
  return value;
}
inline bool RecordingNavigationEventArchive::has_target_slide_node_reference() const {
  return _internal_has_target_slide_node_reference();
}
inline const ::TSP::Reference& RecordingNavigationEventArchive::_internal_target_slide_node_reference() const {
  const ::TSP::Reference* p = _impl_.target_slide_node_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& RecordingNavigationEventArchive::target_slide_node_reference() const {
  // @@protoc_insertion_point(field_get:KN.RecordingNavigationEventArchive.target_slide_node_reference)
  return _internal_target_slide_node_reference();
}
inline void RecordingNavigationEventArchive::unsafe_arena_set_allocated_target_slide_node_reference(
    ::TSP::Reference* target_slide_node_reference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_slide_node_reference_);
  }
  _impl_.target_slide_node_reference_ = target_slide_node_reference;
  if (target_slide_node_reference) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.RecordingNavigationEventArchive.target_slide_node_reference)
}
inline ::TSP::Reference* RecordingNavigationEventArchive::release_target_slide_node_reference() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.target_slide_node_reference_;
  _impl_.target_slide_node_reference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* RecordingNavigationEventArchive::unsafe_arena_release_target_slide_node_reference() {
  // @@protoc_insertion_point(field_release:KN.RecordingNavigationEventArchive.target_slide_node_reference)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.target_slide_node_reference_;
  _impl_.target_slide_node_reference_ = nullptr;
  return temp;
}
inline ::TSP::Reference* RecordingNavigationEventArchive::_internal_mutable_target_slide_node_reference() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.target_slide_node_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.target_slide_node_reference_ = p;
  }
  return _impl_.target_slide_node_reference_;
}
inline ::TSP::Reference* RecordingNavigationEventArchive::mutable_target_slide_node_reference() {
  ::TSP::Reference* _msg = _internal_mutable_target_slide_node_reference();
  // @@protoc_insertion_point(field_mutable:KN.RecordingNavigationEventArchive.target_slide_node_reference)
  return _msg;
}
inline void RecordingNavigationEventArchive::set_allocated_target_slide_node_reference(::TSP::Reference* target_slide_node_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_slide_node_reference_);
  }
  if (target_slide_node_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_slide_node_reference));
    if (message_arena != submessage_arena) {
      target_slide_node_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_slide_node_reference, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.target_slide_node_reference_ = target_slide_node_reference;
  // @@protoc_insertion_point(field_set_allocated:KN.RecordingNavigationEventArchive.target_slide_node_reference)
}

// optional uint32 target_event_index = 2;
inline bool RecordingNavigationEventArchive::_internal_has_target_event_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RecordingNavigationEventArchive::has_target_event_index() const {
  return _internal_has_target_event_index();
}
inline void RecordingNavigationEventArchive::clear_target_event_index() {
  _impl_.target_event_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t RecordingNavigationEventArchive::_internal_target_event_index() const {
  return _impl_.target_event_index_;
}
inline uint32_t RecordingNavigationEventArchive::target_event_index() const {
  // @@protoc_insertion_point(field_get:KN.RecordingNavigationEventArchive.target_event_index)
  return _internal_target_event_index();
}
inline void RecordingNavigationEventArchive::_internal_set_target_event_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.target_event_index_ = value;
}
inline void RecordingNavigationEventArchive::set_target_event_index(uint32_t value) {
  _internal_set_target_event_index(value);
  // @@protoc_insertion_point(field_set:KN.RecordingNavigationEventArchive.target_event_index)
}

// optional .KN.RecordingNavigationEventArchive.RecordingNavigationEventAnimationPhase animation_phase = 3 [default = kRecordingNavigationEventAnimationNone];
inline bool RecordingNavigationEventArchive::_internal_has_animation_phase() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RecordingNavigationEventArchive::has_animation_phase() const {
  return _internal_has_animation_phase();
}
inline void RecordingNavigationEventArchive::clear_animation_phase() {
  _impl_.animation_phase_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase RecordingNavigationEventArchive::_internal_animation_phase() const {
  return static_cast< ::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase >(_impl_.animation_phase_);
}
inline ::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase RecordingNavigationEventArchive::animation_phase() const {
  // @@protoc_insertion_point(field_get:KN.RecordingNavigationEventArchive.animation_phase)
  return _internal_animation_phase();
}
inline void RecordingNavigationEventArchive::_internal_set_animation_phase(::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase value) {
  assert(::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.animation_phase_ = value;
}
inline void RecordingNavigationEventArchive::set_animation_phase(::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase value) {
  _internal_set_animation_phase(value);
  // @@protoc_insertion_point(field_set:KN.RecordingNavigationEventArchive.animation_phase)
}

// -------------------------------------------------------------------

// RecordingLaserEventArchive

// optional .TSP.Point unscaled_location = 1;
inline bool RecordingLaserEventArchive::_internal_has_unscaled_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.unscaled_location_ != nullptr);
  return value;
}
inline bool RecordingLaserEventArchive::has_unscaled_location() const {
  return _internal_has_unscaled_location();
}
inline const ::TSP::Point& RecordingLaserEventArchive::_internal_unscaled_location() const {
  const ::TSP::Point* p = _impl_.unscaled_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& RecordingLaserEventArchive::unscaled_location() const {
  // @@protoc_insertion_point(field_get:KN.RecordingLaserEventArchive.unscaled_location)
  return _internal_unscaled_location();
}
inline void RecordingLaserEventArchive::unsafe_arena_set_allocated_unscaled_location(
    ::TSP::Point* unscaled_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unscaled_location_);
  }
  _impl_.unscaled_location_ = unscaled_location;
  if (unscaled_location) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.RecordingLaserEventArchive.unscaled_location)
}
inline ::TSP::Point* RecordingLaserEventArchive::release_unscaled_location() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Point* temp = _impl_.unscaled_location_;
  _impl_.unscaled_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Point* RecordingLaserEventArchive::unsafe_arena_release_unscaled_location() {
  // @@protoc_insertion_point(field_release:KN.RecordingLaserEventArchive.unscaled_location)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Point* temp = _impl_.unscaled_location_;
  _impl_.unscaled_location_ = nullptr;
  return temp;
}
inline ::TSP::Point* RecordingLaserEventArchive::_internal_mutable_unscaled_location() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.unscaled_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArenaForAllocation());
    _impl_.unscaled_location_ = p;
  }
  return _impl_.unscaled_location_;
}
inline ::TSP::Point* RecordingLaserEventArchive::mutable_unscaled_location() {
  ::TSP::Point* _msg = _internal_mutable_unscaled_location();
  // @@protoc_insertion_point(field_mutable:KN.RecordingLaserEventArchive.unscaled_location)
  return _msg;
}
inline void RecordingLaserEventArchive::set_allocated_unscaled_location(::TSP::Point* unscaled_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unscaled_location_);
  }
  if (unscaled_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unscaled_location));
    if (message_arena != submessage_arena) {
      unscaled_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unscaled_location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.unscaled_location_ = unscaled_location;
  // @@protoc_insertion_point(field_set_allocated:KN.RecordingLaserEventArchive.unscaled_location)
}

// -------------------------------------------------------------------

// RecordingPauseEventArchive

// optional .KN.RecordingPauseEventArchive.RecordingPauseEventType pause_event_type = 1 [default = kRecordingPauseEventTypeResume];
inline bool RecordingPauseEventArchive::_internal_has_pause_event_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RecordingPauseEventArchive::has_pause_event_type() const {
  return _internal_has_pause_event_type();
}
inline void RecordingPauseEventArchive::clear_pause_event_type() {
  _impl_.pause_event_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::KN::RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive::_internal_pause_event_type() const {
  return static_cast< ::KN::RecordingPauseEventArchive_RecordingPauseEventType >(_impl_.pause_event_type_);
}
inline ::KN::RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive::pause_event_type() const {
  // @@protoc_insertion_point(field_get:KN.RecordingPauseEventArchive.pause_event_type)
  return _internal_pause_event_type();
}
inline void RecordingPauseEventArchive::_internal_set_pause_event_type(::KN::RecordingPauseEventArchive_RecordingPauseEventType value) {
  assert(::KN::RecordingPauseEventArchive_RecordingPauseEventType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pause_event_type_ = value;
}
inline void RecordingPauseEventArchive::set_pause_event_type(::KN::RecordingPauseEventArchive_RecordingPauseEventType value) {
  _internal_set_pause_event_type(value);
  // @@protoc_insertion_point(field_set:KN.RecordingPauseEventArchive.pause_event_type)
}

// -------------------------------------------------------------------

// RecordingMovieEventArchive

// optional .TSP.Reference movie_info_reference = 1;
inline bool RecordingMovieEventArchive::_internal_has_movie_info_reference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.movie_info_reference_ != nullptr);
  return value;
}
inline bool RecordingMovieEventArchive::has_movie_info_reference() const {
  return _internal_has_movie_info_reference();
}
inline const ::TSP::Reference& RecordingMovieEventArchive::_internal_movie_info_reference() const {
  const ::TSP::Reference* p = _impl_.movie_info_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& RecordingMovieEventArchive::movie_info_reference() const {
  // @@protoc_insertion_point(field_get:KN.RecordingMovieEventArchive.movie_info_reference)
  return _internal_movie_info_reference();
}
inline void RecordingMovieEventArchive::unsafe_arena_set_allocated_movie_info_reference(
    ::TSP::Reference* movie_info_reference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.movie_info_reference_);
  }
  _impl_.movie_info_reference_ = movie_info_reference;
  if (movie_info_reference) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.RecordingMovieEventArchive.movie_info_reference)
}
inline ::TSP::Reference* RecordingMovieEventArchive::release_movie_info_reference() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.movie_info_reference_;
  _impl_.movie_info_reference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* RecordingMovieEventArchive::unsafe_arena_release_movie_info_reference() {
  // @@protoc_insertion_point(field_release:KN.RecordingMovieEventArchive.movie_info_reference)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.movie_info_reference_;
  _impl_.movie_info_reference_ = nullptr;
  return temp;
}
inline ::TSP::Reference* RecordingMovieEventArchive::_internal_mutable_movie_info_reference() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.movie_info_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.movie_info_reference_ = p;
  }
  return _impl_.movie_info_reference_;
}
inline ::TSP::Reference* RecordingMovieEventArchive::mutable_movie_info_reference() {
  ::TSP::Reference* _msg = _internal_mutable_movie_info_reference();
  // @@protoc_insertion_point(field_mutable:KN.RecordingMovieEventArchive.movie_info_reference)
  return _msg;
}
inline void RecordingMovieEventArchive::set_allocated_movie_info_reference(::TSP::Reference* movie_info_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.movie_info_reference_);
  }
  if (movie_info_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(movie_info_reference));
    if (message_arena != submessage_arena) {
      movie_info_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, movie_info_reference, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.movie_info_reference_ = movie_info_reference;
  // @@protoc_insertion_point(field_set_allocated:KN.RecordingMovieEventArchive.movie_info_reference)
}

// optional .KN.RecordingMovieEventArchive.RecordingMovieEventType movie_event_type = 2 [default = kRecordingMovieEventSeek];
inline bool RecordingMovieEventArchive::_internal_has_movie_event_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RecordingMovieEventArchive::has_movie_event_type() const {
  return _internal_has_movie_event_type();
}
inline void RecordingMovieEventArchive::clear_movie_event_type() {
  _impl_.movie_event_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::KN::RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::_internal_movie_event_type() const {
  return static_cast< ::KN::RecordingMovieEventArchive_RecordingMovieEventType >(_impl_.movie_event_type_);
}
inline ::KN::RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::movie_event_type() const {
  // @@protoc_insertion_point(field_get:KN.RecordingMovieEventArchive.movie_event_type)
  return _internal_movie_event_type();
}
inline void RecordingMovieEventArchive::_internal_set_movie_event_type(::KN::RecordingMovieEventArchive_RecordingMovieEventType value) {
  assert(::KN::RecordingMovieEventArchive_RecordingMovieEventType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.movie_event_type_ = value;
}
inline void RecordingMovieEventArchive::set_movie_event_type(::KN::RecordingMovieEventArchive_RecordingMovieEventType value) {
  _internal_set_movie_event_type(value);
  // @@protoc_insertion_point(field_set:KN.RecordingMovieEventArchive.movie_event_type)
}

// optional double movie_event_value = 3;
inline bool RecordingMovieEventArchive::_internal_has_movie_event_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RecordingMovieEventArchive::has_movie_event_value() const {
  return _internal_has_movie_event_value();
}
inline void RecordingMovieEventArchive::clear_movie_event_value() {
  _impl_.movie_event_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double RecordingMovieEventArchive::_internal_movie_event_value() const {
  return _impl_.movie_event_value_;
}
inline double RecordingMovieEventArchive::movie_event_value() const {
  // @@protoc_insertion_point(field_get:KN.RecordingMovieEventArchive.movie_event_value)
  return _internal_movie_event_value();
}
inline void RecordingMovieEventArchive::_internal_set_movie_event_value(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.movie_event_value_ = value;
}
inline void RecordingMovieEventArchive::set_movie_event_value(double value) {
  _internal_set_movie_event_value(value);
  // @@protoc_insertion_point(field_set:KN.RecordingMovieEventArchive.movie_event_value)
}

// -------------------------------------------------------------------

// RecordingMovieTrackArchive

// repeated .KN.MovieSegmentArchive movie_segments = 1;
inline int RecordingMovieTrackArchive::_internal_movie_segments_size() const {
  return _impl_.movie_segments_.size();
}
inline int RecordingMovieTrackArchive::movie_segments_size() const {
  return _internal_movie_segments_size();
}
inline void RecordingMovieTrackArchive::clear_movie_segments() {
  _impl_.movie_segments_.Clear();
}
inline ::KN::MovieSegmentArchive* RecordingMovieTrackArchive::mutable_movie_segments(int index) {
  // @@protoc_insertion_point(field_mutable:KN.RecordingMovieTrackArchive.movie_segments)
  return _impl_.movie_segments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::MovieSegmentArchive >*
RecordingMovieTrackArchive::mutable_movie_segments() {
  // @@protoc_insertion_point(field_mutable_list:KN.RecordingMovieTrackArchive.movie_segments)
  return &_impl_.movie_segments_;
}
inline const ::KN::MovieSegmentArchive& RecordingMovieTrackArchive::_internal_movie_segments(int index) const {
  return _impl_.movie_segments_.Get(index);
}
inline const ::KN::MovieSegmentArchive& RecordingMovieTrackArchive::movie_segments(int index) const {
  // @@protoc_insertion_point(field_get:KN.RecordingMovieTrackArchive.movie_segments)
  return _internal_movie_segments(index);
}
inline ::KN::MovieSegmentArchive* RecordingMovieTrackArchive::_internal_add_movie_segments() {
  return _impl_.movie_segments_.Add();
}
inline ::KN::MovieSegmentArchive* RecordingMovieTrackArchive::add_movie_segments() {
  ::KN::MovieSegmentArchive* _add = _internal_add_movie_segments();
  // @@protoc_insertion_point(field_add:KN.RecordingMovieTrackArchive.movie_segments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::MovieSegmentArchive >&
RecordingMovieTrackArchive::movie_segments() const {
  // @@protoc_insertion_point(field_list:KN.RecordingMovieTrackArchive.movie_segments)
  return _impl_.movie_segments_;
}

// -------------------------------------------------------------------

// MovieSegmentArchive

// optional .TSP.DataReference movie_data = 3;
inline bool MovieSegmentArchive::_internal_has_movie_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.movie_data_ != nullptr);
  return value;
}
inline bool MovieSegmentArchive::has_movie_data() const {
  return _internal_has_movie_data();
}
inline const ::TSP::DataReference& MovieSegmentArchive::_internal_movie_data() const {
  const ::TSP::DataReference* p = _impl_.movie_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& MovieSegmentArchive::movie_data() const {
  // @@protoc_insertion_point(field_get:KN.MovieSegmentArchive.movie_data)
  return _internal_movie_data();
}
inline void MovieSegmentArchive::unsafe_arena_set_allocated_movie_data(
    ::TSP::DataReference* movie_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.movie_data_);
  }
  _impl_.movie_data_ = movie_data;
  if (movie_data) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.MovieSegmentArchive.movie_data)
}
inline ::TSP::DataReference* MovieSegmentArchive::release_movie_data() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::DataReference* temp = _impl_.movie_data_;
  _impl_.movie_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::DataReference* MovieSegmentArchive::unsafe_arena_release_movie_data() {
  // @@protoc_insertion_point(field_release:KN.MovieSegmentArchive.movie_data)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::DataReference* temp = _impl_.movie_data_;
  _impl_.movie_data_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* MovieSegmentArchive::_internal_mutable_movie_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.movie_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArenaForAllocation());
    _impl_.movie_data_ = p;
  }
  return _impl_.movie_data_;
}
inline ::TSP::DataReference* MovieSegmentArchive::mutable_movie_data() {
  ::TSP::DataReference* _msg = _internal_mutable_movie_data();
  // @@protoc_insertion_point(field_mutable:KN.MovieSegmentArchive.movie_data)
  return _msg;
}
inline void MovieSegmentArchive::set_allocated_movie_data(::TSP::DataReference* movie_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.movie_data_);
  }
  if (movie_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(movie_data));
    if (message_arena != submessage_arena) {
      movie_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, movie_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.movie_data_ = movie_data;
  // @@protoc_insertion_point(field_set_allocated:KN.MovieSegmentArchive.movie_data)
}

// optional double start_time = 2 [default = -1];
inline bool MovieSegmentArchive::_internal_has_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MovieSegmentArchive::has_start_time() const {
  return _internal_has_start_time();
}
inline void MovieSegmentArchive::clear_start_time() {
  _impl_.start_time_ = -1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double MovieSegmentArchive::_internal_start_time() const {
  return _impl_.start_time_;
}
inline double MovieSegmentArchive::start_time() const {
  // @@protoc_insertion_point(field_get:KN.MovieSegmentArchive.start_time)
  return _internal_start_time();
}
inline void MovieSegmentArchive::_internal_set_start_time(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.start_time_ = value;
}
inline void MovieSegmentArchive::set_start_time(double value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:KN.MovieSegmentArchive.start_time)
}

// optional .TSP.Reference database_movie_data = 1;
inline bool MovieSegmentArchive::_internal_has_database_movie_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.database_movie_data_ != nullptr);
  return value;
}
inline bool MovieSegmentArchive::has_database_movie_data() const {
  return _internal_has_database_movie_data();
}
inline const ::TSP::Reference& MovieSegmentArchive::_internal_database_movie_data() const {
  const ::TSP::Reference* p = _impl_.database_movie_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& MovieSegmentArchive::database_movie_data() const {
  // @@protoc_insertion_point(field_get:KN.MovieSegmentArchive.database_movie_data)
  return _internal_database_movie_data();
}
inline void MovieSegmentArchive::unsafe_arena_set_allocated_database_movie_data(
    ::TSP::Reference* database_movie_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.database_movie_data_);
  }
  _impl_.database_movie_data_ = database_movie_data;
  if (database_movie_data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.MovieSegmentArchive.database_movie_data)
}
inline ::TSP::Reference* MovieSegmentArchive::release_database_movie_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.database_movie_data_;
  _impl_.database_movie_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* MovieSegmentArchive::unsafe_arena_release_database_movie_data() {
  // @@protoc_insertion_point(field_release:KN.MovieSegmentArchive.database_movie_data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.database_movie_data_;
  _impl_.database_movie_data_ = nullptr;
  return temp;
}
inline ::TSP::Reference* MovieSegmentArchive::_internal_mutable_database_movie_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.database_movie_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.database_movie_data_ = p;
  }
  return _impl_.database_movie_data_;
}
inline ::TSP::Reference* MovieSegmentArchive::mutable_database_movie_data() {
  ::TSP::Reference* _msg = _internal_mutable_database_movie_data();
  // @@protoc_insertion_point(field_mutable:KN.MovieSegmentArchive.database_movie_data)
  return _msg;
}
inline void MovieSegmentArchive::set_allocated_database_movie_data(::TSP::Reference* database_movie_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.database_movie_data_);
  }
  if (database_movie_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_movie_data));
    if (message_arena != submessage_arena) {
      database_movie_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, database_movie_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.database_movie_data_ = database_movie_data;
  // @@protoc_insertion_point(field_set_allocated:KN.MovieSegmentArchive.database_movie_data)
}

// -------------------------------------------------------------------

// Soundtrack

// optional double volume = 1;
inline bool Soundtrack::_internal_has_volume() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Soundtrack::has_volume() const {
  return _internal_has_volume();
}
inline void Soundtrack::clear_volume() {
  _impl_.volume_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Soundtrack::_internal_volume() const {
  return _impl_.volume_;
}
inline double Soundtrack::volume() const {
  // @@protoc_insertion_point(field_get:KN.Soundtrack.volume)
  return _internal_volume();
}
inline void Soundtrack::_internal_set_volume(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.volume_ = value;
}
inline void Soundtrack::set_volume(double value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:KN.Soundtrack.volume)
}

// optional .KN.Soundtrack.SoundtrackMode mode = 2 [default = kKNSoundtrackModePlayOnce];
inline bool Soundtrack::_internal_has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Soundtrack::has_mode() const {
  return _internal_has_mode();
}
inline void Soundtrack::clear_mode() {
  _impl_.mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::KN::Soundtrack_SoundtrackMode Soundtrack::_internal_mode() const {
  return static_cast< ::KN::Soundtrack_SoundtrackMode >(_impl_.mode_);
}
inline ::KN::Soundtrack_SoundtrackMode Soundtrack::mode() const {
  // @@protoc_insertion_point(field_get:KN.Soundtrack.mode)
  return _internal_mode();
}
inline void Soundtrack::_internal_set_mode(::KN::Soundtrack_SoundtrackMode value) {
  assert(::KN::Soundtrack_SoundtrackMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.mode_ = value;
}
inline void Soundtrack::set_mode(::KN::Soundtrack_SoundtrackMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:KN.Soundtrack.mode)
}

// repeated .TSP.DataReference movie_media = 3;
inline int Soundtrack::_internal_movie_media_size() const {
  return _impl_.movie_media_.size();
}
inline int Soundtrack::movie_media_size() const {
  return _internal_movie_media_size();
}
inline ::TSP::DataReference* Soundtrack::mutable_movie_media(int index) {
  // @@protoc_insertion_point(field_mutable:KN.Soundtrack.movie_media)
  return _impl_.movie_media_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >*
Soundtrack::mutable_movie_media() {
  // @@protoc_insertion_point(field_mutable_list:KN.Soundtrack.movie_media)
  return &_impl_.movie_media_;
}
inline const ::TSP::DataReference& Soundtrack::_internal_movie_media(int index) const {
  return _impl_.movie_media_.Get(index);
}
inline const ::TSP::DataReference& Soundtrack::movie_media(int index) const {
  // @@protoc_insertion_point(field_get:KN.Soundtrack.movie_media)
  return _internal_movie_media(index);
}
inline ::TSP::DataReference* Soundtrack::_internal_add_movie_media() {
  return _impl_.movie_media_.Add();
}
inline ::TSP::DataReference* Soundtrack::add_movie_media() {
  ::TSP::DataReference* _add = _internal_add_movie_media();
  // @@protoc_insertion_point(field_add:KN.Soundtrack.movie_media)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >&
Soundtrack::movie_media() const {
  // @@protoc_insertion_point(field_list:KN.Soundtrack.movie_media)
  return _impl_.movie_media_;
}

// -------------------------------------------------------------------

// SlideNumberAttachmentArchive

// required .TSWP.TextualAttachmentArchive super = 1;
inline bool SlideNumberAttachmentArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool SlideNumberAttachmentArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSWP::TextualAttachmentArchive& SlideNumberAttachmentArchive::_internal_super() const {
  const ::TSWP::TextualAttachmentArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::TextualAttachmentArchive&>(
      ::TSWP::_TextualAttachmentArchive_default_instance_);
}
inline const ::TSWP::TextualAttachmentArchive& SlideNumberAttachmentArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.SlideNumberAttachmentArchive.super)
  return _internal_super();
}
inline void SlideNumberAttachmentArchive::unsafe_arena_set_allocated_super(
    ::TSWP::TextualAttachmentArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideNumberAttachmentArchive.super)
}
inline ::TSWP::TextualAttachmentArchive* SlideNumberAttachmentArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSWP::TextualAttachmentArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::TextualAttachmentArchive* SlideNumberAttachmentArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.SlideNumberAttachmentArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSWP::TextualAttachmentArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSWP::TextualAttachmentArchive* SlideNumberAttachmentArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::TextualAttachmentArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSWP::TextualAttachmentArchive* SlideNumberAttachmentArchive::mutable_super() {
  ::TSWP::TextualAttachmentArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.SlideNumberAttachmentArchive.super)
  return _msg;
}
inline void SlideNumberAttachmentArchive::set_allocated_super(::TSWP::TextualAttachmentArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideNumberAttachmentArchive.super)
}

// -------------------------------------------------------------------

// SlideCollectionSelectionArchive_OutlineSelection

// required .TSP.Reference slide_node = 1;
inline bool SlideCollectionSelectionArchive_OutlineSelection::_internal_has_slide_node() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slide_node_ != nullptr);
  return value;
}
inline bool SlideCollectionSelectionArchive_OutlineSelection::has_slide_node() const {
  return _internal_has_slide_node();
}
inline const ::TSP::Reference& SlideCollectionSelectionArchive_OutlineSelection::_internal_slide_node() const {
  const ::TSP::Reference* p = _impl_.slide_node_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideCollectionSelectionArchive_OutlineSelection::slide_node() const {
  // @@protoc_insertion_point(field_get:KN.SlideCollectionSelectionArchive.OutlineSelection.slide_node)
  return _internal_slide_node();
}
inline void SlideCollectionSelectionArchive_OutlineSelection::unsafe_arena_set_allocated_slide_node(
    ::TSP::Reference* slide_node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_node_);
  }
  _impl_.slide_node_ = slide_node;
  if (slide_node) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideCollectionSelectionArchive.OutlineSelection.slide_node)
}
inline ::TSP::Reference* SlideCollectionSelectionArchive_OutlineSelection::release_slide_node() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.slide_node_;
  _impl_.slide_node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideCollectionSelectionArchive_OutlineSelection::unsafe_arena_release_slide_node() {
  // @@protoc_insertion_point(field_release:KN.SlideCollectionSelectionArchive.OutlineSelection.slide_node)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.slide_node_;
  _impl_.slide_node_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideCollectionSelectionArchive_OutlineSelection::_internal_mutable_slide_node() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.slide_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.slide_node_ = p;
  }
  return _impl_.slide_node_;
}
inline ::TSP::Reference* SlideCollectionSelectionArchive_OutlineSelection::mutable_slide_node() {
  ::TSP::Reference* _msg = _internal_mutable_slide_node();
  // @@protoc_insertion_point(field_mutable:KN.SlideCollectionSelectionArchive.OutlineSelection.slide_node)
  return _msg;
}
inline void SlideCollectionSelectionArchive_OutlineSelection::set_allocated_slide_node(::TSP::Reference* slide_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_node_);
  }
  if (slide_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_node));
    if (message_arena != submessage_arena) {
      slide_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide_node, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.slide_node_ = slide_node;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideCollectionSelectionArchive.OutlineSelection.slide_node)
}

// required .TSP.IndexSet selected_paragraph_indexes = 2;
inline bool SlideCollectionSelectionArchive_OutlineSelection::_internal_has_selected_paragraph_indexes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.selected_paragraph_indexes_ != nullptr);
  return value;
}
inline bool SlideCollectionSelectionArchive_OutlineSelection::has_selected_paragraph_indexes() const {
  return _internal_has_selected_paragraph_indexes();
}
inline const ::TSP::IndexSet& SlideCollectionSelectionArchive_OutlineSelection::_internal_selected_paragraph_indexes() const {
  const ::TSP::IndexSet* p = _impl_.selected_paragraph_indexes_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::IndexSet&>(
      ::TSP::_IndexSet_default_instance_);
}
inline const ::TSP::IndexSet& SlideCollectionSelectionArchive_OutlineSelection::selected_paragraph_indexes() const {
  // @@protoc_insertion_point(field_get:KN.SlideCollectionSelectionArchive.OutlineSelection.selected_paragraph_indexes)
  return _internal_selected_paragraph_indexes();
}
inline void SlideCollectionSelectionArchive_OutlineSelection::unsafe_arena_set_allocated_selected_paragraph_indexes(
    ::TSP::IndexSet* selected_paragraph_indexes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selected_paragraph_indexes_);
  }
  _impl_.selected_paragraph_indexes_ = selected_paragraph_indexes;
  if (selected_paragraph_indexes) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideCollectionSelectionArchive.OutlineSelection.selected_paragraph_indexes)
}
inline ::TSP::IndexSet* SlideCollectionSelectionArchive_OutlineSelection::release_selected_paragraph_indexes() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::IndexSet* temp = _impl_.selected_paragraph_indexes_;
  _impl_.selected_paragraph_indexes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::IndexSet* SlideCollectionSelectionArchive_OutlineSelection::unsafe_arena_release_selected_paragraph_indexes() {
  // @@protoc_insertion_point(field_release:KN.SlideCollectionSelectionArchive.OutlineSelection.selected_paragraph_indexes)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::IndexSet* temp = _impl_.selected_paragraph_indexes_;
  _impl_.selected_paragraph_indexes_ = nullptr;
  return temp;
}
inline ::TSP::IndexSet* SlideCollectionSelectionArchive_OutlineSelection::_internal_mutable_selected_paragraph_indexes() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.selected_paragraph_indexes_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::IndexSet>(GetArenaForAllocation());
    _impl_.selected_paragraph_indexes_ = p;
  }
  return _impl_.selected_paragraph_indexes_;
}
inline ::TSP::IndexSet* SlideCollectionSelectionArchive_OutlineSelection::mutable_selected_paragraph_indexes() {
  ::TSP::IndexSet* _msg = _internal_mutable_selected_paragraph_indexes();
  // @@protoc_insertion_point(field_mutable:KN.SlideCollectionSelectionArchive.OutlineSelection.selected_paragraph_indexes)
  return _msg;
}
inline void SlideCollectionSelectionArchive_OutlineSelection::set_allocated_selected_paragraph_indexes(::TSP::IndexSet* selected_paragraph_indexes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selected_paragraph_indexes_);
  }
  if (selected_paragraph_indexes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selected_paragraph_indexes));
    if (message_arena != submessage_arena) {
      selected_paragraph_indexes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selected_paragraph_indexes, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.selected_paragraph_indexes_ = selected_paragraph_indexes;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideCollectionSelectionArchive.OutlineSelection.selected_paragraph_indexes)
}

// -------------------------------------------------------------------

// SlideCollectionSelectionArchive

// repeated .TSP.Reference slide_nodes = 1;
inline int SlideCollectionSelectionArchive::_internal_slide_nodes_size() const {
  return _impl_.slide_nodes_.size();
}
inline int SlideCollectionSelectionArchive::slide_nodes_size() const {
  return _internal_slide_nodes_size();
}
inline ::TSP::Reference* SlideCollectionSelectionArchive::mutable_slide_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideCollectionSelectionArchive.slide_nodes)
  return _impl_.slide_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SlideCollectionSelectionArchive::mutable_slide_nodes() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideCollectionSelectionArchive.slide_nodes)
  return &_impl_.slide_nodes_;
}
inline const ::TSP::Reference& SlideCollectionSelectionArchive::_internal_slide_nodes(int index) const {
  return _impl_.slide_nodes_.Get(index);
}
inline const ::TSP::Reference& SlideCollectionSelectionArchive::slide_nodes(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideCollectionSelectionArchive.slide_nodes)
  return _internal_slide_nodes(index);
}
inline ::TSP::Reference* SlideCollectionSelectionArchive::_internal_add_slide_nodes() {
  return _impl_.slide_nodes_.Add();
}
inline ::TSP::Reference* SlideCollectionSelectionArchive::add_slide_nodes() {
  ::TSP::Reference* _add = _internal_add_slide_nodes();
  // @@protoc_insertion_point(field_add:KN.SlideCollectionSelectionArchive.slide_nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SlideCollectionSelectionArchive::slide_nodes() const {
  // @@protoc_insertion_point(field_list:KN.SlideCollectionSelectionArchive.slide_nodes)
  return _impl_.slide_nodes_;
}

// optional .TSP.Reference slide_node_to_edit = 2;
inline bool SlideCollectionSelectionArchive::_internal_has_slide_node_to_edit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slide_node_to_edit_ != nullptr);
  return value;
}
inline bool SlideCollectionSelectionArchive::has_slide_node_to_edit() const {
  return _internal_has_slide_node_to_edit();
}
inline const ::TSP::Reference& SlideCollectionSelectionArchive::_internal_slide_node_to_edit() const {
  const ::TSP::Reference* p = _impl_.slide_node_to_edit_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideCollectionSelectionArchive::slide_node_to_edit() const {
  // @@protoc_insertion_point(field_get:KN.SlideCollectionSelectionArchive.slide_node_to_edit)
  return _internal_slide_node_to_edit();
}
inline void SlideCollectionSelectionArchive::unsafe_arena_set_allocated_slide_node_to_edit(
    ::TSP::Reference* slide_node_to_edit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_node_to_edit_);
  }
  _impl_.slide_node_to_edit_ = slide_node_to_edit;
  if (slide_node_to_edit) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideCollectionSelectionArchive.slide_node_to_edit)
}
inline ::TSP::Reference* SlideCollectionSelectionArchive::release_slide_node_to_edit() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.slide_node_to_edit_;
  _impl_.slide_node_to_edit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideCollectionSelectionArchive::unsafe_arena_release_slide_node_to_edit() {
  // @@protoc_insertion_point(field_release:KN.SlideCollectionSelectionArchive.slide_node_to_edit)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.slide_node_to_edit_;
  _impl_.slide_node_to_edit_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideCollectionSelectionArchive::_internal_mutable_slide_node_to_edit() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.slide_node_to_edit_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.slide_node_to_edit_ = p;
  }
  return _impl_.slide_node_to_edit_;
}
inline ::TSP::Reference* SlideCollectionSelectionArchive::mutable_slide_node_to_edit() {
  ::TSP::Reference* _msg = _internal_mutable_slide_node_to_edit();
  // @@protoc_insertion_point(field_mutable:KN.SlideCollectionSelectionArchive.slide_node_to_edit)
  return _msg;
}
inline void SlideCollectionSelectionArchive::set_allocated_slide_node_to_edit(::TSP::Reference* slide_node_to_edit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_node_to_edit_);
  }
  if (slide_node_to_edit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_node_to_edit));
    if (message_arena != submessage_arena) {
      slide_node_to_edit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide_node_to_edit, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.slide_node_to_edit_ = slide_node_to_edit;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideCollectionSelectionArchive.slide_node_to_edit)
}

// repeated .KN.SlideCollectionSelectionArchive.OutlineSelection selected_paragraph_indexes_for_slide_nodes = 3;
inline int SlideCollectionSelectionArchive::_internal_selected_paragraph_indexes_for_slide_nodes_size() const {
  return _impl_.selected_paragraph_indexes_for_slide_nodes_.size();
}
inline int SlideCollectionSelectionArchive::selected_paragraph_indexes_for_slide_nodes_size() const {
  return _internal_selected_paragraph_indexes_for_slide_nodes_size();
}
inline void SlideCollectionSelectionArchive::clear_selected_paragraph_indexes_for_slide_nodes() {
  _impl_.selected_paragraph_indexes_for_slide_nodes_.Clear();
}
inline ::KN::SlideCollectionSelectionArchive_OutlineSelection* SlideCollectionSelectionArchive::mutable_selected_paragraph_indexes_for_slide_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideCollectionSelectionArchive.selected_paragraph_indexes_for_slide_nodes)
  return _impl_.selected_paragraph_indexes_for_slide_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::SlideCollectionSelectionArchive_OutlineSelection >*
SlideCollectionSelectionArchive::mutable_selected_paragraph_indexes_for_slide_nodes() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideCollectionSelectionArchive.selected_paragraph_indexes_for_slide_nodes)
  return &_impl_.selected_paragraph_indexes_for_slide_nodes_;
}
inline const ::KN::SlideCollectionSelectionArchive_OutlineSelection& SlideCollectionSelectionArchive::_internal_selected_paragraph_indexes_for_slide_nodes(int index) const {
  return _impl_.selected_paragraph_indexes_for_slide_nodes_.Get(index);
}
inline const ::KN::SlideCollectionSelectionArchive_OutlineSelection& SlideCollectionSelectionArchive::selected_paragraph_indexes_for_slide_nodes(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideCollectionSelectionArchive.selected_paragraph_indexes_for_slide_nodes)
  return _internal_selected_paragraph_indexes_for_slide_nodes(index);
}
inline ::KN::SlideCollectionSelectionArchive_OutlineSelection* SlideCollectionSelectionArchive::_internal_add_selected_paragraph_indexes_for_slide_nodes() {
  return _impl_.selected_paragraph_indexes_for_slide_nodes_.Add();
}
inline ::KN::SlideCollectionSelectionArchive_OutlineSelection* SlideCollectionSelectionArchive::add_selected_paragraph_indexes_for_slide_nodes() {
  ::KN::SlideCollectionSelectionArchive_OutlineSelection* _add = _internal_add_selected_paragraph_indexes_for_slide_nodes();
  // @@protoc_insertion_point(field_add:KN.SlideCollectionSelectionArchive.selected_paragraph_indexes_for_slide_nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::SlideCollectionSelectionArchive_OutlineSelection >&
SlideCollectionSelectionArchive::selected_paragraph_indexes_for_slide_nodes() const {
  // @@protoc_insertion_point(field_list:KN.SlideCollectionSelectionArchive.selected_paragraph_indexes_for_slide_nodes)
  return _impl_.selected_paragraph_indexes_for_slide_nodes_;
}

// optional .TSP.Range range_in_selected_paragraph = 4;
inline bool SlideCollectionSelectionArchive::_internal_has_range_in_selected_paragraph() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.range_in_selected_paragraph_ != nullptr);
  return value;
}
inline bool SlideCollectionSelectionArchive::has_range_in_selected_paragraph() const {
  return _internal_has_range_in_selected_paragraph();
}
inline const ::TSP::Range& SlideCollectionSelectionArchive::_internal_range_in_selected_paragraph() const {
  const ::TSP::Range* p = _impl_.range_in_selected_paragraph_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Range&>(
      ::TSP::_Range_default_instance_);
}
inline const ::TSP::Range& SlideCollectionSelectionArchive::range_in_selected_paragraph() const {
  // @@protoc_insertion_point(field_get:KN.SlideCollectionSelectionArchive.range_in_selected_paragraph)
  return _internal_range_in_selected_paragraph();
}
inline void SlideCollectionSelectionArchive::unsafe_arena_set_allocated_range_in_selected_paragraph(
    ::TSP::Range* range_in_selected_paragraph) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.range_in_selected_paragraph_);
  }
  _impl_.range_in_selected_paragraph_ = range_in_selected_paragraph;
  if (range_in_selected_paragraph) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideCollectionSelectionArchive.range_in_selected_paragraph)
}
inline ::TSP::Range* SlideCollectionSelectionArchive::release_range_in_selected_paragraph() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Range* temp = _impl_.range_in_selected_paragraph_;
  _impl_.range_in_selected_paragraph_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Range* SlideCollectionSelectionArchive::unsafe_arena_release_range_in_selected_paragraph() {
  // @@protoc_insertion_point(field_release:KN.SlideCollectionSelectionArchive.range_in_selected_paragraph)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Range* temp = _impl_.range_in_selected_paragraph_;
  _impl_.range_in_selected_paragraph_ = nullptr;
  return temp;
}
inline ::TSP::Range* SlideCollectionSelectionArchive::_internal_mutable_range_in_selected_paragraph() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.range_in_selected_paragraph_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Range>(GetArenaForAllocation());
    _impl_.range_in_selected_paragraph_ = p;
  }
  return _impl_.range_in_selected_paragraph_;
}
inline ::TSP::Range* SlideCollectionSelectionArchive::mutable_range_in_selected_paragraph() {
  ::TSP::Range* _msg = _internal_mutable_range_in_selected_paragraph();
  // @@protoc_insertion_point(field_mutable:KN.SlideCollectionSelectionArchive.range_in_selected_paragraph)
  return _msg;
}
inline void SlideCollectionSelectionArchive::set_allocated_range_in_selected_paragraph(::TSP::Range* range_in_selected_paragraph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.range_in_selected_paragraph_);
  }
  if (range_in_selected_paragraph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_in_selected_paragraph));
    if (message_arena != submessage_arena) {
      range_in_selected_paragraph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range_in_selected_paragraph, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.range_in_selected_paragraph_ = range_in_selected_paragraph;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideCollectionSelectionArchive.range_in_selected_paragraph)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace KN

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType>() {
  return ::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_descriptor();
}
template <> struct is_proto_enum< ::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType>() {
  return ::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_descriptor();
}
template <> struct is_proto_enum< ::KN::BuildAttributesArchive_BuildAttributesAcceleration> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::BuildAttributesArchive_BuildAttributesAcceleration>() {
  return ::KN::BuildAttributesArchive_BuildAttributesAcceleration_descriptor();
}
template <> struct is_proto_enum< ::KN::BuildAttributesArchive_BuildAttributesRotationDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::BuildAttributesArchive_BuildAttributesRotationDirection>() {
  return ::KN::BuildAttributesArchive_BuildAttributesRotationDirection_descriptor();
}
template <> struct is_proto_enum< ::KN::BuildAttributesArchive_BuildAttributesCurveStyle> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::BuildAttributesArchive_BuildAttributesCurveStyle>() {
  return ::KN::BuildAttributesArchive_BuildAttributesCurveStyle_descriptor();
}
template <> struct is_proto_enum< ::KN::BuildAttributesArchive_BuildAttributesTextDelivery> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::BuildAttributesArchive_BuildAttributesTextDelivery>() {
  return ::KN::BuildAttributesArchive_BuildAttributesTextDelivery_descriptor();
}
template <> struct is_proto_enum< ::KN::BuildAttributesArchive_BuildAttributesDeliveryOption> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::BuildAttributesArchive_BuildAttributesDeliveryOption>() {
  return ::KN::BuildAttributesArchive_BuildAttributesDeliveryOption_descriptor();
}
template <> struct is_proto_enum< ::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity>() {
  return ::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_descriptor();
}
template <> struct is_proto_enum< ::KN::PlaceholderArchive_Kind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::PlaceholderArchive_Kind>() {
  return ::KN::PlaceholderArchive_Kind_descriptor();
}
template <> struct is_proto_enum< ::KN::DesktopUILayoutArchive_SidebarViewMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::DesktopUILayoutArchive_SidebarViewMode>() {
  return ::KN::DesktopUILayoutArchive_SidebarViewMode_descriptor();
}
template <> struct is_proto_enum< ::KN::DesktopUILayoutArchive_InspectorPaneViewMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::DesktopUILayoutArchive_InspectorPaneViewMode>() {
  return ::KN::DesktopUILayoutArchive_InspectorPaneViewMode_descriptor();
}
template <> struct is_proto_enum< ::KN::ShowArchive_KNShowMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::ShowArchive_KNShowMode>() {
  return ::KN::ShowArchive_KNShowMode_descriptor();
}
template <> struct is_proto_enum< ::KN::RecordingArchive_RecordingSyncState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::RecordingArchive_RecordingSyncState>() {
  return ::KN::RecordingArchive_RecordingSyncState_descriptor();
}
template <> struct is_proto_enum< ::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase>() {
  return ::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_descriptor();
}
template <> struct is_proto_enum< ::KN::RecordingPauseEventArchive_RecordingPauseEventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::RecordingPauseEventArchive_RecordingPauseEventType>() {
  return ::KN::RecordingPauseEventArchive_RecordingPauseEventType_descriptor();
}
template <> struct is_proto_enum< ::KN::RecordingMovieEventArchive_RecordingMovieEventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::RecordingMovieEventArchive_RecordingMovieEventType>() {
  return ::KN::RecordingMovieEventArchive_RecordingMovieEventType_descriptor();
}
template <> struct is_proto_enum< ::KN::Soundtrack_SoundtrackMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::Soundtrack_SoundtrackMode>() {
  return ::KN::Soundtrack_SoundtrackMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_KNArchives_2eproto
