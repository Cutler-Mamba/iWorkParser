// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KNCommandArchives.proto

#include "KNCommandArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace KN {
PROTOBUF_CONSTEXPR UIStateCommandGroupArchive::UIStateCommandGroupArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.slidenodestoedit_)*/{}
  , /*decltype(_impl_.masterslidenodestoapply_)*/{}
  , /*decltype(_impl_.thumbnailsizes_)*/{}
  , /*decltype(_impl_.selectedslidenodes_)*/{}
  , /*decltype(_impl_.restoreselectedslidenodes_)*/{}
  , /*decltype(_impl_.property_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.uistate_)*/nullptr} {}
struct UIStateCommandGroupArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UIStateCommandGroupArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UIStateCommandGroupArchiveDefaultTypeInternal() {}
  union {
    UIStateCommandGroupArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UIStateCommandGroupArchiveDefaultTypeInternal _UIStateCommandGroupArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideInsertDrawablesArchive::CommandSlideInsertDrawablesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.drawables_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slidenode_)*/nullptr
  , /*decltype(_impl_.atindex_)*/0
  , /*decltype(_impl_.fordrag_)*/false
  , /*decltype(_impl_.use_object_placeholder_geometry_)*/false} {}
struct CommandSlideInsertDrawablesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideInsertDrawablesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideInsertDrawablesArchiveDefaultTypeInternal() {}
  union {
    CommandSlideInsertDrawablesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideInsertDrawablesArchiveDefaultTypeInternal _CommandSlideInsertDrawablesArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideSetPlaceholdersForTagsArchive::CommandSlideSetPlaceholdersForTagsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.infos_)*/{}
  , /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.old_tags_)*/{}
  , /*decltype(_impl_.old_infos_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slide_)*/nullptr} {}
struct CommandSlideSetPlaceholdersForTagsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideSetPlaceholdersForTagsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideSetPlaceholdersForTagsArchiveDefaultTypeInternal() {}
  union {
    CommandSlideSetPlaceholdersForTagsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideSetPlaceholdersForTagsArchiveDefaultTypeInternal _CommandSlideSetPlaceholdersForTagsArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideRemoveDrawableArchive::CommandSlideRemoveDrawableArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sorteddrawables_)*/{}
  , /*decltype(_impl_.placeholdertags_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slidenode_)*/nullptr
  , /*decltype(_impl_.drawableindices_)*/nullptr
  , /*decltype(_impl_.info_using_object_placeholder_geometry_)*/nullptr
  , /*decltype(_impl_.did_match_object_placeholder_geometry_)*/false} {}
struct CommandSlideRemoveDrawableArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideRemoveDrawableArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideRemoveDrawableArchiveDefaultTypeInternal() {}
  union {
    CommandSlideRemoveDrawableArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideRemoveDrawableArchiveDefaultTypeInternal _CommandSlideRemoveDrawableArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideMoveDrawableZOrderArchive::CommandSlideMoveDrawableZOrderArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.infos_)*/{}
  , /*decltype(_impl_.old_ordered_infos_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slidenode_)*/nullptr
  , /*decltype(_impl_.indexes_)*/nullptr} {}
struct CommandSlideMoveDrawableZOrderArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideMoveDrawableZOrderArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideMoveDrawableZOrderArchiveDefaultTypeInternal() {}
  union {
    CommandSlideMoveDrawableZOrderArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideMoveDrawableZOrderArchiveDefaultTypeInternal _CommandSlideMoveDrawableZOrderArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlidePasteDrawablesArchive::CommandSlidePasteDrawablesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.commands_)*/{}
  , /*decltype(_impl_.drawables_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slide_)*/nullptr
  , /*decltype(_impl_.has_builds_)*/false} {}
struct CommandSlidePasteDrawablesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlidePasteDrawablesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlidePasteDrawablesArchiveDefaultTypeInternal() {}
  union {
    CommandSlidePasteDrawablesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlidePasteDrawablesArchiveDefaultTypeInternal _CommandSlidePasteDrawablesArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideNodeSetPropertyArchive_PropertyValue::CommandSlideNodeSetPropertyArchive_PropertyValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.database_image_)*/nullptr
  , /*decltype(_impl_.image_)*/nullptr
  , /*decltype(_impl_.boolvalue_)*/false} {}
struct CommandSlideNodeSetPropertyArchive_PropertyValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideNodeSetPropertyArchive_PropertyValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideNodeSetPropertyArchive_PropertyValueDefaultTypeInternal() {}
  union {
    CommandSlideNodeSetPropertyArchive_PropertyValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideNodeSetPropertyArchive_PropertyValueDefaultTypeInternal _CommandSlideNodeSetPropertyArchive_PropertyValue_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideNodeSetPropertyArchive::CommandSlideNodeSetPropertyArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.property_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slidenode_)*/nullptr
  , /*decltype(_impl_.oldvalue_)*/nullptr
  , /*decltype(_impl_.newvalue_)*/nullptr} {}
struct CommandSlideNodeSetPropertyArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideNodeSetPropertyArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideNodeSetPropertyArchiveDefaultTypeInternal() {}
  union {
    CommandSlideNodeSetPropertyArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideNodeSetPropertyArchiveDefaultTypeInternal _CommandSlideNodeSetPropertyArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideSetValueArchive_PropertyValue::CommandSlideSetValueArchive_PropertyValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.objectvalue_)*/nullptr
  , /*decltype(_impl_.fill_)*/nullptr
  , /*decltype(_impl_.boolvalue_)*/false} {}
struct CommandSlideSetValueArchive_PropertyValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideSetValueArchive_PropertyValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideSetValueArchive_PropertyValueDefaultTypeInternal() {}
  union {
    CommandSlideSetValueArchive_PropertyValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideSetValueArchive_PropertyValueDefaultTypeInternal _CommandSlideSetValueArchive_PropertyValue_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideSetValueArchive::CommandSlideSetValueArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.property_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slide_)*/nullptr
  , /*decltype(_impl_.oldvalue_)*/nullptr
  , /*decltype(_impl_.newvalue_)*/nullptr
  , /*decltype(_impl_.oldslidestyle_)*/nullptr} {}
struct CommandSlideSetValueArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideSetValueArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideSetValueArchiveDefaultTypeInternal() {}
  union {
    CommandSlideSetValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideSetValueArchiveDefaultTypeInternal _CommandSlideSetValueArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideSetStyleArchive::CommandSlideSetStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slide_)*/nullptr
  , /*decltype(_impl_.slide_style_)*/nullptr
  , /*decltype(_impl_.old_slide_style_)*/nullptr} {}
struct CommandSlideSetStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideSetStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideSetStyleArchiveDefaultTypeInternal() {}
  union {
    CommandSlideSetStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideSetStyleArchiveDefaultTypeInternal _CommandSlideSetStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandShowMarkOutOfSyncRecordingArchive::CommandShowMarkOutOfSyncRecordingArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.show_)*/nullptr
  , /*decltype(_impl_.old_recording_)*/nullptr} {}
struct CommandShowMarkOutOfSyncRecordingArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandShowMarkOutOfSyncRecordingArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandShowMarkOutOfSyncRecordingArchiveDefaultTypeInternal() {}
  union {
    CommandShowMarkOutOfSyncRecordingArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandShowMarkOutOfSyncRecordingArchiveDefaultTypeInternal _CommandShowMarkOutOfSyncRecordingArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandShowRemoveRecordingArchive::CommandShowRemoveRecordingArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.show_)*/nullptr
  , /*decltype(_impl_.old_recording_)*/nullptr} {}
struct CommandShowRemoveRecordingArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandShowRemoveRecordingArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandShowRemoveRecordingArchiveDefaultTypeInternal() {}
  union {
    CommandShowRemoveRecordingArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandShowRemoveRecordingArchiveDefaultTypeInternal _CommandShowRemoveRecordingArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandShowReplaceRecordingArchive::CommandShowReplaceRecordingArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.show_)*/nullptr
  , /*decltype(_impl_.replacement_recording_)*/nullptr
  , /*decltype(_impl_.old_recording_)*/nullptr
  , /*decltype(_impl_.replacement_start_time_)*/0} {}
struct CommandShowReplaceRecordingArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandShowReplaceRecordingArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandShowReplaceRecordingArchiveDefaultTypeInternal() {}
  union {
    CommandShowReplaceRecordingArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandShowReplaceRecordingArchiveDefaultTypeInternal _CommandShowReplaceRecordingArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandShowSetValueArchive_PropertyValue::CommandShowSetValueArchive_PropertyValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.size_value_)*/nullptr
  , /*decltype(_impl_.double_value_)*/0
  , /*decltype(_impl_.bool_value_)*/false
  , /*decltype(_impl_.show_mode_value_)*/0} {}
struct CommandShowSetValueArchive_PropertyValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandShowSetValueArchive_PropertyValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandShowSetValueArchive_PropertyValueDefaultTypeInternal() {}
  union {
    CommandShowSetValueArchive_PropertyValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandShowSetValueArchive_PropertyValueDefaultTypeInternal _CommandShowSetValueArchive_PropertyValue_default_instance_;
PROTOBUF_CONSTEXPR CommandShowSetValueArchive::CommandShowSetValueArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.property_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.show_)*/nullptr
  , /*decltype(_impl_.old_value_)*/nullptr
  , /*decltype(_impl_.new_value_)*/nullptr} {}
struct CommandShowSetValueArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandShowSetValueArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandShowSetValueArchiveDefaultTypeInternal() {}
  union {
    CommandShowSetValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandShowSetValueArchiveDefaultTypeInternal _CommandShowSetValueArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandShowInsertSlideArchive::CommandShowInsertSlideArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.show_)*/nullptr
  , /*decltype(_impl_.slidenode_)*/nullptr
  , /*decltype(_impl_.parentslidenode_)*/nullptr
  , /*decltype(_impl_.childindex_)*/0u
  , /*decltype(_impl_.kind_)*/0} {}
struct CommandShowInsertSlideArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandShowInsertSlideArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandShowInsertSlideArchiveDefaultTypeInternal() {}
  union {
    CommandShowInsertSlideArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandShowInsertSlideArchiveDefaultTypeInternal _CommandShowInsertSlideArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandShowMoveSlideArchive::CommandShowMoveSlideArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parentslidenodes_)*/{}
  , /*decltype(_impl_.childindices_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.show_)*/nullptr
  , /*decltype(_impl_.slidenode_)*/nullptr} {}
struct CommandShowMoveSlideArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandShowMoveSlideArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandShowMoveSlideArchiveDefaultTypeInternal() {}
  union {
    CommandShowMoveSlideArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandShowMoveSlideArchiveDefaultTypeInternal _CommandShowMoveSlideArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandShowRemoveSlideArchive::CommandShowRemoveSlideArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.show_)*/nullptr
  , /*decltype(_impl_.slidenode_)*/nullptr
  , /*decltype(_impl_.parentslidenode_)*/nullptr
  , /*decltype(_impl_.childindex_)*/0u} {}
struct CommandShowRemoveSlideArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandShowRemoveSlideArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandShowRemoveSlideArchiveDefaultTypeInternal() {}
  union {
    CommandShowRemoveSlideArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandShowRemoveSlideArchiveDefaultTypeInternal _CommandShowRemoveSlideArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandShowChangeThemeArchive::CommandShowChangeThemeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.template_identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.old_template_identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.show_)*/nullptr
  , /*decltype(_impl_.theme_)*/nullptr
  , /*decltype(_impl_.old_theme_)*/nullptr} {}
struct CommandShowChangeThemeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandShowChangeThemeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandShowChangeThemeArchiveDefaultTypeInternal() {}
  union {
    CommandShowChangeThemeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandShowChangeThemeArchiveDefaultTypeInternal _CommandShowChangeThemeArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandMoveMastersArchive::CommandMoveMastersArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.master_slides_)*/{}
  , /*decltype(_impl_.previous_indexes_keys_)*/{}
  , /*decltype(_impl_.previous_indexes_values_)*/{}
  , /*decltype(_impl_.final_master_arrangement_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.theme_)*/nullptr} {}
struct CommandMoveMastersArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandMoveMastersArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandMoveMastersArchiveDefaultTypeInternal() {}
  union {
    CommandMoveMastersArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandMoveMastersArchiveDefaultTypeInternal _CommandMoveMastersArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandInsertMasterArchive::CommandInsertMasterArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.theme_)*/nullptr
  , /*decltype(_impl_.master_slide_node_)*/nullptr
  , /*decltype(_impl_.insertion_index_)*/0u
  , /*decltype(_impl_.was_inserted_with_drop_)*/false} {}
struct CommandInsertMasterArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandInsertMasterArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandInsertMasterArchiveDefaultTypeInternal() {}
  union {
    CommandInsertMasterArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandInsertMasterArchiveDefaultTypeInternal _CommandInsertMasterArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandRemoveMasterArchive::CommandRemoveMasterArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.theme_)*/nullptr
  , /*decltype(_impl_.master_slide_node_)*/nullptr
  , /*decltype(_impl_.master_change_commands_)*/nullptr
  , /*decltype(_impl_.previous_index_)*/0u} {}
struct CommandRemoveMasterArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandRemoveMasterArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandRemoveMasterArchiveDefaultTypeInternal() {}
  union {
    CommandRemoveMasterArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandRemoveMasterArchiveDefaultTypeInternal _CommandRemoveMasterArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandRenameMasterArchive::CommandRenameMasterArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.master_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.old_master_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.master_slide_)*/nullptr} {}
struct CommandRenameMasterArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandRenameMasterArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandRenameMasterArchiveDefaultTypeInternal() {}
  union {
    CommandRenameMasterArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandRenameMasterArchiveDefaultTypeInternal _CommandRenameMasterArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideInsertBuildArchive::CommandSlideInsertBuildArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slidenode_)*/nullptr
  , /*decltype(_impl_.build_)*/nullptr
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.shouldcreatechunks_)*/false} {}
struct CommandSlideInsertBuildArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideInsertBuildArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideInsertBuildArchiveDefaultTypeInternal() {}
  union {
    CommandSlideInsertBuildArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideInsertBuildArchiveDefaultTypeInternal _CommandSlideInsertBuildArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideRemoveBuildArchive::CommandSlideRemoveBuildArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slidenode_)*/nullptr
  , /*decltype(_impl_.build_)*/nullptr
  , /*decltype(_impl_.index_)*/0u} {}
struct CommandSlideRemoveBuildArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideRemoveBuildArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideRemoveBuildArchiveDefaultTypeInternal() {}
  union {
    CommandSlideRemoveBuildArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideRemoveBuildArchiveDefaultTypeInternal _CommandSlideRemoveBuildArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideMoveBuildWithoutMovingChunksArchive::CommandSlideMoveBuildWithoutMovingChunksArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slidenode_)*/nullptr
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.oldindex_)*/0u} {}
struct CommandSlideMoveBuildWithoutMovingChunksArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideMoveBuildWithoutMovingChunksArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideMoveBuildWithoutMovingChunksArchiveDefaultTypeInternal() {}
  union {
    CommandSlideMoveBuildWithoutMovingChunksArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideMoveBuildWithoutMovingChunksArchiveDefaultTypeInternal _CommandSlideMoveBuildWithoutMovingChunksArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideMoveBuildsArchive::CommandSlideMoveBuildsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.builds_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.toindex_)*/0u} {}
struct CommandSlideMoveBuildsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideMoveBuildsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideMoveBuildsArchiveDefaultTypeInternal() {}
  union {
    CommandSlideMoveBuildsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideMoveBuildsArchiveDefaultTypeInternal _CommandSlideMoveBuildsArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideInsertBuildChunkArchive::CommandSlideInsertBuildChunkArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slide_)*/nullptr
  , /*decltype(_impl_.buildchunk_)*/nullptr
  , /*decltype(_impl_.index_)*/0u} {}
struct CommandSlideInsertBuildChunkArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideInsertBuildChunkArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideInsertBuildChunkArchiveDefaultTypeInternal() {}
  union {
    CommandSlideInsertBuildChunkArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideInsertBuildChunkArchiveDefaultTypeInternal _CommandSlideInsertBuildChunkArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideRemoveBuildChunkArchive::CommandSlideRemoveBuildChunkArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slide_)*/nullptr
  , /*decltype(_impl_.buildchunk_)*/nullptr
  , /*decltype(_impl_.index_)*/0u} {}
struct CommandSlideRemoveBuildChunkArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideRemoveBuildChunkArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideRemoveBuildChunkArchiveDefaultTypeInternal() {}
  union {
    CommandSlideRemoveBuildChunkArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideRemoveBuildChunkArchiveDefaultTypeInternal _CommandSlideRemoveBuildChunkArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideMoveBuildChunkArchive::CommandSlideMoveBuildChunkArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slide_)*/nullptr
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.oldindex_)*/0u} {}
struct CommandSlideMoveBuildChunkArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideMoveBuildChunkArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideMoveBuildChunkArchiveDefaultTypeInternal() {}
  union {
    CommandSlideMoveBuildChunkArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideMoveBuildChunkArchiveDefaultTypeInternal _CommandSlideMoveBuildChunkArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideMoveBuildChunksArchive::CommandSlideMoveBuildChunksArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.buildchunks_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.toindex_)*/0u} {}
struct CommandSlideMoveBuildChunksArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideMoveBuildChunksArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideMoveBuildChunksArchiveDefaultTypeInternal() {}
  union {
    CommandSlideMoveBuildChunksArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideMoveBuildChunksArchiveDefaultTypeInternal _CommandSlideMoveBuildChunksArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandBuildSetValueArchive::CommandBuildSetValueArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.effects_)*/{}
  , /*decltype(_impl_.types_)*/{}
  , /*decltype(_impl_.deliveries_)*/{}
  , /*decltype(_impl_.directions_)*/{}
  , /*decltype(_impl_.durations_)*/{}
  , /*decltype(_impl_.delays_)*/{}
  , /*decltype(_impl_.delayautomaticafters_)*/{}
  , /*decltype(_impl_.delayautomaticwiths_)*/{}
  , /*decltype(_impl_.eventtriggers_)*/{}
  , /*decltype(_impl_.property_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.build_)*/nullptr} {}
struct CommandBuildSetValueArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandBuildSetValueArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandBuildSetValueArchiveDefaultTypeInternal() {}
  union {
    CommandBuildSetValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandBuildSetValueArchiveDefaultTypeInternal _CommandBuildSetValueArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandBuildChunkSetValueArchive::CommandBuildChunkSetValueArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.referents_)*/{}
  , /*decltype(_impl_.automatics_)*/{}
  , /*decltype(_impl_.durations_)*/{}
  , /*decltype(_impl_.delays_)*/{}
  , /*decltype(_impl_.property_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.buildchunk_)*/nullptr
  , /*decltype(_impl_.oldownsvalue_)*/false} {}
struct CommandBuildChunkSetValueArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandBuildChunkSetValueArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandBuildChunkSetValueArchiveDefaultTypeInternal() {}
  union {
    CommandBuildChunkSetValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandBuildChunkSetValueArchiveDefaultTypeInternal _CommandBuildChunkSetValueArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandTransitionSetValueArchive::CommandTransitionSetValueArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.effects_)*/{}
  , /*decltype(_impl_.unused_)*/{}
  , /*decltype(_impl_.unused2_)*/{}
  , /*decltype(_impl_.unused3_)*/{}
  , /*decltype(_impl_.durations_)*/{}
  , /*decltype(_impl_.directions_)*/{}
  , /*decltype(_impl_.isautomatics_)*/{}
  , /*decltype(_impl_.delays_)*/{}
  , /*decltype(_impl_.property_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slidenode_)*/nullptr} {}
struct CommandTransitionSetValueArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandTransitionSetValueArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandTransitionSetValueArchiveDefaultTypeInternal() {}
  union {
    CommandTransitionSetValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandTransitionSetValueArchiveDefaultTypeInternal _CommandTransitionSetValueArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandShowSetSlideNumberVisibilityArchive::CommandShowSetSlideNumberVisibilityArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.show_)*/nullptr
  , /*decltype(_impl_.providerundo_)*/nullptr
  , /*decltype(_impl_.slidenumbersvisible_)*/false} {}
struct CommandShowSetSlideNumberVisibilityArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandShowSetSlideNumberVisibilityArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandShowSetSlideNumberVisibilityArchiveDefaultTypeInternal() {}
  union {
    CommandShowSetSlideNumberVisibilityArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandShowSetSlideNumberVisibilityArchiveDefaultTypeInternal _CommandShowSetSlideNumberVisibilityArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandMasterRescaleArchive::CommandMasterRescaleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.master_)*/nullptr} {}
struct CommandMasterRescaleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandMasterRescaleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandMasterRescaleArchiveDefaultTypeInternal() {}
  union {
    CommandMasterRescaleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandMasterRescaleArchiveDefaultTypeInternal _CommandMasterRescaleArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandMasterSetThumbnailTextArchive::CommandMasterSetThumbnailTextArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.new_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.old_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.master_)*/nullptr
  , /*decltype(_impl_.is_body_)*/false} {}
struct CommandMasterSetThumbnailTextArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandMasterSetThumbnailTextArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandMasterSetThumbnailTextArchiveDefaultTypeInternal() {}
  union {
    CommandMasterSetThumbnailTextArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandMasterSetThumbnailTextArchiveDefaultTypeInternal _CommandMasterSetThumbnailTextArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandMasterSetBodyStylesArchive::CommandMasterSetBodyStylesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.new_paragraph_styles_)*/{}
  , /*decltype(_impl_.new_list_styles_)*/{}
  , /*decltype(_impl_.old_paragraph_styles_)*/{}
  , /*decltype(_impl_.old_list_styles_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.master_)*/nullptr} {}
struct CommandMasterSetBodyStylesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandMasterSetBodyStylesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandMasterSetBodyStylesArchiveDefaultTypeInternal() {}
  union {
    CommandMasterSetBodyStylesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandMasterSetBodyStylesArchiveDefaultTypeInternal _CommandMasterSetBodyStylesArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideApplyThemeArchive::CommandSlideApplyThemeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.blob_)*/nullptr} {}
struct CommandSlideApplyThemeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideApplyThemeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideApplyThemeArchiveDefaultTypeInternal() {}
  union {
    CommandSlideApplyThemeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideApplyThemeArchiveDefaultTypeInternal _CommandSlideApplyThemeArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandChangeMasterSlideArchive::CommandChangeMasterSlideArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slide_)*/nullptr
  , /*decltype(_impl_.master_)*/nullptr
  , /*decltype(_impl_.placeholder_commands_)*/nullptr} {}
struct CommandChangeMasterSlideArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandChangeMasterSlideArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandChangeMasterSlideArchiveDefaultTypeInternal() {}
  union {
    CommandChangeMasterSlideArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandChangeMasterSlideArchiveDefaultTypeInternal _CommandChangeMasterSlideArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlidePrimitiveSetMasterArchive::CommandSlidePrimitiveSetMasterArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slide_)*/nullptr
  , /*decltype(_impl_.master_)*/nullptr
  , /*decltype(_impl_.old_master_)*/nullptr} {}
struct CommandSlidePrimitiveSetMasterArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlidePrimitiveSetMasterArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlidePrimitiveSetMasterArchiveDefaultTypeInternal() {}
  union {
    CommandSlidePrimitiveSetMasterArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlidePrimitiveSetMasterArchiveDefaultTypeInternal _CommandSlidePrimitiveSetMasterArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSlideReapplyMasterArchive::CommandSlideReapplyMasterArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.reapply_accumulated_command_)*/nullptr} {}
struct CommandSlideReapplyMasterArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSlideReapplyMasterArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSlideReapplyMasterArchiveDefaultTypeInternal() {}
  union {
    CommandSlideReapplyMasterArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSlideReapplyMasterArchiveDefaultTypeInternal _CommandSlideReapplyMasterArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandShowSetSoundtrack::CommandShowSetSoundtrack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.show_)*/nullptr
  , /*decltype(_impl_.soundtrack_)*/nullptr
  , /*decltype(_impl_.old_soundtrack_)*/nullptr} {}
struct CommandShowSetSoundtrackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandShowSetSoundtrackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandShowSetSoundtrackDefaultTypeInternal() {}
  union {
    CommandShowSetSoundtrack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandShowSetSoundtrackDefaultTypeInternal _CommandShowSetSoundtrack_default_instance_;
PROTOBUF_CONSTEXPR CommandSoundtrackSetValue_PropertyValue::CommandSoundtrackSetValue_PropertyValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.media_reference_values_)*/{}
  , /*decltype(_impl_.double_value_)*/0
  , /*decltype(_impl_.mode_value_)*/0} {}
struct CommandSoundtrackSetValue_PropertyValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSoundtrackSetValue_PropertyValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSoundtrackSetValue_PropertyValueDefaultTypeInternal() {}
  union {
    CommandSoundtrackSetValue_PropertyValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSoundtrackSetValue_PropertyValueDefaultTypeInternal _CommandSoundtrackSetValue_PropertyValue_default_instance_;
PROTOBUF_CONSTEXPR CommandSoundtrackSetValue::CommandSoundtrackSetValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.property_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.soundtrack_)*/nullptr
  , /*decltype(_impl_.old_value_)*/nullptr
  , /*decltype(_impl_.new_value_)*/nullptr} {}
struct CommandSoundtrackSetValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSoundtrackSetValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSoundtrackSetValueDefaultTypeInternal() {}
  union {
    CommandSoundtrackSetValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSoundtrackSetValueDefaultTypeInternal _CommandSoundtrackSetValue_default_instance_;
PROTOBUF_CONSTEXPR SlideCollectionCommandSelectionBehaviorArchive::SlideCollectionCommandSelectionBehaviorArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.archived_new_selection_)*/nullptr
  , /*decltype(_impl_.archived_old_selection_)*/nullptr
  , /*decltype(_impl_.type_)*/0} {}
struct SlideCollectionCommandSelectionBehaviorArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SlideCollectionCommandSelectionBehaviorArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SlideCollectionCommandSelectionBehaviorArchiveDefaultTypeInternal() {}
  union {
    SlideCollectionCommandSelectionBehaviorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SlideCollectionCommandSelectionBehaviorArchiveDefaultTypeInternal _SlideCollectionCommandSelectionBehaviorArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartInfoGeometryCommandArchive::ChartInfoGeometryCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct ChartInfoGeometryCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartInfoGeometryCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartInfoGeometryCommandArchiveDefaultTypeInternal() {}
  union {
    ChartInfoGeometryCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartInfoGeometryCommandArchiveDefaultTypeInternal _ChartInfoGeometryCommandArchive_default_instance_;
}  // namespace KN
static ::_pb::Metadata file_level_metadata_KNCommandArchives_2eproto[48];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_KNCommandArchives_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_KNCommandArchives_2eproto = nullptr;

const uint32_t TableStruct_KNCommandArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::KN::UIStateCommandGroupArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateCommandGroupArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::UIStateCommandGroupArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateCommandGroupArchive, _impl_.uistate_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateCommandGroupArchive, _impl_.property_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateCommandGroupArchive, _impl_.slidenodestoedit_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateCommandGroupArchive, _impl_.masterslidenodestoapply_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateCommandGroupArchive, _impl_.thumbnailsizes_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateCommandGroupArchive, _impl_.selectedslidenodes_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateCommandGroupArchive, _impl_.restoreselectedslidenodes_),
  1,
  2,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, _impl_.slidenode_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, _impl_.drawables_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, _impl_.fordrag_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, _impl_.atindex_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, _impl_.use_object_placeholder_geometry_),
  0,
  1,
  ~0u,
  3,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetPlaceholdersForTagsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetPlaceholdersForTagsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetPlaceholdersForTagsArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetPlaceholdersForTagsArchive, _impl_.slide_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetPlaceholdersForTagsArchive, _impl_.infos_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetPlaceholdersForTagsArchive, _impl_.tags_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetPlaceholdersForTagsArchive, _impl_.old_infos_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetPlaceholdersForTagsArchive, _impl_.old_tags_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, _impl_.slidenode_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, _impl_.sorteddrawables_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, _impl_.drawableindices_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, _impl_.placeholdertags_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, _impl_.info_using_object_placeholder_geometry_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, _impl_.did_match_object_placeholder_geometry_),
  0,
  1,
  ~0u,
  2,
  ~0u,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveDrawableZOrderArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveDrawableZOrderArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveDrawableZOrderArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveDrawableZOrderArchive, _impl_.slidenode_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveDrawableZOrderArchive, _impl_.infos_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveDrawableZOrderArchive, _impl_.old_ordered_infos_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveDrawableZOrderArchive, _impl_.indexes_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePasteDrawablesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePasteDrawablesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePasteDrawablesArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePasteDrawablesArchive, _impl_.commands_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePasteDrawablesArchive, _impl_.slide_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePasteDrawablesArchive, _impl_.drawables_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePasteDrawablesArchive, _impl_.has_builds_),
  0,
  ~0u,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetPropertyArchive_PropertyValue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetPropertyArchive_PropertyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetPropertyArchive_PropertyValue, _impl_.boolvalue_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetPropertyArchive_PropertyValue, _impl_.image_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetPropertyArchive_PropertyValue, _impl_.database_image_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetPropertyArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetPropertyArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetPropertyArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetPropertyArchive, _impl_.slidenode_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetPropertyArchive, _impl_.property_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetPropertyArchive, _impl_.oldvalue_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetPropertyArchive, _impl_.newvalue_),
  1,
  2,
  0,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetValueArchive_PropertyValue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetValueArchive_PropertyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetValueArchive_PropertyValue, _impl_.boolvalue_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetValueArchive_PropertyValue, _impl_.objectvalue_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetValueArchive_PropertyValue, _impl_.fill_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetValueArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetValueArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetValueArchive, _impl_.slide_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetValueArchive, _impl_.property_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetValueArchive, _impl_.oldvalue_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetValueArchive, _impl_.newvalue_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetValueArchive, _impl_.oldslidestyle_),
  1,
  2,
  0,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetStyleArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetStyleArchive, _impl_.slide_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetStyleArchive, _impl_.slide_style_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetStyleArchive, _impl_.old_slide_style_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingArchive, _impl_.show_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingArchive, _impl_.old_recording_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveRecordingArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveRecordingArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveRecordingArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveRecordingArchive, _impl_.show_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveRecordingArchive, _impl_.old_recording_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowReplaceRecordingArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowReplaceRecordingArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowReplaceRecordingArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowReplaceRecordingArchive, _impl_.show_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowReplaceRecordingArchive, _impl_.replacement_recording_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowReplaceRecordingArchive, _impl_.replacement_start_time_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowReplaceRecordingArchive, _impl_.old_recording_),
  0,
  1,
  2,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive_PropertyValue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive_PropertyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive_PropertyValue, _impl_.bool_value_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive_PropertyValue, _impl_.double_value_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive_PropertyValue, _impl_.show_mode_value_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive_PropertyValue, _impl_.size_value_),
  2,
  1,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive, _impl_.show_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive, _impl_.property_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive, _impl_.old_value_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive, _impl_.new_value_),
  1,
  2,
  0,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, _impl_.show_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, _impl_.slidenode_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, _impl_.childindex_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, _impl_.parentslidenode_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, _impl_.kind_),
  0,
  1,
  2,
  4,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMoveSlideArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMoveSlideArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMoveSlideArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMoveSlideArchive, _impl_.show_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMoveSlideArchive, _impl_.slidenode_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMoveSlideArchive, _impl_.parentslidenodes_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMoveSlideArchive, _impl_.childindices_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, _impl_.show_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, _impl_.slidenode_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, _impl_.parentslidenode_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, _impl_.childindex_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive, _impl_.show_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive, _impl_.theme_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive, _impl_.old_theme_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive, _impl_.template_identifier_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive, _impl_.old_template_identifier_),
  2,
  3,
  4,
  5,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::CommandMoveMastersArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMoveMastersArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandMoveMastersArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMoveMastersArchive, _impl_.theme_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMoveMastersArchive, _impl_.master_slides_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMoveMastersArchive, _impl_.previous_indexes_keys_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMoveMastersArchive, _impl_.previous_indexes_values_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMoveMastersArchive, _impl_.final_master_arrangement_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandInsertMasterArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandInsertMasterArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandInsertMasterArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandInsertMasterArchive, _impl_.theme_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandInsertMasterArchive, _impl_.master_slide_node_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandInsertMasterArchive, _impl_.insertion_index_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandInsertMasterArchive, _impl_.was_inserted_with_drop_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::KN::CommandRemoveMasterArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandRemoveMasterArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandRemoveMasterArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandRemoveMasterArchive, _impl_.theme_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandRemoveMasterArchive, _impl_.master_slide_node_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandRemoveMasterArchive, _impl_.previous_index_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandRemoveMasterArchive, _impl_.master_change_commands_),
  0,
  1,
  2,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::CommandRenameMasterArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandRenameMasterArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandRenameMasterArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandRenameMasterArchive, _impl_.master_slide_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandRenameMasterArchive, _impl_.master_name_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandRenameMasterArchive, _impl_.old_master_name_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildArchive, _impl_.slidenode_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildArchive, _impl_.build_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildArchive, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildArchive, _impl_.shouldcreatechunks_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildArchive, _impl_.slidenode_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildArchive, _impl_.build_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildArchive, _impl_.index_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildWithoutMovingChunksArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildWithoutMovingChunksArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildWithoutMovingChunksArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildWithoutMovingChunksArchive, _impl_.slidenode_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildWithoutMovingChunksArchive, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildWithoutMovingChunksArchive, _impl_.oldindex_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildsArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildsArchive, _impl_.builds_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildsArchive, _impl_.toindex_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildChunkArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildChunkArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildChunkArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildChunkArchive, _impl_.slide_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildChunkArchive, _impl_.buildchunk_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildChunkArchive, _impl_.index_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildChunkArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildChunkArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildChunkArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildChunkArchive, _impl_.slide_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildChunkArchive, _impl_.buildchunk_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildChunkArchive, _impl_.index_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildChunkArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildChunkArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildChunkArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildChunkArchive, _impl_.slide_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildChunkArchive, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildChunkArchive, _impl_.oldindex_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildChunksArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildChunksArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildChunksArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildChunksArchive, _impl_.buildchunks_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildChunksArchive, _impl_.toindex_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _impl_.build_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _impl_.property_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _impl_.effects_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _impl_.types_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _impl_.deliveries_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _impl_.directions_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _impl_.durations_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _impl_.delays_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _impl_.delayautomaticafters_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _impl_.delayautomaticwiths_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _impl_.eventtriggers_),
  1,
  2,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildChunkSetValueArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildChunkSetValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildChunkSetValueArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildChunkSetValueArchive, _impl_.buildchunk_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildChunkSetValueArchive, _impl_.property_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildChunkSetValueArchive, _impl_.referents_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildChunkSetValueArchive, _impl_.automatics_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildChunkSetValueArchive, _impl_.durations_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildChunkSetValueArchive, _impl_.delays_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildChunkSetValueArchive, _impl_.oldownsvalue_),
  1,
  2,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::CommandTransitionSetValueArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTransitionSetValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandTransitionSetValueArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTransitionSetValueArchive, _impl_.slidenode_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTransitionSetValueArchive, _impl_.property_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTransitionSetValueArchive, _impl_.effects_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTransitionSetValueArchive, _impl_.unused_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTransitionSetValueArchive, _impl_.unused2_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTransitionSetValueArchive, _impl_.unused3_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTransitionSetValueArchive, _impl_.durations_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTransitionSetValueArchive, _impl_.directions_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTransitionSetValueArchive, _impl_.isautomatics_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTransitionSetValueArchive, _impl_.delays_),
  1,
  2,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSlideNumberVisibilityArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSlideNumberVisibilityArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSlideNumberVisibilityArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSlideNumberVisibilityArchive, _impl_.show_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSlideNumberVisibilityArchive, _impl_.slidenumbersvisible_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSlideNumberVisibilityArchive, _impl_.providerundo_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::CommandMasterRescaleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMasterRescaleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandMasterRescaleArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMasterRescaleArchive, _impl_.master_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::CommandMasterSetThumbnailTextArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMasterSetThumbnailTextArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandMasterSetThumbnailTextArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMasterSetThumbnailTextArchive, _impl_.master_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMasterSetThumbnailTextArchive, _impl_.is_body_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMasterSetThumbnailTextArchive, _impl_.new_text_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMasterSetThumbnailTextArchive, _impl_.old_text_),
  2,
  3,
  4,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::CommandMasterSetBodyStylesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMasterSetBodyStylesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandMasterSetBodyStylesArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMasterSetBodyStylesArchive, _impl_.master_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMasterSetBodyStylesArchive, _impl_.new_paragraph_styles_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMasterSetBodyStylesArchive, _impl_.new_list_styles_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMasterSetBodyStylesArchive, _impl_.old_paragraph_styles_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMasterSetBodyStylesArchive, _impl_.old_list_styles_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideApplyThemeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideApplyThemeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideApplyThemeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideApplyThemeArchive, _impl_.blob_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::CommandChangeMasterSlideArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandChangeMasterSlideArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandChangeMasterSlideArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandChangeMasterSlideArchive, _impl_.slide_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandChangeMasterSlideArchive, _impl_.master_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandChangeMasterSlideArchive, _impl_.placeholder_commands_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePrimitiveSetMasterArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePrimitiveSetMasterArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePrimitiveSetMasterArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePrimitiveSetMasterArchive, _impl_.slide_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePrimitiveSetMasterArchive, _impl_.master_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePrimitiveSetMasterArchive, _impl_.old_master_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideReapplyMasterArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideReapplyMasterArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideReapplyMasterArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideReapplyMasterArchive, _impl_.reapply_accumulated_command_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSoundtrack, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSoundtrack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSoundtrack, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSoundtrack, _impl_.show_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSoundtrack, _impl_.soundtrack_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSoundtrack, _impl_.old_soundtrack_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue_PropertyValue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue_PropertyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue_PropertyValue, _impl_.double_value_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue_PropertyValue, _impl_.mode_value_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue_PropertyValue, _impl_.media_reference_values_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue, _impl_.soundtrack_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue, _impl_.property_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue, _impl_.old_value_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue, _impl_.new_value_),
  1,
  2,
  0,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionCommandSelectionBehaviorArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionCommandSelectionBehaviorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionCommandSelectionBehaviorArchive, _impl_.archived_new_selection_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionCommandSelectionBehaviorArchive, _impl_.archived_old_selection_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionCommandSelectionBehaviorArchive, _impl_.type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::ChartInfoGeometryCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::ChartInfoGeometryCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::ChartInfoGeometryCommandArchive, _impl_.super_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, -1, sizeof(::KN::UIStateCommandGroupArchive)},
  { 22, 34, -1, sizeof(::KN::CommandSlideInsertDrawablesArchive)},
  { 40, 52, -1, sizeof(::KN::CommandSlideSetPlaceholdersForTagsArchive)},
  { 58, 71, -1, sizeof(::KN::CommandSlideRemoveDrawableArchive)},
  { 78, 89, -1, sizeof(::KN::CommandSlideMoveDrawableZOrderArchive)},
  { 94, 105, -1, sizeof(::KN::CommandSlidePasteDrawablesArchive)},
  { 110, 119, -1, sizeof(::KN::CommandSlideNodeSetPropertyArchive_PropertyValue)},
  { 122, 133, -1, sizeof(::KN::CommandSlideNodeSetPropertyArchive)},
  { 138, 147, -1, sizeof(::KN::CommandSlideSetValueArchive_PropertyValue)},
  { 150, 162, -1, sizeof(::KN::CommandSlideSetValueArchive)},
  { 168, 178, -1, sizeof(::KN::CommandSlideSetStyleArchive)},
  { 182, 191, -1, sizeof(::KN::CommandShowMarkOutOfSyncRecordingArchive)},
  { 194, 203, -1, sizeof(::KN::CommandShowRemoveRecordingArchive)},
  { 206, 217, -1, sizeof(::KN::CommandShowReplaceRecordingArchive)},
  { 222, 232, -1, sizeof(::KN::CommandShowSetValueArchive_PropertyValue)},
  { 236, 247, -1, sizeof(::KN::CommandShowSetValueArchive)},
  { 252, 264, -1, sizeof(::KN::CommandShowInsertSlideArchive)},
  { 270, 281, -1, sizeof(::KN::CommandShowMoveSlideArchive)},
  { 286, 297, -1, sizeof(::KN::CommandShowRemoveSlideArchive)},
  { 302, 314, -1, sizeof(::KN::CommandShowChangeThemeArchive)},
  { 320, 332, -1, sizeof(::KN::CommandMoveMastersArchive)},
  { 338, 349, -1, sizeof(::KN::CommandInsertMasterArchive)},
  { 354, 365, -1, sizeof(::KN::CommandRemoveMasterArchive)},
  { 370, 380, -1, sizeof(::KN::CommandRenameMasterArchive)},
  { 384, 395, -1, sizeof(::KN::CommandSlideInsertBuildArchive)},
  { 400, 410, -1, sizeof(::KN::CommandSlideRemoveBuildArchive)},
  { 414, 424, -1, sizeof(::KN::CommandSlideMoveBuildWithoutMovingChunksArchive)},
  { 428, 437, -1, sizeof(::KN::CommandSlideMoveBuildsArchive)},
  { 440, 450, -1, sizeof(::KN::CommandSlideInsertBuildChunkArchive)},
  { 454, 464, -1, sizeof(::KN::CommandSlideRemoveBuildChunkArchive)},
  { 468, 478, -1, sizeof(::KN::CommandSlideMoveBuildChunkArchive)},
  { 482, 491, -1, sizeof(::KN::CommandSlideMoveBuildChunksArchive)},
  { 494, 512, -1, sizeof(::KN::CommandBuildSetValueArchive)},
  { 524, 538, -1, sizeof(::KN::CommandBuildChunkSetValueArchive)},
  { 546, 563, -1, sizeof(::KN::CommandTransitionSetValueArchive)},
  { 574, 584, -1, sizeof(::KN::CommandShowSetSlideNumberVisibilityArchive)},
  { 588, 596, -1, sizeof(::KN::CommandMasterRescaleArchive)},
  { 598, 609, -1, sizeof(::KN::CommandMasterSetThumbnailTextArchive)},
  { 614, 626, -1, sizeof(::KN::CommandMasterSetBodyStylesArchive)},
  { 632, 640, -1, sizeof(::KN::CommandSlideApplyThemeArchive)},
  { 642, 652, -1, sizeof(::KN::CommandChangeMasterSlideArchive)},
  { 656, 666, -1, sizeof(::KN::CommandSlidePrimitiveSetMasterArchive)},
  { 670, 678, -1, sizeof(::KN::CommandSlideReapplyMasterArchive)},
  { 680, 690, -1, sizeof(::KN::CommandShowSetSoundtrack)},
  { 694, 703, -1, sizeof(::KN::CommandSoundtrackSetValue_PropertyValue)},
  { 706, 717, -1, sizeof(::KN::CommandSoundtrackSetValue)},
  { 722, 731, -1, sizeof(::KN::SlideCollectionCommandSelectionBehaviorArchive)},
  { 734, 741, -1, sizeof(::KN::ChartInfoGeometryCommandArchive)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::KN::_UIStateCommandGroupArchive_default_instance_._instance,
  &::KN::_CommandSlideInsertDrawablesArchive_default_instance_._instance,
  &::KN::_CommandSlideSetPlaceholdersForTagsArchive_default_instance_._instance,
  &::KN::_CommandSlideRemoveDrawableArchive_default_instance_._instance,
  &::KN::_CommandSlideMoveDrawableZOrderArchive_default_instance_._instance,
  &::KN::_CommandSlidePasteDrawablesArchive_default_instance_._instance,
  &::KN::_CommandSlideNodeSetPropertyArchive_PropertyValue_default_instance_._instance,
  &::KN::_CommandSlideNodeSetPropertyArchive_default_instance_._instance,
  &::KN::_CommandSlideSetValueArchive_PropertyValue_default_instance_._instance,
  &::KN::_CommandSlideSetValueArchive_default_instance_._instance,
  &::KN::_CommandSlideSetStyleArchive_default_instance_._instance,
  &::KN::_CommandShowMarkOutOfSyncRecordingArchive_default_instance_._instance,
  &::KN::_CommandShowRemoveRecordingArchive_default_instance_._instance,
  &::KN::_CommandShowReplaceRecordingArchive_default_instance_._instance,
  &::KN::_CommandShowSetValueArchive_PropertyValue_default_instance_._instance,
  &::KN::_CommandShowSetValueArchive_default_instance_._instance,
  &::KN::_CommandShowInsertSlideArchive_default_instance_._instance,
  &::KN::_CommandShowMoveSlideArchive_default_instance_._instance,
  &::KN::_CommandShowRemoveSlideArchive_default_instance_._instance,
  &::KN::_CommandShowChangeThemeArchive_default_instance_._instance,
  &::KN::_CommandMoveMastersArchive_default_instance_._instance,
  &::KN::_CommandInsertMasterArchive_default_instance_._instance,
  &::KN::_CommandRemoveMasterArchive_default_instance_._instance,
  &::KN::_CommandRenameMasterArchive_default_instance_._instance,
  &::KN::_CommandSlideInsertBuildArchive_default_instance_._instance,
  &::KN::_CommandSlideRemoveBuildArchive_default_instance_._instance,
  &::KN::_CommandSlideMoveBuildWithoutMovingChunksArchive_default_instance_._instance,
  &::KN::_CommandSlideMoveBuildsArchive_default_instance_._instance,
  &::KN::_CommandSlideInsertBuildChunkArchive_default_instance_._instance,
  &::KN::_CommandSlideRemoveBuildChunkArchive_default_instance_._instance,
  &::KN::_CommandSlideMoveBuildChunkArchive_default_instance_._instance,
  &::KN::_CommandSlideMoveBuildChunksArchive_default_instance_._instance,
  &::KN::_CommandBuildSetValueArchive_default_instance_._instance,
  &::KN::_CommandBuildChunkSetValueArchive_default_instance_._instance,
  &::KN::_CommandTransitionSetValueArchive_default_instance_._instance,
  &::KN::_CommandShowSetSlideNumberVisibilityArchive_default_instance_._instance,
  &::KN::_CommandMasterRescaleArchive_default_instance_._instance,
  &::KN::_CommandMasterSetThumbnailTextArchive_default_instance_._instance,
  &::KN::_CommandMasterSetBodyStylesArchive_default_instance_._instance,
  &::KN::_CommandSlideApplyThemeArchive_default_instance_._instance,
  &::KN::_CommandChangeMasterSlideArchive_default_instance_._instance,
  &::KN::_CommandSlidePrimitiveSetMasterArchive_default_instance_._instance,
  &::KN::_CommandSlideReapplyMasterArchive_default_instance_._instance,
  &::KN::_CommandShowSetSoundtrack_default_instance_._instance,
  &::KN::_CommandSoundtrackSetValue_PropertyValue_default_instance_._instance,
  &::KN::_CommandSoundtrackSetValue_default_instance_._instance,
  &::KN::_SlideCollectionCommandSelectionBehaviorArchive_default_instance_._instance,
  &::KN::_ChartInfoGeometryCommandArchive_default_instance_._instance,
};

const char descriptor_table_protodef_KNCommandArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027KNCommandArchives.proto\022\002KN\032\021TSPMessag"
  "es.proto\032\021TSKArchives.proto\032\021TSSArchives"
  ".proto\032\021TSDArchives.proto\032\022TSWPArchives."
  "proto\032\021TSAArchives.proto\032\020KNArchives.pro"
  "to\"\325\002\n\032UIStateCommandGroupArchive\022\'\n\005sup"
  "er\030\001 \002(\0132\030.TSK.CommandGroupArchive\022\037\n\007ui"
  "State\030\002 \002(\0132\016.TSP.Reference\022\020\n\010property\030"
  "\003 \002(\t\022(\n\020slideNodesToEdit\030\004 \003(\0132\016.TSP.Re"
  "ference\022/\n\027masterSlideNodesToApply\030\005 \003(\013"
  "2\016.TSP.Reference\022!\n\016thumbnailSizes\030\006 \003(\013"
  "2\t.TSP.Size\022*\n\022selectedSlideNodes\030\007 \003(\0132"
  "\016.TSP.Reference\0221\n\031restoreSelectedSlideN"
  "odes\030\010 \003(\0132\016.TSP.Reference\"\331\001\n\"CommandSl"
  "ideInsertDrawablesArchive\022\"\n\005super\030\001 \002(\013"
  "2\023.TSK.CommandArchive\022!\n\tslideNode\030\002 \002(\013"
  "2\016.TSP.Reference\022!\n\tdrawables\030\003 \003(\0132\016.TS"
  "P.Reference\022\017\n\007forDrag\030\004 \001(\010\022\017\n\007atIndex\030"
  "\005 \001(\005\022\'\n\037use_object_placeholder_geometry"
  "\030\006 \002(\010\"\320\001\n)CommandSlideSetPlaceholdersFo"
  "rTagsArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comman"
  "dArchive\022\035\n\005slide\030\002 \002(\0132\016.TSP.Reference\022"
  "\035\n\005infos\030\003 \003(\0132\016.TSP.Reference\022\014\n\004tags\030\004"
  " \003(\t\022!\n\told_infos\030\006 \003(\0132\016.TSP.Reference\022"
  "\020\n\010old_tags\030\005 \003(\t\"\303\002\n!CommandSlideRemove"
  "DrawableArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Com"
  "mandArchive\022!\n\tslideNode\030\002 \002(\0132\016.TSP.Ref"
  "erence\022\'\n\017sortedDrawables\030\003 \003(\0132\016.TSP.Re"
  "ference\022&\n\017drawableIndices\030\004 \002(\0132\r.TSP.I"
  "ndexSet\022\027\n\017placeholderTags\030\005 \003(\t\022>\n&info"
  "_using_object_placeholder_geometry\030\006 \001(\013"
  "2\016.TSP.Reference\022-\n%did_match_object_pla"
  "ceholder_geometry\030\007 \001(\010\"\330\001\n%CommandSlide"
  "MoveDrawableZOrderArchive\022\"\n\005super\030\001 \002(\013"
  "2\023.TSK.CommandArchive\022!\n\tslideNode\030\002 \002(\013"
  "2\016.TSP.Reference\022\035\n\005infos\030\003 \003(\0132\016.TSP.Re"
  "ference\022)\n\021old_ordered_infos\030\004 \003(\0132\016.TSP"
  ".Reference\022\036\n\007indexes\030\005 \002(\0132\r.TSP.IndexS"
  "et\"\306\001\n!CommandSlidePasteDrawablesArchive"
  "\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022 \n\010"
  "commands\030\002 \003(\0132\016.TSP.Reference\022\035\n\005slide\030"
  "\003 \002(\0132\016.TSP.Reference\022!\n\tdrawables\030\004 \003(\013"
  "2\016.TSP.Reference\022\031\n\nhas_builds\030\005 \001(\010:\005fa"
  "lse\"\374\002\n\"CommandSlideNodeSetPropertyArchi"
  "ve\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022!"
  "\n\tslideNode\030\002 \002(\0132\016.TSP.Reference\022\020\n\010pro"
  "perty\030\003 \002(\t\022F\n\010oldValue\030\004 \002(\01324.KN.Comma"
  "ndSlideNodeSetPropertyArchive.PropertyVa"
  "lue\022F\n\010newValue\030\005 \002(\01324.KN.CommandSlideN"
  "odeSetPropertyArchive.PropertyValue\032m\n\rP"
  "ropertyValue\022\021\n\tboolValue\030\001 \001(\010\022!\n\005image"
  "\030\003 \001(\0132\022.TSP.DataReference\022&\n\016database_i"
  "mage\030\002 \001(\0132\016.TSP.Reference\"\204\003\n\033CommandSl"
  "ideSetValueArchive\022\"\n\005super\030\001 \002(\0132\023.TSK."
  "CommandArchive\022\035\n\005slide\030\002 \002(\0132\016.TSP.Refe"
  "rence\022\020\n\010property\030\003 \002(\t\022\?\n\010oldValue\030\004 \002("
  "\0132-.KN.CommandSlideSetValueArchive.Prope"
  "rtyValue\022\?\n\010newValue\030\005 \002(\0132-.KN.CommandS"
  "lideSetValueArchive.PropertyValue\022%\n\rold"
  "SlideStyle\030\006 \002(\0132\016.TSP.Reference\032g\n\rProp"
  "ertyValue\022\021\n\tboolValue\030\001 \001(\010\022#\n\013objectVa"
  "lue\030\002 \001(\0132\016.TSP.Reference\022\036\n\004fill\030\003 \001(\0132"
  "\020.TSD.FillArchive\"\256\001\n\033CommandSlideSetSty"
  "leArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandAr"
  "chive\022\035\n\005slide\030\002 \002(\0132\016.TSP.Reference\022#\n\013"
  "slide_style\030\003 \002(\0132\016.TSP.Reference\022\'\n\017old"
  "_slide_style\030\004 \002(\0132\016.TSP.Reference\"\223\001\n(C"
  "ommandShowMarkOutOfSyncRecordingArchive\022"
  "\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\034\n\004s"
  "how\030\002 \002(\0132\016.TSP.Reference\022%\n\rold_recordi"
  "ng\030\003 \001(\0132\016.TSP.Reference\"\214\001\n!CommandShow"
  "RemoveRecordingArchive\022\"\n\005super\030\001 \002(\0132\023."
  "TSK.CommandArchive\022\034\n\004show\030\002 \002(\0132\016.TSP.R"
  "eference\022%\n\rold_recording\030\003 \001(\0132\016.TSP.Re"
  "ference\"\334\001\n\"CommandShowReplaceRecordingA"
  "rchive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchi"
  "ve\022\034\n\004show\030\002 \002(\0132\016.TSP.Reference\022-\n\025repl"
  "acement_recording\030\003 \002(\0132\016.TSP.Reference\022"
  "\036\n\026replacement_start_time\030\004 \002(\001\022%\n\rold_r"
  "ecording\030\005 \001(\0132\016.TSP.Reference\"\202\003\n\032Comma"
  "ndShowSetValueArchive\022\"\n\005super\030\001 \002(\0132\023.T"
  "SK.CommandArchive\022\034\n\004show\030\002 \002(\0132\016.TSP.Re"
  "ference\022\020\n\010property\030\003 \002(\t\022\?\n\told_value\030\004"
  " \002(\0132,.KN.CommandShowSetValueArchive.Pro"
  "pertyValue\022\?\n\tnew_value\030\005 \002(\0132,.KN.Comma"
  "ndShowSetValueArchive.PropertyValue\032\215\001\n\r"
  "PropertyValue\022\022\n\nbool_value\030\001 \001(\010\022\024\n\014dou"
  "ble_value\030\002 \001(\001\0223\n\017show_mode_value\030\003 \001(\016"
  "2\032.KN.ShowArchive.KNShowMode\022\035\n\nsize_val"
  "ue\030\004 \001(\0132\t.TSP.Size\"\347\002\n\035CommandShowInser"
  "tSlideArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comma"
  "ndArchive\022\034\n\004show\030\002 \002(\0132\016.TSP.Reference\022"
  "!\n\tslideNode\030\003 \002(\0132\016.TSP.Reference\022\022\n\nch"
  "ildIndex\030\004 \002(\r\022\'\n\017parentSlideNode\030\005 \002(\0132"
  "\016.TSP.Reference\022F\n\004kind\030\006 \001(\0162&.KN.Comma"
  "ndShowInsertSlideArchive.Kind:\020kKindInse"
  "rtSlide\"\\\n\004Kind\022\024\n\020kKindInsertSlide\020\000\022\034\n"
  "\030kKindInsertSlideForPaste\020\001\022 \n\034kKindInse"
  "rtSlideForDuplicate\020\002\"\302\001\n\033CommandShowMov"
  "eSlideArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comma"
  "ndArchive\022\034\n\004show\030\002 \002(\0132\016.TSP.Reference\022"
  "!\n\tslideNode\030\003 \002(\0132\016.TSP.Reference\022(\n\020pa"
  "rentSlideNodes\030\004 \003(\0132\016.TSP.Reference\022\024\n\014"
  "childIndices\030\005 \003(\r\"\301\001\n\035CommandShowRemove"
  "SlideArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comman"
  "dArchive\022\034\n\004show\030\002 \002(\0132\016.TSP.Reference\022!"
  "\n\tslideNode\030\003 \002(\0132\016.TSP.Reference\022\'\n\017par"
  "entSlideNode\030\004 \002(\0132\016.TSP.Reference\022\022\n\nch"
  "ildIndex\030\005 \002(\r\"\341\001\n\035CommandShowChangeThem"
  "eArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArc"
  "hive\022\034\n\004show\030\002 \002(\0132\016.TSP.Reference\022\035\n\005th"
  "eme\030\003 \002(\0132\016.TSP.Reference\022!\n\told_theme\030\004"
  " \002(\0132\016.TSP.Reference\022\033\n\023template_identif"
  "ier\030\005 \001(\t\022\037\n\027old_template_identifier\030\006 \001"
  "(\t\"\207\002\n\031CommandMoveMastersArchive\022\"\n\005supe"
  "r\030\001 \002(\0132\023.TSK.CommandArchive\022\035\n\005theme\030\002 "
  "\002(\0132\016.TSP.Reference\022%\n\rmaster_slides\030\003 \003"
  "(\0132\016.TSP.Reference\022-\n\025previous_indexes_k"
  "eys\030\004 \003(\0132\016.TSP.Reference\022\037\n\027previous_in"
  "dexes_values\030\005 \003(\r\0220\n\030final_master_arran"
  "gement\030\006 \003(\0132\016.TSP.Reference\"\303\001\n\032Command"
  "InsertMasterArchive\022\"\n\005super\030\001 \002(\0132\023.TSK"
  ".CommandArchive\022\035\n\005theme\030\002 \002(\0132\016.TSP.Ref"
  "erence\022)\n\021master_slide_node\030\003 \002(\0132\016.TSP."
  "Reference\022\027\n\017insertion_index\030\004 \002(\r\022\036\n\026wa"
  "s_inserted_with_drop\030\005 \002(\010\"\322\001\n\032CommandRe"
  "moveMasterArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.C"
  "ommandArchive\022\035\n\005theme\030\002 \002(\0132\016.TSP.Refer"
  "ence\022)\n\021master_slide_node\030\003 \002(\0132\016.TSP.Re"
  "ference\022\026\n\016previous_index\030\004 \002(\r\022.\n\026maste"
  "r_change_commands\030\005 \001(\0132\016.TSP.Reference\""
  "\224\001\n\032CommandRenameMasterArchive\022\"\n\005super\030"
  "\001 \002(\0132\023.TSK.CommandArchive\022$\n\014master_sli"
  "de\030\002 \002(\0132\016.TSP.Reference\022\023\n\013master_name\030"
  "\003 \002(\t\022\027\n\017old_master_name\030\004 \002(\t\"\261\001\n\036Comma"
  "ndSlideInsertBuildArchive\022\"\n\005super\030\001 \002(\013"
  "2\023.TSK.CommandArchive\022!\n\tslideNode\030\002 \002(\013"
  "2\016.TSP.Reference\022\035\n\005build\030\003 \002(\0132\016.TSP.Re"
  "ference\022\r\n\005index\030\004 \002(\r\022\032\n\022shouldCreateCh"
  "unks\030\005 \001(\010\"\225\001\n\036CommandSlideRemoveBuildAr"
  "chive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchiv"
  "e\022!\n\tslideNode\030\002 \002(\0132\016.TSP.Reference\022\035\n\005"
  "build\030\003 \002(\0132\016.TSP.Reference\022\r\n\005index\030\004 \002"
  "(\r\"\231\001\n/CommandSlideMoveBuildWithoutMovin"
  "gChunksArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comm"
  "andArchive\022!\n\tslideNode\030\002 \002(\0132\016.TSP.Refe"
  "rence\022\r\n\005index\030\003 \002(\r\022\020\n\010oldIndex\030\004 \002(\r\"t"
  "\n\035CommandSlideMoveBuildsArchive\022\"\n\005super"
  "\030\001 \002(\0132\023.TSK.CommandArchive\022\036\n\006builds\030\002 "
  "\003(\0132\016.TSP.Reference\022\017\n\007toIndex\030\003 \001(\r\"\242\001\n"
  "#CommandSlideInsertBuildChunkArchive\022\"\n\005"
  "super\030\001 \002(\0132\023.TSK.CommandArchive\022\035\n\005slid"
  "e\030\002 \002(\0132\016.TSP.Reference\022)\n\nbuildChunk\030\003 "
  "\002(\0132\025.KN.BuildChunkArchive\022\r\n\005index\030\004 \002("
  "\r\"\242\001\n#CommandSlideRemoveBuildChunkArchiv"
  "e\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\035\n"
  "\005slide\030\002 \002(\0132\016.TSP.Reference\022)\n\nbuildChu"
  "nk\030\003 \002(\0132\025.KN.BuildChunkArchive\022\r\n\005index"
  "\030\004 \002(\r\"\207\001\n!CommandSlideMoveBuildChunkArc"
  "hive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive"
  "\022\035\n\005slide\030\002 \002(\0132\016.TSP.Reference\022\r\n\005index"
  "\030\003 \002(\r\022\020\n\010oldIndex\030\004 \002(\r\"\205\001\n\"CommandSlid"
  "eMoveBuildChunksArchive\022\"\n\005super\030\001 \002(\0132\023"
  ".TSK.CommandArchive\022*\n\013buildChunks\030\002 \003(\013"
  "2\025.KN.BuildChunkArchive\022\017\n\007toIndex\030\003 \001(\r"
  "\"\257\002\n\033CommandBuildSetValueArchive\022\"\n\005supe"
  "r\030\001 \002(\0132\023.TSK.CommandArchive\022\035\n\005build\030\002 "
  "\002(\0132\016.TSP.Reference\022\020\n\010property\030\003 \002(\t\022\017\n"
  "\007effects\030\004 \003(\t\022\r\n\005types\030\005 \003(\t\022\022\n\ndeliver"
  "ies\030\006 \003(\t\022\022\n\ndirections\030\007 \003(\r\022\021\n\tduratio"
  "ns\030\010 \003(\001\022\016\n\006delays\030\t \003(\001\022\034\n\024delayAutomat"
  "icAfters\030\n \003(\001\022\033\n\023delayAutomaticWiths\030\013 "
  "\003(\001\022\025\n\reventTriggers\030\014 \003(\010\"\343\001\n CommandBu"
  "ildChunkSetValueArchive\022\"\n\005super\030\001 \002(\0132\023"
  ".TSK.CommandArchive\022)\n\nbuildChunk\030\002 \002(\0132"
  "\025.KN.BuildChunkArchive\022\020\n\010property\030\003 \002(\t"
  "\022\021\n\treferents\030\004 \003(\r\022\022\n\nautomatics\030\005 \003(\010\022"
  "\021\n\tdurations\030\006 \003(\001\022\016\n\006delays\030\007 \003(\001\022\024\n\014ol"
  "dOwnsValue\030\010 \001(\010\"\213\002\n CommandTransitionSe"
  "tValueArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comma"
  "ndArchive\022!\n\tslideNode\030\002 \002(\0132\016.TSP.Refer"
  "ence\022\020\n\010property\030\003 \002(\t\022\017\n\007effects\030\004 \003(\t\022"
  "\016\n\006unused\030\005 \003(\t\022\017\n\007unused2\030\006 \003(\t\022\017\n\007unus"
  "ed3\030\007 \003(\t\022\021\n\tdurations\030\010 \003(\001\022\022\n\ndirectio"
  "ns\030\t \003(\r\022\024\n\014isAutomatics\030\n \003(\010\022\016\n\006delays"
  "\030\013 \003(\001\"\261\001\n*CommandShowSetSlideNumberVisi"
  "bilityArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comma"
  "ndArchive\022\034\n\004show\030\002 \002(\0132\016.TSP.Reference\022"
  "\033\n\023slideNumbersVisible\030\003 \002(\010\022$\n\014provider"
  "Undo\030\004 \001(\0132\016.TSP.Reference\"a\n\033CommandMas"
  "terRescaleArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.C"
  "ommandArchive\022\036\n\006master\030\002 \002(\0132\016.TSP.Refe"
  "rence\"\237\001\n$CommandMasterSetThumbnailTextA"
  "rchive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchi"
  "ve\022\036\n\006master\030\002 \002(\0132\016.TSP.Reference\022\017\n\007is"
  "_body\030\003 \002(\010\022\020\n\010new_text\030\004 \001(\t\022\020\n\010old_tex"
  "t\030\005 \001(\t\"\225\002\n!CommandMasterSetBodyStylesAr"
  "chive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchiv"
  "e\022\036\n\006master\030\002 \002(\0132\016.TSP.Reference\022,\n\024new"
  "_paragraph_styles\030\003 \003(\0132\016.TSP.Reference\022"
  "\'\n\017new_list_styles\030\004 \003(\0132\016.TSP.Reference"
  "\022,\n\024old_paragraph_styles\030\005 \003(\0132\016.TSP.Ref"
  "erence\022\'\n\017old_list_styles\030\006 \003(\0132\016.TSP.Re"
  "ference\"}\n\035CommandSlideApplyThemeArchive"
  "\0221\n\005super\030\001 \002(\0132\".TSS.ApplyThemeChildCom"
  "mandArchive\022)\n\004blob\030\002 \002(\0132\033.KN.MasterCha"
  "ngeBlobArchive\"\262\001\n\037CommandChangeMasterSl"
  "ideArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandA"
  "rchive\022\035\n\005slide\030\002 \002(\0132\016.TSP.Reference\022\036\n"
  "\006master\030\003 \002(\0132\016.TSP.Reference\022,\n\024placeho"
  "lder_commands\030\004 \002(\0132\016.TSP.Reference\"\256\001\n%"
  "CommandSlidePrimitiveSetMasterArchive\022\"\n"
  "\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\035\n\005sli"
  "de\030\002 \002(\0132\016.TSP.Reference\022\036\n\006master\030\003 \002(\013"
  "2\016.TSP.Reference\022\"\n\nold_master\030\004 \002(\0132\016.T"
  "SP.Reference\"{\n CommandSlideReapplyMaste"
  "rArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArc"
  "hive\0223\n\033reapply_accumulated_command\030\002 \002("
  "\0132\016.TSP.Reference\"\250\001\n\030CommandShowSetSoun"
  "dtrack\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchi"
  "ve\022\034\n\004show\030\002 \001(\0132\016.TSP.Reference\022\"\n\nsoun"
  "dtrack\030\003 \001(\0132\016.TSP.Reference\022&\n\016old_soun"
  "dtrack\030\004 \001(\0132\016.TSP.Reference\"\204\003\n\031Command"
  "SoundtrackSetValue\022\"\n\005super\030\001 \002(\0132\023.TSK."
  "CommandArchive\022\"\n\nsoundtrack\030\002 \001(\0132\016.TSP"
  ".Reference\022\020\n\010property\030\003 \001(\t\022>\n\told_valu"
  "e\030\004 \001(\0132+.KN.CommandSoundtrackSetValue.P"
  "ropertyValue\022>\n\tnew_value\030\005 \001(\0132+.KN.Com"
  "mandSoundtrackSetValue.PropertyValue\032\214\001\n"
  "\rPropertyValue\022\024\n\014double_value\030\001 \001(\001\0221\n\n"
  "mode_value\030\002 \001(\0162\035.KN.Soundtrack.Soundtr"
  "ackMode\0222\n\026media_reference_values\030\003 \003(\0132"
  "\022.TSP.DataReference\"\270\003\n.SlideCollectionC"
  "ommandSelectionBehaviorArchive\022.\n\026archiv"
  "ed_new_selection\030\001 \001(\0132\016.TSP.Reference\022."
  "\n\026archived_old_selection\030\002 \001(\0132\016.TSP.Ref"
  "erence\022m\n\004type\030\003 \001(\01627.KN.SlideCollectio"
  "nCommandSelectionBehaviorArchive.Type:&k"
  "KindSlideSelectionBehaviorTypeGeneral\"\266\001"
  "\n\004Type\022*\n&kKindSlideSelectionBehaviorTyp"
  "eGeneral\020\000\022,\n(kKindSlideSelectionBehavio"
  "rTypeInsertion\020\001\022+\n\'kKindSlideSelectionB"
  "ehaviorTypeDeletion\020\002\022\'\n#kKindSlideSelec"
  "tionBehaviorTypeMove\020\003\"E\n\037ChartInfoGeome"
  "tryCommandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.C"
  "ommandArchive"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_KNCommandArchives_2eproto_deps[7] = {
  &::descriptor_table_KNArchives_2eproto,
  &::descriptor_table_TSAArchives_2eproto,
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
  &::descriptor_table_TSWPArchives_2eproto,
};
static ::_pbi::once_flag descriptor_table_KNCommandArchives_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_KNCommandArchives_2eproto = {
    false, false, 9773, descriptor_table_protodef_KNCommandArchives_2eproto,
    "KNCommandArchives.proto",
    &descriptor_table_KNCommandArchives_2eproto_once, descriptor_table_KNCommandArchives_2eproto_deps, 7, 48,
    schemas, file_default_instances, TableStruct_KNCommandArchives_2eproto::offsets,
    file_level_metadata_KNCommandArchives_2eproto, file_level_enum_descriptors_KNCommandArchives_2eproto,
    file_level_service_descriptors_KNCommandArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_KNCommandArchives_2eproto_getter() {
  return &descriptor_table_KNCommandArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_KNCommandArchives_2eproto(&descriptor_table_KNCommandArchives_2eproto);
namespace KN {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandShowInsertSlideArchive_Kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNCommandArchives_2eproto);
  return file_level_enum_descriptors_KNCommandArchives_2eproto[0];
}
bool CommandShowInsertSlideArchive_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CommandShowInsertSlideArchive_Kind CommandShowInsertSlideArchive::kKindInsertSlide;
constexpr CommandShowInsertSlideArchive_Kind CommandShowInsertSlideArchive::kKindInsertSlideForPaste;
constexpr CommandShowInsertSlideArchive_Kind CommandShowInsertSlideArchive::kKindInsertSlideForDuplicate;
constexpr CommandShowInsertSlideArchive_Kind CommandShowInsertSlideArchive::Kind_MIN;
constexpr CommandShowInsertSlideArchive_Kind CommandShowInsertSlideArchive::Kind_MAX;
constexpr int CommandShowInsertSlideArchive::Kind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SlideCollectionCommandSelectionBehaviorArchive_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNCommandArchives_2eproto);
  return file_level_enum_descriptors_KNCommandArchives_2eproto[1];
}
bool SlideCollectionCommandSelectionBehaviorArchive_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SlideCollectionCommandSelectionBehaviorArchive_Type SlideCollectionCommandSelectionBehaviorArchive::kKindSlideSelectionBehaviorTypeGeneral;
constexpr SlideCollectionCommandSelectionBehaviorArchive_Type SlideCollectionCommandSelectionBehaviorArchive::kKindSlideSelectionBehaviorTypeInsertion;
constexpr SlideCollectionCommandSelectionBehaviorArchive_Type SlideCollectionCommandSelectionBehaviorArchive::kKindSlideSelectionBehaviorTypeDeletion;
constexpr SlideCollectionCommandSelectionBehaviorArchive_Type SlideCollectionCommandSelectionBehaviorArchive::kKindSlideSelectionBehaviorTypeMove;
constexpr SlideCollectionCommandSelectionBehaviorArchive_Type SlideCollectionCommandSelectionBehaviorArchive::Type_MIN;
constexpr SlideCollectionCommandSelectionBehaviorArchive_Type SlideCollectionCommandSelectionBehaviorArchive::Type_MAX;
constexpr int SlideCollectionCommandSelectionBehaviorArchive::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class UIStateCommandGroupArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UIStateCommandGroupArchive>()._impl_._has_bits_);
  static const ::TSK::CommandGroupArchive& super(const UIStateCommandGroupArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& uistate(const UIStateCommandGroupArchive* msg);
  static void set_has_uistate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandGroupArchive&
UIStateCommandGroupArchive::_Internal::super(const UIStateCommandGroupArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
UIStateCommandGroupArchive::_Internal::uistate(const UIStateCommandGroupArchive* msg) {
  return *msg->_impl_.uistate_;
}
void UIStateCommandGroupArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void UIStateCommandGroupArchive::clear_uistate() {
  if (_impl_.uistate_ != nullptr) _impl_.uistate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void UIStateCommandGroupArchive::clear_slidenodestoedit() {
  _impl_.slidenodestoedit_.Clear();
}
void UIStateCommandGroupArchive::clear_masterslidenodestoapply() {
  _impl_.masterslidenodestoapply_.Clear();
}
void UIStateCommandGroupArchive::clear_thumbnailsizes() {
  _impl_.thumbnailsizes_.Clear();
}
void UIStateCommandGroupArchive::clear_selectedslidenodes() {
  _impl_.selectedslidenodes_.Clear();
}
void UIStateCommandGroupArchive::clear_restoreselectedslidenodes() {
  _impl_.restoreselectedslidenodes_.Clear();
}
UIStateCommandGroupArchive::UIStateCommandGroupArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.UIStateCommandGroupArchive)
}
UIStateCommandGroupArchive::UIStateCommandGroupArchive(const UIStateCommandGroupArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UIStateCommandGroupArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slidenodestoedit_){from._impl_.slidenodestoedit_}
    , decltype(_impl_.masterslidenodestoapply_){from._impl_.masterslidenodestoapply_}
    , decltype(_impl_.thumbnailsizes_){from._impl_.thumbnailsizes_}
    , decltype(_impl_.selectedslidenodes_){from._impl_.selectedslidenodes_}
    , decltype(_impl_.restoreselectedslidenodes_){from._impl_.restoreselectedslidenodes_}
    , decltype(_impl_.property_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.uistate_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_property()) {
    _this->_impl_.property_.Set(from._internal_property(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandGroupArchive(*from._impl_.super_);
  }
  if (from._internal_has_uistate()) {
    _this->_impl_.uistate_ = new ::TSP::Reference(*from._impl_.uistate_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.UIStateCommandGroupArchive)
}

inline void UIStateCommandGroupArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slidenodestoedit_){arena}
    , decltype(_impl_.masterslidenodestoapply_){arena}
    , decltype(_impl_.thumbnailsizes_){arena}
    , decltype(_impl_.selectedslidenodes_){arena}
    , decltype(_impl_.restoreselectedslidenodes_){arena}
    , decltype(_impl_.property_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.uistate_){nullptr}
  };
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UIStateCommandGroupArchive::~UIStateCommandGroupArchive() {
  // @@protoc_insertion_point(destructor:KN.UIStateCommandGroupArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UIStateCommandGroupArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.slidenodestoedit_.~RepeatedPtrField();
  _impl_.masterslidenodestoapply_.~RepeatedPtrField();
  _impl_.thumbnailsizes_.~RepeatedPtrField();
  _impl_.selectedslidenodes_.~RepeatedPtrField();
  _impl_.restoreselectedslidenodes_.~RepeatedPtrField();
  _impl_.property_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.uistate_;
}

void UIStateCommandGroupArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UIStateCommandGroupArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.UIStateCommandGroupArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.slidenodestoedit_.Clear();
  _impl_.masterslidenodestoapply_.Clear();
  _impl_.thumbnailsizes_.Clear();
  _impl_.selectedslidenodes_.Clear();
  _impl_.restoreselectedslidenodes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.property_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.uistate_ != nullptr);
      _impl_.uistate_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UIStateCommandGroupArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandGroupArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference uiState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uistate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string property = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_property();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.UIStateCommandGroupArchive.property");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference slideNodesToEdit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slidenodestoedit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference masterSlideNodesToApply = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_masterslidenodestoapply(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Size thumbnailSizes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_thumbnailsizes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference selectedSlideNodes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_selectedslidenodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference restoreSelectedSlideNodes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_restoreselectedslidenodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UIStateCommandGroupArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.UIStateCommandGroupArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandGroupArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference uiState = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::uistate(this),
        _Internal::uistate(this).GetCachedSize(), target, stream);
  }

  // required string property = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property().data(), static_cast<int>(this->_internal_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.UIStateCommandGroupArchive.property");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_property(), target);
  }

  // repeated .TSP.Reference slideNodesToEdit = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_slidenodestoedit_size()); i < n; i++) {
    const auto& repfield = this->_internal_slidenodestoedit(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference masterSlideNodesToApply = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_masterslidenodestoapply_size()); i < n; i++) {
    const auto& repfield = this->_internal_masterslidenodestoapply(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Size thumbnailSizes = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_thumbnailsizes_size()); i < n; i++) {
    const auto& repfield = this->_internal_thumbnailsizes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference selectedSlideNodes = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_selectedslidenodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_selectedslidenodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference restoreSelectedSlideNodes = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_restoreselectedslidenodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_restoreselectedslidenodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.UIStateCommandGroupArchive)
  return target;
}

size_t UIStateCommandGroupArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.UIStateCommandGroupArchive)
  size_t total_size = 0;

  if (_internal_has_property()) {
    // required string property = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());
  }

  if (_internal_has_super()) {
    // required .TSK.CommandGroupArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_uistate()) {
    // required .TSP.Reference uiState = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uistate_);
  }

  return total_size;
}
size_t UIStateCommandGroupArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.UIStateCommandGroupArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string property = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());

    // required .TSK.CommandGroupArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference uiState = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uistate_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference slideNodesToEdit = 4;
  total_size += 1UL * this->_internal_slidenodestoedit_size();
  for (const auto& msg : this->_impl_.slidenodestoedit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference masterSlideNodesToApply = 5;
  total_size += 1UL * this->_internal_masterslidenodestoapply_size();
  for (const auto& msg : this->_impl_.masterslidenodestoapply_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Size thumbnailSizes = 6;
  total_size += 1UL * this->_internal_thumbnailsizes_size();
  for (const auto& msg : this->_impl_.thumbnailsizes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference selectedSlideNodes = 7;
  total_size += 1UL * this->_internal_selectedslidenodes_size();
  for (const auto& msg : this->_impl_.selectedslidenodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference restoreSelectedSlideNodes = 8;
  total_size += 1UL * this->_internal_restoreselectedslidenodes_size();
  for (const auto& msg : this->_impl_.restoreselectedslidenodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UIStateCommandGroupArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UIStateCommandGroupArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UIStateCommandGroupArchive::GetClassData() const { return &_class_data_; }


void UIStateCommandGroupArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UIStateCommandGroupArchive*>(&to_msg);
  auto& from = static_cast<const UIStateCommandGroupArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.UIStateCommandGroupArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.slidenodestoedit_.MergeFrom(from._impl_.slidenodestoedit_);
  _this->_impl_.masterslidenodestoapply_.MergeFrom(from._impl_.masterslidenodestoapply_);
  _this->_impl_.thumbnailsizes_.MergeFrom(from._impl_.thumbnailsizes_);
  _this->_impl_.selectedslidenodes_.MergeFrom(from._impl_.selectedslidenodes_);
  _this->_impl_.restoreselectedslidenodes_.MergeFrom(from._impl_.restoreselectedslidenodes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_property(from._internal_property());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSK::CommandGroupArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_uistate()->::TSP::Reference::MergeFrom(
          from._internal_uistate());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UIStateCommandGroupArchive::CopyFrom(const UIStateCommandGroupArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.UIStateCommandGroupArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIStateCommandGroupArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.slidenodestoedit_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.masterslidenodestoapply_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.thumbnailsizes_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.selectedslidenodes_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.restoreselectedslidenodes_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_uistate()) {
    if (!_impl_.uistate_->IsInitialized()) return false;
  }
  return true;
}

void UIStateCommandGroupArchive::InternalSwap(UIStateCommandGroupArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.slidenodestoedit_.InternalSwap(&other->_impl_.slidenodestoedit_);
  _impl_.masterslidenodestoapply_.InternalSwap(&other->_impl_.masterslidenodestoapply_);
  _impl_.thumbnailsizes_.InternalSwap(&other->_impl_.thumbnailsizes_);
  _impl_.selectedslidenodes_.InternalSwap(&other->_impl_.selectedslidenodes_);
  _impl_.restoreselectedslidenodes_.InternalSwap(&other->_impl_.restoreselectedslidenodes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.property_, lhs_arena,
      &other->_impl_.property_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UIStateCommandGroupArchive, _impl_.uistate_)
      + sizeof(UIStateCommandGroupArchive::_impl_.uistate_)
      - PROTOBUF_FIELD_OFFSET(UIStateCommandGroupArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UIStateCommandGroupArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[0]);
}

// ===================================================================

class CommandSlideInsertDrawablesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideInsertDrawablesArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideInsertDrawablesArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& slidenode(const CommandSlideInsertDrawablesArchive* msg);
  static void set_has_slidenode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fordrag(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_atindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_use_object_placeholder_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000013) ^ 0x00000013) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideInsertDrawablesArchive::_Internal::super(const CommandSlideInsertDrawablesArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSlideInsertDrawablesArchive::_Internal::slidenode(const CommandSlideInsertDrawablesArchive* msg) {
  return *msg->_impl_.slidenode_;
}
void CommandSlideInsertDrawablesArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlideInsertDrawablesArchive::clear_slidenode() {
  if (_impl_.slidenode_ != nullptr) _impl_.slidenode_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSlideInsertDrawablesArchive::clear_drawables() {
  _impl_.drawables_.Clear();
}
CommandSlideInsertDrawablesArchive::CommandSlideInsertDrawablesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideInsertDrawablesArchive)
}
CommandSlideInsertDrawablesArchive::CommandSlideInsertDrawablesArchive(const CommandSlideInsertDrawablesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideInsertDrawablesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawables_){from._impl_.drawables_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slidenode_){nullptr}
    , decltype(_impl_.atindex_){}
    , decltype(_impl_.fordrag_){}
    , decltype(_impl_.use_object_placeholder_geometry_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slidenode()) {
    _this->_impl_.slidenode_ = new ::TSP::Reference(*from._impl_.slidenode_);
  }
  ::memcpy(&_impl_.atindex_, &from._impl_.atindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.use_object_placeholder_geometry_) -
    reinterpret_cast<char*>(&_impl_.atindex_)) + sizeof(_impl_.use_object_placeholder_geometry_));
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideInsertDrawablesArchive)
}

inline void CommandSlideInsertDrawablesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawables_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slidenode_){nullptr}
    , decltype(_impl_.atindex_){0}
    , decltype(_impl_.fordrag_){false}
    , decltype(_impl_.use_object_placeholder_geometry_){false}
  };
}

CommandSlideInsertDrawablesArchive::~CommandSlideInsertDrawablesArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideInsertDrawablesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideInsertDrawablesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.drawables_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slidenode_;
}

void CommandSlideInsertDrawablesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideInsertDrawablesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideInsertDrawablesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.drawables_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slidenode_ != nullptr);
      _impl_.slidenode_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.atindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.use_object_placeholder_geometry_) -
        reinterpret_cast<char*>(&_impl_.atindex_)) + sizeof(_impl_.use_object_placeholder_geometry_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideInsertDrawablesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference slideNode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slidenode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference drawables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool forDrag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_fordrag(&has_bits);
          _impl_.fordrag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 atIndex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_atindex(&has_bits);
          _impl_.atindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool use_object_placeholder_geometry = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_use_object_placeholder_geometry(&has_bits);
          _impl_.use_object_placeholder_geometry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideInsertDrawablesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideInsertDrawablesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference slideNode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slidenode(this),
        _Internal::slidenode(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference drawables = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_drawables_size()); i < n; i++) {
    const auto& repfield = this->_internal_drawables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool forDrag = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_fordrag(), target);
  }

  // optional int32 atIndex = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_atindex(), target);
  }

  // required bool use_object_placeholder_geometry = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_use_object_placeholder_geometry(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideInsertDrawablesArchive)
  return target;
}

size_t CommandSlideInsertDrawablesArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideInsertDrawablesArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slidenode()) {
    // required .TSP.Reference slideNode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slidenode_);
  }

  if (_internal_has_use_object_placeholder_geometry()) {
    // required bool use_object_placeholder_geometry = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSlideInsertDrawablesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideInsertDrawablesArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference slideNode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slidenode_);

    // required bool use_object_placeholder_geometry = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference drawables = 3;
  total_size += 1UL * this->_internal_drawables_size();
  for (const auto& msg : this->_impl_.drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional int32 atIndex = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_atindex());
    }

    // optional bool forDrag = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideInsertDrawablesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideInsertDrawablesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideInsertDrawablesArchive::GetClassData() const { return &_class_data_; }


void CommandSlideInsertDrawablesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideInsertDrawablesArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideInsertDrawablesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideInsertDrawablesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.drawables_.MergeFrom(from._impl_.drawables_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slidenode()->::TSP::Reference::MergeFrom(
          from._internal_slidenode());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.atindex_ = from._impl_.atindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.fordrag_ = from._impl_.fordrag_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.use_object_placeholder_geometry_ = from._impl_.use_object_placeholder_geometry_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideInsertDrawablesArchive::CopyFrom(const CommandSlideInsertDrawablesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideInsertDrawablesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideInsertDrawablesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.drawables_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slidenode()) {
    if (!_impl_.slidenode_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideInsertDrawablesArchive::InternalSwap(CommandSlideInsertDrawablesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.drawables_.InternalSwap(&other->_impl_.drawables_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideInsertDrawablesArchive, _impl_.use_object_placeholder_geometry_)
      + sizeof(CommandSlideInsertDrawablesArchive::_impl_.use_object_placeholder_geometry_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideInsertDrawablesArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideInsertDrawablesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[1]);
}

// ===================================================================

class CommandSlideSetPlaceholdersForTagsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideSetPlaceholdersForTagsArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideSetPlaceholdersForTagsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& slide(const CommandSlideSetPlaceholdersForTagsArchive* msg);
  static void set_has_slide(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideSetPlaceholdersForTagsArchive::_Internal::super(const CommandSlideSetPlaceholdersForTagsArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSlideSetPlaceholdersForTagsArchive::_Internal::slide(const CommandSlideSetPlaceholdersForTagsArchive* msg) {
  return *msg->_impl_.slide_;
}
void CommandSlideSetPlaceholdersForTagsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlideSetPlaceholdersForTagsArchive::clear_slide() {
  if (_impl_.slide_ != nullptr) _impl_.slide_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSlideSetPlaceholdersForTagsArchive::clear_infos() {
  _impl_.infos_.Clear();
}
void CommandSlideSetPlaceholdersForTagsArchive::clear_old_infos() {
  _impl_.old_infos_.Clear();
}
CommandSlideSetPlaceholdersForTagsArchive::CommandSlideSetPlaceholdersForTagsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideSetPlaceholdersForTagsArchive)
}
CommandSlideSetPlaceholdersForTagsArchive::CommandSlideSetPlaceholdersForTagsArchive(const CommandSlideSetPlaceholdersForTagsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideSetPlaceholdersForTagsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.infos_){from._impl_.infos_}
    , decltype(_impl_.tags_){from._impl_.tags_}
    , decltype(_impl_.old_tags_){from._impl_.old_tags_}
    , decltype(_impl_.old_infos_){from._impl_.old_infos_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slide()) {
    _this->_impl_.slide_ = new ::TSP::Reference(*from._impl_.slide_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideSetPlaceholdersForTagsArchive)
}

inline void CommandSlideSetPlaceholdersForTagsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.infos_){arena}
    , decltype(_impl_.tags_){arena}
    , decltype(_impl_.old_tags_){arena}
    , decltype(_impl_.old_infos_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_){nullptr}
  };
}

CommandSlideSetPlaceholdersForTagsArchive::~CommandSlideSetPlaceholdersForTagsArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideSetPlaceholdersForTagsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideSetPlaceholdersForTagsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.infos_.~RepeatedPtrField();
  _impl_.tags_.~RepeatedPtrField();
  _impl_.old_tags_.~RepeatedPtrField();
  _impl_.old_infos_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slide_;
}

void CommandSlideSetPlaceholdersForTagsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideSetPlaceholdersForTagsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideSetPlaceholdersForTagsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.infos_.Clear();
  _impl_.tags_.Clear();
  _impl_.old_tags_.Clear();
  _impl_.old_infos_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slide_ != nullptr);
      _impl_.slide_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideSetPlaceholdersForTagsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference slide = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference infos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "KN.CommandSlideSetPlaceholdersForTagsArchive.tags");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string old_tags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_old_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_infos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideSetPlaceholdersForTagsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideSetPlaceholdersForTagsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference slide = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slide(this),
        _Internal::slide(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference infos = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string tags = 4;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandSlideSetPlaceholdersForTagsArchive.tags");
    target = stream->WriteString(4, s, target);
  }

  // repeated string old_tags = 5;
  for (int i = 0, n = this->_internal_old_tags_size(); i < n; i++) {
    const auto& s = this->_internal_old_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags");
    target = stream->WriteString(5, s, target);
  }

  // repeated .TSP.Reference old_infos = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideSetPlaceholdersForTagsArchive)
  return target;
}

size_t CommandSlideSetPlaceholdersForTagsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideSetPlaceholdersForTagsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slide()) {
    // required .TSP.Reference slide = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_);
  }

  return total_size;
}
size_t CommandSlideSetPlaceholdersForTagsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideSetPlaceholdersForTagsArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference slide = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference infos = 3;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->_impl_.infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string tags = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tags_.size());
  for (int i = 0, n = _impl_.tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tags_.Get(i));
  }

  // repeated string old_tags = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.old_tags_.size());
  for (int i = 0, n = _impl_.old_tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.old_tags_.Get(i));
  }

  // repeated .TSP.Reference old_infos = 6;
  total_size += 1UL * this->_internal_old_infos_size();
  for (const auto& msg : this->_impl_.old_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideSetPlaceholdersForTagsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideSetPlaceholdersForTagsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideSetPlaceholdersForTagsArchive::GetClassData() const { return &_class_data_; }


void CommandSlideSetPlaceholdersForTagsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideSetPlaceholdersForTagsArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideSetPlaceholdersForTagsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideSetPlaceholdersForTagsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.infos_.MergeFrom(from._impl_.infos_);
  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  _this->_impl_.old_tags_.MergeFrom(from._impl_.old_tags_);
  _this->_impl_.old_infos_.MergeFrom(from._impl_.old_infos_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slide()->::TSP::Reference::MergeFrom(
          from._internal_slide());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideSetPlaceholdersForTagsArchive::CopyFrom(const CommandSlideSetPlaceholdersForTagsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideSetPlaceholdersForTagsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideSetPlaceholdersForTagsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.infos_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.old_infos_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slide()) {
    if (!_impl_.slide_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideSetPlaceholdersForTagsArchive::InternalSwap(CommandSlideSetPlaceholdersForTagsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.infos_.InternalSwap(&other->_impl_.infos_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  _impl_.old_tags_.InternalSwap(&other->_impl_.old_tags_);
  _impl_.old_infos_.InternalSwap(&other->_impl_.old_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideSetPlaceholdersForTagsArchive, _impl_.slide_)
      + sizeof(CommandSlideSetPlaceholdersForTagsArchive::_impl_.slide_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideSetPlaceholdersForTagsArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideSetPlaceholdersForTagsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[2]);
}

// ===================================================================

class CommandSlideRemoveDrawableArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideRemoveDrawableArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideRemoveDrawableArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& slidenode(const CommandSlideRemoveDrawableArchive* msg);
  static void set_has_slidenode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::IndexSet& drawableindices(const CommandSlideRemoveDrawableArchive* msg);
  static void set_has_drawableindices(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& info_using_object_placeholder_geometry(const CommandSlideRemoveDrawableArchive* msg);
  static void set_has_info_using_object_placeholder_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_did_match_object_placeholder_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideRemoveDrawableArchive::_Internal::super(const CommandSlideRemoveDrawableArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSlideRemoveDrawableArchive::_Internal::slidenode(const CommandSlideRemoveDrawableArchive* msg) {
  return *msg->_impl_.slidenode_;
}
const ::TSP::IndexSet&
CommandSlideRemoveDrawableArchive::_Internal::drawableindices(const CommandSlideRemoveDrawableArchive* msg) {
  return *msg->_impl_.drawableindices_;
}
const ::TSP::Reference&
CommandSlideRemoveDrawableArchive::_Internal::info_using_object_placeholder_geometry(const CommandSlideRemoveDrawableArchive* msg) {
  return *msg->_impl_.info_using_object_placeholder_geometry_;
}
void CommandSlideRemoveDrawableArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlideRemoveDrawableArchive::clear_slidenode() {
  if (_impl_.slidenode_ != nullptr) _impl_.slidenode_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSlideRemoveDrawableArchive::clear_sorteddrawables() {
  _impl_.sorteddrawables_.Clear();
}
void CommandSlideRemoveDrawableArchive::clear_drawableindices() {
  if (_impl_.drawableindices_ != nullptr) _impl_.drawableindices_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandSlideRemoveDrawableArchive::clear_info_using_object_placeholder_geometry() {
  if (_impl_.info_using_object_placeholder_geometry_ != nullptr) _impl_.info_using_object_placeholder_geometry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandSlideRemoveDrawableArchive::CommandSlideRemoveDrawableArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideRemoveDrawableArchive)
}
CommandSlideRemoveDrawableArchive::CommandSlideRemoveDrawableArchive(const CommandSlideRemoveDrawableArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideRemoveDrawableArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sorteddrawables_){from._impl_.sorteddrawables_}
    , decltype(_impl_.placeholdertags_){from._impl_.placeholdertags_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slidenode_){nullptr}
    , decltype(_impl_.drawableindices_){nullptr}
    , decltype(_impl_.info_using_object_placeholder_geometry_){nullptr}
    , decltype(_impl_.did_match_object_placeholder_geometry_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slidenode()) {
    _this->_impl_.slidenode_ = new ::TSP::Reference(*from._impl_.slidenode_);
  }
  if (from._internal_has_drawableindices()) {
    _this->_impl_.drawableindices_ = new ::TSP::IndexSet(*from._impl_.drawableindices_);
  }
  if (from._internal_has_info_using_object_placeholder_geometry()) {
    _this->_impl_.info_using_object_placeholder_geometry_ = new ::TSP::Reference(*from._impl_.info_using_object_placeholder_geometry_);
  }
  _this->_impl_.did_match_object_placeholder_geometry_ = from._impl_.did_match_object_placeholder_geometry_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideRemoveDrawableArchive)
}

inline void CommandSlideRemoveDrawableArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sorteddrawables_){arena}
    , decltype(_impl_.placeholdertags_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slidenode_){nullptr}
    , decltype(_impl_.drawableindices_){nullptr}
    , decltype(_impl_.info_using_object_placeholder_geometry_){nullptr}
    , decltype(_impl_.did_match_object_placeholder_geometry_){false}
  };
}

CommandSlideRemoveDrawableArchive::~CommandSlideRemoveDrawableArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideRemoveDrawableArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideRemoveDrawableArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sorteddrawables_.~RepeatedPtrField();
  _impl_.placeholdertags_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slidenode_;
  if (this != internal_default_instance()) delete _impl_.drawableindices_;
  if (this != internal_default_instance()) delete _impl_.info_using_object_placeholder_geometry_;
}

void CommandSlideRemoveDrawableArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideRemoveDrawableArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideRemoveDrawableArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sorteddrawables_.Clear();
  _impl_.placeholdertags_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slidenode_ != nullptr);
      _impl_.slidenode_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.drawableindices_ != nullptr);
      _impl_.drawableindices_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.info_using_object_placeholder_geometry_ != nullptr);
      _impl_.info_using_object_placeholder_geometry_->Clear();
    }
  }
  _impl_.did_match_object_placeholder_geometry_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideRemoveDrawableArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference slideNode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slidenode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference sortedDrawables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sorteddrawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .TSP.IndexSet drawableIndices = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_drawableindices(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string placeholderTags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_placeholdertags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "KN.CommandSlideRemoveDrawableArchive.placeholderTags");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference info_using_object_placeholder_geometry = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_info_using_object_placeholder_geometry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool did_match_object_placeholder_geometry = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_did_match_object_placeholder_geometry(&has_bits);
          _impl_.did_match_object_placeholder_geometry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideRemoveDrawableArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideRemoveDrawableArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference slideNode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slidenode(this),
        _Internal::slidenode(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference sortedDrawables = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sorteddrawables_size()); i < n; i++) {
    const auto& repfield = this->_internal_sorteddrawables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .TSP.IndexSet drawableIndices = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::drawableindices(this),
        _Internal::drawableindices(this).GetCachedSize(), target, stream);
  }

  // repeated string placeholderTags = 5;
  for (int i = 0, n = this->_internal_placeholdertags_size(); i < n; i++) {
    const auto& s = this->_internal_placeholdertags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandSlideRemoveDrawableArchive.placeholderTags");
    target = stream->WriteString(5, s, target);
  }

  // optional .TSP.Reference info_using_object_placeholder_geometry = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::info_using_object_placeholder_geometry(this),
        _Internal::info_using_object_placeholder_geometry(this).GetCachedSize(), target, stream);
  }

  // optional bool did_match_object_placeholder_geometry = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_did_match_object_placeholder_geometry(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideRemoveDrawableArchive)
  return target;
}

size_t CommandSlideRemoveDrawableArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideRemoveDrawableArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slidenode()) {
    // required .TSP.Reference slideNode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slidenode_);
  }

  if (_internal_has_drawableindices()) {
    // required .TSP.IndexSet drawableIndices = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drawableindices_);
  }

  return total_size;
}
size_t CommandSlideRemoveDrawableArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideRemoveDrawableArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference slideNode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slidenode_);

    // required .TSP.IndexSet drawableIndices = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drawableindices_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference sortedDrawables = 3;
  total_size += 1UL * this->_internal_sorteddrawables_size();
  for (const auto& msg : this->_impl_.sorteddrawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string placeholderTags = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.placeholdertags_.size());
  for (int i = 0, n = _impl_.placeholdertags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.placeholdertags_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000018u) {
    // optional .TSP.Reference info_using_object_placeholder_geometry = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.info_using_object_placeholder_geometry_);
    }

    // optional bool did_match_object_placeholder_geometry = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideRemoveDrawableArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideRemoveDrawableArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideRemoveDrawableArchive::GetClassData() const { return &_class_data_; }


void CommandSlideRemoveDrawableArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideRemoveDrawableArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideRemoveDrawableArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideRemoveDrawableArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sorteddrawables_.MergeFrom(from._impl_.sorteddrawables_);
  _this->_impl_.placeholdertags_.MergeFrom(from._impl_.placeholdertags_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slidenode()->::TSP::Reference::MergeFrom(
          from._internal_slidenode());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_drawableindices()->::TSP::IndexSet::MergeFrom(
          from._internal_drawableindices());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_info_using_object_placeholder_geometry()->::TSP::Reference::MergeFrom(
          from._internal_info_using_object_placeholder_geometry());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.did_match_object_placeholder_geometry_ = from._impl_.did_match_object_placeholder_geometry_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideRemoveDrawableArchive::CopyFrom(const CommandSlideRemoveDrawableArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideRemoveDrawableArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideRemoveDrawableArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.sorteddrawables_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slidenode()) {
    if (!_impl_.slidenode_->IsInitialized()) return false;
  }
  if (_internal_has_drawableindices()) {
    if (!_impl_.drawableindices_->IsInitialized()) return false;
  }
  if (_internal_has_info_using_object_placeholder_geometry()) {
    if (!_impl_.info_using_object_placeholder_geometry_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideRemoveDrawableArchive::InternalSwap(CommandSlideRemoveDrawableArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.sorteddrawables_.InternalSwap(&other->_impl_.sorteddrawables_);
  _impl_.placeholdertags_.InternalSwap(&other->_impl_.placeholdertags_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideRemoveDrawableArchive, _impl_.did_match_object_placeholder_geometry_)
      + sizeof(CommandSlideRemoveDrawableArchive::_impl_.did_match_object_placeholder_geometry_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideRemoveDrawableArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideRemoveDrawableArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[3]);
}

// ===================================================================

class CommandSlideMoveDrawableZOrderArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideMoveDrawableZOrderArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideMoveDrawableZOrderArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& slidenode(const CommandSlideMoveDrawableZOrderArchive* msg);
  static void set_has_slidenode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::IndexSet& indexes(const CommandSlideMoveDrawableZOrderArchive* msg);
  static void set_has_indexes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideMoveDrawableZOrderArchive::_Internal::super(const CommandSlideMoveDrawableZOrderArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSlideMoveDrawableZOrderArchive::_Internal::slidenode(const CommandSlideMoveDrawableZOrderArchive* msg) {
  return *msg->_impl_.slidenode_;
}
const ::TSP::IndexSet&
CommandSlideMoveDrawableZOrderArchive::_Internal::indexes(const CommandSlideMoveDrawableZOrderArchive* msg) {
  return *msg->_impl_.indexes_;
}
void CommandSlideMoveDrawableZOrderArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlideMoveDrawableZOrderArchive::clear_slidenode() {
  if (_impl_.slidenode_ != nullptr) _impl_.slidenode_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSlideMoveDrawableZOrderArchive::clear_infos() {
  _impl_.infos_.Clear();
}
void CommandSlideMoveDrawableZOrderArchive::clear_old_ordered_infos() {
  _impl_.old_ordered_infos_.Clear();
}
void CommandSlideMoveDrawableZOrderArchive::clear_indexes() {
  if (_impl_.indexes_ != nullptr) _impl_.indexes_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandSlideMoveDrawableZOrderArchive::CommandSlideMoveDrawableZOrderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideMoveDrawableZOrderArchive)
}
CommandSlideMoveDrawableZOrderArchive::CommandSlideMoveDrawableZOrderArchive(const CommandSlideMoveDrawableZOrderArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideMoveDrawableZOrderArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.infos_){from._impl_.infos_}
    , decltype(_impl_.old_ordered_infos_){from._impl_.old_ordered_infos_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slidenode_){nullptr}
    , decltype(_impl_.indexes_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slidenode()) {
    _this->_impl_.slidenode_ = new ::TSP::Reference(*from._impl_.slidenode_);
  }
  if (from._internal_has_indexes()) {
    _this->_impl_.indexes_ = new ::TSP::IndexSet(*from._impl_.indexes_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideMoveDrawableZOrderArchive)
}

inline void CommandSlideMoveDrawableZOrderArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.infos_){arena}
    , decltype(_impl_.old_ordered_infos_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slidenode_){nullptr}
    , decltype(_impl_.indexes_){nullptr}
  };
}

CommandSlideMoveDrawableZOrderArchive::~CommandSlideMoveDrawableZOrderArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideMoveDrawableZOrderArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideMoveDrawableZOrderArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.infos_.~RepeatedPtrField();
  _impl_.old_ordered_infos_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slidenode_;
  if (this != internal_default_instance()) delete _impl_.indexes_;
}

void CommandSlideMoveDrawableZOrderArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideMoveDrawableZOrderArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideMoveDrawableZOrderArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.infos_.Clear();
  _impl_.old_ordered_infos_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slidenode_ != nullptr);
      _impl_.slidenode_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.indexes_ != nullptr);
      _impl_.indexes_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideMoveDrawableZOrderArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference slideNode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slidenode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference infos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_ordered_infos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_ordered_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .TSP.IndexSet indexes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_indexes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideMoveDrawableZOrderArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideMoveDrawableZOrderArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference slideNode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slidenode(this),
        _Internal::slidenode(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference infos = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference old_ordered_infos = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_ordered_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_ordered_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .TSP.IndexSet indexes = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::indexes(this),
        _Internal::indexes(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideMoveDrawableZOrderArchive)
  return target;
}

size_t CommandSlideMoveDrawableZOrderArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideMoveDrawableZOrderArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slidenode()) {
    // required .TSP.Reference slideNode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slidenode_);
  }

  if (_internal_has_indexes()) {
    // required .TSP.IndexSet indexes = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.indexes_);
  }

  return total_size;
}
size_t CommandSlideMoveDrawableZOrderArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideMoveDrawableZOrderArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference slideNode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slidenode_);

    // required .TSP.IndexSet indexes = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.indexes_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference infos = 3;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->_impl_.infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_ordered_infos = 4;
  total_size += 1UL * this->_internal_old_ordered_infos_size();
  for (const auto& msg : this->_impl_.old_ordered_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideMoveDrawableZOrderArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideMoveDrawableZOrderArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideMoveDrawableZOrderArchive::GetClassData() const { return &_class_data_; }


void CommandSlideMoveDrawableZOrderArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideMoveDrawableZOrderArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideMoveDrawableZOrderArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideMoveDrawableZOrderArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.infos_.MergeFrom(from._impl_.infos_);
  _this->_impl_.old_ordered_infos_.MergeFrom(from._impl_.old_ordered_infos_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slidenode()->::TSP::Reference::MergeFrom(
          from._internal_slidenode());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_indexes()->::TSP::IndexSet::MergeFrom(
          from._internal_indexes());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideMoveDrawableZOrderArchive::CopyFrom(const CommandSlideMoveDrawableZOrderArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideMoveDrawableZOrderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideMoveDrawableZOrderArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.infos_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.old_ordered_infos_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slidenode()) {
    if (!_impl_.slidenode_->IsInitialized()) return false;
  }
  if (_internal_has_indexes()) {
    if (!_impl_.indexes_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideMoveDrawableZOrderArchive::InternalSwap(CommandSlideMoveDrawableZOrderArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.infos_.InternalSwap(&other->_impl_.infos_);
  _impl_.old_ordered_infos_.InternalSwap(&other->_impl_.old_ordered_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideMoveDrawableZOrderArchive, _impl_.indexes_)
      + sizeof(CommandSlideMoveDrawableZOrderArchive::_impl_.indexes_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideMoveDrawableZOrderArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideMoveDrawableZOrderArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[4]);
}

// ===================================================================

class CommandSlidePasteDrawablesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlidePasteDrawablesArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlidePasteDrawablesArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& slide(const CommandSlidePasteDrawablesArchive* msg);
  static void set_has_slide(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_has_builds(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlidePasteDrawablesArchive::_Internal::super(const CommandSlidePasteDrawablesArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSlidePasteDrawablesArchive::_Internal::slide(const CommandSlidePasteDrawablesArchive* msg) {
  return *msg->_impl_.slide_;
}
void CommandSlidePasteDrawablesArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlidePasteDrawablesArchive::clear_commands() {
  _impl_.commands_.Clear();
}
void CommandSlidePasteDrawablesArchive::clear_slide() {
  if (_impl_.slide_ != nullptr) _impl_.slide_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSlidePasteDrawablesArchive::clear_drawables() {
  _impl_.drawables_.Clear();
}
CommandSlidePasteDrawablesArchive::CommandSlidePasteDrawablesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlidePasteDrawablesArchive)
}
CommandSlidePasteDrawablesArchive::CommandSlidePasteDrawablesArchive(const CommandSlidePasteDrawablesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlidePasteDrawablesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.commands_){from._impl_.commands_}
    , decltype(_impl_.drawables_){from._impl_.drawables_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_){nullptr}
    , decltype(_impl_.has_builds_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slide()) {
    _this->_impl_.slide_ = new ::TSP::Reference(*from._impl_.slide_);
  }
  _this->_impl_.has_builds_ = from._impl_.has_builds_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlidePasteDrawablesArchive)
}

inline void CommandSlidePasteDrawablesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.commands_){arena}
    , decltype(_impl_.drawables_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_){nullptr}
    , decltype(_impl_.has_builds_){false}
  };
}

CommandSlidePasteDrawablesArchive::~CommandSlidePasteDrawablesArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlidePasteDrawablesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlidePasteDrawablesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.commands_.~RepeatedPtrField();
  _impl_.drawables_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slide_;
}

void CommandSlidePasteDrawablesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlidePasteDrawablesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlidePasteDrawablesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.commands_.Clear();
  _impl_.drawables_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slide_ != nullptr);
      _impl_.slide_->Clear();
    }
  }
  _impl_.has_builds_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlidePasteDrawablesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference commands = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference slide = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference drawables = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool has_builds = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_has_builds(&has_bits);
          _impl_.has_builds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlidePasteDrawablesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlidePasteDrawablesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference commands = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_commands_size()); i < n; i++) {
    const auto& repfield = this->_internal_commands(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .TSP.Reference slide = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::slide(this),
        _Internal::slide(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference drawables = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_drawables_size()); i < n; i++) {
    const auto& repfield = this->_internal_drawables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool has_builds = 5 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_has_builds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlidePasteDrawablesArchive)
  return target;
}

size_t CommandSlidePasteDrawablesArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlidePasteDrawablesArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slide()) {
    // required .TSP.Reference slide = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_);
  }

  return total_size;
}
size_t CommandSlidePasteDrawablesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlidePasteDrawablesArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference slide = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference commands = 2;
  total_size += 1UL * this->_internal_commands_size();
  for (const auto& msg : this->_impl_.commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference drawables = 4;
  total_size += 1UL * this->_internal_drawables_size();
  for (const auto& msg : this->_impl_.drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool has_builds = 5 [default = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlidePasteDrawablesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlidePasteDrawablesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlidePasteDrawablesArchive::GetClassData() const { return &_class_data_; }


void CommandSlidePasteDrawablesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlidePasteDrawablesArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlidePasteDrawablesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlidePasteDrawablesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.commands_.MergeFrom(from._impl_.commands_);
  _this->_impl_.drawables_.MergeFrom(from._impl_.drawables_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slide()->::TSP::Reference::MergeFrom(
          from._internal_slide());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.has_builds_ = from._impl_.has_builds_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlidePasteDrawablesArchive::CopyFrom(const CommandSlidePasteDrawablesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlidePasteDrawablesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlidePasteDrawablesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.commands_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.drawables_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slide()) {
    if (!_impl_.slide_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlidePasteDrawablesArchive::InternalSwap(CommandSlidePasteDrawablesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.commands_.InternalSwap(&other->_impl_.commands_);
  _impl_.drawables_.InternalSwap(&other->_impl_.drawables_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlidePasteDrawablesArchive, _impl_.has_builds_)
      + sizeof(CommandSlidePasteDrawablesArchive::_impl_.has_builds_)
      - PROTOBUF_FIELD_OFFSET(CommandSlidePasteDrawablesArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlidePasteDrawablesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[5]);
}

// ===================================================================

class CommandSlideNodeSetPropertyArchive_PropertyValue::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideNodeSetPropertyArchive_PropertyValue>()._impl_._has_bits_);
  static void set_has_boolvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::DataReference& image(const CommandSlideNodeSetPropertyArchive_PropertyValue* msg);
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& database_image(const CommandSlideNodeSetPropertyArchive_PropertyValue* msg);
  static void set_has_database_image(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::DataReference&
CommandSlideNodeSetPropertyArchive_PropertyValue::_Internal::image(const CommandSlideNodeSetPropertyArchive_PropertyValue* msg) {
  return *msg->_impl_.image_;
}
const ::TSP::Reference&
CommandSlideNodeSetPropertyArchive_PropertyValue::_Internal::database_image(const CommandSlideNodeSetPropertyArchive_PropertyValue* msg) {
  return *msg->_impl_.database_image_;
}
void CommandSlideNodeSetPropertyArchive_PropertyValue::clear_image() {
  if (_impl_.image_ != nullptr) _impl_.image_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSlideNodeSetPropertyArchive_PropertyValue::clear_database_image() {
  if (_impl_.database_image_ != nullptr) _impl_.database_image_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CommandSlideNodeSetPropertyArchive_PropertyValue::CommandSlideNodeSetPropertyArchive_PropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideNodeSetPropertyArchive.PropertyValue)
}
CommandSlideNodeSetPropertyArchive_PropertyValue::CommandSlideNodeSetPropertyArchive_PropertyValue(const CommandSlideNodeSetPropertyArchive_PropertyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideNodeSetPropertyArchive_PropertyValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.database_image_){nullptr}
    , decltype(_impl_.image_){nullptr}
    , decltype(_impl_.boolvalue_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_database_image()) {
    _this->_impl_.database_image_ = new ::TSP::Reference(*from._impl_.database_image_);
  }
  if (from._internal_has_image()) {
    _this->_impl_.image_ = new ::TSP::DataReference(*from._impl_.image_);
  }
  _this->_impl_.boolvalue_ = from._impl_.boolvalue_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideNodeSetPropertyArchive.PropertyValue)
}

inline void CommandSlideNodeSetPropertyArchive_PropertyValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.database_image_){nullptr}
    , decltype(_impl_.image_){nullptr}
    , decltype(_impl_.boolvalue_){false}
  };
}

CommandSlideNodeSetPropertyArchive_PropertyValue::~CommandSlideNodeSetPropertyArchive_PropertyValue() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideNodeSetPropertyArchive.PropertyValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideNodeSetPropertyArchive_PropertyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.database_image_;
  if (this != internal_default_instance()) delete _impl_.image_;
}

void CommandSlideNodeSetPropertyArchive_PropertyValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideNodeSetPropertyArchive_PropertyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideNodeSetPropertyArchive.PropertyValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.database_image_ != nullptr);
      _impl_.database_image_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.image_ != nullptr);
      _impl_.image_->Clear();
    }
  }
  _impl_.boolvalue_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideNodeSetPropertyArchive_PropertyValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool boolValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_boolvalue(&has_bits);
          _impl_.boolvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference database_image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference image = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideNodeSetPropertyArchive_PropertyValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideNodeSetPropertyArchive.PropertyValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool boolValue = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_boolvalue(), target);
  }

  // optional .TSP.Reference database_image = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::database_image(this),
        _Internal::database_image(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference image = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideNodeSetPropertyArchive.PropertyValue)
  return target;
}

size_t CommandSlideNodeSetPropertyArchive_PropertyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideNodeSetPropertyArchive.PropertyValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.Reference database_image = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.database_image_);
    }

    // optional .TSP.DataReference image = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.image_);
    }

    // optional bool boolValue = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideNodeSetPropertyArchive_PropertyValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideNodeSetPropertyArchive_PropertyValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideNodeSetPropertyArchive_PropertyValue::GetClassData() const { return &_class_data_; }


void CommandSlideNodeSetPropertyArchive_PropertyValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideNodeSetPropertyArchive_PropertyValue*>(&to_msg);
  auto& from = static_cast<const CommandSlideNodeSetPropertyArchive_PropertyValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideNodeSetPropertyArchive.PropertyValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_database_image()->::TSP::Reference::MergeFrom(
          from._internal_database_image());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_image()->::TSP::DataReference::MergeFrom(
          from._internal_image());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.boolvalue_ = from._impl_.boolvalue_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideNodeSetPropertyArchive_PropertyValue::CopyFrom(const CommandSlideNodeSetPropertyArchive_PropertyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideNodeSetPropertyArchive.PropertyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideNodeSetPropertyArchive_PropertyValue::IsInitialized() const {
  if (_internal_has_database_image()) {
    if (!_impl_.database_image_->IsInitialized()) return false;
  }
  if (_internal_has_image()) {
    if (!_impl_.image_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideNodeSetPropertyArchive_PropertyValue::InternalSwap(CommandSlideNodeSetPropertyArchive_PropertyValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideNodeSetPropertyArchive_PropertyValue, _impl_.boolvalue_)
      + sizeof(CommandSlideNodeSetPropertyArchive_PropertyValue::_impl_.boolvalue_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideNodeSetPropertyArchive_PropertyValue, _impl_.database_image_)>(
          reinterpret_cast<char*>(&_impl_.database_image_),
          reinterpret_cast<char*>(&other->_impl_.database_image_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideNodeSetPropertyArchive_PropertyValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[6]);
}

// ===================================================================

class CommandSlideNodeSetPropertyArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideNodeSetPropertyArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideNodeSetPropertyArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& slidenode(const CommandSlideNodeSetPropertyArchive* msg);
  static void set_has_slidenode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue& oldvalue(const CommandSlideNodeSetPropertyArchive* msg);
  static void set_has_oldvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue& newvalue(const CommandSlideNodeSetPropertyArchive* msg);
  static void set_has_newvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideNodeSetPropertyArchive::_Internal::super(const CommandSlideNodeSetPropertyArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSlideNodeSetPropertyArchive::_Internal::slidenode(const CommandSlideNodeSetPropertyArchive* msg) {
  return *msg->_impl_.slidenode_;
}
const ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue&
CommandSlideNodeSetPropertyArchive::_Internal::oldvalue(const CommandSlideNodeSetPropertyArchive* msg) {
  return *msg->_impl_.oldvalue_;
}
const ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue&
CommandSlideNodeSetPropertyArchive::_Internal::newvalue(const CommandSlideNodeSetPropertyArchive* msg) {
  return *msg->_impl_.newvalue_;
}
void CommandSlideNodeSetPropertyArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSlideNodeSetPropertyArchive::clear_slidenode() {
  if (_impl_.slidenode_ != nullptr) _impl_.slidenode_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandSlideNodeSetPropertyArchive::CommandSlideNodeSetPropertyArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideNodeSetPropertyArchive)
}
CommandSlideNodeSetPropertyArchive::CommandSlideNodeSetPropertyArchive(const CommandSlideNodeSetPropertyArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideNodeSetPropertyArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.property_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slidenode_){nullptr}
    , decltype(_impl_.oldvalue_){nullptr}
    , decltype(_impl_.newvalue_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_property()) {
    _this->_impl_.property_.Set(from._internal_property(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slidenode()) {
    _this->_impl_.slidenode_ = new ::TSP::Reference(*from._impl_.slidenode_);
  }
  if (from._internal_has_oldvalue()) {
    _this->_impl_.oldvalue_ = new ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue(*from._impl_.oldvalue_);
  }
  if (from._internal_has_newvalue()) {
    _this->_impl_.newvalue_ = new ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue(*from._impl_.newvalue_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideNodeSetPropertyArchive)
}

inline void CommandSlideNodeSetPropertyArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.property_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slidenode_){nullptr}
    , decltype(_impl_.oldvalue_){nullptr}
    , decltype(_impl_.newvalue_){nullptr}
  };
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandSlideNodeSetPropertyArchive::~CommandSlideNodeSetPropertyArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideNodeSetPropertyArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideNodeSetPropertyArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.property_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slidenode_;
  if (this != internal_default_instance()) delete _impl_.oldvalue_;
  if (this != internal_default_instance()) delete _impl_.newvalue_;
}

void CommandSlideNodeSetPropertyArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideNodeSetPropertyArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideNodeSetPropertyArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.property_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.slidenode_ != nullptr);
      _impl_.slidenode_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.oldvalue_ != nullptr);
      _impl_.oldvalue_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.newvalue_ != nullptr);
      _impl_.newvalue_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideNodeSetPropertyArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference slideNode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slidenode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string property = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_property();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.CommandSlideNodeSetPropertyArchive.property");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .KN.CommandSlideNodeSetPropertyArchive.PropertyValue oldValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldvalue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .KN.CommandSlideNodeSetPropertyArchive.PropertyValue newValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_newvalue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideNodeSetPropertyArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideNodeSetPropertyArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference slideNode = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slidenode(this),
        _Internal::slidenode(this).GetCachedSize(), target, stream);
  }

  // required string property = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property().data(), static_cast<int>(this->_internal_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandSlideNodeSetPropertyArchive.property");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_property(), target);
  }

  // required .KN.CommandSlideNodeSetPropertyArchive.PropertyValue oldValue = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::oldvalue(this),
        _Internal::oldvalue(this).GetCachedSize(), target, stream);
  }

  // required .KN.CommandSlideNodeSetPropertyArchive.PropertyValue newValue = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::newvalue(this),
        _Internal::newvalue(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideNodeSetPropertyArchive)
  return target;
}

size_t CommandSlideNodeSetPropertyArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideNodeSetPropertyArchive)
  size_t total_size = 0;

  if (_internal_has_property()) {
    // required string property = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slidenode()) {
    // required .TSP.Reference slideNode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slidenode_);
  }

  if (_internal_has_oldvalue()) {
    // required .KN.CommandSlideNodeSetPropertyArchive.PropertyValue oldValue = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.oldvalue_);
  }

  if (_internal_has_newvalue()) {
    // required .KN.CommandSlideNodeSetPropertyArchive.PropertyValue newValue = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.newvalue_);
  }

  return total_size;
}
size_t CommandSlideNodeSetPropertyArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideNodeSetPropertyArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string property = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());

    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference slideNode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slidenode_);

    // required .KN.CommandSlideNodeSetPropertyArchive.PropertyValue oldValue = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.oldvalue_);

    // required .KN.CommandSlideNodeSetPropertyArchive.PropertyValue newValue = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.newvalue_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideNodeSetPropertyArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideNodeSetPropertyArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideNodeSetPropertyArchive::GetClassData() const { return &_class_data_; }


void CommandSlideNodeSetPropertyArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideNodeSetPropertyArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideNodeSetPropertyArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideNodeSetPropertyArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_property(from._internal_property());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_slidenode()->::TSP::Reference::MergeFrom(
          from._internal_slidenode());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_oldvalue()->::KN::CommandSlideNodeSetPropertyArchive_PropertyValue::MergeFrom(
          from._internal_oldvalue());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_newvalue()->::KN::CommandSlideNodeSetPropertyArchive_PropertyValue::MergeFrom(
          from._internal_newvalue());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideNodeSetPropertyArchive::CopyFrom(const CommandSlideNodeSetPropertyArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideNodeSetPropertyArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideNodeSetPropertyArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slidenode()) {
    if (!_impl_.slidenode_->IsInitialized()) return false;
  }
  if (_internal_has_oldvalue()) {
    if (!_impl_.oldvalue_->IsInitialized()) return false;
  }
  if (_internal_has_newvalue()) {
    if (!_impl_.newvalue_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideNodeSetPropertyArchive::InternalSwap(CommandSlideNodeSetPropertyArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.property_, lhs_arena,
      &other->_impl_.property_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideNodeSetPropertyArchive, _impl_.newvalue_)
      + sizeof(CommandSlideNodeSetPropertyArchive::_impl_.newvalue_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideNodeSetPropertyArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideNodeSetPropertyArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[7]);
}

// ===================================================================

class CommandSlideSetValueArchive_PropertyValue::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideSetValueArchive_PropertyValue>()._impl_._has_bits_);
  static void set_has_boolvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& objectvalue(const CommandSlideSetValueArchive_PropertyValue* msg);
  static void set_has_objectvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::FillArchive& fill(const CommandSlideSetValueArchive_PropertyValue* msg);
  static void set_has_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
CommandSlideSetValueArchive_PropertyValue::_Internal::objectvalue(const CommandSlideSetValueArchive_PropertyValue* msg) {
  return *msg->_impl_.objectvalue_;
}
const ::TSD::FillArchive&
CommandSlideSetValueArchive_PropertyValue::_Internal::fill(const CommandSlideSetValueArchive_PropertyValue* msg) {
  return *msg->_impl_.fill_;
}
void CommandSlideSetValueArchive_PropertyValue::clear_objectvalue() {
  if (_impl_.objectvalue_ != nullptr) _impl_.objectvalue_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlideSetValueArchive_PropertyValue::clear_fill() {
  if (_impl_.fill_ != nullptr) _impl_.fill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandSlideSetValueArchive_PropertyValue::CommandSlideSetValueArchive_PropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideSetValueArchive.PropertyValue)
}
CommandSlideSetValueArchive_PropertyValue::CommandSlideSetValueArchive_PropertyValue(const CommandSlideSetValueArchive_PropertyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideSetValueArchive_PropertyValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.objectvalue_){nullptr}
    , decltype(_impl_.fill_){nullptr}
    , decltype(_impl_.boolvalue_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_objectvalue()) {
    _this->_impl_.objectvalue_ = new ::TSP::Reference(*from._impl_.objectvalue_);
  }
  if (from._internal_has_fill()) {
    _this->_impl_.fill_ = new ::TSD::FillArchive(*from._impl_.fill_);
  }
  _this->_impl_.boolvalue_ = from._impl_.boolvalue_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideSetValueArchive.PropertyValue)
}

inline void CommandSlideSetValueArchive_PropertyValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.objectvalue_){nullptr}
    , decltype(_impl_.fill_){nullptr}
    , decltype(_impl_.boolvalue_){false}
  };
}

CommandSlideSetValueArchive_PropertyValue::~CommandSlideSetValueArchive_PropertyValue() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideSetValueArchive.PropertyValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideSetValueArchive_PropertyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.objectvalue_;
  if (this != internal_default_instance()) delete _impl_.fill_;
}

void CommandSlideSetValueArchive_PropertyValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideSetValueArchive_PropertyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideSetValueArchive.PropertyValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.objectvalue_ != nullptr);
      _impl_.objectvalue_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.fill_ != nullptr);
      _impl_.fill_->Clear();
    }
  }
  _impl_.boolvalue_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideSetValueArchive_PropertyValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool boolValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_boolvalue(&has_bits);
          _impl_.boolvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference objectValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_objectvalue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive fill = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideSetValueArchive_PropertyValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideSetValueArchive.PropertyValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool boolValue = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_boolvalue(), target);
  }

  // optional .TSP.Reference objectValue = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::objectvalue(this),
        _Internal::objectvalue(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive fill = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::fill(this),
        _Internal::fill(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideSetValueArchive.PropertyValue)
  return target;
}

size_t CommandSlideSetValueArchive_PropertyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideSetValueArchive.PropertyValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.Reference objectValue = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.objectvalue_);
    }

    // optional .TSD.FillArchive fill = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.fill_);
    }

    // optional bool boolValue = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideSetValueArchive_PropertyValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideSetValueArchive_PropertyValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideSetValueArchive_PropertyValue::GetClassData() const { return &_class_data_; }


void CommandSlideSetValueArchive_PropertyValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideSetValueArchive_PropertyValue*>(&to_msg);
  auto& from = static_cast<const CommandSlideSetValueArchive_PropertyValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideSetValueArchive.PropertyValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_objectvalue()->::TSP::Reference::MergeFrom(
          from._internal_objectvalue());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_fill()->::TSD::FillArchive::MergeFrom(
          from._internal_fill());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.boolvalue_ = from._impl_.boolvalue_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideSetValueArchive_PropertyValue::CopyFrom(const CommandSlideSetValueArchive_PropertyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideSetValueArchive.PropertyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideSetValueArchive_PropertyValue::IsInitialized() const {
  if (_internal_has_objectvalue()) {
    if (!_impl_.objectvalue_->IsInitialized()) return false;
  }
  if (_internal_has_fill()) {
    if (!_impl_.fill_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideSetValueArchive_PropertyValue::InternalSwap(CommandSlideSetValueArchive_PropertyValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideSetValueArchive_PropertyValue, _impl_.boolvalue_)
      + sizeof(CommandSlideSetValueArchive_PropertyValue::_impl_.boolvalue_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideSetValueArchive_PropertyValue, _impl_.objectvalue_)>(
          reinterpret_cast<char*>(&_impl_.objectvalue_),
          reinterpret_cast<char*>(&other->_impl_.objectvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideSetValueArchive_PropertyValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[8]);
}

// ===================================================================

class CommandSlideSetValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideSetValueArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideSetValueArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& slide(const CommandSlideSetValueArchive* msg);
  static void set_has_slide(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::KN::CommandSlideSetValueArchive_PropertyValue& oldvalue(const CommandSlideSetValueArchive* msg);
  static void set_has_oldvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KN::CommandSlideSetValueArchive_PropertyValue& newvalue(const CommandSlideSetValueArchive* msg);
  static void set_has_newvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& oldslidestyle(const CommandSlideSetValueArchive* msg);
  static void set_has_oldslidestyle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideSetValueArchive::_Internal::super(const CommandSlideSetValueArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSlideSetValueArchive::_Internal::slide(const CommandSlideSetValueArchive* msg) {
  return *msg->_impl_.slide_;
}
const ::KN::CommandSlideSetValueArchive_PropertyValue&
CommandSlideSetValueArchive::_Internal::oldvalue(const CommandSlideSetValueArchive* msg) {
  return *msg->_impl_.oldvalue_;
}
const ::KN::CommandSlideSetValueArchive_PropertyValue&
CommandSlideSetValueArchive::_Internal::newvalue(const CommandSlideSetValueArchive* msg) {
  return *msg->_impl_.newvalue_;
}
const ::TSP::Reference&
CommandSlideSetValueArchive::_Internal::oldslidestyle(const CommandSlideSetValueArchive* msg) {
  return *msg->_impl_.oldslidestyle_;
}
void CommandSlideSetValueArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSlideSetValueArchive::clear_slide() {
  if (_impl_.slide_ != nullptr) _impl_.slide_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandSlideSetValueArchive::clear_oldslidestyle() {
  if (_impl_.oldslidestyle_ != nullptr) _impl_.oldslidestyle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
CommandSlideSetValueArchive::CommandSlideSetValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideSetValueArchive)
}
CommandSlideSetValueArchive::CommandSlideSetValueArchive(const CommandSlideSetValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideSetValueArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.property_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_){nullptr}
    , decltype(_impl_.oldvalue_){nullptr}
    , decltype(_impl_.newvalue_){nullptr}
    , decltype(_impl_.oldslidestyle_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_property()) {
    _this->_impl_.property_.Set(from._internal_property(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slide()) {
    _this->_impl_.slide_ = new ::TSP::Reference(*from._impl_.slide_);
  }
  if (from._internal_has_oldvalue()) {
    _this->_impl_.oldvalue_ = new ::KN::CommandSlideSetValueArchive_PropertyValue(*from._impl_.oldvalue_);
  }
  if (from._internal_has_newvalue()) {
    _this->_impl_.newvalue_ = new ::KN::CommandSlideSetValueArchive_PropertyValue(*from._impl_.newvalue_);
  }
  if (from._internal_has_oldslidestyle()) {
    _this->_impl_.oldslidestyle_ = new ::TSP::Reference(*from._impl_.oldslidestyle_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideSetValueArchive)
}

inline void CommandSlideSetValueArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.property_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_){nullptr}
    , decltype(_impl_.oldvalue_){nullptr}
    , decltype(_impl_.newvalue_){nullptr}
    , decltype(_impl_.oldslidestyle_){nullptr}
  };
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandSlideSetValueArchive::~CommandSlideSetValueArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideSetValueArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideSetValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.property_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slide_;
  if (this != internal_default_instance()) delete _impl_.oldvalue_;
  if (this != internal_default_instance()) delete _impl_.newvalue_;
  if (this != internal_default_instance()) delete _impl_.oldslidestyle_;
}

void CommandSlideSetValueArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideSetValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideSetValueArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.property_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.slide_ != nullptr);
      _impl_.slide_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.oldvalue_ != nullptr);
      _impl_.oldvalue_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.newvalue_ != nullptr);
      _impl_.newvalue_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.oldslidestyle_ != nullptr);
      _impl_.oldslidestyle_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideSetValueArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference slide = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string property = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_property();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.CommandSlideSetValueArchive.property");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .KN.CommandSlideSetValueArchive.PropertyValue oldValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldvalue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .KN.CommandSlideSetValueArchive.PropertyValue newValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_newvalue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference oldSlideStyle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldslidestyle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideSetValueArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideSetValueArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference slide = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slide(this),
        _Internal::slide(this).GetCachedSize(), target, stream);
  }

  // required string property = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property().data(), static_cast<int>(this->_internal_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandSlideSetValueArchive.property");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_property(), target);
  }

  // required .KN.CommandSlideSetValueArchive.PropertyValue oldValue = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::oldvalue(this),
        _Internal::oldvalue(this).GetCachedSize(), target, stream);
  }

  // required .KN.CommandSlideSetValueArchive.PropertyValue newValue = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::newvalue(this),
        _Internal::newvalue(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference oldSlideStyle = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::oldslidestyle(this),
        _Internal::oldslidestyle(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideSetValueArchive)
  return target;
}

size_t CommandSlideSetValueArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideSetValueArchive)
  size_t total_size = 0;

  if (_internal_has_property()) {
    // required string property = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slide()) {
    // required .TSP.Reference slide = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_);
  }

  if (_internal_has_oldvalue()) {
    // required .KN.CommandSlideSetValueArchive.PropertyValue oldValue = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.oldvalue_);
  }

  if (_internal_has_newvalue()) {
    // required .KN.CommandSlideSetValueArchive.PropertyValue newValue = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.newvalue_);
  }

  if (_internal_has_oldslidestyle()) {
    // required .TSP.Reference oldSlideStyle = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.oldslidestyle_);
  }

  return total_size;
}
size_t CommandSlideSetValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideSetValueArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string property = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());

    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference slide = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_);

    // required .KN.CommandSlideSetValueArchive.PropertyValue oldValue = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.oldvalue_);

    // required .KN.CommandSlideSetValueArchive.PropertyValue newValue = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.newvalue_);

    // required .TSP.Reference oldSlideStyle = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.oldslidestyle_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideSetValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideSetValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideSetValueArchive::GetClassData() const { return &_class_data_; }


void CommandSlideSetValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideSetValueArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideSetValueArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideSetValueArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_property(from._internal_property());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_slide()->::TSP::Reference::MergeFrom(
          from._internal_slide());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_oldvalue()->::KN::CommandSlideSetValueArchive_PropertyValue::MergeFrom(
          from._internal_oldvalue());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_newvalue()->::KN::CommandSlideSetValueArchive_PropertyValue::MergeFrom(
          from._internal_newvalue());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_oldslidestyle()->::TSP::Reference::MergeFrom(
          from._internal_oldslidestyle());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideSetValueArchive::CopyFrom(const CommandSlideSetValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideSetValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideSetValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slide()) {
    if (!_impl_.slide_->IsInitialized()) return false;
  }
  if (_internal_has_oldvalue()) {
    if (!_impl_.oldvalue_->IsInitialized()) return false;
  }
  if (_internal_has_newvalue()) {
    if (!_impl_.newvalue_->IsInitialized()) return false;
  }
  if (_internal_has_oldslidestyle()) {
    if (!_impl_.oldslidestyle_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideSetValueArchive::InternalSwap(CommandSlideSetValueArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.property_, lhs_arena,
      &other->_impl_.property_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideSetValueArchive, _impl_.oldslidestyle_)
      + sizeof(CommandSlideSetValueArchive::_impl_.oldslidestyle_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideSetValueArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideSetValueArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[9]);
}

// ===================================================================

class CommandSlideSetStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideSetStyleArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideSetStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& slide(const CommandSlideSetStyleArchive* msg);
  static void set_has_slide(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& slide_style(const CommandSlideSetStyleArchive* msg);
  static void set_has_slide_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& old_slide_style(const CommandSlideSetStyleArchive* msg);
  static void set_has_old_slide_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideSetStyleArchive::_Internal::super(const CommandSlideSetStyleArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSlideSetStyleArchive::_Internal::slide(const CommandSlideSetStyleArchive* msg) {
  return *msg->_impl_.slide_;
}
const ::TSP::Reference&
CommandSlideSetStyleArchive::_Internal::slide_style(const CommandSlideSetStyleArchive* msg) {
  return *msg->_impl_.slide_style_;
}
const ::TSP::Reference&
CommandSlideSetStyleArchive::_Internal::old_slide_style(const CommandSlideSetStyleArchive* msg) {
  return *msg->_impl_.old_slide_style_;
}
void CommandSlideSetStyleArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlideSetStyleArchive::clear_slide() {
  if (_impl_.slide_ != nullptr) _impl_.slide_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSlideSetStyleArchive::clear_slide_style() {
  if (_impl_.slide_style_ != nullptr) _impl_.slide_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandSlideSetStyleArchive::clear_old_slide_style() {
  if (_impl_.old_slide_style_ != nullptr) _impl_.old_slide_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandSlideSetStyleArchive::CommandSlideSetStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideSetStyleArchive)
}
CommandSlideSetStyleArchive::CommandSlideSetStyleArchive(const CommandSlideSetStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideSetStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_){nullptr}
    , decltype(_impl_.slide_style_){nullptr}
    , decltype(_impl_.old_slide_style_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slide()) {
    _this->_impl_.slide_ = new ::TSP::Reference(*from._impl_.slide_);
  }
  if (from._internal_has_slide_style()) {
    _this->_impl_.slide_style_ = new ::TSP::Reference(*from._impl_.slide_style_);
  }
  if (from._internal_has_old_slide_style()) {
    _this->_impl_.old_slide_style_ = new ::TSP::Reference(*from._impl_.old_slide_style_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideSetStyleArchive)
}

inline void CommandSlideSetStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_){nullptr}
    , decltype(_impl_.slide_style_){nullptr}
    , decltype(_impl_.old_slide_style_){nullptr}
  };
}

CommandSlideSetStyleArchive::~CommandSlideSetStyleArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideSetStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideSetStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slide_;
  if (this != internal_default_instance()) delete _impl_.slide_style_;
  if (this != internal_default_instance()) delete _impl_.old_slide_style_;
}

void CommandSlideSetStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideSetStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideSetStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slide_ != nullptr);
      _impl_.slide_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.slide_style_ != nullptr);
      _impl_.slide_style_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.old_slide_style_ != nullptr);
      _impl_.old_slide_style_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideSetStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference slide = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference slide_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference old_slide_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_slide_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideSetStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideSetStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference slide = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slide(this),
        _Internal::slide(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference slide_style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::slide_style(this),
        _Internal::slide_style(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference old_slide_style = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::old_slide_style(this),
        _Internal::old_slide_style(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideSetStyleArchive)
  return target;
}

size_t CommandSlideSetStyleArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideSetStyleArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slide()) {
    // required .TSP.Reference slide = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_);
  }

  if (_internal_has_slide_style()) {
    // required .TSP.Reference slide_style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_style_);
  }

  if (_internal_has_old_slide_style()) {
    // required .TSP.Reference old_slide_style = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_slide_style_);
  }

  return total_size;
}
size_t CommandSlideSetStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideSetStyleArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference slide = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_);

    // required .TSP.Reference slide_style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_style_);

    // required .TSP.Reference old_slide_style = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_slide_style_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideSetStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideSetStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideSetStyleArchive::GetClassData() const { return &_class_data_; }


void CommandSlideSetStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideSetStyleArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideSetStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideSetStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slide()->::TSP::Reference::MergeFrom(
          from._internal_slide());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_slide_style()->::TSP::Reference::MergeFrom(
          from._internal_slide_style());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_old_slide_style()->::TSP::Reference::MergeFrom(
          from._internal_old_slide_style());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideSetStyleArchive::CopyFrom(const CommandSlideSetStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideSetStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideSetStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slide()) {
    if (!_impl_.slide_->IsInitialized()) return false;
  }
  if (_internal_has_slide_style()) {
    if (!_impl_.slide_style_->IsInitialized()) return false;
  }
  if (_internal_has_old_slide_style()) {
    if (!_impl_.old_slide_style_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideSetStyleArchive::InternalSwap(CommandSlideSetStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideSetStyleArchive, _impl_.old_slide_style_)
      + sizeof(CommandSlideSetStyleArchive::_impl_.old_slide_style_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideSetStyleArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideSetStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[10]);
}

// ===================================================================

class CommandShowMarkOutOfSyncRecordingArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowMarkOutOfSyncRecordingArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowMarkOutOfSyncRecordingArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& show(const CommandShowMarkOutOfSyncRecordingArchive* msg);
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& old_recording(const CommandShowMarkOutOfSyncRecordingArchive* msg);
  static void set_has_old_recording(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowMarkOutOfSyncRecordingArchive::_Internal::super(const CommandShowMarkOutOfSyncRecordingArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandShowMarkOutOfSyncRecordingArchive::_Internal::show(const CommandShowMarkOutOfSyncRecordingArchive* msg) {
  return *msg->_impl_.show_;
}
const ::TSP::Reference&
CommandShowMarkOutOfSyncRecordingArchive::_Internal::old_recording(const CommandShowMarkOutOfSyncRecordingArchive* msg) {
  return *msg->_impl_.old_recording_;
}
void CommandShowMarkOutOfSyncRecordingArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandShowMarkOutOfSyncRecordingArchive::clear_show() {
  if (_impl_.show_ != nullptr) _impl_.show_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandShowMarkOutOfSyncRecordingArchive::clear_old_recording() {
  if (_impl_.old_recording_ != nullptr) _impl_.old_recording_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandShowMarkOutOfSyncRecordingArchive::CommandShowMarkOutOfSyncRecordingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowMarkOutOfSyncRecordingArchive)
}
CommandShowMarkOutOfSyncRecordingArchive::CommandShowMarkOutOfSyncRecordingArchive(const CommandShowMarkOutOfSyncRecordingArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandShowMarkOutOfSyncRecordingArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.old_recording_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_show()) {
    _this->_impl_.show_ = new ::TSP::Reference(*from._impl_.show_);
  }
  if (from._internal_has_old_recording()) {
    _this->_impl_.old_recording_ = new ::TSP::Reference(*from._impl_.old_recording_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowMarkOutOfSyncRecordingArchive)
}

inline void CommandShowMarkOutOfSyncRecordingArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.old_recording_){nullptr}
  };
}

CommandShowMarkOutOfSyncRecordingArchive::~CommandShowMarkOutOfSyncRecordingArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowMarkOutOfSyncRecordingArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandShowMarkOutOfSyncRecordingArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.show_;
  if (this != internal_default_instance()) delete _impl_.old_recording_;
}

void CommandShowMarkOutOfSyncRecordingArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandShowMarkOutOfSyncRecordingArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowMarkOutOfSyncRecordingArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.show_ != nullptr);
      _impl_.show_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.old_recording_ != nullptr);
      _impl_.old_recording_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowMarkOutOfSyncRecordingArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_show(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference old_recording = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_recording(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandShowMarkOutOfSyncRecordingArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowMarkOutOfSyncRecordingArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference show = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::show(this),
        _Internal::show(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference old_recording = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::old_recording(this),
        _Internal::old_recording(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowMarkOutOfSyncRecordingArchive)
  return target;
}

size_t CommandShowMarkOutOfSyncRecordingArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandShowMarkOutOfSyncRecordingArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_show()) {
    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);
  }

  return total_size;
}
size_t CommandShowMarkOutOfSyncRecordingArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowMarkOutOfSyncRecordingArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference old_recording = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_recording_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowMarkOutOfSyncRecordingArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandShowMarkOutOfSyncRecordingArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowMarkOutOfSyncRecordingArchive::GetClassData() const { return &_class_data_; }


void CommandShowMarkOutOfSyncRecordingArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandShowMarkOutOfSyncRecordingArchive*>(&to_msg);
  auto& from = static_cast<const CommandShowMarkOutOfSyncRecordingArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowMarkOutOfSyncRecordingArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_show()->::TSP::Reference::MergeFrom(
          from._internal_show());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_old_recording()->::TSP::Reference::MergeFrom(
          from._internal_old_recording());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowMarkOutOfSyncRecordingArchive::CopyFrom(const CommandShowMarkOutOfSyncRecordingArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowMarkOutOfSyncRecordingArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowMarkOutOfSyncRecordingArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_show()) {
    if (!_impl_.show_->IsInitialized()) return false;
  }
  if (_internal_has_old_recording()) {
    if (!_impl_.old_recording_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowMarkOutOfSyncRecordingArchive::InternalSwap(CommandShowMarkOutOfSyncRecordingArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowMarkOutOfSyncRecordingArchive, _impl_.old_recording_)
      + sizeof(CommandShowMarkOutOfSyncRecordingArchive::_impl_.old_recording_)
      - PROTOBUF_FIELD_OFFSET(CommandShowMarkOutOfSyncRecordingArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowMarkOutOfSyncRecordingArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[11]);
}

// ===================================================================

class CommandShowRemoveRecordingArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowRemoveRecordingArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowRemoveRecordingArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& show(const CommandShowRemoveRecordingArchive* msg);
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& old_recording(const CommandShowRemoveRecordingArchive* msg);
  static void set_has_old_recording(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowRemoveRecordingArchive::_Internal::super(const CommandShowRemoveRecordingArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandShowRemoveRecordingArchive::_Internal::show(const CommandShowRemoveRecordingArchive* msg) {
  return *msg->_impl_.show_;
}
const ::TSP::Reference&
CommandShowRemoveRecordingArchive::_Internal::old_recording(const CommandShowRemoveRecordingArchive* msg) {
  return *msg->_impl_.old_recording_;
}
void CommandShowRemoveRecordingArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandShowRemoveRecordingArchive::clear_show() {
  if (_impl_.show_ != nullptr) _impl_.show_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandShowRemoveRecordingArchive::clear_old_recording() {
  if (_impl_.old_recording_ != nullptr) _impl_.old_recording_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandShowRemoveRecordingArchive::CommandShowRemoveRecordingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowRemoveRecordingArchive)
}
CommandShowRemoveRecordingArchive::CommandShowRemoveRecordingArchive(const CommandShowRemoveRecordingArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandShowRemoveRecordingArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.old_recording_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_show()) {
    _this->_impl_.show_ = new ::TSP::Reference(*from._impl_.show_);
  }
  if (from._internal_has_old_recording()) {
    _this->_impl_.old_recording_ = new ::TSP::Reference(*from._impl_.old_recording_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowRemoveRecordingArchive)
}

inline void CommandShowRemoveRecordingArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.old_recording_){nullptr}
  };
}

CommandShowRemoveRecordingArchive::~CommandShowRemoveRecordingArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowRemoveRecordingArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandShowRemoveRecordingArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.show_;
  if (this != internal_default_instance()) delete _impl_.old_recording_;
}

void CommandShowRemoveRecordingArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandShowRemoveRecordingArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowRemoveRecordingArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.show_ != nullptr);
      _impl_.show_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.old_recording_ != nullptr);
      _impl_.old_recording_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowRemoveRecordingArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_show(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference old_recording = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_recording(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandShowRemoveRecordingArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowRemoveRecordingArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference show = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::show(this),
        _Internal::show(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference old_recording = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::old_recording(this),
        _Internal::old_recording(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowRemoveRecordingArchive)
  return target;
}

size_t CommandShowRemoveRecordingArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandShowRemoveRecordingArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_show()) {
    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);
  }

  return total_size;
}
size_t CommandShowRemoveRecordingArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowRemoveRecordingArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference old_recording = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_recording_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowRemoveRecordingArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandShowRemoveRecordingArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowRemoveRecordingArchive::GetClassData() const { return &_class_data_; }


void CommandShowRemoveRecordingArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandShowRemoveRecordingArchive*>(&to_msg);
  auto& from = static_cast<const CommandShowRemoveRecordingArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowRemoveRecordingArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_show()->::TSP::Reference::MergeFrom(
          from._internal_show());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_old_recording()->::TSP::Reference::MergeFrom(
          from._internal_old_recording());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowRemoveRecordingArchive::CopyFrom(const CommandShowRemoveRecordingArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowRemoveRecordingArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowRemoveRecordingArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_show()) {
    if (!_impl_.show_->IsInitialized()) return false;
  }
  if (_internal_has_old_recording()) {
    if (!_impl_.old_recording_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowRemoveRecordingArchive::InternalSwap(CommandShowRemoveRecordingArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowRemoveRecordingArchive, _impl_.old_recording_)
      + sizeof(CommandShowRemoveRecordingArchive::_impl_.old_recording_)
      - PROTOBUF_FIELD_OFFSET(CommandShowRemoveRecordingArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowRemoveRecordingArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[12]);
}

// ===================================================================

class CommandShowReplaceRecordingArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowReplaceRecordingArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowReplaceRecordingArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& show(const CommandShowReplaceRecordingArchive* msg);
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& replacement_recording(const CommandShowReplaceRecordingArchive* msg);
  static void set_has_replacement_recording(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_replacement_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& old_recording(const CommandShowReplaceRecordingArchive* msg);
  static void set_has_old_recording(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000017) ^ 0x00000017) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowReplaceRecordingArchive::_Internal::super(const CommandShowReplaceRecordingArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandShowReplaceRecordingArchive::_Internal::show(const CommandShowReplaceRecordingArchive* msg) {
  return *msg->_impl_.show_;
}
const ::TSP::Reference&
CommandShowReplaceRecordingArchive::_Internal::replacement_recording(const CommandShowReplaceRecordingArchive* msg) {
  return *msg->_impl_.replacement_recording_;
}
const ::TSP::Reference&
CommandShowReplaceRecordingArchive::_Internal::old_recording(const CommandShowReplaceRecordingArchive* msg) {
  return *msg->_impl_.old_recording_;
}
void CommandShowReplaceRecordingArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandShowReplaceRecordingArchive::clear_show() {
  if (_impl_.show_ != nullptr) _impl_.show_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandShowReplaceRecordingArchive::clear_replacement_recording() {
  if (_impl_.replacement_recording_ != nullptr) _impl_.replacement_recording_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandShowReplaceRecordingArchive::clear_old_recording() {
  if (_impl_.old_recording_ != nullptr) _impl_.old_recording_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandShowReplaceRecordingArchive::CommandShowReplaceRecordingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowReplaceRecordingArchive)
}
CommandShowReplaceRecordingArchive::CommandShowReplaceRecordingArchive(const CommandShowReplaceRecordingArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandShowReplaceRecordingArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.replacement_recording_){nullptr}
    , decltype(_impl_.old_recording_){nullptr}
    , decltype(_impl_.replacement_start_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_show()) {
    _this->_impl_.show_ = new ::TSP::Reference(*from._impl_.show_);
  }
  if (from._internal_has_replacement_recording()) {
    _this->_impl_.replacement_recording_ = new ::TSP::Reference(*from._impl_.replacement_recording_);
  }
  if (from._internal_has_old_recording()) {
    _this->_impl_.old_recording_ = new ::TSP::Reference(*from._impl_.old_recording_);
  }
  _this->_impl_.replacement_start_time_ = from._impl_.replacement_start_time_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowReplaceRecordingArchive)
}

inline void CommandShowReplaceRecordingArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.replacement_recording_){nullptr}
    , decltype(_impl_.old_recording_){nullptr}
    , decltype(_impl_.replacement_start_time_){0}
  };
}

CommandShowReplaceRecordingArchive::~CommandShowReplaceRecordingArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowReplaceRecordingArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandShowReplaceRecordingArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.show_;
  if (this != internal_default_instance()) delete _impl_.replacement_recording_;
  if (this != internal_default_instance()) delete _impl_.old_recording_;
}

void CommandShowReplaceRecordingArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandShowReplaceRecordingArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowReplaceRecordingArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.show_ != nullptr);
      _impl_.show_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.replacement_recording_ != nullptr);
      _impl_.replacement_recording_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.old_recording_ != nullptr);
      _impl_.old_recording_->Clear();
    }
  }
  _impl_.replacement_start_time_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowReplaceRecordingArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_show(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference replacement_recording = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_replacement_recording(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double replacement_start_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_replacement_start_time(&has_bits);
          _impl_.replacement_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference old_recording = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_recording(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandShowReplaceRecordingArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowReplaceRecordingArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference show = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::show(this),
        _Internal::show(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference replacement_recording = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::replacement_recording(this),
        _Internal::replacement_recording(this).GetCachedSize(), target, stream);
  }

  // required double replacement_start_time = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_replacement_start_time(), target);
  }

  // optional .TSP.Reference old_recording = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::old_recording(this),
        _Internal::old_recording(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowReplaceRecordingArchive)
  return target;
}

size_t CommandShowReplaceRecordingArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandShowReplaceRecordingArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_show()) {
    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);
  }

  if (_internal_has_replacement_recording()) {
    // required .TSP.Reference replacement_recording = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.replacement_recording_);
  }

  if (_internal_has_replacement_start_time()) {
    // required double replacement_start_time = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t CommandShowReplaceRecordingArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowReplaceRecordingArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000017) ^ 0x00000017) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);

    // required .TSP.Reference replacement_recording = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.replacement_recording_);

    // required double replacement_start_time = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference old_recording = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_recording_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowReplaceRecordingArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandShowReplaceRecordingArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowReplaceRecordingArchive::GetClassData() const { return &_class_data_; }


void CommandShowReplaceRecordingArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandShowReplaceRecordingArchive*>(&to_msg);
  auto& from = static_cast<const CommandShowReplaceRecordingArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowReplaceRecordingArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_show()->::TSP::Reference::MergeFrom(
          from._internal_show());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_replacement_recording()->::TSP::Reference::MergeFrom(
          from._internal_replacement_recording());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_old_recording()->::TSP::Reference::MergeFrom(
          from._internal_old_recording());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.replacement_start_time_ = from._impl_.replacement_start_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowReplaceRecordingArchive::CopyFrom(const CommandShowReplaceRecordingArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowReplaceRecordingArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowReplaceRecordingArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_show()) {
    if (!_impl_.show_->IsInitialized()) return false;
  }
  if (_internal_has_replacement_recording()) {
    if (!_impl_.replacement_recording_->IsInitialized()) return false;
  }
  if (_internal_has_old_recording()) {
    if (!_impl_.old_recording_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowReplaceRecordingArchive::InternalSwap(CommandShowReplaceRecordingArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowReplaceRecordingArchive, _impl_.replacement_start_time_)
      + sizeof(CommandShowReplaceRecordingArchive::_impl_.replacement_start_time_)
      - PROTOBUF_FIELD_OFFSET(CommandShowReplaceRecordingArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowReplaceRecordingArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[13]);
}

// ===================================================================

class CommandShowSetValueArchive_PropertyValue::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowSetValueArchive_PropertyValue>()._impl_._has_bits_);
  static void set_has_bool_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_double_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_show_mode_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Size& size_value(const CommandShowSetValueArchive_PropertyValue* msg);
  static void set_has_size_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Size&
CommandShowSetValueArchive_PropertyValue::_Internal::size_value(const CommandShowSetValueArchive_PropertyValue* msg) {
  return *msg->_impl_.size_value_;
}
void CommandShowSetValueArchive_PropertyValue::clear_size_value() {
  if (_impl_.size_value_ != nullptr) _impl_.size_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CommandShowSetValueArchive_PropertyValue::CommandShowSetValueArchive_PropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowSetValueArchive.PropertyValue)
}
CommandShowSetValueArchive_PropertyValue::CommandShowSetValueArchive_PropertyValue(const CommandShowSetValueArchive_PropertyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandShowSetValueArchive_PropertyValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.size_value_){nullptr}
    , decltype(_impl_.double_value_){}
    , decltype(_impl_.bool_value_){}
    , decltype(_impl_.show_mode_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_size_value()) {
    _this->_impl_.size_value_ = new ::TSP::Size(*from._impl_.size_value_);
  }
  ::memcpy(&_impl_.double_value_, &from._impl_.double_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.show_mode_value_) -
    reinterpret_cast<char*>(&_impl_.double_value_)) + sizeof(_impl_.show_mode_value_));
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowSetValueArchive.PropertyValue)
}

inline void CommandShowSetValueArchive_PropertyValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.size_value_){nullptr}
    , decltype(_impl_.double_value_){0}
    , decltype(_impl_.bool_value_){false}
    , decltype(_impl_.show_mode_value_){0}
  };
}

CommandShowSetValueArchive_PropertyValue::~CommandShowSetValueArchive_PropertyValue() {
  // @@protoc_insertion_point(destructor:KN.CommandShowSetValueArchive.PropertyValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandShowSetValueArchive_PropertyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.size_value_;
}

void CommandShowSetValueArchive_PropertyValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandShowSetValueArchive_PropertyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowSetValueArchive.PropertyValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.size_value_ != nullptr);
    _impl_.size_value_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.double_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.show_mode_value_) -
        reinterpret_cast<char*>(&_impl_.double_value_)) + sizeof(_impl_.show_mode_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowSetValueArchive_PropertyValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bool_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_bool_value(&has_bits);
          _impl_.bool_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double double_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_double_value(&has_bits);
          _impl_.double_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.ShowArchive.KNShowMode show_mode_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::ShowArchive_KNShowMode_IsValid(val))) {
            _internal_set_show_mode_value(static_cast<::KN::ShowArchive_KNShowMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Size size_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_size_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandShowSetValueArchive_PropertyValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowSetValueArchive.PropertyValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bool_value = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_bool_value(), target);
  }

  // optional double double_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_double_value(), target);
  }

  // optional .KN.ShowArchive.KNShowMode show_mode_value = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_show_mode_value(), target);
  }

  // optional .TSP.Size size_value = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::size_value(this),
        _Internal::size_value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowSetValueArchive.PropertyValue)
  return target;
}

size_t CommandShowSetValueArchive_PropertyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowSetValueArchive.PropertyValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSP.Size size_value = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.size_value_);
    }

    // optional double double_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool bool_value = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .KN.ShowArchive.KNShowMode show_mode_value = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_show_mode_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowSetValueArchive_PropertyValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandShowSetValueArchive_PropertyValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowSetValueArchive_PropertyValue::GetClassData() const { return &_class_data_; }


void CommandShowSetValueArchive_PropertyValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandShowSetValueArchive_PropertyValue*>(&to_msg);
  auto& from = static_cast<const CommandShowSetValueArchive_PropertyValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowSetValueArchive.PropertyValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_size_value()->::TSP::Size::MergeFrom(
          from._internal_size_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.double_value_ = from._impl_.double_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bool_value_ = from._impl_.bool_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.show_mode_value_ = from._impl_.show_mode_value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowSetValueArchive_PropertyValue::CopyFrom(const CommandShowSetValueArchive_PropertyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowSetValueArchive.PropertyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowSetValueArchive_PropertyValue::IsInitialized() const {
  if (_internal_has_size_value()) {
    if (!_impl_.size_value_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowSetValueArchive_PropertyValue::InternalSwap(CommandShowSetValueArchive_PropertyValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowSetValueArchive_PropertyValue, _impl_.show_mode_value_)
      + sizeof(CommandShowSetValueArchive_PropertyValue::_impl_.show_mode_value_)
      - PROTOBUF_FIELD_OFFSET(CommandShowSetValueArchive_PropertyValue, _impl_.size_value_)>(
          reinterpret_cast<char*>(&_impl_.size_value_),
          reinterpret_cast<char*>(&other->_impl_.size_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowSetValueArchive_PropertyValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[14]);
}

// ===================================================================

class CommandShowSetValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowSetValueArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowSetValueArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& show(const CommandShowSetValueArchive* msg);
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::KN::CommandShowSetValueArchive_PropertyValue& old_value(const CommandShowSetValueArchive* msg);
  static void set_has_old_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KN::CommandShowSetValueArchive_PropertyValue& new_value(const CommandShowSetValueArchive* msg);
  static void set_has_new_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowSetValueArchive::_Internal::super(const CommandShowSetValueArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandShowSetValueArchive::_Internal::show(const CommandShowSetValueArchive* msg) {
  return *msg->_impl_.show_;
}
const ::KN::CommandShowSetValueArchive_PropertyValue&
CommandShowSetValueArchive::_Internal::old_value(const CommandShowSetValueArchive* msg) {
  return *msg->_impl_.old_value_;
}
const ::KN::CommandShowSetValueArchive_PropertyValue&
CommandShowSetValueArchive::_Internal::new_value(const CommandShowSetValueArchive* msg) {
  return *msg->_impl_.new_value_;
}
void CommandShowSetValueArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandShowSetValueArchive::clear_show() {
  if (_impl_.show_ != nullptr) _impl_.show_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandShowSetValueArchive::CommandShowSetValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowSetValueArchive)
}
CommandShowSetValueArchive::CommandShowSetValueArchive(const CommandShowSetValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandShowSetValueArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.property_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.old_value_){nullptr}
    , decltype(_impl_.new_value_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_property()) {
    _this->_impl_.property_.Set(from._internal_property(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_show()) {
    _this->_impl_.show_ = new ::TSP::Reference(*from._impl_.show_);
  }
  if (from._internal_has_old_value()) {
    _this->_impl_.old_value_ = new ::KN::CommandShowSetValueArchive_PropertyValue(*from._impl_.old_value_);
  }
  if (from._internal_has_new_value()) {
    _this->_impl_.new_value_ = new ::KN::CommandShowSetValueArchive_PropertyValue(*from._impl_.new_value_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowSetValueArchive)
}

inline void CommandShowSetValueArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.property_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.old_value_){nullptr}
    , decltype(_impl_.new_value_){nullptr}
  };
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandShowSetValueArchive::~CommandShowSetValueArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowSetValueArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandShowSetValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.property_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.show_;
  if (this != internal_default_instance()) delete _impl_.old_value_;
  if (this != internal_default_instance()) delete _impl_.new_value_;
}

void CommandShowSetValueArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandShowSetValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowSetValueArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.property_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.show_ != nullptr);
      _impl_.show_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.old_value_ != nullptr);
      _impl_.old_value_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.new_value_ != nullptr);
      _impl_.new_value_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowSetValueArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_show(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string property = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_property();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.CommandShowSetValueArchive.property");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .KN.CommandShowSetValueArchive.PropertyValue old_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .KN.CommandShowSetValueArchive.PropertyValue new_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandShowSetValueArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowSetValueArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference show = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::show(this),
        _Internal::show(this).GetCachedSize(), target, stream);
  }

  // required string property = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property().data(), static_cast<int>(this->_internal_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandShowSetValueArchive.property");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_property(), target);
  }

  // required .KN.CommandShowSetValueArchive.PropertyValue old_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::old_value(this),
        _Internal::old_value(this).GetCachedSize(), target, stream);
  }

  // required .KN.CommandShowSetValueArchive.PropertyValue new_value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::new_value(this),
        _Internal::new_value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowSetValueArchive)
  return target;
}

size_t CommandShowSetValueArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandShowSetValueArchive)
  size_t total_size = 0;

  if (_internal_has_property()) {
    // required string property = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_show()) {
    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);
  }

  if (_internal_has_old_value()) {
    // required .KN.CommandShowSetValueArchive.PropertyValue old_value = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_value_);
  }

  if (_internal_has_new_value()) {
    // required .KN.CommandShowSetValueArchive.PropertyValue new_value = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_value_);
  }

  return total_size;
}
size_t CommandShowSetValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowSetValueArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string property = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());

    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);

    // required .KN.CommandShowSetValueArchive.PropertyValue old_value = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_value_);

    // required .KN.CommandShowSetValueArchive.PropertyValue new_value = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_value_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowSetValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandShowSetValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowSetValueArchive::GetClassData() const { return &_class_data_; }


void CommandShowSetValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandShowSetValueArchive*>(&to_msg);
  auto& from = static_cast<const CommandShowSetValueArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowSetValueArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_property(from._internal_property());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_show()->::TSP::Reference::MergeFrom(
          from._internal_show());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_old_value()->::KN::CommandShowSetValueArchive_PropertyValue::MergeFrom(
          from._internal_old_value());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_new_value()->::KN::CommandShowSetValueArchive_PropertyValue::MergeFrom(
          from._internal_new_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowSetValueArchive::CopyFrom(const CommandShowSetValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowSetValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowSetValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_show()) {
    if (!_impl_.show_->IsInitialized()) return false;
  }
  if (_internal_has_old_value()) {
    if (!_impl_.old_value_->IsInitialized()) return false;
  }
  if (_internal_has_new_value()) {
    if (!_impl_.new_value_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowSetValueArchive::InternalSwap(CommandShowSetValueArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.property_, lhs_arena,
      &other->_impl_.property_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowSetValueArchive, _impl_.new_value_)
      + sizeof(CommandShowSetValueArchive::_impl_.new_value_)
      - PROTOBUF_FIELD_OFFSET(CommandShowSetValueArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowSetValueArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[15]);
}

// ===================================================================

class CommandShowInsertSlideArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowInsertSlideArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowInsertSlideArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& show(const CommandShowInsertSlideArchive* msg);
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& slidenode(const CommandShowInsertSlideArchive* msg);
  static void set_has_slidenode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_childindex(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& parentslidenode(const CommandShowInsertSlideArchive* msg);
  static void set_has_parentslidenode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowInsertSlideArchive::_Internal::super(const CommandShowInsertSlideArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandShowInsertSlideArchive::_Internal::show(const CommandShowInsertSlideArchive* msg) {
  return *msg->_impl_.show_;
}
const ::TSP::Reference&
CommandShowInsertSlideArchive::_Internal::slidenode(const CommandShowInsertSlideArchive* msg) {
  return *msg->_impl_.slidenode_;
}
const ::TSP::Reference&
CommandShowInsertSlideArchive::_Internal::parentslidenode(const CommandShowInsertSlideArchive* msg) {
  return *msg->_impl_.parentslidenode_;
}
void CommandShowInsertSlideArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandShowInsertSlideArchive::clear_show() {
  if (_impl_.show_ != nullptr) _impl_.show_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandShowInsertSlideArchive::clear_slidenode() {
  if (_impl_.slidenode_ != nullptr) _impl_.slidenode_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandShowInsertSlideArchive::clear_parentslidenode() {
  if (_impl_.parentslidenode_ != nullptr) _impl_.parentslidenode_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandShowInsertSlideArchive::CommandShowInsertSlideArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowInsertSlideArchive)
}
CommandShowInsertSlideArchive::CommandShowInsertSlideArchive(const CommandShowInsertSlideArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandShowInsertSlideArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.slidenode_){nullptr}
    , decltype(_impl_.parentslidenode_){nullptr}
    , decltype(_impl_.childindex_){}
    , decltype(_impl_.kind_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_show()) {
    _this->_impl_.show_ = new ::TSP::Reference(*from._impl_.show_);
  }
  if (from._internal_has_slidenode()) {
    _this->_impl_.slidenode_ = new ::TSP::Reference(*from._impl_.slidenode_);
  }
  if (from._internal_has_parentslidenode()) {
    _this->_impl_.parentslidenode_ = new ::TSP::Reference(*from._impl_.parentslidenode_);
  }
  ::memcpy(&_impl_.childindex_, &from._impl_.childindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.kind_) -
    reinterpret_cast<char*>(&_impl_.childindex_)) + sizeof(_impl_.kind_));
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowInsertSlideArchive)
}

inline void CommandShowInsertSlideArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.slidenode_){nullptr}
    , decltype(_impl_.parentslidenode_){nullptr}
    , decltype(_impl_.childindex_){0u}
    , decltype(_impl_.kind_){0}
  };
}

CommandShowInsertSlideArchive::~CommandShowInsertSlideArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowInsertSlideArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandShowInsertSlideArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.show_;
  if (this != internal_default_instance()) delete _impl_.slidenode_;
  if (this != internal_default_instance()) delete _impl_.parentslidenode_;
}

void CommandShowInsertSlideArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandShowInsertSlideArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowInsertSlideArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.show_ != nullptr);
      _impl_.show_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.slidenode_ != nullptr);
      _impl_.slidenode_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.parentslidenode_ != nullptr);
      _impl_.parentslidenode_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.childindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.kind_) -
        reinterpret_cast<char*>(&_impl_.childindex_)) + sizeof(_impl_.kind_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowInsertSlideArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_show(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference slideNode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_slidenode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 childIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_childindex(&has_bits);
          _impl_.childindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference parentSlideNode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_parentslidenode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.CommandShowInsertSlideArchive.Kind kind = 6 [default = kKindInsertSlide];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::CommandShowInsertSlideArchive_Kind_IsValid(val))) {
            _internal_set_kind(static_cast<::KN::CommandShowInsertSlideArchive_Kind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandShowInsertSlideArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowInsertSlideArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference show = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::show(this),
        _Internal::show(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference slideNode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::slidenode(this),
        _Internal::slidenode(this).GetCachedSize(), target, stream);
  }

  // required uint32 childIndex = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_childindex(), target);
  }

  // required .TSP.Reference parentSlideNode = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::parentslidenode(this),
        _Internal::parentslidenode(this).GetCachedSize(), target, stream);
  }

  // optional .KN.CommandShowInsertSlideArchive.Kind kind = 6 [default = kKindInsertSlide];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowInsertSlideArchive)
  return target;
}

size_t CommandShowInsertSlideArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandShowInsertSlideArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_show()) {
    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);
  }

  if (_internal_has_slidenode()) {
    // required .TSP.Reference slideNode = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slidenode_);
  }

  if (_internal_has_parentslidenode()) {
    // required .TSP.Reference parentSlideNode = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parentslidenode_);
  }

  if (_internal_has_childindex()) {
    // required uint32 childIndex = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_childindex());
  }

  return total_size;
}
size_t CommandShowInsertSlideArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowInsertSlideArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);

    // required .TSP.Reference slideNode = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slidenode_);

    // required .TSP.Reference parentSlideNode = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parentslidenode_);

    // required uint32 childIndex = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_childindex());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .KN.CommandShowInsertSlideArchive.Kind kind = 6 [default = kKindInsertSlide];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowInsertSlideArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandShowInsertSlideArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowInsertSlideArchive::GetClassData() const { return &_class_data_; }


void CommandShowInsertSlideArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandShowInsertSlideArchive*>(&to_msg);
  auto& from = static_cast<const CommandShowInsertSlideArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowInsertSlideArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_show()->::TSP::Reference::MergeFrom(
          from._internal_show());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_slidenode()->::TSP::Reference::MergeFrom(
          from._internal_slidenode());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_parentslidenode()->::TSP::Reference::MergeFrom(
          from._internal_parentslidenode());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.childindex_ = from._impl_.childindex_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.kind_ = from._impl_.kind_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowInsertSlideArchive::CopyFrom(const CommandShowInsertSlideArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowInsertSlideArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowInsertSlideArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_show()) {
    if (!_impl_.show_->IsInitialized()) return false;
  }
  if (_internal_has_slidenode()) {
    if (!_impl_.slidenode_->IsInitialized()) return false;
  }
  if (_internal_has_parentslidenode()) {
    if (!_impl_.parentslidenode_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowInsertSlideArchive::InternalSwap(CommandShowInsertSlideArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowInsertSlideArchive, _impl_.kind_)
      + sizeof(CommandShowInsertSlideArchive::_impl_.kind_)
      - PROTOBUF_FIELD_OFFSET(CommandShowInsertSlideArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowInsertSlideArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[16]);
}

// ===================================================================

class CommandShowMoveSlideArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowMoveSlideArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowMoveSlideArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& show(const CommandShowMoveSlideArchive* msg);
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& slidenode(const CommandShowMoveSlideArchive* msg);
  static void set_has_slidenode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowMoveSlideArchive::_Internal::super(const CommandShowMoveSlideArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandShowMoveSlideArchive::_Internal::show(const CommandShowMoveSlideArchive* msg) {
  return *msg->_impl_.show_;
}
const ::TSP::Reference&
CommandShowMoveSlideArchive::_Internal::slidenode(const CommandShowMoveSlideArchive* msg) {
  return *msg->_impl_.slidenode_;
}
void CommandShowMoveSlideArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandShowMoveSlideArchive::clear_show() {
  if (_impl_.show_ != nullptr) _impl_.show_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandShowMoveSlideArchive::clear_slidenode() {
  if (_impl_.slidenode_ != nullptr) _impl_.slidenode_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandShowMoveSlideArchive::clear_parentslidenodes() {
  _impl_.parentslidenodes_.Clear();
}
CommandShowMoveSlideArchive::CommandShowMoveSlideArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowMoveSlideArchive)
}
CommandShowMoveSlideArchive::CommandShowMoveSlideArchive(const CommandShowMoveSlideArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandShowMoveSlideArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parentslidenodes_){from._impl_.parentslidenodes_}
    , decltype(_impl_.childindices_){from._impl_.childindices_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.slidenode_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_show()) {
    _this->_impl_.show_ = new ::TSP::Reference(*from._impl_.show_);
  }
  if (from._internal_has_slidenode()) {
    _this->_impl_.slidenode_ = new ::TSP::Reference(*from._impl_.slidenode_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowMoveSlideArchive)
}

inline void CommandShowMoveSlideArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parentslidenodes_){arena}
    , decltype(_impl_.childindices_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.slidenode_){nullptr}
  };
}

CommandShowMoveSlideArchive::~CommandShowMoveSlideArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowMoveSlideArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandShowMoveSlideArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parentslidenodes_.~RepeatedPtrField();
  _impl_.childindices_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.show_;
  if (this != internal_default_instance()) delete _impl_.slidenode_;
}

void CommandShowMoveSlideArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandShowMoveSlideArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowMoveSlideArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parentslidenodes_.Clear();
  _impl_.childindices_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.show_ != nullptr);
      _impl_.show_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.slidenode_ != nullptr);
      _impl_.slidenode_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowMoveSlideArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_show(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference slideNode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_slidenode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference parentSlideNodes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parentslidenodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 childIndices = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_childindices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_childindices(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandShowMoveSlideArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowMoveSlideArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference show = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::show(this),
        _Internal::show(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference slideNode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::slidenode(this),
        _Internal::slidenode(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference parentSlideNodes = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_parentslidenodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_parentslidenodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 childIndices = 5;
  for (int i = 0, n = this->_internal_childindices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_childindices(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowMoveSlideArchive)
  return target;
}

size_t CommandShowMoveSlideArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandShowMoveSlideArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_show()) {
    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);
  }

  if (_internal_has_slidenode()) {
    // required .TSP.Reference slideNode = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slidenode_);
  }

  return total_size;
}
size_t CommandShowMoveSlideArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowMoveSlideArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);

    // required .TSP.Reference slideNode = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slidenode_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference parentSlideNodes = 4;
  total_size += 1UL * this->_internal_parentslidenodes_size();
  for (const auto& msg : this->_impl_.parentslidenodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 childIndices = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.childindices_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_childindices_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowMoveSlideArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandShowMoveSlideArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowMoveSlideArchive::GetClassData() const { return &_class_data_; }


void CommandShowMoveSlideArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandShowMoveSlideArchive*>(&to_msg);
  auto& from = static_cast<const CommandShowMoveSlideArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowMoveSlideArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.parentslidenodes_.MergeFrom(from._impl_.parentslidenodes_);
  _this->_impl_.childindices_.MergeFrom(from._impl_.childindices_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_show()->::TSP::Reference::MergeFrom(
          from._internal_show());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_slidenode()->::TSP::Reference::MergeFrom(
          from._internal_slidenode());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowMoveSlideArchive::CopyFrom(const CommandShowMoveSlideArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowMoveSlideArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowMoveSlideArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.parentslidenodes_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_show()) {
    if (!_impl_.show_->IsInitialized()) return false;
  }
  if (_internal_has_slidenode()) {
    if (!_impl_.slidenode_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowMoveSlideArchive::InternalSwap(CommandShowMoveSlideArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.parentslidenodes_.InternalSwap(&other->_impl_.parentslidenodes_);
  _impl_.childindices_.InternalSwap(&other->_impl_.childindices_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowMoveSlideArchive, _impl_.slidenode_)
      + sizeof(CommandShowMoveSlideArchive::_impl_.slidenode_)
      - PROTOBUF_FIELD_OFFSET(CommandShowMoveSlideArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowMoveSlideArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[17]);
}

// ===================================================================

class CommandShowRemoveSlideArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowRemoveSlideArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowRemoveSlideArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& show(const CommandShowRemoveSlideArchive* msg);
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& slidenode(const CommandShowRemoveSlideArchive* msg);
  static void set_has_slidenode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& parentslidenode(const CommandShowRemoveSlideArchive* msg);
  static void set_has_parentslidenode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_childindex(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowRemoveSlideArchive::_Internal::super(const CommandShowRemoveSlideArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandShowRemoveSlideArchive::_Internal::show(const CommandShowRemoveSlideArchive* msg) {
  return *msg->_impl_.show_;
}
const ::TSP::Reference&
CommandShowRemoveSlideArchive::_Internal::slidenode(const CommandShowRemoveSlideArchive* msg) {
  return *msg->_impl_.slidenode_;
}
const ::TSP::Reference&
CommandShowRemoveSlideArchive::_Internal::parentslidenode(const CommandShowRemoveSlideArchive* msg) {
  return *msg->_impl_.parentslidenode_;
}
void CommandShowRemoveSlideArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandShowRemoveSlideArchive::clear_show() {
  if (_impl_.show_ != nullptr) _impl_.show_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandShowRemoveSlideArchive::clear_slidenode() {
  if (_impl_.slidenode_ != nullptr) _impl_.slidenode_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandShowRemoveSlideArchive::clear_parentslidenode() {
  if (_impl_.parentslidenode_ != nullptr) _impl_.parentslidenode_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandShowRemoveSlideArchive::CommandShowRemoveSlideArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowRemoveSlideArchive)
}
CommandShowRemoveSlideArchive::CommandShowRemoveSlideArchive(const CommandShowRemoveSlideArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandShowRemoveSlideArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.slidenode_){nullptr}
    , decltype(_impl_.parentslidenode_){nullptr}
    , decltype(_impl_.childindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_show()) {
    _this->_impl_.show_ = new ::TSP::Reference(*from._impl_.show_);
  }
  if (from._internal_has_slidenode()) {
    _this->_impl_.slidenode_ = new ::TSP::Reference(*from._impl_.slidenode_);
  }
  if (from._internal_has_parentslidenode()) {
    _this->_impl_.parentslidenode_ = new ::TSP::Reference(*from._impl_.parentslidenode_);
  }
  _this->_impl_.childindex_ = from._impl_.childindex_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowRemoveSlideArchive)
}

inline void CommandShowRemoveSlideArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.slidenode_){nullptr}
    , decltype(_impl_.parentslidenode_){nullptr}
    , decltype(_impl_.childindex_){0u}
  };
}

CommandShowRemoveSlideArchive::~CommandShowRemoveSlideArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowRemoveSlideArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandShowRemoveSlideArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.show_;
  if (this != internal_default_instance()) delete _impl_.slidenode_;
  if (this != internal_default_instance()) delete _impl_.parentslidenode_;
}

void CommandShowRemoveSlideArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandShowRemoveSlideArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowRemoveSlideArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.show_ != nullptr);
      _impl_.show_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.slidenode_ != nullptr);
      _impl_.slidenode_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.parentslidenode_ != nullptr);
      _impl_.parentslidenode_->Clear();
    }
  }
  _impl_.childindex_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowRemoveSlideArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_show(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference slideNode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_slidenode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference parentSlideNode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_parentslidenode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 childIndex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_childindex(&has_bits);
          _impl_.childindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandShowRemoveSlideArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowRemoveSlideArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference show = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::show(this),
        _Internal::show(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference slideNode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::slidenode(this),
        _Internal::slidenode(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference parentSlideNode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::parentslidenode(this),
        _Internal::parentslidenode(this).GetCachedSize(), target, stream);
  }

  // required uint32 childIndex = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_childindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowRemoveSlideArchive)
  return target;
}

size_t CommandShowRemoveSlideArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandShowRemoveSlideArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_show()) {
    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);
  }

  if (_internal_has_slidenode()) {
    // required .TSP.Reference slideNode = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slidenode_);
  }

  if (_internal_has_parentslidenode()) {
    // required .TSP.Reference parentSlideNode = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parentslidenode_);
  }

  if (_internal_has_childindex()) {
    // required uint32 childIndex = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_childindex());
  }

  return total_size;
}
size_t CommandShowRemoveSlideArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowRemoveSlideArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);

    // required .TSP.Reference slideNode = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slidenode_);

    // required .TSP.Reference parentSlideNode = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parentslidenode_);

    // required uint32 childIndex = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_childindex());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowRemoveSlideArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandShowRemoveSlideArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowRemoveSlideArchive::GetClassData() const { return &_class_data_; }


void CommandShowRemoveSlideArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandShowRemoveSlideArchive*>(&to_msg);
  auto& from = static_cast<const CommandShowRemoveSlideArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowRemoveSlideArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_show()->::TSP::Reference::MergeFrom(
          from._internal_show());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_slidenode()->::TSP::Reference::MergeFrom(
          from._internal_slidenode());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_parentslidenode()->::TSP::Reference::MergeFrom(
          from._internal_parentslidenode());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.childindex_ = from._impl_.childindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowRemoveSlideArchive::CopyFrom(const CommandShowRemoveSlideArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowRemoveSlideArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowRemoveSlideArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_show()) {
    if (!_impl_.show_->IsInitialized()) return false;
  }
  if (_internal_has_slidenode()) {
    if (!_impl_.slidenode_->IsInitialized()) return false;
  }
  if (_internal_has_parentslidenode()) {
    if (!_impl_.parentslidenode_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowRemoveSlideArchive::InternalSwap(CommandShowRemoveSlideArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowRemoveSlideArchive, _impl_.childindex_)
      + sizeof(CommandShowRemoveSlideArchive::_impl_.childindex_)
      - PROTOBUF_FIELD_OFFSET(CommandShowRemoveSlideArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowRemoveSlideArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[18]);
}

// ===================================================================

class CommandShowChangeThemeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowChangeThemeArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowChangeThemeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& show(const CommandShowChangeThemeArchive* msg);
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& theme(const CommandShowChangeThemeArchive* msg);
  static void set_has_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& old_theme(const CommandShowChangeThemeArchive* msg);
  static void set_has_old_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_template_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_old_template_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003c) ^ 0x0000003c) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowChangeThemeArchive::_Internal::super(const CommandShowChangeThemeArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandShowChangeThemeArchive::_Internal::show(const CommandShowChangeThemeArchive* msg) {
  return *msg->_impl_.show_;
}
const ::TSP::Reference&
CommandShowChangeThemeArchive::_Internal::theme(const CommandShowChangeThemeArchive* msg) {
  return *msg->_impl_.theme_;
}
const ::TSP::Reference&
CommandShowChangeThemeArchive::_Internal::old_theme(const CommandShowChangeThemeArchive* msg) {
  return *msg->_impl_.old_theme_;
}
void CommandShowChangeThemeArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandShowChangeThemeArchive::clear_show() {
  if (_impl_.show_ != nullptr) _impl_.show_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandShowChangeThemeArchive::clear_theme() {
  if (_impl_.theme_ != nullptr) _impl_.theme_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void CommandShowChangeThemeArchive::clear_old_theme() {
  if (_impl_.old_theme_ != nullptr) _impl_.old_theme_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
CommandShowChangeThemeArchive::CommandShowChangeThemeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowChangeThemeArchive)
}
CommandShowChangeThemeArchive::CommandShowChangeThemeArchive(const CommandShowChangeThemeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandShowChangeThemeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.template_identifier_){}
    , decltype(_impl_.old_template_identifier_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.old_theme_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.template_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.template_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_template_identifier()) {
    _this->_impl_.template_identifier_.Set(from._internal_template_identifier(), 
      _this->GetArenaForAllocation());
  }
  _impl_.old_template_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_template_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_old_template_identifier()) {
    _this->_impl_.old_template_identifier_.Set(from._internal_old_template_identifier(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_show()) {
    _this->_impl_.show_ = new ::TSP::Reference(*from._impl_.show_);
  }
  if (from._internal_has_theme()) {
    _this->_impl_.theme_ = new ::TSP::Reference(*from._impl_.theme_);
  }
  if (from._internal_has_old_theme()) {
    _this->_impl_.old_theme_ = new ::TSP::Reference(*from._impl_.old_theme_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowChangeThemeArchive)
}

inline void CommandShowChangeThemeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.template_identifier_){}
    , decltype(_impl_.old_template_identifier_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.old_theme_){nullptr}
  };
  _impl_.template_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.template_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.old_template_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_template_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandShowChangeThemeArchive::~CommandShowChangeThemeArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowChangeThemeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandShowChangeThemeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.template_identifier_.Destroy();
  _impl_.old_template_identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.show_;
  if (this != internal_default_instance()) delete _impl_.theme_;
  if (this != internal_default_instance()) delete _impl_.old_theme_;
}

void CommandShowChangeThemeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandShowChangeThemeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowChangeThemeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.template_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.old_template_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.show_ != nullptr);
      _impl_.show_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.theme_ != nullptr);
      _impl_.theme_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.old_theme_ != nullptr);
      _impl_.old_theme_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowChangeThemeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_show(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference theme = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference old_theme = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_theme(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string template_identifier = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_template_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.CommandShowChangeThemeArchive.template_identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string old_template_identifier = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_old_template_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.CommandShowChangeThemeArchive.old_template_identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandShowChangeThemeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowChangeThemeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference show = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::show(this),
        _Internal::show(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference theme = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::theme(this),
        _Internal::theme(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference old_theme = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::old_theme(this),
        _Internal::old_theme(this).GetCachedSize(), target, stream);
  }

  // optional string template_identifier = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_template_identifier().data(), static_cast<int>(this->_internal_template_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandShowChangeThemeArchive.template_identifier");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_template_identifier(), target);
  }

  // optional string old_template_identifier = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_old_template_identifier().data(), static_cast<int>(this->_internal_old_template_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandShowChangeThemeArchive.old_template_identifier");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_old_template_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowChangeThemeArchive)
  return target;
}

size_t CommandShowChangeThemeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandShowChangeThemeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_show()) {
    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);
  }

  if (_internal_has_theme()) {
    // required .TSP.Reference theme = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);
  }

  if (_internal_has_old_theme()) {
    // required .TSP.Reference old_theme = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_theme_);
  }

  return total_size;
}
size_t CommandShowChangeThemeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowChangeThemeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003c) ^ 0x0000003c) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);

    // required .TSP.Reference theme = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);

    // required .TSP.Reference old_theme = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_theme_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string template_identifier = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_template_identifier());
    }

    // optional string old_template_identifier = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_old_template_identifier());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowChangeThemeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandShowChangeThemeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowChangeThemeArchive::GetClassData() const { return &_class_data_; }


void CommandShowChangeThemeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandShowChangeThemeArchive*>(&to_msg);
  auto& from = static_cast<const CommandShowChangeThemeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowChangeThemeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_template_identifier(from._internal_template_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_old_template_identifier(from._internal_old_template_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_show()->::TSP::Reference::MergeFrom(
          from._internal_show());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_theme()->::TSP::Reference::MergeFrom(
          from._internal_theme());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_old_theme()->::TSP::Reference::MergeFrom(
          from._internal_old_theme());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowChangeThemeArchive::CopyFrom(const CommandShowChangeThemeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowChangeThemeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowChangeThemeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_show()) {
    if (!_impl_.show_->IsInitialized()) return false;
  }
  if (_internal_has_theme()) {
    if (!_impl_.theme_->IsInitialized()) return false;
  }
  if (_internal_has_old_theme()) {
    if (!_impl_.old_theme_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowChangeThemeArchive::InternalSwap(CommandShowChangeThemeArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.template_identifier_, lhs_arena,
      &other->_impl_.template_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.old_template_identifier_, lhs_arena,
      &other->_impl_.old_template_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowChangeThemeArchive, _impl_.old_theme_)
      + sizeof(CommandShowChangeThemeArchive::_impl_.old_theme_)
      - PROTOBUF_FIELD_OFFSET(CommandShowChangeThemeArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowChangeThemeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[19]);
}

// ===================================================================

class CommandMoveMastersArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandMoveMastersArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandMoveMastersArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& theme(const CommandMoveMastersArchive* msg);
  static void set_has_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandMoveMastersArchive::_Internal::super(const CommandMoveMastersArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandMoveMastersArchive::_Internal::theme(const CommandMoveMastersArchive* msg) {
  return *msg->_impl_.theme_;
}
void CommandMoveMastersArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandMoveMastersArchive::clear_theme() {
  if (_impl_.theme_ != nullptr) _impl_.theme_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandMoveMastersArchive::clear_master_slides() {
  _impl_.master_slides_.Clear();
}
void CommandMoveMastersArchive::clear_previous_indexes_keys() {
  _impl_.previous_indexes_keys_.Clear();
}
void CommandMoveMastersArchive::clear_final_master_arrangement() {
  _impl_.final_master_arrangement_.Clear();
}
CommandMoveMastersArchive::CommandMoveMastersArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandMoveMastersArchive)
}
CommandMoveMastersArchive::CommandMoveMastersArchive(const CommandMoveMastersArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandMoveMastersArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.master_slides_){from._impl_.master_slides_}
    , decltype(_impl_.previous_indexes_keys_){from._impl_.previous_indexes_keys_}
    , decltype(_impl_.previous_indexes_values_){from._impl_.previous_indexes_values_}
    , decltype(_impl_.final_master_arrangement_){from._impl_.final_master_arrangement_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.theme_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_theme()) {
    _this->_impl_.theme_ = new ::TSP::Reference(*from._impl_.theme_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandMoveMastersArchive)
}

inline void CommandMoveMastersArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.master_slides_){arena}
    , decltype(_impl_.previous_indexes_keys_){arena}
    , decltype(_impl_.previous_indexes_values_){arena}
    , decltype(_impl_.final_master_arrangement_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.theme_){nullptr}
  };
}

CommandMoveMastersArchive::~CommandMoveMastersArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandMoveMastersArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandMoveMastersArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.master_slides_.~RepeatedPtrField();
  _impl_.previous_indexes_keys_.~RepeatedPtrField();
  _impl_.previous_indexes_values_.~RepeatedField();
  _impl_.final_master_arrangement_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.theme_;
}

void CommandMoveMastersArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandMoveMastersArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandMoveMastersArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.master_slides_.Clear();
  _impl_.previous_indexes_keys_.Clear();
  _impl_.previous_indexes_values_.Clear();
  _impl_.final_master_arrangement_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.theme_ != nullptr);
      _impl_.theme_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandMoveMastersArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference theme = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference master_slides = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_master_slides(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference previous_indexes_keys = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_previous_indexes_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 previous_indexes_values = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_previous_indexes_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_previous_indexes_values(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference final_master_arrangement = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_final_master_arrangement(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandMoveMastersArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandMoveMastersArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference theme = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::theme(this),
        _Internal::theme(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference master_slides = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_master_slides_size()); i < n; i++) {
    const auto& repfield = this->_internal_master_slides(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference previous_indexes_keys = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_previous_indexes_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_previous_indexes_keys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 previous_indexes_values = 5;
  for (int i = 0, n = this->_internal_previous_indexes_values_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_previous_indexes_values(i), target);
  }

  // repeated .TSP.Reference final_master_arrangement = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_final_master_arrangement_size()); i < n; i++) {
    const auto& repfield = this->_internal_final_master_arrangement(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandMoveMastersArchive)
  return target;
}

size_t CommandMoveMastersArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandMoveMastersArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_theme()) {
    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);
  }

  return total_size;
}
size_t CommandMoveMastersArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandMoveMastersArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference master_slides = 3;
  total_size += 1UL * this->_internal_master_slides_size();
  for (const auto& msg : this->_impl_.master_slides_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference previous_indexes_keys = 4;
  total_size += 1UL * this->_internal_previous_indexes_keys_size();
  for (const auto& msg : this->_impl_.previous_indexes_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 previous_indexes_values = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.previous_indexes_values_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_previous_indexes_values_size());
    total_size += data_size;
  }

  // repeated .TSP.Reference final_master_arrangement = 6;
  total_size += 1UL * this->_internal_final_master_arrangement_size();
  for (const auto& msg : this->_impl_.final_master_arrangement_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandMoveMastersArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandMoveMastersArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandMoveMastersArchive::GetClassData() const { return &_class_data_; }


void CommandMoveMastersArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandMoveMastersArchive*>(&to_msg);
  auto& from = static_cast<const CommandMoveMastersArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandMoveMastersArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.master_slides_.MergeFrom(from._impl_.master_slides_);
  _this->_impl_.previous_indexes_keys_.MergeFrom(from._impl_.previous_indexes_keys_);
  _this->_impl_.previous_indexes_values_.MergeFrom(from._impl_.previous_indexes_values_);
  _this->_impl_.final_master_arrangement_.MergeFrom(from._impl_.final_master_arrangement_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_theme()->::TSP::Reference::MergeFrom(
          from._internal_theme());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandMoveMastersArchive::CopyFrom(const CommandMoveMastersArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandMoveMastersArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMoveMastersArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.master_slides_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.previous_indexes_keys_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.final_master_arrangement_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_theme()) {
    if (!_impl_.theme_->IsInitialized()) return false;
  }
  return true;
}

void CommandMoveMastersArchive::InternalSwap(CommandMoveMastersArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.master_slides_.InternalSwap(&other->_impl_.master_slides_);
  _impl_.previous_indexes_keys_.InternalSwap(&other->_impl_.previous_indexes_keys_);
  _impl_.previous_indexes_values_.InternalSwap(&other->_impl_.previous_indexes_values_);
  _impl_.final_master_arrangement_.InternalSwap(&other->_impl_.final_master_arrangement_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandMoveMastersArchive, _impl_.theme_)
      + sizeof(CommandMoveMastersArchive::_impl_.theme_)
      - PROTOBUF_FIELD_OFFSET(CommandMoveMastersArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandMoveMastersArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[20]);
}

// ===================================================================

class CommandInsertMasterArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandInsertMasterArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandInsertMasterArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& theme(const CommandInsertMasterArchive* msg);
  static void set_has_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& master_slide_node(const CommandInsertMasterArchive* msg);
  static void set_has_master_slide_node(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_insertion_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_was_inserted_with_drop(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TSK::CommandArchive&
CommandInsertMasterArchive::_Internal::super(const CommandInsertMasterArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandInsertMasterArchive::_Internal::theme(const CommandInsertMasterArchive* msg) {
  return *msg->_impl_.theme_;
}
const ::TSP::Reference&
CommandInsertMasterArchive::_Internal::master_slide_node(const CommandInsertMasterArchive* msg) {
  return *msg->_impl_.master_slide_node_;
}
void CommandInsertMasterArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandInsertMasterArchive::clear_theme() {
  if (_impl_.theme_ != nullptr) _impl_.theme_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandInsertMasterArchive::clear_master_slide_node() {
  if (_impl_.master_slide_node_ != nullptr) _impl_.master_slide_node_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandInsertMasterArchive::CommandInsertMasterArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandInsertMasterArchive)
}
CommandInsertMasterArchive::CommandInsertMasterArchive(const CommandInsertMasterArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandInsertMasterArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.master_slide_node_){nullptr}
    , decltype(_impl_.insertion_index_){}
    , decltype(_impl_.was_inserted_with_drop_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_theme()) {
    _this->_impl_.theme_ = new ::TSP::Reference(*from._impl_.theme_);
  }
  if (from._internal_has_master_slide_node()) {
    _this->_impl_.master_slide_node_ = new ::TSP::Reference(*from._impl_.master_slide_node_);
  }
  ::memcpy(&_impl_.insertion_index_, &from._impl_.insertion_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.was_inserted_with_drop_) -
    reinterpret_cast<char*>(&_impl_.insertion_index_)) + sizeof(_impl_.was_inserted_with_drop_));
  // @@protoc_insertion_point(copy_constructor:KN.CommandInsertMasterArchive)
}

inline void CommandInsertMasterArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.master_slide_node_){nullptr}
    , decltype(_impl_.insertion_index_){0u}
    , decltype(_impl_.was_inserted_with_drop_){false}
  };
}

CommandInsertMasterArchive::~CommandInsertMasterArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandInsertMasterArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandInsertMasterArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.theme_;
  if (this != internal_default_instance()) delete _impl_.master_slide_node_;
}

void CommandInsertMasterArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandInsertMasterArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandInsertMasterArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.theme_ != nullptr);
      _impl_.theme_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.master_slide_node_ != nullptr);
      _impl_.master_slide_node_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.insertion_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.was_inserted_with_drop_) -
        reinterpret_cast<char*>(&_impl_.insertion_index_)) + sizeof(_impl_.was_inserted_with_drop_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandInsertMasterArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference theme = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference master_slide_node = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_master_slide_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 insertion_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_insertion_index(&has_bits);
          _impl_.insertion_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool was_inserted_with_drop = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_was_inserted_with_drop(&has_bits);
          _impl_.was_inserted_with_drop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandInsertMasterArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandInsertMasterArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference theme = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::theme(this),
        _Internal::theme(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference master_slide_node = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::master_slide_node(this),
        _Internal::master_slide_node(this).GetCachedSize(), target, stream);
  }

  // required uint32 insertion_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_insertion_index(), target);
  }

  // required bool was_inserted_with_drop = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_was_inserted_with_drop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandInsertMasterArchive)
  return target;
}

size_t CommandInsertMasterArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandInsertMasterArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_theme()) {
    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);
  }

  if (_internal_has_master_slide_node()) {
    // required .TSP.Reference master_slide_node = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.master_slide_node_);
  }

  if (_internal_has_insertion_index()) {
    // required uint32 insertion_index = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_insertion_index());
  }

  if (_internal_has_was_inserted_with_drop()) {
    // required bool was_inserted_with_drop = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandInsertMasterArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandInsertMasterArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);

    // required .TSP.Reference master_slide_node = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.master_slide_node_);

    // required uint32 insertion_index = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_insertion_index());

    // required bool was_inserted_with_drop = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandInsertMasterArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandInsertMasterArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandInsertMasterArchive::GetClassData() const { return &_class_data_; }


void CommandInsertMasterArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandInsertMasterArchive*>(&to_msg);
  auto& from = static_cast<const CommandInsertMasterArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandInsertMasterArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_theme()->::TSP::Reference::MergeFrom(
          from._internal_theme());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_master_slide_node()->::TSP::Reference::MergeFrom(
          from._internal_master_slide_node());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.insertion_index_ = from._impl_.insertion_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.was_inserted_with_drop_ = from._impl_.was_inserted_with_drop_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandInsertMasterArchive::CopyFrom(const CommandInsertMasterArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandInsertMasterArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandInsertMasterArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_theme()) {
    if (!_impl_.theme_->IsInitialized()) return false;
  }
  if (_internal_has_master_slide_node()) {
    if (!_impl_.master_slide_node_->IsInitialized()) return false;
  }
  return true;
}

void CommandInsertMasterArchive::InternalSwap(CommandInsertMasterArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandInsertMasterArchive, _impl_.was_inserted_with_drop_)
      + sizeof(CommandInsertMasterArchive::_impl_.was_inserted_with_drop_)
      - PROTOBUF_FIELD_OFFSET(CommandInsertMasterArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandInsertMasterArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[21]);
}

// ===================================================================

class CommandRemoveMasterArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRemoveMasterArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandRemoveMasterArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& theme(const CommandRemoveMasterArchive* msg);
  static void set_has_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& master_slide_node(const CommandRemoveMasterArchive* msg);
  static void set_has_master_slide_node(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_previous_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& master_change_commands(const CommandRemoveMasterArchive* msg);
  static void set_has_master_change_commands(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000017) ^ 0x00000017) != 0;
  }
};

const ::TSK::CommandArchive&
CommandRemoveMasterArchive::_Internal::super(const CommandRemoveMasterArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandRemoveMasterArchive::_Internal::theme(const CommandRemoveMasterArchive* msg) {
  return *msg->_impl_.theme_;
}
const ::TSP::Reference&
CommandRemoveMasterArchive::_Internal::master_slide_node(const CommandRemoveMasterArchive* msg) {
  return *msg->_impl_.master_slide_node_;
}
const ::TSP::Reference&
CommandRemoveMasterArchive::_Internal::master_change_commands(const CommandRemoveMasterArchive* msg) {
  return *msg->_impl_.master_change_commands_;
}
void CommandRemoveMasterArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandRemoveMasterArchive::clear_theme() {
  if (_impl_.theme_ != nullptr) _impl_.theme_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandRemoveMasterArchive::clear_master_slide_node() {
  if (_impl_.master_slide_node_ != nullptr) _impl_.master_slide_node_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandRemoveMasterArchive::clear_master_change_commands() {
  if (_impl_.master_change_commands_ != nullptr) _impl_.master_change_commands_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandRemoveMasterArchive::CommandRemoveMasterArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandRemoveMasterArchive)
}
CommandRemoveMasterArchive::CommandRemoveMasterArchive(const CommandRemoveMasterArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandRemoveMasterArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.master_slide_node_){nullptr}
    , decltype(_impl_.master_change_commands_){nullptr}
    , decltype(_impl_.previous_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_theme()) {
    _this->_impl_.theme_ = new ::TSP::Reference(*from._impl_.theme_);
  }
  if (from._internal_has_master_slide_node()) {
    _this->_impl_.master_slide_node_ = new ::TSP::Reference(*from._impl_.master_slide_node_);
  }
  if (from._internal_has_master_change_commands()) {
    _this->_impl_.master_change_commands_ = new ::TSP::Reference(*from._impl_.master_change_commands_);
  }
  _this->_impl_.previous_index_ = from._impl_.previous_index_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandRemoveMasterArchive)
}

inline void CommandRemoveMasterArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.master_slide_node_){nullptr}
    , decltype(_impl_.master_change_commands_){nullptr}
    , decltype(_impl_.previous_index_){0u}
  };
}

CommandRemoveMasterArchive::~CommandRemoveMasterArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandRemoveMasterArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandRemoveMasterArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.theme_;
  if (this != internal_default_instance()) delete _impl_.master_slide_node_;
  if (this != internal_default_instance()) delete _impl_.master_change_commands_;
}

void CommandRemoveMasterArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandRemoveMasterArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandRemoveMasterArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.theme_ != nullptr);
      _impl_.theme_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.master_slide_node_ != nullptr);
      _impl_.master_slide_node_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.master_change_commands_ != nullptr);
      _impl_.master_change_commands_->Clear();
    }
  }
  _impl_.previous_index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRemoveMasterArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference theme = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference master_slide_node = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_master_slide_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 previous_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_previous_index(&has_bits);
          _impl_.previous_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference master_change_commands = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_master_change_commands(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandRemoveMasterArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandRemoveMasterArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference theme = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::theme(this),
        _Internal::theme(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference master_slide_node = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::master_slide_node(this),
        _Internal::master_slide_node(this).GetCachedSize(), target, stream);
  }

  // required uint32 previous_index = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_previous_index(), target);
  }

  // optional .TSP.Reference master_change_commands = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::master_change_commands(this),
        _Internal::master_change_commands(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandRemoveMasterArchive)
  return target;
}

size_t CommandRemoveMasterArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandRemoveMasterArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_theme()) {
    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);
  }

  if (_internal_has_master_slide_node()) {
    // required .TSP.Reference master_slide_node = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.master_slide_node_);
  }

  if (_internal_has_previous_index()) {
    // required uint32 previous_index = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_previous_index());
  }

  return total_size;
}
size_t CommandRemoveMasterArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandRemoveMasterArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000017) ^ 0x00000017) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);

    // required .TSP.Reference master_slide_node = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.master_slide_node_);

    // required uint32 previous_index = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_previous_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference master_change_commands = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.master_change_commands_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRemoveMasterArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandRemoveMasterArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRemoveMasterArchive::GetClassData() const { return &_class_data_; }


void CommandRemoveMasterArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandRemoveMasterArchive*>(&to_msg);
  auto& from = static_cast<const CommandRemoveMasterArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandRemoveMasterArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_theme()->::TSP::Reference::MergeFrom(
          from._internal_theme());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_master_slide_node()->::TSP::Reference::MergeFrom(
          from._internal_master_slide_node());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_master_change_commands()->::TSP::Reference::MergeFrom(
          from._internal_master_change_commands());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.previous_index_ = from._impl_.previous_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRemoveMasterArchive::CopyFrom(const CommandRemoveMasterArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandRemoveMasterArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRemoveMasterArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_theme()) {
    if (!_impl_.theme_->IsInitialized()) return false;
  }
  if (_internal_has_master_slide_node()) {
    if (!_impl_.master_slide_node_->IsInitialized()) return false;
  }
  if (_internal_has_master_change_commands()) {
    if (!_impl_.master_change_commands_->IsInitialized()) return false;
  }
  return true;
}

void CommandRemoveMasterArchive::InternalSwap(CommandRemoveMasterArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRemoveMasterArchive, _impl_.previous_index_)
      + sizeof(CommandRemoveMasterArchive::_impl_.previous_index_)
      - PROTOBUF_FIELD_OFFSET(CommandRemoveMasterArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRemoveMasterArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[22]);
}

// ===================================================================

class CommandRenameMasterArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRenameMasterArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandRenameMasterArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& master_slide(const CommandRenameMasterArchive* msg);
  static void set_has_master_slide(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_master_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_old_master_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSK::CommandArchive&
CommandRenameMasterArchive::_Internal::super(const CommandRenameMasterArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandRenameMasterArchive::_Internal::master_slide(const CommandRenameMasterArchive* msg) {
  return *msg->_impl_.master_slide_;
}
void CommandRenameMasterArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandRenameMasterArchive::clear_master_slide() {
  if (_impl_.master_slide_ != nullptr) _impl_.master_slide_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandRenameMasterArchive::CommandRenameMasterArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandRenameMasterArchive)
}
CommandRenameMasterArchive::CommandRenameMasterArchive(const CommandRenameMasterArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandRenameMasterArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.master_name_){}
    , decltype(_impl_.old_master_name_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.master_slide_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.master_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.master_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_master_name()) {
    _this->_impl_.master_name_.Set(from._internal_master_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.old_master_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_master_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_old_master_name()) {
    _this->_impl_.old_master_name_.Set(from._internal_old_master_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_master_slide()) {
    _this->_impl_.master_slide_ = new ::TSP::Reference(*from._impl_.master_slide_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandRenameMasterArchive)
}

inline void CommandRenameMasterArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.master_name_){}
    , decltype(_impl_.old_master_name_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.master_slide_){nullptr}
  };
  _impl_.master_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.master_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.old_master_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_master_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandRenameMasterArchive::~CommandRenameMasterArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandRenameMasterArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandRenameMasterArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.master_name_.Destroy();
  _impl_.old_master_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.master_slide_;
}

void CommandRenameMasterArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandRenameMasterArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandRenameMasterArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.master_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.old_master_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.master_slide_ != nullptr);
      _impl_.master_slide_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRenameMasterArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference master_slide = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_master_slide(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string master_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_master_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.CommandRenameMasterArchive.master_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string old_master_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_old_master_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.CommandRenameMasterArchive.old_master_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandRenameMasterArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandRenameMasterArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference master_slide = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::master_slide(this),
        _Internal::master_slide(this).GetCachedSize(), target, stream);
  }

  // required string master_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_master_name().data(), static_cast<int>(this->_internal_master_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandRenameMasterArchive.master_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_master_name(), target);
  }

  // required string old_master_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_old_master_name().data(), static_cast<int>(this->_internal_old_master_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandRenameMasterArchive.old_master_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_old_master_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandRenameMasterArchive)
  return target;
}

size_t CommandRenameMasterArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandRenameMasterArchive)
  size_t total_size = 0;

  if (_internal_has_master_name()) {
    // required string master_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_master_name());
  }

  if (_internal_has_old_master_name()) {
    // required string old_master_name = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_old_master_name());
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_master_slide()) {
    // required .TSP.Reference master_slide = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.master_slide_);
  }

  return total_size;
}
size_t CommandRenameMasterArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandRenameMasterArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string master_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_master_name());

    // required string old_master_name = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_old_master_name());

    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference master_slide = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.master_slide_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRenameMasterArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandRenameMasterArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRenameMasterArchive::GetClassData() const { return &_class_data_; }


void CommandRenameMasterArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandRenameMasterArchive*>(&to_msg);
  auto& from = static_cast<const CommandRenameMasterArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandRenameMasterArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_master_name(from._internal_master_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_old_master_name(from._internal_old_master_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_master_slide()->::TSP::Reference::MergeFrom(
          from._internal_master_slide());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRenameMasterArchive::CopyFrom(const CommandRenameMasterArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandRenameMasterArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRenameMasterArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_master_slide()) {
    if (!_impl_.master_slide_->IsInitialized()) return false;
  }
  return true;
}

void CommandRenameMasterArchive::InternalSwap(CommandRenameMasterArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.master_name_, lhs_arena,
      &other->_impl_.master_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.old_master_name_, lhs_arena,
      &other->_impl_.old_master_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRenameMasterArchive, _impl_.master_slide_)
      + sizeof(CommandRenameMasterArchive::_impl_.master_slide_)
      - PROTOBUF_FIELD_OFFSET(CommandRenameMasterArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRenameMasterArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[23]);
}

// ===================================================================

class CommandSlideInsertBuildArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideInsertBuildArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideInsertBuildArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& slidenode(const CommandSlideInsertBuildArchive* msg);
  static void set_has_slidenode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& build(const CommandSlideInsertBuildArchive* msg);
  static void set_has_build(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shouldcreatechunks(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideInsertBuildArchive::_Internal::super(const CommandSlideInsertBuildArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSlideInsertBuildArchive::_Internal::slidenode(const CommandSlideInsertBuildArchive* msg) {
  return *msg->_impl_.slidenode_;
}
const ::TSP::Reference&
CommandSlideInsertBuildArchive::_Internal::build(const CommandSlideInsertBuildArchive* msg) {
  return *msg->_impl_.build_;
}
void CommandSlideInsertBuildArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlideInsertBuildArchive::clear_slidenode() {
  if (_impl_.slidenode_ != nullptr) _impl_.slidenode_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSlideInsertBuildArchive::clear_build() {
  if (_impl_.build_ != nullptr) _impl_.build_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandSlideInsertBuildArchive::CommandSlideInsertBuildArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideInsertBuildArchive)
}
CommandSlideInsertBuildArchive::CommandSlideInsertBuildArchive(const CommandSlideInsertBuildArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideInsertBuildArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slidenode_){nullptr}
    , decltype(_impl_.build_){nullptr}
    , decltype(_impl_.index_){}
    , decltype(_impl_.shouldcreatechunks_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slidenode()) {
    _this->_impl_.slidenode_ = new ::TSP::Reference(*from._impl_.slidenode_);
  }
  if (from._internal_has_build()) {
    _this->_impl_.build_ = new ::TSP::Reference(*from._impl_.build_);
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shouldcreatechunks_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.shouldcreatechunks_));
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideInsertBuildArchive)
}

inline void CommandSlideInsertBuildArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slidenode_){nullptr}
    , decltype(_impl_.build_){nullptr}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.shouldcreatechunks_){false}
  };
}

CommandSlideInsertBuildArchive::~CommandSlideInsertBuildArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideInsertBuildArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideInsertBuildArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slidenode_;
  if (this != internal_default_instance()) delete _impl_.build_;
}

void CommandSlideInsertBuildArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideInsertBuildArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideInsertBuildArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slidenode_ != nullptr);
      _impl_.slidenode_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.build_ != nullptr);
      _impl_.build_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.shouldcreatechunks_) -
        reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.shouldcreatechunks_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideInsertBuildArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference slideNode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slidenode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference build = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_build(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool shouldCreateChunks = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_shouldcreatechunks(&has_bits);
          _impl_.shouldcreatechunks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideInsertBuildArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideInsertBuildArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference slideNode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slidenode(this),
        _Internal::slidenode(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference build = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::build(this),
        _Internal::build(this).GetCachedSize(), target, stream);
  }

  // required uint32 index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_index(), target);
  }

  // optional bool shouldCreateChunks = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_shouldcreatechunks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideInsertBuildArchive)
  return target;
}

size_t CommandSlideInsertBuildArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideInsertBuildArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slidenode()) {
    // required .TSP.Reference slideNode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slidenode_);
  }

  if (_internal_has_build()) {
    // required .TSP.Reference build = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.build_);
  }

  if (_internal_has_index()) {
    // required uint32 index = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return total_size;
}
size_t CommandSlideInsertBuildArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideInsertBuildArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference slideNode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slidenode_);

    // required .TSP.Reference build = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.build_);

    // required uint32 index = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool shouldCreateChunks = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideInsertBuildArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideInsertBuildArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideInsertBuildArchive::GetClassData() const { return &_class_data_; }


void CommandSlideInsertBuildArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideInsertBuildArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideInsertBuildArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideInsertBuildArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slidenode()->::TSP::Reference::MergeFrom(
          from._internal_slidenode());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_build()->::TSP::Reference::MergeFrom(
          from._internal_build());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.shouldcreatechunks_ = from._impl_.shouldcreatechunks_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideInsertBuildArchive::CopyFrom(const CommandSlideInsertBuildArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideInsertBuildArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideInsertBuildArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slidenode()) {
    if (!_impl_.slidenode_->IsInitialized()) return false;
  }
  if (_internal_has_build()) {
    if (!_impl_.build_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideInsertBuildArchive::InternalSwap(CommandSlideInsertBuildArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideInsertBuildArchive, _impl_.shouldcreatechunks_)
      + sizeof(CommandSlideInsertBuildArchive::_impl_.shouldcreatechunks_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideInsertBuildArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideInsertBuildArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[24]);
}

// ===================================================================

class CommandSlideRemoveBuildArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideRemoveBuildArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideRemoveBuildArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& slidenode(const CommandSlideRemoveBuildArchive* msg);
  static void set_has_slidenode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& build(const CommandSlideRemoveBuildArchive* msg);
  static void set_has_build(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideRemoveBuildArchive::_Internal::super(const CommandSlideRemoveBuildArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSlideRemoveBuildArchive::_Internal::slidenode(const CommandSlideRemoveBuildArchive* msg) {
  return *msg->_impl_.slidenode_;
}
const ::TSP::Reference&
CommandSlideRemoveBuildArchive::_Internal::build(const CommandSlideRemoveBuildArchive* msg) {
  return *msg->_impl_.build_;
}
void CommandSlideRemoveBuildArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlideRemoveBuildArchive::clear_slidenode() {
  if (_impl_.slidenode_ != nullptr) _impl_.slidenode_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSlideRemoveBuildArchive::clear_build() {
  if (_impl_.build_ != nullptr) _impl_.build_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandSlideRemoveBuildArchive::CommandSlideRemoveBuildArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideRemoveBuildArchive)
}
CommandSlideRemoveBuildArchive::CommandSlideRemoveBuildArchive(const CommandSlideRemoveBuildArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideRemoveBuildArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slidenode_){nullptr}
    , decltype(_impl_.build_){nullptr}
    , decltype(_impl_.index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slidenode()) {
    _this->_impl_.slidenode_ = new ::TSP::Reference(*from._impl_.slidenode_);
  }
  if (from._internal_has_build()) {
    _this->_impl_.build_ = new ::TSP::Reference(*from._impl_.build_);
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideRemoveBuildArchive)
}

inline void CommandSlideRemoveBuildArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slidenode_){nullptr}
    , decltype(_impl_.build_){nullptr}
    , decltype(_impl_.index_){0u}
  };
}

CommandSlideRemoveBuildArchive::~CommandSlideRemoveBuildArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideRemoveBuildArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideRemoveBuildArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slidenode_;
  if (this != internal_default_instance()) delete _impl_.build_;
}

void CommandSlideRemoveBuildArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideRemoveBuildArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideRemoveBuildArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slidenode_ != nullptr);
      _impl_.slidenode_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.build_ != nullptr);
      _impl_.build_->Clear();
    }
  }
  _impl_.index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideRemoveBuildArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference slideNode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slidenode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference build = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_build(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideRemoveBuildArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideRemoveBuildArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference slideNode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slidenode(this),
        _Internal::slidenode(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference build = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::build(this),
        _Internal::build(this).GetCachedSize(), target, stream);
  }

  // required uint32 index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideRemoveBuildArchive)
  return target;
}

size_t CommandSlideRemoveBuildArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideRemoveBuildArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slidenode()) {
    // required .TSP.Reference slideNode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slidenode_);
  }

  if (_internal_has_build()) {
    // required .TSP.Reference build = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.build_);
  }

  if (_internal_has_index()) {
    // required uint32 index = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return total_size;
}
size_t CommandSlideRemoveBuildArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideRemoveBuildArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference slideNode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slidenode_);

    // required .TSP.Reference build = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.build_);

    // required uint32 index = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideRemoveBuildArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideRemoveBuildArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideRemoveBuildArchive::GetClassData() const { return &_class_data_; }


void CommandSlideRemoveBuildArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideRemoveBuildArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideRemoveBuildArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideRemoveBuildArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slidenode()->::TSP::Reference::MergeFrom(
          from._internal_slidenode());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_build()->::TSP::Reference::MergeFrom(
          from._internal_build());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideRemoveBuildArchive::CopyFrom(const CommandSlideRemoveBuildArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideRemoveBuildArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideRemoveBuildArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slidenode()) {
    if (!_impl_.slidenode_->IsInitialized()) return false;
  }
  if (_internal_has_build()) {
    if (!_impl_.build_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideRemoveBuildArchive::InternalSwap(CommandSlideRemoveBuildArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideRemoveBuildArchive, _impl_.index_)
      + sizeof(CommandSlideRemoveBuildArchive::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideRemoveBuildArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideRemoveBuildArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[25]);
}

// ===================================================================

class CommandSlideMoveBuildWithoutMovingChunksArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideMoveBuildWithoutMovingChunksArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideMoveBuildWithoutMovingChunksArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& slidenode(const CommandSlideMoveBuildWithoutMovingChunksArchive* msg);
  static void set_has_slidenode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_oldindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideMoveBuildWithoutMovingChunksArchive::_Internal::super(const CommandSlideMoveBuildWithoutMovingChunksArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSlideMoveBuildWithoutMovingChunksArchive::_Internal::slidenode(const CommandSlideMoveBuildWithoutMovingChunksArchive* msg) {
  return *msg->_impl_.slidenode_;
}
void CommandSlideMoveBuildWithoutMovingChunksArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlideMoveBuildWithoutMovingChunksArchive::clear_slidenode() {
  if (_impl_.slidenode_ != nullptr) _impl_.slidenode_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandSlideMoveBuildWithoutMovingChunksArchive::CommandSlideMoveBuildWithoutMovingChunksArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideMoveBuildWithoutMovingChunksArchive)
}
CommandSlideMoveBuildWithoutMovingChunksArchive::CommandSlideMoveBuildWithoutMovingChunksArchive(const CommandSlideMoveBuildWithoutMovingChunksArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideMoveBuildWithoutMovingChunksArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slidenode_){nullptr}
    , decltype(_impl_.index_){}
    , decltype(_impl_.oldindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slidenode()) {
    _this->_impl_.slidenode_ = new ::TSP::Reference(*from._impl_.slidenode_);
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.oldindex_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.oldindex_));
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideMoveBuildWithoutMovingChunksArchive)
}

inline void CommandSlideMoveBuildWithoutMovingChunksArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slidenode_){nullptr}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.oldindex_){0u}
  };
}

CommandSlideMoveBuildWithoutMovingChunksArchive::~CommandSlideMoveBuildWithoutMovingChunksArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideMoveBuildWithoutMovingChunksArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideMoveBuildWithoutMovingChunksArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slidenode_;
}

void CommandSlideMoveBuildWithoutMovingChunksArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideMoveBuildWithoutMovingChunksArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideMoveBuildWithoutMovingChunksArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slidenode_ != nullptr);
      _impl_.slidenode_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.oldindex_) -
        reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.oldindex_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideMoveBuildWithoutMovingChunksArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference slideNode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slidenode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 oldIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_oldindex(&has_bits);
          _impl_.oldindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideMoveBuildWithoutMovingChunksArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideMoveBuildWithoutMovingChunksArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference slideNode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slidenode(this),
        _Internal::slidenode(this).GetCachedSize(), target, stream);
  }

  // required uint32 index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_index(), target);
  }

  // required uint32 oldIndex = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_oldindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideMoveBuildWithoutMovingChunksArchive)
  return target;
}

size_t CommandSlideMoveBuildWithoutMovingChunksArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideMoveBuildWithoutMovingChunksArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slidenode()) {
    // required .TSP.Reference slideNode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slidenode_);
  }

  if (_internal_has_index()) {
    // required uint32 index = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  if (_internal_has_oldindex()) {
    // required uint32 oldIndex = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_oldindex());
  }

  return total_size;
}
size_t CommandSlideMoveBuildWithoutMovingChunksArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideMoveBuildWithoutMovingChunksArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference slideNode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slidenode_);

    // required uint32 index = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());

    // required uint32 oldIndex = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_oldindex());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideMoveBuildWithoutMovingChunksArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideMoveBuildWithoutMovingChunksArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideMoveBuildWithoutMovingChunksArchive::GetClassData() const { return &_class_data_; }


void CommandSlideMoveBuildWithoutMovingChunksArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideMoveBuildWithoutMovingChunksArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideMoveBuildWithoutMovingChunksArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideMoveBuildWithoutMovingChunksArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slidenode()->::TSP::Reference::MergeFrom(
          from._internal_slidenode());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.oldindex_ = from._impl_.oldindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideMoveBuildWithoutMovingChunksArchive::CopyFrom(const CommandSlideMoveBuildWithoutMovingChunksArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideMoveBuildWithoutMovingChunksArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideMoveBuildWithoutMovingChunksArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slidenode()) {
    if (!_impl_.slidenode_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideMoveBuildWithoutMovingChunksArchive::InternalSwap(CommandSlideMoveBuildWithoutMovingChunksArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideMoveBuildWithoutMovingChunksArchive, _impl_.oldindex_)
      + sizeof(CommandSlideMoveBuildWithoutMovingChunksArchive::_impl_.oldindex_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideMoveBuildWithoutMovingChunksArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideMoveBuildWithoutMovingChunksArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[26]);
}

// ===================================================================

class CommandSlideMoveBuildsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideMoveBuildsArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideMoveBuildsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_toindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideMoveBuildsArchive::_Internal::super(const CommandSlideMoveBuildsArchive* msg) {
  return *msg->_impl_.super_;
}
void CommandSlideMoveBuildsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlideMoveBuildsArchive::clear_builds() {
  _impl_.builds_.Clear();
}
CommandSlideMoveBuildsArchive::CommandSlideMoveBuildsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideMoveBuildsArchive)
}
CommandSlideMoveBuildsArchive::CommandSlideMoveBuildsArchive(const CommandSlideMoveBuildsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideMoveBuildsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.builds_){from._impl_.builds_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.toindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  _this->_impl_.toindex_ = from._impl_.toindex_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideMoveBuildsArchive)
}

inline void CommandSlideMoveBuildsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.builds_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.toindex_){0u}
  };
}

CommandSlideMoveBuildsArchive::~CommandSlideMoveBuildsArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideMoveBuildsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideMoveBuildsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.builds_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSlideMoveBuildsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideMoveBuildsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideMoveBuildsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.builds_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_.toindex_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideMoveBuildsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference builds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_builds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 toIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_toindex(&has_bits);
          _impl_.toindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideMoveBuildsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideMoveBuildsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference builds = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_builds_size()); i < n; i++) {
    const auto& repfield = this->_internal_builds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 toIndex = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_toindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideMoveBuildsArchive)
  return target;
}

size_t CommandSlideMoveBuildsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideMoveBuildsArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference builds = 2;
  total_size += 1UL * this->_internal_builds_size();
  for (const auto& msg : this->_impl_.builds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 toIndex = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_toindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideMoveBuildsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideMoveBuildsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideMoveBuildsArchive::GetClassData() const { return &_class_data_; }


void CommandSlideMoveBuildsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideMoveBuildsArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideMoveBuildsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideMoveBuildsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.builds_.MergeFrom(from._impl_.builds_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.toindex_ = from._impl_.toindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideMoveBuildsArchive::CopyFrom(const CommandSlideMoveBuildsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideMoveBuildsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideMoveBuildsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.builds_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideMoveBuildsArchive::InternalSwap(CommandSlideMoveBuildsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.builds_.InternalSwap(&other->_impl_.builds_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideMoveBuildsArchive, _impl_.toindex_)
      + sizeof(CommandSlideMoveBuildsArchive::_impl_.toindex_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideMoveBuildsArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideMoveBuildsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[27]);
}

// ===================================================================

class CommandSlideInsertBuildChunkArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideInsertBuildChunkArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideInsertBuildChunkArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& slide(const CommandSlideInsertBuildChunkArchive* msg);
  static void set_has_slide(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::KN::BuildChunkArchive& buildchunk(const CommandSlideInsertBuildChunkArchive* msg);
  static void set_has_buildchunk(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideInsertBuildChunkArchive::_Internal::super(const CommandSlideInsertBuildChunkArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSlideInsertBuildChunkArchive::_Internal::slide(const CommandSlideInsertBuildChunkArchive* msg) {
  return *msg->_impl_.slide_;
}
const ::KN::BuildChunkArchive&
CommandSlideInsertBuildChunkArchive::_Internal::buildchunk(const CommandSlideInsertBuildChunkArchive* msg) {
  return *msg->_impl_.buildchunk_;
}
void CommandSlideInsertBuildChunkArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlideInsertBuildChunkArchive::clear_slide() {
  if (_impl_.slide_ != nullptr) _impl_.slide_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSlideInsertBuildChunkArchive::clear_buildchunk() {
  if (_impl_.buildchunk_ != nullptr) _impl_.buildchunk_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandSlideInsertBuildChunkArchive::CommandSlideInsertBuildChunkArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideInsertBuildChunkArchive)
}
CommandSlideInsertBuildChunkArchive::CommandSlideInsertBuildChunkArchive(const CommandSlideInsertBuildChunkArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideInsertBuildChunkArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_){nullptr}
    , decltype(_impl_.buildchunk_){nullptr}
    , decltype(_impl_.index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slide()) {
    _this->_impl_.slide_ = new ::TSP::Reference(*from._impl_.slide_);
  }
  if (from._internal_has_buildchunk()) {
    _this->_impl_.buildchunk_ = new ::KN::BuildChunkArchive(*from._impl_.buildchunk_);
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideInsertBuildChunkArchive)
}

inline void CommandSlideInsertBuildChunkArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_){nullptr}
    , decltype(_impl_.buildchunk_){nullptr}
    , decltype(_impl_.index_){0u}
  };
}

CommandSlideInsertBuildChunkArchive::~CommandSlideInsertBuildChunkArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideInsertBuildChunkArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideInsertBuildChunkArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slide_;
  if (this != internal_default_instance()) delete _impl_.buildchunk_;
}

void CommandSlideInsertBuildChunkArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideInsertBuildChunkArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideInsertBuildChunkArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slide_ != nullptr);
      _impl_.slide_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.buildchunk_ != nullptr);
      _impl_.buildchunk_->Clear();
    }
  }
  _impl_.index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideInsertBuildChunkArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference slide = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .KN.BuildChunkArchive buildChunk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_buildchunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideInsertBuildChunkArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideInsertBuildChunkArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference slide = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slide(this),
        _Internal::slide(this).GetCachedSize(), target, stream);
  }

  // required .KN.BuildChunkArchive buildChunk = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::buildchunk(this),
        _Internal::buildchunk(this).GetCachedSize(), target, stream);
  }

  // required uint32 index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideInsertBuildChunkArchive)
  return target;
}

size_t CommandSlideInsertBuildChunkArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideInsertBuildChunkArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slide()) {
    // required .TSP.Reference slide = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_);
  }

  if (_internal_has_buildchunk()) {
    // required .KN.BuildChunkArchive buildChunk = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buildchunk_);
  }

  if (_internal_has_index()) {
    // required uint32 index = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return total_size;
}
size_t CommandSlideInsertBuildChunkArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideInsertBuildChunkArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference slide = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_);

    // required .KN.BuildChunkArchive buildChunk = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buildchunk_);

    // required uint32 index = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideInsertBuildChunkArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideInsertBuildChunkArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideInsertBuildChunkArchive::GetClassData() const { return &_class_data_; }


void CommandSlideInsertBuildChunkArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideInsertBuildChunkArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideInsertBuildChunkArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideInsertBuildChunkArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slide()->::TSP::Reference::MergeFrom(
          from._internal_slide());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_buildchunk()->::KN::BuildChunkArchive::MergeFrom(
          from._internal_buildchunk());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideInsertBuildChunkArchive::CopyFrom(const CommandSlideInsertBuildChunkArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideInsertBuildChunkArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideInsertBuildChunkArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slide()) {
    if (!_impl_.slide_->IsInitialized()) return false;
  }
  if (_internal_has_buildchunk()) {
    if (!_impl_.buildchunk_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideInsertBuildChunkArchive::InternalSwap(CommandSlideInsertBuildChunkArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideInsertBuildChunkArchive, _impl_.index_)
      + sizeof(CommandSlideInsertBuildChunkArchive::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideInsertBuildChunkArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideInsertBuildChunkArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[28]);
}

// ===================================================================

class CommandSlideRemoveBuildChunkArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideRemoveBuildChunkArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideRemoveBuildChunkArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& slide(const CommandSlideRemoveBuildChunkArchive* msg);
  static void set_has_slide(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::KN::BuildChunkArchive& buildchunk(const CommandSlideRemoveBuildChunkArchive* msg);
  static void set_has_buildchunk(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideRemoveBuildChunkArchive::_Internal::super(const CommandSlideRemoveBuildChunkArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSlideRemoveBuildChunkArchive::_Internal::slide(const CommandSlideRemoveBuildChunkArchive* msg) {
  return *msg->_impl_.slide_;
}
const ::KN::BuildChunkArchive&
CommandSlideRemoveBuildChunkArchive::_Internal::buildchunk(const CommandSlideRemoveBuildChunkArchive* msg) {
  return *msg->_impl_.buildchunk_;
}
void CommandSlideRemoveBuildChunkArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlideRemoveBuildChunkArchive::clear_slide() {
  if (_impl_.slide_ != nullptr) _impl_.slide_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSlideRemoveBuildChunkArchive::clear_buildchunk() {
  if (_impl_.buildchunk_ != nullptr) _impl_.buildchunk_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandSlideRemoveBuildChunkArchive::CommandSlideRemoveBuildChunkArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideRemoveBuildChunkArchive)
}
CommandSlideRemoveBuildChunkArchive::CommandSlideRemoveBuildChunkArchive(const CommandSlideRemoveBuildChunkArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideRemoveBuildChunkArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_){nullptr}
    , decltype(_impl_.buildchunk_){nullptr}
    , decltype(_impl_.index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slide()) {
    _this->_impl_.slide_ = new ::TSP::Reference(*from._impl_.slide_);
  }
  if (from._internal_has_buildchunk()) {
    _this->_impl_.buildchunk_ = new ::KN::BuildChunkArchive(*from._impl_.buildchunk_);
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideRemoveBuildChunkArchive)
}

inline void CommandSlideRemoveBuildChunkArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_){nullptr}
    , decltype(_impl_.buildchunk_){nullptr}
    , decltype(_impl_.index_){0u}
  };
}

CommandSlideRemoveBuildChunkArchive::~CommandSlideRemoveBuildChunkArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideRemoveBuildChunkArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideRemoveBuildChunkArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slide_;
  if (this != internal_default_instance()) delete _impl_.buildchunk_;
}

void CommandSlideRemoveBuildChunkArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideRemoveBuildChunkArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideRemoveBuildChunkArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slide_ != nullptr);
      _impl_.slide_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.buildchunk_ != nullptr);
      _impl_.buildchunk_->Clear();
    }
  }
  _impl_.index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideRemoveBuildChunkArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference slide = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .KN.BuildChunkArchive buildChunk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_buildchunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideRemoveBuildChunkArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideRemoveBuildChunkArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference slide = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slide(this),
        _Internal::slide(this).GetCachedSize(), target, stream);
  }

  // required .KN.BuildChunkArchive buildChunk = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::buildchunk(this),
        _Internal::buildchunk(this).GetCachedSize(), target, stream);
  }

  // required uint32 index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideRemoveBuildChunkArchive)
  return target;
}

size_t CommandSlideRemoveBuildChunkArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideRemoveBuildChunkArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slide()) {
    // required .TSP.Reference slide = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_);
  }

  if (_internal_has_buildchunk()) {
    // required .KN.BuildChunkArchive buildChunk = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buildchunk_);
  }

  if (_internal_has_index()) {
    // required uint32 index = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return total_size;
}
size_t CommandSlideRemoveBuildChunkArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideRemoveBuildChunkArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference slide = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_);

    // required .KN.BuildChunkArchive buildChunk = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buildchunk_);

    // required uint32 index = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideRemoveBuildChunkArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideRemoveBuildChunkArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideRemoveBuildChunkArchive::GetClassData() const { return &_class_data_; }


void CommandSlideRemoveBuildChunkArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideRemoveBuildChunkArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideRemoveBuildChunkArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideRemoveBuildChunkArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slide()->::TSP::Reference::MergeFrom(
          from._internal_slide());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_buildchunk()->::KN::BuildChunkArchive::MergeFrom(
          from._internal_buildchunk());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideRemoveBuildChunkArchive::CopyFrom(const CommandSlideRemoveBuildChunkArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideRemoveBuildChunkArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideRemoveBuildChunkArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slide()) {
    if (!_impl_.slide_->IsInitialized()) return false;
  }
  if (_internal_has_buildchunk()) {
    if (!_impl_.buildchunk_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideRemoveBuildChunkArchive::InternalSwap(CommandSlideRemoveBuildChunkArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideRemoveBuildChunkArchive, _impl_.index_)
      + sizeof(CommandSlideRemoveBuildChunkArchive::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideRemoveBuildChunkArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideRemoveBuildChunkArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[29]);
}

// ===================================================================

class CommandSlideMoveBuildChunkArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideMoveBuildChunkArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideMoveBuildChunkArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& slide(const CommandSlideMoveBuildChunkArchive* msg);
  static void set_has_slide(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_oldindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideMoveBuildChunkArchive::_Internal::super(const CommandSlideMoveBuildChunkArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSlideMoveBuildChunkArchive::_Internal::slide(const CommandSlideMoveBuildChunkArchive* msg) {
  return *msg->_impl_.slide_;
}
void CommandSlideMoveBuildChunkArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlideMoveBuildChunkArchive::clear_slide() {
  if (_impl_.slide_ != nullptr) _impl_.slide_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandSlideMoveBuildChunkArchive::CommandSlideMoveBuildChunkArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideMoveBuildChunkArchive)
}
CommandSlideMoveBuildChunkArchive::CommandSlideMoveBuildChunkArchive(const CommandSlideMoveBuildChunkArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideMoveBuildChunkArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_){nullptr}
    , decltype(_impl_.index_){}
    , decltype(_impl_.oldindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slide()) {
    _this->_impl_.slide_ = new ::TSP::Reference(*from._impl_.slide_);
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.oldindex_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.oldindex_));
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideMoveBuildChunkArchive)
}

inline void CommandSlideMoveBuildChunkArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_){nullptr}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.oldindex_){0u}
  };
}

CommandSlideMoveBuildChunkArchive::~CommandSlideMoveBuildChunkArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideMoveBuildChunkArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideMoveBuildChunkArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slide_;
}

void CommandSlideMoveBuildChunkArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideMoveBuildChunkArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideMoveBuildChunkArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slide_ != nullptr);
      _impl_.slide_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.oldindex_) -
        reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.oldindex_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideMoveBuildChunkArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference slide = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 oldIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_oldindex(&has_bits);
          _impl_.oldindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideMoveBuildChunkArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideMoveBuildChunkArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference slide = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slide(this),
        _Internal::slide(this).GetCachedSize(), target, stream);
  }

  // required uint32 index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_index(), target);
  }

  // required uint32 oldIndex = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_oldindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideMoveBuildChunkArchive)
  return target;
}

size_t CommandSlideMoveBuildChunkArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideMoveBuildChunkArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slide()) {
    // required .TSP.Reference slide = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_);
  }

  if (_internal_has_index()) {
    // required uint32 index = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  if (_internal_has_oldindex()) {
    // required uint32 oldIndex = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_oldindex());
  }

  return total_size;
}
size_t CommandSlideMoveBuildChunkArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideMoveBuildChunkArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference slide = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_);

    // required uint32 index = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());

    // required uint32 oldIndex = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_oldindex());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideMoveBuildChunkArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideMoveBuildChunkArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideMoveBuildChunkArchive::GetClassData() const { return &_class_data_; }


void CommandSlideMoveBuildChunkArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideMoveBuildChunkArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideMoveBuildChunkArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideMoveBuildChunkArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slide()->::TSP::Reference::MergeFrom(
          from._internal_slide());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.oldindex_ = from._impl_.oldindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideMoveBuildChunkArchive::CopyFrom(const CommandSlideMoveBuildChunkArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideMoveBuildChunkArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideMoveBuildChunkArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slide()) {
    if (!_impl_.slide_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideMoveBuildChunkArchive::InternalSwap(CommandSlideMoveBuildChunkArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideMoveBuildChunkArchive, _impl_.oldindex_)
      + sizeof(CommandSlideMoveBuildChunkArchive::_impl_.oldindex_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideMoveBuildChunkArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideMoveBuildChunkArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[30]);
}

// ===================================================================

class CommandSlideMoveBuildChunksArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideMoveBuildChunksArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideMoveBuildChunksArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_toindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideMoveBuildChunksArchive::_Internal::super(const CommandSlideMoveBuildChunksArchive* msg) {
  return *msg->_impl_.super_;
}
void CommandSlideMoveBuildChunksArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlideMoveBuildChunksArchive::clear_buildchunks() {
  _impl_.buildchunks_.Clear();
}
CommandSlideMoveBuildChunksArchive::CommandSlideMoveBuildChunksArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideMoveBuildChunksArchive)
}
CommandSlideMoveBuildChunksArchive::CommandSlideMoveBuildChunksArchive(const CommandSlideMoveBuildChunksArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideMoveBuildChunksArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buildchunks_){from._impl_.buildchunks_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.toindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  _this->_impl_.toindex_ = from._impl_.toindex_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideMoveBuildChunksArchive)
}

inline void CommandSlideMoveBuildChunksArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buildchunks_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.toindex_){0u}
  };
}

CommandSlideMoveBuildChunksArchive::~CommandSlideMoveBuildChunksArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideMoveBuildChunksArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideMoveBuildChunksArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buildchunks_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSlideMoveBuildChunksArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideMoveBuildChunksArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideMoveBuildChunksArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buildchunks_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_.toindex_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideMoveBuildChunksArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkArchive buildChunks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buildchunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 toIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_toindex(&has_bits);
          _impl_.toindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideMoveBuildChunksArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideMoveBuildChunksArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .KN.BuildChunkArchive buildChunks = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buildchunks_size()); i < n; i++) {
    const auto& repfield = this->_internal_buildchunks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 toIndex = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_toindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideMoveBuildChunksArchive)
  return target;
}

size_t CommandSlideMoveBuildChunksArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideMoveBuildChunksArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KN.BuildChunkArchive buildChunks = 2;
  total_size += 1UL * this->_internal_buildchunks_size();
  for (const auto& msg : this->_impl_.buildchunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 toIndex = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_toindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideMoveBuildChunksArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideMoveBuildChunksArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideMoveBuildChunksArchive::GetClassData() const { return &_class_data_; }


void CommandSlideMoveBuildChunksArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideMoveBuildChunksArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideMoveBuildChunksArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideMoveBuildChunksArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.buildchunks_.MergeFrom(from._impl_.buildchunks_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.toindex_ = from._impl_.toindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideMoveBuildChunksArchive::CopyFrom(const CommandSlideMoveBuildChunksArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideMoveBuildChunksArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideMoveBuildChunksArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.buildchunks_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideMoveBuildChunksArchive::InternalSwap(CommandSlideMoveBuildChunksArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.buildchunks_.InternalSwap(&other->_impl_.buildchunks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideMoveBuildChunksArchive, _impl_.toindex_)
      + sizeof(CommandSlideMoveBuildChunksArchive::_impl_.toindex_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideMoveBuildChunksArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideMoveBuildChunksArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[31]);
}

// ===================================================================

class CommandBuildSetValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandBuildSetValueArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandBuildSetValueArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& build(const CommandBuildSetValueArchive* msg);
  static void set_has_build(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandArchive&
CommandBuildSetValueArchive::_Internal::super(const CommandBuildSetValueArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandBuildSetValueArchive::_Internal::build(const CommandBuildSetValueArchive* msg) {
  return *msg->_impl_.build_;
}
void CommandBuildSetValueArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandBuildSetValueArchive::clear_build() {
  if (_impl_.build_ != nullptr) _impl_.build_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandBuildSetValueArchive::CommandBuildSetValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandBuildSetValueArchive)
}
CommandBuildSetValueArchive::CommandBuildSetValueArchive(const CommandBuildSetValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandBuildSetValueArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.effects_){from._impl_.effects_}
    , decltype(_impl_.types_){from._impl_.types_}
    , decltype(_impl_.deliveries_){from._impl_.deliveries_}
    , decltype(_impl_.directions_){from._impl_.directions_}
    , decltype(_impl_.durations_){from._impl_.durations_}
    , decltype(_impl_.delays_){from._impl_.delays_}
    , decltype(_impl_.delayautomaticafters_){from._impl_.delayautomaticafters_}
    , decltype(_impl_.delayautomaticwiths_){from._impl_.delayautomaticwiths_}
    , decltype(_impl_.eventtriggers_){from._impl_.eventtriggers_}
    , decltype(_impl_.property_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.build_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_property()) {
    _this->_impl_.property_.Set(from._internal_property(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_build()) {
    _this->_impl_.build_ = new ::TSP::Reference(*from._impl_.build_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandBuildSetValueArchive)
}

inline void CommandBuildSetValueArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.effects_){arena}
    , decltype(_impl_.types_){arena}
    , decltype(_impl_.deliveries_){arena}
    , decltype(_impl_.directions_){arena}
    , decltype(_impl_.durations_){arena}
    , decltype(_impl_.delays_){arena}
    , decltype(_impl_.delayautomaticafters_){arena}
    , decltype(_impl_.delayautomaticwiths_){arena}
    , decltype(_impl_.eventtriggers_){arena}
    , decltype(_impl_.property_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.build_){nullptr}
  };
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandBuildSetValueArchive::~CommandBuildSetValueArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandBuildSetValueArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandBuildSetValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.effects_.~RepeatedPtrField();
  _impl_.types_.~RepeatedPtrField();
  _impl_.deliveries_.~RepeatedPtrField();
  _impl_.directions_.~RepeatedField();
  _impl_.durations_.~RepeatedField();
  _impl_.delays_.~RepeatedField();
  _impl_.delayautomaticafters_.~RepeatedField();
  _impl_.delayautomaticwiths_.~RepeatedField();
  _impl_.eventtriggers_.~RepeatedField();
  _impl_.property_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.build_;
}

void CommandBuildSetValueArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandBuildSetValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandBuildSetValueArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.effects_.Clear();
  _impl_.types_.Clear();
  _impl_.deliveries_.Clear();
  _impl_.directions_.Clear();
  _impl_.durations_.Clear();
  _impl_.delays_.Clear();
  _impl_.delayautomaticafters_.Clear();
  _impl_.delayautomaticwiths_.Clear();
  _impl_.eventtriggers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.property_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.build_ != nullptr);
      _impl_.build_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandBuildSetValueArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference build = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_build(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string property = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_property();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.CommandBuildSetValueArchive.property");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string effects = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_effects();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "KN.CommandBuildSetValueArchive.effects");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string types = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_types();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "KN.CommandBuildSetValueArchive.types");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string deliveries = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_deliveries();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "KN.CommandBuildSetValueArchive.deliveries");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 directions = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_directions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_directions(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double durations = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_durations(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<65>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_durations(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double delays = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_delays(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<73>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_delays(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double delayAutomaticAfters = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_delayautomaticafters(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<81>(ptr));
        } else if (static_cast<uint8_t>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_delayautomaticafters(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double delayAutomaticWiths = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_delayautomaticwiths(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<89>(ptr));
        } else if (static_cast<uint8_t>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_delayautomaticwiths(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool eventTriggers = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_eventtriggers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<96>(ptr));
        } else if (static_cast<uint8_t>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_eventtriggers(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandBuildSetValueArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandBuildSetValueArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference build = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::build(this),
        _Internal::build(this).GetCachedSize(), target, stream);
  }

  // required string property = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property().data(), static_cast<int>(this->_internal_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandBuildSetValueArchive.property");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_property(), target);
  }

  // repeated string effects = 4;
  for (int i = 0, n = this->_internal_effects_size(); i < n; i++) {
    const auto& s = this->_internal_effects(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandBuildSetValueArchive.effects");
    target = stream->WriteString(4, s, target);
  }

  // repeated string types = 5;
  for (int i = 0, n = this->_internal_types_size(); i < n; i++) {
    const auto& s = this->_internal_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandBuildSetValueArchive.types");
    target = stream->WriteString(5, s, target);
  }

  // repeated string deliveries = 6;
  for (int i = 0, n = this->_internal_deliveries_size(); i < n; i++) {
    const auto& s = this->_internal_deliveries(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandBuildSetValueArchive.deliveries");
    target = stream->WriteString(6, s, target);
  }

  // repeated uint32 directions = 7;
  for (int i = 0, n = this->_internal_directions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_directions(i), target);
  }

  // repeated double durations = 8;
  for (int i = 0, n = this->_internal_durations_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_durations(i), target);
  }

  // repeated double delays = 9;
  for (int i = 0, n = this->_internal_delays_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_delays(i), target);
  }

  // repeated double delayAutomaticAfters = 10;
  for (int i = 0, n = this->_internal_delayautomaticafters_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_delayautomaticafters(i), target);
  }

  // repeated double delayAutomaticWiths = 11;
  for (int i = 0, n = this->_internal_delayautomaticwiths_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_delayautomaticwiths(i), target);
  }

  // repeated bool eventTriggers = 12;
  for (int i = 0, n = this->_internal_eventtriggers_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_eventtriggers(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandBuildSetValueArchive)
  return target;
}

size_t CommandBuildSetValueArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandBuildSetValueArchive)
  size_t total_size = 0;

  if (_internal_has_property()) {
    // required string property = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_build()) {
    // required .TSP.Reference build = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.build_);
  }

  return total_size;
}
size_t CommandBuildSetValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandBuildSetValueArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string property = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());

    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference build = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.build_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string effects = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.effects_.size());
  for (int i = 0, n = _impl_.effects_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.effects_.Get(i));
  }

  // repeated string types = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.types_.size());
  for (int i = 0, n = _impl_.types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.types_.Get(i));
  }

  // repeated string deliveries = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.deliveries_.size());
  for (int i = 0, n = _impl_.deliveries_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.deliveries_.Get(i));
  }

  // repeated uint32 directions = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.directions_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_directions_size());
    total_size += data_size;
  }

  // repeated double durations = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_durations_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_durations_size());
    total_size += data_size;
  }

  // repeated double delays = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_delays_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_delays_size());
    total_size += data_size;
  }

  // repeated double delayAutomaticAfters = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_delayautomaticafters_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_delayautomaticafters_size());
    total_size += data_size;
  }

  // repeated double delayAutomaticWiths = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_delayautomaticwiths_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_delayautomaticwiths_size());
    total_size += data_size;
  }

  // repeated bool eventTriggers = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_eventtriggers_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_eventtriggers_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandBuildSetValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandBuildSetValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandBuildSetValueArchive::GetClassData() const { return &_class_data_; }


void CommandBuildSetValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandBuildSetValueArchive*>(&to_msg);
  auto& from = static_cast<const CommandBuildSetValueArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandBuildSetValueArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.effects_.MergeFrom(from._impl_.effects_);
  _this->_impl_.types_.MergeFrom(from._impl_.types_);
  _this->_impl_.deliveries_.MergeFrom(from._impl_.deliveries_);
  _this->_impl_.directions_.MergeFrom(from._impl_.directions_);
  _this->_impl_.durations_.MergeFrom(from._impl_.durations_);
  _this->_impl_.delays_.MergeFrom(from._impl_.delays_);
  _this->_impl_.delayautomaticafters_.MergeFrom(from._impl_.delayautomaticafters_);
  _this->_impl_.delayautomaticwiths_.MergeFrom(from._impl_.delayautomaticwiths_);
  _this->_impl_.eventtriggers_.MergeFrom(from._impl_.eventtriggers_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_property(from._internal_property());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_build()->::TSP::Reference::MergeFrom(
          from._internal_build());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandBuildSetValueArchive::CopyFrom(const CommandBuildSetValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandBuildSetValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandBuildSetValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_build()) {
    if (!_impl_.build_->IsInitialized()) return false;
  }
  return true;
}

void CommandBuildSetValueArchive::InternalSwap(CommandBuildSetValueArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.effects_.InternalSwap(&other->_impl_.effects_);
  _impl_.types_.InternalSwap(&other->_impl_.types_);
  _impl_.deliveries_.InternalSwap(&other->_impl_.deliveries_);
  _impl_.directions_.InternalSwap(&other->_impl_.directions_);
  _impl_.durations_.InternalSwap(&other->_impl_.durations_);
  _impl_.delays_.InternalSwap(&other->_impl_.delays_);
  _impl_.delayautomaticafters_.InternalSwap(&other->_impl_.delayautomaticafters_);
  _impl_.delayautomaticwiths_.InternalSwap(&other->_impl_.delayautomaticwiths_);
  _impl_.eventtriggers_.InternalSwap(&other->_impl_.eventtriggers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.property_, lhs_arena,
      &other->_impl_.property_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandBuildSetValueArchive, _impl_.build_)
      + sizeof(CommandBuildSetValueArchive::_impl_.build_)
      - PROTOBUF_FIELD_OFFSET(CommandBuildSetValueArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandBuildSetValueArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[32]);
}

// ===================================================================

class CommandBuildChunkSetValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandBuildChunkSetValueArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandBuildChunkSetValueArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::KN::BuildChunkArchive& buildchunk(const CommandBuildChunkSetValueArchive* msg);
  static void set_has_buildchunk(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_oldownsvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandArchive&
CommandBuildChunkSetValueArchive::_Internal::super(const CommandBuildChunkSetValueArchive* msg) {
  return *msg->_impl_.super_;
}
const ::KN::BuildChunkArchive&
CommandBuildChunkSetValueArchive::_Internal::buildchunk(const CommandBuildChunkSetValueArchive* msg) {
  return *msg->_impl_.buildchunk_;
}
void CommandBuildChunkSetValueArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandBuildChunkSetValueArchive::clear_buildchunk() {
  if (_impl_.buildchunk_ != nullptr) _impl_.buildchunk_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandBuildChunkSetValueArchive::CommandBuildChunkSetValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandBuildChunkSetValueArchive)
}
CommandBuildChunkSetValueArchive::CommandBuildChunkSetValueArchive(const CommandBuildChunkSetValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandBuildChunkSetValueArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.referents_){from._impl_.referents_}
    , decltype(_impl_.automatics_){from._impl_.automatics_}
    , decltype(_impl_.durations_){from._impl_.durations_}
    , decltype(_impl_.delays_){from._impl_.delays_}
    , decltype(_impl_.property_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.buildchunk_){nullptr}
    , decltype(_impl_.oldownsvalue_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_property()) {
    _this->_impl_.property_.Set(from._internal_property(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_buildchunk()) {
    _this->_impl_.buildchunk_ = new ::KN::BuildChunkArchive(*from._impl_.buildchunk_);
  }
  _this->_impl_.oldownsvalue_ = from._impl_.oldownsvalue_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandBuildChunkSetValueArchive)
}

inline void CommandBuildChunkSetValueArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.referents_){arena}
    , decltype(_impl_.automatics_){arena}
    , decltype(_impl_.durations_){arena}
    , decltype(_impl_.delays_){arena}
    , decltype(_impl_.property_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.buildchunk_){nullptr}
    , decltype(_impl_.oldownsvalue_){false}
  };
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandBuildChunkSetValueArchive::~CommandBuildChunkSetValueArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandBuildChunkSetValueArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandBuildChunkSetValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.referents_.~RepeatedField();
  _impl_.automatics_.~RepeatedField();
  _impl_.durations_.~RepeatedField();
  _impl_.delays_.~RepeatedField();
  _impl_.property_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.buildchunk_;
}

void CommandBuildChunkSetValueArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandBuildChunkSetValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandBuildChunkSetValueArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.referents_.Clear();
  _impl_.automatics_.Clear();
  _impl_.durations_.Clear();
  _impl_.delays_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.property_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.buildchunk_ != nullptr);
      _impl_.buildchunk_->Clear();
    }
  }
  _impl_.oldownsvalue_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandBuildChunkSetValueArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .KN.BuildChunkArchive buildChunk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_buildchunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string property = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_property();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.CommandBuildChunkSetValueArchive.property");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 referents = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_referents(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_referents(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool automatics = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_automatics(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_automatics(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double durations = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_durations(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<49>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_durations(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double delays = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_delays(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<57>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_delays(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool oldOwnsValue = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_oldownsvalue(&has_bits);
          _impl_.oldownsvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandBuildChunkSetValueArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandBuildChunkSetValueArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .KN.BuildChunkArchive buildChunk = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::buildchunk(this),
        _Internal::buildchunk(this).GetCachedSize(), target, stream);
  }

  // required string property = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property().data(), static_cast<int>(this->_internal_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandBuildChunkSetValueArchive.property");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_property(), target);
  }

  // repeated uint32 referents = 4;
  for (int i = 0, n = this->_internal_referents_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_referents(i), target);
  }

  // repeated bool automatics = 5;
  for (int i = 0, n = this->_internal_automatics_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_automatics(i), target);
  }

  // repeated double durations = 6;
  for (int i = 0, n = this->_internal_durations_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_durations(i), target);
  }

  // repeated double delays = 7;
  for (int i = 0, n = this->_internal_delays_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_delays(i), target);
  }

  // optional bool oldOwnsValue = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_oldownsvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandBuildChunkSetValueArchive)
  return target;
}

size_t CommandBuildChunkSetValueArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandBuildChunkSetValueArchive)
  size_t total_size = 0;

  if (_internal_has_property()) {
    // required string property = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_buildchunk()) {
    // required .KN.BuildChunkArchive buildChunk = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buildchunk_);
  }

  return total_size;
}
size_t CommandBuildChunkSetValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandBuildChunkSetValueArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string property = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());

    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .KN.BuildChunkArchive buildChunk = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buildchunk_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 referents = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.referents_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_referents_size());
    total_size += data_size;
  }

  // repeated bool automatics = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_automatics_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_automatics_size());
    total_size += data_size;
  }

  // repeated double durations = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_durations_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_durations_size());
    total_size += data_size;
  }

  // repeated double delays = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_delays_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_delays_size());
    total_size += data_size;
  }

  // optional bool oldOwnsValue = 8;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandBuildChunkSetValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandBuildChunkSetValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandBuildChunkSetValueArchive::GetClassData() const { return &_class_data_; }


void CommandBuildChunkSetValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandBuildChunkSetValueArchive*>(&to_msg);
  auto& from = static_cast<const CommandBuildChunkSetValueArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandBuildChunkSetValueArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.referents_.MergeFrom(from._impl_.referents_);
  _this->_impl_.automatics_.MergeFrom(from._impl_.automatics_);
  _this->_impl_.durations_.MergeFrom(from._impl_.durations_);
  _this->_impl_.delays_.MergeFrom(from._impl_.delays_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_property(from._internal_property());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_buildchunk()->::KN::BuildChunkArchive::MergeFrom(
          from._internal_buildchunk());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.oldownsvalue_ = from._impl_.oldownsvalue_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandBuildChunkSetValueArchive::CopyFrom(const CommandBuildChunkSetValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandBuildChunkSetValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandBuildChunkSetValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_buildchunk()) {
    if (!_impl_.buildchunk_->IsInitialized()) return false;
  }
  return true;
}

void CommandBuildChunkSetValueArchive::InternalSwap(CommandBuildChunkSetValueArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.referents_.InternalSwap(&other->_impl_.referents_);
  _impl_.automatics_.InternalSwap(&other->_impl_.automatics_);
  _impl_.durations_.InternalSwap(&other->_impl_.durations_);
  _impl_.delays_.InternalSwap(&other->_impl_.delays_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.property_, lhs_arena,
      &other->_impl_.property_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandBuildChunkSetValueArchive, _impl_.oldownsvalue_)
      + sizeof(CommandBuildChunkSetValueArchive::_impl_.oldownsvalue_)
      - PROTOBUF_FIELD_OFFSET(CommandBuildChunkSetValueArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandBuildChunkSetValueArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[33]);
}

// ===================================================================

class CommandTransitionSetValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandTransitionSetValueArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandTransitionSetValueArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& slidenode(const CommandTransitionSetValueArchive* msg);
  static void set_has_slidenode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandArchive&
CommandTransitionSetValueArchive::_Internal::super(const CommandTransitionSetValueArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandTransitionSetValueArchive::_Internal::slidenode(const CommandTransitionSetValueArchive* msg) {
  return *msg->_impl_.slidenode_;
}
void CommandTransitionSetValueArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandTransitionSetValueArchive::clear_slidenode() {
  if (_impl_.slidenode_ != nullptr) _impl_.slidenode_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandTransitionSetValueArchive::CommandTransitionSetValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandTransitionSetValueArchive)
}
CommandTransitionSetValueArchive::CommandTransitionSetValueArchive(const CommandTransitionSetValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandTransitionSetValueArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.effects_){from._impl_.effects_}
    , decltype(_impl_.unused_){from._impl_.unused_}
    , decltype(_impl_.unused2_){from._impl_.unused2_}
    , decltype(_impl_.unused3_){from._impl_.unused3_}
    , decltype(_impl_.durations_){from._impl_.durations_}
    , decltype(_impl_.directions_){from._impl_.directions_}
    , decltype(_impl_.isautomatics_){from._impl_.isautomatics_}
    , decltype(_impl_.delays_){from._impl_.delays_}
    , decltype(_impl_.property_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slidenode_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_property()) {
    _this->_impl_.property_.Set(from._internal_property(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slidenode()) {
    _this->_impl_.slidenode_ = new ::TSP::Reference(*from._impl_.slidenode_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandTransitionSetValueArchive)
}

inline void CommandTransitionSetValueArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.effects_){arena}
    , decltype(_impl_.unused_){arena}
    , decltype(_impl_.unused2_){arena}
    , decltype(_impl_.unused3_){arena}
    , decltype(_impl_.durations_){arena}
    , decltype(_impl_.directions_){arena}
    , decltype(_impl_.isautomatics_){arena}
    , decltype(_impl_.delays_){arena}
    , decltype(_impl_.property_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slidenode_){nullptr}
  };
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandTransitionSetValueArchive::~CommandTransitionSetValueArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandTransitionSetValueArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandTransitionSetValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.effects_.~RepeatedPtrField();
  _impl_.unused_.~RepeatedPtrField();
  _impl_.unused2_.~RepeatedPtrField();
  _impl_.unused3_.~RepeatedPtrField();
  _impl_.durations_.~RepeatedField();
  _impl_.directions_.~RepeatedField();
  _impl_.isautomatics_.~RepeatedField();
  _impl_.delays_.~RepeatedField();
  _impl_.property_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slidenode_;
}

void CommandTransitionSetValueArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandTransitionSetValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandTransitionSetValueArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.effects_.Clear();
  _impl_.unused_.Clear();
  _impl_.unused2_.Clear();
  _impl_.unused3_.Clear();
  _impl_.durations_.Clear();
  _impl_.directions_.Clear();
  _impl_.isautomatics_.Clear();
  _impl_.delays_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.property_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.slidenode_ != nullptr);
      _impl_.slidenode_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandTransitionSetValueArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference slideNode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slidenode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string property = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_property();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.CommandTransitionSetValueArchive.property");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string effects = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_effects();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "KN.CommandTransitionSetValueArchive.effects");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string unused = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_unused();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "KN.CommandTransitionSetValueArchive.unused");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string unused2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_unused2();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "KN.CommandTransitionSetValueArchive.unused2");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string unused3 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_unused3();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "KN.CommandTransitionSetValueArchive.unused3");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated double durations = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_durations(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<65>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_durations(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 directions = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_directions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_directions(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool isAutomatics = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_isautomatics(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<uint8_t>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_isautomatics(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double delays = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_delays(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<89>(ptr));
        } else if (static_cast<uint8_t>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_delays(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandTransitionSetValueArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandTransitionSetValueArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference slideNode = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slidenode(this),
        _Internal::slidenode(this).GetCachedSize(), target, stream);
  }

  // required string property = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property().data(), static_cast<int>(this->_internal_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandTransitionSetValueArchive.property");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_property(), target);
  }

  // repeated string effects = 4;
  for (int i = 0, n = this->_internal_effects_size(); i < n; i++) {
    const auto& s = this->_internal_effects(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandTransitionSetValueArchive.effects");
    target = stream->WriteString(4, s, target);
  }

  // repeated string unused = 5;
  for (int i = 0, n = this->_internal_unused_size(); i < n; i++) {
    const auto& s = this->_internal_unused(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandTransitionSetValueArchive.unused");
    target = stream->WriteString(5, s, target);
  }

  // repeated string unused2 = 6;
  for (int i = 0, n = this->_internal_unused2_size(); i < n; i++) {
    const auto& s = this->_internal_unused2(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandTransitionSetValueArchive.unused2");
    target = stream->WriteString(6, s, target);
  }

  // repeated string unused3 = 7;
  for (int i = 0, n = this->_internal_unused3_size(); i < n; i++) {
    const auto& s = this->_internal_unused3(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandTransitionSetValueArchive.unused3");
    target = stream->WriteString(7, s, target);
  }

  // repeated double durations = 8;
  for (int i = 0, n = this->_internal_durations_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_durations(i), target);
  }

  // repeated uint32 directions = 9;
  for (int i = 0, n = this->_internal_directions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_directions(i), target);
  }

  // repeated bool isAutomatics = 10;
  for (int i = 0, n = this->_internal_isautomatics_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_isautomatics(i), target);
  }

  // repeated double delays = 11;
  for (int i = 0, n = this->_internal_delays_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_delays(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandTransitionSetValueArchive)
  return target;
}

size_t CommandTransitionSetValueArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandTransitionSetValueArchive)
  size_t total_size = 0;

  if (_internal_has_property()) {
    // required string property = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slidenode()) {
    // required .TSP.Reference slideNode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slidenode_);
  }

  return total_size;
}
size_t CommandTransitionSetValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandTransitionSetValueArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string property = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());

    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference slideNode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slidenode_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string effects = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.effects_.size());
  for (int i = 0, n = _impl_.effects_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.effects_.Get(i));
  }

  // repeated string unused = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.unused_.size());
  for (int i = 0, n = _impl_.unused_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.unused_.Get(i));
  }

  // repeated string unused2 = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.unused2_.size());
  for (int i = 0, n = _impl_.unused2_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.unused2_.Get(i));
  }

  // repeated string unused3 = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.unused3_.size());
  for (int i = 0, n = _impl_.unused3_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.unused3_.Get(i));
  }

  // repeated double durations = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_durations_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_durations_size());
    total_size += data_size;
  }

  // repeated uint32 directions = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.directions_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_directions_size());
    total_size += data_size;
  }

  // repeated bool isAutomatics = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_isautomatics_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_isautomatics_size());
    total_size += data_size;
  }

  // repeated double delays = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_delays_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_delays_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandTransitionSetValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandTransitionSetValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandTransitionSetValueArchive::GetClassData() const { return &_class_data_; }


void CommandTransitionSetValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandTransitionSetValueArchive*>(&to_msg);
  auto& from = static_cast<const CommandTransitionSetValueArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandTransitionSetValueArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.effects_.MergeFrom(from._impl_.effects_);
  _this->_impl_.unused_.MergeFrom(from._impl_.unused_);
  _this->_impl_.unused2_.MergeFrom(from._impl_.unused2_);
  _this->_impl_.unused3_.MergeFrom(from._impl_.unused3_);
  _this->_impl_.durations_.MergeFrom(from._impl_.durations_);
  _this->_impl_.directions_.MergeFrom(from._impl_.directions_);
  _this->_impl_.isautomatics_.MergeFrom(from._impl_.isautomatics_);
  _this->_impl_.delays_.MergeFrom(from._impl_.delays_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_property(from._internal_property());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_slidenode()->::TSP::Reference::MergeFrom(
          from._internal_slidenode());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandTransitionSetValueArchive::CopyFrom(const CommandTransitionSetValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandTransitionSetValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandTransitionSetValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slidenode()) {
    if (!_impl_.slidenode_->IsInitialized()) return false;
  }
  return true;
}

void CommandTransitionSetValueArchive::InternalSwap(CommandTransitionSetValueArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.effects_.InternalSwap(&other->_impl_.effects_);
  _impl_.unused_.InternalSwap(&other->_impl_.unused_);
  _impl_.unused2_.InternalSwap(&other->_impl_.unused2_);
  _impl_.unused3_.InternalSwap(&other->_impl_.unused3_);
  _impl_.durations_.InternalSwap(&other->_impl_.durations_);
  _impl_.directions_.InternalSwap(&other->_impl_.directions_);
  _impl_.isautomatics_.InternalSwap(&other->_impl_.isautomatics_);
  _impl_.delays_.InternalSwap(&other->_impl_.delays_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.property_, lhs_arena,
      &other->_impl_.property_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandTransitionSetValueArchive, _impl_.slidenode_)
      + sizeof(CommandTransitionSetValueArchive::_impl_.slidenode_)
      - PROTOBUF_FIELD_OFFSET(CommandTransitionSetValueArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandTransitionSetValueArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[34]);
}

// ===================================================================

class CommandShowSetSlideNumberVisibilityArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowSetSlideNumberVisibilityArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowSetSlideNumberVisibilityArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& show(const CommandShowSetSlideNumberVisibilityArchive* msg);
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_slidenumbersvisible(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& providerundo(const CommandShowSetSlideNumberVisibilityArchive* msg);
  static void set_has_providerundo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000b) ^ 0x0000000b) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowSetSlideNumberVisibilityArchive::_Internal::super(const CommandShowSetSlideNumberVisibilityArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandShowSetSlideNumberVisibilityArchive::_Internal::show(const CommandShowSetSlideNumberVisibilityArchive* msg) {
  return *msg->_impl_.show_;
}
const ::TSP::Reference&
CommandShowSetSlideNumberVisibilityArchive::_Internal::providerundo(const CommandShowSetSlideNumberVisibilityArchive* msg) {
  return *msg->_impl_.providerundo_;
}
void CommandShowSetSlideNumberVisibilityArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandShowSetSlideNumberVisibilityArchive::clear_show() {
  if (_impl_.show_ != nullptr) _impl_.show_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandShowSetSlideNumberVisibilityArchive::clear_providerundo() {
  if (_impl_.providerundo_ != nullptr) _impl_.providerundo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandShowSetSlideNumberVisibilityArchive::CommandShowSetSlideNumberVisibilityArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowSetSlideNumberVisibilityArchive)
}
CommandShowSetSlideNumberVisibilityArchive::CommandShowSetSlideNumberVisibilityArchive(const CommandShowSetSlideNumberVisibilityArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandShowSetSlideNumberVisibilityArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.providerundo_){nullptr}
    , decltype(_impl_.slidenumbersvisible_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_show()) {
    _this->_impl_.show_ = new ::TSP::Reference(*from._impl_.show_);
  }
  if (from._internal_has_providerundo()) {
    _this->_impl_.providerundo_ = new ::TSP::Reference(*from._impl_.providerundo_);
  }
  _this->_impl_.slidenumbersvisible_ = from._impl_.slidenumbersvisible_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowSetSlideNumberVisibilityArchive)
}

inline void CommandShowSetSlideNumberVisibilityArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.providerundo_){nullptr}
    , decltype(_impl_.slidenumbersvisible_){false}
  };
}

CommandShowSetSlideNumberVisibilityArchive::~CommandShowSetSlideNumberVisibilityArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowSetSlideNumberVisibilityArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandShowSetSlideNumberVisibilityArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.show_;
  if (this != internal_default_instance()) delete _impl_.providerundo_;
}

void CommandShowSetSlideNumberVisibilityArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandShowSetSlideNumberVisibilityArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowSetSlideNumberVisibilityArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.show_ != nullptr);
      _impl_.show_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.providerundo_ != nullptr);
      _impl_.providerundo_->Clear();
    }
  }
  _impl_.slidenumbersvisible_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowSetSlideNumberVisibilityArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_show(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool slideNumbersVisible = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_slidenumbersvisible(&has_bits);
          _impl_.slidenumbersvisible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference providerUndo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_providerundo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandShowSetSlideNumberVisibilityArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowSetSlideNumberVisibilityArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference show = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::show(this),
        _Internal::show(this).GetCachedSize(), target, stream);
  }

  // required bool slideNumbersVisible = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_slidenumbersvisible(), target);
  }

  // optional .TSP.Reference providerUndo = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::providerundo(this),
        _Internal::providerundo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowSetSlideNumberVisibilityArchive)
  return target;
}

size_t CommandShowSetSlideNumberVisibilityArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandShowSetSlideNumberVisibilityArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_show()) {
    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);
  }

  if (_internal_has_slidenumbersvisible()) {
    // required bool slideNumbersVisible = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandShowSetSlideNumberVisibilityArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowSetSlideNumberVisibilityArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);

    // required bool slideNumbersVisible = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference providerUndo = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.providerundo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowSetSlideNumberVisibilityArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandShowSetSlideNumberVisibilityArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowSetSlideNumberVisibilityArchive::GetClassData() const { return &_class_data_; }


void CommandShowSetSlideNumberVisibilityArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandShowSetSlideNumberVisibilityArchive*>(&to_msg);
  auto& from = static_cast<const CommandShowSetSlideNumberVisibilityArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowSetSlideNumberVisibilityArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_show()->::TSP::Reference::MergeFrom(
          from._internal_show());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_providerundo()->::TSP::Reference::MergeFrom(
          from._internal_providerundo());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.slidenumbersvisible_ = from._impl_.slidenumbersvisible_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowSetSlideNumberVisibilityArchive::CopyFrom(const CommandShowSetSlideNumberVisibilityArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowSetSlideNumberVisibilityArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowSetSlideNumberVisibilityArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_show()) {
    if (!_impl_.show_->IsInitialized()) return false;
  }
  if (_internal_has_providerundo()) {
    if (!_impl_.providerundo_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowSetSlideNumberVisibilityArchive::InternalSwap(CommandShowSetSlideNumberVisibilityArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowSetSlideNumberVisibilityArchive, _impl_.slidenumbersvisible_)
      + sizeof(CommandShowSetSlideNumberVisibilityArchive::_impl_.slidenumbersvisible_)
      - PROTOBUF_FIELD_OFFSET(CommandShowSetSlideNumberVisibilityArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowSetSlideNumberVisibilityArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[35]);
}

// ===================================================================

class CommandMasterRescaleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandMasterRescaleArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandMasterRescaleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& master(const CommandMasterRescaleArchive* msg);
  static void set_has_master(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandMasterRescaleArchive::_Internal::super(const CommandMasterRescaleArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandMasterRescaleArchive::_Internal::master(const CommandMasterRescaleArchive* msg) {
  return *msg->_impl_.master_;
}
void CommandMasterRescaleArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandMasterRescaleArchive::clear_master() {
  if (_impl_.master_ != nullptr) _impl_.master_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandMasterRescaleArchive::CommandMasterRescaleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandMasterRescaleArchive)
}
CommandMasterRescaleArchive::CommandMasterRescaleArchive(const CommandMasterRescaleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandMasterRescaleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.master_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_master()) {
    _this->_impl_.master_ = new ::TSP::Reference(*from._impl_.master_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandMasterRescaleArchive)
}

inline void CommandMasterRescaleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.master_){nullptr}
  };
}

CommandMasterRescaleArchive::~CommandMasterRescaleArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandMasterRescaleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandMasterRescaleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.master_;
}

void CommandMasterRescaleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandMasterRescaleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandMasterRescaleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.master_ != nullptr);
      _impl_.master_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandMasterRescaleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference master = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_master(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandMasterRescaleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandMasterRescaleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference master = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::master(this),
        _Internal::master(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandMasterRescaleArchive)
  return target;
}

size_t CommandMasterRescaleArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandMasterRescaleArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_master()) {
    // required .TSP.Reference master = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.master_);
  }

  return total_size;
}
size_t CommandMasterRescaleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandMasterRescaleArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference master = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.master_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandMasterRescaleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandMasterRescaleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandMasterRescaleArchive::GetClassData() const { return &_class_data_; }


void CommandMasterRescaleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandMasterRescaleArchive*>(&to_msg);
  auto& from = static_cast<const CommandMasterRescaleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandMasterRescaleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_master()->::TSP::Reference::MergeFrom(
          from._internal_master());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandMasterRescaleArchive::CopyFrom(const CommandMasterRescaleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandMasterRescaleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMasterRescaleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_master()) {
    if (!_impl_.master_->IsInitialized()) return false;
  }
  return true;
}

void CommandMasterRescaleArchive::InternalSwap(CommandMasterRescaleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandMasterRescaleArchive, _impl_.master_)
      + sizeof(CommandMasterRescaleArchive::_impl_.master_)
      - PROTOBUF_FIELD_OFFSET(CommandMasterRescaleArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandMasterRescaleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[36]);
}

// ===================================================================

class CommandMasterSetThumbnailTextArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandMasterSetThumbnailTextArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandMasterSetThumbnailTextArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& master(const CommandMasterSetThumbnailTextArchive* msg);
  static void set_has_master(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_body(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_new_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_old_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001c) ^ 0x0000001c) != 0;
  }
};

const ::TSK::CommandArchive&
CommandMasterSetThumbnailTextArchive::_Internal::super(const CommandMasterSetThumbnailTextArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandMasterSetThumbnailTextArchive::_Internal::master(const CommandMasterSetThumbnailTextArchive* msg) {
  return *msg->_impl_.master_;
}
void CommandMasterSetThumbnailTextArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandMasterSetThumbnailTextArchive::clear_master() {
  if (_impl_.master_ != nullptr) _impl_.master_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandMasterSetThumbnailTextArchive::CommandMasterSetThumbnailTextArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandMasterSetThumbnailTextArchive)
}
CommandMasterSetThumbnailTextArchive::CommandMasterSetThumbnailTextArchive(const CommandMasterSetThumbnailTextArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandMasterSetThumbnailTextArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.new_text_){}
    , decltype(_impl_.old_text_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.master_){nullptr}
    , decltype(_impl_.is_body_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.new_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_new_text()) {
    _this->_impl_.new_text_.Set(from._internal_new_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.old_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_old_text()) {
    _this->_impl_.old_text_.Set(from._internal_old_text(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_master()) {
    _this->_impl_.master_ = new ::TSP::Reference(*from._impl_.master_);
  }
  _this->_impl_.is_body_ = from._impl_.is_body_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandMasterSetThumbnailTextArchive)
}

inline void CommandMasterSetThumbnailTextArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.new_text_){}
    , decltype(_impl_.old_text_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.master_){nullptr}
    , decltype(_impl_.is_body_){false}
  };
  _impl_.new_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.old_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandMasterSetThumbnailTextArchive::~CommandMasterSetThumbnailTextArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandMasterSetThumbnailTextArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandMasterSetThumbnailTextArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.new_text_.Destroy();
  _impl_.old_text_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.master_;
}

void CommandMasterSetThumbnailTextArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandMasterSetThumbnailTextArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandMasterSetThumbnailTextArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.new_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.old_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.master_ != nullptr);
      _impl_.master_->Clear();
    }
  }
  _impl_.is_body_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandMasterSetThumbnailTextArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference master = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_master(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool is_body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_body(&has_bits);
          _impl_.is_body_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string new_text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_new_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.CommandMasterSetThumbnailTextArchive.new_text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string old_text = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_old_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.CommandMasterSetThumbnailTextArchive.old_text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandMasterSetThumbnailTextArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandMasterSetThumbnailTextArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference master = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::master(this),
        _Internal::master(this).GetCachedSize(), target, stream);
  }

  // required bool is_body = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_body(), target);
  }

  // optional string new_text = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_new_text().data(), static_cast<int>(this->_internal_new_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandMasterSetThumbnailTextArchive.new_text");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_new_text(), target);
  }

  // optional string old_text = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_old_text().data(), static_cast<int>(this->_internal_old_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandMasterSetThumbnailTextArchive.old_text");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_old_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandMasterSetThumbnailTextArchive)
  return target;
}

size_t CommandMasterSetThumbnailTextArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandMasterSetThumbnailTextArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_master()) {
    // required .TSP.Reference master = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.master_);
  }

  if (_internal_has_is_body()) {
    // required bool is_body = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandMasterSetThumbnailTextArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandMasterSetThumbnailTextArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference master = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.master_);

    // required bool is_body = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string new_text = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_new_text());
    }

    // optional string old_text = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_old_text());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandMasterSetThumbnailTextArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandMasterSetThumbnailTextArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandMasterSetThumbnailTextArchive::GetClassData() const { return &_class_data_; }


void CommandMasterSetThumbnailTextArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandMasterSetThumbnailTextArchive*>(&to_msg);
  auto& from = static_cast<const CommandMasterSetThumbnailTextArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandMasterSetThumbnailTextArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_new_text(from._internal_new_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_old_text(from._internal_old_text());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_master()->::TSP::Reference::MergeFrom(
          from._internal_master());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_body_ = from._impl_.is_body_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandMasterSetThumbnailTextArchive::CopyFrom(const CommandMasterSetThumbnailTextArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandMasterSetThumbnailTextArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMasterSetThumbnailTextArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_master()) {
    if (!_impl_.master_->IsInitialized()) return false;
  }
  return true;
}

void CommandMasterSetThumbnailTextArchive::InternalSwap(CommandMasterSetThumbnailTextArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.new_text_, lhs_arena,
      &other->_impl_.new_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.old_text_, lhs_arena,
      &other->_impl_.old_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandMasterSetThumbnailTextArchive, _impl_.is_body_)
      + sizeof(CommandMasterSetThumbnailTextArchive::_impl_.is_body_)
      - PROTOBUF_FIELD_OFFSET(CommandMasterSetThumbnailTextArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandMasterSetThumbnailTextArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[37]);
}

// ===================================================================

class CommandMasterSetBodyStylesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandMasterSetBodyStylesArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandMasterSetBodyStylesArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& master(const CommandMasterSetBodyStylesArchive* msg);
  static void set_has_master(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandMasterSetBodyStylesArchive::_Internal::super(const CommandMasterSetBodyStylesArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandMasterSetBodyStylesArchive::_Internal::master(const CommandMasterSetBodyStylesArchive* msg) {
  return *msg->_impl_.master_;
}
void CommandMasterSetBodyStylesArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandMasterSetBodyStylesArchive::clear_master() {
  if (_impl_.master_ != nullptr) _impl_.master_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandMasterSetBodyStylesArchive::clear_new_paragraph_styles() {
  _impl_.new_paragraph_styles_.Clear();
}
void CommandMasterSetBodyStylesArchive::clear_new_list_styles() {
  _impl_.new_list_styles_.Clear();
}
void CommandMasterSetBodyStylesArchive::clear_old_paragraph_styles() {
  _impl_.old_paragraph_styles_.Clear();
}
void CommandMasterSetBodyStylesArchive::clear_old_list_styles() {
  _impl_.old_list_styles_.Clear();
}
CommandMasterSetBodyStylesArchive::CommandMasterSetBodyStylesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandMasterSetBodyStylesArchive)
}
CommandMasterSetBodyStylesArchive::CommandMasterSetBodyStylesArchive(const CommandMasterSetBodyStylesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandMasterSetBodyStylesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.new_paragraph_styles_){from._impl_.new_paragraph_styles_}
    , decltype(_impl_.new_list_styles_){from._impl_.new_list_styles_}
    , decltype(_impl_.old_paragraph_styles_){from._impl_.old_paragraph_styles_}
    , decltype(_impl_.old_list_styles_){from._impl_.old_list_styles_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.master_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_master()) {
    _this->_impl_.master_ = new ::TSP::Reference(*from._impl_.master_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandMasterSetBodyStylesArchive)
}

inline void CommandMasterSetBodyStylesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.new_paragraph_styles_){arena}
    , decltype(_impl_.new_list_styles_){arena}
    , decltype(_impl_.old_paragraph_styles_){arena}
    , decltype(_impl_.old_list_styles_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.master_){nullptr}
  };
}

CommandMasterSetBodyStylesArchive::~CommandMasterSetBodyStylesArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandMasterSetBodyStylesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandMasterSetBodyStylesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.new_paragraph_styles_.~RepeatedPtrField();
  _impl_.new_list_styles_.~RepeatedPtrField();
  _impl_.old_paragraph_styles_.~RepeatedPtrField();
  _impl_.old_list_styles_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.master_;
}

void CommandMasterSetBodyStylesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandMasterSetBodyStylesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandMasterSetBodyStylesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.new_paragraph_styles_.Clear();
  _impl_.new_list_styles_.Clear();
  _impl_.old_paragraph_styles_.Clear();
  _impl_.old_list_styles_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.master_ != nullptr);
      _impl_.master_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandMasterSetBodyStylesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference master = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_master(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference new_paragraph_styles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_new_paragraph_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference new_list_styles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_new_list_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_paragraph_styles = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_paragraph_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_list_styles = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_list_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandMasterSetBodyStylesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandMasterSetBodyStylesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference master = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::master(this),
        _Internal::master(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference new_paragraph_styles = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_new_paragraph_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_new_paragraph_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference new_list_styles = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_new_list_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_new_list_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference old_paragraph_styles = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_paragraph_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_paragraph_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference old_list_styles = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_list_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_list_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandMasterSetBodyStylesArchive)
  return target;
}

size_t CommandMasterSetBodyStylesArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandMasterSetBodyStylesArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_master()) {
    // required .TSP.Reference master = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.master_);
  }

  return total_size;
}
size_t CommandMasterSetBodyStylesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandMasterSetBodyStylesArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference master = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.master_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference new_paragraph_styles = 3;
  total_size += 1UL * this->_internal_new_paragraph_styles_size();
  for (const auto& msg : this->_impl_.new_paragraph_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference new_list_styles = 4;
  total_size += 1UL * this->_internal_new_list_styles_size();
  for (const auto& msg : this->_impl_.new_list_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_paragraph_styles = 5;
  total_size += 1UL * this->_internal_old_paragraph_styles_size();
  for (const auto& msg : this->_impl_.old_paragraph_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_list_styles = 6;
  total_size += 1UL * this->_internal_old_list_styles_size();
  for (const auto& msg : this->_impl_.old_list_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandMasterSetBodyStylesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandMasterSetBodyStylesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandMasterSetBodyStylesArchive::GetClassData() const { return &_class_data_; }


void CommandMasterSetBodyStylesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandMasterSetBodyStylesArchive*>(&to_msg);
  auto& from = static_cast<const CommandMasterSetBodyStylesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandMasterSetBodyStylesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.new_paragraph_styles_.MergeFrom(from._impl_.new_paragraph_styles_);
  _this->_impl_.new_list_styles_.MergeFrom(from._impl_.new_list_styles_);
  _this->_impl_.old_paragraph_styles_.MergeFrom(from._impl_.old_paragraph_styles_);
  _this->_impl_.old_list_styles_.MergeFrom(from._impl_.old_list_styles_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_master()->::TSP::Reference::MergeFrom(
          from._internal_master());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandMasterSetBodyStylesArchive::CopyFrom(const CommandMasterSetBodyStylesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandMasterSetBodyStylesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMasterSetBodyStylesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.new_paragraph_styles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.new_list_styles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.old_paragraph_styles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.old_list_styles_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_master()) {
    if (!_impl_.master_->IsInitialized()) return false;
  }
  return true;
}

void CommandMasterSetBodyStylesArchive::InternalSwap(CommandMasterSetBodyStylesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.new_paragraph_styles_.InternalSwap(&other->_impl_.new_paragraph_styles_);
  _impl_.new_list_styles_.InternalSwap(&other->_impl_.new_list_styles_);
  _impl_.old_paragraph_styles_.InternalSwap(&other->_impl_.old_paragraph_styles_);
  _impl_.old_list_styles_.InternalSwap(&other->_impl_.old_list_styles_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandMasterSetBodyStylesArchive, _impl_.master_)
      + sizeof(CommandMasterSetBodyStylesArchive::_impl_.master_)
      - PROTOBUF_FIELD_OFFSET(CommandMasterSetBodyStylesArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandMasterSetBodyStylesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[38]);
}

// ===================================================================

class CommandSlideApplyThemeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideApplyThemeArchive>()._impl_._has_bits_);
  static const ::TSS::ApplyThemeChildCommandArchive& super(const CommandSlideApplyThemeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::KN::MasterChangeBlobArchive& blob(const CommandSlideApplyThemeArchive* msg);
  static void set_has_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSS::ApplyThemeChildCommandArchive&
CommandSlideApplyThemeArchive::_Internal::super(const CommandSlideApplyThemeArchive* msg) {
  return *msg->_impl_.super_;
}
const ::KN::MasterChangeBlobArchive&
CommandSlideApplyThemeArchive::_Internal::blob(const CommandSlideApplyThemeArchive* msg) {
  return *msg->_impl_.blob_;
}
void CommandSlideApplyThemeArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlideApplyThemeArchive::clear_blob() {
  if (_impl_.blob_ != nullptr) _impl_.blob_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandSlideApplyThemeArchive::CommandSlideApplyThemeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideApplyThemeArchive)
}
CommandSlideApplyThemeArchive::CommandSlideApplyThemeArchive(const CommandSlideApplyThemeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideApplyThemeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.blob_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSS::ApplyThemeChildCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_blob()) {
    _this->_impl_.blob_ = new ::KN::MasterChangeBlobArchive(*from._impl_.blob_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideApplyThemeArchive)
}

inline void CommandSlideApplyThemeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.blob_){nullptr}
  };
}

CommandSlideApplyThemeArchive::~CommandSlideApplyThemeArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideApplyThemeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideApplyThemeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.blob_;
}

void CommandSlideApplyThemeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideApplyThemeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideApplyThemeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.blob_ != nullptr);
      _impl_.blob_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideApplyThemeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.ApplyThemeChildCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .KN.MasterChangeBlobArchive blob = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_blob(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideApplyThemeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideApplyThemeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSS.ApplyThemeChildCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .KN.MasterChangeBlobArchive blob = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::blob(this),
        _Internal::blob(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideApplyThemeArchive)
  return target;
}

size_t CommandSlideApplyThemeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideApplyThemeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSS.ApplyThemeChildCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_blob()) {
    // required .KN.MasterChangeBlobArchive blob = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.blob_);
  }

  return total_size;
}
size_t CommandSlideApplyThemeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideApplyThemeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSS.ApplyThemeChildCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .KN.MasterChangeBlobArchive blob = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.blob_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideApplyThemeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideApplyThemeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideApplyThemeArchive::GetClassData() const { return &_class_data_; }


void CommandSlideApplyThemeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideApplyThemeArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideApplyThemeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideApplyThemeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSS::ApplyThemeChildCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_blob()->::KN::MasterChangeBlobArchive::MergeFrom(
          from._internal_blob());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideApplyThemeArchive::CopyFrom(const CommandSlideApplyThemeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideApplyThemeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideApplyThemeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_blob()) {
    if (!_impl_.blob_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideApplyThemeArchive::InternalSwap(CommandSlideApplyThemeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideApplyThemeArchive, _impl_.blob_)
      + sizeof(CommandSlideApplyThemeArchive::_impl_.blob_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideApplyThemeArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideApplyThemeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[39]);
}

// ===================================================================

class CommandChangeMasterSlideArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandChangeMasterSlideArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandChangeMasterSlideArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& slide(const CommandChangeMasterSlideArchive* msg);
  static void set_has_slide(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& master(const CommandChangeMasterSlideArchive* msg);
  static void set_has_master(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& placeholder_commands(const CommandChangeMasterSlideArchive* msg);
  static void set_has_placeholder_commands(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSK::CommandArchive&
CommandChangeMasterSlideArchive::_Internal::super(const CommandChangeMasterSlideArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandChangeMasterSlideArchive::_Internal::slide(const CommandChangeMasterSlideArchive* msg) {
  return *msg->_impl_.slide_;
}
const ::TSP::Reference&
CommandChangeMasterSlideArchive::_Internal::master(const CommandChangeMasterSlideArchive* msg) {
  return *msg->_impl_.master_;
}
const ::TSP::Reference&
CommandChangeMasterSlideArchive::_Internal::placeholder_commands(const CommandChangeMasterSlideArchive* msg) {
  return *msg->_impl_.placeholder_commands_;
}
void CommandChangeMasterSlideArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandChangeMasterSlideArchive::clear_slide() {
  if (_impl_.slide_ != nullptr) _impl_.slide_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandChangeMasterSlideArchive::clear_master() {
  if (_impl_.master_ != nullptr) _impl_.master_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandChangeMasterSlideArchive::clear_placeholder_commands() {
  if (_impl_.placeholder_commands_ != nullptr) _impl_.placeholder_commands_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandChangeMasterSlideArchive::CommandChangeMasterSlideArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandChangeMasterSlideArchive)
}
CommandChangeMasterSlideArchive::CommandChangeMasterSlideArchive(const CommandChangeMasterSlideArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandChangeMasterSlideArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_){nullptr}
    , decltype(_impl_.master_){nullptr}
    , decltype(_impl_.placeholder_commands_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slide()) {
    _this->_impl_.slide_ = new ::TSP::Reference(*from._impl_.slide_);
  }
  if (from._internal_has_master()) {
    _this->_impl_.master_ = new ::TSP::Reference(*from._impl_.master_);
  }
  if (from._internal_has_placeholder_commands()) {
    _this->_impl_.placeholder_commands_ = new ::TSP::Reference(*from._impl_.placeholder_commands_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandChangeMasterSlideArchive)
}

inline void CommandChangeMasterSlideArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_){nullptr}
    , decltype(_impl_.master_){nullptr}
    , decltype(_impl_.placeholder_commands_){nullptr}
  };
}

CommandChangeMasterSlideArchive::~CommandChangeMasterSlideArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandChangeMasterSlideArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandChangeMasterSlideArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slide_;
  if (this != internal_default_instance()) delete _impl_.master_;
  if (this != internal_default_instance()) delete _impl_.placeholder_commands_;
}

void CommandChangeMasterSlideArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandChangeMasterSlideArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandChangeMasterSlideArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slide_ != nullptr);
      _impl_.slide_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.master_ != nullptr);
      _impl_.master_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.placeholder_commands_ != nullptr);
      _impl_.placeholder_commands_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandChangeMasterSlideArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference slide = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference master = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_master(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference placeholder_commands = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_placeholder_commands(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandChangeMasterSlideArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandChangeMasterSlideArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference slide = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slide(this),
        _Internal::slide(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference master = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::master(this),
        _Internal::master(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference placeholder_commands = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::placeholder_commands(this),
        _Internal::placeholder_commands(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandChangeMasterSlideArchive)
  return target;
}

size_t CommandChangeMasterSlideArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandChangeMasterSlideArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slide()) {
    // required .TSP.Reference slide = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_);
  }

  if (_internal_has_master()) {
    // required .TSP.Reference master = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.master_);
  }

  if (_internal_has_placeholder_commands()) {
    // required .TSP.Reference placeholder_commands = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.placeholder_commands_);
  }

  return total_size;
}
size_t CommandChangeMasterSlideArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandChangeMasterSlideArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference slide = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_);

    // required .TSP.Reference master = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.master_);

    // required .TSP.Reference placeholder_commands = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.placeholder_commands_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandChangeMasterSlideArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandChangeMasterSlideArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandChangeMasterSlideArchive::GetClassData() const { return &_class_data_; }


void CommandChangeMasterSlideArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandChangeMasterSlideArchive*>(&to_msg);
  auto& from = static_cast<const CommandChangeMasterSlideArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandChangeMasterSlideArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slide()->::TSP::Reference::MergeFrom(
          from._internal_slide());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_master()->::TSP::Reference::MergeFrom(
          from._internal_master());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_placeholder_commands()->::TSP::Reference::MergeFrom(
          from._internal_placeholder_commands());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandChangeMasterSlideArchive::CopyFrom(const CommandChangeMasterSlideArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandChangeMasterSlideArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandChangeMasterSlideArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slide()) {
    if (!_impl_.slide_->IsInitialized()) return false;
  }
  if (_internal_has_master()) {
    if (!_impl_.master_->IsInitialized()) return false;
  }
  if (_internal_has_placeholder_commands()) {
    if (!_impl_.placeholder_commands_->IsInitialized()) return false;
  }
  return true;
}

void CommandChangeMasterSlideArchive::InternalSwap(CommandChangeMasterSlideArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandChangeMasterSlideArchive, _impl_.placeholder_commands_)
      + sizeof(CommandChangeMasterSlideArchive::_impl_.placeholder_commands_)
      - PROTOBUF_FIELD_OFFSET(CommandChangeMasterSlideArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandChangeMasterSlideArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[40]);
}

// ===================================================================

class CommandSlidePrimitiveSetMasterArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlidePrimitiveSetMasterArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlidePrimitiveSetMasterArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& slide(const CommandSlidePrimitiveSetMasterArchive* msg);
  static void set_has_slide(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& master(const CommandSlidePrimitiveSetMasterArchive* msg);
  static void set_has_master(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& old_master(const CommandSlidePrimitiveSetMasterArchive* msg);
  static void set_has_old_master(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlidePrimitiveSetMasterArchive::_Internal::super(const CommandSlidePrimitiveSetMasterArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSlidePrimitiveSetMasterArchive::_Internal::slide(const CommandSlidePrimitiveSetMasterArchive* msg) {
  return *msg->_impl_.slide_;
}
const ::TSP::Reference&
CommandSlidePrimitiveSetMasterArchive::_Internal::master(const CommandSlidePrimitiveSetMasterArchive* msg) {
  return *msg->_impl_.master_;
}
const ::TSP::Reference&
CommandSlidePrimitiveSetMasterArchive::_Internal::old_master(const CommandSlidePrimitiveSetMasterArchive* msg) {
  return *msg->_impl_.old_master_;
}
void CommandSlidePrimitiveSetMasterArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlidePrimitiveSetMasterArchive::clear_slide() {
  if (_impl_.slide_ != nullptr) _impl_.slide_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSlidePrimitiveSetMasterArchive::clear_master() {
  if (_impl_.master_ != nullptr) _impl_.master_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandSlidePrimitiveSetMasterArchive::clear_old_master() {
  if (_impl_.old_master_ != nullptr) _impl_.old_master_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandSlidePrimitiveSetMasterArchive::CommandSlidePrimitiveSetMasterArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlidePrimitiveSetMasterArchive)
}
CommandSlidePrimitiveSetMasterArchive::CommandSlidePrimitiveSetMasterArchive(const CommandSlidePrimitiveSetMasterArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlidePrimitiveSetMasterArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_){nullptr}
    , decltype(_impl_.master_){nullptr}
    , decltype(_impl_.old_master_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_slide()) {
    _this->_impl_.slide_ = new ::TSP::Reference(*from._impl_.slide_);
  }
  if (from._internal_has_master()) {
    _this->_impl_.master_ = new ::TSP::Reference(*from._impl_.master_);
  }
  if (from._internal_has_old_master()) {
    _this->_impl_.old_master_ = new ::TSP::Reference(*from._impl_.old_master_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlidePrimitiveSetMasterArchive)
}

inline void CommandSlidePrimitiveSetMasterArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_){nullptr}
    , decltype(_impl_.master_){nullptr}
    , decltype(_impl_.old_master_){nullptr}
  };
}

CommandSlidePrimitiveSetMasterArchive::~CommandSlidePrimitiveSetMasterArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlidePrimitiveSetMasterArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlidePrimitiveSetMasterArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slide_;
  if (this != internal_default_instance()) delete _impl_.master_;
  if (this != internal_default_instance()) delete _impl_.old_master_;
}

void CommandSlidePrimitiveSetMasterArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlidePrimitiveSetMasterArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlidePrimitiveSetMasterArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slide_ != nullptr);
      _impl_.slide_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.master_ != nullptr);
      _impl_.master_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.old_master_ != nullptr);
      _impl_.old_master_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlidePrimitiveSetMasterArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference slide = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference master = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_master(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference old_master = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_master(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlidePrimitiveSetMasterArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlidePrimitiveSetMasterArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference slide = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slide(this),
        _Internal::slide(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference master = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::master(this),
        _Internal::master(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference old_master = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::old_master(this),
        _Internal::old_master(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlidePrimitiveSetMasterArchive)
  return target;
}

size_t CommandSlidePrimitiveSetMasterArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlidePrimitiveSetMasterArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_slide()) {
    // required .TSP.Reference slide = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_);
  }

  if (_internal_has_master()) {
    // required .TSP.Reference master = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.master_);
  }

  if (_internal_has_old_master()) {
    // required .TSP.Reference old_master = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_master_);
  }

  return total_size;
}
size_t CommandSlidePrimitiveSetMasterArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlidePrimitiveSetMasterArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference slide = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_);

    // required .TSP.Reference master = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.master_);

    // required .TSP.Reference old_master = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_master_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlidePrimitiveSetMasterArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlidePrimitiveSetMasterArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlidePrimitiveSetMasterArchive::GetClassData() const { return &_class_data_; }


void CommandSlidePrimitiveSetMasterArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlidePrimitiveSetMasterArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlidePrimitiveSetMasterArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlidePrimitiveSetMasterArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slide()->::TSP::Reference::MergeFrom(
          from._internal_slide());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_master()->::TSP::Reference::MergeFrom(
          from._internal_master());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_old_master()->::TSP::Reference::MergeFrom(
          from._internal_old_master());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlidePrimitiveSetMasterArchive::CopyFrom(const CommandSlidePrimitiveSetMasterArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlidePrimitiveSetMasterArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlidePrimitiveSetMasterArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slide()) {
    if (!_impl_.slide_->IsInitialized()) return false;
  }
  if (_internal_has_master()) {
    if (!_impl_.master_->IsInitialized()) return false;
  }
  if (_internal_has_old_master()) {
    if (!_impl_.old_master_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlidePrimitiveSetMasterArchive::InternalSwap(CommandSlidePrimitiveSetMasterArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlidePrimitiveSetMasterArchive, _impl_.old_master_)
      + sizeof(CommandSlidePrimitiveSetMasterArchive::_impl_.old_master_)
      - PROTOBUF_FIELD_OFFSET(CommandSlidePrimitiveSetMasterArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlidePrimitiveSetMasterArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[41]);
}

// ===================================================================

class CommandSlideReapplyMasterArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideReapplyMasterArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideReapplyMasterArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& reapply_accumulated_command(const CommandSlideReapplyMasterArchive* msg);
  static void set_has_reapply_accumulated_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideReapplyMasterArchive::_Internal::super(const CommandSlideReapplyMasterArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSlideReapplyMasterArchive::_Internal::reapply_accumulated_command(const CommandSlideReapplyMasterArchive* msg) {
  return *msg->_impl_.reapply_accumulated_command_;
}
void CommandSlideReapplyMasterArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSlideReapplyMasterArchive::clear_reapply_accumulated_command() {
  if (_impl_.reapply_accumulated_command_ != nullptr) _impl_.reapply_accumulated_command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandSlideReapplyMasterArchive::CommandSlideReapplyMasterArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideReapplyMasterArchive)
}
CommandSlideReapplyMasterArchive::CommandSlideReapplyMasterArchive(const CommandSlideReapplyMasterArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSlideReapplyMasterArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.reapply_accumulated_command_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_reapply_accumulated_command()) {
    _this->_impl_.reapply_accumulated_command_ = new ::TSP::Reference(*from._impl_.reapply_accumulated_command_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideReapplyMasterArchive)
}

inline void CommandSlideReapplyMasterArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.reapply_accumulated_command_){nullptr}
  };
}

CommandSlideReapplyMasterArchive::~CommandSlideReapplyMasterArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideReapplyMasterArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSlideReapplyMasterArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.reapply_accumulated_command_;
}

void CommandSlideReapplyMasterArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSlideReapplyMasterArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideReapplyMasterArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.reapply_accumulated_command_ != nullptr);
      _impl_.reapply_accumulated_command_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideReapplyMasterArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference reapply_accumulated_command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reapply_accumulated_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSlideReapplyMasterArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideReapplyMasterArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference reapply_accumulated_command = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::reapply_accumulated_command(this),
        _Internal::reapply_accumulated_command(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideReapplyMasterArchive)
  return target;
}

size_t CommandSlideReapplyMasterArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideReapplyMasterArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_reapply_accumulated_command()) {
    // required .TSP.Reference reapply_accumulated_command = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reapply_accumulated_command_);
  }

  return total_size;
}
size_t CommandSlideReapplyMasterArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideReapplyMasterArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference reapply_accumulated_command = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reapply_accumulated_command_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideReapplyMasterArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSlideReapplyMasterArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideReapplyMasterArchive::GetClassData() const { return &_class_data_; }


void CommandSlideReapplyMasterArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSlideReapplyMasterArchive*>(&to_msg);
  auto& from = static_cast<const CommandSlideReapplyMasterArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideReapplyMasterArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_reapply_accumulated_command()->::TSP::Reference::MergeFrom(
          from._internal_reapply_accumulated_command());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideReapplyMasterArchive::CopyFrom(const CommandSlideReapplyMasterArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideReapplyMasterArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideReapplyMasterArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_reapply_accumulated_command()) {
    if (!_impl_.reapply_accumulated_command_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideReapplyMasterArchive::InternalSwap(CommandSlideReapplyMasterArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideReapplyMasterArchive, _impl_.reapply_accumulated_command_)
      + sizeof(CommandSlideReapplyMasterArchive::_impl_.reapply_accumulated_command_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideReapplyMasterArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideReapplyMasterArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[42]);
}

// ===================================================================

class CommandShowSetSoundtrack::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowSetSoundtrack>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowSetSoundtrack* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& show(const CommandShowSetSoundtrack* msg);
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& soundtrack(const CommandShowSetSoundtrack* msg);
  static void set_has_soundtrack(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& old_soundtrack(const CommandShowSetSoundtrack* msg);
  static void set_has_old_soundtrack(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowSetSoundtrack::_Internal::super(const CommandShowSetSoundtrack* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandShowSetSoundtrack::_Internal::show(const CommandShowSetSoundtrack* msg) {
  return *msg->_impl_.show_;
}
const ::TSP::Reference&
CommandShowSetSoundtrack::_Internal::soundtrack(const CommandShowSetSoundtrack* msg) {
  return *msg->_impl_.soundtrack_;
}
const ::TSP::Reference&
CommandShowSetSoundtrack::_Internal::old_soundtrack(const CommandShowSetSoundtrack* msg) {
  return *msg->_impl_.old_soundtrack_;
}
void CommandShowSetSoundtrack::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandShowSetSoundtrack::clear_show() {
  if (_impl_.show_ != nullptr) _impl_.show_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandShowSetSoundtrack::clear_soundtrack() {
  if (_impl_.soundtrack_ != nullptr) _impl_.soundtrack_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandShowSetSoundtrack::clear_old_soundtrack() {
  if (_impl_.old_soundtrack_ != nullptr) _impl_.old_soundtrack_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandShowSetSoundtrack::CommandShowSetSoundtrack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowSetSoundtrack)
}
CommandShowSetSoundtrack::CommandShowSetSoundtrack(const CommandShowSetSoundtrack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandShowSetSoundtrack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.soundtrack_){nullptr}
    , decltype(_impl_.old_soundtrack_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_show()) {
    _this->_impl_.show_ = new ::TSP::Reference(*from._impl_.show_);
  }
  if (from._internal_has_soundtrack()) {
    _this->_impl_.soundtrack_ = new ::TSP::Reference(*from._impl_.soundtrack_);
  }
  if (from._internal_has_old_soundtrack()) {
    _this->_impl_.old_soundtrack_ = new ::TSP::Reference(*from._impl_.old_soundtrack_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowSetSoundtrack)
}

inline void CommandShowSetSoundtrack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.soundtrack_){nullptr}
    , decltype(_impl_.old_soundtrack_){nullptr}
  };
}

CommandShowSetSoundtrack::~CommandShowSetSoundtrack() {
  // @@protoc_insertion_point(destructor:KN.CommandShowSetSoundtrack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandShowSetSoundtrack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.show_;
  if (this != internal_default_instance()) delete _impl_.soundtrack_;
  if (this != internal_default_instance()) delete _impl_.old_soundtrack_;
}

void CommandShowSetSoundtrack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandShowSetSoundtrack::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowSetSoundtrack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.show_ != nullptr);
      _impl_.show_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.soundtrack_ != nullptr);
      _impl_.soundtrack_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.old_soundtrack_ != nullptr);
      _impl_.old_soundtrack_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowSetSoundtrack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_show(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference soundtrack = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_soundtrack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference old_soundtrack = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_soundtrack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandShowSetSoundtrack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowSetSoundtrack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference show = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::show(this),
        _Internal::show(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference soundtrack = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::soundtrack(this),
        _Internal::soundtrack(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference old_soundtrack = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::old_soundtrack(this),
        _Internal::old_soundtrack(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowSetSoundtrack)
  return target;
}

size_t CommandShowSetSoundtrack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowSetSoundtrack)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSP.Reference show = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.show_);
    }

    // optional .TSP.Reference soundtrack = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.soundtrack_);
    }

    // optional .TSP.Reference old_soundtrack = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_soundtrack_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowSetSoundtrack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandShowSetSoundtrack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowSetSoundtrack::GetClassData() const { return &_class_data_; }


void CommandShowSetSoundtrack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandShowSetSoundtrack*>(&to_msg);
  auto& from = static_cast<const CommandShowSetSoundtrack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowSetSoundtrack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_show()->::TSP::Reference::MergeFrom(
          from._internal_show());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_soundtrack()->::TSP::Reference::MergeFrom(
          from._internal_soundtrack());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_old_soundtrack()->::TSP::Reference::MergeFrom(
          from._internal_old_soundtrack());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowSetSoundtrack::CopyFrom(const CommandShowSetSoundtrack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowSetSoundtrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowSetSoundtrack::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_show()) {
    if (!_impl_.show_->IsInitialized()) return false;
  }
  if (_internal_has_soundtrack()) {
    if (!_impl_.soundtrack_->IsInitialized()) return false;
  }
  if (_internal_has_old_soundtrack()) {
    if (!_impl_.old_soundtrack_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowSetSoundtrack::InternalSwap(CommandShowSetSoundtrack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowSetSoundtrack, _impl_.old_soundtrack_)
      + sizeof(CommandShowSetSoundtrack::_impl_.old_soundtrack_)
      - PROTOBUF_FIELD_OFFSET(CommandShowSetSoundtrack, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowSetSoundtrack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[43]);
}

// ===================================================================

class CommandSoundtrackSetValue_PropertyValue::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSoundtrackSetValue_PropertyValue>()._impl_._has_bits_);
  static void set_has_double_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mode_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void CommandSoundtrackSetValue_PropertyValue::clear_media_reference_values() {
  _impl_.media_reference_values_.Clear();
}
CommandSoundtrackSetValue_PropertyValue::CommandSoundtrackSetValue_PropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSoundtrackSetValue.PropertyValue)
}
CommandSoundtrackSetValue_PropertyValue::CommandSoundtrackSetValue_PropertyValue(const CommandSoundtrackSetValue_PropertyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSoundtrackSetValue_PropertyValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.media_reference_values_){from._impl_.media_reference_values_}
    , decltype(_impl_.double_value_){}
    , decltype(_impl_.mode_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.double_value_, &from._impl_.double_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mode_value_) -
    reinterpret_cast<char*>(&_impl_.double_value_)) + sizeof(_impl_.mode_value_));
  // @@protoc_insertion_point(copy_constructor:KN.CommandSoundtrackSetValue.PropertyValue)
}

inline void CommandSoundtrackSetValue_PropertyValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.media_reference_values_){arena}
    , decltype(_impl_.double_value_){0}
    , decltype(_impl_.mode_value_){0}
  };
}

CommandSoundtrackSetValue_PropertyValue::~CommandSoundtrackSetValue_PropertyValue() {
  // @@protoc_insertion_point(destructor:KN.CommandSoundtrackSetValue.PropertyValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSoundtrackSetValue_PropertyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.media_reference_values_.~RepeatedPtrField();
}

void CommandSoundtrackSetValue_PropertyValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSoundtrackSetValue_PropertyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSoundtrackSetValue.PropertyValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.media_reference_values_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.double_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mode_value_) -
        reinterpret_cast<char*>(&_impl_.double_value_)) + sizeof(_impl_.mode_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSoundtrackSetValue_PropertyValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double double_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_double_value(&has_bits);
          _impl_.double_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.Soundtrack.SoundtrackMode mode_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::Soundtrack_SoundtrackMode_IsValid(val))) {
            _internal_set_mode_value(static_cast<::KN::Soundtrack_SoundtrackMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.DataReference media_reference_values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_media_reference_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSoundtrackSetValue_PropertyValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSoundtrackSetValue.PropertyValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double double_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_double_value(), target);
  }

  // optional .KN.Soundtrack.SoundtrackMode mode_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mode_value(), target);
  }

  // repeated .TSP.DataReference media_reference_values = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_media_reference_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_media_reference_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSoundtrackSetValue.PropertyValue)
  return target;
}

size_t CommandSoundtrackSetValue_PropertyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSoundtrackSetValue.PropertyValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.DataReference media_reference_values = 3;
  total_size += 1UL * this->_internal_media_reference_values_size();
  for (const auto& msg : this->_impl_.media_reference_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double double_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .KN.Soundtrack.SoundtrackMode mode_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mode_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSoundtrackSetValue_PropertyValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSoundtrackSetValue_PropertyValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSoundtrackSetValue_PropertyValue::GetClassData() const { return &_class_data_; }


void CommandSoundtrackSetValue_PropertyValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSoundtrackSetValue_PropertyValue*>(&to_msg);
  auto& from = static_cast<const CommandSoundtrackSetValue_PropertyValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSoundtrackSetValue.PropertyValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.media_reference_values_.MergeFrom(from._impl_.media_reference_values_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.double_value_ = from._impl_.double_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mode_value_ = from._impl_.mode_value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSoundtrackSetValue_PropertyValue::CopyFrom(const CommandSoundtrackSetValue_PropertyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSoundtrackSetValue.PropertyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSoundtrackSetValue_PropertyValue::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.media_reference_values_))
    return false;
  return true;
}

void CommandSoundtrackSetValue_PropertyValue::InternalSwap(CommandSoundtrackSetValue_PropertyValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.media_reference_values_.InternalSwap(&other->_impl_.media_reference_values_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSoundtrackSetValue_PropertyValue, _impl_.mode_value_)
      + sizeof(CommandSoundtrackSetValue_PropertyValue::_impl_.mode_value_)
      - PROTOBUF_FIELD_OFFSET(CommandSoundtrackSetValue_PropertyValue, _impl_.double_value_)>(
          reinterpret_cast<char*>(&_impl_.double_value_),
          reinterpret_cast<char*>(&other->_impl_.double_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSoundtrackSetValue_PropertyValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[44]);
}

// ===================================================================

class CommandSoundtrackSetValue::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSoundtrackSetValue>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSoundtrackSetValue* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& soundtrack(const CommandSoundtrackSetValue* msg);
  static void set_has_soundtrack(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::KN::CommandSoundtrackSetValue_PropertyValue& old_value(const CommandSoundtrackSetValue* msg);
  static void set_has_old_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KN::CommandSoundtrackSetValue_PropertyValue& new_value(const CommandSoundtrackSetValue* msg);
  static void set_has_new_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSoundtrackSetValue::_Internal::super(const CommandSoundtrackSetValue* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSoundtrackSetValue::_Internal::soundtrack(const CommandSoundtrackSetValue* msg) {
  return *msg->_impl_.soundtrack_;
}
const ::KN::CommandSoundtrackSetValue_PropertyValue&
CommandSoundtrackSetValue::_Internal::old_value(const CommandSoundtrackSetValue* msg) {
  return *msg->_impl_.old_value_;
}
const ::KN::CommandSoundtrackSetValue_PropertyValue&
CommandSoundtrackSetValue::_Internal::new_value(const CommandSoundtrackSetValue* msg) {
  return *msg->_impl_.new_value_;
}
void CommandSoundtrackSetValue::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSoundtrackSetValue::clear_soundtrack() {
  if (_impl_.soundtrack_ != nullptr) _impl_.soundtrack_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandSoundtrackSetValue::CommandSoundtrackSetValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CommandSoundtrackSetValue)
}
CommandSoundtrackSetValue::CommandSoundtrackSetValue(const CommandSoundtrackSetValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSoundtrackSetValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.property_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.soundtrack_){nullptr}
    , decltype(_impl_.old_value_){nullptr}
    , decltype(_impl_.new_value_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_property()) {
    _this->_impl_.property_.Set(from._internal_property(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_soundtrack()) {
    _this->_impl_.soundtrack_ = new ::TSP::Reference(*from._impl_.soundtrack_);
  }
  if (from._internal_has_old_value()) {
    _this->_impl_.old_value_ = new ::KN::CommandSoundtrackSetValue_PropertyValue(*from._impl_.old_value_);
  }
  if (from._internal_has_new_value()) {
    _this->_impl_.new_value_ = new ::KN::CommandSoundtrackSetValue_PropertyValue(*from._impl_.new_value_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSoundtrackSetValue)
}

inline void CommandSoundtrackSetValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.property_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.soundtrack_){nullptr}
    , decltype(_impl_.old_value_){nullptr}
    , decltype(_impl_.new_value_){nullptr}
  };
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandSoundtrackSetValue::~CommandSoundtrackSetValue() {
  // @@protoc_insertion_point(destructor:KN.CommandSoundtrackSetValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSoundtrackSetValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.property_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.soundtrack_;
  if (this != internal_default_instance()) delete _impl_.old_value_;
  if (this != internal_default_instance()) delete _impl_.new_value_;
}

void CommandSoundtrackSetValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSoundtrackSetValue::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSoundtrackSetValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.property_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.soundtrack_ != nullptr);
      _impl_.soundtrack_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.old_value_ != nullptr);
      _impl_.old_value_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.new_value_ != nullptr);
      _impl_.new_value_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSoundtrackSetValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference soundtrack = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_soundtrack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string property = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_property();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.CommandSoundtrackSetValue.property");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .KN.CommandSoundtrackSetValue.PropertyValue old_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.CommandSoundtrackSetValue.PropertyValue new_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSoundtrackSetValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSoundtrackSetValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference soundtrack = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::soundtrack(this),
        _Internal::soundtrack(this).GetCachedSize(), target, stream);
  }

  // optional string property = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property().data(), static_cast<int>(this->_internal_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandSoundtrackSetValue.property");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_property(), target);
  }

  // optional .KN.CommandSoundtrackSetValue.PropertyValue old_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::old_value(this),
        _Internal::old_value(this).GetCachedSize(), target, stream);
  }

  // optional .KN.CommandSoundtrackSetValue.PropertyValue new_value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::new_value(this),
        _Internal::new_value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSoundtrackSetValue)
  return target;
}

size_t CommandSoundtrackSetValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSoundtrackSetValue)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string property = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());
  }

  if (cached_has_bits & 0x0000001cu) {
    // optional .TSP.Reference soundtrack = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.soundtrack_);
    }

    // optional .KN.CommandSoundtrackSetValue.PropertyValue old_value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_value_);
    }

    // optional .KN.CommandSoundtrackSetValue.PropertyValue new_value = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_value_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSoundtrackSetValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSoundtrackSetValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSoundtrackSetValue::GetClassData() const { return &_class_data_; }


void CommandSoundtrackSetValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSoundtrackSetValue*>(&to_msg);
  auto& from = static_cast<const CommandSoundtrackSetValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSoundtrackSetValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_property(from._internal_property());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_soundtrack()->::TSP::Reference::MergeFrom(
          from._internal_soundtrack());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_old_value()->::KN::CommandSoundtrackSetValue_PropertyValue::MergeFrom(
          from._internal_old_value());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_new_value()->::KN::CommandSoundtrackSetValue_PropertyValue::MergeFrom(
          from._internal_new_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSoundtrackSetValue::CopyFrom(const CommandSoundtrackSetValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSoundtrackSetValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSoundtrackSetValue::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_soundtrack()) {
    if (!_impl_.soundtrack_->IsInitialized()) return false;
  }
  if (_internal_has_old_value()) {
    if (!_impl_.old_value_->IsInitialized()) return false;
  }
  if (_internal_has_new_value()) {
    if (!_impl_.new_value_->IsInitialized()) return false;
  }
  return true;
}

void CommandSoundtrackSetValue::InternalSwap(CommandSoundtrackSetValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.property_, lhs_arena,
      &other->_impl_.property_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSoundtrackSetValue, _impl_.new_value_)
      + sizeof(CommandSoundtrackSetValue::_impl_.new_value_)
      - PROTOBUF_FIELD_OFFSET(CommandSoundtrackSetValue, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSoundtrackSetValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[45]);
}

// ===================================================================

class SlideCollectionCommandSelectionBehaviorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideCollectionCommandSelectionBehaviorArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& archived_new_selection(const SlideCollectionCommandSelectionBehaviorArchive* msg);
  static void set_has_archived_new_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& archived_old_selection(const SlideCollectionCommandSelectionBehaviorArchive* msg);
  static void set_has_archived_old_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::Reference&
SlideCollectionCommandSelectionBehaviorArchive::_Internal::archived_new_selection(const SlideCollectionCommandSelectionBehaviorArchive* msg) {
  return *msg->_impl_.archived_new_selection_;
}
const ::TSP::Reference&
SlideCollectionCommandSelectionBehaviorArchive::_Internal::archived_old_selection(const SlideCollectionCommandSelectionBehaviorArchive* msg) {
  return *msg->_impl_.archived_old_selection_;
}
void SlideCollectionCommandSelectionBehaviorArchive::clear_archived_new_selection() {
  if (_impl_.archived_new_selection_ != nullptr) _impl_.archived_new_selection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SlideCollectionCommandSelectionBehaviorArchive::clear_archived_old_selection() {
  if (_impl_.archived_old_selection_ != nullptr) _impl_.archived_old_selection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SlideCollectionCommandSelectionBehaviorArchive::SlideCollectionCommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.SlideCollectionCommandSelectionBehaviorArchive)
}
SlideCollectionCommandSelectionBehaviorArchive::SlideCollectionCommandSelectionBehaviorArchive(const SlideCollectionCommandSelectionBehaviorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SlideCollectionCommandSelectionBehaviorArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.archived_new_selection_){nullptr}
    , decltype(_impl_.archived_old_selection_){nullptr}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_archived_new_selection()) {
    _this->_impl_.archived_new_selection_ = new ::TSP::Reference(*from._impl_.archived_new_selection_);
  }
  if (from._internal_has_archived_old_selection()) {
    _this->_impl_.archived_old_selection_ = new ::TSP::Reference(*from._impl_.archived_old_selection_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:KN.SlideCollectionCommandSelectionBehaviorArchive)
}

inline void SlideCollectionCommandSelectionBehaviorArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.archived_new_selection_){nullptr}
    , decltype(_impl_.archived_old_selection_){nullptr}
    , decltype(_impl_.type_){0}
  };
}

SlideCollectionCommandSelectionBehaviorArchive::~SlideCollectionCommandSelectionBehaviorArchive() {
  // @@protoc_insertion_point(destructor:KN.SlideCollectionCommandSelectionBehaviorArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SlideCollectionCommandSelectionBehaviorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.archived_new_selection_;
  if (this != internal_default_instance()) delete _impl_.archived_old_selection_;
}

void SlideCollectionCommandSelectionBehaviorArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SlideCollectionCommandSelectionBehaviorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideCollectionCommandSelectionBehaviorArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.archived_new_selection_ != nullptr);
      _impl_.archived_new_selection_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.archived_old_selection_ != nullptr);
      _impl_.archived_old_selection_->Clear();
    }
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideCollectionCommandSelectionBehaviorArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference archived_new_selection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_archived_new_selection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference archived_old_selection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_archived_old_selection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.SlideCollectionCommandSelectionBehaviorArchive.Type type = 3 [default = kKindSlideSelectionBehaviorTypeGeneral];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::SlideCollectionCommandSelectionBehaviorArchive_Type_IsValid(val))) {
            _internal_set_type(static_cast<::KN::SlideCollectionCommandSelectionBehaviorArchive_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SlideCollectionCommandSelectionBehaviorArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideCollectionCommandSelectionBehaviorArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference archived_new_selection = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::archived_new_selection(this),
        _Internal::archived_new_selection(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference archived_old_selection = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::archived_old_selection(this),
        _Internal::archived_old_selection(this).GetCachedSize(), target, stream);
  }

  // optional .KN.SlideCollectionCommandSelectionBehaviorArchive.Type type = 3 [default = kKindSlideSelectionBehaviorTypeGeneral];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideCollectionCommandSelectionBehaviorArchive)
  return target;
}

size_t SlideCollectionCommandSelectionBehaviorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideCollectionCommandSelectionBehaviorArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.Reference archived_new_selection = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.archived_new_selection_);
    }

    // optional .TSP.Reference archived_old_selection = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.archived_old_selection_);
    }

    // optional .KN.SlideCollectionCommandSelectionBehaviorArchive.Type type = 3 [default = kKindSlideSelectionBehaviorTypeGeneral];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideCollectionCommandSelectionBehaviorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SlideCollectionCommandSelectionBehaviorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideCollectionCommandSelectionBehaviorArchive::GetClassData() const { return &_class_data_; }


void SlideCollectionCommandSelectionBehaviorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SlideCollectionCommandSelectionBehaviorArchive*>(&to_msg);
  auto& from = static_cast<const SlideCollectionCommandSelectionBehaviorArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideCollectionCommandSelectionBehaviorArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_archived_new_selection()->::TSP::Reference::MergeFrom(
          from._internal_archived_new_selection());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_archived_old_selection()->::TSP::Reference::MergeFrom(
          from._internal_archived_old_selection());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideCollectionCommandSelectionBehaviorArchive::CopyFrom(const SlideCollectionCommandSelectionBehaviorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideCollectionCommandSelectionBehaviorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideCollectionCommandSelectionBehaviorArchive::IsInitialized() const {
  if (_internal_has_archived_new_selection()) {
    if (!_impl_.archived_new_selection_->IsInitialized()) return false;
  }
  if (_internal_has_archived_old_selection()) {
    if (!_impl_.archived_old_selection_->IsInitialized()) return false;
  }
  return true;
}

void SlideCollectionCommandSelectionBehaviorArchive::InternalSwap(SlideCollectionCommandSelectionBehaviorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SlideCollectionCommandSelectionBehaviorArchive, _impl_.type_)
      + sizeof(SlideCollectionCommandSelectionBehaviorArchive::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(SlideCollectionCommandSelectionBehaviorArchive, _impl_.archived_new_selection_)>(
          reinterpret_cast<char*>(&_impl_.archived_new_selection_),
          reinterpret_cast<char*>(&other->_impl_.archived_new_selection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideCollectionCommandSelectionBehaviorArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[46]);
}

// ===================================================================

class ChartInfoGeometryCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartInfoGeometryCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const ChartInfoGeometryCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
ChartInfoGeometryCommandArchive::_Internal::super(const ChartInfoGeometryCommandArchive* msg) {
  return *msg->_impl_.super_;
}
void ChartInfoGeometryCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ChartInfoGeometryCommandArchive::ChartInfoGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.ChartInfoGeometryCommandArchive)
}
ChartInfoGeometryCommandArchive::ChartInfoGeometryCommandArchive(const ChartInfoGeometryCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartInfoGeometryCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.ChartInfoGeometryCommandArchive)
}

inline void ChartInfoGeometryCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

ChartInfoGeometryCommandArchive::~ChartInfoGeometryCommandArchive() {
  // @@protoc_insertion_point(destructor:KN.ChartInfoGeometryCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartInfoGeometryCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void ChartInfoGeometryCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartInfoGeometryCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.ChartInfoGeometryCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartInfoGeometryCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartInfoGeometryCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.ChartInfoGeometryCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.ChartInfoGeometryCommandArchive)
  return target;
}

size_t ChartInfoGeometryCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.ChartInfoGeometryCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartInfoGeometryCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartInfoGeometryCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartInfoGeometryCommandArchive::GetClassData() const { return &_class_data_; }


void ChartInfoGeometryCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartInfoGeometryCommandArchive*>(&to_msg);
  auto& from = static_cast<const ChartInfoGeometryCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.ChartInfoGeometryCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartInfoGeometryCommandArchive::CopyFrom(const ChartInfoGeometryCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.ChartInfoGeometryCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartInfoGeometryCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void ChartInfoGeometryCommandArchive::InternalSwap(ChartInfoGeometryCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartInfoGeometryCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[47]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace KN
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::KN::UIStateCommandGroupArchive*
Arena::CreateMaybeMessage< ::KN::UIStateCommandGroupArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::UIStateCommandGroupArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideInsertDrawablesArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideInsertDrawablesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideInsertDrawablesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideSetPlaceholdersForTagsArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideSetPlaceholdersForTagsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideSetPlaceholdersForTagsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideRemoveDrawableArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideRemoveDrawableArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideRemoveDrawableArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideMoveDrawableZOrderArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideMoveDrawableZOrderArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideMoveDrawableZOrderArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlidePasteDrawablesArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlidePasteDrawablesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlidePasteDrawablesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue*
Arena::CreateMaybeMessage< ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideNodeSetPropertyArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideNodeSetPropertyArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideNodeSetPropertyArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideSetValueArchive_PropertyValue*
Arena::CreateMaybeMessage< ::KN::CommandSlideSetValueArchive_PropertyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideSetValueArchive_PropertyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideSetValueArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideSetValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideSetValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideSetStyleArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideSetStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideSetStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowMarkOutOfSyncRecordingArchive*
Arena::CreateMaybeMessage< ::KN::CommandShowMarkOutOfSyncRecordingArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowMarkOutOfSyncRecordingArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowRemoveRecordingArchive*
Arena::CreateMaybeMessage< ::KN::CommandShowRemoveRecordingArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowRemoveRecordingArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowReplaceRecordingArchive*
Arena::CreateMaybeMessage< ::KN::CommandShowReplaceRecordingArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowReplaceRecordingArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowSetValueArchive_PropertyValue*
Arena::CreateMaybeMessage< ::KN::CommandShowSetValueArchive_PropertyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowSetValueArchive_PropertyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowSetValueArchive*
Arena::CreateMaybeMessage< ::KN::CommandShowSetValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowSetValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowInsertSlideArchive*
Arena::CreateMaybeMessage< ::KN::CommandShowInsertSlideArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowInsertSlideArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowMoveSlideArchive*
Arena::CreateMaybeMessage< ::KN::CommandShowMoveSlideArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowMoveSlideArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowRemoveSlideArchive*
Arena::CreateMaybeMessage< ::KN::CommandShowRemoveSlideArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowRemoveSlideArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowChangeThemeArchive*
Arena::CreateMaybeMessage< ::KN::CommandShowChangeThemeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowChangeThemeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandMoveMastersArchive*
Arena::CreateMaybeMessage< ::KN::CommandMoveMastersArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandMoveMastersArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandInsertMasterArchive*
Arena::CreateMaybeMessage< ::KN::CommandInsertMasterArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandInsertMasterArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandRemoveMasterArchive*
Arena::CreateMaybeMessage< ::KN::CommandRemoveMasterArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandRemoveMasterArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandRenameMasterArchive*
Arena::CreateMaybeMessage< ::KN::CommandRenameMasterArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandRenameMasterArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideInsertBuildArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideInsertBuildArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideInsertBuildArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideRemoveBuildArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideRemoveBuildArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideRemoveBuildArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideMoveBuildWithoutMovingChunksArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideMoveBuildWithoutMovingChunksArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideMoveBuildWithoutMovingChunksArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideMoveBuildsArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideMoveBuildsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideMoveBuildsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideInsertBuildChunkArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideInsertBuildChunkArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideInsertBuildChunkArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideRemoveBuildChunkArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideRemoveBuildChunkArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideRemoveBuildChunkArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideMoveBuildChunkArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideMoveBuildChunkArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideMoveBuildChunkArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideMoveBuildChunksArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideMoveBuildChunksArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideMoveBuildChunksArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandBuildSetValueArchive*
Arena::CreateMaybeMessage< ::KN::CommandBuildSetValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandBuildSetValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandBuildChunkSetValueArchive*
Arena::CreateMaybeMessage< ::KN::CommandBuildChunkSetValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandBuildChunkSetValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandTransitionSetValueArchive*
Arena::CreateMaybeMessage< ::KN::CommandTransitionSetValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandTransitionSetValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowSetSlideNumberVisibilityArchive*
Arena::CreateMaybeMessage< ::KN::CommandShowSetSlideNumberVisibilityArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowSetSlideNumberVisibilityArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandMasterRescaleArchive*
Arena::CreateMaybeMessage< ::KN::CommandMasterRescaleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandMasterRescaleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandMasterSetThumbnailTextArchive*
Arena::CreateMaybeMessage< ::KN::CommandMasterSetThumbnailTextArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandMasterSetThumbnailTextArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandMasterSetBodyStylesArchive*
Arena::CreateMaybeMessage< ::KN::CommandMasterSetBodyStylesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandMasterSetBodyStylesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideApplyThemeArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideApplyThemeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideApplyThemeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandChangeMasterSlideArchive*
Arena::CreateMaybeMessage< ::KN::CommandChangeMasterSlideArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandChangeMasterSlideArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlidePrimitiveSetMasterArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlidePrimitiveSetMasterArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlidePrimitiveSetMasterArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideReapplyMasterArchive*
Arena::CreateMaybeMessage< ::KN::CommandSlideReapplyMasterArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideReapplyMasterArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowSetSoundtrack*
Arena::CreateMaybeMessage< ::KN::CommandShowSetSoundtrack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowSetSoundtrack >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSoundtrackSetValue_PropertyValue*
Arena::CreateMaybeMessage< ::KN::CommandSoundtrackSetValue_PropertyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSoundtrackSetValue_PropertyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSoundtrackSetValue*
Arena::CreateMaybeMessage< ::KN::CommandSoundtrackSetValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSoundtrackSetValue >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideCollectionCommandSelectionBehaviorArchive*
Arena::CreateMaybeMessage< ::KN::SlideCollectionCommandSelectionBehaviorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideCollectionCommandSelectionBehaviorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::ChartInfoGeometryCommandArchive*
Arena::CreateMaybeMessage< ::KN::ChartInfoGeometryCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::ChartInfoGeometryCommandArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
