// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KNCommandArchives.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_KNCommandArchives_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_KNCommandArchives_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSKArchives.pb.h"
#include "TSSArchives.pb.h"
#include "TSDArchives.pb.h"
#include "TSWPArchives.pb.h"
#include "TSAArchives.pb.h"
#include "KNArchives.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_KNCommandArchives_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_KNCommandArchives_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_KNCommandArchives_2eproto;
namespace KN {
class ChartInfoGeometryCommandArchive;
struct ChartInfoGeometryCommandArchiveDefaultTypeInternal;
extern ChartInfoGeometryCommandArchiveDefaultTypeInternal _ChartInfoGeometryCommandArchive_default_instance_;
class CommandBuildChunkSetValueArchive;
struct CommandBuildChunkSetValueArchiveDefaultTypeInternal;
extern CommandBuildChunkSetValueArchiveDefaultTypeInternal _CommandBuildChunkSetValueArchive_default_instance_;
class CommandBuildSetValueArchive;
struct CommandBuildSetValueArchiveDefaultTypeInternal;
extern CommandBuildSetValueArchiveDefaultTypeInternal _CommandBuildSetValueArchive_default_instance_;
class CommandChangeMasterSlideArchive;
struct CommandChangeMasterSlideArchiveDefaultTypeInternal;
extern CommandChangeMasterSlideArchiveDefaultTypeInternal _CommandChangeMasterSlideArchive_default_instance_;
class CommandInsertMasterArchive;
struct CommandInsertMasterArchiveDefaultTypeInternal;
extern CommandInsertMasterArchiveDefaultTypeInternal _CommandInsertMasterArchive_default_instance_;
class CommandMasterRescaleArchive;
struct CommandMasterRescaleArchiveDefaultTypeInternal;
extern CommandMasterRescaleArchiveDefaultTypeInternal _CommandMasterRescaleArchive_default_instance_;
class CommandMasterSetBodyStylesArchive;
struct CommandMasterSetBodyStylesArchiveDefaultTypeInternal;
extern CommandMasterSetBodyStylesArchiveDefaultTypeInternal _CommandMasterSetBodyStylesArchive_default_instance_;
class CommandMasterSetThumbnailTextArchive;
struct CommandMasterSetThumbnailTextArchiveDefaultTypeInternal;
extern CommandMasterSetThumbnailTextArchiveDefaultTypeInternal _CommandMasterSetThumbnailTextArchive_default_instance_;
class CommandMoveMastersArchive;
struct CommandMoveMastersArchiveDefaultTypeInternal;
extern CommandMoveMastersArchiveDefaultTypeInternal _CommandMoveMastersArchive_default_instance_;
class CommandRemoveMasterArchive;
struct CommandRemoveMasterArchiveDefaultTypeInternal;
extern CommandRemoveMasterArchiveDefaultTypeInternal _CommandRemoveMasterArchive_default_instance_;
class CommandRenameMasterArchive;
struct CommandRenameMasterArchiveDefaultTypeInternal;
extern CommandRenameMasterArchiveDefaultTypeInternal _CommandRenameMasterArchive_default_instance_;
class CommandShowChangeThemeArchive;
struct CommandShowChangeThemeArchiveDefaultTypeInternal;
extern CommandShowChangeThemeArchiveDefaultTypeInternal _CommandShowChangeThemeArchive_default_instance_;
class CommandShowInsertSlideArchive;
struct CommandShowInsertSlideArchiveDefaultTypeInternal;
extern CommandShowInsertSlideArchiveDefaultTypeInternal _CommandShowInsertSlideArchive_default_instance_;
class CommandShowMarkOutOfSyncRecordingArchive;
struct CommandShowMarkOutOfSyncRecordingArchiveDefaultTypeInternal;
extern CommandShowMarkOutOfSyncRecordingArchiveDefaultTypeInternal _CommandShowMarkOutOfSyncRecordingArchive_default_instance_;
class CommandShowMoveSlideArchive;
struct CommandShowMoveSlideArchiveDefaultTypeInternal;
extern CommandShowMoveSlideArchiveDefaultTypeInternal _CommandShowMoveSlideArchive_default_instance_;
class CommandShowRemoveRecordingArchive;
struct CommandShowRemoveRecordingArchiveDefaultTypeInternal;
extern CommandShowRemoveRecordingArchiveDefaultTypeInternal _CommandShowRemoveRecordingArchive_default_instance_;
class CommandShowRemoveSlideArchive;
struct CommandShowRemoveSlideArchiveDefaultTypeInternal;
extern CommandShowRemoveSlideArchiveDefaultTypeInternal _CommandShowRemoveSlideArchive_default_instance_;
class CommandShowReplaceRecordingArchive;
struct CommandShowReplaceRecordingArchiveDefaultTypeInternal;
extern CommandShowReplaceRecordingArchiveDefaultTypeInternal _CommandShowReplaceRecordingArchive_default_instance_;
class CommandShowSetSlideNumberVisibilityArchive;
struct CommandShowSetSlideNumberVisibilityArchiveDefaultTypeInternal;
extern CommandShowSetSlideNumberVisibilityArchiveDefaultTypeInternal _CommandShowSetSlideNumberVisibilityArchive_default_instance_;
class CommandShowSetSoundtrack;
struct CommandShowSetSoundtrackDefaultTypeInternal;
extern CommandShowSetSoundtrackDefaultTypeInternal _CommandShowSetSoundtrack_default_instance_;
class CommandShowSetValueArchive;
struct CommandShowSetValueArchiveDefaultTypeInternal;
extern CommandShowSetValueArchiveDefaultTypeInternal _CommandShowSetValueArchive_default_instance_;
class CommandShowSetValueArchive_PropertyValue;
struct CommandShowSetValueArchive_PropertyValueDefaultTypeInternal;
extern CommandShowSetValueArchive_PropertyValueDefaultTypeInternal _CommandShowSetValueArchive_PropertyValue_default_instance_;
class CommandSlideApplyThemeArchive;
struct CommandSlideApplyThemeArchiveDefaultTypeInternal;
extern CommandSlideApplyThemeArchiveDefaultTypeInternal _CommandSlideApplyThemeArchive_default_instance_;
class CommandSlideInsertBuildArchive;
struct CommandSlideInsertBuildArchiveDefaultTypeInternal;
extern CommandSlideInsertBuildArchiveDefaultTypeInternal _CommandSlideInsertBuildArchive_default_instance_;
class CommandSlideInsertBuildChunkArchive;
struct CommandSlideInsertBuildChunkArchiveDefaultTypeInternal;
extern CommandSlideInsertBuildChunkArchiveDefaultTypeInternal _CommandSlideInsertBuildChunkArchive_default_instance_;
class CommandSlideInsertDrawablesArchive;
struct CommandSlideInsertDrawablesArchiveDefaultTypeInternal;
extern CommandSlideInsertDrawablesArchiveDefaultTypeInternal _CommandSlideInsertDrawablesArchive_default_instance_;
class CommandSlideMoveBuildChunkArchive;
struct CommandSlideMoveBuildChunkArchiveDefaultTypeInternal;
extern CommandSlideMoveBuildChunkArchiveDefaultTypeInternal _CommandSlideMoveBuildChunkArchive_default_instance_;
class CommandSlideMoveBuildChunksArchive;
struct CommandSlideMoveBuildChunksArchiveDefaultTypeInternal;
extern CommandSlideMoveBuildChunksArchiveDefaultTypeInternal _CommandSlideMoveBuildChunksArchive_default_instance_;
class CommandSlideMoveBuildWithoutMovingChunksArchive;
struct CommandSlideMoveBuildWithoutMovingChunksArchiveDefaultTypeInternal;
extern CommandSlideMoveBuildWithoutMovingChunksArchiveDefaultTypeInternal _CommandSlideMoveBuildWithoutMovingChunksArchive_default_instance_;
class CommandSlideMoveBuildsArchive;
struct CommandSlideMoveBuildsArchiveDefaultTypeInternal;
extern CommandSlideMoveBuildsArchiveDefaultTypeInternal _CommandSlideMoveBuildsArchive_default_instance_;
class CommandSlideMoveDrawableZOrderArchive;
struct CommandSlideMoveDrawableZOrderArchiveDefaultTypeInternal;
extern CommandSlideMoveDrawableZOrderArchiveDefaultTypeInternal _CommandSlideMoveDrawableZOrderArchive_default_instance_;
class CommandSlideNodeSetPropertyArchive;
struct CommandSlideNodeSetPropertyArchiveDefaultTypeInternal;
extern CommandSlideNodeSetPropertyArchiveDefaultTypeInternal _CommandSlideNodeSetPropertyArchive_default_instance_;
class CommandSlideNodeSetPropertyArchive_PropertyValue;
struct CommandSlideNodeSetPropertyArchive_PropertyValueDefaultTypeInternal;
extern CommandSlideNodeSetPropertyArchive_PropertyValueDefaultTypeInternal _CommandSlideNodeSetPropertyArchive_PropertyValue_default_instance_;
class CommandSlidePasteDrawablesArchive;
struct CommandSlidePasteDrawablesArchiveDefaultTypeInternal;
extern CommandSlidePasteDrawablesArchiveDefaultTypeInternal _CommandSlidePasteDrawablesArchive_default_instance_;
class CommandSlidePrimitiveSetMasterArchive;
struct CommandSlidePrimitiveSetMasterArchiveDefaultTypeInternal;
extern CommandSlidePrimitiveSetMasterArchiveDefaultTypeInternal _CommandSlidePrimitiveSetMasterArchive_default_instance_;
class CommandSlideReapplyMasterArchive;
struct CommandSlideReapplyMasterArchiveDefaultTypeInternal;
extern CommandSlideReapplyMasterArchiveDefaultTypeInternal _CommandSlideReapplyMasterArchive_default_instance_;
class CommandSlideRemoveBuildArchive;
struct CommandSlideRemoveBuildArchiveDefaultTypeInternal;
extern CommandSlideRemoveBuildArchiveDefaultTypeInternal _CommandSlideRemoveBuildArchive_default_instance_;
class CommandSlideRemoveBuildChunkArchive;
struct CommandSlideRemoveBuildChunkArchiveDefaultTypeInternal;
extern CommandSlideRemoveBuildChunkArchiveDefaultTypeInternal _CommandSlideRemoveBuildChunkArchive_default_instance_;
class CommandSlideRemoveDrawableArchive;
struct CommandSlideRemoveDrawableArchiveDefaultTypeInternal;
extern CommandSlideRemoveDrawableArchiveDefaultTypeInternal _CommandSlideRemoveDrawableArchive_default_instance_;
class CommandSlideSetPlaceholdersForTagsArchive;
struct CommandSlideSetPlaceholdersForTagsArchiveDefaultTypeInternal;
extern CommandSlideSetPlaceholdersForTagsArchiveDefaultTypeInternal _CommandSlideSetPlaceholdersForTagsArchive_default_instance_;
class CommandSlideSetStyleArchive;
struct CommandSlideSetStyleArchiveDefaultTypeInternal;
extern CommandSlideSetStyleArchiveDefaultTypeInternal _CommandSlideSetStyleArchive_default_instance_;
class CommandSlideSetValueArchive;
struct CommandSlideSetValueArchiveDefaultTypeInternal;
extern CommandSlideSetValueArchiveDefaultTypeInternal _CommandSlideSetValueArchive_default_instance_;
class CommandSlideSetValueArchive_PropertyValue;
struct CommandSlideSetValueArchive_PropertyValueDefaultTypeInternal;
extern CommandSlideSetValueArchive_PropertyValueDefaultTypeInternal _CommandSlideSetValueArchive_PropertyValue_default_instance_;
class CommandSoundtrackSetValue;
struct CommandSoundtrackSetValueDefaultTypeInternal;
extern CommandSoundtrackSetValueDefaultTypeInternal _CommandSoundtrackSetValue_default_instance_;
class CommandSoundtrackSetValue_PropertyValue;
struct CommandSoundtrackSetValue_PropertyValueDefaultTypeInternal;
extern CommandSoundtrackSetValue_PropertyValueDefaultTypeInternal _CommandSoundtrackSetValue_PropertyValue_default_instance_;
class CommandTransitionSetValueArchive;
struct CommandTransitionSetValueArchiveDefaultTypeInternal;
extern CommandTransitionSetValueArchiveDefaultTypeInternal _CommandTransitionSetValueArchive_default_instance_;
class SlideCollectionCommandSelectionBehaviorArchive;
struct SlideCollectionCommandSelectionBehaviorArchiveDefaultTypeInternal;
extern SlideCollectionCommandSelectionBehaviorArchiveDefaultTypeInternal _SlideCollectionCommandSelectionBehaviorArchive_default_instance_;
class UIStateCommandGroupArchive;
struct UIStateCommandGroupArchiveDefaultTypeInternal;
extern UIStateCommandGroupArchiveDefaultTypeInternal _UIStateCommandGroupArchive_default_instance_;
}  // namespace KN
PROTOBUF_NAMESPACE_OPEN
template<> ::KN::ChartInfoGeometryCommandArchive* Arena::CreateMaybeMessage<::KN::ChartInfoGeometryCommandArchive>(Arena*);
template<> ::KN::CommandBuildChunkSetValueArchive* Arena::CreateMaybeMessage<::KN::CommandBuildChunkSetValueArchive>(Arena*);
template<> ::KN::CommandBuildSetValueArchive* Arena::CreateMaybeMessage<::KN::CommandBuildSetValueArchive>(Arena*);
template<> ::KN::CommandChangeMasterSlideArchive* Arena::CreateMaybeMessage<::KN::CommandChangeMasterSlideArchive>(Arena*);
template<> ::KN::CommandInsertMasterArchive* Arena::CreateMaybeMessage<::KN::CommandInsertMasterArchive>(Arena*);
template<> ::KN::CommandMasterRescaleArchive* Arena::CreateMaybeMessage<::KN::CommandMasterRescaleArchive>(Arena*);
template<> ::KN::CommandMasterSetBodyStylesArchive* Arena::CreateMaybeMessage<::KN::CommandMasterSetBodyStylesArchive>(Arena*);
template<> ::KN::CommandMasterSetThumbnailTextArchive* Arena::CreateMaybeMessage<::KN::CommandMasterSetThumbnailTextArchive>(Arena*);
template<> ::KN::CommandMoveMastersArchive* Arena::CreateMaybeMessage<::KN::CommandMoveMastersArchive>(Arena*);
template<> ::KN::CommandRemoveMasterArchive* Arena::CreateMaybeMessage<::KN::CommandRemoveMasterArchive>(Arena*);
template<> ::KN::CommandRenameMasterArchive* Arena::CreateMaybeMessage<::KN::CommandRenameMasterArchive>(Arena*);
template<> ::KN::CommandShowChangeThemeArchive* Arena::CreateMaybeMessage<::KN::CommandShowChangeThemeArchive>(Arena*);
template<> ::KN::CommandShowInsertSlideArchive* Arena::CreateMaybeMessage<::KN::CommandShowInsertSlideArchive>(Arena*);
template<> ::KN::CommandShowMarkOutOfSyncRecordingArchive* Arena::CreateMaybeMessage<::KN::CommandShowMarkOutOfSyncRecordingArchive>(Arena*);
template<> ::KN::CommandShowMoveSlideArchive* Arena::CreateMaybeMessage<::KN::CommandShowMoveSlideArchive>(Arena*);
template<> ::KN::CommandShowRemoveRecordingArchive* Arena::CreateMaybeMessage<::KN::CommandShowRemoveRecordingArchive>(Arena*);
template<> ::KN::CommandShowRemoveSlideArchive* Arena::CreateMaybeMessage<::KN::CommandShowRemoveSlideArchive>(Arena*);
template<> ::KN::CommandShowReplaceRecordingArchive* Arena::CreateMaybeMessage<::KN::CommandShowReplaceRecordingArchive>(Arena*);
template<> ::KN::CommandShowSetSlideNumberVisibilityArchive* Arena::CreateMaybeMessage<::KN::CommandShowSetSlideNumberVisibilityArchive>(Arena*);
template<> ::KN::CommandShowSetSoundtrack* Arena::CreateMaybeMessage<::KN::CommandShowSetSoundtrack>(Arena*);
template<> ::KN::CommandShowSetValueArchive* Arena::CreateMaybeMessage<::KN::CommandShowSetValueArchive>(Arena*);
template<> ::KN::CommandShowSetValueArchive_PropertyValue* Arena::CreateMaybeMessage<::KN::CommandShowSetValueArchive_PropertyValue>(Arena*);
template<> ::KN::CommandSlideApplyThemeArchive* Arena::CreateMaybeMessage<::KN::CommandSlideApplyThemeArchive>(Arena*);
template<> ::KN::CommandSlideInsertBuildArchive* Arena::CreateMaybeMessage<::KN::CommandSlideInsertBuildArchive>(Arena*);
template<> ::KN::CommandSlideInsertBuildChunkArchive* Arena::CreateMaybeMessage<::KN::CommandSlideInsertBuildChunkArchive>(Arena*);
template<> ::KN::CommandSlideInsertDrawablesArchive* Arena::CreateMaybeMessage<::KN::CommandSlideInsertDrawablesArchive>(Arena*);
template<> ::KN::CommandSlideMoveBuildChunkArchive* Arena::CreateMaybeMessage<::KN::CommandSlideMoveBuildChunkArchive>(Arena*);
template<> ::KN::CommandSlideMoveBuildChunksArchive* Arena::CreateMaybeMessage<::KN::CommandSlideMoveBuildChunksArchive>(Arena*);
template<> ::KN::CommandSlideMoveBuildWithoutMovingChunksArchive* Arena::CreateMaybeMessage<::KN::CommandSlideMoveBuildWithoutMovingChunksArchive>(Arena*);
template<> ::KN::CommandSlideMoveBuildsArchive* Arena::CreateMaybeMessage<::KN::CommandSlideMoveBuildsArchive>(Arena*);
template<> ::KN::CommandSlideMoveDrawableZOrderArchive* Arena::CreateMaybeMessage<::KN::CommandSlideMoveDrawableZOrderArchive>(Arena*);
template<> ::KN::CommandSlideNodeSetPropertyArchive* Arena::CreateMaybeMessage<::KN::CommandSlideNodeSetPropertyArchive>(Arena*);
template<> ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* Arena::CreateMaybeMessage<::KN::CommandSlideNodeSetPropertyArchive_PropertyValue>(Arena*);
template<> ::KN::CommandSlidePasteDrawablesArchive* Arena::CreateMaybeMessage<::KN::CommandSlidePasteDrawablesArchive>(Arena*);
template<> ::KN::CommandSlidePrimitiveSetMasterArchive* Arena::CreateMaybeMessage<::KN::CommandSlidePrimitiveSetMasterArchive>(Arena*);
template<> ::KN::CommandSlideReapplyMasterArchive* Arena::CreateMaybeMessage<::KN::CommandSlideReapplyMasterArchive>(Arena*);
template<> ::KN::CommandSlideRemoveBuildArchive* Arena::CreateMaybeMessage<::KN::CommandSlideRemoveBuildArchive>(Arena*);
template<> ::KN::CommandSlideRemoveBuildChunkArchive* Arena::CreateMaybeMessage<::KN::CommandSlideRemoveBuildChunkArchive>(Arena*);
template<> ::KN::CommandSlideRemoveDrawableArchive* Arena::CreateMaybeMessage<::KN::CommandSlideRemoveDrawableArchive>(Arena*);
template<> ::KN::CommandSlideSetPlaceholdersForTagsArchive* Arena::CreateMaybeMessage<::KN::CommandSlideSetPlaceholdersForTagsArchive>(Arena*);
template<> ::KN::CommandSlideSetStyleArchive* Arena::CreateMaybeMessage<::KN::CommandSlideSetStyleArchive>(Arena*);
template<> ::KN::CommandSlideSetValueArchive* Arena::CreateMaybeMessage<::KN::CommandSlideSetValueArchive>(Arena*);
template<> ::KN::CommandSlideSetValueArchive_PropertyValue* Arena::CreateMaybeMessage<::KN::CommandSlideSetValueArchive_PropertyValue>(Arena*);
template<> ::KN::CommandSoundtrackSetValue* Arena::CreateMaybeMessage<::KN::CommandSoundtrackSetValue>(Arena*);
template<> ::KN::CommandSoundtrackSetValue_PropertyValue* Arena::CreateMaybeMessage<::KN::CommandSoundtrackSetValue_PropertyValue>(Arena*);
template<> ::KN::CommandTransitionSetValueArchive* Arena::CreateMaybeMessage<::KN::CommandTransitionSetValueArchive>(Arena*);
template<> ::KN::SlideCollectionCommandSelectionBehaviorArchive* Arena::CreateMaybeMessage<::KN::SlideCollectionCommandSelectionBehaviorArchive>(Arena*);
template<> ::KN::UIStateCommandGroupArchive* Arena::CreateMaybeMessage<::KN::UIStateCommandGroupArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace KN {

enum CommandShowInsertSlideArchive_Kind : int {
  CommandShowInsertSlideArchive_Kind_kKindInsertSlide = 0,
  CommandShowInsertSlideArchive_Kind_kKindInsertSlideForPaste = 1,
  CommandShowInsertSlideArchive_Kind_kKindInsertSlideForDuplicate = 2
};
bool CommandShowInsertSlideArchive_Kind_IsValid(int value);
constexpr CommandShowInsertSlideArchive_Kind CommandShowInsertSlideArchive_Kind_Kind_MIN = CommandShowInsertSlideArchive_Kind_kKindInsertSlide;
constexpr CommandShowInsertSlideArchive_Kind CommandShowInsertSlideArchive_Kind_Kind_MAX = CommandShowInsertSlideArchive_Kind_kKindInsertSlideForDuplicate;
constexpr int CommandShowInsertSlideArchive_Kind_Kind_ARRAYSIZE = CommandShowInsertSlideArchive_Kind_Kind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandShowInsertSlideArchive_Kind_descriptor();
template<typename T>
inline const std::string& CommandShowInsertSlideArchive_Kind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommandShowInsertSlideArchive_Kind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommandShowInsertSlideArchive_Kind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommandShowInsertSlideArchive_Kind_descriptor(), enum_t_value);
}
inline bool CommandShowInsertSlideArchive_Kind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommandShowInsertSlideArchive_Kind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommandShowInsertSlideArchive_Kind>(
    CommandShowInsertSlideArchive_Kind_descriptor(), name, value);
}
enum SlideCollectionCommandSelectionBehaviorArchive_Type : int {
  SlideCollectionCommandSelectionBehaviorArchive_Type_kKindSlideSelectionBehaviorTypeGeneral = 0,
  SlideCollectionCommandSelectionBehaviorArchive_Type_kKindSlideSelectionBehaviorTypeInsertion = 1,
  SlideCollectionCommandSelectionBehaviorArchive_Type_kKindSlideSelectionBehaviorTypeDeletion = 2,
  SlideCollectionCommandSelectionBehaviorArchive_Type_kKindSlideSelectionBehaviorTypeMove = 3
};
bool SlideCollectionCommandSelectionBehaviorArchive_Type_IsValid(int value);
constexpr SlideCollectionCommandSelectionBehaviorArchive_Type SlideCollectionCommandSelectionBehaviorArchive_Type_Type_MIN = SlideCollectionCommandSelectionBehaviorArchive_Type_kKindSlideSelectionBehaviorTypeGeneral;
constexpr SlideCollectionCommandSelectionBehaviorArchive_Type SlideCollectionCommandSelectionBehaviorArchive_Type_Type_MAX = SlideCollectionCommandSelectionBehaviorArchive_Type_kKindSlideSelectionBehaviorTypeMove;
constexpr int SlideCollectionCommandSelectionBehaviorArchive_Type_Type_ARRAYSIZE = SlideCollectionCommandSelectionBehaviorArchive_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SlideCollectionCommandSelectionBehaviorArchive_Type_descriptor();
template<typename T>
inline const std::string& SlideCollectionCommandSelectionBehaviorArchive_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SlideCollectionCommandSelectionBehaviorArchive_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SlideCollectionCommandSelectionBehaviorArchive_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SlideCollectionCommandSelectionBehaviorArchive_Type_descriptor(), enum_t_value);
}
inline bool SlideCollectionCommandSelectionBehaviorArchive_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SlideCollectionCommandSelectionBehaviorArchive_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SlideCollectionCommandSelectionBehaviorArchive_Type>(
    SlideCollectionCommandSelectionBehaviorArchive_Type_descriptor(), name, value);
}
// ===================================================================

class UIStateCommandGroupArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.UIStateCommandGroupArchive) */ {
 public:
  inline UIStateCommandGroupArchive() : UIStateCommandGroupArchive(nullptr) {}
  ~UIStateCommandGroupArchive() override;
  explicit PROTOBUF_CONSTEXPR UIStateCommandGroupArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UIStateCommandGroupArchive(const UIStateCommandGroupArchive& from);
  UIStateCommandGroupArchive(UIStateCommandGroupArchive&& from) noexcept
    : UIStateCommandGroupArchive() {
    *this = ::std::move(from);
  }

  inline UIStateCommandGroupArchive& operator=(const UIStateCommandGroupArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UIStateCommandGroupArchive& operator=(UIStateCommandGroupArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UIStateCommandGroupArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UIStateCommandGroupArchive* internal_default_instance() {
    return reinterpret_cast<const UIStateCommandGroupArchive*>(
               &_UIStateCommandGroupArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UIStateCommandGroupArchive& a, UIStateCommandGroupArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UIStateCommandGroupArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UIStateCommandGroupArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UIStateCommandGroupArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UIStateCommandGroupArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UIStateCommandGroupArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UIStateCommandGroupArchive& from) {
    UIStateCommandGroupArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UIStateCommandGroupArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.UIStateCommandGroupArchive";
  }
  protected:
  explicit UIStateCommandGroupArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlideNodesToEditFieldNumber = 4,
    kMasterSlideNodesToApplyFieldNumber = 5,
    kThumbnailSizesFieldNumber = 6,
    kSelectedSlideNodesFieldNumber = 7,
    kRestoreSelectedSlideNodesFieldNumber = 8,
    kPropertyFieldNumber = 3,
    kSuperFieldNumber = 1,
    kUiStateFieldNumber = 2,
  };
  // repeated .TSP.Reference slideNodesToEdit = 4;
  int slidenodestoedit_size() const;
  private:
  int _internal_slidenodestoedit_size() const;
  public:
  void clear_slidenodestoedit();
  ::TSP::Reference* mutable_slidenodestoedit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_slidenodestoedit();
  private:
  const ::TSP::Reference& _internal_slidenodestoedit(int index) const;
  ::TSP::Reference* _internal_add_slidenodestoedit();
  public:
  const ::TSP::Reference& slidenodestoedit(int index) const;
  ::TSP::Reference* add_slidenodestoedit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      slidenodestoedit() const;

  // repeated .TSP.Reference masterSlideNodesToApply = 5;
  int masterslidenodestoapply_size() const;
  private:
  int _internal_masterslidenodestoapply_size() const;
  public:
  void clear_masterslidenodestoapply();
  ::TSP::Reference* mutable_masterslidenodestoapply(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_masterslidenodestoapply();
  private:
  const ::TSP::Reference& _internal_masterslidenodestoapply(int index) const;
  ::TSP::Reference* _internal_add_masterslidenodestoapply();
  public:
  const ::TSP::Reference& masterslidenodestoapply(int index) const;
  ::TSP::Reference* add_masterslidenodestoapply();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      masterslidenodestoapply() const;

  // repeated .TSP.Size thumbnailSizes = 6;
  int thumbnailsizes_size() const;
  private:
  int _internal_thumbnailsizes_size() const;
  public:
  void clear_thumbnailsizes();
  ::TSP::Size* mutable_thumbnailsizes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Size >*
      mutable_thumbnailsizes();
  private:
  const ::TSP::Size& _internal_thumbnailsizes(int index) const;
  ::TSP::Size* _internal_add_thumbnailsizes();
  public:
  const ::TSP::Size& thumbnailsizes(int index) const;
  ::TSP::Size* add_thumbnailsizes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Size >&
      thumbnailsizes() const;

  // repeated .TSP.Reference selectedSlideNodes = 7;
  int selectedslidenodes_size() const;
  private:
  int _internal_selectedslidenodes_size() const;
  public:
  void clear_selectedslidenodes();
  ::TSP::Reference* mutable_selectedslidenodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_selectedslidenodes();
  private:
  const ::TSP::Reference& _internal_selectedslidenodes(int index) const;
  ::TSP::Reference* _internal_add_selectedslidenodes();
  public:
  const ::TSP::Reference& selectedslidenodes(int index) const;
  ::TSP::Reference* add_selectedslidenodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      selectedslidenodes() const;

  // repeated .TSP.Reference restoreSelectedSlideNodes = 8;
  int restoreselectedslidenodes_size() const;
  private:
  int _internal_restoreselectedslidenodes_size() const;
  public:
  void clear_restoreselectedslidenodes();
  ::TSP::Reference* mutable_restoreselectedslidenodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_restoreselectedslidenodes();
  private:
  const ::TSP::Reference& _internal_restoreselectedslidenodes(int index) const;
  ::TSP::Reference* _internal_add_restoreselectedslidenodes();
  public:
  const ::TSP::Reference& restoreselectedslidenodes(int index) const;
  ::TSP::Reference* add_restoreselectedslidenodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      restoreselectedslidenodes() const;

  // required string property = 3;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const std::string& property() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* property);
  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(const std::string& value);
  std::string* _internal_mutable_property();
  public:

  // required .TSK.CommandGroupArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandGroupArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandGroupArchive* release_super();
  ::TSK::CommandGroupArchive* mutable_super();
  void set_allocated_super(::TSK::CommandGroupArchive* super);
  private:
  const ::TSK::CommandGroupArchive& _internal_super() const;
  ::TSK::CommandGroupArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandGroupArchive* super);
  ::TSK::CommandGroupArchive* unsafe_arena_release_super();

  // required .TSP.Reference uiState = 2;
  bool has_uistate() const;
  private:
  bool _internal_has_uistate() const;
  public:
  void clear_uistate();
  const ::TSP::Reference& uistate() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_uistate();
  ::TSP::Reference* mutable_uistate();
  void set_allocated_uistate(::TSP::Reference* uistate);
  private:
  const ::TSP::Reference& _internal_uistate() const;
  ::TSP::Reference* _internal_mutable_uistate();
  public:
  void unsafe_arena_set_allocated_uistate(
      ::TSP::Reference* uistate);
  ::TSP::Reference* unsafe_arena_release_uistate();

  // @@protoc_insertion_point(class_scope:KN.UIStateCommandGroupArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > slidenodestoedit_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > masterslidenodestoapply_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Size > thumbnailsizes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > selectedslidenodes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > restoreselectedslidenodes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_;
    ::TSK::CommandGroupArchive* super_;
    ::TSP::Reference* uistate_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideInsertDrawablesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideInsertDrawablesArchive) */ {
 public:
  inline CommandSlideInsertDrawablesArchive() : CommandSlideInsertDrawablesArchive(nullptr) {}
  ~CommandSlideInsertDrawablesArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSlideInsertDrawablesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideInsertDrawablesArchive(const CommandSlideInsertDrawablesArchive& from);
  CommandSlideInsertDrawablesArchive(CommandSlideInsertDrawablesArchive&& from) noexcept
    : CommandSlideInsertDrawablesArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideInsertDrawablesArchive& operator=(const CommandSlideInsertDrawablesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideInsertDrawablesArchive& operator=(CommandSlideInsertDrawablesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideInsertDrawablesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideInsertDrawablesArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideInsertDrawablesArchive*>(
               &_CommandSlideInsertDrawablesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommandSlideInsertDrawablesArchive& a, CommandSlideInsertDrawablesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideInsertDrawablesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideInsertDrawablesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSlideInsertDrawablesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSlideInsertDrawablesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideInsertDrawablesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSlideInsertDrawablesArchive& from) {
    CommandSlideInsertDrawablesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideInsertDrawablesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideInsertDrawablesArchive";
  }
  protected:
  explicit CommandSlideInsertDrawablesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawablesFieldNumber = 3,
    kSuperFieldNumber = 1,
    kSlideNodeFieldNumber = 2,
    kAtIndexFieldNumber = 5,
    kForDragFieldNumber = 4,
    kUseObjectPlaceholderGeometryFieldNumber = 6,
  };
  // repeated .TSP.Reference drawables = 3;
  int drawables_size() const;
  private:
  int _internal_drawables_size() const;
  public:
  void clear_drawables();
  ::TSP::Reference* mutable_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_drawables();
  private:
  const ::TSP::Reference& _internal_drawables(int index) const;
  ::TSP::Reference* _internal_add_drawables();
  public:
  const ::TSP::Reference& drawables(int index) const;
  ::TSP::Reference* add_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      drawables() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference slideNode = 2;
  bool has_slidenode() const;
  private:
  bool _internal_has_slidenode() const;
  public:
  void clear_slidenode();
  const ::TSP::Reference& slidenode() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_slidenode();
  ::TSP::Reference* mutable_slidenode();
  void set_allocated_slidenode(::TSP::Reference* slidenode);
  private:
  const ::TSP::Reference& _internal_slidenode() const;
  ::TSP::Reference* _internal_mutable_slidenode();
  public:
  void unsafe_arena_set_allocated_slidenode(
      ::TSP::Reference* slidenode);
  ::TSP::Reference* unsafe_arena_release_slidenode();

  // optional int32 atIndex = 5;
  bool has_atindex() const;
  private:
  bool _internal_has_atindex() const;
  public:
  void clear_atindex();
  int32_t atindex() const;
  void set_atindex(int32_t value);
  private:
  int32_t _internal_atindex() const;
  void _internal_set_atindex(int32_t value);
  public:

  // optional bool forDrag = 4;
  bool has_fordrag() const;
  private:
  bool _internal_has_fordrag() const;
  public:
  void clear_fordrag();
  bool fordrag() const;
  void set_fordrag(bool value);
  private:
  bool _internal_fordrag() const;
  void _internal_set_fordrag(bool value);
  public:

  // required bool use_object_placeholder_geometry = 6;
  bool has_use_object_placeholder_geometry() const;
  private:
  bool _internal_has_use_object_placeholder_geometry() const;
  public:
  void clear_use_object_placeholder_geometry();
  bool use_object_placeholder_geometry() const;
  void set_use_object_placeholder_geometry(bool value);
  private:
  bool _internal_use_object_placeholder_geometry() const;
  void _internal_set_use_object_placeholder_geometry(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandSlideInsertDrawablesArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > drawables_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* slidenode_;
    int32_t atindex_;
    bool fordrag_;
    bool use_object_placeholder_geometry_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideSetPlaceholdersForTagsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideSetPlaceholdersForTagsArchive) */ {
 public:
  inline CommandSlideSetPlaceholdersForTagsArchive() : CommandSlideSetPlaceholdersForTagsArchive(nullptr) {}
  ~CommandSlideSetPlaceholdersForTagsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSlideSetPlaceholdersForTagsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideSetPlaceholdersForTagsArchive(const CommandSlideSetPlaceholdersForTagsArchive& from);
  CommandSlideSetPlaceholdersForTagsArchive(CommandSlideSetPlaceholdersForTagsArchive&& from) noexcept
    : CommandSlideSetPlaceholdersForTagsArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideSetPlaceholdersForTagsArchive& operator=(const CommandSlideSetPlaceholdersForTagsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideSetPlaceholdersForTagsArchive& operator=(CommandSlideSetPlaceholdersForTagsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideSetPlaceholdersForTagsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideSetPlaceholdersForTagsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideSetPlaceholdersForTagsArchive*>(
               &_CommandSlideSetPlaceholdersForTagsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CommandSlideSetPlaceholdersForTagsArchive& a, CommandSlideSetPlaceholdersForTagsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideSetPlaceholdersForTagsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideSetPlaceholdersForTagsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSlideSetPlaceholdersForTagsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSlideSetPlaceholdersForTagsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideSetPlaceholdersForTagsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSlideSetPlaceholdersForTagsArchive& from) {
    CommandSlideSetPlaceholdersForTagsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideSetPlaceholdersForTagsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideSetPlaceholdersForTagsArchive";
  }
  protected:
  explicit CommandSlideSetPlaceholdersForTagsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 3,
    kTagsFieldNumber = 4,
    kOldTagsFieldNumber = 5,
    kOldInfosFieldNumber = 6,
    kSuperFieldNumber = 1,
    kSlideFieldNumber = 2,
  };
  // repeated .TSP.Reference infos = 3;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::TSP::Reference* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_infos();
  private:
  const ::TSP::Reference& _internal_infos(int index) const;
  ::TSP::Reference* _internal_add_infos();
  public:
  const ::TSP::Reference& infos(int index) const;
  ::TSP::Reference* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      infos() const;

  // repeated string tags = 4;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // repeated string old_tags = 5;
  int old_tags_size() const;
  private:
  int _internal_old_tags_size() const;
  public:
  void clear_old_tags();
  const std::string& old_tags(int index) const;
  std::string* mutable_old_tags(int index);
  void set_old_tags(int index, const std::string& value);
  void set_old_tags(int index, std::string&& value);
  void set_old_tags(int index, const char* value);
  void set_old_tags(int index, const char* value, size_t size);
  std::string* add_old_tags();
  void add_old_tags(const std::string& value);
  void add_old_tags(std::string&& value);
  void add_old_tags(const char* value);
  void add_old_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& old_tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_old_tags();
  private:
  const std::string& _internal_old_tags(int index) const;
  std::string* _internal_add_old_tags();
  public:

  // repeated .TSP.Reference old_infos = 6;
  int old_infos_size() const;
  private:
  int _internal_old_infos_size() const;
  public:
  void clear_old_infos();
  ::TSP::Reference* mutable_old_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_old_infos();
  private:
  const ::TSP::Reference& _internal_old_infos(int index) const;
  ::TSP::Reference* _internal_add_old_infos();
  public:
  const ::TSP::Reference& old_infos(int index) const;
  ::TSP::Reference* add_old_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      old_infos() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference slide = 2;
  bool has_slide() const;
  private:
  bool _internal_has_slide() const;
  public:
  void clear_slide();
  const ::TSP::Reference& slide() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_slide();
  ::TSP::Reference* mutable_slide();
  void set_allocated_slide(::TSP::Reference* slide);
  private:
  const ::TSP::Reference& _internal_slide() const;
  ::TSP::Reference* _internal_mutable_slide();
  public:
  void unsafe_arena_set_allocated_slide(
      ::TSP::Reference* slide);
  ::TSP::Reference* unsafe_arena_release_slide();

  // @@protoc_insertion_point(class_scope:KN.CommandSlideSetPlaceholdersForTagsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > infos_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> old_tags_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > old_infos_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* slide_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideRemoveDrawableArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideRemoveDrawableArchive) */ {
 public:
  inline CommandSlideRemoveDrawableArchive() : CommandSlideRemoveDrawableArchive(nullptr) {}
  ~CommandSlideRemoveDrawableArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSlideRemoveDrawableArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideRemoveDrawableArchive(const CommandSlideRemoveDrawableArchive& from);
  CommandSlideRemoveDrawableArchive(CommandSlideRemoveDrawableArchive&& from) noexcept
    : CommandSlideRemoveDrawableArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideRemoveDrawableArchive& operator=(const CommandSlideRemoveDrawableArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideRemoveDrawableArchive& operator=(CommandSlideRemoveDrawableArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideRemoveDrawableArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideRemoveDrawableArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideRemoveDrawableArchive*>(
               &_CommandSlideRemoveDrawableArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CommandSlideRemoveDrawableArchive& a, CommandSlideRemoveDrawableArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideRemoveDrawableArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideRemoveDrawableArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSlideRemoveDrawableArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSlideRemoveDrawableArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideRemoveDrawableArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSlideRemoveDrawableArchive& from) {
    CommandSlideRemoveDrawableArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideRemoveDrawableArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideRemoveDrawableArchive";
  }
  protected:
  explicit CommandSlideRemoveDrawableArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSortedDrawablesFieldNumber = 3,
    kPlaceholderTagsFieldNumber = 5,
    kSuperFieldNumber = 1,
    kSlideNodeFieldNumber = 2,
    kDrawableIndicesFieldNumber = 4,
    kInfoUsingObjectPlaceholderGeometryFieldNumber = 6,
    kDidMatchObjectPlaceholderGeometryFieldNumber = 7,
  };
  // repeated .TSP.Reference sortedDrawables = 3;
  int sorteddrawables_size() const;
  private:
  int _internal_sorteddrawables_size() const;
  public:
  void clear_sorteddrawables();
  ::TSP::Reference* mutable_sorteddrawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_sorteddrawables();
  private:
  const ::TSP::Reference& _internal_sorteddrawables(int index) const;
  ::TSP::Reference* _internal_add_sorteddrawables();
  public:
  const ::TSP::Reference& sorteddrawables(int index) const;
  ::TSP::Reference* add_sorteddrawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      sorteddrawables() const;

  // repeated string placeholderTags = 5;
  int placeholdertags_size() const;
  private:
  int _internal_placeholdertags_size() const;
  public:
  void clear_placeholdertags();
  const std::string& placeholdertags(int index) const;
  std::string* mutable_placeholdertags(int index);
  void set_placeholdertags(int index, const std::string& value);
  void set_placeholdertags(int index, std::string&& value);
  void set_placeholdertags(int index, const char* value);
  void set_placeholdertags(int index, const char* value, size_t size);
  std::string* add_placeholdertags();
  void add_placeholdertags(const std::string& value);
  void add_placeholdertags(std::string&& value);
  void add_placeholdertags(const char* value);
  void add_placeholdertags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& placeholdertags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_placeholdertags();
  private:
  const std::string& _internal_placeholdertags(int index) const;
  std::string* _internal_add_placeholdertags();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference slideNode = 2;
  bool has_slidenode() const;
  private:
  bool _internal_has_slidenode() const;
  public:
  void clear_slidenode();
  const ::TSP::Reference& slidenode() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_slidenode();
  ::TSP::Reference* mutable_slidenode();
  void set_allocated_slidenode(::TSP::Reference* slidenode);
  private:
  const ::TSP::Reference& _internal_slidenode() const;
  ::TSP::Reference* _internal_mutable_slidenode();
  public:
  void unsafe_arena_set_allocated_slidenode(
      ::TSP::Reference* slidenode);
  ::TSP::Reference* unsafe_arena_release_slidenode();

  // required .TSP.IndexSet drawableIndices = 4;
  bool has_drawableindices() const;
  private:
  bool _internal_has_drawableindices() const;
  public:
  void clear_drawableindices();
  const ::TSP::IndexSet& drawableindices() const;
  PROTOBUF_NODISCARD ::TSP::IndexSet* release_drawableindices();
  ::TSP::IndexSet* mutable_drawableindices();
  void set_allocated_drawableindices(::TSP::IndexSet* drawableindices);
  private:
  const ::TSP::IndexSet& _internal_drawableindices() const;
  ::TSP::IndexSet* _internal_mutable_drawableindices();
  public:
  void unsafe_arena_set_allocated_drawableindices(
      ::TSP::IndexSet* drawableindices);
  ::TSP::IndexSet* unsafe_arena_release_drawableindices();

  // optional .TSP.Reference info_using_object_placeholder_geometry = 6;
  bool has_info_using_object_placeholder_geometry() const;
  private:
  bool _internal_has_info_using_object_placeholder_geometry() const;
  public:
  void clear_info_using_object_placeholder_geometry();
  const ::TSP::Reference& info_using_object_placeholder_geometry() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_info_using_object_placeholder_geometry();
  ::TSP::Reference* mutable_info_using_object_placeholder_geometry();
  void set_allocated_info_using_object_placeholder_geometry(::TSP::Reference* info_using_object_placeholder_geometry);
  private:
  const ::TSP::Reference& _internal_info_using_object_placeholder_geometry() const;
  ::TSP::Reference* _internal_mutable_info_using_object_placeholder_geometry();
  public:
  void unsafe_arena_set_allocated_info_using_object_placeholder_geometry(
      ::TSP::Reference* info_using_object_placeholder_geometry);
  ::TSP::Reference* unsafe_arena_release_info_using_object_placeholder_geometry();

  // optional bool did_match_object_placeholder_geometry = 7;
  bool has_did_match_object_placeholder_geometry() const;
  private:
  bool _internal_has_did_match_object_placeholder_geometry() const;
  public:
  void clear_did_match_object_placeholder_geometry();
  bool did_match_object_placeholder_geometry() const;
  void set_did_match_object_placeholder_geometry(bool value);
  private:
  bool _internal_did_match_object_placeholder_geometry() const;
  void _internal_set_did_match_object_placeholder_geometry(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandSlideRemoveDrawableArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > sorteddrawables_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> placeholdertags_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* slidenode_;
    ::TSP::IndexSet* drawableindices_;
    ::TSP::Reference* info_using_object_placeholder_geometry_;
    bool did_match_object_placeholder_geometry_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideMoveDrawableZOrderArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideMoveDrawableZOrderArchive) */ {
 public:
  inline CommandSlideMoveDrawableZOrderArchive() : CommandSlideMoveDrawableZOrderArchive(nullptr) {}
  ~CommandSlideMoveDrawableZOrderArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSlideMoveDrawableZOrderArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideMoveDrawableZOrderArchive(const CommandSlideMoveDrawableZOrderArchive& from);
  CommandSlideMoveDrawableZOrderArchive(CommandSlideMoveDrawableZOrderArchive&& from) noexcept
    : CommandSlideMoveDrawableZOrderArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideMoveDrawableZOrderArchive& operator=(const CommandSlideMoveDrawableZOrderArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideMoveDrawableZOrderArchive& operator=(CommandSlideMoveDrawableZOrderArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideMoveDrawableZOrderArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideMoveDrawableZOrderArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideMoveDrawableZOrderArchive*>(
               &_CommandSlideMoveDrawableZOrderArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CommandSlideMoveDrawableZOrderArchive& a, CommandSlideMoveDrawableZOrderArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideMoveDrawableZOrderArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideMoveDrawableZOrderArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSlideMoveDrawableZOrderArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSlideMoveDrawableZOrderArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideMoveDrawableZOrderArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSlideMoveDrawableZOrderArchive& from) {
    CommandSlideMoveDrawableZOrderArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideMoveDrawableZOrderArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideMoveDrawableZOrderArchive";
  }
  protected:
  explicit CommandSlideMoveDrawableZOrderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 3,
    kOldOrderedInfosFieldNumber = 4,
    kSuperFieldNumber = 1,
    kSlideNodeFieldNumber = 2,
    kIndexesFieldNumber = 5,
  };
  // repeated .TSP.Reference infos = 3;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::TSP::Reference* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_infos();
  private:
  const ::TSP::Reference& _internal_infos(int index) const;
  ::TSP::Reference* _internal_add_infos();
  public:
  const ::TSP::Reference& infos(int index) const;
  ::TSP::Reference* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      infos() const;

  // repeated .TSP.Reference old_ordered_infos = 4;
  int old_ordered_infos_size() const;
  private:
  int _internal_old_ordered_infos_size() const;
  public:
  void clear_old_ordered_infos();
  ::TSP::Reference* mutable_old_ordered_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_old_ordered_infos();
  private:
  const ::TSP::Reference& _internal_old_ordered_infos(int index) const;
  ::TSP::Reference* _internal_add_old_ordered_infos();
  public:
  const ::TSP::Reference& old_ordered_infos(int index) const;
  ::TSP::Reference* add_old_ordered_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      old_ordered_infos() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference slideNode = 2;
  bool has_slidenode() const;
  private:
  bool _internal_has_slidenode() const;
  public:
  void clear_slidenode();
  const ::TSP::Reference& slidenode() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_slidenode();
  ::TSP::Reference* mutable_slidenode();
  void set_allocated_slidenode(::TSP::Reference* slidenode);
  private:
  const ::TSP::Reference& _internal_slidenode() const;
  ::TSP::Reference* _internal_mutable_slidenode();
  public:
  void unsafe_arena_set_allocated_slidenode(
      ::TSP::Reference* slidenode);
  ::TSP::Reference* unsafe_arena_release_slidenode();

  // required .TSP.IndexSet indexes = 5;
  bool has_indexes() const;
  private:
  bool _internal_has_indexes() const;
  public:
  void clear_indexes();
  const ::TSP::IndexSet& indexes() const;
  PROTOBUF_NODISCARD ::TSP::IndexSet* release_indexes();
  ::TSP::IndexSet* mutable_indexes();
  void set_allocated_indexes(::TSP::IndexSet* indexes);
  private:
  const ::TSP::IndexSet& _internal_indexes() const;
  ::TSP::IndexSet* _internal_mutable_indexes();
  public:
  void unsafe_arena_set_allocated_indexes(
      ::TSP::IndexSet* indexes);
  ::TSP::IndexSet* unsafe_arena_release_indexes();

  // @@protoc_insertion_point(class_scope:KN.CommandSlideMoveDrawableZOrderArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > infos_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > old_ordered_infos_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* slidenode_;
    ::TSP::IndexSet* indexes_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlidePasteDrawablesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlidePasteDrawablesArchive) */ {
 public:
  inline CommandSlidePasteDrawablesArchive() : CommandSlidePasteDrawablesArchive(nullptr) {}
  ~CommandSlidePasteDrawablesArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSlidePasteDrawablesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlidePasteDrawablesArchive(const CommandSlidePasteDrawablesArchive& from);
  CommandSlidePasteDrawablesArchive(CommandSlidePasteDrawablesArchive&& from) noexcept
    : CommandSlidePasteDrawablesArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlidePasteDrawablesArchive& operator=(const CommandSlidePasteDrawablesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlidePasteDrawablesArchive& operator=(CommandSlidePasteDrawablesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlidePasteDrawablesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlidePasteDrawablesArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlidePasteDrawablesArchive*>(
               &_CommandSlidePasteDrawablesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CommandSlidePasteDrawablesArchive& a, CommandSlidePasteDrawablesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlidePasteDrawablesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlidePasteDrawablesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSlidePasteDrawablesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSlidePasteDrawablesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlidePasteDrawablesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSlidePasteDrawablesArchive& from) {
    CommandSlidePasteDrawablesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlidePasteDrawablesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlidePasteDrawablesArchive";
  }
  protected:
  explicit CommandSlidePasteDrawablesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandsFieldNumber = 2,
    kDrawablesFieldNumber = 4,
    kSuperFieldNumber = 1,
    kSlideFieldNumber = 3,
    kHasBuildsFieldNumber = 5,
  };
  // repeated .TSP.Reference commands = 2;
  int commands_size() const;
  private:
  int _internal_commands_size() const;
  public:
  void clear_commands();
  ::TSP::Reference* mutable_commands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_commands();
  private:
  const ::TSP::Reference& _internal_commands(int index) const;
  ::TSP::Reference* _internal_add_commands();
  public:
  const ::TSP::Reference& commands(int index) const;
  ::TSP::Reference* add_commands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      commands() const;

  // repeated .TSP.Reference drawables = 4;
  int drawables_size() const;
  private:
  int _internal_drawables_size() const;
  public:
  void clear_drawables();
  ::TSP::Reference* mutable_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_drawables();
  private:
  const ::TSP::Reference& _internal_drawables(int index) const;
  ::TSP::Reference* _internal_add_drawables();
  public:
  const ::TSP::Reference& drawables(int index) const;
  ::TSP::Reference* add_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      drawables() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference slide = 3;
  bool has_slide() const;
  private:
  bool _internal_has_slide() const;
  public:
  void clear_slide();
  const ::TSP::Reference& slide() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_slide();
  ::TSP::Reference* mutable_slide();
  void set_allocated_slide(::TSP::Reference* slide);
  private:
  const ::TSP::Reference& _internal_slide() const;
  ::TSP::Reference* _internal_mutable_slide();
  public:
  void unsafe_arena_set_allocated_slide(
      ::TSP::Reference* slide);
  ::TSP::Reference* unsafe_arena_release_slide();

  // optional bool has_builds = 5 [default = false];
  bool has_has_builds() const;
  private:
  bool _internal_has_has_builds() const;
  public:
  void clear_has_builds();
  bool has_builds() const;
  void set_has_builds(bool value);
  private:
  bool _internal_has_builds() const;
  void _internal_set_has_builds(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandSlidePasteDrawablesArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > commands_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > drawables_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* slide_;
    bool has_builds_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideNodeSetPropertyArchive_PropertyValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideNodeSetPropertyArchive.PropertyValue) */ {
 public:
  inline CommandSlideNodeSetPropertyArchive_PropertyValue() : CommandSlideNodeSetPropertyArchive_PropertyValue(nullptr) {}
  ~CommandSlideNodeSetPropertyArchive_PropertyValue() override;
  explicit PROTOBUF_CONSTEXPR CommandSlideNodeSetPropertyArchive_PropertyValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideNodeSetPropertyArchive_PropertyValue(const CommandSlideNodeSetPropertyArchive_PropertyValue& from);
  CommandSlideNodeSetPropertyArchive_PropertyValue(CommandSlideNodeSetPropertyArchive_PropertyValue&& from) noexcept
    : CommandSlideNodeSetPropertyArchive_PropertyValue() {
    *this = ::std::move(from);
  }

  inline CommandSlideNodeSetPropertyArchive_PropertyValue& operator=(const CommandSlideNodeSetPropertyArchive_PropertyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideNodeSetPropertyArchive_PropertyValue& operator=(CommandSlideNodeSetPropertyArchive_PropertyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideNodeSetPropertyArchive_PropertyValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideNodeSetPropertyArchive_PropertyValue* internal_default_instance() {
    return reinterpret_cast<const CommandSlideNodeSetPropertyArchive_PropertyValue*>(
               &_CommandSlideNodeSetPropertyArchive_PropertyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CommandSlideNodeSetPropertyArchive_PropertyValue& a, CommandSlideNodeSetPropertyArchive_PropertyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideNodeSetPropertyArchive_PropertyValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideNodeSetPropertyArchive_PropertyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSlideNodeSetPropertyArchive_PropertyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSlideNodeSetPropertyArchive_PropertyValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideNodeSetPropertyArchive_PropertyValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSlideNodeSetPropertyArchive_PropertyValue& from) {
    CommandSlideNodeSetPropertyArchive_PropertyValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideNodeSetPropertyArchive_PropertyValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideNodeSetPropertyArchive.PropertyValue";
  }
  protected:
  explicit CommandSlideNodeSetPropertyArchive_PropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseImageFieldNumber = 2,
    kImageFieldNumber = 3,
    kBoolValueFieldNumber = 1,
  };
  // optional .TSP.Reference database_image = 2;
  bool has_database_image() const;
  private:
  bool _internal_has_database_image() const;
  public:
  void clear_database_image();
  const ::TSP::Reference& database_image() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_database_image();
  ::TSP::Reference* mutable_database_image();
  void set_allocated_database_image(::TSP::Reference* database_image);
  private:
  const ::TSP::Reference& _internal_database_image() const;
  ::TSP::Reference* _internal_mutable_database_image();
  public:
  void unsafe_arena_set_allocated_database_image(
      ::TSP::Reference* database_image);
  ::TSP::Reference* unsafe_arena_release_database_image();

  // optional .TSP.DataReference image = 3;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::TSP::DataReference& image() const;
  PROTOBUF_NODISCARD ::TSP::DataReference* release_image();
  ::TSP::DataReference* mutable_image();
  void set_allocated_image(::TSP::DataReference* image);
  private:
  const ::TSP::DataReference& _internal_image() const;
  ::TSP::DataReference* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::TSP::DataReference* image);
  ::TSP::DataReference* unsafe_arena_release_image();

  // optional bool boolValue = 1;
  bool has_boolvalue() const;
  private:
  bool _internal_has_boolvalue() const;
  public:
  void clear_boolvalue();
  bool boolvalue() const;
  void set_boolvalue(bool value);
  private:
  bool _internal_boolvalue() const;
  void _internal_set_boolvalue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandSlideNodeSetPropertyArchive.PropertyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* database_image_;
    ::TSP::DataReference* image_;
    bool boolvalue_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideNodeSetPropertyArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideNodeSetPropertyArchive) */ {
 public:
  inline CommandSlideNodeSetPropertyArchive() : CommandSlideNodeSetPropertyArchive(nullptr) {}
  ~CommandSlideNodeSetPropertyArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSlideNodeSetPropertyArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideNodeSetPropertyArchive(const CommandSlideNodeSetPropertyArchive& from);
  CommandSlideNodeSetPropertyArchive(CommandSlideNodeSetPropertyArchive&& from) noexcept
    : CommandSlideNodeSetPropertyArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideNodeSetPropertyArchive& operator=(const CommandSlideNodeSetPropertyArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideNodeSetPropertyArchive& operator=(CommandSlideNodeSetPropertyArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideNodeSetPropertyArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideNodeSetPropertyArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideNodeSetPropertyArchive*>(
               &_CommandSlideNodeSetPropertyArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CommandSlideNodeSetPropertyArchive& a, CommandSlideNodeSetPropertyArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideNodeSetPropertyArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideNodeSetPropertyArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSlideNodeSetPropertyArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSlideNodeSetPropertyArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideNodeSetPropertyArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSlideNodeSetPropertyArchive& from) {
    CommandSlideNodeSetPropertyArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideNodeSetPropertyArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideNodeSetPropertyArchive";
  }
  protected:
  explicit CommandSlideNodeSetPropertyArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandSlideNodeSetPropertyArchive_PropertyValue PropertyValue;

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyFieldNumber = 3,
    kSuperFieldNumber = 1,
    kSlideNodeFieldNumber = 2,
    kOldValueFieldNumber = 4,
    kNewValueFieldNumber = 5,
  };
  // required string property = 3;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const std::string& property() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* property);
  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(const std::string& value);
  std::string* _internal_mutable_property();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference slideNode = 2;
  bool has_slidenode() const;
  private:
  bool _internal_has_slidenode() const;
  public:
  void clear_slidenode();
  const ::TSP::Reference& slidenode() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_slidenode();
  ::TSP::Reference* mutable_slidenode();
  void set_allocated_slidenode(::TSP::Reference* slidenode);
  private:
  const ::TSP::Reference& _internal_slidenode() const;
  ::TSP::Reference* _internal_mutable_slidenode();
  public:
  void unsafe_arena_set_allocated_slidenode(
      ::TSP::Reference* slidenode);
  ::TSP::Reference* unsafe_arena_release_slidenode();

  // required .KN.CommandSlideNodeSetPropertyArchive.PropertyValue oldValue = 4;
  bool has_oldvalue() const;
  private:
  bool _internal_has_oldvalue() const;
  public:
  void clear_oldvalue();
  const ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue& oldvalue() const;
  PROTOBUF_NODISCARD ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* release_oldvalue();
  ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* mutable_oldvalue();
  void set_allocated_oldvalue(::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* oldvalue);
  private:
  const ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue& _internal_oldvalue() const;
  ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* _internal_mutable_oldvalue();
  public:
  void unsafe_arena_set_allocated_oldvalue(
      ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* oldvalue);
  ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* unsafe_arena_release_oldvalue();

  // required .KN.CommandSlideNodeSetPropertyArchive.PropertyValue newValue = 5;
  bool has_newvalue() const;
  private:
  bool _internal_has_newvalue() const;
  public:
  void clear_newvalue();
  const ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue& newvalue() const;
  PROTOBUF_NODISCARD ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* release_newvalue();
  ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* mutable_newvalue();
  void set_allocated_newvalue(::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* newvalue);
  private:
  const ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue& _internal_newvalue() const;
  ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* _internal_mutable_newvalue();
  public:
  void unsafe_arena_set_allocated_newvalue(
      ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* newvalue);
  ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* unsafe_arena_release_newvalue();

  // @@protoc_insertion_point(class_scope:KN.CommandSlideNodeSetPropertyArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* slidenode_;
    ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* oldvalue_;
    ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* newvalue_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideSetValueArchive_PropertyValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideSetValueArchive.PropertyValue) */ {
 public:
  inline CommandSlideSetValueArchive_PropertyValue() : CommandSlideSetValueArchive_PropertyValue(nullptr) {}
  ~CommandSlideSetValueArchive_PropertyValue() override;
  explicit PROTOBUF_CONSTEXPR CommandSlideSetValueArchive_PropertyValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideSetValueArchive_PropertyValue(const CommandSlideSetValueArchive_PropertyValue& from);
  CommandSlideSetValueArchive_PropertyValue(CommandSlideSetValueArchive_PropertyValue&& from) noexcept
    : CommandSlideSetValueArchive_PropertyValue() {
    *this = ::std::move(from);
  }

  inline CommandSlideSetValueArchive_PropertyValue& operator=(const CommandSlideSetValueArchive_PropertyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideSetValueArchive_PropertyValue& operator=(CommandSlideSetValueArchive_PropertyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideSetValueArchive_PropertyValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideSetValueArchive_PropertyValue* internal_default_instance() {
    return reinterpret_cast<const CommandSlideSetValueArchive_PropertyValue*>(
               &_CommandSlideSetValueArchive_PropertyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CommandSlideSetValueArchive_PropertyValue& a, CommandSlideSetValueArchive_PropertyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideSetValueArchive_PropertyValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideSetValueArchive_PropertyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSlideSetValueArchive_PropertyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSlideSetValueArchive_PropertyValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideSetValueArchive_PropertyValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSlideSetValueArchive_PropertyValue& from) {
    CommandSlideSetValueArchive_PropertyValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideSetValueArchive_PropertyValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideSetValueArchive.PropertyValue";
  }
  protected:
  explicit CommandSlideSetValueArchive_PropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectValueFieldNumber = 2,
    kFillFieldNumber = 3,
    kBoolValueFieldNumber = 1,
  };
  // optional .TSP.Reference objectValue = 2;
  bool has_objectvalue() const;
  private:
  bool _internal_has_objectvalue() const;
  public:
  void clear_objectvalue();
  const ::TSP::Reference& objectvalue() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_objectvalue();
  ::TSP::Reference* mutable_objectvalue();
  void set_allocated_objectvalue(::TSP::Reference* objectvalue);
  private:
  const ::TSP::Reference& _internal_objectvalue() const;
  ::TSP::Reference* _internal_mutable_objectvalue();
  public:
  void unsafe_arena_set_allocated_objectvalue(
      ::TSP::Reference* objectvalue);
  ::TSP::Reference* unsafe_arena_release_objectvalue();

  // optional .TSD.FillArchive fill = 3;
  bool has_fill() const;
  private:
  bool _internal_has_fill() const;
  public:
  void clear_fill();
  const ::TSD::FillArchive& fill() const;
  PROTOBUF_NODISCARD ::TSD::FillArchive* release_fill();
  ::TSD::FillArchive* mutable_fill();
  void set_allocated_fill(::TSD::FillArchive* fill);
  private:
  const ::TSD::FillArchive& _internal_fill() const;
  ::TSD::FillArchive* _internal_mutable_fill();
  public:
  void unsafe_arena_set_allocated_fill(
      ::TSD::FillArchive* fill);
  ::TSD::FillArchive* unsafe_arena_release_fill();

  // optional bool boolValue = 1;
  bool has_boolvalue() const;
  private:
  bool _internal_has_boolvalue() const;
  public:
  void clear_boolvalue();
  bool boolvalue() const;
  void set_boolvalue(bool value);
  private:
  bool _internal_boolvalue() const;
  void _internal_set_boolvalue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandSlideSetValueArchive.PropertyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* objectvalue_;
    ::TSD::FillArchive* fill_;
    bool boolvalue_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideSetValueArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideSetValueArchive) */ {
 public:
  inline CommandSlideSetValueArchive() : CommandSlideSetValueArchive(nullptr) {}
  ~CommandSlideSetValueArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSlideSetValueArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideSetValueArchive(const CommandSlideSetValueArchive& from);
  CommandSlideSetValueArchive(CommandSlideSetValueArchive&& from) noexcept
    : CommandSlideSetValueArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideSetValueArchive& operator=(const CommandSlideSetValueArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideSetValueArchive& operator=(CommandSlideSetValueArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideSetValueArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideSetValueArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideSetValueArchive*>(
               &_CommandSlideSetValueArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CommandSlideSetValueArchive& a, CommandSlideSetValueArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideSetValueArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideSetValueArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSlideSetValueArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSlideSetValueArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideSetValueArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSlideSetValueArchive& from) {
    CommandSlideSetValueArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideSetValueArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideSetValueArchive";
  }
  protected:
  explicit CommandSlideSetValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandSlideSetValueArchive_PropertyValue PropertyValue;

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyFieldNumber = 3,
    kSuperFieldNumber = 1,
    kSlideFieldNumber = 2,
    kOldValueFieldNumber = 4,
    kNewValueFieldNumber = 5,
    kOldSlideStyleFieldNumber = 6,
  };
  // required string property = 3;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const std::string& property() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* property);
  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(const std::string& value);
  std::string* _internal_mutable_property();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference slide = 2;
  bool has_slide() const;
  private:
  bool _internal_has_slide() const;
  public:
  void clear_slide();
  const ::TSP::Reference& slide() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_slide();
  ::TSP::Reference* mutable_slide();
  void set_allocated_slide(::TSP::Reference* slide);
  private:
  const ::TSP::Reference& _internal_slide() const;
  ::TSP::Reference* _internal_mutable_slide();
  public:
  void unsafe_arena_set_allocated_slide(
      ::TSP::Reference* slide);
  ::TSP::Reference* unsafe_arena_release_slide();

  // required .KN.CommandSlideSetValueArchive.PropertyValue oldValue = 4;
  bool has_oldvalue() const;
  private:
  bool _internal_has_oldvalue() const;
  public:
  void clear_oldvalue();
  const ::KN::CommandSlideSetValueArchive_PropertyValue& oldvalue() const;
  PROTOBUF_NODISCARD ::KN::CommandSlideSetValueArchive_PropertyValue* release_oldvalue();
  ::KN::CommandSlideSetValueArchive_PropertyValue* mutable_oldvalue();
  void set_allocated_oldvalue(::KN::CommandSlideSetValueArchive_PropertyValue* oldvalue);
  private:
  const ::KN::CommandSlideSetValueArchive_PropertyValue& _internal_oldvalue() const;
  ::KN::CommandSlideSetValueArchive_PropertyValue* _internal_mutable_oldvalue();
  public:
  void unsafe_arena_set_allocated_oldvalue(
      ::KN::CommandSlideSetValueArchive_PropertyValue* oldvalue);
  ::KN::CommandSlideSetValueArchive_PropertyValue* unsafe_arena_release_oldvalue();

  // required .KN.CommandSlideSetValueArchive.PropertyValue newValue = 5;
  bool has_newvalue() const;
  private:
  bool _internal_has_newvalue() const;
  public:
  void clear_newvalue();
  const ::KN::CommandSlideSetValueArchive_PropertyValue& newvalue() const;
  PROTOBUF_NODISCARD ::KN::CommandSlideSetValueArchive_PropertyValue* release_newvalue();
  ::KN::CommandSlideSetValueArchive_PropertyValue* mutable_newvalue();
  void set_allocated_newvalue(::KN::CommandSlideSetValueArchive_PropertyValue* newvalue);
  private:
  const ::KN::CommandSlideSetValueArchive_PropertyValue& _internal_newvalue() const;
  ::KN::CommandSlideSetValueArchive_PropertyValue* _internal_mutable_newvalue();
  public:
  void unsafe_arena_set_allocated_newvalue(
      ::KN::CommandSlideSetValueArchive_PropertyValue* newvalue);
  ::KN::CommandSlideSetValueArchive_PropertyValue* unsafe_arena_release_newvalue();

  // required .TSP.Reference oldSlideStyle = 6;
  bool has_oldslidestyle() const;
  private:
  bool _internal_has_oldslidestyle() const;
  public:
  void clear_oldslidestyle();
  const ::TSP::Reference& oldslidestyle() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_oldslidestyle();
  ::TSP::Reference* mutable_oldslidestyle();
  void set_allocated_oldslidestyle(::TSP::Reference* oldslidestyle);
  private:
  const ::TSP::Reference& _internal_oldslidestyle() const;
  ::TSP::Reference* _internal_mutable_oldslidestyle();
  public:
  void unsafe_arena_set_allocated_oldslidestyle(
      ::TSP::Reference* oldslidestyle);
  ::TSP::Reference* unsafe_arena_release_oldslidestyle();

  // @@protoc_insertion_point(class_scope:KN.CommandSlideSetValueArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* slide_;
    ::KN::CommandSlideSetValueArchive_PropertyValue* oldvalue_;
    ::KN::CommandSlideSetValueArchive_PropertyValue* newvalue_;
    ::TSP::Reference* oldslidestyle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideSetStyleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideSetStyleArchive) */ {
 public:
  inline CommandSlideSetStyleArchive() : CommandSlideSetStyleArchive(nullptr) {}
  ~CommandSlideSetStyleArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSlideSetStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideSetStyleArchive(const CommandSlideSetStyleArchive& from);
  CommandSlideSetStyleArchive(CommandSlideSetStyleArchive&& from) noexcept
    : CommandSlideSetStyleArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideSetStyleArchive& operator=(const CommandSlideSetStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideSetStyleArchive& operator=(CommandSlideSetStyleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideSetStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideSetStyleArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideSetStyleArchive*>(
               &_CommandSlideSetStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CommandSlideSetStyleArchive& a, CommandSlideSetStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideSetStyleArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideSetStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSlideSetStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSlideSetStyleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideSetStyleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSlideSetStyleArchive& from) {
    CommandSlideSetStyleArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideSetStyleArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideSetStyleArchive";
  }
  protected:
  explicit CommandSlideSetStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSlideFieldNumber = 2,
    kSlideStyleFieldNumber = 3,
    kOldSlideStyleFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference slide = 2;
  bool has_slide() const;
  private:
  bool _internal_has_slide() const;
  public:
  void clear_slide();
  const ::TSP::Reference& slide() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_slide();
  ::TSP::Reference* mutable_slide();
  void set_allocated_slide(::TSP::Reference* slide);
  private:
  const ::TSP::Reference& _internal_slide() const;
  ::TSP::Reference* _internal_mutable_slide();
  public:
  void unsafe_arena_set_allocated_slide(
      ::TSP::Reference* slide);
  ::TSP::Reference* unsafe_arena_release_slide();

  // required .TSP.Reference slide_style = 3;
  bool has_slide_style() const;
  private:
  bool _internal_has_slide_style() const;
  public:
  void clear_slide_style();
  const ::TSP::Reference& slide_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_slide_style();
  ::TSP::Reference* mutable_slide_style();
  void set_allocated_slide_style(::TSP::Reference* slide_style);
  private:
  const ::TSP::Reference& _internal_slide_style() const;
  ::TSP::Reference* _internal_mutable_slide_style();
  public:
  void unsafe_arena_set_allocated_slide_style(
      ::TSP::Reference* slide_style);
  ::TSP::Reference* unsafe_arena_release_slide_style();

  // required .TSP.Reference old_slide_style = 4;
  bool has_old_slide_style() const;
  private:
  bool _internal_has_old_slide_style() const;
  public:
  void clear_old_slide_style();
  const ::TSP::Reference& old_slide_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_old_slide_style();
  ::TSP::Reference* mutable_old_slide_style();
  void set_allocated_old_slide_style(::TSP::Reference* old_slide_style);
  private:
  const ::TSP::Reference& _internal_old_slide_style() const;
  ::TSP::Reference* _internal_mutable_old_slide_style();
  public:
  void unsafe_arena_set_allocated_old_slide_style(
      ::TSP::Reference* old_slide_style);
  ::TSP::Reference* unsafe_arena_release_old_slide_style();

  // @@protoc_insertion_point(class_scope:KN.CommandSlideSetStyleArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* slide_;
    ::TSP::Reference* slide_style_;
    ::TSP::Reference* old_slide_style_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandShowMarkOutOfSyncRecordingArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandShowMarkOutOfSyncRecordingArchive) */ {
 public:
  inline CommandShowMarkOutOfSyncRecordingArchive() : CommandShowMarkOutOfSyncRecordingArchive(nullptr) {}
  ~CommandShowMarkOutOfSyncRecordingArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandShowMarkOutOfSyncRecordingArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandShowMarkOutOfSyncRecordingArchive(const CommandShowMarkOutOfSyncRecordingArchive& from);
  CommandShowMarkOutOfSyncRecordingArchive(CommandShowMarkOutOfSyncRecordingArchive&& from) noexcept
    : CommandShowMarkOutOfSyncRecordingArchive() {
    *this = ::std::move(from);
  }

  inline CommandShowMarkOutOfSyncRecordingArchive& operator=(const CommandShowMarkOutOfSyncRecordingArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandShowMarkOutOfSyncRecordingArchive& operator=(CommandShowMarkOutOfSyncRecordingArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandShowMarkOutOfSyncRecordingArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandShowMarkOutOfSyncRecordingArchive* internal_default_instance() {
    return reinterpret_cast<const CommandShowMarkOutOfSyncRecordingArchive*>(
               &_CommandShowMarkOutOfSyncRecordingArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CommandShowMarkOutOfSyncRecordingArchive& a, CommandShowMarkOutOfSyncRecordingArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandShowMarkOutOfSyncRecordingArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandShowMarkOutOfSyncRecordingArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandShowMarkOutOfSyncRecordingArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandShowMarkOutOfSyncRecordingArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandShowMarkOutOfSyncRecordingArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandShowMarkOutOfSyncRecordingArchive& from) {
    CommandShowMarkOutOfSyncRecordingArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandShowMarkOutOfSyncRecordingArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandShowMarkOutOfSyncRecordingArchive";
  }
  protected:
  explicit CommandShowMarkOutOfSyncRecordingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kShowFieldNumber = 2,
    kOldRecordingFieldNumber = 3,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference show = 2;
  bool has_show() const;
  private:
  bool _internal_has_show() const;
  public:
  void clear_show();
  const ::TSP::Reference& show() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_show();
  ::TSP::Reference* mutable_show();
  void set_allocated_show(::TSP::Reference* show);
  private:
  const ::TSP::Reference& _internal_show() const;
  ::TSP::Reference* _internal_mutable_show();
  public:
  void unsafe_arena_set_allocated_show(
      ::TSP::Reference* show);
  ::TSP::Reference* unsafe_arena_release_show();

  // optional .TSP.Reference old_recording = 3;
  bool has_old_recording() const;
  private:
  bool _internal_has_old_recording() const;
  public:
  void clear_old_recording();
  const ::TSP::Reference& old_recording() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_old_recording();
  ::TSP::Reference* mutable_old_recording();
  void set_allocated_old_recording(::TSP::Reference* old_recording);
  private:
  const ::TSP::Reference& _internal_old_recording() const;
  ::TSP::Reference* _internal_mutable_old_recording();
  public:
  void unsafe_arena_set_allocated_old_recording(
      ::TSP::Reference* old_recording);
  ::TSP::Reference* unsafe_arena_release_old_recording();

  // @@protoc_insertion_point(class_scope:KN.CommandShowMarkOutOfSyncRecordingArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* show_;
    ::TSP::Reference* old_recording_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandShowRemoveRecordingArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandShowRemoveRecordingArchive) */ {
 public:
  inline CommandShowRemoveRecordingArchive() : CommandShowRemoveRecordingArchive(nullptr) {}
  ~CommandShowRemoveRecordingArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandShowRemoveRecordingArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandShowRemoveRecordingArchive(const CommandShowRemoveRecordingArchive& from);
  CommandShowRemoveRecordingArchive(CommandShowRemoveRecordingArchive&& from) noexcept
    : CommandShowRemoveRecordingArchive() {
    *this = ::std::move(from);
  }

  inline CommandShowRemoveRecordingArchive& operator=(const CommandShowRemoveRecordingArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandShowRemoveRecordingArchive& operator=(CommandShowRemoveRecordingArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandShowRemoveRecordingArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandShowRemoveRecordingArchive* internal_default_instance() {
    return reinterpret_cast<const CommandShowRemoveRecordingArchive*>(
               &_CommandShowRemoveRecordingArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CommandShowRemoveRecordingArchive& a, CommandShowRemoveRecordingArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandShowRemoveRecordingArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandShowRemoveRecordingArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandShowRemoveRecordingArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandShowRemoveRecordingArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandShowRemoveRecordingArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandShowRemoveRecordingArchive& from) {
    CommandShowRemoveRecordingArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandShowRemoveRecordingArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandShowRemoveRecordingArchive";
  }
  protected:
  explicit CommandShowRemoveRecordingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kShowFieldNumber = 2,
    kOldRecordingFieldNumber = 3,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference show = 2;
  bool has_show() const;
  private:
  bool _internal_has_show() const;
  public:
  void clear_show();
  const ::TSP::Reference& show() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_show();
  ::TSP::Reference* mutable_show();
  void set_allocated_show(::TSP::Reference* show);
  private:
  const ::TSP::Reference& _internal_show() const;
  ::TSP::Reference* _internal_mutable_show();
  public:
  void unsafe_arena_set_allocated_show(
      ::TSP::Reference* show);
  ::TSP::Reference* unsafe_arena_release_show();

  // optional .TSP.Reference old_recording = 3;
  bool has_old_recording() const;
  private:
  bool _internal_has_old_recording() const;
  public:
  void clear_old_recording();
  const ::TSP::Reference& old_recording() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_old_recording();
  ::TSP::Reference* mutable_old_recording();
  void set_allocated_old_recording(::TSP::Reference* old_recording);
  private:
  const ::TSP::Reference& _internal_old_recording() const;
  ::TSP::Reference* _internal_mutable_old_recording();
  public:
  void unsafe_arena_set_allocated_old_recording(
      ::TSP::Reference* old_recording);
  ::TSP::Reference* unsafe_arena_release_old_recording();

  // @@protoc_insertion_point(class_scope:KN.CommandShowRemoveRecordingArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* show_;
    ::TSP::Reference* old_recording_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandShowReplaceRecordingArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandShowReplaceRecordingArchive) */ {
 public:
  inline CommandShowReplaceRecordingArchive() : CommandShowReplaceRecordingArchive(nullptr) {}
  ~CommandShowReplaceRecordingArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandShowReplaceRecordingArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandShowReplaceRecordingArchive(const CommandShowReplaceRecordingArchive& from);
  CommandShowReplaceRecordingArchive(CommandShowReplaceRecordingArchive&& from) noexcept
    : CommandShowReplaceRecordingArchive() {
    *this = ::std::move(from);
  }

  inline CommandShowReplaceRecordingArchive& operator=(const CommandShowReplaceRecordingArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandShowReplaceRecordingArchive& operator=(CommandShowReplaceRecordingArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandShowReplaceRecordingArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandShowReplaceRecordingArchive* internal_default_instance() {
    return reinterpret_cast<const CommandShowReplaceRecordingArchive*>(
               &_CommandShowReplaceRecordingArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CommandShowReplaceRecordingArchive& a, CommandShowReplaceRecordingArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandShowReplaceRecordingArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandShowReplaceRecordingArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandShowReplaceRecordingArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandShowReplaceRecordingArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandShowReplaceRecordingArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandShowReplaceRecordingArchive& from) {
    CommandShowReplaceRecordingArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandShowReplaceRecordingArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandShowReplaceRecordingArchive";
  }
  protected:
  explicit CommandShowReplaceRecordingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kShowFieldNumber = 2,
    kReplacementRecordingFieldNumber = 3,
    kOldRecordingFieldNumber = 5,
    kReplacementStartTimeFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference show = 2;
  bool has_show() const;
  private:
  bool _internal_has_show() const;
  public:
  void clear_show();
  const ::TSP::Reference& show() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_show();
  ::TSP::Reference* mutable_show();
  void set_allocated_show(::TSP::Reference* show);
  private:
  const ::TSP::Reference& _internal_show() const;
  ::TSP::Reference* _internal_mutable_show();
  public:
  void unsafe_arena_set_allocated_show(
      ::TSP::Reference* show);
  ::TSP::Reference* unsafe_arena_release_show();

  // required .TSP.Reference replacement_recording = 3;
  bool has_replacement_recording() const;
  private:
  bool _internal_has_replacement_recording() const;
  public:
  void clear_replacement_recording();
  const ::TSP::Reference& replacement_recording() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_replacement_recording();
  ::TSP::Reference* mutable_replacement_recording();
  void set_allocated_replacement_recording(::TSP::Reference* replacement_recording);
  private:
  const ::TSP::Reference& _internal_replacement_recording() const;
  ::TSP::Reference* _internal_mutable_replacement_recording();
  public:
  void unsafe_arena_set_allocated_replacement_recording(
      ::TSP::Reference* replacement_recording);
  ::TSP::Reference* unsafe_arena_release_replacement_recording();

  // optional .TSP.Reference old_recording = 5;
  bool has_old_recording() const;
  private:
  bool _internal_has_old_recording() const;
  public:
  void clear_old_recording();
  const ::TSP::Reference& old_recording() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_old_recording();
  ::TSP::Reference* mutable_old_recording();
  void set_allocated_old_recording(::TSP::Reference* old_recording);
  private:
  const ::TSP::Reference& _internal_old_recording() const;
  ::TSP::Reference* _internal_mutable_old_recording();
  public:
  void unsafe_arena_set_allocated_old_recording(
      ::TSP::Reference* old_recording);
  ::TSP::Reference* unsafe_arena_release_old_recording();

  // required double replacement_start_time = 4;
  bool has_replacement_start_time() const;
  private:
  bool _internal_has_replacement_start_time() const;
  public:
  void clear_replacement_start_time();
  double replacement_start_time() const;
  void set_replacement_start_time(double value);
  private:
  double _internal_replacement_start_time() const;
  void _internal_set_replacement_start_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandShowReplaceRecordingArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* show_;
    ::TSP::Reference* replacement_recording_;
    ::TSP::Reference* old_recording_;
    double replacement_start_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandShowSetValueArchive_PropertyValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandShowSetValueArchive.PropertyValue) */ {
 public:
  inline CommandShowSetValueArchive_PropertyValue() : CommandShowSetValueArchive_PropertyValue(nullptr) {}
  ~CommandShowSetValueArchive_PropertyValue() override;
  explicit PROTOBUF_CONSTEXPR CommandShowSetValueArchive_PropertyValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandShowSetValueArchive_PropertyValue(const CommandShowSetValueArchive_PropertyValue& from);
  CommandShowSetValueArchive_PropertyValue(CommandShowSetValueArchive_PropertyValue&& from) noexcept
    : CommandShowSetValueArchive_PropertyValue() {
    *this = ::std::move(from);
  }

  inline CommandShowSetValueArchive_PropertyValue& operator=(const CommandShowSetValueArchive_PropertyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandShowSetValueArchive_PropertyValue& operator=(CommandShowSetValueArchive_PropertyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandShowSetValueArchive_PropertyValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandShowSetValueArchive_PropertyValue* internal_default_instance() {
    return reinterpret_cast<const CommandShowSetValueArchive_PropertyValue*>(
               &_CommandShowSetValueArchive_PropertyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CommandShowSetValueArchive_PropertyValue& a, CommandShowSetValueArchive_PropertyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandShowSetValueArchive_PropertyValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandShowSetValueArchive_PropertyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandShowSetValueArchive_PropertyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandShowSetValueArchive_PropertyValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandShowSetValueArchive_PropertyValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandShowSetValueArchive_PropertyValue& from) {
    CommandShowSetValueArchive_PropertyValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandShowSetValueArchive_PropertyValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandShowSetValueArchive.PropertyValue";
  }
  protected:
  explicit CommandShowSetValueArchive_PropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeValueFieldNumber = 4,
    kDoubleValueFieldNumber = 2,
    kBoolValueFieldNumber = 1,
    kShowModeValueFieldNumber = 3,
  };
  // optional .TSP.Size size_value = 4;
  bool has_size_value() const;
  private:
  bool _internal_has_size_value() const;
  public:
  void clear_size_value();
  const ::TSP::Size& size_value() const;
  PROTOBUF_NODISCARD ::TSP::Size* release_size_value();
  ::TSP::Size* mutable_size_value();
  void set_allocated_size_value(::TSP::Size* size_value);
  private:
  const ::TSP::Size& _internal_size_value() const;
  ::TSP::Size* _internal_mutable_size_value();
  public:
  void unsafe_arena_set_allocated_size_value(
      ::TSP::Size* size_value);
  ::TSP::Size* unsafe_arena_release_size_value();

  // optional double double_value = 2;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // optional bool bool_value = 1;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // optional .KN.ShowArchive.KNShowMode show_mode_value = 3;
  bool has_show_mode_value() const;
  private:
  bool _internal_has_show_mode_value() const;
  public:
  void clear_show_mode_value();
  ::KN::ShowArchive_KNShowMode show_mode_value() const;
  void set_show_mode_value(::KN::ShowArchive_KNShowMode value);
  private:
  ::KN::ShowArchive_KNShowMode _internal_show_mode_value() const;
  void _internal_set_show_mode_value(::KN::ShowArchive_KNShowMode value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandShowSetValueArchive.PropertyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Size* size_value_;
    double double_value_;
    bool bool_value_;
    int show_mode_value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandShowSetValueArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandShowSetValueArchive) */ {
 public:
  inline CommandShowSetValueArchive() : CommandShowSetValueArchive(nullptr) {}
  ~CommandShowSetValueArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandShowSetValueArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandShowSetValueArchive(const CommandShowSetValueArchive& from);
  CommandShowSetValueArchive(CommandShowSetValueArchive&& from) noexcept
    : CommandShowSetValueArchive() {
    *this = ::std::move(from);
  }

  inline CommandShowSetValueArchive& operator=(const CommandShowSetValueArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandShowSetValueArchive& operator=(CommandShowSetValueArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandShowSetValueArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandShowSetValueArchive* internal_default_instance() {
    return reinterpret_cast<const CommandShowSetValueArchive*>(
               &_CommandShowSetValueArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CommandShowSetValueArchive& a, CommandShowSetValueArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandShowSetValueArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandShowSetValueArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandShowSetValueArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandShowSetValueArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandShowSetValueArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandShowSetValueArchive& from) {
    CommandShowSetValueArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandShowSetValueArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandShowSetValueArchive";
  }
  protected:
  explicit CommandShowSetValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandShowSetValueArchive_PropertyValue PropertyValue;

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyFieldNumber = 3,
    kSuperFieldNumber = 1,
    kShowFieldNumber = 2,
    kOldValueFieldNumber = 4,
    kNewValueFieldNumber = 5,
  };
  // required string property = 3;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const std::string& property() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* property);
  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(const std::string& value);
  std::string* _internal_mutable_property();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference show = 2;
  bool has_show() const;
  private:
  bool _internal_has_show() const;
  public:
  void clear_show();
  const ::TSP::Reference& show() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_show();
  ::TSP::Reference* mutable_show();
  void set_allocated_show(::TSP::Reference* show);
  private:
  const ::TSP::Reference& _internal_show() const;
  ::TSP::Reference* _internal_mutable_show();
  public:
  void unsafe_arena_set_allocated_show(
      ::TSP::Reference* show);
  ::TSP::Reference* unsafe_arena_release_show();

  // required .KN.CommandShowSetValueArchive.PropertyValue old_value = 4;
  bool has_old_value() const;
  private:
  bool _internal_has_old_value() const;
  public:
  void clear_old_value();
  const ::KN::CommandShowSetValueArchive_PropertyValue& old_value() const;
  PROTOBUF_NODISCARD ::KN::CommandShowSetValueArchive_PropertyValue* release_old_value();
  ::KN::CommandShowSetValueArchive_PropertyValue* mutable_old_value();
  void set_allocated_old_value(::KN::CommandShowSetValueArchive_PropertyValue* old_value);
  private:
  const ::KN::CommandShowSetValueArchive_PropertyValue& _internal_old_value() const;
  ::KN::CommandShowSetValueArchive_PropertyValue* _internal_mutable_old_value();
  public:
  void unsafe_arena_set_allocated_old_value(
      ::KN::CommandShowSetValueArchive_PropertyValue* old_value);
  ::KN::CommandShowSetValueArchive_PropertyValue* unsafe_arena_release_old_value();

  // required .KN.CommandShowSetValueArchive.PropertyValue new_value = 5;
  bool has_new_value() const;
  private:
  bool _internal_has_new_value() const;
  public:
  void clear_new_value();
  const ::KN::CommandShowSetValueArchive_PropertyValue& new_value() const;
  PROTOBUF_NODISCARD ::KN::CommandShowSetValueArchive_PropertyValue* release_new_value();
  ::KN::CommandShowSetValueArchive_PropertyValue* mutable_new_value();
  void set_allocated_new_value(::KN::CommandShowSetValueArchive_PropertyValue* new_value);
  private:
  const ::KN::CommandShowSetValueArchive_PropertyValue& _internal_new_value() const;
  ::KN::CommandShowSetValueArchive_PropertyValue* _internal_mutable_new_value();
  public:
  void unsafe_arena_set_allocated_new_value(
      ::KN::CommandShowSetValueArchive_PropertyValue* new_value);
  ::KN::CommandShowSetValueArchive_PropertyValue* unsafe_arena_release_new_value();

  // @@protoc_insertion_point(class_scope:KN.CommandShowSetValueArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* show_;
    ::KN::CommandShowSetValueArchive_PropertyValue* old_value_;
    ::KN::CommandShowSetValueArchive_PropertyValue* new_value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandShowInsertSlideArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandShowInsertSlideArchive) */ {
 public:
  inline CommandShowInsertSlideArchive() : CommandShowInsertSlideArchive(nullptr) {}
  ~CommandShowInsertSlideArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandShowInsertSlideArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandShowInsertSlideArchive(const CommandShowInsertSlideArchive& from);
  CommandShowInsertSlideArchive(CommandShowInsertSlideArchive&& from) noexcept
    : CommandShowInsertSlideArchive() {
    *this = ::std::move(from);
  }

  inline CommandShowInsertSlideArchive& operator=(const CommandShowInsertSlideArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandShowInsertSlideArchive& operator=(CommandShowInsertSlideArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandShowInsertSlideArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandShowInsertSlideArchive* internal_default_instance() {
    return reinterpret_cast<const CommandShowInsertSlideArchive*>(
               &_CommandShowInsertSlideArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CommandShowInsertSlideArchive& a, CommandShowInsertSlideArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandShowInsertSlideArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandShowInsertSlideArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandShowInsertSlideArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandShowInsertSlideArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandShowInsertSlideArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandShowInsertSlideArchive& from) {
    CommandShowInsertSlideArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandShowInsertSlideArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandShowInsertSlideArchive";
  }
  protected:
  explicit CommandShowInsertSlideArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandShowInsertSlideArchive_Kind Kind;
  static constexpr Kind kKindInsertSlide =
    CommandShowInsertSlideArchive_Kind_kKindInsertSlide;
  static constexpr Kind kKindInsertSlideForPaste =
    CommandShowInsertSlideArchive_Kind_kKindInsertSlideForPaste;
  static constexpr Kind kKindInsertSlideForDuplicate =
    CommandShowInsertSlideArchive_Kind_kKindInsertSlideForDuplicate;
  static inline bool Kind_IsValid(int value) {
    return CommandShowInsertSlideArchive_Kind_IsValid(value);
  }
  static constexpr Kind Kind_MIN =
    CommandShowInsertSlideArchive_Kind_Kind_MIN;
  static constexpr Kind Kind_MAX =
    CommandShowInsertSlideArchive_Kind_Kind_MAX;
  static constexpr int Kind_ARRAYSIZE =
    CommandShowInsertSlideArchive_Kind_Kind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Kind_descriptor() {
    return CommandShowInsertSlideArchive_Kind_descriptor();
  }
  template<typename T>
  static inline const std::string& Kind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Kind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Kind_Name.");
    return CommandShowInsertSlideArchive_Kind_Name(enum_t_value);
  }
  static inline bool Kind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Kind* value) {
    return CommandShowInsertSlideArchive_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kShowFieldNumber = 2,
    kSlideNodeFieldNumber = 3,
    kParentSlideNodeFieldNumber = 5,
    kChildIndexFieldNumber = 4,
    kKindFieldNumber = 6,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference show = 2;
  bool has_show() const;
  private:
  bool _internal_has_show() const;
  public:
  void clear_show();
  const ::TSP::Reference& show() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_show();
  ::TSP::Reference* mutable_show();
  void set_allocated_show(::TSP::Reference* show);
  private:
  const ::TSP::Reference& _internal_show() const;
  ::TSP::Reference* _internal_mutable_show();
  public:
  void unsafe_arena_set_allocated_show(
      ::TSP::Reference* show);
  ::TSP::Reference* unsafe_arena_release_show();

  // required .TSP.Reference slideNode = 3;
  bool has_slidenode() const;
  private:
  bool _internal_has_slidenode() const;
  public:
  void clear_slidenode();
  const ::TSP::Reference& slidenode() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_slidenode();
  ::TSP::Reference* mutable_slidenode();
  void set_allocated_slidenode(::TSP::Reference* slidenode);
  private:
  const ::TSP::Reference& _internal_slidenode() const;
  ::TSP::Reference* _internal_mutable_slidenode();
  public:
  void unsafe_arena_set_allocated_slidenode(
      ::TSP::Reference* slidenode);
  ::TSP::Reference* unsafe_arena_release_slidenode();

  // required .TSP.Reference parentSlideNode = 5;
  bool has_parentslidenode() const;
  private:
  bool _internal_has_parentslidenode() const;
  public:
  void clear_parentslidenode();
  const ::TSP::Reference& parentslidenode() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_parentslidenode();
  ::TSP::Reference* mutable_parentslidenode();
  void set_allocated_parentslidenode(::TSP::Reference* parentslidenode);
  private:
  const ::TSP::Reference& _internal_parentslidenode() const;
  ::TSP::Reference* _internal_mutable_parentslidenode();
  public:
  void unsafe_arena_set_allocated_parentslidenode(
      ::TSP::Reference* parentslidenode);
  ::TSP::Reference* unsafe_arena_release_parentslidenode();

  // required uint32 childIndex = 4;
  bool has_childindex() const;
  private:
  bool _internal_has_childindex() const;
  public:
  void clear_childindex();
  uint32_t childindex() const;
  void set_childindex(uint32_t value);
  private:
  uint32_t _internal_childindex() const;
  void _internal_set_childindex(uint32_t value);
  public:

  // optional .KN.CommandShowInsertSlideArchive.Kind kind = 6 [default = kKindInsertSlide];
  bool has_kind() const;
  private:
  bool _internal_has_kind() const;
  public:
  void clear_kind();
  ::KN::CommandShowInsertSlideArchive_Kind kind() const;
  void set_kind(::KN::CommandShowInsertSlideArchive_Kind value);
  private:
  ::KN::CommandShowInsertSlideArchive_Kind _internal_kind() const;
  void _internal_set_kind(::KN::CommandShowInsertSlideArchive_Kind value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandShowInsertSlideArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* show_;
    ::TSP::Reference* slidenode_;
    ::TSP::Reference* parentslidenode_;
    uint32_t childindex_;
    int kind_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandShowMoveSlideArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandShowMoveSlideArchive) */ {
 public:
  inline CommandShowMoveSlideArchive() : CommandShowMoveSlideArchive(nullptr) {}
  ~CommandShowMoveSlideArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandShowMoveSlideArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandShowMoveSlideArchive(const CommandShowMoveSlideArchive& from);
  CommandShowMoveSlideArchive(CommandShowMoveSlideArchive&& from) noexcept
    : CommandShowMoveSlideArchive() {
    *this = ::std::move(from);
  }

  inline CommandShowMoveSlideArchive& operator=(const CommandShowMoveSlideArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandShowMoveSlideArchive& operator=(CommandShowMoveSlideArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandShowMoveSlideArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandShowMoveSlideArchive* internal_default_instance() {
    return reinterpret_cast<const CommandShowMoveSlideArchive*>(
               &_CommandShowMoveSlideArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CommandShowMoveSlideArchive& a, CommandShowMoveSlideArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandShowMoveSlideArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandShowMoveSlideArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandShowMoveSlideArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandShowMoveSlideArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandShowMoveSlideArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandShowMoveSlideArchive& from) {
    CommandShowMoveSlideArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandShowMoveSlideArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandShowMoveSlideArchive";
  }
  protected:
  explicit CommandShowMoveSlideArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentSlideNodesFieldNumber = 4,
    kChildIndicesFieldNumber = 5,
    kSuperFieldNumber = 1,
    kShowFieldNumber = 2,
    kSlideNodeFieldNumber = 3,
  };
  // repeated .TSP.Reference parentSlideNodes = 4;
  int parentslidenodes_size() const;
  private:
  int _internal_parentslidenodes_size() const;
  public:
  void clear_parentslidenodes();
  ::TSP::Reference* mutable_parentslidenodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_parentslidenodes();
  private:
  const ::TSP::Reference& _internal_parentslidenodes(int index) const;
  ::TSP::Reference* _internal_add_parentslidenodes();
  public:
  const ::TSP::Reference& parentslidenodes(int index) const;
  ::TSP::Reference* add_parentslidenodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      parentslidenodes() const;

  // repeated uint32 childIndices = 5;
  int childindices_size() const;
  private:
  int _internal_childindices_size() const;
  public:
  void clear_childindices();
  private:
  uint32_t _internal_childindices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_childindices() const;
  void _internal_add_childindices(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_childindices();
  public:
  uint32_t childindices(int index) const;
  void set_childindices(int index, uint32_t value);
  void add_childindices(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      childindices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_childindices();

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference show = 2;
  bool has_show() const;
  private:
  bool _internal_has_show() const;
  public:
  void clear_show();
  const ::TSP::Reference& show() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_show();
  ::TSP::Reference* mutable_show();
  void set_allocated_show(::TSP::Reference* show);
  private:
  const ::TSP::Reference& _internal_show() const;
  ::TSP::Reference* _internal_mutable_show();
  public:
  void unsafe_arena_set_allocated_show(
      ::TSP::Reference* show);
  ::TSP::Reference* unsafe_arena_release_show();

  // required .TSP.Reference slideNode = 3;
  bool has_slidenode() const;
  private:
  bool _internal_has_slidenode() const;
  public:
  void clear_slidenode();
  const ::TSP::Reference& slidenode() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_slidenode();
  ::TSP::Reference* mutable_slidenode();
  void set_allocated_slidenode(::TSP::Reference* slidenode);
  private:
  const ::TSP::Reference& _internal_slidenode() const;
  ::TSP::Reference* _internal_mutable_slidenode();
  public:
  void unsafe_arena_set_allocated_slidenode(
      ::TSP::Reference* slidenode);
  ::TSP::Reference* unsafe_arena_release_slidenode();

  // @@protoc_insertion_point(class_scope:KN.CommandShowMoveSlideArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > parentslidenodes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > childindices_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* show_;
    ::TSP::Reference* slidenode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandShowRemoveSlideArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandShowRemoveSlideArchive) */ {
 public:
  inline CommandShowRemoveSlideArchive() : CommandShowRemoveSlideArchive(nullptr) {}
  ~CommandShowRemoveSlideArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandShowRemoveSlideArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandShowRemoveSlideArchive(const CommandShowRemoveSlideArchive& from);
  CommandShowRemoveSlideArchive(CommandShowRemoveSlideArchive&& from) noexcept
    : CommandShowRemoveSlideArchive() {
    *this = ::std::move(from);
  }

  inline CommandShowRemoveSlideArchive& operator=(const CommandShowRemoveSlideArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandShowRemoveSlideArchive& operator=(CommandShowRemoveSlideArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandShowRemoveSlideArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandShowRemoveSlideArchive* internal_default_instance() {
    return reinterpret_cast<const CommandShowRemoveSlideArchive*>(
               &_CommandShowRemoveSlideArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CommandShowRemoveSlideArchive& a, CommandShowRemoveSlideArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandShowRemoveSlideArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandShowRemoveSlideArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandShowRemoveSlideArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandShowRemoveSlideArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandShowRemoveSlideArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandShowRemoveSlideArchive& from) {
    CommandShowRemoveSlideArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandShowRemoveSlideArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandShowRemoveSlideArchive";
  }
  protected:
  explicit CommandShowRemoveSlideArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kShowFieldNumber = 2,
    kSlideNodeFieldNumber = 3,
    kParentSlideNodeFieldNumber = 4,
    kChildIndexFieldNumber = 5,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference show = 2;
  bool has_show() const;
  private:
  bool _internal_has_show() const;
  public:
  void clear_show();
  const ::TSP::Reference& show() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_show();
  ::TSP::Reference* mutable_show();
  void set_allocated_show(::TSP::Reference* show);
  private:
  const ::TSP::Reference& _internal_show() const;
  ::TSP::Reference* _internal_mutable_show();
  public:
  void unsafe_arena_set_allocated_show(
      ::TSP::Reference* show);
  ::TSP::Reference* unsafe_arena_release_show();

  // required .TSP.Reference slideNode = 3;
  bool has_slidenode() const;
  private:
  bool _internal_has_slidenode() const;
  public:
  void clear_slidenode();
  const ::TSP::Reference& slidenode() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_slidenode();
  ::TSP::Reference* mutable_slidenode();
  void set_allocated_slidenode(::TSP::Reference* slidenode);
  private:
  const ::TSP::Reference& _internal_slidenode() const;
  ::TSP::Reference* _internal_mutable_slidenode();
  public:
  void unsafe_arena_set_allocated_slidenode(
      ::TSP::Reference* slidenode);
  ::TSP::Reference* unsafe_arena_release_slidenode();

  // required .TSP.Reference parentSlideNode = 4;
  bool has_parentslidenode() const;
  private:
  bool _internal_has_parentslidenode() const;
  public:
  void clear_parentslidenode();
  const ::TSP::Reference& parentslidenode() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_parentslidenode();
  ::TSP::Reference* mutable_parentslidenode();
  void set_allocated_parentslidenode(::TSP::Reference* parentslidenode);
  private:
  const ::TSP::Reference& _internal_parentslidenode() const;
  ::TSP::Reference* _internal_mutable_parentslidenode();
  public:
  void unsafe_arena_set_allocated_parentslidenode(
      ::TSP::Reference* parentslidenode);
  ::TSP::Reference* unsafe_arena_release_parentslidenode();

  // required uint32 childIndex = 5;
  bool has_childindex() const;
  private:
  bool _internal_has_childindex() const;
  public:
  void clear_childindex();
  uint32_t childindex() const;
  void set_childindex(uint32_t value);
  private:
  uint32_t _internal_childindex() const;
  void _internal_set_childindex(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandShowRemoveSlideArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* show_;
    ::TSP::Reference* slidenode_;
    ::TSP::Reference* parentslidenode_;
    uint32_t childindex_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandShowChangeThemeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandShowChangeThemeArchive) */ {
 public:
  inline CommandShowChangeThemeArchive() : CommandShowChangeThemeArchive(nullptr) {}
  ~CommandShowChangeThemeArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandShowChangeThemeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandShowChangeThemeArchive(const CommandShowChangeThemeArchive& from);
  CommandShowChangeThemeArchive(CommandShowChangeThemeArchive&& from) noexcept
    : CommandShowChangeThemeArchive() {
    *this = ::std::move(from);
  }

  inline CommandShowChangeThemeArchive& operator=(const CommandShowChangeThemeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandShowChangeThemeArchive& operator=(CommandShowChangeThemeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandShowChangeThemeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandShowChangeThemeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandShowChangeThemeArchive*>(
               &_CommandShowChangeThemeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CommandShowChangeThemeArchive& a, CommandShowChangeThemeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandShowChangeThemeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandShowChangeThemeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandShowChangeThemeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandShowChangeThemeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandShowChangeThemeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandShowChangeThemeArchive& from) {
    CommandShowChangeThemeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandShowChangeThemeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandShowChangeThemeArchive";
  }
  protected:
  explicit CommandShowChangeThemeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTemplateIdentifierFieldNumber = 5,
    kOldTemplateIdentifierFieldNumber = 6,
    kSuperFieldNumber = 1,
    kShowFieldNumber = 2,
    kThemeFieldNumber = 3,
    kOldThemeFieldNumber = 4,
  };
  // optional string template_identifier = 5;
  bool has_template_identifier() const;
  private:
  bool _internal_has_template_identifier() const;
  public:
  void clear_template_identifier();
  const std::string& template_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_template_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_template_identifier();
  PROTOBUF_NODISCARD std::string* release_template_identifier();
  void set_allocated_template_identifier(std::string* template_identifier);
  private:
  const std::string& _internal_template_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_template_identifier(const std::string& value);
  std::string* _internal_mutable_template_identifier();
  public:

  // optional string old_template_identifier = 6;
  bool has_old_template_identifier() const;
  private:
  bool _internal_has_old_template_identifier() const;
  public:
  void clear_old_template_identifier();
  const std::string& old_template_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_old_template_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_old_template_identifier();
  PROTOBUF_NODISCARD std::string* release_old_template_identifier();
  void set_allocated_old_template_identifier(std::string* old_template_identifier);
  private:
  const std::string& _internal_old_template_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_old_template_identifier(const std::string& value);
  std::string* _internal_mutable_old_template_identifier();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference show = 2;
  bool has_show() const;
  private:
  bool _internal_has_show() const;
  public:
  void clear_show();
  const ::TSP::Reference& show() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_show();
  ::TSP::Reference* mutable_show();
  void set_allocated_show(::TSP::Reference* show);
  private:
  const ::TSP::Reference& _internal_show() const;
  ::TSP::Reference* _internal_mutable_show();
  public:
  void unsafe_arena_set_allocated_show(
      ::TSP::Reference* show);
  ::TSP::Reference* unsafe_arena_release_show();

  // required .TSP.Reference theme = 3;
  bool has_theme() const;
  private:
  bool _internal_has_theme() const;
  public:
  void clear_theme();
  const ::TSP::Reference& theme() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_theme();
  ::TSP::Reference* mutable_theme();
  void set_allocated_theme(::TSP::Reference* theme);
  private:
  const ::TSP::Reference& _internal_theme() const;
  ::TSP::Reference* _internal_mutable_theme();
  public:
  void unsafe_arena_set_allocated_theme(
      ::TSP::Reference* theme);
  ::TSP::Reference* unsafe_arena_release_theme();

  // required .TSP.Reference old_theme = 4;
  bool has_old_theme() const;
  private:
  bool _internal_has_old_theme() const;
  public:
  void clear_old_theme();
  const ::TSP::Reference& old_theme() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_old_theme();
  ::TSP::Reference* mutable_old_theme();
  void set_allocated_old_theme(::TSP::Reference* old_theme);
  private:
  const ::TSP::Reference& _internal_old_theme() const;
  ::TSP::Reference* _internal_mutable_old_theme();
  public:
  void unsafe_arena_set_allocated_old_theme(
      ::TSP::Reference* old_theme);
  ::TSP::Reference* unsafe_arena_release_old_theme();

  // @@protoc_insertion_point(class_scope:KN.CommandShowChangeThemeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr template_identifier_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_template_identifier_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* show_;
    ::TSP::Reference* theme_;
    ::TSP::Reference* old_theme_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandMoveMastersArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandMoveMastersArchive) */ {
 public:
  inline CommandMoveMastersArchive() : CommandMoveMastersArchive(nullptr) {}
  ~CommandMoveMastersArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandMoveMastersArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandMoveMastersArchive(const CommandMoveMastersArchive& from);
  CommandMoveMastersArchive(CommandMoveMastersArchive&& from) noexcept
    : CommandMoveMastersArchive() {
    *this = ::std::move(from);
  }

  inline CommandMoveMastersArchive& operator=(const CommandMoveMastersArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandMoveMastersArchive& operator=(CommandMoveMastersArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandMoveMastersArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandMoveMastersArchive* internal_default_instance() {
    return reinterpret_cast<const CommandMoveMastersArchive*>(
               &_CommandMoveMastersArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CommandMoveMastersArchive& a, CommandMoveMastersArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandMoveMastersArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandMoveMastersArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandMoveMastersArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandMoveMastersArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandMoveMastersArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandMoveMastersArchive& from) {
    CommandMoveMastersArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandMoveMastersArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandMoveMastersArchive";
  }
  protected:
  explicit CommandMoveMastersArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMasterSlidesFieldNumber = 3,
    kPreviousIndexesKeysFieldNumber = 4,
    kPreviousIndexesValuesFieldNumber = 5,
    kFinalMasterArrangementFieldNumber = 6,
    kSuperFieldNumber = 1,
    kThemeFieldNumber = 2,
  };
  // repeated .TSP.Reference master_slides = 3;
  int master_slides_size() const;
  private:
  int _internal_master_slides_size() const;
  public:
  void clear_master_slides();
  ::TSP::Reference* mutable_master_slides(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_master_slides();
  private:
  const ::TSP::Reference& _internal_master_slides(int index) const;
  ::TSP::Reference* _internal_add_master_slides();
  public:
  const ::TSP::Reference& master_slides(int index) const;
  ::TSP::Reference* add_master_slides();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      master_slides() const;

  // repeated .TSP.Reference previous_indexes_keys = 4;
  int previous_indexes_keys_size() const;
  private:
  int _internal_previous_indexes_keys_size() const;
  public:
  void clear_previous_indexes_keys();
  ::TSP::Reference* mutable_previous_indexes_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_previous_indexes_keys();
  private:
  const ::TSP::Reference& _internal_previous_indexes_keys(int index) const;
  ::TSP::Reference* _internal_add_previous_indexes_keys();
  public:
  const ::TSP::Reference& previous_indexes_keys(int index) const;
  ::TSP::Reference* add_previous_indexes_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      previous_indexes_keys() const;

  // repeated uint32 previous_indexes_values = 5;
  int previous_indexes_values_size() const;
  private:
  int _internal_previous_indexes_values_size() const;
  public:
  void clear_previous_indexes_values();
  private:
  uint32_t _internal_previous_indexes_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_previous_indexes_values() const;
  void _internal_add_previous_indexes_values(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_previous_indexes_values();
  public:
  uint32_t previous_indexes_values(int index) const;
  void set_previous_indexes_values(int index, uint32_t value);
  void add_previous_indexes_values(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      previous_indexes_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_previous_indexes_values();

  // repeated .TSP.Reference final_master_arrangement = 6;
  int final_master_arrangement_size() const;
  private:
  int _internal_final_master_arrangement_size() const;
  public:
  void clear_final_master_arrangement();
  ::TSP::Reference* mutable_final_master_arrangement(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_final_master_arrangement();
  private:
  const ::TSP::Reference& _internal_final_master_arrangement(int index) const;
  ::TSP::Reference* _internal_add_final_master_arrangement();
  public:
  const ::TSP::Reference& final_master_arrangement(int index) const;
  ::TSP::Reference* add_final_master_arrangement();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      final_master_arrangement() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference theme = 2;
  bool has_theme() const;
  private:
  bool _internal_has_theme() const;
  public:
  void clear_theme();
  const ::TSP::Reference& theme() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_theme();
  ::TSP::Reference* mutable_theme();
  void set_allocated_theme(::TSP::Reference* theme);
  private:
  const ::TSP::Reference& _internal_theme() const;
  ::TSP::Reference* _internal_mutable_theme();
  public:
  void unsafe_arena_set_allocated_theme(
      ::TSP::Reference* theme);
  ::TSP::Reference* unsafe_arena_release_theme();

  // @@protoc_insertion_point(class_scope:KN.CommandMoveMastersArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > master_slides_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > previous_indexes_keys_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > previous_indexes_values_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > final_master_arrangement_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* theme_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandInsertMasterArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandInsertMasterArchive) */ {
 public:
  inline CommandInsertMasterArchive() : CommandInsertMasterArchive(nullptr) {}
  ~CommandInsertMasterArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandInsertMasterArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandInsertMasterArchive(const CommandInsertMasterArchive& from);
  CommandInsertMasterArchive(CommandInsertMasterArchive&& from) noexcept
    : CommandInsertMasterArchive() {
    *this = ::std::move(from);
  }

  inline CommandInsertMasterArchive& operator=(const CommandInsertMasterArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandInsertMasterArchive& operator=(CommandInsertMasterArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandInsertMasterArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandInsertMasterArchive* internal_default_instance() {
    return reinterpret_cast<const CommandInsertMasterArchive*>(
               &_CommandInsertMasterArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CommandInsertMasterArchive& a, CommandInsertMasterArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandInsertMasterArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandInsertMasterArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandInsertMasterArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandInsertMasterArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandInsertMasterArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandInsertMasterArchive& from) {
    CommandInsertMasterArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandInsertMasterArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandInsertMasterArchive";
  }
  protected:
  explicit CommandInsertMasterArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kThemeFieldNumber = 2,
    kMasterSlideNodeFieldNumber = 3,
    kInsertionIndexFieldNumber = 4,
    kWasInsertedWithDropFieldNumber = 5,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference theme = 2;
  bool has_theme() const;
  private:
  bool _internal_has_theme() const;
  public:
  void clear_theme();
  const ::TSP::Reference& theme() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_theme();
  ::TSP::Reference* mutable_theme();
  void set_allocated_theme(::TSP::Reference* theme);
  private:
  const ::TSP::Reference& _internal_theme() const;
  ::TSP::Reference* _internal_mutable_theme();
  public:
  void unsafe_arena_set_allocated_theme(
      ::TSP::Reference* theme);
  ::TSP::Reference* unsafe_arena_release_theme();

  // required .TSP.Reference master_slide_node = 3;
  bool has_master_slide_node() const;
  private:
  bool _internal_has_master_slide_node() const;
  public:
  void clear_master_slide_node();
  const ::TSP::Reference& master_slide_node() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_master_slide_node();
  ::TSP::Reference* mutable_master_slide_node();
  void set_allocated_master_slide_node(::TSP::Reference* master_slide_node);
  private:
  const ::TSP::Reference& _internal_master_slide_node() const;
  ::TSP::Reference* _internal_mutable_master_slide_node();
  public:
  void unsafe_arena_set_allocated_master_slide_node(
      ::TSP::Reference* master_slide_node);
  ::TSP::Reference* unsafe_arena_release_master_slide_node();

  // required uint32 insertion_index = 4;
  bool has_insertion_index() const;
  private:
  bool _internal_has_insertion_index() const;
  public:
  void clear_insertion_index();
  uint32_t insertion_index() const;
  void set_insertion_index(uint32_t value);
  private:
  uint32_t _internal_insertion_index() const;
  void _internal_set_insertion_index(uint32_t value);
  public:

  // required bool was_inserted_with_drop = 5;
  bool has_was_inserted_with_drop() const;
  private:
  bool _internal_has_was_inserted_with_drop() const;
  public:
  void clear_was_inserted_with_drop();
  bool was_inserted_with_drop() const;
  void set_was_inserted_with_drop(bool value);
  private:
  bool _internal_was_inserted_with_drop() const;
  void _internal_set_was_inserted_with_drop(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandInsertMasterArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* theme_;
    ::TSP::Reference* master_slide_node_;
    uint32_t insertion_index_;
    bool was_inserted_with_drop_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRemoveMasterArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandRemoveMasterArchive) */ {
 public:
  inline CommandRemoveMasterArchive() : CommandRemoveMasterArchive(nullptr) {}
  ~CommandRemoveMasterArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandRemoveMasterArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRemoveMasterArchive(const CommandRemoveMasterArchive& from);
  CommandRemoveMasterArchive(CommandRemoveMasterArchive&& from) noexcept
    : CommandRemoveMasterArchive() {
    *this = ::std::move(from);
  }

  inline CommandRemoveMasterArchive& operator=(const CommandRemoveMasterArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRemoveMasterArchive& operator=(CommandRemoveMasterArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRemoveMasterArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRemoveMasterArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRemoveMasterArchive*>(
               &_CommandRemoveMasterArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CommandRemoveMasterArchive& a, CommandRemoveMasterArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRemoveMasterArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRemoveMasterArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRemoveMasterArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRemoveMasterArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRemoveMasterArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRemoveMasterArchive& from) {
    CommandRemoveMasterArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRemoveMasterArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandRemoveMasterArchive";
  }
  protected:
  explicit CommandRemoveMasterArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kThemeFieldNumber = 2,
    kMasterSlideNodeFieldNumber = 3,
    kMasterChangeCommandsFieldNumber = 5,
    kPreviousIndexFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference theme = 2;
  bool has_theme() const;
  private:
  bool _internal_has_theme() const;
  public:
  void clear_theme();
  const ::TSP::Reference& theme() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_theme();
  ::TSP::Reference* mutable_theme();
  void set_allocated_theme(::TSP::Reference* theme);
  private:
  const ::TSP::Reference& _internal_theme() const;
  ::TSP::Reference* _internal_mutable_theme();
  public:
  void unsafe_arena_set_allocated_theme(
      ::TSP::Reference* theme);
  ::TSP::Reference* unsafe_arena_release_theme();

  // required .TSP.Reference master_slide_node = 3;
  bool has_master_slide_node() const;
  private:
  bool _internal_has_master_slide_node() const;
  public:
  void clear_master_slide_node();
  const ::TSP::Reference& master_slide_node() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_master_slide_node();
  ::TSP::Reference* mutable_master_slide_node();
  void set_allocated_master_slide_node(::TSP::Reference* master_slide_node);
  private:
  const ::TSP::Reference& _internal_master_slide_node() const;
  ::TSP::Reference* _internal_mutable_master_slide_node();
  public:
  void unsafe_arena_set_allocated_master_slide_node(
      ::TSP::Reference* master_slide_node);
  ::TSP::Reference* unsafe_arena_release_master_slide_node();

  // optional .TSP.Reference master_change_commands = 5;
  bool has_master_change_commands() const;
  private:
  bool _internal_has_master_change_commands() const;
  public:
  void clear_master_change_commands();
  const ::TSP::Reference& master_change_commands() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_master_change_commands();
  ::TSP::Reference* mutable_master_change_commands();
  void set_allocated_master_change_commands(::TSP::Reference* master_change_commands);
  private:
  const ::TSP::Reference& _internal_master_change_commands() const;
  ::TSP::Reference* _internal_mutable_master_change_commands();
  public:
  void unsafe_arena_set_allocated_master_change_commands(
      ::TSP::Reference* master_change_commands);
  ::TSP::Reference* unsafe_arena_release_master_change_commands();

  // required uint32 previous_index = 4;
  bool has_previous_index() const;
  private:
  bool _internal_has_previous_index() const;
  public:
  void clear_previous_index();
  uint32_t previous_index() const;
  void set_previous_index(uint32_t value);
  private:
  uint32_t _internal_previous_index() const;
  void _internal_set_previous_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandRemoveMasterArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* theme_;
    ::TSP::Reference* master_slide_node_;
    ::TSP::Reference* master_change_commands_;
    uint32_t previous_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRenameMasterArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandRenameMasterArchive) */ {
 public:
  inline CommandRenameMasterArchive() : CommandRenameMasterArchive(nullptr) {}
  ~CommandRenameMasterArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandRenameMasterArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRenameMasterArchive(const CommandRenameMasterArchive& from);
  CommandRenameMasterArchive(CommandRenameMasterArchive&& from) noexcept
    : CommandRenameMasterArchive() {
    *this = ::std::move(from);
  }

  inline CommandRenameMasterArchive& operator=(const CommandRenameMasterArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRenameMasterArchive& operator=(CommandRenameMasterArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRenameMasterArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRenameMasterArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRenameMasterArchive*>(
               &_CommandRenameMasterArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CommandRenameMasterArchive& a, CommandRenameMasterArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRenameMasterArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRenameMasterArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRenameMasterArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRenameMasterArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRenameMasterArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRenameMasterArchive& from) {
    CommandRenameMasterArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRenameMasterArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandRenameMasterArchive";
  }
  protected:
  explicit CommandRenameMasterArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMasterNameFieldNumber = 3,
    kOldMasterNameFieldNumber = 4,
    kSuperFieldNumber = 1,
    kMasterSlideFieldNumber = 2,
  };
  // required string master_name = 3;
  bool has_master_name() const;
  private:
  bool _internal_has_master_name() const;
  public:
  void clear_master_name();
  const std::string& master_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_master_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_master_name();
  PROTOBUF_NODISCARD std::string* release_master_name();
  void set_allocated_master_name(std::string* master_name);
  private:
  const std::string& _internal_master_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_master_name(const std::string& value);
  std::string* _internal_mutable_master_name();
  public:

  // required string old_master_name = 4;
  bool has_old_master_name() const;
  private:
  bool _internal_has_old_master_name() const;
  public:
  void clear_old_master_name();
  const std::string& old_master_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_old_master_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_old_master_name();
  PROTOBUF_NODISCARD std::string* release_old_master_name();
  void set_allocated_old_master_name(std::string* old_master_name);
  private:
  const std::string& _internal_old_master_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_old_master_name(const std::string& value);
  std::string* _internal_mutable_old_master_name();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference master_slide = 2;
  bool has_master_slide() const;
  private:
  bool _internal_has_master_slide() const;
  public:
  void clear_master_slide();
  const ::TSP::Reference& master_slide() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_master_slide();
  ::TSP::Reference* mutable_master_slide();
  void set_allocated_master_slide(::TSP::Reference* master_slide);
  private:
  const ::TSP::Reference& _internal_master_slide() const;
  ::TSP::Reference* _internal_mutable_master_slide();
  public:
  void unsafe_arena_set_allocated_master_slide(
      ::TSP::Reference* master_slide);
  ::TSP::Reference* unsafe_arena_release_master_slide();

  // @@protoc_insertion_point(class_scope:KN.CommandRenameMasterArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr master_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_master_name_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* master_slide_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideInsertBuildArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideInsertBuildArchive) */ {
 public:
  inline CommandSlideInsertBuildArchive() : CommandSlideInsertBuildArchive(nullptr) {}
  ~CommandSlideInsertBuildArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSlideInsertBuildArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideInsertBuildArchive(const CommandSlideInsertBuildArchive& from);
  CommandSlideInsertBuildArchive(CommandSlideInsertBuildArchive&& from) noexcept
    : CommandSlideInsertBuildArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideInsertBuildArchive& operator=(const CommandSlideInsertBuildArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideInsertBuildArchive& operator=(CommandSlideInsertBuildArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideInsertBuildArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideInsertBuildArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideInsertBuildArchive*>(
               &_CommandSlideInsertBuildArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CommandSlideInsertBuildArchive& a, CommandSlideInsertBuildArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideInsertBuildArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideInsertBuildArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSlideInsertBuildArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSlideInsertBuildArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideInsertBuildArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSlideInsertBuildArchive& from) {
    CommandSlideInsertBuildArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideInsertBuildArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideInsertBuildArchive";
  }
  protected:
  explicit CommandSlideInsertBuildArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSlideNodeFieldNumber = 2,
    kBuildFieldNumber = 3,
    kIndexFieldNumber = 4,
    kShouldCreateChunksFieldNumber = 5,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference slideNode = 2;
  bool has_slidenode() const;
  private:
  bool _internal_has_slidenode() const;
  public:
  void clear_slidenode();
  const ::TSP::Reference& slidenode() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_slidenode();
  ::TSP::Reference* mutable_slidenode();
  void set_allocated_slidenode(::TSP::Reference* slidenode);
  private:
  const ::TSP::Reference& _internal_slidenode() const;
  ::TSP::Reference* _internal_mutable_slidenode();
  public:
  void unsafe_arena_set_allocated_slidenode(
      ::TSP::Reference* slidenode);
  ::TSP::Reference* unsafe_arena_release_slidenode();

  // required .TSP.Reference build = 3;
  bool has_build() const;
  private:
  bool _internal_has_build() const;
  public:
  void clear_build();
  const ::TSP::Reference& build() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_build();
  ::TSP::Reference* mutable_build();
  void set_allocated_build(::TSP::Reference* build);
  private:
  const ::TSP::Reference& _internal_build() const;
  ::TSP::Reference* _internal_mutable_build();
  public:
  void unsafe_arena_set_allocated_build(
      ::TSP::Reference* build);
  ::TSP::Reference* unsafe_arena_release_build();

  // required uint32 index = 4;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // optional bool shouldCreateChunks = 5;
  bool has_shouldcreatechunks() const;
  private:
  bool _internal_has_shouldcreatechunks() const;
  public:
  void clear_shouldcreatechunks();
  bool shouldcreatechunks() const;
  void set_shouldcreatechunks(bool value);
  private:
  bool _internal_shouldcreatechunks() const;
  void _internal_set_shouldcreatechunks(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandSlideInsertBuildArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* slidenode_;
    ::TSP::Reference* build_;
    uint32_t index_;
    bool shouldcreatechunks_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideRemoveBuildArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideRemoveBuildArchive) */ {
 public:
  inline CommandSlideRemoveBuildArchive() : CommandSlideRemoveBuildArchive(nullptr) {}
  ~CommandSlideRemoveBuildArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSlideRemoveBuildArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideRemoveBuildArchive(const CommandSlideRemoveBuildArchive& from);
  CommandSlideRemoveBuildArchive(CommandSlideRemoveBuildArchive&& from) noexcept
    : CommandSlideRemoveBuildArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideRemoveBuildArchive& operator=(const CommandSlideRemoveBuildArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideRemoveBuildArchive& operator=(CommandSlideRemoveBuildArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideRemoveBuildArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideRemoveBuildArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideRemoveBuildArchive*>(
               &_CommandSlideRemoveBuildArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CommandSlideRemoveBuildArchive& a, CommandSlideRemoveBuildArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideRemoveBuildArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideRemoveBuildArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSlideRemoveBuildArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSlideRemoveBuildArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideRemoveBuildArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSlideRemoveBuildArchive& from) {
    CommandSlideRemoveBuildArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideRemoveBuildArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideRemoveBuildArchive";
  }
  protected:
  explicit CommandSlideRemoveBuildArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSlideNodeFieldNumber = 2,
    kBuildFieldNumber = 3,
    kIndexFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference slideNode = 2;
  bool has_slidenode() const;
  private:
  bool _internal_has_slidenode() const;
  public:
  void clear_slidenode();
  const ::TSP::Reference& slidenode() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_slidenode();
  ::TSP::Reference* mutable_slidenode();
  void set_allocated_slidenode(::TSP::Reference* slidenode);
  private:
  const ::TSP::Reference& _internal_slidenode() const;
  ::TSP::Reference* _internal_mutable_slidenode();
  public:
  void unsafe_arena_set_allocated_slidenode(
      ::TSP::Reference* slidenode);
  ::TSP::Reference* unsafe_arena_release_slidenode();

  // required .TSP.Reference build = 3;
  bool has_build() const;
  private:
  bool _internal_has_build() const;
  public:
  void clear_build();
  const ::TSP::Reference& build() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_build();
  ::TSP::Reference* mutable_build();
  void set_allocated_build(::TSP::Reference* build);
  private:
  const ::TSP::Reference& _internal_build() const;
  ::TSP::Reference* _internal_mutable_build();
  public:
  void unsafe_arena_set_allocated_build(
      ::TSP::Reference* build);
  ::TSP::Reference* unsafe_arena_release_build();

  // required uint32 index = 4;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandSlideRemoveBuildArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* slidenode_;
    ::TSP::Reference* build_;
    uint32_t index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideMoveBuildWithoutMovingChunksArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideMoveBuildWithoutMovingChunksArchive) */ {
 public:
  inline CommandSlideMoveBuildWithoutMovingChunksArchive() : CommandSlideMoveBuildWithoutMovingChunksArchive(nullptr) {}
  ~CommandSlideMoveBuildWithoutMovingChunksArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSlideMoveBuildWithoutMovingChunksArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideMoveBuildWithoutMovingChunksArchive(const CommandSlideMoveBuildWithoutMovingChunksArchive& from);
  CommandSlideMoveBuildWithoutMovingChunksArchive(CommandSlideMoveBuildWithoutMovingChunksArchive&& from) noexcept
    : CommandSlideMoveBuildWithoutMovingChunksArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideMoveBuildWithoutMovingChunksArchive& operator=(const CommandSlideMoveBuildWithoutMovingChunksArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideMoveBuildWithoutMovingChunksArchive& operator=(CommandSlideMoveBuildWithoutMovingChunksArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideMoveBuildWithoutMovingChunksArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideMoveBuildWithoutMovingChunksArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideMoveBuildWithoutMovingChunksArchive*>(
               &_CommandSlideMoveBuildWithoutMovingChunksArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CommandSlideMoveBuildWithoutMovingChunksArchive& a, CommandSlideMoveBuildWithoutMovingChunksArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideMoveBuildWithoutMovingChunksArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideMoveBuildWithoutMovingChunksArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSlideMoveBuildWithoutMovingChunksArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSlideMoveBuildWithoutMovingChunksArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideMoveBuildWithoutMovingChunksArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSlideMoveBuildWithoutMovingChunksArchive& from) {
    CommandSlideMoveBuildWithoutMovingChunksArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideMoveBuildWithoutMovingChunksArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideMoveBuildWithoutMovingChunksArchive";
  }
  protected:
  explicit CommandSlideMoveBuildWithoutMovingChunksArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSlideNodeFieldNumber = 2,
    kIndexFieldNumber = 3,
    kOldIndexFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference slideNode = 2;
  bool has_slidenode() const;
  private:
  bool _internal_has_slidenode() const;
  public:
  void clear_slidenode();
  const ::TSP::Reference& slidenode() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_slidenode();
  ::TSP::Reference* mutable_slidenode();
  void set_allocated_slidenode(::TSP::Reference* slidenode);
  private:
  const ::TSP::Reference& _internal_slidenode() const;
  ::TSP::Reference* _internal_mutable_slidenode();
  public:
  void unsafe_arena_set_allocated_slidenode(
      ::TSP::Reference* slidenode);
  ::TSP::Reference* unsafe_arena_release_slidenode();

  // required uint32 index = 3;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // required uint32 oldIndex = 4;
  bool has_oldindex() const;
  private:
  bool _internal_has_oldindex() const;
  public:
  void clear_oldindex();
  uint32_t oldindex() const;
  void set_oldindex(uint32_t value);
  private:
  uint32_t _internal_oldindex() const;
  void _internal_set_oldindex(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandSlideMoveBuildWithoutMovingChunksArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* slidenode_;
    uint32_t index_;
    uint32_t oldindex_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideMoveBuildsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideMoveBuildsArchive) */ {
 public:
  inline CommandSlideMoveBuildsArchive() : CommandSlideMoveBuildsArchive(nullptr) {}
  ~CommandSlideMoveBuildsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSlideMoveBuildsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideMoveBuildsArchive(const CommandSlideMoveBuildsArchive& from);
  CommandSlideMoveBuildsArchive(CommandSlideMoveBuildsArchive&& from) noexcept
    : CommandSlideMoveBuildsArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideMoveBuildsArchive& operator=(const CommandSlideMoveBuildsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideMoveBuildsArchive& operator=(CommandSlideMoveBuildsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideMoveBuildsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideMoveBuildsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideMoveBuildsArchive*>(
               &_CommandSlideMoveBuildsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CommandSlideMoveBuildsArchive& a, CommandSlideMoveBuildsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideMoveBuildsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideMoveBuildsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSlideMoveBuildsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSlideMoveBuildsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideMoveBuildsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSlideMoveBuildsArchive& from) {
    CommandSlideMoveBuildsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideMoveBuildsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideMoveBuildsArchive";
  }
  protected:
  explicit CommandSlideMoveBuildsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuildsFieldNumber = 2,
    kSuperFieldNumber = 1,
    kToIndexFieldNumber = 3,
  };
  // repeated .TSP.Reference builds = 2;
  int builds_size() const;
  private:
  int _internal_builds_size() const;
  public:
  void clear_builds();
  ::TSP::Reference* mutable_builds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_builds();
  private:
  const ::TSP::Reference& _internal_builds(int index) const;
  ::TSP::Reference* _internal_add_builds();
  public:
  const ::TSP::Reference& builds(int index) const;
  ::TSP::Reference* add_builds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      builds() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional uint32 toIndex = 3;
  bool has_toindex() const;
  private:
  bool _internal_has_toindex() const;
  public:
  void clear_toindex();
  uint32_t toindex() const;
  void set_toindex(uint32_t value);
  private:
  uint32_t _internal_toindex() const;
  void _internal_set_toindex(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandSlideMoveBuildsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > builds_;
    ::TSK::CommandArchive* super_;
    uint32_t toindex_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideInsertBuildChunkArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideInsertBuildChunkArchive) */ {
 public:
  inline CommandSlideInsertBuildChunkArchive() : CommandSlideInsertBuildChunkArchive(nullptr) {}
  ~CommandSlideInsertBuildChunkArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSlideInsertBuildChunkArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideInsertBuildChunkArchive(const CommandSlideInsertBuildChunkArchive& from);
  CommandSlideInsertBuildChunkArchive(CommandSlideInsertBuildChunkArchive&& from) noexcept
    : CommandSlideInsertBuildChunkArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideInsertBuildChunkArchive& operator=(const CommandSlideInsertBuildChunkArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideInsertBuildChunkArchive& operator=(CommandSlideInsertBuildChunkArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideInsertBuildChunkArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideInsertBuildChunkArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideInsertBuildChunkArchive*>(
               &_CommandSlideInsertBuildChunkArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CommandSlideInsertBuildChunkArchive& a, CommandSlideInsertBuildChunkArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideInsertBuildChunkArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideInsertBuildChunkArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSlideInsertBuildChunkArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSlideInsertBuildChunkArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideInsertBuildChunkArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSlideInsertBuildChunkArchive& from) {
    CommandSlideInsertBuildChunkArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideInsertBuildChunkArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideInsertBuildChunkArchive";
  }
  protected:
  explicit CommandSlideInsertBuildChunkArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSlideFieldNumber = 2,
    kBuildChunkFieldNumber = 3,
    kIndexFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference slide = 2;
  bool has_slide() const;
  private:
  bool _internal_has_slide() const;
  public:
  void clear_slide();
  const ::TSP::Reference& slide() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_slide();
  ::TSP::Reference* mutable_slide();
  void set_allocated_slide(::TSP::Reference* slide);
  private:
  const ::TSP::Reference& _internal_slide() const;
  ::TSP::Reference* _internal_mutable_slide();
  public:
  void unsafe_arena_set_allocated_slide(
      ::TSP::Reference* slide);
  ::TSP::Reference* unsafe_arena_release_slide();

  // required .KN.BuildChunkArchive buildChunk = 3;
  bool has_buildchunk() const;
  private:
  bool _internal_has_buildchunk() const;
  public:
  void clear_buildchunk();
  const ::KN::BuildChunkArchive& buildchunk() const;
  PROTOBUF_NODISCARD ::KN::BuildChunkArchive* release_buildchunk();
  ::KN::BuildChunkArchive* mutable_buildchunk();
  void set_allocated_buildchunk(::KN::BuildChunkArchive* buildchunk);
  private:
  const ::KN::BuildChunkArchive& _internal_buildchunk() const;
  ::KN::BuildChunkArchive* _internal_mutable_buildchunk();
  public:
  void unsafe_arena_set_allocated_buildchunk(
      ::KN::BuildChunkArchive* buildchunk);
  ::KN::BuildChunkArchive* unsafe_arena_release_buildchunk();

  // required uint32 index = 4;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandSlideInsertBuildChunkArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* slide_;
    ::KN::BuildChunkArchive* buildchunk_;
    uint32_t index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideRemoveBuildChunkArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideRemoveBuildChunkArchive) */ {
 public:
  inline CommandSlideRemoveBuildChunkArchive() : CommandSlideRemoveBuildChunkArchive(nullptr) {}
  ~CommandSlideRemoveBuildChunkArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSlideRemoveBuildChunkArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideRemoveBuildChunkArchive(const CommandSlideRemoveBuildChunkArchive& from);
  CommandSlideRemoveBuildChunkArchive(CommandSlideRemoveBuildChunkArchive&& from) noexcept
    : CommandSlideRemoveBuildChunkArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideRemoveBuildChunkArchive& operator=(const CommandSlideRemoveBuildChunkArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideRemoveBuildChunkArchive& operator=(CommandSlideRemoveBuildChunkArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideRemoveBuildChunkArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideRemoveBuildChunkArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideRemoveBuildChunkArchive*>(
               &_CommandSlideRemoveBuildChunkArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CommandSlideRemoveBuildChunkArchive& a, CommandSlideRemoveBuildChunkArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideRemoveBuildChunkArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideRemoveBuildChunkArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSlideRemoveBuildChunkArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSlideRemoveBuildChunkArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideRemoveBuildChunkArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSlideRemoveBuildChunkArchive& from) {
    CommandSlideRemoveBuildChunkArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideRemoveBuildChunkArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideRemoveBuildChunkArchive";
  }
  protected:
  explicit CommandSlideRemoveBuildChunkArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSlideFieldNumber = 2,
    kBuildChunkFieldNumber = 3,
    kIndexFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference slide = 2;
  bool has_slide() const;
  private:
  bool _internal_has_slide() const;
  public:
  void clear_slide();
  const ::TSP::Reference& slide() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_slide();
  ::TSP::Reference* mutable_slide();
  void set_allocated_slide(::TSP::Reference* slide);
  private:
  const ::TSP::Reference& _internal_slide() const;
  ::TSP::Reference* _internal_mutable_slide();
  public:
  void unsafe_arena_set_allocated_slide(
      ::TSP::Reference* slide);
  ::TSP::Reference* unsafe_arena_release_slide();

  // required .KN.BuildChunkArchive buildChunk = 3;
  bool has_buildchunk() const;
  private:
  bool _internal_has_buildchunk() const;
  public:
  void clear_buildchunk();
  const ::KN::BuildChunkArchive& buildchunk() const;
  PROTOBUF_NODISCARD ::KN::BuildChunkArchive* release_buildchunk();
  ::KN::BuildChunkArchive* mutable_buildchunk();
  void set_allocated_buildchunk(::KN::BuildChunkArchive* buildchunk);
  private:
  const ::KN::BuildChunkArchive& _internal_buildchunk() const;
  ::KN::BuildChunkArchive* _internal_mutable_buildchunk();
  public:
  void unsafe_arena_set_allocated_buildchunk(
      ::KN::BuildChunkArchive* buildchunk);
  ::KN::BuildChunkArchive* unsafe_arena_release_buildchunk();

  // required uint32 index = 4;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandSlideRemoveBuildChunkArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* slide_;
    ::KN::BuildChunkArchive* buildchunk_;
    uint32_t index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideMoveBuildChunkArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideMoveBuildChunkArchive) */ {
 public:
  inline CommandSlideMoveBuildChunkArchive() : CommandSlideMoveBuildChunkArchive(nullptr) {}
  ~CommandSlideMoveBuildChunkArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSlideMoveBuildChunkArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideMoveBuildChunkArchive(const CommandSlideMoveBuildChunkArchive& from);
  CommandSlideMoveBuildChunkArchive(CommandSlideMoveBuildChunkArchive&& from) noexcept
    : CommandSlideMoveBuildChunkArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideMoveBuildChunkArchive& operator=(const CommandSlideMoveBuildChunkArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideMoveBuildChunkArchive& operator=(CommandSlideMoveBuildChunkArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideMoveBuildChunkArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideMoveBuildChunkArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideMoveBuildChunkArchive*>(
               &_CommandSlideMoveBuildChunkArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CommandSlideMoveBuildChunkArchive& a, CommandSlideMoveBuildChunkArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideMoveBuildChunkArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideMoveBuildChunkArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSlideMoveBuildChunkArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSlideMoveBuildChunkArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideMoveBuildChunkArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSlideMoveBuildChunkArchive& from) {
    CommandSlideMoveBuildChunkArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideMoveBuildChunkArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideMoveBuildChunkArchive";
  }
  protected:
  explicit CommandSlideMoveBuildChunkArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSlideFieldNumber = 2,
    kIndexFieldNumber = 3,
    kOldIndexFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference slide = 2;
  bool has_slide() const;
  private:
  bool _internal_has_slide() const;
  public:
  void clear_slide();
  const ::TSP::Reference& slide() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_slide();
  ::TSP::Reference* mutable_slide();
  void set_allocated_slide(::TSP::Reference* slide);
  private:
  const ::TSP::Reference& _internal_slide() const;
  ::TSP::Reference* _internal_mutable_slide();
  public:
  void unsafe_arena_set_allocated_slide(
      ::TSP::Reference* slide);
  ::TSP::Reference* unsafe_arena_release_slide();

  // required uint32 index = 3;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // required uint32 oldIndex = 4;
  bool has_oldindex() const;
  private:
  bool _internal_has_oldindex() const;
  public:
  void clear_oldindex();
  uint32_t oldindex() const;
  void set_oldindex(uint32_t value);
  private:
  uint32_t _internal_oldindex() const;
  void _internal_set_oldindex(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandSlideMoveBuildChunkArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* slide_;
    uint32_t index_;
    uint32_t oldindex_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideMoveBuildChunksArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideMoveBuildChunksArchive) */ {
 public:
  inline CommandSlideMoveBuildChunksArchive() : CommandSlideMoveBuildChunksArchive(nullptr) {}
  ~CommandSlideMoveBuildChunksArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSlideMoveBuildChunksArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideMoveBuildChunksArchive(const CommandSlideMoveBuildChunksArchive& from);
  CommandSlideMoveBuildChunksArchive(CommandSlideMoveBuildChunksArchive&& from) noexcept
    : CommandSlideMoveBuildChunksArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideMoveBuildChunksArchive& operator=(const CommandSlideMoveBuildChunksArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideMoveBuildChunksArchive& operator=(CommandSlideMoveBuildChunksArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideMoveBuildChunksArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideMoveBuildChunksArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideMoveBuildChunksArchive*>(
               &_CommandSlideMoveBuildChunksArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CommandSlideMoveBuildChunksArchive& a, CommandSlideMoveBuildChunksArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideMoveBuildChunksArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideMoveBuildChunksArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSlideMoveBuildChunksArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSlideMoveBuildChunksArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideMoveBuildChunksArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSlideMoveBuildChunksArchive& from) {
    CommandSlideMoveBuildChunksArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideMoveBuildChunksArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideMoveBuildChunksArchive";
  }
  protected:
  explicit CommandSlideMoveBuildChunksArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuildChunksFieldNumber = 2,
    kSuperFieldNumber = 1,
    kToIndexFieldNumber = 3,
  };
  // repeated .KN.BuildChunkArchive buildChunks = 2;
  int buildchunks_size() const;
  private:
  int _internal_buildchunks_size() const;
  public:
  void clear_buildchunks();
  ::KN::BuildChunkArchive* mutable_buildchunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkArchive >*
      mutable_buildchunks();
  private:
  const ::KN::BuildChunkArchive& _internal_buildchunks(int index) const;
  ::KN::BuildChunkArchive* _internal_add_buildchunks();
  public:
  const ::KN::BuildChunkArchive& buildchunks(int index) const;
  ::KN::BuildChunkArchive* add_buildchunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkArchive >&
      buildchunks() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional uint32 toIndex = 3;
  bool has_toindex() const;
  private:
  bool _internal_has_toindex() const;
  public:
  void clear_toindex();
  uint32_t toindex() const;
  void set_toindex(uint32_t value);
  private:
  uint32_t _internal_toindex() const;
  void _internal_set_toindex(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandSlideMoveBuildChunksArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkArchive > buildchunks_;
    ::TSK::CommandArchive* super_;
    uint32_t toindex_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandBuildSetValueArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandBuildSetValueArchive) */ {
 public:
  inline CommandBuildSetValueArchive() : CommandBuildSetValueArchive(nullptr) {}
  ~CommandBuildSetValueArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandBuildSetValueArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandBuildSetValueArchive(const CommandBuildSetValueArchive& from);
  CommandBuildSetValueArchive(CommandBuildSetValueArchive&& from) noexcept
    : CommandBuildSetValueArchive() {
    *this = ::std::move(from);
  }

  inline CommandBuildSetValueArchive& operator=(const CommandBuildSetValueArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandBuildSetValueArchive& operator=(CommandBuildSetValueArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandBuildSetValueArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandBuildSetValueArchive* internal_default_instance() {
    return reinterpret_cast<const CommandBuildSetValueArchive*>(
               &_CommandBuildSetValueArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CommandBuildSetValueArchive& a, CommandBuildSetValueArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandBuildSetValueArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandBuildSetValueArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandBuildSetValueArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandBuildSetValueArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandBuildSetValueArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandBuildSetValueArchive& from) {
    CommandBuildSetValueArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandBuildSetValueArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandBuildSetValueArchive";
  }
  protected:
  explicit CommandBuildSetValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectsFieldNumber = 4,
    kTypesFieldNumber = 5,
    kDeliveriesFieldNumber = 6,
    kDirectionsFieldNumber = 7,
    kDurationsFieldNumber = 8,
    kDelaysFieldNumber = 9,
    kDelayAutomaticAftersFieldNumber = 10,
    kDelayAutomaticWithsFieldNumber = 11,
    kEventTriggersFieldNumber = 12,
    kPropertyFieldNumber = 3,
    kSuperFieldNumber = 1,
    kBuildFieldNumber = 2,
  };
  // repeated string effects = 4;
  int effects_size() const;
  private:
  int _internal_effects_size() const;
  public:
  void clear_effects();
  const std::string& effects(int index) const;
  std::string* mutable_effects(int index);
  void set_effects(int index, const std::string& value);
  void set_effects(int index, std::string&& value);
  void set_effects(int index, const char* value);
  void set_effects(int index, const char* value, size_t size);
  std::string* add_effects();
  void add_effects(const std::string& value);
  void add_effects(std::string&& value);
  void add_effects(const char* value);
  void add_effects(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& effects() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_effects();
  private:
  const std::string& _internal_effects(int index) const;
  std::string* _internal_add_effects();
  public:

  // repeated string types = 5;
  int types_size() const;
  private:
  int _internal_types_size() const;
  public:
  void clear_types();
  const std::string& types(int index) const;
  std::string* mutable_types(int index);
  void set_types(int index, const std::string& value);
  void set_types(int index, std::string&& value);
  void set_types(int index, const char* value);
  void set_types(int index, const char* value, size_t size);
  std::string* add_types();
  void add_types(const std::string& value);
  void add_types(std::string&& value);
  void add_types(const char* value);
  void add_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_types();
  private:
  const std::string& _internal_types(int index) const;
  std::string* _internal_add_types();
  public:

  // repeated string deliveries = 6;
  int deliveries_size() const;
  private:
  int _internal_deliveries_size() const;
  public:
  void clear_deliveries();
  const std::string& deliveries(int index) const;
  std::string* mutable_deliveries(int index);
  void set_deliveries(int index, const std::string& value);
  void set_deliveries(int index, std::string&& value);
  void set_deliveries(int index, const char* value);
  void set_deliveries(int index, const char* value, size_t size);
  std::string* add_deliveries();
  void add_deliveries(const std::string& value);
  void add_deliveries(std::string&& value);
  void add_deliveries(const char* value);
  void add_deliveries(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& deliveries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_deliveries();
  private:
  const std::string& _internal_deliveries(int index) const;
  std::string* _internal_add_deliveries();
  public:

  // repeated uint32 directions = 7;
  int directions_size() const;
  private:
  int _internal_directions_size() const;
  public:
  void clear_directions();
  private:
  uint32_t _internal_directions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_directions() const;
  void _internal_add_directions(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_directions();
  public:
  uint32_t directions(int index) const;
  void set_directions(int index, uint32_t value);
  void add_directions(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      directions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_directions();

  // repeated double durations = 8;
  int durations_size() const;
  private:
  int _internal_durations_size() const;
  public:
  void clear_durations();
  private:
  double _internal_durations(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_durations() const;
  void _internal_add_durations(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_durations();
  public:
  double durations(int index) const;
  void set_durations(int index, double value);
  void add_durations(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      durations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_durations();

  // repeated double delays = 9;
  int delays_size() const;
  private:
  int _internal_delays_size() const;
  public:
  void clear_delays();
  private:
  double _internal_delays(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_delays() const;
  void _internal_add_delays(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_delays();
  public:
  double delays(int index) const;
  void set_delays(int index, double value);
  void add_delays(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      delays() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_delays();

  // repeated double delayAutomaticAfters = 10;
  int delayautomaticafters_size() const;
  private:
  int _internal_delayautomaticafters_size() const;
  public:
  void clear_delayautomaticafters();
  private:
  double _internal_delayautomaticafters(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_delayautomaticafters() const;
  void _internal_add_delayautomaticafters(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_delayautomaticafters();
  public:
  double delayautomaticafters(int index) const;
  void set_delayautomaticafters(int index, double value);
  void add_delayautomaticafters(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      delayautomaticafters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_delayautomaticafters();

  // repeated double delayAutomaticWiths = 11;
  int delayautomaticwiths_size() const;
  private:
  int _internal_delayautomaticwiths_size() const;
  public:
  void clear_delayautomaticwiths();
  private:
  double _internal_delayautomaticwiths(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_delayautomaticwiths() const;
  void _internal_add_delayautomaticwiths(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_delayautomaticwiths();
  public:
  double delayautomaticwiths(int index) const;
  void set_delayautomaticwiths(int index, double value);
  void add_delayautomaticwiths(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      delayautomaticwiths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_delayautomaticwiths();

  // repeated bool eventTriggers = 12;
  int eventtriggers_size() const;
  private:
  int _internal_eventtriggers_size() const;
  public:
  void clear_eventtriggers();
  private:
  bool _internal_eventtriggers(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_eventtriggers() const;
  void _internal_add_eventtriggers(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_eventtriggers();
  public:
  bool eventtriggers(int index) const;
  void set_eventtriggers(int index, bool value);
  void add_eventtriggers(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      eventtriggers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_eventtriggers();

  // required string property = 3;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const std::string& property() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* property);
  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(const std::string& value);
  std::string* _internal_mutable_property();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference build = 2;
  bool has_build() const;
  private:
  bool _internal_has_build() const;
  public:
  void clear_build();
  const ::TSP::Reference& build() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_build();
  ::TSP::Reference* mutable_build();
  void set_allocated_build(::TSP::Reference* build);
  private:
  const ::TSP::Reference& _internal_build() const;
  ::TSP::Reference* _internal_mutable_build();
  public:
  void unsafe_arena_set_allocated_build(
      ::TSP::Reference* build);
  ::TSP::Reference* unsafe_arena_release_build();

  // @@protoc_insertion_point(class_scope:KN.CommandBuildSetValueArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> effects_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> types_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> deliveries_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > directions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > durations_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > delays_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > delayautomaticafters_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > delayautomaticwiths_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > eventtriggers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* build_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandBuildChunkSetValueArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandBuildChunkSetValueArchive) */ {
 public:
  inline CommandBuildChunkSetValueArchive() : CommandBuildChunkSetValueArchive(nullptr) {}
  ~CommandBuildChunkSetValueArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandBuildChunkSetValueArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandBuildChunkSetValueArchive(const CommandBuildChunkSetValueArchive& from);
  CommandBuildChunkSetValueArchive(CommandBuildChunkSetValueArchive&& from) noexcept
    : CommandBuildChunkSetValueArchive() {
    *this = ::std::move(from);
  }

  inline CommandBuildChunkSetValueArchive& operator=(const CommandBuildChunkSetValueArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandBuildChunkSetValueArchive& operator=(CommandBuildChunkSetValueArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandBuildChunkSetValueArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandBuildChunkSetValueArchive* internal_default_instance() {
    return reinterpret_cast<const CommandBuildChunkSetValueArchive*>(
               &_CommandBuildChunkSetValueArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CommandBuildChunkSetValueArchive& a, CommandBuildChunkSetValueArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandBuildChunkSetValueArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandBuildChunkSetValueArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandBuildChunkSetValueArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandBuildChunkSetValueArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandBuildChunkSetValueArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandBuildChunkSetValueArchive& from) {
    CommandBuildChunkSetValueArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandBuildChunkSetValueArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandBuildChunkSetValueArchive";
  }
  protected:
  explicit CommandBuildChunkSetValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferentsFieldNumber = 4,
    kAutomaticsFieldNumber = 5,
    kDurationsFieldNumber = 6,
    kDelaysFieldNumber = 7,
    kPropertyFieldNumber = 3,
    kSuperFieldNumber = 1,
    kBuildChunkFieldNumber = 2,
    kOldOwnsValueFieldNumber = 8,
  };
  // repeated uint32 referents = 4;
  int referents_size() const;
  private:
  int _internal_referents_size() const;
  public:
  void clear_referents();
  private:
  uint32_t _internal_referents(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_referents() const;
  void _internal_add_referents(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_referents();
  public:
  uint32_t referents(int index) const;
  void set_referents(int index, uint32_t value);
  void add_referents(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      referents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_referents();

  // repeated bool automatics = 5;
  int automatics_size() const;
  private:
  int _internal_automatics_size() const;
  public:
  void clear_automatics();
  private:
  bool _internal_automatics(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_automatics() const;
  void _internal_add_automatics(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_automatics();
  public:
  bool automatics(int index) const;
  void set_automatics(int index, bool value);
  void add_automatics(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      automatics() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_automatics();

  // repeated double durations = 6;
  int durations_size() const;
  private:
  int _internal_durations_size() const;
  public:
  void clear_durations();
  private:
  double _internal_durations(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_durations() const;
  void _internal_add_durations(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_durations();
  public:
  double durations(int index) const;
  void set_durations(int index, double value);
  void add_durations(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      durations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_durations();

  // repeated double delays = 7;
  int delays_size() const;
  private:
  int _internal_delays_size() const;
  public:
  void clear_delays();
  private:
  double _internal_delays(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_delays() const;
  void _internal_add_delays(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_delays();
  public:
  double delays(int index) const;
  void set_delays(int index, double value);
  void add_delays(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      delays() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_delays();

  // required string property = 3;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const std::string& property() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* property);
  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(const std::string& value);
  std::string* _internal_mutable_property();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .KN.BuildChunkArchive buildChunk = 2;
  bool has_buildchunk() const;
  private:
  bool _internal_has_buildchunk() const;
  public:
  void clear_buildchunk();
  const ::KN::BuildChunkArchive& buildchunk() const;
  PROTOBUF_NODISCARD ::KN::BuildChunkArchive* release_buildchunk();
  ::KN::BuildChunkArchive* mutable_buildchunk();
  void set_allocated_buildchunk(::KN::BuildChunkArchive* buildchunk);
  private:
  const ::KN::BuildChunkArchive& _internal_buildchunk() const;
  ::KN::BuildChunkArchive* _internal_mutable_buildchunk();
  public:
  void unsafe_arena_set_allocated_buildchunk(
      ::KN::BuildChunkArchive* buildchunk);
  ::KN::BuildChunkArchive* unsafe_arena_release_buildchunk();

  // optional bool oldOwnsValue = 8;
  bool has_oldownsvalue() const;
  private:
  bool _internal_has_oldownsvalue() const;
  public:
  void clear_oldownsvalue();
  bool oldownsvalue() const;
  void set_oldownsvalue(bool value);
  private:
  bool _internal_oldownsvalue() const;
  void _internal_set_oldownsvalue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandBuildChunkSetValueArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > referents_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > automatics_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > durations_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > delays_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_;
    ::TSK::CommandArchive* super_;
    ::KN::BuildChunkArchive* buildchunk_;
    bool oldownsvalue_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandTransitionSetValueArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandTransitionSetValueArchive) */ {
 public:
  inline CommandTransitionSetValueArchive() : CommandTransitionSetValueArchive(nullptr) {}
  ~CommandTransitionSetValueArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandTransitionSetValueArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandTransitionSetValueArchive(const CommandTransitionSetValueArchive& from);
  CommandTransitionSetValueArchive(CommandTransitionSetValueArchive&& from) noexcept
    : CommandTransitionSetValueArchive() {
    *this = ::std::move(from);
  }

  inline CommandTransitionSetValueArchive& operator=(const CommandTransitionSetValueArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandTransitionSetValueArchive& operator=(CommandTransitionSetValueArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandTransitionSetValueArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandTransitionSetValueArchive* internal_default_instance() {
    return reinterpret_cast<const CommandTransitionSetValueArchive*>(
               &_CommandTransitionSetValueArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CommandTransitionSetValueArchive& a, CommandTransitionSetValueArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandTransitionSetValueArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandTransitionSetValueArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandTransitionSetValueArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandTransitionSetValueArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandTransitionSetValueArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandTransitionSetValueArchive& from) {
    CommandTransitionSetValueArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandTransitionSetValueArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandTransitionSetValueArchive";
  }
  protected:
  explicit CommandTransitionSetValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectsFieldNumber = 4,
    kUnusedFieldNumber = 5,
    kUnused2FieldNumber = 6,
    kUnused3FieldNumber = 7,
    kDurationsFieldNumber = 8,
    kDirectionsFieldNumber = 9,
    kIsAutomaticsFieldNumber = 10,
    kDelaysFieldNumber = 11,
    kPropertyFieldNumber = 3,
    kSuperFieldNumber = 1,
    kSlideNodeFieldNumber = 2,
  };
  // repeated string effects = 4;
  int effects_size() const;
  private:
  int _internal_effects_size() const;
  public:
  void clear_effects();
  const std::string& effects(int index) const;
  std::string* mutable_effects(int index);
  void set_effects(int index, const std::string& value);
  void set_effects(int index, std::string&& value);
  void set_effects(int index, const char* value);
  void set_effects(int index, const char* value, size_t size);
  std::string* add_effects();
  void add_effects(const std::string& value);
  void add_effects(std::string&& value);
  void add_effects(const char* value);
  void add_effects(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& effects() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_effects();
  private:
  const std::string& _internal_effects(int index) const;
  std::string* _internal_add_effects();
  public:

  // repeated string unused = 5;
  int unused_size() const;
  private:
  int _internal_unused_size() const;
  public:
  void clear_unused();
  const std::string& unused(int index) const;
  std::string* mutable_unused(int index);
  void set_unused(int index, const std::string& value);
  void set_unused(int index, std::string&& value);
  void set_unused(int index, const char* value);
  void set_unused(int index, const char* value, size_t size);
  std::string* add_unused();
  void add_unused(const std::string& value);
  void add_unused(std::string&& value);
  void add_unused(const char* value);
  void add_unused(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& unused() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_unused();
  private:
  const std::string& _internal_unused(int index) const;
  std::string* _internal_add_unused();
  public:

  // repeated string unused2 = 6;
  int unused2_size() const;
  private:
  int _internal_unused2_size() const;
  public:
  void clear_unused2();
  const std::string& unused2(int index) const;
  std::string* mutable_unused2(int index);
  void set_unused2(int index, const std::string& value);
  void set_unused2(int index, std::string&& value);
  void set_unused2(int index, const char* value);
  void set_unused2(int index, const char* value, size_t size);
  std::string* add_unused2();
  void add_unused2(const std::string& value);
  void add_unused2(std::string&& value);
  void add_unused2(const char* value);
  void add_unused2(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& unused2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_unused2();
  private:
  const std::string& _internal_unused2(int index) const;
  std::string* _internal_add_unused2();
  public:

  // repeated string unused3 = 7;
  int unused3_size() const;
  private:
  int _internal_unused3_size() const;
  public:
  void clear_unused3();
  const std::string& unused3(int index) const;
  std::string* mutable_unused3(int index);
  void set_unused3(int index, const std::string& value);
  void set_unused3(int index, std::string&& value);
  void set_unused3(int index, const char* value);
  void set_unused3(int index, const char* value, size_t size);
  std::string* add_unused3();
  void add_unused3(const std::string& value);
  void add_unused3(std::string&& value);
  void add_unused3(const char* value);
  void add_unused3(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& unused3() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_unused3();
  private:
  const std::string& _internal_unused3(int index) const;
  std::string* _internal_add_unused3();
  public:

  // repeated double durations = 8;
  int durations_size() const;
  private:
  int _internal_durations_size() const;
  public:
  void clear_durations();
  private:
  double _internal_durations(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_durations() const;
  void _internal_add_durations(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_durations();
  public:
  double durations(int index) const;
  void set_durations(int index, double value);
  void add_durations(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      durations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_durations();

  // repeated uint32 directions = 9;
  int directions_size() const;
  private:
  int _internal_directions_size() const;
  public:
  void clear_directions();
  private:
  uint32_t _internal_directions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_directions() const;
  void _internal_add_directions(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_directions();
  public:
  uint32_t directions(int index) const;
  void set_directions(int index, uint32_t value);
  void add_directions(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      directions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_directions();

  // repeated bool isAutomatics = 10;
  int isautomatics_size() const;
  private:
  int _internal_isautomatics_size() const;
  public:
  void clear_isautomatics();
  private:
  bool _internal_isautomatics(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_isautomatics() const;
  void _internal_add_isautomatics(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_isautomatics();
  public:
  bool isautomatics(int index) const;
  void set_isautomatics(int index, bool value);
  void add_isautomatics(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      isautomatics() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_isautomatics();

  // repeated double delays = 11;
  int delays_size() const;
  private:
  int _internal_delays_size() const;
  public:
  void clear_delays();
  private:
  double _internal_delays(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_delays() const;
  void _internal_add_delays(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_delays();
  public:
  double delays(int index) const;
  void set_delays(int index, double value);
  void add_delays(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      delays() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_delays();

  // required string property = 3;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const std::string& property() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* property);
  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(const std::string& value);
  std::string* _internal_mutable_property();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference slideNode = 2;
  bool has_slidenode() const;
  private:
  bool _internal_has_slidenode() const;
  public:
  void clear_slidenode();
  const ::TSP::Reference& slidenode() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_slidenode();
  ::TSP::Reference* mutable_slidenode();
  void set_allocated_slidenode(::TSP::Reference* slidenode);
  private:
  const ::TSP::Reference& _internal_slidenode() const;
  ::TSP::Reference* _internal_mutable_slidenode();
  public:
  void unsafe_arena_set_allocated_slidenode(
      ::TSP::Reference* slidenode);
  ::TSP::Reference* unsafe_arena_release_slidenode();

  // @@protoc_insertion_point(class_scope:KN.CommandTransitionSetValueArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> effects_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> unused_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> unused2_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> unused3_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > durations_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > directions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > isautomatics_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > delays_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* slidenode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandShowSetSlideNumberVisibilityArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandShowSetSlideNumberVisibilityArchive) */ {
 public:
  inline CommandShowSetSlideNumberVisibilityArchive() : CommandShowSetSlideNumberVisibilityArchive(nullptr) {}
  ~CommandShowSetSlideNumberVisibilityArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandShowSetSlideNumberVisibilityArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandShowSetSlideNumberVisibilityArchive(const CommandShowSetSlideNumberVisibilityArchive& from);
  CommandShowSetSlideNumberVisibilityArchive(CommandShowSetSlideNumberVisibilityArchive&& from) noexcept
    : CommandShowSetSlideNumberVisibilityArchive() {
    *this = ::std::move(from);
  }

  inline CommandShowSetSlideNumberVisibilityArchive& operator=(const CommandShowSetSlideNumberVisibilityArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandShowSetSlideNumberVisibilityArchive& operator=(CommandShowSetSlideNumberVisibilityArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandShowSetSlideNumberVisibilityArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandShowSetSlideNumberVisibilityArchive* internal_default_instance() {
    return reinterpret_cast<const CommandShowSetSlideNumberVisibilityArchive*>(
               &_CommandShowSetSlideNumberVisibilityArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CommandShowSetSlideNumberVisibilityArchive& a, CommandShowSetSlideNumberVisibilityArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandShowSetSlideNumberVisibilityArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandShowSetSlideNumberVisibilityArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandShowSetSlideNumberVisibilityArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandShowSetSlideNumberVisibilityArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandShowSetSlideNumberVisibilityArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandShowSetSlideNumberVisibilityArchive& from) {
    CommandShowSetSlideNumberVisibilityArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandShowSetSlideNumberVisibilityArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandShowSetSlideNumberVisibilityArchive";
  }
  protected:
  explicit CommandShowSetSlideNumberVisibilityArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kShowFieldNumber = 2,
    kProviderUndoFieldNumber = 4,
    kSlideNumbersVisibleFieldNumber = 3,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference show = 2;
  bool has_show() const;
  private:
  bool _internal_has_show() const;
  public:
  void clear_show();
  const ::TSP::Reference& show() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_show();
  ::TSP::Reference* mutable_show();
  void set_allocated_show(::TSP::Reference* show);
  private:
  const ::TSP::Reference& _internal_show() const;
  ::TSP::Reference* _internal_mutable_show();
  public:
  void unsafe_arena_set_allocated_show(
      ::TSP::Reference* show);
  ::TSP::Reference* unsafe_arena_release_show();

  // optional .TSP.Reference providerUndo = 4;
  bool has_providerundo() const;
  private:
  bool _internal_has_providerundo() const;
  public:
  void clear_providerundo();
  const ::TSP::Reference& providerundo() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_providerundo();
  ::TSP::Reference* mutable_providerundo();
  void set_allocated_providerundo(::TSP::Reference* providerundo);
  private:
  const ::TSP::Reference& _internal_providerundo() const;
  ::TSP::Reference* _internal_mutable_providerundo();
  public:
  void unsafe_arena_set_allocated_providerundo(
      ::TSP::Reference* providerundo);
  ::TSP::Reference* unsafe_arena_release_providerundo();

  // required bool slideNumbersVisible = 3;
  bool has_slidenumbersvisible() const;
  private:
  bool _internal_has_slidenumbersvisible() const;
  public:
  void clear_slidenumbersvisible();
  bool slidenumbersvisible() const;
  void set_slidenumbersvisible(bool value);
  private:
  bool _internal_slidenumbersvisible() const;
  void _internal_set_slidenumbersvisible(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandShowSetSlideNumberVisibilityArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* show_;
    ::TSP::Reference* providerundo_;
    bool slidenumbersvisible_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandMasterRescaleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandMasterRescaleArchive) */ {
 public:
  inline CommandMasterRescaleArchive() : CommandMasterRescaleArchive(nullptr) {}
  ~CommandMasterRescaleArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandMasterRescaleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandMasterRescaleArchive(const CommandMasterRescaleArchive& from);
  CommandMasterRescaleArchive(CommandMasterRescaleArchive&& from) noexcept
    : CommandMasterRescaleArchive() {
    *this = ::std::move(from);
  }

  inline CommandMasterRescaleArchive& operator=(const CommandMasterRescaleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandMasterRescaleArchive& operator=(CommandMasterRescaleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandMasterRescaleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandMasterRescaleArchive* internal_default_instance() {
    return reinterpret_cast<const CommandMasterRescaleArchive*>(
               &_CommandMasterRescaleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CommandMasterRescaleArchive& a, CommandMasterRescaleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandMasterRescaleArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandMasterRescaleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandMasterRescaleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandMasterRescaleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandMasterRescaleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandMasterRescaleArchive& from) {
    CommandMasterRescaleArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandMasterRescaleArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandMasterRescaleArchive";
  }
  protected:
  explicit CommandMasterRescaleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kMasterFieldNumber = 2,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference master = 2;
  bool has_master() const;
  private:
  bool _internal_has_master() const;
  public:
  void clear_master();
  const ::TSP::Reference& master() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_master();
  ::TSP::Reference* mutable_master();
  void set_allocated_master(::TSP::Reference* master);
  private:
  const ::TSP::Reference& _internal_master() const;
  ::TSP::Reference* _internal_mutable_master();
  public:
  void unsafe_arena_set_allocated_master(
      ::TSP::Reference* master);
  ::TSP::Reference* unsafe_arena_release_master();

  // @@protoc_insertion_point(class_scope:KN.CommandMasterRescaleArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* master_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandMasterSetThumbnailTextArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandMasterSetThumbnailTextArchive) */ {
 public:
  inline CommandMasterSetThumbnailTextArchive() : CommandMasterSetThumbnailTextArchive(nullptr) {}
  ~CommandMasterSetThumbnailTextArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandMasterSetThumbnailTextArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandMasterSetThumbnailTextArchive(const CommandMasterSetThumbnailTextArchive& from);
  CommandMasterSetThumbnailTextArchive(CommandMasterSetThumbnailTextArchive&& from) noexcept
    : CommandMasterSetThumbnailTextArchive() {
    *this = ::std::move(from);
  }

  inline CommandMasterSetThumbnailTextArchive& operator=(const CommandMasterSetThumbnailTextArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandMasterSetThumbnailTextArchive& operator=(CommandMasterSetThumbnailTextArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandMasterSetThumbnailTextArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandMasterSetThumbnailTextArchive* internal_default_instance() {
    return reinterpret_cast<const CommandMasterSetThumbnailTextArchive*>(
               &_CommandMasterSetThumbnailTextArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CommandMasterSetThumbnailTextArchive& a, CommandMasterSetThumbnailTextArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandMasterSetThumbnailTextArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandMasterSetThumbnailTextArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandMasterSetThumbnailTextArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandMasterSetThumbnailTextArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandMasterSetThumbnailTextArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandMasterSetThumbnailTextArchive& from) {
    CommandMasterSetThumbnailTextArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandMasterSetThumbnailTextArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandMasterSetThumbnailTextArchive";
  }
  protected:
  explicit CommandMasterSetThumbnailTextArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewTextFieldNumber = 4,
    kOldTextFieldNumber = 5,
    kSuperFieldNumber = 1,
    kMasterFieldNumber = 2,
    kIsBodyFieldNumber = 3,
  };
  // optional string new_text = 4;
  bool has_new_text() const;
  private:
  bool _internal_has_new_text() const;
  public:
  void clear_new_text();
  const std::string& new_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_new_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_new_text();
  PROTOBUF_NODISCARD std::string* release_new_text();
  void set_allocated_new_text(std::string* new_text);
  private:
  const std::string& _internal_new_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_text(const std::string& value);
  std::string* _internal_mutable_new_text();
  public:

  // optional string old_text = 5;
  bool has_old_text() const;
  private:
  bool _internal_has_old_text() const;
  public:
  void clear_old_text();
  const std::string& old_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_old_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_old_text();
  PROTOBUF_NODISCARD std::string* release_old_text();
  void set_allocated_old_text(std::string* old_text);
  private:
  const std::string& _internal_old_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_old_text(const std::string& value);
  std::string* _internal_mutable_old_text();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference master = 2;
  bool has_master() const;
  private:
  bool _internal_has_master() const;
  public:
  void clear_master();
  const ::TSP::Reference& master() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_master();
  ::TSP::Reference* mutable_master();
  void set_allocated_master(::TSP::Reference* master);
  private:
  const ::TSP::Reference& _internal_master() const;
  ::TSP::Reference* _internal_mutable_master();
  public:
  void unsafe_arena_set_allocated_master(
      ::TSP::Reference* master);
  ::TSP::Reference* unsafe_arena_release_master();

  // required bool is_body = 3;
  bool has_is_body() const;
  private:
  bool _internal_has_is_body() const;
  public:
  void clear_is_body();
  bool is_body() const;
  void set_is_body(bool value);
  private:
  bool _internal_is_body() const;
  void _internal_set_is_body(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandMasterSetThumbnailTextArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_text_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* master_;
    bool is_body_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandMasterSetBodyStylesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandMasterSetBodyStylesArchive) */ {
 public:
  inline CommandMasterSetBodyStylesArchive() : CommandMasterSetBodyStylesArchive(nullptr) {}
  ~CommandMasterSetBodyStylesArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandMasterSetBodyStylesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandMasterSetBodyStylesArchive(const CommandMasterSetBodyStylesArchive& from);
  CommandMasterSetBodyStylesArchive(CommandMasterSetBodyStylesArchive&& from) noexcept
    : CommandMasterSetBodyStylesArchive() {
    *this = ::std::move(from);
  }

  inline CommandMasterSetBodyStylesArchive& operator=(const CommandMasterSetBodyStylesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandMasterSetBodyStylesArchive& operator=(CommandMasterSetBodyStylesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandMasterSetBodyStylesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandMasterSetBodyStylesArchive* internal_default_instance() {
    return reinterpret_cast<const CommandMasterSetBodyStylesArchive*>(
               &_CommandMasterSetBodyStylesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CommandMasterSetBodyStylesArchive& a, CommandMasterSetBodyStylesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandMasterSetBodyStylesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandMasterSetBodyStylesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandMasterSetBodyStylesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandMasterSetBodyStylesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandMasterSetBodyStylesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandMasterSetBodyStylesArchive& from) {
    CommandMasterSetBodyStylesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandMasterSetBodyStylesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandMasterSetBodyStylesArchive";
  }
  protected:
  explicit CommandMasterSetBodyStylesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewParagraphStylesFieldNumber = 3,
    kNewListStylesFieldNumber = 4,
    kOldParagraphStylesFieldNumber = 5,
    kOldListStylesFieldNumber = 6,
    kSuperFieldNumber = 1,
    kMasterFieldNumber = 2,
  };
  // repeated .TSP.Reference new_paragraph_styles = 3;
  int new_paragraph_styles_size() const;
  private:
  int _internal_new_paragraph_styles_size() const;
  public:
  void clear_new_paragraph_styles();
  ::TSP::Reference* mutable_new_paragraph_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_new_paragraph_styles();
  private:
  const ::TSP::Reference& _internal_new_paragraph_styles(int index) const;
  ::TSP::Reference* _internal_add_new_paragraph_styles();
  public:
  const ::TSP::Reference& new_paragraph_styles(int index) const;
  ::TSP::Reference* add_new_paragraph_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      new_paragraph_styles() const;

  // repeated .TSP.Reference new_list_styles = 4;
  int new_list_styles_size() const;
  private:
  int _internal_new_list_styles_size() const;
  public:
  void clear_new_list_styles();
  ::TSP::Reference* mutable_new_list_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_new_list_styles();
  private:
  const ::TSP::Reference& _internal_new_list_styles(int index) const;
  ::TSP::Reference* _internal_add_new_list_styles();
  public:
  const ::TSP::Reference& new_list_styles(int index) const;
  ::TSP::Reference* add_new_list_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      new_list_styles() const;

  // repeated .TSP.Reference old_paragraph_styles = 5;
  int old_paragraph_styles_size() const;
  private:
  int _internal_old_paragraph_styles_size() const;
  public:
  void clear_old_paragraph_styles();
  ::TSP::Reference* mutable_old_paragraph_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_old_paragraph_styles();
  private:
  const ::TSP::Reference& _internal_old_paragraph_styles(int index) const;
  ::TSP::Reference* _internal_add_old_paragraph_styles();
  public:
  const ::TSP::Reference& old_paragraph_styles(int index) const;
  ::TSP::Reference* add_old_paragraph_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      old_paragraph_styles() const;

  // repeated .TSP.Reference old_list_styles = 6;
  int old_list_styles_size() const;
  private:
  int _internal_old_list_styles_size() const;
  public:
  void clear_old_list_styles();
  ::TSP::Reference* mutable_old_list_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_old_list_styles();
  private:
  const ::TSP::Reference& _internal_old_list_styles(int index) const;
  ::TSP::Reference* _internal_add_old_list_styles();
  public:
  const ::TSP::Reference& old_list_styles(int index) const;
  ::TSP::Reference* add_old_list_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      old_list_styles() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference master = 2;
  bool has_master() const;
  private:
  bool _internal_has_master() const;
  public:
  void clear_master();
  const ::TSP::Reference& master() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_master();
  ::TSP::Reference* mutable_master();
  void set_allocated_master(::TSP::Reference* master);
  private:
  const ::TSP::Reference& _internal_master() const;
  ::TSP::Reference* _internal_mutable_master();
  public:
  void unsafe_arena_set_allocated_master(
      ::TSP::Reference* master);
  ::TSP::Reference* unsafe_arena_release_master();

  // @@protoc_insertion_point(class_scope:KN.CommandMasterSetBodyStylesArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > new_paragraph_styles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > new_list_styles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > old_paragraph_styles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > old_list_styles_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* master_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideApplyThemeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideApplyThemeArchive) */ {
 public:
  inline CommandSlideApplyThemeArchive() : CommandSlideApplyThemeArchive(nullptr) {}
  ~CommandSlideApplyThemeArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSlideApplyThemeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideApplyThemeArchive(const CommandSlideApplyThemeArchive& from);
  CommandSlideApplyThemeArchive(CommandSlideApplyThemeArchive&& from) noexcept
    : CommandSlideApplyThemeArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideApplyThemeArchive& operator=(const CommandSlideApplyThemeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideApplyThemeArchive& operator=(CommandSlideApplyThemeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideApplyThemeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideApplyThemeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideApplyThemeArchive*>(
               &_CommandSlideApplyThemeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CommandSlideApplyThemeArchive& a, CommandSlideApplyThemeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideApplyThemeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideApplyThemeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSlideApplyThemeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSlideApplyThemeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideApplyThemeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSlideApplyThemeArchive& from) {
    CommandSlideApplyThemeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideApplyThemeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideApplyThemeArchive";
  }
  protected:
  explicit CommandSlideApplyThemeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kBlobFieldNumber = 2,
  };
  // required .TSS.ApplyThemeChildCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::ApplyThemeChildCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSS::ApplyThemeChildCommandArchive* release_super();
  ::TSS::ApplyThemeChildCommandArchive* mutable_super();
  void set_allocated_super(::TSS::ApplyThemeChildCommandArchive* super);
  private:
  const ::TSS::ApplyThemeChildCommandArchive& _internal_super() const;
  ::TSS::ApplyThemeChildCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::ApplyThemeChildCommandArchive* super);
  ::TSS::ApplyThemeChildCommandArchive* unsafe_arena_release_super();

  // required .KN.MasterChangeBlobArchive blob = 2;
  bool has_blob() const;
  private:
  bool _internal_has_blob() const;
  public:
  void clear_blob();
  const ::KN::MasterChangeBlobArchive& blob() const;
  PROTOBUF_NODISCARD ::KN::MasterChangeBlobArchive* release_blob();
  ::KN::MasterChangeBlobArchive* mutable_blob();
  void set_allocated_blob(::KN::MasterChangeBlobArchive* blob);
  private:
  const ::KN::MasterChangeBlobArchive& _internal_blob() const;
  ::KN::MasterChangeBlobArchive* _internal_mutable_blob();
  public:
  void unsafe_arena_set_allocated_blob(
      ::KN::MasterChangeBlobArchive* blob);
  ::KN::MasterChangeBlobArchive* unsafe_arena_release_blob();

  // @@protoc_insertion_point(class_scope:KN.CommandSlideApplyThemeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSS::ApplyThemeChildCommandArchive* super_;
    ::KN::MasterChangeBlobArchive* blob_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandChangeMasterSlideArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandChangeMasterSlideArchive) */ {
 public:
  inline CommandChangeMasterSlideArchive() : CommandChangeMasterSlideArchive(nullptr) {}
  ~CommandChangeMasterSlideArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandChangeMasterSlideArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandChangeMasterSlideArchive(const CommandChangeMasterSlideArchive& from);
  CommandChangeMasterSlideArchive(CommandChangeMasterSlideArchive&& from) noexcept
    : CommandChangeMasterSlideArchive() {
    *this = ::std::move(from);
  }

  inline CommandChangeMasterSlideArchive& operator=(const CommandChangeMasterSlideArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandChangeMasterSlideArchive& operator=(CommandChangeMasterSlideArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandChangeMasterSlideArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandChangeMasterSlideArchive* internal_default_instance() {
    return reinterpret_cast<const CommandChangeMasterSlideArchive*>(
               &_CommandChangeMasterSlideArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CommandChangeMasterSlideArchive& a, CommandChangeMasterSlideArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandChangeMasterSlideArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandChangeMasterSlideArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandChangeMasterSlideArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandChangeMasterSlideArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandChangeMasterSlideArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandChangeMasterSlideArchive& from) {
    CommandChangeMasterSlideArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandChangeMasterSlideArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandChangeMasterSlideArchive";
  }
  protected:
  explicit CommandChangeMasterSlideArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSlideFieldNumber = 2,
    kMasterFieldNumber = 3,
    kPlaceholderCommandsFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference slide = 2;
  bool has_slide() const;
  private:
  bool _internal_has_slide() const;
  public:
  void clear_slide();
  const ::TSP::Reference& slide() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_slide();
  ::TSP::Reference* mutable_slide();
  void set_allocated_slide(::TSP::Reference* slide);
  private:
  const ::TSP::Reference& _internal_slide() const;
  ::TSP::Reference* _internal_mutable_slide();
  public:
  void unsafe_arena_set_allocated_slide(
      ::TSP::Reference* slide);
  ::TSP::Reference* unsafe_arena_release_slide();

  // required .TSP.Reference master = 3;
  bool has_master() const;
  private:
  bool _internal_has_master() const;
  public:
  void clear_master();
  const ::TSP::Reference& master() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_master();
  ::TSP::Reference* mutable_master();
  void set_allocated_master(::TSP::Reference* master);
  private:
  const ::TSP::Reference& _internal_master() const;
  ::TSP::Reference* _internal_mutable_master();
  public:
  void unsafe_arena_set_allocated_master(
      ::TSP::Reference* master);
  ::TSP::Reference* unsafe_arena_release_master();

  // required .TSP.Reference placeholder_commands = 4;
  bool has_placeholder_commands() const;
  private:
  bool _internal_has_placeholder_commands() const;
  public:
  void clear_placeholder_commands();
  const ::TSP::Reference& placeholder_commands() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_placeholder_commands();
  ::TSP::Reference* mutable_placeholder_commands();
  void set_allocated_placeholder_commands(::TSP::Reference* placeholder_commands);
  private:
  const ::TSP::Reference& _internal_placeholder_commands() const;
  ::TSP::Reference* _internal_mutable_placeholder_commands();
  public:
  void unsafe_arena_set_allocated_placeholder_commands(
      ::TSP::Reference* placeholder_commands);
  ::TSP::Reference* unsafe_arena_release_placeholder_commands();

  // @@protoc_insertion_point(class_scope:KN.CommandChangeMasterSlideArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* slide_;
    ::TSP::Reference* master_;
    ::TSP::Reference* placeholder_commands_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlidePrimitiveSetMasterArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlidePrimitiveSetMasterArchive) */ {
 public:
  inline CommandSlidePrimitiveSetMasterArchive() : CommandSlidePrimitiveSetMasterArchive(nullptr) {}
  ~CommandSlidePrimitiveSetMasterArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSlidePrimitiveSetMasterArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlidePrimitiveSetMasterArchive(const CommandSlidePrimitiveSetMasterArchive& from);
  CommandSlidePrimitiveSetMasterArchive(CommandSlidePrimitiveSetMasterArchive&& from) noexcept
    : CommandSlidePrimitiveSetMasterArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlidePrimitiveSetMasterArchive& operator=(const CommandSlidePrimitiveSetMasterArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlidePrimitiveSetMasterArchive& operator=(CommandSlidePrimitiveSetMasterArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlidePrimitiveSetMasterArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlidePrimitiveSetMasterArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlidePrimitiveSetMasterArchive*>(
               &_CommandSlidePrimitiveSetMasterArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CommandSlidePrimitiveSetMasterArchive& a, CommandSlidePrimitiveSetMasterArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlidePrimitiveSetMasterArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlidePrimitiveSetMasterArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSlidePrimitiveSetMasterArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSlidePrimitiveSetMasterArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlidePrimitiveSetMasterArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSlidePrimitiveSetMasterArchive& from) {
    CommandSlidePrimitiveSetMasterArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlidePrimitiveSetMasterArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlidePrimitiveSetMasterArchive";
  }
  protected:
  explicit CommandSlidePrimitiveSetMasterArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSlideFieldNumber = 2,
    kMasterFieldNumber = 3,
    kOldMasterFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference slide = 2;
  bool has_slide() const;
  private:
  bool _internal_has_slide() const;
  public:
  void clear_slide();
  const ::TSP::Reference& slide() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_slide();
  ::TSP::Reference* mutable_slide();
  void set_allocated_slide(::TSP::Reference* slide);
  private:
  const ::TSP::Reference& _internal_slide() const;
  ::TSP::Reference* _internal_mutable_slide();
  public:
  void unsafe_arena_set_allocated_slide(
      ::TSP::Reference* slide);
  ::TSP::Reference* unsafe_arena_release_slide();

  // required .TSP.Reference master = 3;
  bool has_master() const;
  private:
  bool _internal_has_master() const;
  public:
  void clear_master();
  const ::TSP::Reference& master() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_master();
  ::TSP::Reference* mutable_master();
  void set_allocated_master(::TSP::Reference* master);
  private:
  const ::TSP::Reference& _internal_master() const;
  ::TSP::Reference* _internal_mutable_master();
  public:
  void unsafe_arena_set_allocated_master(
      ::TSP::Reference* master);
  ::TSP::Reference* unsafe_arena_release_master();

  // required .TSP.Reference old_master = 4;
  bool has_old_master() const;
  private:
  bool _internal_has_old_master() const;
  public:
  void clear_old_master();
  const ::TSP::Reference& old_master() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_old_master();
  ::TSP::Reference* mutable_old_master();
  void set_allocated_old_master(::TSP::Reference* old_master);
  private:
  const ::TSP::Reference& _internal_old_master() const;
  ::TSP::Reference* _internal_mutable_old_master();
  public:
  void unsafe_arena_set_allocated_old_master(
      ::TSP::Reference* old_master);
  ::TSP::Reference* unsafe_arena_release_old_master();

  // @@protoc_insertion_point(class_scope:KN.CommandSlidePrimitiveSetMasterArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* slide_;
    ::TSP::Reference* master_;
    ::TSP::Reference* old_master_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideReapplyMasterArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideReapplyMasterArchive) */ {
 public:
  inline CommandSlideReapplyMasterArchive() : CommandSlideReapplyMasterArchive(nullptr) {}
  ~CommandSlideReapplyMasterArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSlideReapplyMasterArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideReapplyMasterArchive(const CommandSlideReapplyMasterArchive& from);
  CommandSlideReapplyMasterArchive(CommandSlideReapplyMasterArchive&& from) noexcept
    : CommandSlideReapplyMasterArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideReapplyMasterArchive& operator=(const CommandSlideReapplyMasterArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideReapplyMasterArchive& operator=(CommandSlideReapplyMasterArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideReapplyMasterArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideReapplyMasterArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideReapplyMasterArchive*>(
               &_CommandSlideReapplyMasterArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CommandSlideReapplyMasterArchive& a, CommandSlideReapplyMasterArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideReapplyMasterArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideReapplyMasterArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSlideReapplyMasterArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSlideReapplyMasterArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideReapplyMasterArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSlideReapplyMasterArchive& from) {
    CommandSlideReapplyMasterArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideReapplyMasterArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideReapplyMasterArchive";
  }
  protected:
  explicit CommandSlideReapplyMasterArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kReapplyAccumulatedCommandFieldNumber = 2,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference reapply_accumulated_command = 2;
  bool has_reapply_accumulated_command() const;
  private:
  bool _internal_has_reapply_accumulated_command() const;
  public:
  void clear_reapply_accumulated_command();
  const ::TSP::Reference& reapply_accumulated_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_reapply_accumulated_command();
  ::TSP::Reference* mutable_reapply_accumulated_command();
  void set_allocated_reapply_accumulated_command(::TSP::Reference* reapply_accumulated_command);
  private:
  const ::TSP::Reference& _internal_reapply_accumulated_command() const;
  ::TSP::Reference* _internal_mutable_reapply_accumulated_command();
  public:
  void unsafe_arena_set_allocated_reapply_accumulated_command(
      ::TSP::Reference* reapply_accumulated_command);
  ::TSP::Reference* unsafe_arena_release_reapply_accumulated_command();

  // @@protoc_insertion_point(class_scope:KN.CommandSlideReapplyMasterArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* reapply_accumulated_command_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandShowSetSoundtrack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandShowSetSoundtrack) */ {
 public:
  inline CommandShowSetSoundtrack() : CommandShowSetSoundtrack(nullptr) {}
  ~CommandShowSetSoundtrack() override;
  explicit PROTOBUF_CONSTEXPR CommandShowSetSoundtrack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandShowSetSoundtrack(const CommandShowSetSoundtrack& from);
  CommandShowSetSoundtrack(CommandShowSetSoundtrack&& from) noexcept
    : CommandShowSetSoundtrack() {
    *this = ::std::move(from);
  }

  inline CommandShowSetSoundtrack& operator=(const CommandShowSetSoundtrack& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandShowSetSoundtrack& operator=(CommandShowSetSoundtrack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandShowSetSoundtrack& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandShowSetSoundtrack* internal_default_instance() {
    return reinterpret_cast<const CommandShowSetSoundtrack*>(
               &_CommandShowSetSoundtrack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CommandShowSetSoundtrack& a, CommandShowSetSoundtrack& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandShowSetSoundtrack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandShowSetSoundtrack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandShowSetSoundtrack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandShowSetSoundtrack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandShowSetSoundtrack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandShowSetSoundtrack& from) {
    CommandShowSetSoundtrack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandShowSetSoundtrack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandShowSetSoundtrack";
  }
  protected:
  explicit CommandShowSetSoundtrack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kShowFieldNumber = 2,
    kSoundtrackFieldNumber = 3,
    kOldSoundtrackFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference show = 2;
  bool has_show() const;
  private:
  bool _internal_has_show() const;
  public:
  void clear_show();
  const ::TSP::Reference& show() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_show();
  ::TSP::Reference* mutable_show();
  void set_allocated_show(::TSP::Reference* show);
  private:
  const ::TSP::Reference& _internal_show() const;
  ::TSP::Reference* _internal_mutable_show();
  public:
  void unsafe_arena_set_allocated_show(
      ::TSP::Reference* show);
  ::TSP::Reference* unsafe_arena_release_show();

  // optional .TSP.Reference soundtrack = 3;
  bool has_soundtrack() const;
  private:
  bool _internal_has_soundtrack() const;
  public:
  void clear_soundtrack();
  const ::TSP::Reference& soundtrack() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_soundtrack();
  ::TSP::Reference* mutable_soundtrack();
  void set_allocated_soundtrack(::TSP::Reference* soundtrack);
  private:
  const ::TSP::Reference& _internal_soundtrack() const;
  ::TSP::Reference* _internal_mutable_soundtrack();
  public:
  void unsafe_arena_set_allocated_soundtrack(
      ::TSP::Reference* soundtrack);
  ::TSP::Reference* unsafe_arena_release_soundtrack();

  // optional .TSP.Reference old_soundtrack = 4;
  bool has_old_soundtrack() const;
  private:
  bool _internal_has_old_soundtrack() const;
  public:
  void clear_old_soundtrack();
  const ::TSP::Reference& old_soundtrack() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_old_soundtrack();
  ::TSP::Reference* mutable_old_soundtrack();
  void set_allocated_old_soundtrack(::TSP::Reference* old_soundtrack);
  private:
  const ::TSP::Reference& _internal_old_soundtrack() const;
  ::TSP::Reference* _internal_mutable_old_soundtrack();
  public:
  void unsafe_arena_set_allocated_old_soundtrack(
      ::TSP::Reference* old_soundtrack);
  ::TSP::Reference* unsafe_arena_release_old_soundtrack();

  // @@protoc_insertion_point(class_scope:KN.CommandShowSetSoundtrack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* show_;
    ::TSP::Reference* soundtrack_;
    ::TSP::Reference* old_soundtrack_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSoundtrackSetValue_PropertyValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSoundtrackSetValue.PropertyValue) */ {
 public:
  inline CommandSoundtrackSetValue_PropertyValue() : CommandSoundtrackSetValue_PropertyValue(nullptr) {}
  ~CommandSoundtrackSetValue_PropertyValue() override;
  explicit PROTOBUF_CONSTEXPR CommandSoundtrackSetValue_PropertyValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSoundtrackSetValue_PropertyValue(const CommandSoundtrackSetValue_PropertyValue& from);
  CommandSoundtrackSetValue_PropertyValue(CommandSoundtrackSetValue_PropertyValue&& from) noexcept
    : CommandSoundtrackSetValue_PropertyValue() {
    *this = ::std::move(from);
  }

  inline CommandSoundtrackSetValue_PropertyValue& operator=(const CommandSoundtrackSetValue_PropertyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSoundtrackSetValue_PropertyValue& operator=(CommandSoundtrackSetValue_PropertyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSoundtrackSetValue_PropertyValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSoundtrackSetValue_PropertyValue* internal_default_instance() {
    return reinterpret_cast<const CommandSoundtrackSetValue_PropertyValue*>(
               &_CommandSoundtrackSetValue_PropertyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CommandSoundtrackSetValue_PropertyValue& a, CommandSoundtrackSetValue_PropertyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSoundtrackSetValue_PropertyValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSoundtrackSetValue_PropertyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSoundtrackSetValue_PropertyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSoundtrackSetValue_PropertyValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSoundtrackSetValue_PropertyValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSoundtrackSetValue_PropertyValue& from) {
    CommandSoundtrackSetValue_PropertyValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSoundtrackSetValue_PropertyValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSoundtrackSetValue.PropertyValue";
  }
  protected:
  explicit CommandSoundtrackSetValue_PropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMediaReferenceValuesFieldNumber = 3,
    kDoubleValueFieldNumber = 1,
    kModeValueFieldNumber = 2,
  };
  // repeated .TSP.DataReference media_reference_values = 3;
  int media_reference_values_size() const;
  private:
  int _internal_media_reference_values_size() const;
  public:
  void clear_media_reference_values();
  ::TSP::DataReference* mutable_media_reference_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >*
      mutable_media_reference_values();
  private:
  const ::TSP::DataReference& _internal_media_reference_values(int index) const;
  ::TSP::DataReference* _internal_add_media_reference_values();
  public:
  const ::TSP::DataReference& media_reference_values(int index) const;
  ::TSP::DataReference* add_media_reference_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >&
      media_reference_values() const;

  // optional double double_value = 1;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // optional .KN.Soundtrack.SoundtrackMode mode_value = 2;
  bool has_mode_value() const;
  private:
  bool _internal_has_mode_value() const;
  public:
  void clear_mode_value();
  ::KN::Soundtrack_SoundtrackMode mode_value() const;
  void set_mode_value(::KN::Soundtrack_SoundtrackMode value);
  private:
  ::KN::Soundtrack_SoundtrackMode _internal_mode_value() const;
  void _internal_set_mode_value(::KN::Soundtrack_SoundtrackMode value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandSoundtrackSetValue.PropertyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference > media_reference_values_;
    double double_value_;
    int mode_value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSoundtrackSetValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSoundtrackSetValue) */ {
 public:
  inline CommandSoundtrackSetValue() : CommandSoundtrackSetValue(nullptr) {}
  ~CommandSoundtrackSetValue() override;
  explicit PROTOBUF_CONSTEXPR CommandSoundtrackSetValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSoundtrackSetValue(const CommandSoundtrackSetValue& from);
  CommandSoundtrackSetValue(CommandSoundtrackSetValue&& from) noexcept
    : CommandSoundtrackSetValue() {
    *this = ::std::move(from);
  }

  inline CommandSoundtrackSetValue& operator=(const CommandSoundtrackSetValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSoundtrackSetValue& operator=(CommandSoundtrackSetValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSoundtrackSetValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSoundtrackSetValue* internal_default_instance() {
    return reinterpret_cast<const CommandSoundtrackSetValue*>(
               &_CommandSoundtrackSetValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CommandSoundtrackSetValue& a, CommandSoundtrackSetValue& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSoundtrackSetValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSoundtrackSetValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSoundtrackSetValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSoundtrackSetValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSoundtrackSetValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSoundtrackSetValue& from) {
    CommandSoundtrackSetValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSoundtrackSetValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSoundtrackSetValue";
  }
  protected:
  explicit CommandSoundtrackSetValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandSoundtrackSetValue_PropertyValue PropertyValue;

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyFieldNumber = 3,
    kSuperFieldNumber = 1,
    kSoundtrackFieldNumber = 2,
    kOldValueFieldNumber = 4,
    kNewValueFieldNumber = 5,
  };
  // optional string property = 3;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const std::string& property() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* property);
  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(const std::string& value);
  std::string* _internal_mutable_property();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference soundtrack = 2;
  bool has_soundtrack() const;
  private:
  bool _internal_has_soundtrack() const;
  public:
  void clear_soundtrack();
  const ::TSP::Reference& soundtrack() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_soundtrack();
  ::TSP::Reference* mutable_soundtrack();
  void set_allocated_soundtrack(::TSP::Reference* soundtrack);
  private:
  const ::TSP::Reference& _internal_soundtrack() const;
  ::TSP::Reference* _internal_mutable_soundtrack();
  public:
  void unsafe_arena_set_allocated_soundtrack(
      ::TSP::Reference* soundtrack);
  ::TSP::Reference* unsafe_arena_release_soundtrack();

  // optional .KN.CommandSoundtrackSetValue.PropertyValue old_value = 4;
  bool has_old_value() const;
  private:
  bool _internal_has_old_value() const;
  public:
  void clear_old_value();
  const ::KN::CommandSoundtrackSetValue_PropertyValue& old_value() const;
  PROTOBUF_NODISCARD ::KN::CommandSoundtrackSetValue_PropertyValue* release_old_value();
  ::KN::CommandSoundtrackSetValue_PropertyValue* mutable_old_value();
  void set_allocated_old_value(::KN::CommandSoundtrackSetValue_PropertyValue* old_value);
  private:
  const ::KN::CommandSoundtrackSetValue_PropertyValue& _internal_old_value() const;
  ::KN::CommandSoundtrackSetValue_PropertyValue* _internal_mutable_old_value();
  public:
  void unsafe_arena_set_allocated_old_value(
      ::KN::CommandSoundtrackSetValue_PropertyValue* old_value);
  ::KN::CommandSoundtrackSetValue_PropertyValue* unsafe_arena_release_old_value();

  // optional .KN.CommandSoundtrackSetValue.PropertyValue new_value = 5;
  bool has_new_value() const;
  private:
  bool _internal_has_new_value() const;
  public:
  void clear_new_value();
  const ::KN::CommandSoundtrackSetValue_PropertyValue& new_value() const;
  PROTOBUF_NODISCARD ::KN::CommandSoundtrackSetValue_PropertyValue* release_new_value();
  ::KN::CommandSoundtrackSetValue_PropertyValue* mutable_new_value();
  void set_allocated_new_value(::KN::CommandSoundtrackSetValue_PropertyValue* new_value);
  private:
  const ::KN::CommandSoundtrackSetValue_PropertyValue& _internal_new_value() const;
  ::KN::CommandSoundtrackSetValue_PropertyValue* _internal_mutable_new_value();
  public:
  void unsafe_arena_set_allocated_new_value(
      ::KN::CommandSoundtrackSetValue_PropertyValue* new_value);
  ::KN::CommandSoundtrackSetValue_PropertyValue* unsafe_arena_release_new_value();

  // @@protoc_insertion_point(class_scope:KN.CommandSoundtrackSetValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* soundtrack_;
    ::KN::CommandSoundtrackSetValue_PropertyValue* old_value_;
    ::KN::CommandSoundtrackSetValue_PropertyValue* new_value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class SlideCollectionCommandSelectionBehaviorArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.SlideCollectionCommandSelectionBehaviorArchive) */ {
 public:
  inline SlideCollectionCommandSelectionBehaviorArchive() : SlideCollectionCommandSelectionBehaviorArchive(nullptr) {}
  ~SlideCollectionCommandSelectionBehaviorArchive() override;
  explicit PROTOBUF_CONSTEXPR SlideCollectionCommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlideCollectionCommandSelectionBehaviorArchive(const SlideCollectionCommandSelectionBehaviorArchive& from);
  SlideCollectionCommandSelectionBehaviorArchive(SlideCollectionCommandSelectionBehaviorArchive&& from) noexcept
    : SlideCollectionCommandSelectionBehaviorArchive() {
    *this = ::std::move(from);
  }

  inline SlideCollectionCommandSelectionBehaviorArchive& operator=(const SlideCollectionCommandSelectionBehaviorArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlideCollectionCommandSelectionBehaviorArchive& operator=(SlideCollectionCommandSelectionBehaviorArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlideCollectionCommandSelectionBehaviorArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlideCollectionCommandSelectionBehaviorArchive* internal_default_instance() {
    return reinterpret_cast<const SlideCollectionCommandSelectionBehaviorArchive*>(
               &_SlideCollectionCommandSelectionBehaviorArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(SlideCollectionCommandSelectionBehaviorArchive& a, SlideCollectionCommandSelectionBehaviorArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SlideCollectionCommandSelectionBehaviorArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlideCollectionCommandSelectionBehaviorArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SlideCollectionCommandSelectionBehaviorArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SlideCollectionCommandSelectionBehaviorArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlideCollectionCommandSelectionBehaviorArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SlideCollectionCommandSelectionBehaviorArchive& from) {
    SlideCollectionCommandSelectionBehaviorArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlideCollectionCommandSelectionBehaviorArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.SlideCollectionCommandSelectionBehaviorArchive";
  }
  protected:
  explicit SlideCollectionCommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SlideCollectionCommandSelectionBehaviorArchive_Type Type;
  static constexpr Type kKindSlideSelectionBehaviorTypeGeneral =
    SlideCollectionCommandSelectionBehaviorArchive_Type_kKindSlideSelectionBehaviorTypeGeneral;
  static constexpr Type kKindSlideSelectionBehaviorTypeInsertion =
    SlideCollectionCommandSelectionBehaviorArchive_Type_kKindSlideSelectionBehaviorTypeInsertion;
  static constexpr Type kKindSlideSelectionBehaviorTypeDeletion =
    SlideCollectionCommandSelectionBehaviorArchive_Type_kKindSlideSelectionBehaviorTypeDeletion;
  static constexpr Type kKindSlideSelectionBehaviorTypeMove =
    SlideCollectionCommandSelectionBehaviorArchive_Type_kKindSlideSelectionBehaviorTypeMove;
  static inline bool Type_IsValid(int value) {
    return SlideCollectionCommandSelectionBehaviorArchive_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    SlideCollectionCommandSelectionBehaviorArchive_Type_Type_MIN;
  static constexpr Type Type_MAX =
    SlideCollectionCommandSelectionBehaviorArchive_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    SlideCollectionCommandSelectionBehaviorArchive_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return SlideCollectionCommandSelectionBehaviorArchive_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return SlideCollectionCommandSelectionBehaviorArchive_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return SlideCollectionCommandSelectionBehaviorArchive_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kArchivedNewSelectionFieldNumber = 1,
    kArchivedOldSelectionFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // optional .TSP.Reference archived_new_selection = 1;
  bool has_archived_new_selection() const;
  private:
  bool _internal_has_archived_new_selection() const;
  public:
  void clear_archived_new_selection();
  const ::TSP::Reference& archived_new_selection() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_archived_new_selection();
  ::TSP::Reference* mutable_archived_new_selection();
  void set_allocated_archived_new_selection(::TSP::Reference* archived_new_selection);
  private:
  const ::TSP::Reference& _internal_archived_new_selection() const;
  ::TSP::Reference* _internal_mutable_archived_new_selection();
  public:
  void unsafe_arena_set_allocated_archived_new_selection(
      ::TSP::Reference* archived_new_selection);
  ::TSP::Reference* unsafe_arena_release_archived_new_selection();

  // optional .TSP.Reference archived_old_selection = 2;
  bool has_archived_old_selection() const;
  private:
  bool _internal_has_archived_old_selection() const;
  public:
  void clear_archived_old_selection();
  const ::TSP::Reference& archived_old_selection() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_archived_old_selection();
  ::TSP::Reference* mutable_archived_old_selection();
  void set_allocated_archived_old_selection(::TSP::Reference* archived_old_selection);
  private:
  const ::TSP::Reference& _internal_archived_old_selection() const;
  ::TSP::Reference* _internal_mutable_archived_old_selection();
  public:
  void unsafe_arena_set_allocated_archived_old_selection(
      ::TSP::Reference* archived_old_selection);
  ::TSP::Reference* unsafe_arena_release_archived_old_selection();

  // optional .KN.SlideCollectionCommandSelectionBehaviorArchive.Type type = 3 [default = kKindSlideSelectionBehaviorTypeGeneral];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::KN::SlideCollectionCommandSelectionBehaviorArchive_Type type() const;
  void set_type(::KN::SlideCollectionCommandSelectionBehaviorArchive_Type value);
  private:
  ::KN::SlideCollectionCommandSelectionBehaviorArchive_Type _internal_type() const;
  void _internal_set_type(::KN::SlideCollectionCommandSelectionBehaviorArchive_Type value);
  public:

  // @@protoc_insertion_point(class_scope:KN.SlideCollectionCommandSelectionBehaviorArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* archived_new_selection_;
    ::TSP::Reference* archived_old_selection_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartInfoGeometryCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.ChartInfoGeometryCommandArchive) */ {
 public:
  inline ChartInfoGeometryCommandArchive() : ChartInfoGeometryCommandArchive(nullptr) {}
  ~ChartInfoGeometryCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartInfoGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartInfoGeometryCommandArchive(const ChartInfoGeometryCommandArchive& from);
  ChartInfoGeometryCommandArchive(ChartInfoGeometryCommandArchive&& from) noexcept
    : ChartInfoGeometryCommandArchive() {
    *this = ::std::move(from);
  }

  inline ChartInfoGeometryCommandArchive& operator=(const ChartInfoGeometryCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartInfoGeometryCommandArchive& operator=(ChartInfoGeometryCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartInfoGeometryCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartInfoGeometryCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ChartInfoGeometryCommandArchive*>(
               &_ChartInfoGeometryCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(ChartInfoGeometryCommandArchive& a, ChartInfoGeometryCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartInfoGeometryCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartInfoGeometryCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartInfoGeometryCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartInfoGeometryCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartInfoGeometryCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartInfoGeometryCommandArchive& from) {
    ChartInfoGeometryCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartInfoGeometryCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.ChartInfoGeometryCommandArchive";
  }
  protected:
  explicit ChartInfoGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:KN.ChartInfoGeometryCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UIStateCommandGroupArchive

// required .TSK.CommandGroupArchive super = 1;
inline bool UIStateCommandGroupArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool UIStateCommandGroupArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandGroupArchive& UIStateCommandGroupArchive::_internal_super() const {
  const ::TSK::CommandGroupArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandGroupArchive&>(
      ::TSK::_CommandGroupArchive_default_instance_);
}
inline const ::TSK::CommandGroupArchive& UIStateCommandGroupArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.UIStateCommandGroupArchive.super)
  return _internal_super();
}
inline void UIStateCommandGroupArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandGroupArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.UIStateCommandGroupArchive.super)
}
inline ::TSK::CommandGroupArchive* UIStateCommandGroupArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandGroupArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandGroupArchive* UIStateCommandGroupArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.UIStateCommandGroupArchive.super)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandGroupArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandGroupArchive* UIStateCommandGroupArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandGroupArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandGroupArchive* UIStateCommandGroupArchive::mutable_super() {
  ::TSK::CommandGroupArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.UIStateCommandGroupArchive.super)
  return _msg;
}
inline void UIStateCommandGroupArchive::set_allocated_super(::TSK::CommandGroupArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.UIStateCommandGroupArchive.super)
}

// required .TSP.Reference uiState = 2;
inline bool UIStateCommandGroupArchive::_internal_has_uistate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.uistate_ != nullptr);
  return value;
}
inline bool UIStateCommandGroupArchive::has_uistate() const {
  return _internal_has_uistate();
}
inline const ::TSP::Reference& UIStateCommandGroupArchive::_internal_uistate() const {
  const ::TSP::Reference* p = _impl_.uistate_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UIStateCommandGroupArchive::uistate() const {
  // @@protoc_insertion_point(field_get:KN.UIStateCommandGroupArchive.uiState)
  return _internal_uistate();
}
inline void UIStateCommandGroupArchive::unsafe_arena_set_allocated_uistate(
    ::TSP::Reference* uistate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uistate_);
  }
  _impl_.uistate_ = uistate;
  if (uistate) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.UIStateCommandGroupArchive.uiState)
}
inline ::TSP::Reference* UIStateCommandGroupArchive::release_uistate() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.uistate_;
  _impl_.uistate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* UIStateCommandGroupArchive::unsafe_arena_release_uistate() {
  // @@protoc_insertion_point(field_release:KN.UIStateCommandGroupArchive.uiState)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.uistate_;
  _impl_.uistate_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UIStateCommandGroupArchive::_internal_mutable_uistate() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.uistate_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.uistate_ = p;
  }
  return _impl_.uistate_;
}
inline ::TSP::Reference* UIStateCommandGroupArchive::mutable_uistate() {
  ::TSP::Reference* _msg = _internal_mutable_uistate();
  // @@protoc_insertion_point(field_mutable:KN.UIStateCommandGroupArchive.uiState)
  return _msg;
}
inline void UIStateCommandGroupArchive::set_allocated_uistate(::TSP::Reference* uistate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uistate_);
  }
  if (uistate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uistate));
    if (message_arena != submessage_arena) {
      uistate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uistate, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.uistate_ = uistate;
  // @@protoc_insertion_point(field_set_allocated:KN.UIStateCommandGroupArchive.uiState)
}

// required string property = 3;
inline bool UIStateCommandGroupArchive::_internal_has_property() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UIStateCommandGroupArchive::has_property() const {
  return _internal_has_property();
}
inline void UIStateCommandGroupArchive::clear_property() {
  _impl_.property_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UIStateCommandGroupArchive::property() const {
  // @@protoc_insertion_point(field_get:KN.UIStateCommandGroupArchive.property)
  return _internal_property();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UIStateCommandGroupArchive::set_property(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.property_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.UIStateCommandGroupArchive.property)
}
inline std::string* UIStateCommandGroupArchive::mutable_property() {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:KN.UIStateCommandGroupArchive.property)
  return _s;
}
inline const std::string& UIStateCommandGroupArchive::_internal_property() const {
  return _impl_.property_.Get();
}
inline void UIStateCommandGroupArchive::_internal_set_property(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.property_.Set(value, GetArenaForAllocation());
}
inline std::string* UIStateCommandGroupArchive::_internal_mutable_property() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.property_.Mutable(GetArenaForAllocation());
}
inline std::string* UIStateCommandGroupArchive::release_property() {
  // @@protoc_insertion_point(field_release:KN.UIStateCommandGroupArchive.property)
  if (!_internal_has_property()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.property_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.property_.IsDefault()) {
    _impl_.property_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UIStateCommandGroupArchive::set_allocated_property(std::string* property) {
  if (property != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.property_.SetAllocated(property, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.property_.IsDefault()) {
    _impl_.property_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.UIStateCommandGroupArchive.property)
}

// repeated .TSP.Reference slideNodesToEdit = 4;
inline int UIStateCommandGroupArchive::_internal_slidenodestoedit_size() const {
  return _impl_.slidenodestoedit_.size();
}
inline int UIStateCommandGroupArchive::slidenodestoedit_size() const {
  return _internal_slidenodestoedit_size();
}
inline ::TSP::Reference* UIStateCommandGroupArchive::mutable_slidenodestoedit(int index) {
  // @@protoc_insertion_point(field_mutable:KN.UIStateCommandGroupArchive.slideNodesToEdit)
  return _impl_.slidenodestoedit_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
UIStateCommandGroupArchive::mutable_slidenodestoedit() {
  // @@protoc_insertion_point(field_mutable_list:KN.UIStateCommandGroupArchive.slideNodesToEdit)
  return &_impl_.slidenodestoedit_;
}
inline const ::TSP::Reference& UIStateCommandGroupArchive::_internal_slidenodestoedit(int index) const {
  return _impl_.slidenodestoedit_.Get(index);
}
inline const ::TSP::Reference& UIStateCommandGroupArchive::slidenodestoedit(int index) const {
  // @@protoc_insertion_point(field_get:KN.UIStateCommandGroupArchive.slideNodesToEdit)
  return _internal_slidenodestoedit(index);
}
inline ::TSP::Reference* UIStateCommandGroupArchive::_internal_add_slidenodestoedit() {
  return _impl_.slidenodestoedit_.Add();
}
inline ::TSP::Reference* UIStateCommandGroupArchive::add_slidenodestoedit() {
  ::TSP::Reference* _add = _internal_add_slidenodestoedit();
  // @@protoc_insertion_point(field_add:KN.UIStateCommandGroupArchive.slideNodesToEdit)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
UIStateCommandGroupArchive::slidenodestoedit() const {
  // @@protoc_insertion_point(field_list:KN.UIStateCommandGroupArchive.slideNodesToEdit)
  return _impl_.slidenodestoedit_;
}

// repeated .TSP.Reference masterSlideNodesToApply = 5;
inline int UIStateCommandGroupArchive::_internal_masterslidenodestoapply_size() const {
  return _impl_.masterslidenodestoapply_.size();
}
inline int UIStateCommandGroupArchive::masterslidenodestoapply_size() const {
  return _internal_masterslidenodestoapply_size();
}
inline ::TSP::Reference* UIStateCommandGroupArchive::mutable_masterslidenodestoapply(int index) {
  // @@protoc_insertion_point(field_mutable:KN.UIStateCommandGroupArchive.masterSlideNodesToApply)
  return _impl_.masterslidenodestoapply_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
UIStateCommandGroupArchive::mutable_masterslidenodestoapply() {
  // @@protoc_insertion_point(field_mutable_list:KN.UIStateCommandGroupArchive.masterSlideNodesToApply)
  return &_impl_.masterslidenodestoapply_;
}
inline const ::TSP::Reference& UIStateCommandGroupArchive::_internal_masterslidenodestoapply(int index) const {
  return _impl_.masterslidenodestoapply_.Get(index);
}
inline const ::TSP::Reference& UIStateCommandGroupArchive::masterslidenodestoapply(int index) const {
  // @@protoc_insertion_point(field_get:KN.UIStateCommandGroupArchive.masterSlideNodesToApply)
  return _internal_masterslidenodestoapply(index);
}
inline ::TSP::Reference* UIStateCommandGroupArchive::_internal_add_masterslidenodestoapply() {
  return _impl_.masterslidenodestoapply_.Add();
}
inline ::TSP::Reference* UIStateCommandGroupArchive::add_masterslidenodestoapply() {
  ::TSP::Reference* _add = _internal_add_masterslidenodestoapply();
  // @@protoc_insertion_point(field_add:KN.UIStateCommandGroupArchive.masterSlideNodesToApply)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
UIStateCommandGroupArchive::masterslidenodestoapply() const {
  // @@protoc_insertion_point(field_list:KN.UIStateCommandGroupArchive.masterSlideNodesToApply)
  return _impl_.masterslidenodestoapply_;
}

// repeated .TSP.Size thumbnailSizes = 6;
inline int UIStateCommandGroupArchive::_internal_thumbnailsizes_size() const {
  return _impl_.thumbnailsizes_.size();
}
inline int UIStateCommandGroupArchive::thumbnailsizes_size() const {
  return _internal_thumbnailsizes_size();
}
inline ::TSP::Size* UIStateCommandGroupArchive::mutable_thumbnailsizes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.UIStateCommandGroupArchive.thumbnailSizes)
  return _impl_.thumbnailsizes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Size >*
UIStateCommandGroupArchive::mutable_thumbnailsizes() {
  // @@protoc_insertion_point(field_mutable_list:KN.UIStateCommandGroupArchive.thumbnailSizes)
  return &_impl_.thumbnailsizes_;
}
inline const ::TSP::Size& UIStateCommandGroupArchive::_internal_thumbnailsizes(int index) const {
  return _impl_.thumbnailsizes_.Get(index);
}
inline const ::TSP::Size& UIStateCommandGroupArchive::thumbnailsizes(int index) const {
  // @@protoc_insertion_point(field_get:KN.UIStateCommandGroupArchive.thumbnailSizes)
  return _internal_thumbnailsizes(index);
}
inline ::TSP::Size* UIStateCommandGroupArchive::_internal_add_thumbnailsizes() {
  return _impl_.thumbnailsizes_.Add();
}
inline ::TSP::Size* UIStateCommandGroupArchive::add_thumbnailsizes() {
  ::TSP::Size* _add = _internal_add_thumbnailsizes();
  // @@protoc_insertion_point(field_add:KN.UIStateCommandGroupArchive.thumbnailSizes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Size >&
UIStateCommandGroupArchive::thumbnailsizes() const {
  // @@protoc_insertion_point(field_list:KN.UIStateCommandGroupArchive.thumbnailSizes)
  return _impl_.thumbnailsizes_;
}

// repeated .TSP.Reference selectedSlideNodes = 7;
inline int UIStateCommandGroupArchive::_internal_selectedslidenodes_size() const {
  return _impl_.selectedslidenodes_.size();
}
inline int UIStateCommandGroupArchive::selectedslidenodes_size() const {
  return _internal_selectedslidenodes_size();
}
inline ::TSP::Reference* UIStateCommandGroupArchive::mutable_selectedslidenodes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.UIStateCommandGroupArchive.selectedSlideNodes)
  return _impl_.selectedslidenodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
UIStateCommandGroupArchive::mutable_selectedslidenodes() {
  // @@protoc_insertion_point(field_mutable_list:KN.UIStateCommandGroupArchive.selectedSlideNodes)
  return &_impl_.selectedslidenodes_;
}
inline const ::TSP::Reference& UIStateCommandGroupArchive::_internal_selectedslidenodes(int index) const {
  return _impl_.selectedslidenodes_.Get(index);
}
inline const ::TSP::Reference& UIStateCommandGroupArchive::selectedslidenodes(int index) const {
  // @@protoc_insertion_point(field_get:KN.UIStateCommandGroupArchive.selectedSlideNodes)
  return _internal_selectedslidenodes(index);
}
inline ::TSP::Reference* UIStateCommandGroupArchive::_internal_add_selectedslidenodes() {
  return _impl_.selectedslidenodes_.Add();
}
inline ::TSP::Reference* UIStateCommandGroupArchive::add_selectedslidenodes() {
  ::TSP::Reference* _add = _internal_add_selectedslidenodes();
  // @@protoc_insertion_point(field_add:KN.UIStateCommandGroupArchive.selectedSlideNodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
UIStateCommandGroupArchive::selectedslidenodes() const {
  // @@protoc_insertion_point(field_list:KN.UIStateCommandGroupArchive.selectedSlideNodes)
  return _impl_.selectedslidenodes_;
}

// repeated .TSP.Reference restoreSelectedSlideNodes = 8;
inline int UIStateCommandGroupArchive::_internal_restoreselectedslidenodes_size() const {
  return _impl_.restoreselectedslidenodes_.size();
}
inline int UIStateCommandGroupArchive::restoreselectedslidenodes_size() const {
  return _internal_restoreselectedslidenodes_size();
}
inline ::TSP::Reference* UIStateCommandGroupArchive::mutable_restoreselectedslidenodes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.UIStateCommandGroupArchive.restoreSelectedSlideNodes)
  return _impl_.restoreselectedslidenodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
UIStateCommandGroupArchive::mutable_restoreselectedslidenodes() {
  // @@protoc_insertion_point(field_mutable_list:KN.UIStateCommandGroupArchive.restoreSelectedSlideNodes)
  return &_impl_.restoreselectedslidenodes_;
}
inline const ::TSP::Reference& UIStateCommandGroupArchive::_internal_restoreselectedslidenodes(int index) const {
  return _impl_.restoreselectedslidenodes_.Get(index);
}
inline const ::TSP::Reference& UIStateCommandGroupArchive::restoreselectedslidenodes(int index) const {
  // @@protoc_insertion_point(field_get:KN.UIStateCommandGroupArchive.restoreSelectedSlideNodes)
  return _internal_restoreselectedslidenodes(index);
}
inline ::TSP::Reference* UIStateCommandGroupArchive::_internal_add_restoreselectedslidenodes() {
  return _impl_.restoreselectedslidenodes_.Add();
}
inline ::TSP::Reference* UIStateCommandGroupArchive::add_restoreselectedslidenodes() {
  ::TSP::Reference* _add = _internal_add_restoreselectedslidenodes();
  // @@protoc_insertion_point(field_add:KN.UIStateCommandGroupArchive.restoreSelectedSlideNodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
UIStateCommandGroupArchive::restoreselectedslidenodes() const {
  // @@protoc_insertion_point(field_list:KN.UIStateCommandGroupArchive.restoreSelectedSlideNodes)
  return _impl_.restoreselectedslidenodes_;
}

// -------------------------------------------------------------------

// CommandSlideInsertDrawablesArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideInsertDrawablesArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSlideInsertDrawablesArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideInsertDrawablesArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideInsertDrawablesArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertDrawablesArchive.super)
  return _internal_super();
}
inline void CommandSlideInsertDrawablesArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideInsertDrawablesArchive.super)
}
inline ::TSK::CommandArchive* CommandSlideInsertDrawablesArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideInsertDrawablesArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideInsertDrawablesArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideInsertDrawablesArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSlideInsertDrawablesArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertDrawablesArchive.super)
  return _msg;
}
inline void CommandSlideInsertDrawablesArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideInsertDrawablesArchive.super)
}

// required .TSP.Reference slideNode = 2;
inline bool CommandSlideInsertDrawablesArchive::_internal_has_slidenode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slidenode_ != nullptr);
  return value;
}
inline bool CommandSlideInsertDrawablesArchive::has_slidenode() const {
  return _internal_has_slidenode();
}
inline const ::TSP::Reference& CommandSlideInsertDrawablesArchive::_internal_slidenode() const {
  const ::TSP::Reference* p = _impl_.slidenode_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlideInsertDrawablesArchive::slidenode() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertDrawablesArchive.slideNode)
  return _internal_slidenode();
}
inline void CommandSlideInsertDrawablesArchive::unsafe_arena_set_allocated_slidenode(
    ::TSP::Reference* slidenode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidenode_);
  }
  _impl_.slidenode_ = slidenode;
  if (slidenode) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideInsertDrawablesArchive.slideNode)
}
inline ::TSP::Reference* CommandSlideInsertDrawablesArchive::release_slidenode() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.slidenode_;
  _impl_.slidenode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlideInsertDrawablesArchive::unsafe_arena_release_slidenode() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideInsertDrawablesArchive.slideNode)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.slidenode_;
  _impl_.slidenode_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlideInsertDrawablesArchive::_internal_mutable_slidenode() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.slidenode_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.slidenode_ = p;
  }
  return _impl_.slidenode_;
}
inline ::TSP::Reference* CommandSlideInsertDrawablesArchive::mutable_slidenode() {
  ::TSP::Reference* _msg = _internal_mutable_slidenode();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertDrawablesArchive.slideNode)
  return _msg;
}
inline void CommandSlideInsertDrawablesArchive::set_allocated_slidenode(::TSP::Reference* slidenode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidenode_);
  }
  if (slidenode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidenode));
    if (message_arena != submessage_arena) {
      slidenode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slidenode, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.slidenode_ = slidenode;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideInsertDrawablesArchive.slideNode)
}

// repeated .TSP.Reference drawables = 3;
inline int CommandSlideInsertDrawablesArchive::_internal_drawables_size() const {
  return _impl_.drawables_.size();
}
inline int CommandSlideInsertDrawablesArchive::drawables_size() const {
  return _internal_drawables_size();
}
inline ::TSP::Reference* CommandSlideInsertDrawablesArchive::mutable_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertDrawablesArchive.drawables)
  return _impl_.drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideInsertDrawablesArchive::mutable_drawables() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideInsertDrawablesArchive.drawables)
  return &_impl_.drawables_;
}
inline const ::TSP::Reference& CommandSlideInsertDrawablesArchive::_internal_drawables(int index) const {
  return _impl_.drawables_.Get(index);
}
inline const ::TSP::Reference& CommandSlideInsertDrawablesArchive::drawables(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertDrawablesArchive.drawables)
  return _internal_drawables(index);
}
inline ::TSP::Reference* CommandSlideInsertDrawablesArchive::_internal_add_drawables() {
  return _impl_.drawables_.Add();
}
inline ::TSP::Reference* CommandSlideInsertDrawablesArchive::add_drawables() {
  ::TSP::Reference* _add = _internal_add_drawables();
  // @@protoc_insertion_point(field_add:KN.CommandSlideInsertDrawablesArchive.drawables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideInsertDrawablesArchive::drawables() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideInsertDrawablesArchive.drawables)
  return _impl_.drawables_;
}

// optional bool forDrag = 4;
inline bool CommandSlideInsertDrawablesArchive::_internal_has_fordrag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSlideInsertDrawablesArchive::has_fordrag() const {
  return _internal_has_fordrag();
}
inline void CommandSlideInsertDrawablesArchive::clear_fordrag() {
  _impl_.fordrag_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CommandSlideInsertDrawablesArchive::_internal_fordrag() const {
  return _impl_.fordrag_;
}
inline bool CommandSlideInsertDrawablesArchive::fordrag() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertDrawablesArchive.forDrag)
  return _internal_fordrag();
}
inline void CommandSlideInsertDrawablesArchive::_internal_set_fordrag(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.fordrag_ = value;
}
inline void CommandSlideInsertDrawablesArchive::set_fordrag(bool value) {
  _internal_set_fordrag(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideInsertDrawablesArchive.forDrag)
}

// optional int32 atIndex = 5;
inline bool CommandSlideInsertDrawablesArchive::_internal_has_atindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSlideInsertDrawablesArchive::has_atindex() const {
  return _internal_has_atindex();
}
inline void CommandSlideInsertDrawablesArchive::clear_atindex() {
  _impl_.atindex_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CommandSlideInsertDrawablesArchive::_internal_atindex() const {
  return _impl_.atindex_;
}
inline int32_t CommandSlideInsertDrawablesArchive::atindex() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertDrawablesArchive.atIndex)
  return _internal_atindex();
}
inline void CommandSlideInsertDrawablesArchive::_internal_set_atindex(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.atindex_ = value;
}
inline void CommandSlideInsertDrawablesArchive::set_atindex(int32_t value) {
  _internal_set_atindex(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideInsertDrawablesArchive.atIndex)
}

// required bool use_object_placeholder_geometry = 6;
inline bool CommandSlideInsertDrawablesArchive::_internal_has_use_object_placeholder_geometry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandSlideInsertDrawablesArchive::has_use_object_placeholder_geometry() const {
  return _internal_has_use_object_placeholder_geometry();
}
inline void CommandSlideInsertDrawablesArchive::clear_use_object_placeholder_geometry() {
  _impl_.use_object_placeholder_geometry_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CommandSlideInsertDrawablesArchive::_internal_use_object_placeholder_geometry() const {
  return _impl_.use_object_placeholder_geometry_;
}
inline bool CommandSlideInsertDrawablesArchive::use_object_placeholder_geometry() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertDrawablesArchive.use_object_placeholder_geometry)
  return _internal_use_object_placeholder_geometry();
}
inline void CommandSlideInsertDrawablesArchive::_internal_set_use_object_placeholder_geometry(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.use_object_placeholder_geometry_ = value;
}
inline void CommandSlideInsertDrawablesArchive::set_use_object_placeholder_geometry(bool value) {
  _internal_set_use_object_placeholder_geometry(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideInsertDrawablesArchive.use_object_placeholder_geometry)
}

// -------------------------------------------------------------------

// CommandSlideSetPlaceholdersForTagsArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideSetPlaceholdersForTagsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSlideSetPlaceholdersForTagsArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideSetPlaceholdersForTagsArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideSetPlaceholdersForTagsArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetPlaceholdersForTagsArchive.super)
  return _internal_super();
}
inline void CommandSlideSetPlaceholdersForTagsArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideSetPlaceholdersForTagsArchive.super)
}
inline ::TSK::CommandArchive* CommandSlideSetPlaceholdersForTagsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideSetPlaceholdersForTagsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideSetPlaceholdersForTagsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideSetPlaceholdersForTagsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSlideSetPlaceholdersForTagsArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetPlaceholdersForTagsArchive.super)
  return _msg;
}
inline void CommandSlideSetPlaceholdersForTagsArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideSetPlaceholdersForTagsArchive.super)
}

// required .TSP.Reference slide = 2;
inline bool CommandSlideSetPlaceholdersForTagsArchive::_internal_has_slide() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slide_ != nullptr);
  return value;
}
inline bool CommandSlideSetPlaceholdersForTagsArchive::has_slide() const {
  return _internal_has_slide();
}
inline const ::TSP::Reference& CommandSlideSetPlaceholdersForTagsArchive::_internal_slide() const {
  const ::TSP::Reference* p = _impl_.slide_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlideSetPlaceholdersForTagsArchive::slide() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetPlaceholdersForTagsArchive.slide)
  return _internal_slide();
}
inline void CommandSlideSetPlaceholdersForTagsArchive::unsafe_arena_set_allocated_slide(
    ::TSP::Reference* slide) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_);
  }
  _impl_.slide_ = slide;
  if (slide) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideSetPlaceholdersForTagsArchive.slide)
}
inline ::TSP::Reference* CommandSlideSetPlaceholdersForTagsArchive::release_slide() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.slide_;
  _impl_.slide_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlideSetPlaceholdersForTagsArchive::unsafe_arena_release_slide() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideSetPlaceholdersForTagsArchive.slide)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.slide_;
  _impl_.slide_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlideSetPlaceholdersForTagsArchive::_internal_mutable_slide() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.slide_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.slide_ = p;
  }
  return _impl_.slide_;
}
inline ::TSP::Reference* CommandSlideSetPlaceholdersForTagsArchive::mutable_slide() {
  ::TSP::Reference* _msg = _internal_mutable_slide();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetPlaceholdersForTagsArchive.slide)
  return _msg;
}
inline void CommandSlideSetPlaceholdersForTagsArchive::set_allocated_slide(::TSP::Reference* slide) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_);
  }
  if (slide) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide));
    if (message_arena != submessage_arena) {
      slide = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.slide_ = slide;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideSetPlaceholdersForTagsArchive.slide)
}

// repeated .TSP.Reference infos = 3;
inline int CommandSlideSetPlaceholdersForTagsArchive::_internal_infos_size() const {
  return _impl_.infos_.size();
}
inline int CommandSlideSetPlaceholdersForTagsArchive::infos_size() const {
  return _internal_infos_size();
}
inline ::TSP::Reference* CommandSlideSetPlaceholdersForTagsArchive::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetPlaceholdersForTagsArchive.infos)
  return _impl_.infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideSetPlaceholdersForTagsArchive::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideSetPlaceholdersForTagsArchive.infos)
  return &_impl_.infos_;
}
inline const ::TSP::Reference& CommandSlideSetPlaceholdersForTagsArchive::_internal_infos(int index) const {
  return _impl_.infos_.Get(index);
}
inline const ::TSP::Reference& CommandSlideSetPlaceholdersForTagsArchive::infos(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetPlaceholdersForTagsArchive.infos)
  return _internal_infos(index);
}
inline ::TSP::Reference* CommandSlideSetPlaceholdersForTagsArchive::_internal_add_infos() {
  return _impl_.infos_.Add();
}
inline ::TSP::Reference* CommandSlideSetPlaceholdersForTagsArchive::add_infos() {
  ::TSP::Reference* _add = _internal_add_infos();
  // @@protoc_insertion_point(field_add:KN.CommandSlideSetPlaceholdersForTagsArchive.infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideSetPlaceholdersForTagsArchive::infos() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideSetPlaceholdersForTagsArchive.infos)
  return _impl_.infos_;
}

// repeated string tags = 4;
inline int CommandSlideSetPlaceholdersForTagsArchive::_internal_tags_size() const {
  return _impl_.tags_.size();
}
inline int CommandSlideSetPlaceholdersForTagsArchive::tags_size() const {
  return _internal_tags_size();
}
inline void CommandSlideSetPlaceholdersForTagsArchive::clear_tags() {
  _impl_.tags_.Clear();
}
inline std::string* CommandSlideSetPlaceholdersForTagsArchive::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:KN.CommandSlideSetPlaceholdersForTagsArchive.tags)
  return _s;
}
inline const std::string& CommandSlideSetPlaceholdersForTagsArchive::_internal_tags(int index) const {
  return _impl_.tags_.Get(index);
}
inline const std::string& CommandSlideSetPlaceholdersForTagsArchive::tags(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetPlaceholdersForTagsArchive.tags)
  return _internal_tags(index);
}
inline std::string* CommandSlideSetPlaceholdersForTagsArchive::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetPlaceholdersForTagsArchive.tags)
  return _impl_.tags_.Mutable(index);
}
inline void CommandSlideSetPlaceholdersForTagsArchive::set_tags(int index, const std::string& value) {
  _impl_.tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideSetPlaceholdersForTagsArchive.tags)
}
inline void CommandSlideSetPlaceholdersForTagsArchive::set_tags(int index, std::string&& value) {
  _impl_.tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:KN.CommandSlideSetPlaceholdersForTagsArchive.tags)
}
inline void CommandSlideSetPlaceholdersForTagsArchive::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KN.CommandSlideSetPlaceholdersForTagsArchive.tags)
}
inline void CommandSlideSetPlaceholdersForTagsArchive::set_tags(int index, const char* value, size_t size) {
  _impl_.tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KN.CommandSlideSetPlaceholdersForTagsArchive.tags)
}
inline std::string* CommandSlideSetPlaceholdersForTagsArchive::_internal_add_tags() {
  return _impl_.tags_.Add();
}
inline void CommandSlideSetPlaceholdersForTagsArchive::add_tags(const std::string& value) {
  _impl_.tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KN.CommandSlideSetPlaceholdersForTagsArchive.tags)
}
inline void CommandSlideSetPlaceholdersForTagsArchive::add_tags(std::string&& value) {
  _impl_.tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KN.CommandSlideSetPlaceholdersForTagsArchive.tags)
}
inline void CommandSlideSetPlaceholdersForTagsArchive::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KN.CommandSlideSetPlaceholdersForTagsArchive.tags)
}
inline void CommandSlideSetPlaceholdersForTagsArchive::add_tags(const char* value, size_t size) {
  _impl_.tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KN.CommandSlideSetPlaceholdersForTagsArchive.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandSlideSetPlaceholdersForTagsArchive::tags() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideSetPlaceholdersForTagsArchive.tags)
  return _impl_.tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandSlideSetPlaceholdersForTagsArchive::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideSetPlaceholdersForTagsArchive.tags)
  return &_impl_.tags_;
}

// repeated .TSP.Reference old_infos = 6;
inline int CommandSlideSetPlaceholdersForTagsArchive::_internal_old_infos_size() const {
  return _impl_.old_infos_.size();
}
inline int CommandSlideSetPlaceholdersForTagsArchive::old_infos_size() const {
  return _internal_old_infos_size();
}
inline ::TSP::Reference* CommandSlideSetPlaceholdersForTagsArchive::mutable_old_infos(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetPlaceholdersForTagsArchive.old_infos)
  return _impl_.old_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideSetPlaceholdersForTagsArchive::mutable_old_infos() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideSetPlaceholdersForTagsArchive.old_infos)
  return &_impl_.old_infos_;
}
inline const ::TSP::Reference& CommandSlideSetPlaceholdersForTagsArchive::_internal_old_infos(int index) const {
  return _impl_.old_infos_.Get(index);
}
inline const ::TSP::Reference& CommandSlideSetPlaceholdersForTagsArchive::old_infos(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetPlaceholdersForTagsArchive.old_infos)
  return _internal_old_infos(index);
}
inline ::TSP::Reference* CommandSlideSetPlaceholdersForTagsArchive::_internal_add_old_infos() {
  return _impl_.old_infos_.Add();
}
inline ::TSP::Reference* CommandSlideSetPlaceholdersForTagsArchive::add_old_infos() {
  ::TSP::Reference* _add = _internal_add_old_infos();
  // @@protoc_insertion_point(field_add:KN.CommandSlideSetPlaceholdersForTagsArchive.old_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideSetPlaceholdersForTagsArchive::old_infos() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideSetPlaceholdersForTagsArchive.old_infos)
  return _impl_.old_infos_;
}

// repeated string old_tags = 5;
inline int CommandSlideSetPlaceholdersForTagsArchive::_internal_old_tags_size() const {
  return _impl_.old_tags_.size();
}
inline int CommandSlideSetPlaceholdersForTagsArchive::old_tags_size() const {
  return _internal_old_tags_size();
}
inline void CommandSlideSetPlaceholdersForTagsArchive::clear_old_tags() {
  _impl_.old_tags_.Clear();
}
inline std::string* CommandSlideSetPlaceholdersForTagsArchive::add_old_tags() {
  std::string* _s = _internal_add_old_tags();
  // @@protoc_insertion_point(field_add_mutable:KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags)
  return _s;
}
inline const std::string& CommandSlideSetPlaceholdersForTagsArchive::_internal_old_tags(int index) const {
  return _impl_.old_tags_.Get(index);
}
inline const std::string& CommandSlideSetPlaceholdersForTagsArchive::old_tags(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags)
  return _internal_old_tags(index);
}
inline std::string* CommandSlideSetPlaceholdersForTagsArchive::mutable_old_tags(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags)
  return _impl_.old_tags_.Mutable(index);
}
inline void CommandSlideSetPlaceholdersForTagsArchive::set_old_tags(int index, const std::string& value) {
  _impl_.old_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags)
}
inline void CommandSlideSetPlaceholdersForTagsArchive::set_old_tags(int index, std::string&& value) {
  _impl_.old_tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags)
}
inline void CommandSlideSetPlaceholdersForTagsArchive::set_old_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.old_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags)
}
inline void CommandSlideSetPlaceholdersForTagsArchive::set_old_tags(int index, const char* value, size_t size) {
  _impl_.old_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags)
}
inline std::string* CommandSlideSetPlaceholdersForTagsArchive::_internal_add_old_tags() {
  return _impl_.old_tags_.Add();
}
inline void CommandSlideSetPlaceholdersForTagsArchive::add_old_tags(const std::string& value) {
  _impl_.old_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags)
}
inline void CommandSlideSetPlaceholdersForTagsArchive::add_old_tags(std::string&& value) {
  _impl_.old_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags)
}
inline void CommandSlideSetPlaceholdersForTagsArchive::add_old_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.old_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags)
}
inline void CommandSlideSetPlaceholdersForTagsArchive::add_old_tags(const char* value, size_t size) {
  _impl_.old_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandSlideSetPlaceholdersForTagsArchive::old_tags() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags)
  return _impl_.old_tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandSlideSetPlaceholdersForTagsArchive::mutable_old_tags() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags)
  return &_impl_.old_tags_;
}

// -------------------------------------------------------------------

// CommandSlideRemoveDrawableArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideRemoveDrawableArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSlideRemoveDrawableArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideRemoveDrawableArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideRemoveDrawableArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveDrawableArchive.super)
  return _internal_super();
}
inline void CommandSlideRemoveDrawableArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideRemoveDrawableArchive.super)
}
inline ::TSK::CommandArchive* CommandSlideRemoveDrawableArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideRemoveDrawableArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideRemoveDrawableArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideRemoveDrawableArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSlideRemoveDrawableArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveDrawableArchive.super)
  return _msg;
}
inline void CommandSlideRemoveDrawableArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideRemoveDrawableArchive.super)
}

// required .TSP.Reference slideNode = 2;
inline bool CommandSlideRemoveDrawableArchive::_internal_has_slidenode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slidenode_ != nullptr);
  return value;
}
inline bool CommandSlideRemoveDrawableArchive::has_slidenode() const {
  return _internal_has_slidenode();
}
inline const ::TSP::Reference& CommandSlideRemoveDrawableArchive::_internal_slidenode() const {
  const ::TSP::Reference* p = _impl_.slidenode_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlideRemoveDrawableArchive::slidenode() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveDrawableArchive.slideNode)
  return _internal_slidenode();
}
inline void CommandSlideRemoveDrawableArchive::unsafe_arena_set_allocated_slidenode(
    ::TSP::Reference* slidenode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidenode_);
  }
  _impl_.slidenode_ = slidenode;
  if (slidenode) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideRemoveDrawableArchive.slideNode)
}
inline ::TSP::Reference* CommandSlideRemoveDrawableArchive::release_slidenode() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.slidenode_;
  _impl_.slidenode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlideRemoveDrawableArchive::unsafe_arena_release_slidenode() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideRemoveDrawableArchive.slideNode)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.slidenode_;
  _impl_.slidenode_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlideRemoveDrawableArchive::_internal_mutable_slidenode() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.slidenode_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.slidenode_ = p;
  }
  return _impl_.slidenode_;
}
inline ::TSP::Reference* CommandSlideRemoveDrawableArchive::mutable_slidenode() {
  ::TSP::Reference* _msg = _internal_mutable_slidenode();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveDrawableArchive.slideNode)
  return _msg;
}
inline void CommandSlideRemoveDrawableArchive::set_allocated_slidenode(::TSP::Reference* slidenode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidenode_);
  }
  if (slidenode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidenode));
    if (message_arena != submessage_arena) {
      slidenode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slidenode, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.slidenode_ = slidenode;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideRemoveDrawableArchive.slideNode)
}

// repeated .TSP.Reference sortedDrawables = 3;
inline int CommandSlideRemoveDrawableArchive::_internal_sorteddrawables_size() const {
  return _impl_.sorteddrawables_.size();
}
inline int CommandSlideRemoveDrawableArchive::sorteddrawables_size() const {
  return _internal_sorteddrawables_size();
}
inline ::TSP::Reference* CommandSlideRemoveDrawableArchive::mutable_sorteddrawables(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveDrawableArchive.sortedDrawables)
  return _impl_.sorteddrawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideRemoveDrawableArchive::mutable_sorteddrawables() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideRemoveDrawableArchive.sortedDrawables)
  return &_impl_.sorteddrawables_;
}
inline const ::TSP::Reference& CommandSlideRemoveDrawableArchive::_internal_sorteddrawables(int index) const {
  return _impl_.sorteddrawables_.Get(index);
}
inline const ::TSP::Reference& CommandSlideRemoveDrawableArchive::sorteddrawables(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveDrawableArchive.sortedDrawables)
  return _internal_sorteddrawables(index);
}
inline ::TSP::Reference* CommandSlideRemoveDrawableArchive::_internal_add_sorteddrawables() {
  return _impl_.sorteddrawables_.Add();
}
inline ::TSP::Reference* CommandSlideRemoveDrawableArchive::add_sorteddrawables() {
  ::TSP::Reference* _add = _internal_add_sorteddrawables();
  // @@protoc_insertion_point(field_add:KN.CommandSlideRemoveDrawableArchive.sortedDrawables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideRemoveDrawableArchive::sorteddrawables() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideRemoveDrawableArchive.sortedDrawables)
  return _impl_.sorteddrawables_;
}

// required .TSP.IndexSet drawableIndices = 4;
inline bool CommandSlideRemoveDrawableArchive::_internal_has_drawableindices() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.drawableindices_ != nullptr);
  return value;
}
inline bool CommandSlideRemoveDrawableArchive::has_drawableindices() const {
  return _internal_has_drawableindices();
}
inline const ::TSP::IndexSet& CommandSlideRemoveDrawableArchive::_internal_drawableindices() const {
  const ::TSP::IndexSet* p = _impl_.drawableindices_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::IndexSet&>(
      ::TSP::_IndexSet_default_instance_);
}
inline const ::TSP::IndexSet& CommandSlideRemoveDrawableArchive::drawableindices() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveDrawableArchive.drawableIndices)
  return _internal_drawableindices();
}
inline void CommandSlideRemoveDrawableArchive::unsafe_arena_set_allocated_drawableindices(
    ::TSP::IndexSet* drawableindices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drawableindices_);
  }
  _impl_.drawableindices_ = drawableindices;
  if (drawableindices) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideRemoveDrawableArchive.drawableIndices)
}
inline ::TSP::IndexSet* CommandSlideRemoveDrawableArchive::release_drawableindices() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::IndexSet* temp = _impl_.drawableindices_;
  _impl_.drawableindices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::IndexSet* CommandSlideRemoveDrawableArchive::unsafe_arena_release_drawableindices() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideRemoveDrawableArchive.drawableIndices)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::IndexSet* temp = _impl_.drawableindices_;
  _impl_.drawableindices_ = nullptr;
  return temp;
}
inline ::TSP::IndexSet* CommandSlideRemoveDrawableArchive::_internal_mutable_drawableindices() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.drawableindices_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::IndexSet>(GetArenaForAllocation());
    _impl_.drawableindices_ = p;
  }
  return _impl_.drawableindices_;
}
inline ::TSP::IndexSet* CommandSlideRemoveDrawableArchive::mutable_drawableindices() {
  ::TSP::IndexSet* _msg = _internal_mutable_drawableindices();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveDrawableArchive.drawableIndices)
  return _msg;
}
inline void CommandSlideRemoveDrawableArchive::set_allocated_drawableindices(::TSP::IndexSet* drawableindices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drawableindices_);
  }
  if (drawableindices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawableindices));
    if (message_arena != submessage_arena) {
      drawableindices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drawableindices, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.drawableindices_ = drawableindices;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideRemoveDrawableArchive.drawableIndices)
}

// repeated string placeholderTags = 5;
inline int CommandSlideRemoveDrawableArchive::_internal_placeholdertags_size() const {
  return _impl_.placeholdertags_.size();
}
inline int CommandSlideRemoveDrawableArchive::placeholdertags_size() const {
  return _internal_placeholdertags_size();
}
inline void CommandSlideRemoveDrawableArchive::clear_placeholdertags() {
  _impl_.placeholdertags_.Clear();
}
inline std::string* CommandSlideRemoveDrawableArchive::add_placeholdertags() {
  std::string* _s = _internal_add_placeholdertags();
  // @@protoc_insertion_point(field_add_mutable:KN.CommandSlideRemoveDrawableArchive.placeholderTags)
  return _s;
}
inline const std::string& CommandSlideRemoveDrawableArchive::_internal_placeholdertags(int index) const {
  return _impl_.placeholdertags_.Get(index);
}
inline const std::string& CommandSlideRemoveDrawableArchive::placeholdertags(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveDrawableArchive.placeholderTags)
  return _internal_placeholdertags(index);
}
inline std::string* CommandSlideRemoveDrawableArchive::mutable_placeholdertags(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveDrawableArchive.placeholderTags)
  return _impl_.placeholdertags_.Mutable(index);
}
inline void CommandSlideRemoveDrawableArchive::set_placeholdertags(int index, const std::string& value) {
  _impl_.placeholdertags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideRemoveDrawableArchive.placeholderTags)
}
inline void CommandSlideRemoveDrawableArchive::set_placeholdertags(int index, std::string&& value) {
  _impl_.placeholdertags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:KN.CommandSlideRemoveDrawableArchive.placeholderTags)
}
inline void CommandSlideRemoveDrawableArchive::set_placeholdertags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.placeholdertags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KN.CommandSlideRemoveDrawableArchive.placeholderTags)
}
inline void CommandSlideRemoveDrawableArchive::set_placeholdertags(int index, const char* value, size_t size) {
  _impl_.placeholdertags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KN.CommandSlideRemoveDrawableArchive.placeholderTags)
}
inline std::string* CommandSlideRemoveDrawableArchive::_internal_add_placeholdertags() {
  return _impl_.placeholdertags_.Add();
}
inline void CommandSlideRemoveDrawableArchive::add_placeholdertags(const std::string& value) {
  _impl_.placeholdertags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KN.CommandSlideRemoveDrawableArchive.placeholderTags)
}
inline void CommandSlideRemoveDrawableArchive::add_placeholdertags(std::string&& value) {
  _impl_.placeholdertags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KN.CommandSlideRemoveDrawableArchive.placeholderTags)
}
inline void CommandSlideRemoveDrawableArchive::add_placeholdertags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.placeholdertags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KN.CommandSlideRemoveDrawableArchive.placeholderTags)
}
inline void CommandSlideRemoveDrawableArchive::add_placeholdertags(const char* value, size_t size) {
  _impl_.placeholdertags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KN.CommandSlideRemoveDrawableArchive.placeholderTags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandSlideRemoveDrawableArchive::placeholdertags() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideRemoveDrawableArchive.placeholderTags)
  return _impl_.placeholdertags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandSlideRemoveDrawableArchive::mutable_placeholdertags() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideRemoveDrawableArchive.placeholderTags)
  return &_impl_.placeholdertags_;
}

// optional .TSP.Reference info_using_object_placeholder_geometry = 6;
inline bool CommandSlideRemoveDrawableArchive::_internal_has_info_using_object_placeholder_geometry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_using_object_placeholder_geometry_ != nullptr);
  return value;
}
inline bool CommandSlideRemoveDrawableArchive::has_info_using_object_placeholder_geometry() const {
  return _internal_has_info_using_object_placeholder_geometry();
}
inline const ::TSP::Reference& CommandSlideRemoveDrawableArchive::_internal_info_using_object_placeholder_geometry() const {
  const ::TSP::Reference* p = _impl_.info_using_object_placeholder_geometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlideRemoveDrawableArchive::info_using_object_placeholder_geometry() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveDrawableArchive.info_using_object_placeholder_geometry)
  return _internal_info_using_object_placeholder_geometry();
}
inline void CommandSlideRemoveDrawableArchive::unsafe_arena_set_allocated_info_using_object_placeholder_geometry(
    ::TSP::Reference* info_using_object_placeholder_geometry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_using_object_placeholder_geometry_);
  }
  _impl_.info_using_object_placeholder_geometry_ = info_using_object_placeholder_geometry;
  if (info_using_object_placeholder_geometry) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideRemoveDrawableArchive.info_using_object_placeholder_geometry)
}
inline ::TSP::Reference* CommandSlideRemoveDrawableArchive::release_info_using_object_placeholder_geometry() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.info_using_object_placeholder_geometry_;
  _impl_.info_using_object_placeholder_geometry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlideRemoveDrawableArchive::unsafe_arena_release_info_using_object_placeholder_geometry() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideRemoveDrawableArchive.info_using_object_placeholder_geometry)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.info_using_object_placeholder_geometry_;
  _impl_.info_using_object_placeholder_geometry_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlideRemoveDrawableArchive::_internal_mutable_info_using_object_placeholder_geometry() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.info_using_object_placeholder_geometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.info_using_object_placeholder_geometry_ = p;
  }
  return _impl_.info_using_object_placeholder_geometry_;
}
inline ::TSP::Reference* CommandSlideRemoveDrawableArchive::mutable_info_using_object_placeholder_geometry() {
  ::TSP::Reference* _msg = _internal_mutable_info_using_object_placeholder_geometry();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveDrawableArchive.info_using_object_placeholder_geometry)
  return _msg;
}
inline void CommandSlideRemoveDrawableArchive::set_allocated_info_using_object_placeholder_geometry(::TSP::Reference* info_using_object_placeholder_geometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_using_object_placeholder_geometry_);
  }
  if (info_using_object_placeholder_geometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_using_object_placeholder_geometry));
    if (message_arena != submessage_arena) {
      info_using_object_placeholder_geometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info_using_object_placeholder_geometry, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.info_using_object_placeholder_geometry_ = info_using_object_placeholder_geometry;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideRemoveDrawableArchive.info_using_object_placeholder_geometry)
}

// optional bool did_match_object_placeholder_geometry = 7;
inline bool CommandSlideRemoveDrawableArchive::_internal_has_did_match_object_placeholder_geometry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandSlideRemoveDrawableArchive::has_did_match_object_placeholder_geometry() const {
  return _internal_has_did_match_object_placeholder_geometry();
}
inline void CommandSlideRemoveDrawableArchive::clear_did_match_object_placeholder_geometry() {
  _impl_.did_match_object_placeholder_geometry_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CommandSlideRemoveDrawableArchive::_internal_did_match_object_placeholder_geometry() const {
  return _impl_.did_match_object_placeholder_geometry_;
}
inline bool CommandSlideRemoveDrawableArchive::did_match_object_placeholder_geometry() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveDrawableArchive.did_match_object_placeholder_geometry)
  return _internal_did_match_object_placeholder_geometry();
}
inline void CommandSlideRemoveDrawableArchive::_internal_set_did_match_object_placeholder_geometry(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.did_match_object_placeholder_geometry_ = value;
}
inline void CommandSlideRemoveDrawableArchive::set_did_match_object_placeholder_geometry(bool value) {
  _internal_set_did_match_object_placeholder_geometry(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideRemoveDrawableArchive.did_match_object_placeholder_geometry)
}

// -------------------------------------------------------------------

// CommandSlideMoveDrawableZOrderArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideMoveDrawableZOrderArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSlideMoveDrawableZOrderArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideMoveDrawableZOrderArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideMoveDrawableZOrderArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveDrawableZOrderArchive.super)
  return _internal_super();
}
inline void CommandSlideMoveDrawableZOrderArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideMoveDrawableZOrderArchive.super)
}
inline ::TSK::CommandArchive* CommandSlideMoveDrawableZOrderArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideMoveDrawableZOrderArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideMoveDrawableZOrderArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideMoveDrawableZOrderArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSlideMoveDrawableZOrderArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideMoveDrawableZOrderArchive.super)
  return _msg;
}
inline void CommandSlideMoveDrawableZOrderArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideMoveDrawableZOrderArchive.super)
}

// required .TSP.Reference slideNode = 2;
inline bool CommandSlideMoveDrawableZOrderArchive::_internal_has_slidenode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slidenode_ != nullptr);
  return value;
}
inline bool CommandSlideMoveDrawableZOrderArchive::has_slidenode() const {
  return _internal_has_slidenode();
}
inline const ::TSP::Reference& CommandSlideMoveDrawableZOrderArchive::_internal_slidenode() const {
  const ::TSP::Reference* p = _impl_.slidenode_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlideMoveDrawableZOrderArchive::slidenode() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveDrawableZOrderArchive.slideNode)
  return _internal_slidenode();
}
inline void CommandSlideMoveDrawableZOrderArchive::unsafe_arena_set_allocated_slidenode(
    ::TSP::Reference* slidenode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidenode_);
  }
  _impl_.slidenode_ = slidenode;
  if (slidenode) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideMoveDrawableZOrderArchive.slideNode)
}
inline ::TSP::Reference* CommandSlideMoveDrawableZOrderArchive::release_slidenode() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.slidenode_;
  _impl_.slidenode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlideMoveDrawableZOrderArchive::unsafe_arena_release_slidenode() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideMoveDrawableZOrderArchive.slideNode)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.slidenode_;
  _impl_.slidenode_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlideMoveDrawableZOrderArchive::_internal_mutable_slidenode() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.slidenode_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.slidenode_ = p;
  }
  return _impl_.slidenode_;
}
inline ::TSP::Reference* CommandSlideMoveDrawableZOrderArchive::mutable_slidenode() {
  ::TSP::Reference* _msg = _internal_mutable_slidenode();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideMoveDrawableZOrderArchive.slideNode)
  return _msg;
}
inline void CommandSlideMoveDrawableZOrderArchive::set_allocated_slidenode(::TSP::Reference* slidenode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidenode_);
  }
  if (slidenode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidenode));
    if (message_arena != submessage_arena) {
      slidenode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slidenode, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.slidenode_ = slidenode;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideMoveDrawableZOrderArchive.slideNode)
}

// repeated .TSP.Reference infos = 3;
inline int CommandSlideMoveDrawableZOrderArchive::_internal_infos_size() const {
  return _impl_.infos_.size();
}
inline int CommandSlideMoveDrawableZOrderArchive::infos_size() const {
  return _internal_infos_size();
}
inline ::TSP::Reference* CommandSlideMoveDrawableZOrderArchive::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideMoveDrawableZOrderArchive.infos)
  return _impl_.infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideMoveDrawableZOrderArchive::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideMoveDrawableZOrderArchive.infos)
  return &_impl_.infos_;
}
inline const ::TSP::Reference& CommandSlideMoveDrawableZOrderArchive::_internal_infos(int index) const {
  return _impl_.infos_.Get(index);
}
inline const ::TSP::Reference& CommandSlideMoveDrawableZOrderArchive::infos(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveDrawableZOrderArchive.infos)
  return _internal_infos(index);
}
inline ::TSP::Reference* CommandSlideMoveDrawableZOrderArchive::_internal_add_infos() {
  return _impl_.infos_.Add();
}
inline ::TSP::Reference* CommandSlideMoveDrawableZOrderArchive::add_infos() {
  ::TSP::Reference* _add = _internal_add_infos();
  // @@protoc_insertion_point(field_add:KN.CommandSlideMoveDrawableZOrderArchive.infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideMoveDrawableZOrderArchive::infos() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideMoveDrawableZOrderArchive.infos)
  return _impl_.infos_;
}

// repeated .TSP.Reference old_ordered_infos = 4;
inline int CommandSlideMoveDrawableZOrderArchive::_internal_old_ordered_infos_size() const {
  return _impl_.old_ordered_infos_.size();
}
inline int CommandSlideMoveDrawableZOrderArchive::old_ordered_infos_size() const {
  return _internal_old_ordered_infos_size();
}
inline ::TSP::Reference* CommandSlideMoveDrawableZOrderArchive::mutable_old_ordered_infos(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideMoveDrawableZOrderArchive.old_ordered_infos)
  return _impl_.old_ordered_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideMoveDrawableZOrderArchive::mutable_old_ordered_infos() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideMoveDrawableZOrderArchive.old_ordered_infos)
  return &_impl_.old_ordered_infos_;
}
inline const ::TSP::Reference& CommandSlideMoveDrawableZOrderArchive::_internal_old_ordered_infos(int index) const {
  return _impl_.old_ordered_infos_.Get(index);
}
inline const ::TSP::Reference& CommandSlideMoveDrawableZOrderArchive::old_ordered_infos(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveDrawableZOrderArchive.old_ordered_infos)
  return _internal_old_ordered_infos(index);
}
inline ::TSP::Reference* CommandSlideMoveDrawableZOrderArchive::_internal_add_old_ordered_infos() {
  return _impl_.old_ordered_infos_.Add();
}
inline ::TSP::Reference* CommandSlideMoveDrawableZOrderArchive::add_old_ordered_infos() {
  ::TSP::Reference* _add = _internal_add_old_ordered_infos();
  // @@protoc_insertion_point(field_add:KN.CommandSlideMoveDrawableZOrderArchive.old_ordered_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideMoveDrawableZOrderArchive::old_ordered_infos() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideMoveDrawableZOrderArchive.old_ordered_infos)
  return _impl_.old_ordered_infos_;
}

// required .TSP.IndexSet indexes = 5;
inline bool CommandSlideMoveDrawableZOrderArchive::_internal_has_indexes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.indexes_ != nullptr);
  return value;
}
inline bool CommandSlideMoveDrawableZOrderArchive::has_indexes() const {
  return _internal_has_indexes();
}
inline const ::TSP::IndexSet& CommandSlideMoveDrawableZOrderArchive::_internal_indexes() const {
  const ::TSP::IndexSet* p = _impl_.indexes_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::IndexSet&>(
      ::TSP::_IndexSet_default_instance_);
}
inline const ::TSP::IndexSet& CommandSlideMoveDrawableZOrderArchive::indexes() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveDrawableZOrderArchive.indexes)
  return _internal_indexes();
}
inline void CommandSlideMoveDrawableZOrderArchive::unsafe_arena_set_allocated_indexes(
    ::TSP::IndexSet* indexes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.indexes_);
  }
  _impl_.indexes_ = indexes;
  if (indexes) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideMoveDrawableZOrderArchive.indexes)
}
inline ::TSP::IndexSet* CommandSlideMoveDrawableZOrderArchive::release_indexes() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::IndexSet* temp = _impl_.indexes_;
  _impl_.indexes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::IndexSet* CommandSlideMoveDrawableZOrderArchive::unsafe_arena_release_indexes() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideMoveDrawableZOrderArchive.indexes)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::IndexSet* temp = _impl_.indexes_;
  _impl_.indexes_ = nullptr;
  return temp;
}
inline ::TSP::IndexSet* CommandSlideMoveDrawableZOrderArchive::_internal_mutable_indexes() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.indexes_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::IndexSet>(GetArenaForAllocation());
    _impl_.indexes_ = p;
  }
  return _impl_.indexes_;
}
inline ::TSP::IndexSet* CommandSlideMoveDrawableZOrderArchive::mutable_indexes() {
  ::TSP::IndexSet* _msg = _internal_mutable_indexes();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideMoveDrawableZOrderArchive.indexes)
  return _msg;
}
inline void CommandSlideMoveDrawableZOrderArchive::set_allocated_indexes(::TSP::IndexSet* indexes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.indexes_);
  }
  if (indexes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(indexes));
    if (message_arena != submessage_arena) {
      indexes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, indexes, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.indexes_ = indexes;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideMoveDrawableZOrderArchive.indexes)
}

// -------------------------------------------------------------------

// CommandSlidePasteDrawablesArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlidePasteDrawablesArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSlidePasteDrawablesArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlidePasteDrawablesArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlidePasteDrawablesArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlidePasteDrawablesArchive.super)
  return _internal_super();
}
inline void CommandSlidePasteDrawablesArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlidePasteDrawablesArchive.super)
}
inline ::TSK::CommandArchive* CommandSlidePasteDrawablesArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlidePasteDrawablesArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlidePasteDrawablesArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlidePasteDrawablesArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSlidePasteDrawablesArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlidePasteDrawablesArchive.super)
  return _msg;
}
inline void CommandSlidePasteDrawablesArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlidePasteDrawablesArchive.super)
}

// repeated .TSP.Reference commands = 2;
inline int CommandSlidePasteDrawablesArchive::_internal_commands_size() const {
  return _impl_.commands_.size();
}
inline int CommandSlidePasteDrawablesArchive::commands_size() const {
  return _internal_commands_size();
}
inline ::TSP::Reference* CommandSlidePasteDrawablesArchive::mutable_commands(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlidePasteDrawablesArchive.commands)
  return _impl_.commands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlidePasteDrawablesArchive::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlidePasteDrawablesArchive.commands)
  return &_impl_.commands_;
}
inline const ::TSP::Reference& CommandSlidePasteDrawablesArchive::_internal_commands(int index) const {
  return _impl_.commands_.Get(index);
}
inline const ::TSP::Reference& CommandSlidePasteDrawablesArchive::commands(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlidePasteDrawablesArchive.commands)
  return _internal_commands(index);
}
inline ::TSP::Reference* CommandSlidePasteDrawablesArchive::_internal_add_commands() {
  return _impl_.commands_.Add();
}
inline ::TSP::Reference* CommandSlidePasteDrawablesArchive::add_commands() {
  ::TSP::Reference* _add = _internal_add_commands();
  // @@protoc_insertion_point(field_add:KN.CommandSlidePasteDrawablesArchive.commands)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlidePasteDrawablesArchive::commands() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlidePasteDrawablesArchive.commands)
  return _impl_.commands_;
}

// required .TSP.Reference slide = 3;
inline bool CommandSlidePasteDrawablesArchive::_internal_has_slide() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slide_ != nullptr);
  return value;
}
inline bool CommandSlidePasteDrawablesArchive::has_slide() const {
  return _internal_has_slide();
}
inline const ::TSP::Reference& CommandSlidePasteDrawablesArchive::_internal_slide() const {
  const ::TSP::Reference* p = _impl_.slide_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlidePasteDrawablesArchive::slide() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlidePasteDrawablesArchive.slide)
  return _internal_slide();
}
inline void CommandSlidePasteDrawablesArchive::unsafe_arena_set_allocated_slide(
    ::TSP::Reference* slide) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_);
  }
  _impl_.slide_ = slide;
  if (slide) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlidePasteDrawablesArchive.slide)
}
inline ::TSP::Reference* CommandSlidePasteDrawablesArchive::release_slide() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.slide_;
  _impl_.slide_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlidePasteDrawablesArchive::unsafe_arena_release_slide() {
  // @@protoc_insertion_point(field_release:KN.CommandSlidePasteDrawablesArchive.slide)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.slide_;
  _impl_.slide_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlidePasteDrawablesArchive::_internal_mutable_slide() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.slide_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.slide_ = p;
  }
  return _impl_.slide_;
}
inline ::TSP::Reference* CommandSlidePasteDrawablesArchive::mutable_slide() {
  ::TSP::Reference* _msg = _internal_mutable_slide();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlidePasteDrawablesArchive.slide)
  return _msg;
}
inline void CommandSlidePasteDrawablesArchive::set_allocated_slide(::TSP::Reference* slide) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_);
  }
  if (slide) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide));
    if (message_arena != submessage_arena) {
      slide = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.slide_ = slide;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlidePasteDrawablesArchive.slide)
}

// repeated .TSP.Reference drawables = 4;
inline int CommandSlidePasteDrawablesArchive::_internal_drawables_size() const {
  return _impl_.drawables_.size();
}
inline int CommandSlidePasteDrawablesArchive::drawables_size() const {
  return _internal_drawables_size();
}
inline ::TSP::Reference* CommandSlidePasteDrawablesArchive::mutable_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlidePasteDrawablesArchive.drawables)
  return _impl_.drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlidePasteDrawablesArchive::mutable_drawables() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlidePasteDrawablesArchive.drawables)
  return &_impl_.drawables_;
}
inline const ::TSP::Reference& CommandSlidePasteDrawablesArchive::_internal_drawables(int index) const {
  return _impl_.drawables_.Get(index);
}
inline const ::TSP::Reference& CommandSlidePasteDrawablesArchive::drawables(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlidePasteDrawablesArchive.drawables)
  return _internal_drawables(index);
}
inline ::TSP::Reference* CommandSlidePasteDrawablesArchive::_internal_add_drawables() {
  return _impl_.drawables_.Add();
}
inline ::TSP::Reference* CommandSlidePasteDrawablesArchive::add_drawables() {
  ::TSP::Reference* _add = _internal_add_drawables();
  // @@protoc_insertion_point(field_add:KN.CommandSlidePasteDrawablesArchive.drawables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlidePasteDrawablesArchive::drawables() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlidePasteDrawablesArchive.drawables)
  return _impl_.drawables_;
}

// optional bool has_builds = 5 [default = false];
inline bool CommandSlidePasteDrawablesArchive::_internal_has_has_builds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSlidePasteDrawablesArchive::has_has_builds() const {
  return _internal_has_has_builds();
}
inline void CommandSlidePasteDrawablesArchive::clear_has_builds() {
  _impl_.has_builds_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CommandSlidePasteDrawablesArchive::_internal_has_builds() const {
  return _impl_.has_builds_;
}
inline bool CommandSlidePasteDrawablesArchive::has_builds() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlidePasteDrawablesArchive.has_builds)
  return _internal_has_builds();
}
inline void CommandSlidePasteDrawablesArchive::_internal_set_has_builds(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.has_builds_ = value;
}
inline void CommandSlidePasteDrawablesArchive::set_has_builds(bool value) {
  _internal_set_has_builds(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlidePasteDrawablesArchive.has_builds)
}

// -------------------------------------------------------------------

// CommandSlideNodeSetPropertyArchive_PropertyValue

// optional bool boolValue = 1;
inline bool CommandSlideNodeSetPropertyArchive_PropertyValue::_internal_has_boolvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSlideNodeSetPropertyArchive_PropertyValue::has_boolvalue() const {
  return _internal_has_boolvalue();
}
inline void CommandSlideNodeSetPropertyArchive_PropertyValue::clear_boolvalue() {
  _impl_.boolvalue_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CommandSlideNodeSetPropertyArchive_PropertyValue::_internal_boolvalue() const {
  return _impl_.boolvalue_;
}
inline bool CommandSlideNodeSetPropertyArchive_PropertyValue::boolvalue() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideNodeSetPropertyArchive.PropertyValue.boolValue)
  return _internal_boolvalue();
}
inline void CommandSlideNodeSetPropertyArchive_PropertyValue::_internal_set_boolvalue(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.boolvalue_ = value;
}
inline void CommandSlideNodeSetPropertyArchive_PropertyValue::set_boolvalue(bool value) {
  _internal_set_boolvalue(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideNodeSetPropertyArchive.PropertyValue.boolValue)
}

// optional .TSP.DataReference image = 3;
inline bool CommandSlideNodeSetPropertyArchive_PropertyValue::_internal_has_image() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.image_ != nullptr);
  return value;
}
inline bool CommandSlideNodeSetPropertyArchive_PropertyValue::has_image() const {
  return _internal_has_image();
}
inline const ::TSP::DataReference& CommandSlideNodeSetPropertyArchive_PropertyValue::_internal_image() const {
  const ::TSP::DataReference* p = _impl_.image_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& CommandSlideNodeSetPropertyArchive_PropertyValue::image() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideNodeSetPropertyArchive.PropertyValue.image)
  return _internal_image();
}
inline void CommandSlideNodeSetPropertyArchive_PropertyValue::unsafe_arena_set_allocated_image(
    ::TSP::DataReference* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  _impl_.image_ = image;
  if (image) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideNodeSetPropertyArchive.PropertyValue.image)
}
inline ::TSP::DataReference* CommandSlideNodeSetPropertyArchive_PropertyValue::release_image() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::DataReference* temp = _impl_.image_;
  _impl_.image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::DataReference* CommandSlideNodeSetPropertyArchive_PropertyValue::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideNodeSetPropertyArchive.PropertyValue.image)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::DataReference* temp = _impl_.image_;
  _impl_.image_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* CommandSlideNodeSetPropertyArchive_PropertyValue::_internal_mutable_image() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.image_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArenaForAllocation());
    _impl_.image_ = p;
  }
  return _impl_.image_;
}
inline ::TSP::DataReference* CommandSlideNodeSetPropertyArchive_PropertyValue::mutable_image() {
  ::TSP::DataReference* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideNodeSetPropertyArchive.PropertyValue.image)
  return _msg;
}
inline void CommandSlideNodeSetPropertyArchive_PropertyValue::set_allocated_image(::TSP::DataReference* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image));
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.image_ = image;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideNodeSetPropertyArchive.PropertyValue.image)
}

// optional .TSP.Reference database_image = 2;
inline bool CommandSlideNodeSetPropertyArchive_PropertyValue::_internal_has_database_image() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.database_image_ != nullptr);
  return value;
}
inline bool CommandSlideNodeSetPropertyArchive_PropertyValue::has_database_image() const {
  return _internal_has_database_image();
}
inline const ::TSP::Reference& CommandSlideNodeSetPropertyArchive_PropertyValue::_internal_database_image() const {
  const ::TSP::Reference* p = _impl_.database_image_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlideNodeSetPropertyArchive_PropertyValue::database_image() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideNodeSetPropertyArchive.PropertyValue.database_image)
  return _internal_database_image();
}
inline void CommandSlideNodeSetPropertyArchive_PropertyValue::unsafe_arena_set_allocated_database_image(
    ::TSP::Reference* database_image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.database_image_);
  }
  _impl_.database_image_ = database_image;
  if (database_image) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideNodeSetPropertyArchive.PropertyValue.database_image)
}
inline ::TSP::Reference* CommandSlideNodeSetPropertyArchive_PropertyValue::release_database_image() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.database_image_;
  _impl_.database_image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlideNodeSetPropertyArchive_PropertyValue::unsafe_arena_release_database_image() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideNodeSetPropertyArchive.PropertyValue.database_image)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.database_image_;
  _impl_.database_image_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlideNodeSetPropertyArchive_PropertyValue::_internal_mutable_database_image() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.database_image_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.database_image_ = p;
  }
  return _impl_.database_image_;
}
inline ::TSP::Reference* CommandSlideNodeSetPropertyArchive_PropertyValue::mutable_database_image() {
  ::TSP::Reference* _msg = _internal_mutable_database_image();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideNodeSetPropertyArchive.PropertyValue.database_image)
  return _msg;
}
inline void CommandSlideNodeSetPropertyArchive_PropertyValue::set_allocated_database_image(::TSP::Reference* database_image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.database_image_);
  }
  if (database_image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_image));
    if (message_arena != submessage_arena) {
      database_image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, database_image, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.database_image_ = database_image;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideNodeSetPropertyArchive.PropertyValue.database_image)
}

// -------------------------------------------------------------------

// CommandSlideNodeSetPropertyArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideNodeSetPropertyArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSlideNodeSetPropertyArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideNodeSetPropertyArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideNodeSetPropertyArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideNodeSetPropertyArchive.super)
  return _internal_super();
}
inline void CommandSlideNodeSetPropertyArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideNodeSetPropertyArchive.super)
}
inline ::TSK::CommandArchive* CommandSlideNodeSetPropertyArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideNodeSetPropertyArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideNodeSetPropertyArchive.super)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideNodeSetPropertyArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSlideNodeSetPropertyArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideNodeSetPropertyArchive.super)
  return _msg;
}
inline void CommandSlideNodeSetPropertyArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideNodeSetPropertyArchive.super)
}

// required .TSP.Reference slideNode = 2;
inline bool CommandSlideNodeSetPropertyArchive::_internal_has_slidenode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slidenode_ != nullptr);
  return value;
}
inline bool CommandSlideNodeSetPropertyArchive::has_slidenode() const {
  return _internal_has_slidenode();
}
inline const ::TSP::Reference& CommandSlideNodeSetPropertyArchive::_internal_slidenode() const {
  const ::TSP::Reference* p = _impl_.slidenode_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlideNodeSetPropertyArchive::slidenode() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideNodeSetPropertyArchive.slideNode)
  return _internal_slidenode();
}
inline void CommandSlideNodeSetPropertyArchive::unsafe_arena_set_allocated_slidenode(
    ::TSP::Reference* slidenode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidenode_);
  }
  _impl_.slidenode_ = slidenode;
  if (slidenode) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideNodeSetPropertyArchive.slideNode)
}
inline ::TSP::Reference* CommandSlideNodeSetPropertyArchive::release_slidenode() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.slidenode_;
  _impl_.slidenode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlideNodeSetPropertyArchive::unsafe_arena_release_slidenode() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideNodeSetPropertyArchive.slideNode)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.slidenode_;
  _impl_.slidenode_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlideNodeSetPropertyArchive::_internal_mutable_slidenode() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.slidenode_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.slidenode_ = p;
  }
  return _impl_.slidenode_;
}
inline ::TSP::Reference* CommandSlideNodeSetPropertyArchive::mutable_slidenode() {
  ::TSP::Reference* _msg = _internal_mutable_slidenode();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideNodeSetPropertyArchive.slideNode)
  return _msg;
}
inline void CommandSlideNodeSetPropertyArchive::set_allocated_slidenode(::TSP::Reference* slidenode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidenode_);
  }
  if (slidenode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidenode));
    if (message_arena != submessage_arena) {
      slidenode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slidenode, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.slidenode_ = slidenode;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideNodeSetPropertyArchive.slideNode)
}

// required string property = 3;
inline bool CommandSlideNodeSetPropertyArchive::_internal_has_property() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandSlideNodeSetPropertyArchive::has_property() const {
  return _internal_has_property();
}
inline void CommandSlideNodeSetPropertyArchive::clear_property() {
  _impl_.property_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandSlideNodeSetPropertyArchive::property() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideNodeSetPropertyArchive.property)
  return _internal_property();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSlideNodeSetPropertyArchive::set_property(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.property_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.CommandSlideNodeSetPropertyArchive.property)
}
inline std::string* CommandSlideNodeSetPropertyArchive::mutable_property() {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideNodeSetPropertyArchive.property)
  return _s;
}
inline const std::string& CommandSlideNodeSetPropertyArchive::_internal_property() const {
  return _impl_.property_.Get();
}
inline void CommandSlideNodeSetPropertyArchive::_internal_set_property(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.property_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandSlideNodeSetPropertyArchive::_internal_mutable_property() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.property_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandSlideNodeSetPropertyArchive::release_property() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideNodeSetPropertyArchive.property)
  if (!_internal_has_property()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.property_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.property_.IsDefault()) {
    _impl_.property_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandSlideNodeSetPropertyArchive::set_allocated_property(std::string* property) {
  if (property != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.property_.SetAllocated(property, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.property_.IsDefault()) {
    _impl_.property_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideNodeSetPropertyArchive.property)
}

// required .KN.CommandSlideNodeSetPropertyArchive.PropertyValue oldValue = 4;
inline bool CommandSlideNodeSetPropertyArchive::_internal_has_oldvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oldvalue_ != nullptr);
  return value;
}
inline bool CommandSlideNodeSetPropertyArchive::has_oldvalue() const {
  return _internal_has_oldvalue();
}
inline void CommandSlideNodeSetPropertyArchive::clear_oldvalue() {
  if (_impl_.oldvalue_ != nullptr) _impl_.oldvalue_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue& CommandSlideNodeSetPropertyArchive::_internal_oldvalue() const {
  const ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* p = _impl_.oldvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue&>(
      ::KN::_CommandSlideNodeSetPropertyArchive_PropertyValue_default_instance_);
}
inline const ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue& CommandSlideNodeSetPropertyArchive::oldvalue() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideNodeSetPropertyArchive.oldValue)
  return _internal_oldvalue();
}
inline void CommandSlideNodeSetPropertyArchive::unsafe_arena_set_allocated_oldvalue(
    ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* oldvalue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldvalue_);
  }
  _impl_.oldvalue_ = oldvalue;
  if (oldvalue) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideNodeSetPropertyArchive.oldValue)
}
inline ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* CommandSlideNodeSetPropertyArchive::release_oldvalue() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* temp = _impl_.oldvalue_;
  _impl_.oldvalue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* CommandSlideNodeSetPropertyArchive::unsafe_arena_release_oldvalue() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideNodeSetPropertyArchive.oldValue)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* temp = _impl_.oldvalue_;
  _impl_.oldvalue_ = nullptr;
  return temp;
}
inline ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* CommandSlideNodeSetPropertyArchive::_internal_mutable_oldvalue() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.oldvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::CommandSlideNodeSetPropertyArchive_PropertyValue>(GetArenaForAllocation());
    _impl_.oldvalue_ = p;
  }
  return _impl_.oldvalue_;
}
inline ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* CommandSlideNodeSetPropertyArchive::mutable_oldvalue() {
  ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* _msg = _internal_mutable_oldvalue();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideNodeSetPropertyArchive.oldValue)
  return _msg;
}
inline void CommandSlideNodeSetPropertyArchive::set_allocated_oldvalue(::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* oldvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.oldvalue_;
  }
  if (oldvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(oldvalue);
    if (message_arena != submessage_arena) {
      oldvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldvalue, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.oldvalue_ = oldvalue;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideNodeSetPropertyArchive.oldValue)
}

// required .KN.CommandSlideNodeSetPropertyArchive.PropertyValue newValue = 5;
inline bool CommandSlideNodeSetPropertyArchive::_internal_has_newvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.newvalue_ != nullptr);
  return value;
}
inline bool CommandSlideNodeSetPropertyArchive::has_newvalue() const {
  return _internal_has_newvalue();
}
inline void CommandSlideNodeSetPropertyArchive::clear_newvalue() {
  if (_impl_.newvalue_ != nullptr) _impl_.newvalue_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue& CommandSlideNodeSetPropertyArchive::_internal_newvalue() const {
  const ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* p = _impl_.newvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue&>(
      ::KN::_CommandSlideNodeSetPropertyArchive_PropertyValue_default_instance_);
}
inline const ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue& CommandSlideNodeSetPropertyArchive::newvalue() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideNodeSetPropertyArchive.newValue)
  return _internal_newvalue();
}
inline void CommandSlideNodeSetPropertyArchive::unsafe_arena_set_allocated_newvalue(
    ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* newvalue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newvalue_);
  }
  _impl_.newvalue_ = newvalue;
  if (newvalue) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideNodeSetPropertyArchive.newValue)
}
inline ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* CommandSlideNodeSetPropertyArchive::release_newvalue() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* temp = _impl_.newvalue_;
  _impl_.newvalue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* CommandSlideNodeSetPropertyArchive::unsafe_arena_release_newvalue() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideNodeSetPropertyArchive.newValue)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* temp = _impl_.newvalue_;
  _impl_.newvalue_ = nullptr;
  return temp;
}
inline ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* CommandSlideNodeSetPropertyArchive::_internal_mutable_newvalue() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.newvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::CommandSlideNodeSetPropertyArchive_PropertyValue>(GetArenaForAllocation());
    _impl_.newvalue_ = p;
  }
  return _impl_.newvalue_;
}
inline ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* CommandSlideNodeSetPropertyArchive::mutable_newvalue() {
  ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* _msg = _internal_mutable_newvalue();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideNodeSetPropertyArchive.newValue)
  return _msg;
}
inline void CommandSlideNodeSetPropertyArchive::set_allocated_newvalue(::KN::CommandSlideNodeSetPropertyArchive_PropertyValue* newvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.newvalue_;
  }
  if (newvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(newvalue);
    if (message_arena != submessage_arena) {
      newvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newvalue, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.newvalue_ = newvalue;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideNodeSetPropertyArchive.newValue)
}

// -------------------------------------------------------------------

// CommandSlideSetValueArchive_PropertyValue

// optional bool boolValue = 1;
inline bool CommandSlideSetValueArchive_PropertyValue::_internal_has_boolvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSlideSetValueArchive_PropertyValue::has_boolvalue() const {
  return _internal_has_boolvalue();
}
inline void CommandSlideSetValueArchive_PropertyValue::clear_boolvalue() {
  _impl_.boolvalue_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CommandSlideSetValueArchive_PropertyValue::_internal_boolvalue() const {
  return _impl_.boolvalue_;
}
inline bool CommandSlideSetValueArchive_PropertyValue::boolvalue() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetValueArchive.PropertyValue.boolValue)
  return _internal_boolvalue();
}
inline void CommandSlideSetValueArchive_PropertyValue::_internal_set_boolvalue(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.boolvalue_ = value;
}
inline void CommandSlideSetValueArchive_PropertyValue::set_boolvalue(bool value) {
  _internal_set_boolvalue(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideSetValueArchive.PropertyValue.boolValue)
}

// optional .TSP.Reference objectValue = 2;
inline bool CommandSlideSetValueArchive_PropertyValue::_internal_has_objectvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.objectvalue_ != nullptr);
  return value;
}
inline bool CommandSlideSetValueArchive_PropertyValue::has_objectvalue() const {
  return _internal_has_objectvalue();
}
inline const ::TSP::Reference& CommandSlideSetValueArchive_PropertyValue::_internal_objectvalue() const {
  const ::TSP::Reference* p = _impl_.objectvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlideSetValueArchive_PropertyValue::objectvalue() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetValueArchive.PropertyValue.objectValue)
  return _internal_objectvalue();
}
inline void CommandSlideSetValueArchive_PropertyValue::unsafe_arena_set_allocated_objectvalue(
    ::TSP::Reference* objectvalue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectvalue_);
  }
  _impl_.objectvalue_ = objectvalue;
  if (objectvalue) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideSetValueArchive.PropertyValue.objectValue)
}
inline ::TSP::Reference* CommandSlideSetValueArchive_PropertyValue::release_objectvalue() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.objectvalue_;
  _impl_.objectvalue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlideSetValueArchive_PropertyValue::unsafe_arena_release_objectvalue() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideSetValueArchive.PropertyValue.objectValue)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.objectvalue_;
  _impl_.objectvalue_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlideSetValueArchive_PropertyValue::_internal_mutable_objectvalue() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.objectvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.objectvalue_ = p;
  }
  return _impl_.objectvalue_;
}
inline ::TSP::Reference* CommandSlideSetValueArchive_PropertyValue::mutable_objectvalue() {
  ::TSP::Reference* _msg = _internal_mutable_objectvalue();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetValueArchive.PropertyValue.objectValue)
  return _msg;
}
inline void CommandSlideSetValueArchive_PropertyValue::set_allocated_objectvalue(::TSP::Reference* objectvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectvalue_);
  }
  if (objectvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectvalue));
    if (message_arena != submessage_arena) {
      objectvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectvalue, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.objectvalue_ = objectvalue;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideSetValueArchive.PropertyValue.objectValue)
}

// optional .TSD.FillArchive fill = 3;
inline bool CommandSlideSetValueArchive_PropertyValue::_internal_has_fill() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fill_ != nullptr);
  return value;
}
inline bool CommandSlideSetValueArchive_PropertyValue::has_fill() const {
  return _internal_has_fill();
}
inline const ::TSD::FillArchive& CommandSlideSetValueArchive_PropertyValue::_internal_fill() const {
  const ::TSD::FillArchive* p = _impl_.fill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& CommandSlideSetValueArchive_PropertyValue::fill() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetValueArchive.PropertyValue.fill)
  return _internal_fill();
}
inline void CommandSlideSetValueArchive_PropertyValue::unsafe_arena_set_allocated_fill(
    ::TSD::FillArchive* fill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fill_);
  }
  _impl_.fill_ = fill;
  if (fill) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideSetValueArchive.PropertyValue.fill)
}
inline ::TSD::FillArchive* CommandSlideSetValueArchive_PropertyValue::release_fill() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSD::FillArchive* temp = _impl_.fill_;
  _impl_.fill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* CommandSlideSetValueArchive_PropertyValue::unsafe_arena_release_fill() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideSetValueArchive.PropertyValue.fill)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSD::FillArchive* temp = _impl_.fill_;
  _impl_.fill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* CommandSlideSetValueArchive_PropertyValue::_internal_mutable_fill() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.fill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    _impl_.fill_ = p;
  }
  return _impl_.fill_;
}
inline ::TSD::FillArchive* CommandSlideSetValueArchive_PropertyValue::mutable_fill() {
  ::TSD::FillArchive* _msg = _internal_mutable_fill();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetValueArchive.PropertyValue.fill)
  return _msg;
}
inline void CommandSlideSetValueArchive_PropertyValue::set_allocated_fill(::TSD::FillArchive* fill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fill_);
  }
  if (fill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fill));
    if (message_arena != submessage_arena) {
      fill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fill, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.fill_ = fill;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideSetValueArchive.PropertyValue.fill)
}

// -------------------------------------------------------------------

// CommandSlideSetValueArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideSetValueArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSlideSetValueArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideSetValueArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideSetValueArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetValueArchive.super)
  return _internal_super();
}
inline void CommandSlideSetValueArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideSetValueArchive.super)
}
inline ::TSK::CommandArchive* CommandSlideSetValueArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideSetValueArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideSetValueArchive.super)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideSetValueArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSlideSetValueArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetValueArchive.super)
  return _msg;
}
inline void CommandSlideSetValueArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideSetValueArchive.super)
}

// required .TSP.Reference slide = 2;
inline bool CommandSlideSetValueArchive::_internal_has_slide() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slide_ != nullptr);
  return value;
}
inline bool CommandSlideSetValueArchive::has_slide() const {
  return _internal_has_slide();
}
inline const ::TSP::Reference& CommandSlideSetValueArchive::_internal_slide() const {
  const ::TSP::Reference* p = _impl_.slide_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlideSetValueArchive::slide() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetValueArchive.slide)
  return _internal_slide();
}
inline void CommandSlideSetValueArchive::unsafe_arena_set_allocated_slide(
    ::TSP::Reference* slide) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_);
  }
  _impl_.slide_ = slide;
  if (slide) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideSetValueArchive.slide)
}
inline ::TSP::Reference* CommandSlideSetValueArchive::release_slide() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.slide_;
  _impl_.slide_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlideSetValueArchive::unsafe_arena_release_slide() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideSetValueArchive.slide)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.slide_;
  _impl_.slide_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlideSetValueArchive::_internal_mutable_slide() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.slide_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.slide_ = p;
  }
  return _impl_.slide_;
}
inline ::TSP::Reference* CommandSlideSetValueArchive::mutable_slide() {
  ::TSP::Reference* _msg = _internal_mutable_slide();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetValueArchive.slide)
  return _msg;
}
inline void CommandSlideSetValueArchive::set_allocated_slide(::TSP::Reference* slide) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_);
  }
  if (slide) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide));
    if (message_arena != submessage_arena) {
      slide = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.slide_ = slide;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideSetValueArchive.slide)
}

// required string property = 3;
inline bool CommandSlideSetValueArchive::_internal_has_property() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandSlideSetValueArchive::has_property() const {
  return _internal_has_property();
}
inline void CommandSlideSetValueArchive::clear_property() {
  _impl_.property_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandSlideSetValueArchive::property() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetValueArchive.property)
  return _internal_property();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSlideSetValueArchive::set_property(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.property_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.CommandSlideSetValueArchive.property)
}
inline std::string* CommandSlideSetValueArchive::mutable_property() {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetValueArchive.property)
  return _s;
}
inline const std::string& CommandSlideSetValueArchive::_internal_property() const {
  return _impl_.property_.Get();
}
inline void CommandSlideSetValueArchive::_internal_set_property(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.property_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandSlideSetValueArchive::_internal_mutable_property() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.property_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandSlideSetValueArchive::release_property() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideSetValueArchive.property)
  if (!_internal_has_property()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.property_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.property_.IsDefault()) {
    _impl_.property_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandSlideSetValueArchive::set_allocated_property(std::string* property) {
  if (property != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.property_.SetAllocated(property, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.property_.IsDefault()) {
    _impl_.property_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideSetValueArchive.property)
}

// required .KN.CommandSlideSetValueArchive.PropertyValue oldValue = 4;
inline bool CommandSlideSetValueArchive::_internal_has_oldvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oldvalue_ != nullptr);
  return value;
}
inline bool CommandSlideSetValueArchive::has_oldvalue() const {
  return _internal_has_oldvalue();
}
inline void CommandSlideSetValueArchive::clear_oldvalue() {
  if (_impl_.oldvalue_ != nullptr) _impl_.oldvalue_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::KN::CommandSlideSetValueArchive_PropertyValue& CommandSlideSetValueArchive::_internal_oldvalue() const {
  const ::KN::CommandSlideSetValueArchive_PropertyValue* p = _impl_.oldvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::CommandSlideSetValueArchive_PropertyValue&>(
      ::KN::_CommandSlideSetValueArchive_PropertyValue_default_instance_);
}
inline const ::KN::CommandSlideSetValueArchive_PropertyValue& CommandSlideSetValueArchive::oldvalue() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetValueArchive.oldValue)
  return _internal_oldvalue();
}
inline void CommandSlideSetValueArchive::unsafe_arena_set_allocated_oldvalue(
    ::KN::CommandSlideSetValueArchive_PropertyValue* oldvalue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldvalue_);
  }
  _impl_.oldvalue_ = oldvalue;
  if (oldvalue) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideSetValueArchive.oldValue)
}
inline ::KN::CommandSlideSetValueArchive_PropertyValue* CommandSlideSetValueArchive::release_oldvalue() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::KN::CommandSlideSetValueArchive_PropertyValue* temp = _impl_.oldvalue_;
  _impl_.oldvalue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::CommandSlideSetValueArchive_PropertyValue* CommandSlideSetValueArchive::unsafe_arena_release_oldvalue() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideSetValueArchive.oldValue)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::KN::CommandSlideSetValueArchive_PropertyValue* temp = _impl_.oldvalue_;
  _impl_.oldvalue_ = nullptr;
  return temp;
}
inline ::KN::CommandSlideSetValueArchive_PropertyValue* CommandSlideSetValueArchive::_internal_mutable_oldvalue() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.oldvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::CommandSlideSetValueArchive_PropertyValue>(GetArenaForAllocation());
    _impl_.oldvalue_ = p;
  }
  return _impl_.oldvalue_;
}
inline ::KN::CommandSlideSetValueArchive_PropertyValue* CommandSlideSetValueArchive::mutable_oldvalue() {
  ::KN::CommandSlideSetValueArchive_PropertyValue* _msg = _internal_mutable_oldvalue();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetValueArchive.oldValue)
  return _msg;
}
inline void CommandSlideSetValueArchive::set_allocated_oldvalue(::KN::CommandSlideSetValueArchive_PropertyValue* oldvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.oldvalue_;
  }
  if (oldvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(oldvalue);
    if (message_arena != submessage_arena) {
      oldvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldvalue, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.oldvalue_ = oldvalue;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideSetValueArchive.oldValue)
}

// required .KN.CommandSlideSetValueArchive.PropertyValue newValue = 5;
inline bool CommandSlideSetValueArchive::_internal_has_newvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.newvalue_ != nullptr);
  return value;
}
inline bool CommandSlideSetValueArchive::has_newvalue() const {
  return _internal_has_newvalue();
}
inline void CommandSlideSetValueArchive::clear_newvalue() {
  if (_impl_.newvalue_ != nullptr) _impl_.newvalue_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::KN::CommandSlideSetValueArchive_PropertyValue& CommandSlideSetValueArchive::_internal_newvalue() const {
  const ::KN::CommandSlideSetValueArchive_PropertyValue* p = _impl_.newvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::CommandSlideSetValueArchive_PropertyValue&>(
      ::KN::_CommandSlideSetValueArchive_PropertyValue_default_instance_);
}
inline const ::KN::CommandSlideSetValueArchive_PropertyValue& CommandSlideSetValueArchive::newvalue() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetValueArchive.newValue)
  return _internal_newvalue();
}
inline void CommandSlideSetValueArchive::unsafe_arena_set_allocated_newvalue(
    ::KN::CommandSlideSetValueArchive_PropertyValue* newvalue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newvalue_);
  }
  _impl_.newvalue_ = newvalue;
  if (newvalue) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideSetValueArchive.newValue)
}
inline ::KN::CommandSlideSetValueArchive_PropertyValue* CommandSlideSetValueArchive::release_newvalue() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::KN::CommandSlideSetValueArchive_PropertyValue* temp = _impl_.newvalue_;
  _impl_.newvalue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::CommandSlideSetValueArchive_PropertyValue* CommandSlideSetValueArchive::unsafe_arena_release_newvalue() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideSetValueArchive.newValue)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::KN::CommandSlideSetValueArchive_PropertyValue* temp = _impl_.newvalue_;
  _impl_.newvalue_ = nullptr;
  return temp;
}
inline ::KN::CommandSlideSetValueArchive_PropertyValue* CommandSlideSetValueArchive::_internal_mutable_newvalue() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.newvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::CommandSlideSetValueArchive_PropertyValue>(GetArenaForAllocation());
    _impl_.newvalue_ = p;
  }
  return _impl_.newvalue_;
}
inline ::KN::CommandSlideSetValueArchive_PropertyValue* CommandSlideSetValueArchive::mutable_newvalue() {
  ::KN::CommandSlideSetValueArchive_PropertyValue* _msg = _internal_mutable_newvalue();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetValueArchive.newValue)
  return _msg;
}
inline void CommandSlideSetValueArchive::set_allocated_newvalue(::KN::CommandSlideSetValueArchive_PropertyValue* newvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.newvalue_;
  }
  if (newvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(newvalue);
    if (message_arena != submessage_arena) {
      newvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newvalue, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.newvalue_ = newvalue;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideSetValueArchive.newValue)
}

// required .TSP.Reference oldSlideStyle = 6;
inline bool CommandSlideSetValueArchive::_internal_has_oldslidestyle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oldslidestyle_ != nullptr);
  return value;
}
inline bool CommandSlideSetValueArchive::has_oldslidestyle() const {
  return _internal_has_oldslidestyle();
}
inline const ::TSP::Reference& CommandSlideSetValueArchive::_internal_oldslidestyle() const {
  const ::TSP::Reference* p = _impl_.oldslidestyle_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlideSetValueArchive::oldslidestyle() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetValueArchive.oldSlideStyle)
  return _internal_oldslidestyle();
}
inline void CommandSlideSetValueArchive::unsafe_arena_set_allocated_oldslidestyle(
    ::TSP::Reference* oldslidestyle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldslidestyle_);
  }
  _impl_.oldslidestyle_ = oldslidestyle;
  if (oldslidestyle) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideSetValueArchive.oldSlideStyle)
}
inline ::TSP::Reference* CommandSlideSetValueArchive::release_oldslidestyle() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.oldslidestyle_;
  _impl_.oldslidestyle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlideSetValueArchive::unsafe_arena_release_oldslidestyle() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideSetValueArchive.oldSlideStyle)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.oldslidestyle_;
  _impl_.oldslidestyle_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlideSetValueArchive::_internal_mutable_oldslidestyle() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.oldslidestyle_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.oldslidestyle_ = p;
  }
  return _impl_.oldslidestyle_;
}
inline ::TSP::Reference* CommandSlideSetValueArchive::mutable_oldslidestyle() {
  ::TSP::Reference* _msg = _internal_mutable_oldslidestyle();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetValueArchive.oldSlideStyle)
  return _msg;
}
inline void CommandSlideSetValueArchive::set_allocated_oldslidestyle(::TSP::Reference* oldslidestyle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldslidestyle_);
  }
  if (oldslidestyle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldslidestyle));
    if (message_arena != submessage_arena) {
      oldslidestyle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldslidestyle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.oldslidestyle_ = oldslidestyle;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideSetValueArchive.oldSlideStyle)
}

// -------------------------------------------------------------------

// CommandSlideSetStyleArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideSetStyleArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSlideSetStyleArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideSetStyleArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideSetStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetStyleArchive.super)
  return _internal_super();
}
inline void CommandSlideSetStyleArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideSetStyleArchive.super)
}
inline ::TSK::CommandArchive* CommandSlideSetStyleArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideSetStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideSetStyleArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideSetStyleArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSlideSetStyleArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetStyleArchive.super)
  return _msg;
}
inline void CommandSlideSetStyleArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideSetStyleArchive.super)
}

// required .TSP.Reference slide = 2;
inline bool CommandSlideSetStyleArchive::_internal_has_slide() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slide_ != nullptr);
  return value;
}
inline bool CommandSlideSetStyleArchive::has_slide() const {
  return _internal_has_slide();
}
inline const ::TSP::Reference& CommandSlideSetStyleArchive::_internal_slide() const {
  const ::TSP::Reference* p = _impl_.slide_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlideSetStyleArchive::slide() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetStyleArchive.slide)
  return _internal_slide();
}
inline void CommandSlideSetStyleArchive::unsafe_arena_set_allocated_slide(
    ::TSP::Reference* slide) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_);
  }
  _impl_.slide_ = slide;
  if (slide) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideSetStyleArchive.slide)
}
inline ::TSP::Reference* CommandSlideSetStyleArchive::release_slide() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.slide_;
  _impl_.slide_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlideSetStyleArchive::unsafe_arena_release_slide() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideSetStyleArchive.slide)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.slide_;
  _impl_.slide_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlideSetStyleArchive::_internal_mutable_slide() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.slide_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.slide_ = p;
  }
  return _impl_.slide_;
}
inline ::TSP::Reference* CommandSlideSetStyleArchive::mutable_slide() {
  ::TSP::Reference* _msg = _internal_mutable_slide();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetStyleArchive.slide)
  return _msg;
}
inline void CommandSlideSetStyleArchive::set_allocated_slide(::TSP::Reference* slide) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_);
  }
  if (slide) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide));
    if (message_arena != submessage_arena) {
      slide = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.slide_ = slide;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideSetStyleArchive.slide)
}

// required .TSP.Reference slide_style = 3;
inline bool CommandSlideSetStyleArchive::_internal_has_slide_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slide_style_ != nullptr);
  return value;
}
inline bool CommandSlideSetStyleArchive::has_slide_style() const {
  return _internal_has_slide_style();
}
inline const ::TSP::Reference& CommandSlideSetStyleArchive::_internal_slide_style() const {
  const ::TSP::Reference* p = _impl_.slide_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlideSetStyleArchive::slide_style() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetStyleArchive.slide_style)
  return _internal_slide_style();
}
inline void CommandSlideSetStyleArchive::unsafe_arena_set_allocated_slide_style(
    ::TSP::Reference* slide_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_style_);
  }
  _impl_.slide_style_ = slide_style;
  if (slide_style) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideSetStyleArchive.slide_style)
}
inline ::TSP::Reference* CommandSlideSetStyleArchive::release_slide_style() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.slide_style_;
  _impl_.slide_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlideSetStyleArchive::unsafe_arena_release_slide_style() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideSetStyleArchive.slide_style)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.slide_style_;
  _impl_.slide_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlideSetStyleArchive::_internal_mutable_slide_style() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.slide_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.slide_style_ = p;
  }
  return _impl_.slide_style_;
}
inline ::TSP::Reference* CommandSlideSetStyleArchive::mutable_slide_style() {
  ::TSP::Reference* _msg = _internal_mutable_slide_style();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetStyleArchive.slide_style)
  return _msg;
}
inline void CommandSlideSetStyleArchive::set_allocated_slide_style(::TSP::Reference* slide_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_style_);
  }
  if (slide_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_style));
    if (message_arena != submessage_arena) {
      slide_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.slide_style_ = slide_style;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideSetStyleArchive.slide_style)
}

// required .TSP.Reference old_slide_style = 4;
inline bool CommandSlideSetStyleArchive::_internal_has_old_slide_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_slide_style_ != nullptr);
  return value;
}
inline bool CommandSlideSetStyleArchive::has_old_slide_style() const {
  return _internal_has_old_slide_style();
}
inline const ::TSP::Reference& CommandSlideSetStyleArchive::_internal_old_slide_style() const {
  const ::TSP::Reference* p = _impl_.old_slide_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlideSetStyleArchive::old_slide_style() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetStyleArchive.old_slide_style)
  return _internal_old_slide_style();
}
inline void CommandSlideSetStyleArchive::unsafe_arena_set_allocated_old_slide_style(
    ::TSP::Reference* old_slide_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_slide_style_);
  }
  _impl_.old_slide_style_ = old_slide_style;
  if (old_slide_style) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideSetStyleArchive.old_slide_style)
}
inline ::TSP::Reference* CommandSlideSetStyleArchive::release_old_slide_style() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.old_slide_style_;
  _impl_.old_slide_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlideSetStyleArchive::unsafe_arena_release_old_slide_style() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideSetStyleArchive.old_slide_style)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.old_slide_style_;
  _impl_.old_slide_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlideSetStyleArchive::_internal_mutable_old_slide_style() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.old_slide_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.old_slide_style_ = p;
  }
  return _impl_.old_slide_style_;
}
inline ::TSP::Reference* CommandSlideSetStyleArchive::mutable_old_slide_style() {
  ::TSP::Reference* _msg = _internal_mutable_old_slide_style();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetStyleArchive.old_slide_style)
  return _msg;
}
inline void CommandSlideSetStyleArchive::set_allocated_old_slide_style(::TSP::Reference* old_slide_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_slide_style_);
  }
  if (old_slide_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_slide_style));
    if (message_arena != submessage_arena) {
      old_slide_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_slide_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.old_slide_style_ = old_slide_style;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideSetStyleArchive.old_slide_style)
}

// -------------------------------------------------------------------

// CommandShowMarkOutOfSyncRecordingArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandShowMarkOutOfSyncRecordingArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandShowMarkOutOfSyncRecordingArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandShowMarkOutOfSyncRecordingArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandShowMarkOutOfSyncRecordingArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowMarkOutOfSyncRecordingArchive.super)
  return _internal_super();
}
inline void CommandShowMarkOutOfSyncRecordingArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowMarkOutOfSyncRecordingArchive.super)
}
inline ::TSK::CommandArchive* CommandShowMarkOutOfSyncRecordingArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandShowMarkOutOfSyncRecordingArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandShowMarkOutOfSyncRecordingArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandShowMarkOutOfSyncRecordingArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandShowMarkOutOfSyncRecordingArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowMarkOutOfSyncRecordingArchive.super)
  return _msg;
}
inline void CommandShowMarkOutOfSyncRecordingArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowMarkOutOfSyncRecordingArchive.super)
}

// required .TSP.Reference show = 2;
inline bool CommandShowMarkOutOfSyncRecordingArchive::_internal_has_show() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.show_ != nullptr);
  return value;
}
inline bool CommandShowMarkOutOfSyncRecordingArchive::has_show() const {
  return _internal_has_show();
}
inline const ::TSP::Reference& CommandShowMarkOutOfSyncRecordingArchive::_internal_show() const {
  const ::TSP::Reference* p = _impl_.show_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowMarkOutOfSyncRecordingArchive::show() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowMarkOutOfSyncRecordingArchive.show)
  return _internal_show();
}
inline void CommandShowMarkOutOfSyncRecordingArchive::unsafe_arena_set_allocated_show(
    ::TSP::Reference* show) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.show_);
  }
  _impl_.show_ = show;
  if (show) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowMarkOutOfSyncRecordingArchive.show)
}
inline ::TSP::Reference* CommandShowMarkOutOfSyncRecordingArchive::release_show() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.show_;
  _impl_.show_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowMarkOutOfSyncRecordingArchive::unsafe_arena_release_show() {
  // @@protoc_insertion_point(field_release:KN.CommandShowMarkOutOfSyncRecordingArchive.show)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.show_;
  _impl_.show_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowMarkOutOfSyncRecordingArchive::_internal_mutable_show() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.show_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.show_ = p;
  }
  return _impl_.show_;
}
inline ::TSP::Reference* CommandShowMarkOutOfSyncRecordingArchive::mutable_show() {
  ::TSP::Reference* _msg = _internal_mutable_show();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowMarkOutOfSyncRecordingArchive.show)
  return _msg;
}
inline void CommandShowMarkOutOfSyncRecordingArchive::set_allocated_show(::TSP::Reference* show) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.show_);
  }
  if (show) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show));
    if (message_arena != submessage_arena) {
      show = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.show_ = show;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowMarkOutOfSyncRecordingArchive.show)
}

// optional .TSP.Reference old_recording = 3;
inline bool CommandShowMarkOutOfSyncRecordingArchive::_internal_has_old_recording() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_recording_ != nullptr);
  return value;
}
inline bool CommandShowMarkOutOfSyncRecordingArchive::has_old_recording() const {
  return _internal_has_old_recording();
}
inline const ::TSP::Reference& CommandShowMarkOutOfSyncRecordingArchive::_internal_old_recording() const {
  const ::TSP::Reference* p = _impl_.old_recording_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowMarkOutOfSyncRecordingArchive::old_recording() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowMarkOutOfSyncRecordingArchive.old_recording)
  return _internal_old_recording();
}
inline void CommandShowMarkOutOfSyncRecordingArchive::unsafe_arena_set_allocated_old_recording(
    ::TSP::Reference* old_recording) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_recording_);
  }
  _impl_.old_recording_ = old_recording;
  if (old_recording) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowMarkOutOfSyncRecordingArchive.old_recording)
}
inline ::TSP::Reference* CommandShowMarkOutOfSyncRecordingArchive::release_old_recording() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.old_recording_;
  _impl_.old_recording_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowMarkOutOfSyncRecordingArchive::unsafe_arena_release_old_recording() {
  // @@protoc_insertion_point(field_release:KN.CommandShowMarkOutOfSyncRecordingArchive.old_recording)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.old_recording_;
  _impl_.old_recording_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowMarkOutOfSyncRecordingArchive::_internal_mutable_old_recording() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.old_recording_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.old_recording_ = p;
  }
  return _impl_.old_recording_;
}
inline ::TSP::Reference* CommandShowMarkOutOfSyncRecordingArchive::mutable_old_recording() {
  ::TSP::Reference* _msg = _internal_mutable_old_recording();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowMarkOutOfSyncRecordingArchive.old_recording)
  return _msg;
}
inline void CommandShowMarkOutOfSyncRecordingArchive::set_allocated_old_recording(::TSP::Reference* old_recording) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_recording_);
  }
  if (old_recording) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_recording));
    if (message_arena != submessage_arena) {
      old_recording = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_recording, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.old_recording_ = old_recording;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowMarkOutOfSyncRecordingArchive.old_recording)
}

// -------------------------------------------------------------------

// CommandShowRemoveRecordingArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandShowRemoveRecordingArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandShowRemoveRecordingArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandShowRemoveRecordingArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandShowRemoveRecordingArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowRemoveRecordingArchive.super)
  return _internal_super();
}
inline void CommandShowRemoveRecordingArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowRemoveRecordingArchive.super)
}
inline ::TSK::CommandArchive* CommandShowRemoveRecordingArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandShowRemoveRecordingArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandShowRemoveRecordingArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandShowRemoveRecordingArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandShowRemoveRecordingArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowRemoveRecordingArchive.super)
  return _msg;
}
inline void CommandShowRemoveRecordingArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowRemoveRecordingArchive.super)
}

// required .TSP.Reference show = 2;
inline bool CommandShowRemoveRecordingArchive::_internal_has_show() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.show_ != nullptr);
  return value;
}
inline bool CommandShowRemoveRecordingArchive::has_show() const {
  return _internal_has_show();
}
inline const ::TSP::Reference& CommandShowRemoveRecordingArchive::_internal_show() const {
  const ::TSP::Reference* p = _impl_.show_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowRemoveRecordingArchive::show() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowRemoveRecordingArchive.show)
  return _internal_show();
}
inline void CommandShowRemoveRecordingArchive::unsafe_arena_set_allocated_show(
    ::TSP::Reference* show) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.show_);
  }
  _impl_.show_ = show;
  if (show) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowRemoveRecordingArchive.show)
}
inline ::TSP::Reference* CommandShowRemoveRecordingArchive::release_show() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.show_;
  _impl_.show_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowRemoveRecordingArchive::unsafe_arena_release_show() {
  // @@protoc_insertion_point(field_release:KN.CommandShowRemoveRecordingArchive.show)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.show_;
  _impl_.show_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowRemoveRecordingArchive::_internal_mutable_show() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.show_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.show_ = p;
  }
  return _impl_.show_;
}
inline ::TSP::Reference* CommandShowRemoveRecordingArchive::mutable_show() {
  ::TSP::Reference* _msg = _internal_mutable_show();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowRemoveRecordingArchive.show)
  return _msg;
}
inline void CommandShowRemoveRecordingArchive::set_allocated_show(::TSP::Reference* show) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.show_);
  }
  if (show) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show));
    if (message_arena != submessage_arena) {
      show = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.show_ = show;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowRemoveRecordingArchive.show)
}

// optional .TSP.Reference old_recording = 3;
inline bool CommandShowRemoveRecordingArchive::_internal_has_old_recording() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_recording_ != nullptr);
  return value;
}
inline bool CommandShowRemoveRecordingArchive::has_old_recording() const {
  return _internal_has_old_recording();
}
inline const ::TSP::Reference& CommandShowRemoveRecordingArchive::_internal_old_recording() const {
  const ::TSP::Reference* p = _impl_.old_recording_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowRemoveRecordingArchive::old_recording() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowRemoveRecordingArchive.old_recording)
  return _internal_old_recording();
}
inline void CommandShowRemoveRecordingArchive::unsafe_arena_set_allocated_old_recording(
    ::TSP::Reference* old_recording) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_recording_);
  }
  _impl_.old_recording_ = old_recording;
  if (old_recording) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowRemoveRecordingArchive.old_recording)
}
inline ::TSP::Reference* CommandShowRemoveRecordingArchive::release_old_recording() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.old_recording_;
  _impl_.old_recording_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowRemoveRecordingArchive::unsafe_arena_release_old_recording() {
  // @@protoc_insertion_point(field_release:KN.CommandShowRemoveRecordingArchive.old_recording)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.old_recording_;
  _impl_.old_recording_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowRemoveRecordingArchive::_internal_mutable_old_recording() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.old_recording_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.old_recording_ = p;
  }
  return _impl_.old_recording_;
}
inline ::TSP::Reference* CommandShowRemoveRecordingArchive::mutable_old_recording() {
  ::TSP::Reference* _msg = _internal_mutable_old_recording();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowRemoveRecordingArchive.old_recording)
  return _msg;
}
inline void CommandShowRemoveRecordingArchive::set_allocated_old_recording(::TSP::Reference* old_recording) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_recording_);
  }
  if (old_recording) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_recording));
    if (message_arena != submessage_arena) {
      old_recording = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_recording, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.old_recording_ = old_recording;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowRemoveRecordingArchive.old_recording)
}

// -------------------------------------------------------------------

// CommandShowReplaceRecordingArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandShowReplaceRecordingArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandShowReplaceRecordingArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandShowReplaceRecordingArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandShowReplaceRecordingArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowReplaceRecordingArchive.super)
  return _internal_super();
}
inline void CommandShowReplaceRecordingArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowReplaceRecordingArchive.super)
}
inline ::TSK::CommandArchive* CommandShowReplaceRecordingArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandShowReplaceRecordingArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandShowReplaceRecordingArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandShowReplaceRecordingArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandShowReplaceRecordingArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowReplaceRecordingArchive.super)
  return _msg;
}
inline void CommandShowReplaceRecordingArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowReplaceRecordingArchive.super)
}

// required .TSP.Reference show = 2;
inline bool CommandShowReplaceRecordingArchive::_internal_has_show() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.show_ != nullptr);
  return value;
}
inline bool CommandShowReplaceRecordingArchive::has_show() const {
  return _internal_has_show();
}
inline const ::TSP::Reference& CommandShowReplaceRecordingArchive::_internal_show() const {
  const ::TSP::Reference* p = _impl_.show_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowReplaceRecordingArchive::show() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowReplaceRecordingArchive.show)
  return _internal_show();
}
inline void CommandShowReplaceRecordingArchive::unsafe_arena_set_allocated_show(
    ::TSP::Reference* show) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.show_);
  }
  _impl_.show_ = show;
  if (show) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowReplaceRecordingArchive.show)
}
inline ::TSP::Reference* CommandShowReplaceRecordingArchive::release_show() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.show_;
  _impl_.show_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowReplaceRecordingArchive::unsafe_arena_release_show() {
  // @@protoc_insertion_point(field_release:KN.CommandShowReplaceRecordingArchive.show)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.show_;
  _impl_.show_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowReplaceRecordingArchive::_internal_mutable_show() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.show_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.show_ = p;
  }
  return _impl_.show_;
}
inline ::TSP::Reference* CommandShowReplaceRecordingArchive::mutable_show() {
  ::TSP::Reference* _msg = _internal_mutable_show();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowReplaceRecordingArchive.show)
  return _msg;
}
inline void CommandShowReplaceRecordingArchive::set_allocated_show(::TSP::Reference* show) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.show_);
  }
  if (show) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show));
    if (message_arena != submessage_arena) {
      show = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.show_ = show;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowReplaceRecordingArchive.show)
}

// required .TSP.Reference replacement_recording = 3;
inline bool CommandShowReplaceRecordingArchive::_internal_has_replacement_recording() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.replacement_recording_ != nullptr);
  return value;
}
inline bool CommandShowReplaceRecordingArchive::has_replacement_recording() const {
  return _internal_has_replacement_recording();
}
inline const ::TSP::Reference& CommandShowReplaceRecordingArchive::_internal_replacement_recording() const {
  const ::TSP::Reference* p = _impl_.replacement_recording_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowReplaceRecordingArchive::replacement_recording() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowReplaceRecordingArchive.replacement_recording)
  return _internal_replacement_recording();
}
inline void CommandShowReplaceRecordingArchive::unsafe_arena_set_allocated_replacement_recording(
    ::TSP::Reference* replacement_recording) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.replacement_recording_);
  }
  _impl_.replacement_recording_ = replacement_recording;
  if (replacement_recording) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowReplaceRecordingArchive.replacement_recording)
}
inline ::TSP::Reference* CommandShowReplaceRecordingArchive::release_replacement_recording() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.replacement_recording_;
  _impl_.replacement_recording_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowReplaceRecordingArchive::unsafe_arena_release_replacement_recording() {
  // @@protoc_insertion_point(field_release:KN.CommandShowReplaceRecordingArchive.replacement_recording)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.replacement_recording_;
  _impl_.replacement_recording_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowReplaceRecordingArchive::_internal_mutable_replacement_recording() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.replacement_recording_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.replacement_recording_ = p;
  }
  return _impl_.replacement_recording_;
}
inline ::TSP::Reference* CommandShowReplaceRecordingArchive::mutable_replacement_recording() {
  ::TSP::Reference* _msg = _internal_mutable_replacement_recording();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowReplaceRecordingArchive.replacement_recording)
  return _msg;
}
inline void CommandShowReplaceRecordingArchive::set_allocated_replacement_recording(::TSP::Reference* replacement_recording) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.replacement_recording_);
  }
  if (replacement_recording) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacement_recording));
    if (message_arena != submessage_arena) {
      replacement_recording = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replacement_recording, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.replacement_recording_ = replacement_recording;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowReplaceRecordingArchive.replacement_recording)
}

// required double replacement_start_time = 4;
inline bool CommandShowReplaceRecordingArchive::_internal_has_replacement_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandShowReplaceRecordingArchive::has_replacement_start_time() const {
  return _internal_has_replacement_start_time();
}
inline void CommandShowReplaceRecordingArchive::clear_replacement_start_time() {
  _impl_.replacement_start_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double CommandShowReplaceRecordingArchive::_internal_replacement_start_time() const {
  return _impl_.replacement_start_time_;
}
inline double CommandShowReplaceRecordingArchive::replacement_start_time() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowReplaceRecordingArchive.replacement_start_time)
  return _internal_replacement_start_time();
}
inline void CommandShowReplaceRecordingArchive::_internal_set_replacement_start_time(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.replacement_start_time_ = value;
}
inline void CommandShowReplaceRecordingArchive::set_replacement_start_time(double value) {
  _internal_set_replacement_start_time(value);
  // @@protoc_insertion_point(field_set:KN.CommandShowReplaceRecordingArchive.replacement_start_time)
}

// optional .TSP.Reference old_recording = 5;
inline bool CommandShowReplaceRecordingArchive::_internal_has_old_recording() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_recording_ != nullptr);
  return value;
}
inline bool CommandShowReplaceRecordingArchive::has_old_recording() const {
  return _internal_has_old_recording();
}
inline const ::TSP::Reference& CommandShowReplaceRecordingArchive::_internal_old_recording() const {
  const ::TSP::Reference* p = _impl_.old_recording_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowReplaceRecordingArchive::old_recording() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowReplaceRecordingArchive.old_recording)
  return _internal_old_recording();
}
inline void CommandShowReplaceRecordingArchive::unsafe_arena_set_allocated_old_recording(
    ::TSP::Reference* old_recording) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_recording_);
  }
  _impl_.old_recording_ = old_recording;
  if (old_recording) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowReplaceRecordingArchive.old_recording)
}
inline ::TSP::Reference* CommandShowReplaceRecordingArchive::release_old_recording() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.old_recording_;
  _impl_.old_recording_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowReplaceRecordingArchive::unsafe_arena_release_old_recording() {
  // @@protoc_insertion_point(field_release:KN.CommandShowReplaceRecordingArchive.old_recording)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.old_recording_;
  _impl_.old_recording_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowReplaceRecordingArchive::_internal_mutable_old_recording() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.old_recording_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.old_recording_ = p;
  }
  return _impl_.old_recording_;
}
inline ::TSP::Reference* CommandShowReplaceRecordingArchive::mutable_old_recording() {
  ::TSP::Reference* _msg = _internal_mutable_old_recording();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowReplaceRecordingArchive.old_recording)
  return _msg;
}
inline void CommandShowReplaceRecordingArchive::set_allocated_old_recording(::TSP::Reference* old_recording) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_recording_);
  }
  if (old_recording) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_recording));
    if (message_arena != submessage_arena) {
      old_recording = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_recording, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.old_recording_ = old_recording;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowReplaceRecordingArchive.old_recording)
}

// -------------------------------------------------------------------

// CommandShowSetValueArchive_PropertyValue

// optional bool bool_value = 1;
inline bool CommandShowSetValueArchive_PropertyValue::_internal_has_bool_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandShowSetValueArchive_PropertyValue::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void CommandShowSetValueArchive_PropertyValue::clear_bool_value() {
  _impl_.bool_value_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CommandShowSetValueArchive_PropertyValue::_internal_bool_value() const {
  return _impl_.bool_value_;
}
inline bool CommandShowSetValueArchive_PropertyValue::bool_value() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetValueArchive.PropertyValue.bool_value)
  return _internal_bool_value();
}
inline void CommandShowSetValueArchive_PropertyValue::_internal_set_bool_value(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.bool_value_ = value;
}
inline void CommandShowSetValueArchive_PropertyValue::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:KN.CommandShowSetValueArchive.PropertyValue.bool_value)
}

// optional double double_value = 2;
inline bool CommandShowSetValueArchive_PropertyValue::_internal_has_double_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandShowSetValueArchive_PropertyValue::has_double_value() const {
  return _internal_has_double_value();
}
inline void CommandShowSetValueArchive_PropertyValue::clear_double_value() {
  _impl_.double_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double CommandShowSetValueArchive_PropertyValue::_internal_double_value() const {
  return _impl_.double_value_;
}
inline double CommandShowSetValueArchive_PropertyValue::double_value() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetValueArchive.PropertyValue.double_value)
  return _internal_double_value();
}
inline void CommandShowSetValueArchive_PropertyValue::_internal_set_double_value(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.double_value_ = value;
}
inline void CommandShowSetValueArchive_PropertyValue::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:KN.CommandShowSetValueArchive.PropertyValue.double_value)
}

// optional .KN.ShowArchive.KNShowMode show_mode_value = 3;
inline bool CommandShowSetValueArchive_PropertyValue::_internal_has_show_mode_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandShowSetValueArchive_PropertyValue::has_show_mode_value() const {
  return _internal_has_show_mode_value();
}
inline void CommandShowSetValueArchive_PropertyValue::clear_show_mode_value() {
  _impl_.show_mode_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::KN::ShowArchive_KNShowMode CommandShowSetValueArchive_PropertyValue::_internal_show_mode_value() const {
  return static_cast< ::KN::ShowArchive_KNShowMode >(_impl_.show_mode_value_);
}
inline ::KN::ShowArchive_KNShowMode CommandShowSetValueArchive_PropertyValue::show_mode_value() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetValueArchive.PropertyValue.show_mode_value)
  return _internal_show_mode_value();
}
inline void CommandShowSetValueArchive_PropertyValue::_internal_set_show_mode_value(::KN::ShowArchive_KNShowMode value) {
  assert(::KN::ShowArchive_KNShowMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.show_mode_value_ = value;
}
inline void CommandShowSetValueArchive_PropertyValue::set_show_mode_value(::KN::ShowArchive_KNShowMode value) {
  _internal_set_show_mode_value(value);
  // @@protoc_insertion_point(field_set:KN.CommandShowSetValueArchive.PropertyValue.show_mode_value)
}

// optional .TSP.Size size_value = 4;
inline bool CommandShowSetValueArchive_PropertyValue::_internal_has_size_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.size_value_ != nullptr);
  return value;
}
inline bool CommandShowSetValueArchive_PropertyValue::has_size_value() const {
  return _internal_has_size_value();
}
inline const ::TSP::Size& CommandShowSetValueArchive_PropertyValue::_internal_size_value() const {
  const ::TSP::Size* p = _impl_.size_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& CommandShowSetValueArchive_PropertyValue::size_value() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetValueArchive.PropertyValue.size_value)
  return _internal_size_value();
}
inline void CommandShowSetValueArchive_PropertyValue::unsafe_arena_set_allocated_size_value(
    ::TSP::Size* size_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_value_);
  }
  _impl_.size_value_ = size_value;
  if (size_value) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowSetValueArchive.PropertyValue.size_value)
}
inline ::TSP::Size* CommandShowSetValueArchive_PropertyValue::release_size_value() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Size* temp = _impl_.size_value_;
  _impl_.size_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Size* CommandShowSetValueArchive_PropertyValue::unsafe_arena_release_size_value() {
  // @@protoc_insertion_point(field_release:KN.CommandShowSetValueArchive.PropertyValue.size_value)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Size* temp = _impl_.size_value_;
  _impl_.size_value_ = nullptr;
  return temp;
}
inline ::TSP::Size* CommandShowSetValueArchive_PropertyValue::_internal_mutable_size_value() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.size_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArenaForAllocation());
    _impl_.size_value_ = p;
  }
  return _impl_.size_value_;
}
inline ::TSP::Size* CommandShowSetValueArchive_PropertyValue::mutable_size_value() {
  ::TSP::Size* _msg = _internal_mutable_size_value();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowSetValueArchive.PropertyValue.size_value)
  return _msg;
}
inline void CommandShowSetValueArchive_PropertyValue::set_allocated_size_value(::TSP::Size* size_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_value_);
  }
  if (size_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_value));
    if (message_arena != submessage_arena) {
      size_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size_value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.size_value_ = size_value;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowSetValueArchive.PropertyValue.size_value)
}

// -------------------------------------------------------------------

// CommandShowSetValueArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandShowSetValueArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandShowSetValueArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandShowSetValueArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandShowSetValueArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetValueArchive.super)
  return _internal_super();
}
inline void CommandShowSetValueArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowSetValueArchive.super)
}
inline ::TSK::CommandArchive* CommandShowSetValueArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandShowSetValueArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandShowSetValueArchive.super)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandShowSetValueArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandShowSetValueArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowSetValueArchive.super)
  return _msg;
}
inline void CommandShowSetValueArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowSetValueArchive.super)
}

// required .TSP.Reference show = 2;
inline bool CommandShowSetValueArchive::_internal_has_show() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.show_ != nullptr);
  return value;
}
inline bool CommandShowSetValueArchive::has_show() const {
  return _internal_has_show();
}
inline const ::TSP::Reference& CommandShowSetValueArchive::_internal_show() const {
  const ::TSP::Reference* p = _impl_.show_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowSetValueArchive::show() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetValueArchive.show)
  return _internal_show();
}
inline void CommandShowSetValueArchive::unsafe_arena_set_allocated_show(
    ::TSP::Reference* show) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.show_);
  }
  _impl_.show_ = show;
  if (show) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowSetValueArchive.show)
}
inline ::TSP::Reference* CommandShowSetValueArchive::release_show() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.show_;
  _impl_.show_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowSetValueArchive::unsafe_arena_release_show() {
  // @@protoc_insertion_point(field_release:KN.CommandShowSetValueArchive.show)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.show_;
  _impl_.show_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowSetValueArchive::_internal_mutable_show() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.show_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.show_ = p;
  }
  return _impl_.show_;
}
inline ::TSP::Reference* CommandShowSetValueArchive::mutable_show() {
  ::TSP::Reference* _msg = _internal_mutable_show();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowSetValueArchive.show)
  return _msg;
}
inline void CommandShowSetValueArchive::set_allocated_show(::TSP::Reference* show) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.show_);
  }
  if (show) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show));
    if (message_arena != submessage_arena) {
      show = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.show_ = show;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowSetValueArchive.show)
}

// required string property = 3;
inline bool CommandShowSetValueArchive::_internal_has_property() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandShowSetValueArchive::has_property() const {
  return _internal_has_property();
}
inline void CommandShowSetValueArchive::clear_property() {
  _impl_.property_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandShowSetValueArchive::property() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetValueArchive.property)
  return _internal_property();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandShowSetValueArchive::set_property(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.property_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.CommandShowSetValueArchive.property)
}
inline std::string* CommandShowSetValueArchive::mutable_property() {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowSetValueArchive.property)
  return _s;
}
inline const std::string& CommandShowSetValueArchive::_internal_property() const {
  return _impl_.property_.Get();
}
inline void CommandShowSetValueArchive::_internal_set_property(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.property_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandShowSetValueArchive::_internal_mutable_property() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.property_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandShowSetValueArchive::release_property() {
  // @@protoc_insertion_point(field_release:KN.CommandShowSetValueArchive.property)
  if (!_internal_has_property()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.property_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.property_.IsDefault()) {
    _impl_.property_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandShowSetValueArchive::set_allocated_property(std::string* property) {
  if (property != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.property_.SetAllocated(property, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.property_.IsDefault()) {
    _impl_.property_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowSetValueArchive.property)
}

// required .KN.CommandShowSetValueArchive.PropertyValue old_value = 4;
inline bool CommandShowSetValueArchive::_internal_has_old_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_value_ != nullptr);
  return value;
}
inline bool CommandShowSetValueArchive::has_old_value() const {
  return _internal_has_old_value();
}
inline void CommandShowSetValueArchive::clear_old_value() {
  if (_impl_.old_value_ != nullptr) _impl_.old_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::KN::CommandShowSetValueArchive_PropertyValue& CommandShowSetValueArchive::_internal_old_value() const {
  const ::KN::CommandShowSetValueArchive_PropertyValue* p = _impl_.old_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::CommandShowSetValueArchive_PropertyValue&>(
      ::KN::_CommandShowSetValueArchive_PropertyValue_default_instance_);
}
inline const ::KN::CommandShowSetValueArchive_PropertyValue& CommandShowSetValueArchive::old_value() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetValueArchive.old_value)
  return _internal_old_value();
}
inline void CommandShowSetValueArchive::unsafe_arena_set_allocated_old_value(
    ::KN::CommandShowSetValueArchive_PropertyValue* old_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_value_);
  }
  _impl_.old_value_ = old_value;
  if (old_value) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowSetValueArchive.old_value)
}
inline ::KN::CommandShowSetValueArchive_PropertyValue* CommandShowSetValueArchive::release_old_value() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::KN::CommandShowSetValueArchive_PropertyValue* temp = _impl_.old_value_;
  _impl_.old_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::CommandShowSetValueArchive_PropertyValue* CommandShowSetValueArchive::unsafe_arena_release_old_value() {
  // @@protoc_insertion_point(field_release:KN.CommandShowSetValueArchive.old_value)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::KN::CommandShowSetValueArchive_PropertyValue* temp = _impl_.old_value_;
  _impl_.old_value_ = nullptr;
  return temp;
}
inline ::KN::CommandShowSetValueArchive_PropertyValue* CommandShowSetValueArchive::_internal_mutable_old_value() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.old_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::CommandShowSetValueArchive_PropertyValue>(GetArenaForAllocation());
    _impl_.old_value_ = p;
  }
  return _impl_.old_value_;
}
inline ::KN::CommandShowSetValueArchive_PropertyValue* CommandShowSetValueArchive::mutable_old_value() {
  ::KN::CommandShowSetValueArchive_PropertyValue* _msg = _internal_mutable_old_value();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowSetValueArchive.old_value)
  return _msg;
}
inline void CommandShowSetValueArchive::set_allocated_old_value(::KN::CommandShowSetValueArchive_PropertyValue* old_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.old_value_;
  }
  if (old_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(old_value);
    if (message_arena != submessage_arena) {
      old_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.old_value_ = old_value;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowSetValueArchive.old_value)
}

// required .KN.CommandShowSetValueArchive.PropertyValue new_value = 5;
inline bool CommandShowSetValueArchive::_internal_has_new_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_value_ != nullptr);
  return value;
}
inline bool CommandShowSetValueArchive::has_new_value() const {
  return _internal_has_new_value();
}
inline void CommandShowSetValueArchive::clear_new_value() {
  if (_impl_.new_value_ != nullptr) _impl_.new_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::KN::CommandShowSetValueArchive_PropertyValue& CommandShowSetValueArchive::_internal_new_value() const {
  const ::KN::CommandShowSetValueArchive_PropertyValue* p = _impl_.new_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::CommandShowSetValueArchive_PropertyValue&>(
      ::KN::_CommandShowSetValueArchive_PropertyValue_default_instance_);
}
inline const ::KN::CommandShowSetValueArchive_PropertyValue& CommandShowSetValueArchive::new_value() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetValueArchive.new_value)
  return _internal_new_value();
}
inline void CommandShowSetValueArchive::unsafe_arena_set_allocated_new_value(
    ::KN::CommandShowSetValueArchive_PropertyValue* new_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_value_);
  }
  _impl_.new_value_ = new_value;
  if (new_value) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowSetValueArchive.new_value)
}
inline ::KN::CommandShowSetValueArchive_PropertyValue* CommandShowSetValueArchive::release_new_value() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::KN::CommandShowSetValueArchive_PropertyValue* temp = _impl_.new_value_;
  _impl_.new_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::CommandShowSetValueArchive_PropertyValue* CommandShowSetValueArchive::unsafe_arena_release_new_value() {
  // @@protoc_insertion_point(field_release:KN.CommandShowSetValueArchive.new_value)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::KN::CommandShowSetValueArchive_PropertyValue* temp = _impl_.new_value_;
  _impl_.new_value_ = nullptr;
  return temp;
}
inline ::KN::CommandShowSetValueArchive_PropertyValue* CommandShowSetValueArchive::_internal_mutable_new_value() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.new_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::CommandShowSetValueArchive_PropertyValue>(GetArenaForAllocation());
    _impl_.new_value_ = p;
  }
  return _impl_.new_value_;
}
inline ::KN::CommandShowSetValueArchive_PropertyValue* CommandShowSetValueArchive::mutable_new_value() {
  ::KN::CommandShowSetValueArchive_PropertyValue* _msg = _internal_mutable_new_value();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowSetValueArchive.new_value)
  return _msg;
}
inline void CommandShowSetValueArchive::set_allocated_new_value(::KN::CommandShowSetValueArchive_PropertyValue* new_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.new_value_;
  }
  if (new_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(new_value);
    if (message_arena != submessage_arena) {
      new_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.new_value_ = new_value;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowSetValueArchive.new_value)
}

// -------------------------------------------------------------------

// CommandShowInsertSlideArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandShowInsertSlideArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandShowInsertSlideArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandShowInsertSlideArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandShowInsertSlideArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowInsertSlideArchive.super)
  return _internal_super();
}
inline void CommandShowInsertSlideArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowInsertSlideArchive.super)
}
inline ::TSK::CommandArchive* CommandShowInsertSlideArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandShowInsertSlideArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandShowInsertSlideArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandShowInsertSlideArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandShowInsertSlideArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowInsertSlideArchive.super)
  return _msg;
}
inline void CommandShowInsertSlideArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowInsertSlideArchive.super)
}

// required .TSP.Reference show = 2;
inline bool CommandShowInsertSlideArchive::_internal_has_show() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.show_ != nullptr);
  return value;
}
inline bool CommandShowInsertSlideArchive::has_show() const {
  return _internal_has_show();
}
inline const ::TSP::Reference& CommandShowInsertSlideArchive::_internal_show() const {
  const ::TSP::Reference* p = _impl_.show_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowInsertSlideArchive::show() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowInsertSlideArchive.show)
  return _internal_show();
}
inline void CommandShowInsertSlideArchive::unsafe_arena_set_allocated_show(
    ::TSP::Reference* show) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.show_);
  }
  _impl_.show_ = show;
  if (show) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowInsertSlideArchive.show)
}
inline ::TSP::Reference* CommandShowInsertSlideArchive::release_show() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.show_;
  _impl_.show_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowInsertSlideArchive::unsafe_arena_release_show() {
  // @@protoc_insertion_point(field_release:KN.CommandShowInsertSlideArchive.show)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.show_;
  _impl_.show_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowInsertSlideArchive::_internal_mutable_show() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.show_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.show_ = p;
  }
  return _impl_.show_;
}
inline ::TSP::Reference* CommandShowInsertSlideArchive::mutable_show() {
  ::TSP::Reference* _msg = _internal_mutable_show();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowInsertSlideArchive.show)
  return _msg;
}
inline void CommandShowInsertSlideArchive::set_allocated_show(::TSP::Reference* show) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.show_);
  }
  if (show) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show));
    if (message_arena != submessage_arena) {
      show = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.show_ = show;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowInsertSlideArchive.show)
}

// required .TSP.Reference slideNode = 3;
inline bool CommandShowInsertSlideArchive::_internal_has_slidenode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slidenode_ != nullptr);
  return value;
}
inline bool CommandShowInsertSlideArchive::has_slidenode() const {
  return _internal_has_slidenode();
}
inline const ::TSP::Reference& CommandShowInsertSlideArchive::_internal_slidenode() const {
  const ::TSP::Reference* p = _impl_.slidenode_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowInsertSlideArchive::slidenode() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowInsertSlideArchive.slideNode)
  return _internal_slidenode();
}
inline void CommandShowInsertSlideArchive::unsafe_arena_set_allocated_slidenode(
    ::TSP::Reference* slidenode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidenode_);
  }
  _impl_.slidenode_ = slidenode;
  if (slidenode) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowInsertSlideArchive.slideNode)
}
inline ::TSP::Reference* CommandShowInsertSlideArchive::release_slidenode() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.slidenode_;
  _impl_.slidenode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowInsertSlideArchive::unsafe_arena_release_slidenode() {
  // @@protoc_insertion_point(field_release:KN.CommandShowInsertSlideArchive.slideNode)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.slidenode_;
  _impl_.slidenode_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowInsertSlideArchive::_internal_mutable_slidenode() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.slidenode_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.slidenode_ = p;
  }
  return _impl_.slidenode_;
}
inline ::TSP::Reference* CommandShowInsertSlideArchive::mutable_slidenode() {
  ::TSP::Reference* _msg = _internal_mutable_slidenode();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowInsertSlideArchive.slideNode)
  return _msg;
}
inline void CommandShowInsertSlideArchive::set_allocated_slidenode(::TSP::Reference* slidenode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidenode_);
  }
  if (slidenode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidenode));
    if (message_arena != submessage_arena) {
      slidenode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slidenode, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.slidenode_ = slidenode;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowInsertSlideArchive.slideNode)
}

// required uint32 childIndex = 4;
inline bool CommandShowInsertSlideArchive::_internal_has_childindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandShowInsertSlideArchive::has_childindex() const {
  return _internal_has_childindex();
}
inline void CommandShowInsertSlideArchive::clear_childindex() {
  _impl_.childindex_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CommandShowInsertSlideArchive::_internal_childindex() const {
  return _impl_.childindex_;
}
inline uint32_t CommandShowInsertSlideArchive::childindex() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowInsertSlideArchive.childIndex)
  return _internal_childindex();
}
inline void CommandShowInsertSlideArchive::_internal_set_childindex(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.childindex_ = value;
}
inline void CommandShowInsertSlideArchive::set_childindex(uint32_t value) {
  _internal_set_childindex(value);
  // @@protoc_insertion_point(field_set:KN.CommandShowInsertSlideArchive.childIndex)
}

// required .TSP.Reference parentSlideNode = 5;
inline bool CommandShowInsertSlideArchive::_internal_has_parentslidenode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.parentslidenode_ != nullptr);
  return value;
}
inline bool CommandShowInsertSlideArchive::has_parentslidenode() const {
  return _internal_has_parentslidenode();
}
inline const ::TSP::Reference& CommandShowInsertSlideArchive::_internal_parentslidenode() const {
  const ::TSP::Reference* p = _impl_.parentslidenode_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowInsertSlideArchive::parentslidenode() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowInsertSlideArchive.parentSlideNode)
  return _internal_parentslidenode();
}
inline void CommandShowInsertSlideArchive::unsafe_arena_set_allocated_parentslidenode(
    ::TSP::Reference* parentslidenode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parentslidenode_);
  }
  _impl_.parentslidenode_ = parentslidenode;
  if (parentslidenode) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowInsertSlideArchive.parentSlideNode)
}
inline ::TSP::Reference* CommandShowInsertSlideArchive::release_parentslidenode() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.parentslidenode_;
  _impl_.parentslidenode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowInsertSlideArchive::unsafe_arena_release_parentslidenode() {
  // @@protoc_insertion_point(field_release:KN.CommandShowInsertSlideArchive.parentSlideNode)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.parentslidenode_;
  _impl_.parentslidenode_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowInsertSlideArchive::_internal_mutable_parentslidenode() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.parentslidenode_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.parentslidenode_ = p;
  }
  return _impl_.parentslidenode_;
}
inline ::TSP::Reference* CommandShowInsertSlideArchive::mutable_parentslidenode() {
  ::TSP::Reference* _msg = _internal_mutable_parentslidenode();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowInsertSlideArchive.parentSlideNode)
  return _msg;
}
inline void CommandShowInsertSlideArchive::set_allocated_parentslidenode(::TSP::Reference* parentslidenode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parentslidenode_);
  }
  if (parentslidenode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parentslidenode));
    if (message_arena != submessage_arena) {
      parentslidenode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parentslidenode, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.parentslidenode_ = parentslidenode;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowInsertSlideArchive.parentSlideNode)
}

// optional .KN.CommandShowInsertSlideArchive.Kind kind = 6 [default = kKindInsertSlide];
inline bool CommandShowInsertSlideArchive::_internal_has_kind() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandShowInsertSlideArchive::has_kind() const {
  return _internal_has_kind();
}
inline void CommandShowInsertSlideArchive::clear_kind() {
  _impl_.kind_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::KN::CommandShowInsertSlideArchive_Kind CommandShowInsertSlideArchive::_internal_kind() const {
  return static_cast< ::KN::CommandShowInsertSlideArchive_Kind >(_impl_.kind_);
}
inline ::KN::CommandShowInsertSlideArchive_Kind CommandShowInsertSlideArchive::kind() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowInsertSlideArchive.kind)
  return _internal_kind();
}
inline void CommandShowInsertSlideArchive::_internal_set_kind(::KN::CommandShowInsertSlideArchive_Kind value) {
  assert(::KN::CommandShowInsertSlideArchive_Kind_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.kind_ = value;
}
inline void CommandShowInsertSlideArchive::set_kind(::KN::CommandShowInsertSlideArchive_Kind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:KN.CommandShowInsertSlideArchive.kind)
}

// -------------------------------------------------------------------

// CommandShowMoveSlideArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandShowMoveSlideArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandShowMoveSlideArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandShowMoveSlideArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandShowMoveSlideArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowMoveSlideArchive.super)
  return _internal_super();
}
inline void CommandShowMoveSlideArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowMoveSlideArchive.super)
}
inline ::TSK::CommandArchive* CommandShowMoveSlideArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandShowMoveSlideArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandShowMoveSlideArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandShowMoveSlideArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandShowMoveSlideArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowMoveSlideArchive.super)
  return _msg;
}
inline void CommandShowMoveSlideArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowMoveSlideArchive.super)
}

// required .TSP.Reference show = 2;
inline bool CommandShowMoveSlideArchive::_internal_has_show() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.show_ != nullptr);
  return value;
}
inline bool CommandShowMoveSlideArchive::has_show() const {
  return _internal_has_show();
}
inline const ::TSP::Reference& CommandShowMoveSlideArchive::_internal_show() const {
  const ::TSP::Reference* p = _impl_.show_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowMoveSlideArchive::show() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowMoveSlideArchive.show)
  return _internal_show();
}
inline void CommandShowMoveSlideArchive::unsafe_arena_set_allocated_show(
    ::TSP::Reference* show) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.show_);
  }
  _impl_.show_ = show;
  if (show) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowMoveSlideArchive.show)
}
inline ::TSP::Reference* CommandShowMoveSlideArchive::release_show() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.show_;
  _impl_.show_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowMoveSlideArchive::unsafe_arena_release_show() {
  // @@protoc_insertion_point(field_release:KN.CommandShowMoveSlideArchive.show)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.show_;
  _impl_.show_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowMoveSlideArchive::_internal_mutable_show() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.show_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.show_ = p;
  }
  return _impl_.show_;
}
inline ::TSP::Reference* CommandShowMoveSlideArchive::mutable_show() {
  ::TSP::Reference* _msg = _internal_mutable_show();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowMoveSlideArchive.show)
  return _msg;
}
inline void CommandShowMoveSlideArchive::set_allocated_show(::TSP::Reference* show) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.show_);
  }
  if (show) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show));
    if (message_arena != submessage_arena) {
      show = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.show_ = show;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowMoveSlideArchive.show)
}

// required .TSP.Reference slideNode = 3;
inline bool CommandShowMoveSlideArchive::_internal_has_slidenode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slidenode_ != nullptr);
  return value;
}
inline bool CommandShowMoveSlideArchive::has_slidenode() const {
  return _internal_has_slidenode();
}
inline const ::TSP::Reference& CommandShowMoveSlideArchive::_internal_slidenode() const {
  const ::TSP::Reference* p = _impl_.slidenode_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowMoveSlideArchive::slidenode() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowMoveSlideArchive.slideNode)
  return _internal_slidenode();
}
inline void CommandShowMoveSlideArchive::unsafe_arena_set_allocated_slidenode(
    ::TSP::Reference* slidenode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidenode_);
  }
  _impl_.slidenode_ = slidenode;
  if (slidenode) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowMoveSlideArchive.slideNode)
}
inline ::TSP::Reference* CommandShowMoveSlideArchive::release_slidenode() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.slidenode_;
  _impl_.slidenode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowMoveSlideArchive::unsafe_arena_release_slidenode() {
  // @@protoc_insertion_point(field_release:KN.CommandShowMoveSlideArchive.slideNode)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.slidenode_;
  _impl_.slidenode_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowMoveSlideArchive::_internal_mutable_slidenode() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.slidenode_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.slidenode_ = p;
  }
  return _impl_.slidenode_;
}
inline ::TSP::Reference* CommandShowMoveSlideArchive::mutable_slidenode() {
  ::TSP::Reference* _msg = _internal_mutable_slidenode();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowMoveSlideArchive.slideNode)
  return _msg;
}
inline void CommandShowMoveSlideArchive::set_allocated_slidenode(::TSP::Reference* slidenode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidenode_);
  }
  if (slidenode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidenode));
    if (message_arena != submessage_arena) {
      slidenode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slidenode, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.slidenode_ = slidenode;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowMoveSlideArchive.slideNode)
}

// repeated .TSP.Reference parentSlideNodes = 4;
inline int CommandShowMoveSlideArchive::_internal_parentslidenodes_size() const {
  return _impl_.parentslidenodes_.size();
}
inline int CommandShowMoveSlideArchive::parentslidenodes_size() const {
  return _internal_parentslidenodes_size();
}
inline ::TSP::Reference* CommandShowMoveSlideArchive::mutable_parentslidenodes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandShowMoveSlideArchive.parentSlideNodes)
  return _impl_.parentslidenodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandShowMoveSlideArchive::mutable_parentslidenodes() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowMoveSlideArchive.parentSlideNodes)
  return &_impl_.parentslidenodes_;
}
inline const ::TSP::Reference& CommandShowMoveSlideArchive::_internal_parentslidenodes(int index) const {
  return _impl_.parentslidenodes_.Get(index);
}
inline const ::TSP::Reference& CommandShowMoveSlideArchive::parentslidenodes(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowMoveSlideArchive.parentSlideNodes)
  return _internal_parentslidenodes(index);
}
inline ::TSP::Reference* CommandShowMoveSlideArchive::_internal_add_parentslidenodes() {
  return _impl_.parentslidenodes_.Add();
}
inline ::TSP::Reference* CommandShowMoveSlideArchive::add_parentslidenodes() {
  ::TSP::Reference* _add = _internal_add_parentslidenodes();
  // @@protoc_insertion_point(field_add:KN.CommandShowMoveSlideArchive.parentSlideNodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandShowMoveSlideArchive::parentslidenodes() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowMoveSlideArchive.parentSlideNodes)
  return _impl_.parentslidenodes_;
}

// repeated uint32 childIndices = 5;
inline int CommandShowMoveSlideArchive::_internal_childindices_size() const {
  return _impl_.childindices_.size();
}
inline int CommandShowMoveSlideArchive::childindices_size() const {
  return _internal_childindices_size();
}
inline void CommandShowMoveSlideArchive::clear_childindices() {
  _impl_.childindices_.Clear();
}
inline uint32_t CommandShowMoveSlideArchive::_internal_childindices(int index) const {
  return _impl_.childindices_.Get(index);
}
inline uint32_t CommandShowMoveSlideArchive::childindices(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowMoveSlideArchive.childIndices)
  return _internal_childindices(index);
}
inline void CommandShowMoveSlideArchive::set_childindices(int index, uint32_t value) {
  _impl_.childindices_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandShowMoveSlideArchive.childIndices)
}
inline void CommandShowMoveSlideArchive::_internal_add_childindices(uint32_t value) {
  _impl_.childindices_.Add(value);
}
inline void CommandShowMoveSlideArchive::add_childindices(uint32_t value) {
  _internal_add_childindices(value);
  // @@protoc_insertion_point(field_add:KN.CommandShowMoveSlideArchive.childIndices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CommandShowMoveSlideArchive::_internal_childindices() const {
  return _impl_.childindices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CommandShowMoveSlideArchive::childindices() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowMoveSlideArchive.childIndices)
  return _internal_childindices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CommandShowMoveSlideArchive::_internal_mutable_childindices() {
  return &_impl_.childindices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CommandShowMoveSlideArchive::mutable_childindices() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowMoveSlideArchive.childIndices)
  return _internal_mutable_childindices();
}

// -------------------------------------------------------------------

// CommandShowRemoveSlideArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandShowRemoveSlideArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandShowRemoveSlideArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandShowRemoveSlideArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandShowRemoveSlideArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowRemoveSlideArchive.super)
  return _internal_super();
}
inline void CommandShowRemoveSlideArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowRemoveSlideArchive.super)
}
inline ::TSK::CommandArchive* CommandShowRemoveSlideArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandShowRemoveSlideArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandShowRemoveSlideArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandShowRemoveSlideArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandShowRemoveSlideArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowRemoveSlideArchive.super)
  return _msg;
}
inline void CommandShowRemoveSlideArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowRemoveSlideArchive.super)
}

// required .TSP.Reference show = 2;
inline bool CommandShowRemoveSlideArchive::_internal_has_show() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.show_ != nullptr);
  return value;
}
inline bool CommandShowRemoveSlideArchive::has_show() const {
  return _internal_has_show();
}
inline const ::TSP::Reference& CommandShowRemoveSlideArchive::_internal_show() const {
  const ::TSP::Reference* p = _impl_.show_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowRemoveSlideArchive::show() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowRemoveSlideArchive.show)
  return _internal_show();
}
inline void CommandShowRemoveSlideArchive::unsafe_arena_set_allocated_show(
    ::TSP::Reference* show) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.show_);
  }
  _impl_.show_ = show;
  if (show) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowRemoveSlideArchive.show)
}
inline ::TSP::Reference* CommandShowRemoveSlideArchive::release_show() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.show_;
  _impl_.show_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowRemoveSlideArchive::unsafe_arena_release_show() {
  // @@protoc_insertion_point(field_release:KN.CommandShowRemoveSlideArchive.show)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.show_;
  _impl_.show_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowRemoveSlideArchive::_internal_mutable_show() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.show_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.show_ = p;
  }
  return _impl_.show_;
}
inline ::TSP::Reference* CommandShowRemoveSlideArchive::mutable_show() {
  ::TSP::Reference* _msg = _internal_mutable_show();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowRemoveSlideArchive.show)
  return _msg;
}
inline void CommandShowRemoveSlideArchive::set_allocated_show(::TSP::Reference* show) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.show_);
  }
  if (show) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show));
    if (message_arena != submessage_arena) {
      show = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.show_ = show;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowRemoveSlideArchive.show)
}

// required .TSP.Reference slideNode = 3;
inline bool CommandShowRemoveSlideArchive::_internal_has_slidenode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slidenode_ != nullptr);
  return value;
}
inline bool CommandShowRemoveSlideArchive::has_slidenode() const {
  return _internal_has_slidenode();
}
inline const ::TSP::Reference& CommandShowRemoveSlideArchive::_internal_slidenode() const {
  const ::TSP::Reference* p = _impl_.slidenode_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowRemoveSlideArchive::slidenode() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowRemoveSlideArchive.slideNode)
  return _internal_slidenode();
}
inline void CommandShowRemoveSlideArchive::unsafe_arena_set_allocated_slidenode(
    ::TSP::Reference* slidenode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidenode_);
  }
  _impl_.slidenode_ = slidenode;
  if (slidenode) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowRemoveSlideArchive.slideNode)
}
inline ::TSP::Reference* CommandShowRemoveSlideArchive::release_slidenode() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.slidenode_;
  _impl_.slidenode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowRemoveSlideArchive::unsafe_arena_release_slidenode() {
  // @@protoc_insertion_point(field_release:KN.CommandShowRemoveSlideArchive.slideNode)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.slidenode_;
  _impl_.slidenode_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowRemoveSlideArchive::_internal_mutable_slidenode() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.slidenode_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.slidenode_ = p;
  }
  return _impl_.slidenode_;
}
inline ::TSP::Reference* CommandShowRemoveSlideArchive::mutable_slidenode() {
  ::TSP::Reference* _msg = _internal_mutable_slidenode();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowRemoveSlideArchive.slideNode)
  return _msg;
}
inline void CommandShowRemoveSlideArchive::set_allocated_slidenode(::TSP::Reference* slidenode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidenode_);
  }
  if (slidenode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidenode));
    if (message_arena != submessage_arena) {
      slidenode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slidenode, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.slidenode_ = slidenode;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowRemoveSlideArchive.slideNode)
}

// required .TSP.Reference parentSlideNode = 4;
inline bool CommandShowRemoveSlideArchive::_internal_has_parentslidenode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.parentslidenode_ != nullptr);
  return value;
}
inline bool CommandShowRemoveSlideArchive::has_parentslidenode() const {
  return _internal_has_parentslidenode();
}
inline const ::TSP::Reference& CommandShowRemoveSlideArchive::_internal_parentslidenode() const {
  const ::TSP::Reference* p = _impl_.parentslidenode_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowRemoveSlideArchive::parentslidenode() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowRemoveSlideArchive.parentSlideNode)
  return _internal_parentslidenode();
}
inline void CommandShowRemoveSlideArchive::unsafe_arena_set_allocated_parentslidenode(
    ::TSP::Reference* parentslidenode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parentslidenode_);
  }
  _impl_.parentslidenode_ = parentslidenode;
  if (parentslidenode) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowRemoveSlideArchive.parentSlideNode)
}
inline ::TSP::Reference* CommandShowRemoveSlideArchive::release_parentslidenode() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.parentslidenode_;
  _impl_.parentslidenode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowRemoveSlideArchive::unsafe_arena_release_parentslidenode() {
  // @@protoc_insertion_point(field_release:KN.CommandShowRemoveSlideArchive.parentSlideNode)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.parentslidenode_;
  _impl_.parentslidenode_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowRemoveSlideArchive::_internal_mutable_parentslidenode() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.parentslidenode_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.parentslidenode_ = p;
  }
  return _impl_.parentslidenode_;
}
inline ::TSP::Reference* CommandShowRemoveSlideArchive::mutable_parentslidenode() {
  ::TSP::Reference* _msg = _internal_mutable_parentslidenode();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowRemoveSlideArchive.parentSlideNode)
  return _msg;
}
inline void CommandShowRemoveSlideArchive::set_allocated_parentslidenode(::TSP::Reference* parentslidenode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parentslidenode_);
  }
  if (parentslidenode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parentslidenode));
    if (message_arena != submessage_arena) {
      parentslidenode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parentslidenode, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.parentslidenode_ = parentslidenode;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowRemoveSlideArchive.parentSlideNode)
}

// required uint32 childIndex = 5;
inline bool CommandShowRemoveSlideArchive::_internal_has_childindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandShowRemoveSlideArchive::has_childindex() const {
  return _internal_has_childindex();
}
inline void CommandShowRemoveSlideArchive::clear_childindex() {
  _impl_.childindex_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CommandShowRemoveSlideArchive::_internal_childindex() const {
  return _impl_.childindex_;
}
inline uint32_t CommandShowRemoveSlideArchive::childindex() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowRemoveSlideArchive.childIndex)
  return _internal_childindex();
}
inline void CommandShowRemoveSlideArchive::_internal_set_childindex(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.childindex_ = value;
}
inline void CommandShowRemoveSlideArchive::set_childindex(uint32_t value) {
  _internal_set_childindex(value);
  // @@protoc_insertion_point(field_set:KN.CommandShowRemoveSlideArchive.childIndex)
}

// -------------------------------------------------------------------

// CommandShowChangeThemeArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandShowChangeThemeArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandShowChangeThemeArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandShowChangeThemeArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandShowChangeThemeArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowChangeThemeArchive.super)
  return _internal_super();
}
inline void CommandShowChangeThemeArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowChangeThemeArchive.super)
}
inline ::TSK::CommandArchive* CommandShowChangeThemeArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandShowChangeThemeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandShowChangeThemeArchive.super)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandShowChangeThemeArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandShowChangeThemeArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowChangeThemeArchive.super)
  return _msg;
}
inline void CommandShowChangeThemeArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowChangeThemeArchive.super)
}

// required .TSP.Reference show = 2;
inline bool CommandShowChangeThemeArchive::_internal_has_show() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.show_ != nullptr);
  return value;
}
inline bool CommandShowChangeThemeArchive::has_show() const {
  return _internal_has_show();
}
inline const ::TSP::Reference& CommandShowChangeThemeArchive::_internal_show() const {
  const ::TSP::Reference* p = _impl_.show_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowChangeThemeArchive::show() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowChangeThemeArchive.show)
  return _internal_show();
}
inline void CommandShowChangeThemeArchive::unsafe_arena_set_allocated_show(
    ::TSP::Reference* show) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.show_);
  }
  _impl_.show_ = show;
  if (show) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowChangeThemeArchive.show)
}
inline ::TSP::Reference* CommandShowChangeThemeArchive::release_show() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.show_;
  _impl_.show_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowChangeThemeArchive::unsafe_arena_release_show() {
  // @@protoc_insertion_point(field_release:KN.CommandShowChangeThemeArchive.show)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.show_;
  _impl_.show_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowChangeThemeArchive::_internal_mutable_show() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.show_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.show_ = p;
  }
  return _impl_.show_;
}
inline ::TSP::Reference* CommandShowChangeThemeArchive::mutable_show() {
  ::TSP::Reference* _msg = _internal_mutable_show();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowChangeThemeArchive.show)
  return _msg;
}
inline void CommandShowChangeThemeArchive::set_allocated_show(::TSP::Reference* show) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.show_);
  }
  if (show) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show));
    if (message_arena != submessage_arena) {
      show = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.show_ = show;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowChangeThemeArchive.show)
}

// required .TSP.Reference theme = 3;
inline bool CommandShowChangeThemeArchive::_internal_has_theme() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.theme_ != nullptr);
  return value;
}
inline bool CommandShowChangeThemeArchive::has_theme() const {
  return _internal_has_theme();
}
inline const ::TSP::Reference& CommandShowChangeThemeArchive::_internal_theme() const {
  const ::TSP::Reference* p = _impl_.theme_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowChangeThemeArchive::theme() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowChangeThemeArchive.theme)
  return _internal_theme();
}
inline void CommandShowChangeThemeArchive::unsafe_arena_set_allocated_theme(
    ::TSP::Reference* theme) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.theme_);
  }
  _impl_.theme_ = theme;
  if (theme) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowChangeThemeArchive.theme)
}
inline ::TSP::Reference* CommandShowChangeThemeArchive::release_theme() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.theme_;
  _impl_.theme_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowChangeThemeArchive::unsafe_arena_release_theme() {
  // @@protoc_insertion_point(field_release:KN.CommandShowChangeThemeArchive.theme)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.theme_;
  _impl_.theme_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowChangeThemeArchive::_internal_mutable_theme() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.theme_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.theme_ = p;
  }
  return _impl_.theme_;
}
inline ::TSP::Reference* CommandShowChangeThemeArchive::mutable_theme() {
  ::TSP::Reference* _msg = _internal_mutable_theme();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowChangeThemeArchive.theme)
  return _msg;
}
inline void CommandShowChangeThemeArchive::set_allocated_theme(::TSP::Reference* theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.theme_);
  }
  if (theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme));
    if (message_arena != submessage_arena) {
      theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, theme, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.theme_ = theme;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowChangeThemeArchive.theme)
}

// required .TSP.Reference old_theme = 4;
inline bool CommandShowChangeThemeArchive::_internal_has_old_theme() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_theme_ != nullptr);
  return value;
}
inline bool CommandShowChangeThemeArchive::has_old_theme() const {
  return _internal_has_old_theme();
}
inline const ::TSP::Reference& CommandShowChangeThemeArchive::_internal_old_theme() const {
  const ::TSP::Reference* p = _impl_.old_theme_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowChangeThemeArchive::old_theme() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowChangeThemeArchive.old_theme)
  return _internal_old_theme();
}
inline void CommandShowChangeThemeArchive::unsafe_arena_set_allocated_old_theme(
    ::TSP::Reference* old_theme) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_theme_);
  }
  _impl_.old_theme_ = old_theme;
  if (old_theme) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowChangeThemeArchive.old_theme)
}
inline ::TSP::Reference* CommandShowChangeThemeArchive::release_old_theme() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.old_theme_;
  _impl_.old_theme_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowChangeThemeArchive::unsafe_arena_release_old_theme() {
  // @@protoc_insertion_point(field_release:KN.CommandShowChangeThemeArchive.old_theme)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.old_theme_;
  _impl_.old_theme_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowChangeThemeArchive::_internal_mutable_old_theme() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.old_theme_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.old_theme_ = p;
  }
  return _impl_.old_theme_;
}
inline ::TSP::Reference* CommandShowChangeThemeArchive::mutable_old_theme() {
  ::TSP::Reference* _msg = _internal_mutable_old_theme();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowChangeThemeArchive.old_theme)
  return _msg;
}
inline void CommandShowChangeThemeArchive::set_allocated_old_theme(::TSP::Reference* old_theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_theme_);
  }
  if (old_theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_theme));
    if (message_arena != submessage_arena) {
      old_theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_theme, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.old_theme_ = old_theme;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowChangeThemeArchive.old_theme)
}

// optional string template_identifier = 5;
inline bool CommandShowChangeThemeArchive::_internal_has_template_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandShowChangeThemeArchive::has_template_identifier() const {
  return _internal_has_template_identifier();
}
inline void CommandShowChangeThemeArchive::clear_template_identifier() {
  _impl_.template_identifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandShowChangeThemeArchive::template_identifier() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowChangeThemeArchive.template_identifier)
  return _internal_template_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandShowChangeThemeArchive::set_template_identifier(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.template_identifier_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.CommandShowChangeThemeArchive.template_identifier)
}
inline std::string* CommandShowChangeThemeArchive::mutable_template_identifier() {
  std::string* _s = _internal_mutable_template_identifier();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowChangeThemeArchive.template_identifier)
  return _s;
}
inline const std::string& CommandShowChangeThemeArchive::_internal_template_identifier() const {
  return _impl_.template_identifier_.Get();
}
inline void CommandShowChangeThemeArchive::_internal_set_template_identifier(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.template_identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandShowChangeThemeArchive::_internal_mutable_template_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.template_identifier_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandShowChangeThemeArchive::release_template_identifier() {
  // @@protoc_insertion_point(field_release:KN.CommandShowChangeThemeArchive.template_identifier)
  if (!_internal_has_template_identifier()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.template_identifier_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.template_identifier_.IsDefault()) {
    _impl_.template_identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandShowChangeThemeArchive::set_allocated_template_identifier(std::string* template_identifier) {
  if (template_identifier != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.template_identifier_.SetAllocated(template_identifier, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.template_identifier_.IsDefault()) {
    _impl_.template_identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowChangeThemeArchive.template_identifier)
}

// optional string old_template_identifier = 6;
inline bool CommandShowChangeThemeArchive::_internal_has_old_template_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandShowChangeThemeArchive::has_old_template_identifier() const {
  return _internal_has_old_template_identifier();
}
inline void CommandShowChangeThemeArchive::clear_old_template_identifier() {
  _impl_.old_template_identifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CommandShowChangeThemeArchive::old_template_identifier() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowChangeThemeArchive.old_template_identifier)
  return _internal_old_template_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandShowChangeThemeArchive::set_old_template_identifier(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.old_template_identifier_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.CommandShowChangeThemeArchive.old_template_identifier)
}
inline std::string* CommandShowChangeThemeArchive::mutable_old_template_identifier() {
  std::string* _s = _internal_mutable_old_template_identifier();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowChangeThemeArchive.old_template_identifier)
  return _s;
}
inline const std::string& CommandShowChangeThemeArchive::_internal_old_template_identifier() const {
  return _impl_.old_template_identifier_.Get();
}
inline void CommandShowChangeThemeArchive::_internal_set_old_template_identifier(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.old_template_identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandShowChangeThemeArchive::_internal_mutable_old_template_identifier() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.old_template_identifier_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandShowChangeThemeArchive::release_old_template_identifier() {
  // @@protoc_insertion_point(field_release:KN.CommandShowChangeThemeArchive.old_template_identifier)
  if (!_internal_has_old_template_identifier()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.old_template_identifier_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.old_template_identifier_.IsDefault()) {
    _impl_.old_template_identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandShowChangeThemeArchive::set_allocated_old_template_identifier(std::string* old_template_identifier) {
  if (old_template_identifier != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.old_template_identifier_.SetAllocated(old_template_identifier, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.old_template_identifier_.IsDefault()) {
    _impl_.old_template_identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowChangeThemeArchive.old_template_identifier)
}

// -------------------------------------------------------------------

// CommandMoveMastersArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandMoveMastersArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandMoveMastersArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandMoveMastersArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandMoveMastersArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandMoveMastersArchive.super)
  return _internal_super();
}
inline void CommandMoveMastersArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandMoveMastersArchive.super)
}
inline ::TSK::CommandArchive* CommandMoveMastersArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandMoveMastersArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandMoveMastersArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandMoveMastersArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandMoveMastersArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandMoveMastersArchive.super)
  return _msg;
}
inline void CommandMoveMastersArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandMoveMastersArchive.super)
}

// required .TSP.Reference theme = 2;
inline bool CommandMoveMastersArchive::_internal_has_theme() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.theme_ != nullptr);
  return value;
}
inline bool CommandMoveMastersArchive::has_theme() const {
  return _internal_has_theme();
}
inline const ::TSP::Reference& CommandMoveMastersArchive::_internal_theme() const {
  const ::TSP::Reference* p = _impl_.theme_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandMoveMastersArchive::theme() const {
  // @@protoc_insertion_point(field_get:KN.CommandMoveMastersArchive.theme)
  return _internal_theme();
}
inline void CommandMoveMastersArchive::unsafe_arena_set_allocated_theme(
    ::TSP::Reference* theme) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.theme_);
  }
  _impl_.theme_ = theme;
  if (theme) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandMoveMastersArchive.theme)
}
inline ::TSP::Reference* CommandMoveMastersArchive::release_theme() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.theme_;
  _impl_.theme_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandMoveMastersArchive::unsafe_arena_release_theme() {
  // @@protoc_insertion_point(field_release:KN.CommandMoveMastersArchive.theme)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.theme_;
  _impl_.theme_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandMoveMastersArchive::_internal_mutable_theme() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.theme_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.theme_ = p;
  }
  return _impl_.theme_;
}
inline ::TSP::Reference* CommandMoveMastersArchive::mutable_theme() {
  ::TSP::Reference* _msg = _internal_mutable_theme();
  // @@protoc_insertion_point(field_mutable:KN.CommandMoveMastersArchive.theme)
  return _msg;
}
inline void CommandMoveMastersArchive::set_allocated_theme(::TSP::Reference* theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.theme_);
  }
  if (theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme));
    if (message_arena != submessage_arena) {
      theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, theme, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.theme_ = theme;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandMoveMastersArchive.theme)
}

// repeated .TSP.Reference master_slides = 3;
inline int CommandMoveMastersArchive::_internal_master_slides_size() const {
  return _impl_.master_slides_.size();
}
inline int CommandMoveMastersArchive::master_slides_size() const {
  return _internal_master_slides_size();
}
inline ::TSP::Reference* CommandMoveMastersArchive::mutable_master_slides(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandMoveMastersArchive.master_slides)
  return _impl_.master_slides_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandMoveMastersArchive::mutable_master_slides() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandMoveMastersArchive.master_slides)
  return &_impl_.master_slides_;
}
inline const ::TSP::Reference& CommandMoveMastersArchive::_internal_master_slides(int index) const {
  return _impl_.master_slides_.Get(index);
}
inline const ::TSP::Reference& CommandMoveMastersArchive::master_slides(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandMoveMastersArchive.master_slides)
  return _internal_master_slides(index);
}
inline ::TSP::Reference* CommandMoveMastersArchive::_internal_add_master_slides() {
  return _impl_.master_slides_.Add();
}
inline ::TSP::Reference* CommandMoveMastersArchive::add_master_slides() {
  ::TSP::Reference* _add = _internal_add_master_slides();
  // @@protoc_insertion_point(field_add:KN.CommandMoveMastersArchive.master_slides)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandMoveMastersArchive::master_slides() const {
  // @@protoc_insertion_point(field_list:KN.CommandMoveMastersArchive.master_slides)
  return _impl_.master_slides_;
}

// repeated .TSP.Reference previous_indexes_keys = 4;
inline int CommandMoveMastersArchive::_internal_previous_indexes_keys_size() const {
  return _impl_.previous_indexes_keys_.size();
}
inline int CommandMoveMastersArchive::previous_indexes_keys_size() const {
  return _internal_previous_indexes_keys_size();
}
inline ::TSP::Reference* CommandMoveMastersArchive::mutable_previous_indexes_keys(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandMoveMastersArchive.previous_indexes_keys)
  return _impl_.previous_indexes_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandMoveMastersArchive::mutable_previous_indexes_keys() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandMoveMastersArchive.previous_indexes_keys)
  return &_impl_.previous_indexes_keys_;
}
inline const ::TSP::Reference& CommandMoveMastersArchive::_internal_previous_indexes_keys(int index) const {
  return _impl_.previous_indexes_keys_.Get(index);
}
inline const ::TSP::Reference& CommandMoveMastersArchive::previous_indexes_keys(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandMoveMastersArchive.previous_indexes_keys)
  return _internal_previous_indexes_keys(index);
}
inline ::TSP::Reference* CommandMoveMastersArchive::_internal_add_previous_indexes_keys() {
  return _impl_.previous_indexes_keys_.Add();
}
inline ::TSP::Reference* CommandMoveMastersArchive::add_previous_indexes_keys() {
  ::TSP::Reference* _add = _internal_add_previous_indexes_keys();
  // @@protoc_insertion_point(field_add:KN.CommandMoveMastersArchive.previous_indexes_keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandMoveMastersArchive::previous_indexes_keys() const {
  // @@protoc_insertion_point(field_list:KN.CommandMoveMastersArchive.previous_indexes_keys)
  return _impl_.previous_indexes_keys_;
}

// repeated uint32 previous_indexes_values = 5;
inline int CommandMoveMastersArchive::_internal_previous_indexes_values_size() const {
  return _impl_.previous_indexes_values_.size();
}
inline int CommandMoveMastersArchive::previous_indexes_values_size() const {
  return _internal_previous_indexes_values_size();
}
inline void CommandMoveMastersArchive::clear_previous_indexes_values() {
  _impl_.previous_indexes_values_.Clear();
}
inline uint32_t CommandMoveMastersArchive::_internal_previous_indexes_values(int index) const {
  return _impl_.previous_indexes_values_.Get(index);
}
inline uint32_t CommandMoveMastersArchive::previous_indexes_values(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandMoveMastersArchive.previous_indexes_values)
  return _internal_previous_indexes_values(index);
}
inline void CommandMoveMastersArchive::set_previous_indexes_values(int index, uint32_t value) {
  _impl_.previous_indexes_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandMoveMastersArchive.previous_indexes_values)
}
inline void CommandMoveMastersArchive::_internal_add_previous_indexes_values(uint32_t value) {
  _impl_.previous_indexes_values_.Add(value);
}
inline void CommandMoveMastersArchive::add_previous_indexes_values(uint32_t value) {
  _internal_add_previous_indexes_values(value);
  // @@protoc_insertion_point(field_add:KN.CommandMoveMastersArchive.previous_indexes_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CommandMoveMastersArchive::_internal_previous_indexes_values() const {
  return _impl_.previous_indexes_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CommandMoveMastersArchive::previous_indexes_values() const {
  // @@protoc_insertion_point(field_list:KN.CommandMoveMastersArchive.previous_indexes_values)
  return _internal_previous_indexes_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CommandMoveMastersArchive::_internal_mutable_previous_indexes_values() {
  return &_impl_.previous_indexes_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CommandMoveMastersArchive::mutable_previous_indexes_values() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandMoveMastersArchive.previous_indexes_values)
  return _internal_mutable_previous_indexes_values();
}

// repeated .TSP.Reference final_master_arrangement = 6;
inline int CommandMoveMastersArchive::_internal_final_master_arrangement_size() const {
  return _impl_.final_master_arrangement_.size();
}
inline int CommandMoveMastersArchive::final_master_arrangement_size() const {
  return _internal_final_master_arrangement_size();
}
inline ::TSP::Reference* CommandMoveMastersArchive::mutable_final_master_arrangement(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandMoveMastersArchive.final_master_arrangement)
  return _impl_.final_master_arrangement_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandMoveMastersArchive::mutable_final_master_arrangement() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandMoveMastersArchive.final_master_arrangement)
  return &_impl_.final_master_arrangement_;
}
inline const ::TSP::Reference& CommandMoveMastersArchive::_internal_final_master_arrangement(int index) const {
  return _impl_.final_master_arrangement_.Get(index);
}
inline const ::TSP::Reference& CommandMoveMastersArchive::final_master_arrangement(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandMoveMastersArchive.final_master_arrangement)
  return _internal_final_master_arrangement(index);
}
inline ::TSP::Reference* CommandMoveMastersArchive::_internal_add_final_master_arrangement() {
  return _impl_.final_master_arrangement_.Add();
}
inline ::TSP::Reference* CommandMoveMastersArchive::add_final_master_arrangement() {
  ::TSP::Reference* _add = _internal_add_final_master_arrangement();
  // @@protoc_insertion_point(field_add:KN.CommandMoveMastersArchive.final_master_arrangement)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandMoveMastersArchive::final_master_arrangement() const {
  // @@protoc_insertion_point(field_list:KN.CommandMoveMastersArchive.final_master_arrangement)
  return _impl_.final_master_arrangement_;
}

// -------------------------------------------------------------------

// CommandInsertMasterArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandInsertMasterArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandInsertMasterArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandInsertMasterArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandInsertMasterArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandInsertMasterArchive.super)
  return _internal_super();
}
inline void CommandInsertMasterArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandInsertMasterArchive.super)
}
inline ::TSK::CommandArchive* CommandInsertMasterArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandInsertMasterArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandInsertMasterArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandInsertMasterArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandInsertMasterArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandInsertMasterArchive.super)
  return _msg;
}
inline void CommandInsertMasterArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandInsertMasterArchive.super)
}

// required .TSP.Reference theme = 2;
inline bool CommandInsertMasterArchive::_internal_has_theme() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.theme_ != nullptr);
  return value;
}
inline bool CommandInsertMasterArchive::has_theme() const {
  return _internal_has_theme();
}
inline const ::TSP::Reference& CommandInsertMasterArchive::_internal_theme() const {
  const ::TSP::Reference* p = _impl_.theme_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandInsertMasterArchive::theme() const {
  // @@protoc_insertion_point(field_get:KN.CommandInsertMasterArchive.theme)
  return _internal_theme();
}
inline void CommandInsertMasterArchive::unsafe_arena_set_allocated_theme(
    ::TSP::Reference* theme) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.theme_);
  }
  _impl_.theme_ = theme;
  if (theme) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandInsertMasterArchive.theme)
}
inline ::TSP::Reference* CommandInsertMasterArchive::release_theme() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.theme_;
  _impl_.theme_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandInsertMasterArchive::unsafe_arena_release_theme() {
  // @@protoc_insertion_point(field_release:KN.CommandInsertMasterArchive.theme)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.theme_;
  _impl_.theme_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandInsertMasterArchive::_internal_mutable_theme() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.theme_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.theme_ = p;
  }
  return _impl_.theme_;
}
inline ::TSP::Reference* CommandInsertMasterArchive::mutable_theme() {
  ::TSP::Reference* _msg = _internal_mutable_theme();
  // @@protoc_insertion_point(field_mutable:KN.CommandInsertMasterArchive.theme)
  return _msg;
}
inline void CommandInsertMasterArchive::set_allocated_theme(::TSP::Reference* theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.theme_);
  }
  if (theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme));
    if (message_arena != submessage_arena) {
      theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, theme, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.theme_ = theme;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandInsertMasterArchive.theme)
}

// required .TSP.Reference master_slide_node = 3;
inline bool CommandInsertMasterArchive::_internal_has_master_slide_node() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.master_slide_node_ != nullptr);
  return value;
}
inline bool CommandInsertMasterArchive::has_master_slide_node() const {
  return _internal_has_master_slide_node();
}
inline const ::TSP::Reference& CommandInsertMasterArchive::_internal_master_slide_node() const {
  const ::TSP::Reference* p = _impl_.master_slide_node_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandInsertMasterArchive::master_slide_node() const {
  // @@protoc_insertion_point(field_get:KN.CommandInsertMasterArchive.master_slide_node)
  return _internal_master_slide_node();
}
inline void CommandInsertMasterArchive::unsafe_arena_set_allocated_master_slide_node(
    ::TSP::Reference* master_slide_node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.master_slide_node_);
  }
  _impl_.master_slide_node_ = master_slide_node;
  if (master_slide_node) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandInsertMasterArchive.master_slide_node)
}
inline ::TSP::Reference* CommandInsertMasterArchive::release_master_slide_node() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.master_slide_node_;
  _impl_.master_slide_node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandInsertMasterArchive::unsafe_arena_release_master_slide_node() {
  // @@protoc_insertion_point(field_release:KN.CommandInsertMasterArchive.master_slide_node)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.master_slide_node_;
  _impl_.master_slide_node_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandInsertMasterArchive::_internal_mutable_master_slide_node() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.master_slide_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.master_slide_node_ = p;
  }
  return _impl_.master_slide_node_;
}
inline ::TSP::Reference* CommandInsertMasterArchive::mutable_master_slide_node() {
  ::TSP::Reference* _msg = _internal_mutable_master_slide_node();
  // @@protoc_insertion_point(field_mutable:KN.CommandInsertMasterArchive.master_slide_node)
  return _msg;
}
inline void CommandInsertMasterArchive::set_allocated_master_slide_node(::TSP::Reference* master_slide_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.master_slide_node_);
  }
  if (master_slide_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(master_slide_node));
    if (message_arena != submessage_arena) {
      master_slide_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, master_slide_node, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.master_slide_node_ = master_slide_node;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandInsertMasterArchive.master_slide_node)
}

// required uint32 insertion_index = 4;
inline bool CommandInsertMasterArchive::_internal_has_insertion_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandInsertMasterArchive::has_insertion_index() const {
  return _internal_has_insertion_index();
}
inline void CommandInsertMasterArchive::clear_insertion_index() {
  _impl_.insertion_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CommandInsertMasterArchive::_internal_insertion_index() const {
  return _impl_.insertion_index_;
}
inline uint32_t CommandInsertMasterArchive::insertion_index() const {
  // @@protoc_insertion_point(field_get:KN.CommandInsertMasterArchive.insertion_index)
  return _internal_insertion_index();
}
inline void CommandInsertMasterArchive::_internal_set_insertion_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.insertion_index_ = value;
}
inline void CommandInsertMasterArchive::set_insertion_index(uint32_t value) {
  _internal_set_insertion_index(value);
  // @@protoc_insertion_point(field_set:KN.CommandInsertMasterArchive.insertion_index)
}

// required bool was_inserted_with_drop = 5;
inline bool CommandInsertMasterArchive::_internal_has_was_inserted_with_drop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandInsertMasterArchive::has_was_inserted_with_drop() const {
  return _internal_has_was_inserted_with_drop();
}
inline void CommandInsertMasterArchive::clear_was_inserted_with_drop() {
  _impl_.was_inserted_with_drop_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CommandInsertMasterArchive::_internal_was_inserted_with_drop() const {
  return _impl_.was_inserted_with_drop_;
}
inline bool CommandInsertMasterArchive::was_inserted_with_drop() const {
  // @@protoc_insertion_point(field_get:KN.CommandInsertMasterArchive.was_inserted_with_drop)
  return _internal_was_inserted_with_drop();
}
inline void CommandInsertMasterArchive::_internal_set_was_inserted_with_drop(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.was_inserted_with_drop_ = value;
}
inline void CommandInsertMasterArchive::set_was_inserted_with_drop(bool value) {
  _internal_set_was_inserted_with_drop(value);
  // @@protoc_insertion_point(field_set:KN.CommandInsertMasterArchive.was_inserted_with_drop)
}

// -------------------------------------------------------------------

// CommandRemoveMasterArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandRemoveMasterArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandRemoveMasterArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandRemoveMasterArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandRemoveMasterArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandRemoveMasterArchive.super)
  return _internal_super();
}
inline void CommandRemoveMasterArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandRemoveMasterArchive.super)
}
inline ::TSK::CommandArchive* CommandRemoveMasterArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandRemoveMasterArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandRemoveMasterArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandRemoveMasterArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandRemoveMasterArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandRemoveMasterArchive.super)
  return _msg;
}
inline void CommandRemoveMasterArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandRemoveMasterArchive.super)
}

// required .TSP.Reference theme = 2;
inline bool CommandRemoveMasterArchive::_internal_has_theme() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.theme_ != nullptr);
  return value;
}
inline bool CommandRemoveMasterArchive::has_theme() const {
  return _internal_has_theme();
}
inline const ::TSP::Reference& CommandRemoveMasterArchive::_internal_theme() const {
  const ::TSP::Reference* p = _impl_.theme_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandRemoveMasterArchive::theme() const {
  // @@protoc_insertion_point(field_get:KN.CommandRemoveMasterArchive.theme)
  return _internal_theme();
}
inline void CommandRemoveMasterArchive::unsafe_arena_set_allocated_theme(
    ::TSP::Reference* theme) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.theme_);
  }
  _impl_.theme_ = theme;
  if (theme) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandRemoveMasterArchive.theme)
}
inline ::TSP::Reference* CommandRemoveMasterArchive::release_theme() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.theme_;
  _impl_.theme_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandRemoveMasterArchive::unsafe_arena_release_theme() {
  // @@protoc_insertion_point(field_release:KN.CommandRemoveMasterArchive.theme)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.theme_;
  _impl_.theme_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandRemoveMasterArchive::_internal_mutable_theme() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.theme_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.theme_ = p;
  }
  return _impl_.theme_;
}
inline ::TSP::Reference* CommandRemoveMasterArchive::mutable_theme() {
  ::TSP::Reference* _msg = _internal_mutable_theme();
  // @@protoc_insertion_point(field_mutable:KN.CommandRemoveMasterArchive.theme)
  return _msg;
}
inline void CommandRemoveMasterArchive::set_allocated_theme(::TSP::Reference* theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.theme_);
  }
  if (theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme));
    if (message_arena != submessage_arena) {
      theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, theme, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.theme_ = theme;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandRemoveMasterArchive.theme)
}

// required .TSP.Reference master_slide_node = 3;
inline bool CommandRemoveMasterArchive::_internal_has_master_slide_node() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.master_slide_node_ != nullptr);
  return value;
}
inline bool CommandRemoveMasterArchive::has_master_slide_node() const {
  return _internal_has_master_slide_node();
}
inline const ::TSP::Reference& CommandRemoveMasterArchive::_internal_master_slide_node() const {
  const ::TSP::Reference* p = _impl_.master_slide_node_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandRemoveMasterArchive::master_slide_node() const {
  // @@protoc_insertion_point(field_get:KN.CommandRemoveMasterArchive.master_slide_node)
  return _internal_master_slide_node();
}
inline void CommandRemoveMasterArchive::unsafe_arena_set_allocated_master_slide_node(
    ::TSP::Reference* master_slide_node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.master_slide_node_);
  }
  _impl_.master_slide_node_ = master_slide_node;
  if (master_slide_node) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandRemoveMasterArchive.master_slide_node)
}
inline ::TSP::Reference* CommandRemoveMasterArchive::release_master_slide_node() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.master_slide_node_;
  _impl_.master_slide_node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandRemoveMasterArchive::unsafe_arena_release_master_slide_node() {
  // @@protoc_insertion_point(field_release:KN.CommandRemoveMasterArchive.master_slide_node)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.master_slide_node_;
  _impl_.master_slide_node_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandRemoveMasterArchive::_internal_mutable_master_slide_node() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.master_slide_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.master_slide_node_ = p;
  }
  return _impl_.master_slide_node_;
}
inline ::TSP::Reference* CommandRemoveMasterArchive::mutable_master_slide_node() {
  ::TSP::Reference* _msg = _internal_mutable_master_slide_node();
  // @@protoc_insertion_point(field_mutable:KN.CommandRemoveMasterArchive.master_slide_node)
  return _msg;
}
inline void CommandRemoveMasterArchive::set_allocated_master_slide_node(::TSP::Reference* master_slide_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.master_slide_node_);
  }
  if (master_slide_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(master_slide_node));
    if (message_arena != submessage_arena) {
      master_slide_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, master_slide_node, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.master_slide_node_ = master_slide_node;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandRemoveMasterArchive.master_slide_node)
}

// required uint32 previous_index = 4;
inline bool CommandRemoveMasterArchive::_internal_has_previous_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandRemoveMasterArchive::has_previous_index() const {
  return _internal_has_previous_index();
}
inline void CommandRemoveMasterArchive::clear_previous_index() {
  _impl_.previous_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CommandRemoveMasterArchive::_internal_previous_index() const {
  return _impl_.previous_index_;
}
inline uint32_t CommandRemoveMasterArchive::previous_index() const {
  // @@protoc_insertion_point(field_get:KN.CommandRemoveMasterArchive.previous_index)
  return _internal_previous_index();
}
inline void CommandRemoveMasterArchive::_internal_set_previous_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.previous_index_ = value;
}
inline void CommandRemoveMasterArchive::set_previous_index(uint32_t value) {
  _internal_set_previous_index(value);
  // @@protoc_insertion_point(field_set:KN.CommandRemoveMasterArchive.previous_index)
}

// optional .TSP.Reference master_change_commands = 5;
inline bool CommandRemoveMasterArchive::_internal_has_master_change_commands() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.master_change_commands_ != nullptr);
  return value;
}
inline bool CommandRemoveMasterArchive::has_master_change_commands() const {
  return _internal_has_master_change_commands();
}
inline const ::TSP::Reference& CommandRemoveMasterArchive::_internal_master_change_commands() const {
  const ::TSP::Reference* p = _impl_.master_change_commands_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandRemoveMasterArchive::master_change_commands() const {
  // @@protoc_insertion_point(field_get:KN.CommandRemoveMasterArchive.master_change_commands)
  return _internal_master_change_commands();
}
inline void CommandRemoveMasterArchive::unsafe_arena_set_allocated_master_change_commands(
    ::TSP::Reference* master_change_commands) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.master_change_commands_);
  }
  _impl_.master_change_commands_ = master_change_commands;
  if (master_change_commands) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandRemoveMasterArchive.master_change_commands)
}
inline ::TSP::Reference* CommandRemoveMasterArchive::release_master_change_commands() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.master_change_commands_;
  _impl_.master_change_commands_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandRemoveMasterArchive::unsafe_arena_release_master_change_commands() {
  // @@protoc_insertion_point(field_release:KN.CommandRemoveMasterArchive.master_change_commands)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.master_change_commands_;
  _impl_.master_change_commands_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandRemoveMasterArchive::_internal_mutable_master_change_commands() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.master_change_commands_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.master_change_commands_ = p;
  }
  return _impl_.master_change_commands_;
}
inline ::TSP::Reference* CommandRemoveMasterArchive::mutable_master_change_commands() {
  ::TSP::Reference* _msg = _internal_mutable_master_change_commands();
  // @@protoc_insertion_point(field_mutable:KN.CommandRemoveMasterArchive.master_change_commands)
  return _msg;
}
inline void CommandRemoveMasterArchive::set_allocated_master_change_commands(::TSP::Reference* master_change_commands) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.master_change_commands_);
  }
  if (master_change_commands) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(master_change_commands));
    if (message_arena != submessage_arena) {
      master_change_commands = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, master_change_commands, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.master_change_commands_ = master_change_commands;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandRemoveMasterArchive.master_change_commands)
}

// -------------------------------------------------------------------

// CommandRenameMasterArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandRenameMasterArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandRenameMasterArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandRenameMasterArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandRenameMasterArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandRenameMasterArchive.super)
  return _internal_super();
}
inline void CommandRenameMasterArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandRenameMasterArchive.super)
}
inline ::TSK::CommandArchive* CommandRenameMasterArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandRenameMasterArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandRenameMasterArchive.super)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandRenameMasterArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandRenameMasterArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandRenameMasterArchive.super)
  return _msg;
}
inline void CommandRenameMasterArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandRenameMasterArchive.super)
}

// required .TSP.Reference master_slide = 2;
inline bool CommandRenameMasterArchive::_internal_has_master_slide() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.master_slide_ != nullptr);
  return value;
}
inline bool CommandRenameMasterArchive::has_master_slide() const {
  return _internal_has_master_slide();
}
inline const ::TSP::Reference& CommandRenameMasterArchive::_internal_master_slide() const {
  const ::TSP::Reference* p = _impl_.master_slide_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandRenameMasterArchive::master_slide() const {
  // @@protoc_insertion_point(field_get:KN.CommandRenameMasterArchive.master_slide)
  return _internal_master_slide();
}
inline void CommandRenameMasterArchive::unsafe_arena_set_allocated_master_slide(
    ::TSP::Reference* master_slide) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.master_slide_);
  }
  _impl_.master_slide_ = master_slide;
  if (master_slide) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandRenameMasterArchive.master_slide)
}
inline ::TSP::Reference* CommandRenameMasterArchive::release_master_slide() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.master_slide_;
  _impl_.master_slide_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandRenameMasterArchive::unsafe_arena_release_master_slide() {
  // @@protoc_insertion_point(field_release:KN.CommandRenameMasterArchive.master_slide)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.master_slide_;
  _impl_.master_slide_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandRenameMasterArchive::_internal_mutable_master_slide() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.master_slide_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.master_slide_ = p;
  }
  return _impl_.master_slide_;
}
inline ::TSP::Reference* CommandRenameMasterArchive::mutable_master_slide() {
  ::TSP::Reference* _msg = _internal_mutable_master_slide();
  // @@protoc_insertion_point(field_mutable:KN.CommandRenameMasterArchive.master_slide)
  return _msg;
}
inline void CommandRenameMasterArchive::set_allocated_master_slide(::TSP::Reference* master_slide) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.master_slide_);
  }
  if (master_slide) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(master_slide));
    if (message_arena != submessage_arena) {
      master_slide = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, master_slide, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.master_slide_ = master_slide;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandRenameMasterArchive.master_slide)
}

// required string master_name = 3;
inline bool CommandRenameMasterArchive::_internal_has_master_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandRenameMasterArchive::has_master_name() const {
  return _internal_has_master_name();
}
inline void CommandRenameMasterArchive::clear_master_name() {
  _impl_.master_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandRenameMasterArchive::master_name() const {
  // @@protoc_insertion_point(field_get:KN.CommandRenameMasterArchive.master_name)
  return _internal_master_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandRenameMasterArchive::set_master_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.master_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.CommandRenameMasterArchive.master_name)
}
inline std::string* CommandRenameMasterArchive::mutable_master_name() {
  std::string* _s = _internal_mutable_master_name();
  // @@protoc_insertion_point(field_mutable:KN.CommandRenameMasterArchive.master_name)
  return _s;
}
inline const std::string& CommandRenameMasterArchive::_internal_master_name() const {
  return _impl_.master_name_.Get();
}
inline void CommandRenameMasterArchive::_internal_set_master_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.master_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandRenameMasterArchive::_internal_mutable_master_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.master_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandRenameMasterArchive::release_master_name() {
  // @@protoc_insertion_point(field_release:KN.CommandRenameMasterArchive.master_name)
  if (!_internal_has_master_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.master_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.master_name_.IsDefault()) {
    _impl_.master_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandRenameMasterArchive::set_allocated_master_name(std::string* master_name) {
  if (master_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.master_name_.SetAllocated(master_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.master_name_.IsDefault()) {
    _impl_.master_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.CommandRenameMasterArchive.master_name)
}

// required string old_master_name = 4;
inline bool CommandRenameMasterArchive::_internal_has_old_master_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandRenameMasterArchive::has_old_master_name() const {
  return _internal_has_old_master_name();
}
inline void CommandRenameMasterArchive::clear_old_master_name() {
  _impl_.old_master_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CommandRenameMasterArchive::old_master_name() const {
  // @@protoc_insertion_point(field_get:KN.CommandRenameMasterArchive.old_master_name)
  return _internal_old_master_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandRenameMasterArchive::set_old_master_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.old_master_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.CommandRenameMasterArchive.old_master_name)
}
inline std::string* CommandRenameMasterArchive::mutable_old_master_name() {
  std::string* _s = _internal_mutable_old_master_name();
  // @@protoc_insertion_point(field_mutable:KN.CommandRenameMasterArchive.old_master_name)
  return _s;
}
inline const std::string& CommandRenameMasterArchive::_internal_old_master_name() const {
  return _impl_.old_master_name_.Get();
}
inline void CommandRenameMasterArchive::_internal_set_old_master_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.old_master_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandRenameMasterArchive::_internal_mutable_old_master_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.old_master_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandRenameMasterArchive::release_old_master_name() {
  // @@protoc_insertion_point(field_release:KN.CommandRenameMasterArchive.old_master_name)
  if (!_internal_has_old_master_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.old_master_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.old_master_name_.IsDefault()) {
    _impl_.old_master_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandRenameMasterArchive::set_allocated_old_master_name(std::string* old_master_name) {
  if (old_master_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.old_master_name_.SetAllocated(old_master_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.old_master_name_.IsDefault()) {
    _impl_.old_master_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.CommandRenameMasterArchive.old_master_name)
}

// -------------------------------------------------------------------

// CommandSlideInsertBuildArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideInsertBuildArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSlideInsertBuildArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideInsertBuildArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideInsertBuildArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertBuildArchive.super)
  return _internal_super();
}
inline void CommandSlideInsertBuildArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideInsertBuildArchive.super)
}
inline ::TSK::CommandArchive* CommandSlideInsertBuildArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideInsertBuildArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideInsertBuildArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideInsertBuildArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSlideInsertBuildArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertBuildArchive.super)
  return _msg;
}
inline void CommandSlideInsertBuildArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideInsertBuildArchive.super)
}

// required .TSP.Reference slideNode = 2;
inline bool CommandSlideInsertBuildArchive::_internal_has_slidenode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slidenode_ != nullptr);
  return value;
}
inline bool CommandSlideInsertBuildArchive::has_slidenode() const {
  return _internal_has_slidenode();
}
inline const ::TSP::Reference& CommandSlideInsertBuildArchive::_internal_slidenode() const {
  const ::TSP::Reference* p = _impl_.slidenode_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlideInsertBuildArchive::slidenode() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertBuildArchive.slideNode)
  return _internal_slidenode();
}
inline void CommandSlideInsertBuildArchive::unsafe_arena_set_allocated_slidenode(
    ::TSP::Reference* slidenode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidenode_);
  }
  _impl_.slidenode_ = slidenode;
  if (slidenode) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideInsertBuildArchive.slideNode)
}
inline ::TSP::Reference* CommandSlideInsertBuildArchive::release_slidenode() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.slidenode_;
  _impl_.slidenode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlideInsertBuildArchive::unsafe_arena_release_slidenode() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideInsertBuildArchive.slideNode)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.slidenode_;
  _impl_.slidenode_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlideInsertBuildArchive::_internal_mutable_slidenode() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.slidenode_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.slidenode_ = p;
  }
  return _impl_.slidenode_;
}
inline ::TSP::Reference* CommandSlideInsertBuildArchive::mutable_slidenode() {
  ::TSP::Reference* _msg = _internal_mutable_slidenode();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertBuildArchive.slideNode)
  return _msg;
}
inline void CommandSlideInsertBuildArchive::set_allocated_slidenode(::TSP::Reference* slidenode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidenode_);
  }
  if (slidenode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidenode));
    if (message_arena != submessage_arena) {
      slidenode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slidenode, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.slidenode_ = slidenode;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideInsertBuildArchive.slideNode)
}

// required .TSP.Reference build = 3;
inline bool CommandSlideInsertBuildArchive::_internal_has_build() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.build_ != nullptr);
  return value;
}
inline bool CommandSlideInsertBuildArchive::has_build() const {
  return _internal_has_build();
}
inline const ::TSP::Reference& CommandSlideInsertBuildArchive::_internal_build() const {
  const ::TSP::Reference* p = _impl_.build_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlideInsertBuildArchive::build() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertBuildArchive.build)
  return _internal_build();
}
inline void CommandSlideInsertBuildArchive::unsafe_arena_set_allocated_build(
    ::TSP::Reference* build) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.build_);
  }
  _impl_.build_ = build;
  if (build) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideInsertBuildArchive.build)
}
inline ::TSP::Reference* CommandSlideInsertBuildArchive::release_build() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.build_;
  _impl_.build_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlideInsertBuildArchive::unsafe_arena_release_build() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideInsertBuildArchive.build)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.build_;
  _impl_.build_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlideInsertBuildArchive::_internal_mutable_build() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.build_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.build_ = p;
  }
  return _impl_.build_;
}
inline ::TSP::Reference* CommandSlideInsertBuildArchive::mutable_build() {
  ::TSP::Reference* _msg = _internal_mutable_build();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertBuildArchive.build)
  return _msg;
}
inline void CommandSlideInsertBuildArchive::set_allocated_build(::TSP::Reference* build) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.build_);
  }
  if (build) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(build));
    if (message_arena != submessage_arena) {
      build = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, build, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.build_ = build;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideInsertBuildArchive.build)
}

// required uint32 index = 4;
inline bool CommandSlideInsertBuildArchive::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSlideInsertBuildArchive::has_index() const {
  return _internal_has_index();
}
inline void CommandSlideInsertBuildArchive::clear_index() {
  _impl_.index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CommandSlideInsertBuildArchive::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t CommandSlideInsertBuildArchive::index() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertBuildArchive.index)
  return _internal_index();
}
inline void CommandSlideInsertBuildArchive::_internal_set_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.index_ = value;
}
inline void CommandSlideInsertBuildArchive::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideInsertBuildArchive.index)
}

// optional bool shouldCreateChunks = 5;
inline bool CommandSlideInsertBuildArchive::_internal_has_shouldcreatechunks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandSlideInsertBuildArchive::has_shouldcreatechunks() const {
  return _internal_has_shouldcreatechunks();
}
inline void CommandSlideInsertBuildArchive::clear_shouldcreatechunks() {
  _impl_.shouldcreatechunks_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CommandSlideInsertBuildArchive::_internal_shouldcreatechunks() const {
  return _impl_.shouldcreatechunks_;
}
inline bool CommandSlideInsertBuildArchive::shouldcreatechunks() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertBuildArchive.shouldCreateChunks)
  return _internal_shouldcreatechunks();
}
inline void CommandSlideInsertBuildArchive::_internal_set_shouldcreatechunks(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.shouldcreatechunks_ = value;
}
inline void CommandSlideInsertBuildArchive::set_shouldcreatechunks(bool value) {
  _internal_set_shouldcreatechunks(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideInsertBuildArchive.shouldCreateChunks)
}

// -------------------------------------------------------------------

// CommandSlideRemoveBuildArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideRemoveBuildArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSlideRemoveBuildArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideRemoveBuildArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideRemoveBuildArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveBuildArchive.super)
  return _internal_super();
}
inline void CommandSlideRemoveBuildArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideRemoveBuildArchive.super)
}
inline ::TSK::CommandArchive* CommandSlideRemoveBuildArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideRemoveBuildArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideRemoveBuildArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideRemoveBuildArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSlideRemoveBuildArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveBuildArchive.super)
  return _msg;
}
inline void CommandSlideRemoveBuildArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideRemoveBuildArchive.super)
}

// required .TSP.Reference slideNode = 2;
inline bool CommandSlideRemoveBuildArchive::_internal_has_slidenode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slidenode_ != nullptr);
  return value;
}
inline bool CommandSlideRemoveBuildArchive::has_slidenode() const {
  return _internal_has_slidenode();
}
inline const ::TSP::Reference& CommandSlideRemoveBuildArchive::_internal_slidenode() const {
  const ::TSP::Reference* p = _impl_.slidenode_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlideRemoveBuildArchive::slidenode() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveBuildArchive.slideNode)
  return _internal_slidenode();
}
inline void CommandSlideRemoveBuildArchive::unsafe_arena_set_allocated_slidenode(
    ::TSP::Reference* slidenode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidenode_);
  }
  _impl_.slidenode_ = slidenode;
  if (slidenode) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideRemoveBuildArchive.slideNode)
}
inline ::TSP::Reference* CommandSlideRemoveBuildArchive::release_slidenode() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.slidenode_;
  _impl_.slidenode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlideRemoveBuildArchive::unsafe_arena_release_slidenode() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideRemoveBuildArchive.slideNode)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.slidenode_;
  _impl_.slidenode_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlideRemoveBuildArchive::_internal_mutable_slidenode() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.slidenode_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.slidenode_ = p;
  }
  return _impl_.slidenode_;
}
inline ::TSP::Reference* CommandSlideRemoveBuildArchive::mutable_slidenode() {
  ::TSP::Reference* _msg = _internal_mutable_slidenode();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveBuildArchive.slideNode)
  return _msg;
}
inline void CommandSlideRemoveBuildArchive::set_allocated_slidenode(::TSP::Reference* slidenode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidenode_);
  }
  if (slidenode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidenode));
    if (message_arena != submessage_arena) {
      slidenode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slidenode, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.slidenode_ = slidenode;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideRemoveBuildArchive.slideNode)
}

// required .TSP.Reference build = 3;
inline bool CommandSlideRemoveBuildArchive::_internal_has_build() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.build_ != nullptr);
  return value;
}
inline bool CommandSlideRemoveBuildArchive::has_build() const {
  return _internal_has_build();
}
inline const ::TSP::Reference& CommandSlideRemoveBuildArchive::_internal_build() const {
  const ::TSP::Reference* p = _impl_.build_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlideRemoveBuildArchive::build() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveBuildArchive.build)
  return _internal_build();
}
inline void CommandSlideRemoveBuildArchive::unsafe_arena_set_allocated_build(
    ::TSP::Reference* build) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.build_);
  }
  _impl_.build_ = build;
  if (build) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideRemoveBuildArchive.build)
}
inline ::TSP::Reference* CommandSlideRemoveBuildArchive::release_build() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.build_;
  _impl_.build_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlideRemoveBuildArchive::unsafe_arena_release_build() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideRemoveBuildArchive.build)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.build_;
  _impl_.build_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlideRemoveBuildArchive::_internal_mutable_build() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.build_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.build_ = p;
  }
  return _impl_.build_;
}
inline ::TSP::Reference* CommandSlideRemoveBuildArchive::mutable_build() {
  ::TSP::Reference* _msg = _internal_mutable_build();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveBuildArchive.build)
  return _msg;
}
inline void CommandSlideRemoveBuildArchive::set_allocated_build(::TSP::Reference* build) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.build_);
  }
  if (build) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(build));
    if (message_arena != submessage_arena) {
      build = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, build, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.build_ = build;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideRemoveBuildArchive.build)
}

// required uint32 index = 4;
inline bool CommandSlideRemoveBuildArchive::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSlideRemoveBuildArchive::has_index() const {
  return _internal_has_index();
}
inline void CommandSlideRemoveBuildArchive::clear_index() {
  _impl_.index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CommandSlideRemoveBuildArchive::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t CommandSlideRemoveBuildArchive::index() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveBuildArchive.index)
  return _internal_index();
}
inline void CommandSlideRemoveBuildArchive::_internal_set_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.index_ = value;
}
inline void CommandSlideRemoveBuildArchive::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideRemoveBuildArchive.index)
}

// -------------------------------------------------------------------

// CommandSlideMoveBuildWithoutMovingChunksArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideMoveBuildWithoutMovingChunksArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSlideMoveBuildWithoutMovingChunksArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideMoveBuildWithoutMovingChunksArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideMoveBuildWithoutMovingChunksArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveBuildWithoutMovingChunksArchive.super)
  return _internal_super();
}
inline void CommandSlideMoveBuildWithoutMovingChunksArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideMoveBuildWithoutMovingChunksArchive.super)
}
inline ::TSK::CommandArchive* CommandSlideMoveBuildWithoutMovingChunksArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideMoveBuildWithoutMovingChunksArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideMoveBuildWithoutMovingChunksArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideMoveBuildWithoutMovingChunksArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSlideMoveBuildWithoutMovingChunksArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideMoveBuildWithoutMovingChunksArchive.super)
  return _msg;
}
inline void CommandSlideMoveBuildWithoutMovingChunksArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideMoveBuildWithoutMovingChunksArchive.super)
}

// required .TSP.Reference slideNode = 2;
inline bool CommandSlideMoveBuildWithoutMovingChunksArchive::_internal_has_slidenode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slidenode_ != nullptr);
  return value;
}
inline bool CommandSlideMoveBuildWithoutMovingChunksArchive::has_slidenode() const {
  return _internal_has_slidenode();
}
inline const ::TSP::Reference& CommandSlideMoveBuildWithoutMovingChunksArchive::_internal_slidenode() const {
  const ::TSP::Reference* p = _impl_.slidenode_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlideMoveBuildWithoutMovingChunksArchive::slidenode() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveBuildWithoutMovingChunksArchive.slideNode)
  return _internal_slidenode();
}
inline void CommandSlideMoveBuildWithoutMovingChunksArchive::unsafe_arena_set_allocated_slidenode(
    ::TSP::Reference* slidenode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidenode_);
  }
  _impl_.slidenode_ = slidenode;
  if (slidenode) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideMoveBuildWithoutMovingChunksArchive.slideNode)
}
inline ::TSP::Reference* CommandSlideMoveBuildWithoutMovingChunksArchive::release_slidenode() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.slidenode_;
  _impl_.slidenode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlideMoveBuildWithoutMovingChunksArchive::unsafe_arena_release_slidenode() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideMoveBuildWithoutMovingChunksArchive.slideNode)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.slidenode_;
  _impl_.slidenode_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlideMoveBuildWithoutMovingChunksArchive::_internal_mutable_slidenode() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.slidenode_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.slidenode_ = p;
  }
  return _impl_.slidenode_;
}
inline ::TSP::Reference* CommandSlideMoveBuildWithoutMovingChunksArchive::mutable_slidenode() {
  ::TSP::Reference* _msg = _internal_mutable_slidenode();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideMoveBuildWithoutMovingChunksArchive.slideNode)
  return _msg;
}
inline void CommandSlideMoveBuildWithoutMovingChunksArchive::set_allocated_slidenode(::TSP::Reference* slidenode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidenode_);
  }
  if (slidenode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidenode));
    if (message_arena != submessage_arena) {
      slidenode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slidenode, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.slidenode_ = slidenode;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideMoveBuildWithoutMovingChunksArchive.slideNode)
}

// required uint32 index = 3;
inline bool CommandSlideMoveBuildWithoutMovingChunksArchive::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSlideMoveBuildWithoutMovingChunksArchive::has_index() const {
  return _internal_has_index();
}
inline void CommandSlideMoveBuildWithoutMovingChunksArchive::clear_index() {
  _impl_.index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CommandSlideMoveBuildWithoutMovingChunksArchive::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t CommandSlideMoveBuildWithoutMovingChunksArchive::index() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveBuildWithoutMovingChunksArchive.index)
  return _internal_index();
}
inline void CommandSlideMoveBuildWithoutMovingChunksArchive::_internal_set_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.index_ = value;
}
inline void CommandSlideMoveBuildWithoutMovingChunksArchive::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideMoveBuildWithoutMovingChunksArchive.index)
}

// required uint32 oldIndex = 4;
inline bool CommandSlideMoveBuildWithoutMovingChunksArchive::_internal_has_oldindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSlideMoveBuildWithoutMovingChunksArchive::has_oldindex() const {
  return _internal_has_oldindex();
}
inline void CommandSlideMoveBuildWithoutMovingChunksArchive::clear_oldindex() {
  _impl_.oldindex_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CommandSlideMoveBuildWithoutMovingChunksArchive::_internal_oldindex() const {
  return _impl_.oldindex_;
}
inline uint32_t CommandSlideMoveBuildWithoutMovingChunksArchive::oldindex() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveBuildWithoutMovingChunksArchive.oldIndex)
  return _internal_oldindex();
}
inline void CommandSlideMoveBuildWithoutMovingChunksArchive::_internal_set_oldindex(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.oldindex_ = value;
}
inline void CommandSlideMoveBuildWithoutMovingChunksArchive::set_oldindex(uint32_t value) {
  _internal_set_oldindex(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideMoveBuildWithoutMovingChunksArchive.oldIndex)
}

// -------------------------------------------------------------------

// CommandSlideMoveBuildsArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideMoveBuildsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSlideMoveBuildsArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideMoveBuildsArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideMoveBuildsArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveBuildsArchive.super)
  return _internal_super();
}
inline void CommandSlideMoveBuildsArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideMoveBuildsArchive.super)
}
inline ::TSK::CommandArchive* CommandSlideMoveBuildsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideMoveBuildsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideMoveBuildsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideMoveBuildsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSlideMoveBuildsArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideMoveBuildsArchive.super)
  return _msg;
}
inline void CommandSlideMoveBuildsArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideMoveBuildsArchive.super)
}

// repeated .TSP.Reference builds = 2;
inline int CommandSlideMoveBuildsArchive::_internal_builds_size() const {
  return _impl_.builds_.size();
}
inline int CommandSlideMoveBuildsArchive::builds_size() const {
  return _internal_builds_size();
}
inline ::TSP::Reference* CommandSlideMoveBuildsArchive::mutable_builds(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideMoveBuildsArchive.builds)
  return _impl_.builds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideMoveBuildsArchive::mutable_builds() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideMoveBuildsArchive.builds)
  return &_impl_.builds_;
}
inline const ::TSP::Reference& CommandSlideMoveBuildsArchive::_internal_builds(int index) const {
  return _impl_.builds_.Get(index);
}
inline const ::TSP::Reference& CommandSlideMoveBuildsArchive::builds(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveBuildsArchive.builds)
  return _internal_builds(index);
}
inline ::TSP::Reference* CommandSlideMoveBuildsArchive::_internal_add_builds() {
  return _impl_.builds_.Add();
}
inline ::TSP::Reference* CommandSlideMoveBuildsArchive::add_builds() {
  ::TSP::Reference* _add = _internal_add_builds();
  // @@protoc_insertion_point(field_add:KN.CommandSlideMoveBuildsArchive.builds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideMoveBuildsArchive::builds() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideMoveBuildsArchive.builds)
  return _impl_.builds_;
}

// optional uint32 toIndex = 3;
inline bool CommandSlideMoveBuildsArchive::_internal_has_toindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSlideMoveBuildsArchive::has_toindex() const {
  return _internal_has_toindex();
}
inline void CommandSlideMoveBuildsArchive::clear_toindex() {
  _impl_.toindex_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandSlideMoveBuildsArchive::_internal_toindex() const {
  return _impl_.toindex_;
}
inline uint32_t CommandSlideMoveBuildsArchive::toindex() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveBuildsArchive.toIndex)
  return _internal_toindex();
}
inline void CommandSlideMoveBuildsArchive::_internal_set_toindex(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.toindex_ = value;
}
inline void CommandSlideMoveBuildsArchive::set_toindex(uint32_t value) {
  _internal_set_toindex(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideMoveBuildsArchive.toIndex)
}

// -------------------------------------------------------------------

// CommandSlideInsertBuildChunkArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideInsertBuildChunkArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSlideInsertBuildChunkArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideInsertBuildChunkArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideInsertBuildChunkArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertBuildChunkArchive.super)
  return _internal_super();
}
inline void CommandSlideInsertBuildChunkArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideInsertBuildChunkArchive.super)
}
inline ::TSK::CommandArchive* CommandSlideInsertBuildChunkArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideInsertBuildChunkArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideInsertBuildChunkArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideInsertBuildChunkArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSlideInsertBuildChunkArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertBuildChunkArchive.super)
  return _msg;
}
inline void CommandSlideInsertBuildChunkArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideInsertBuildChunkArchive.super)
}

// required .TSP.Reference slide = 2;
inline bool CommandSlideInsertBuildChunkArchive::_internal_has_slide() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slide_ != nullptr);
  return value;
}
inline bool CommandSlideInsertBuildChunkArchive::has_slide() const {
  return _internal_has_slide();
}
inline const ::TSP::Reference& CommandSlideInsertBuildChunkArchive::_internal_slide() const {
  const ::TSP::Reference* p = _impl_.slide_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlideInsertBuildChunkArchive::slide() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertBuildChunkArchive.slide)
  return _internal_slide();
}
inline void CommandSlideInsertBuildChunkArchive::unsafe_arena_set_allocated_slide(
    ::TSP::Reference* slide) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_);
  }
  _impl_.slide_ = slide;
  if (slide) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideInsertBuildChunkArchive.slide)
}
inline ::TSP::Reference* CommandSlideInsertBuildChunkArchive::release_slide() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.slide_;
  _impl_.slide_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlideInsertBuildChunkArchive::unsafe_arena_release_slide() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideInsertBuildChunkArchive.slide)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.slide_;
  _impl_.slide_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlideInsertBuildChunkArchive::_internal_mutable_slide() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.slide_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.slide_ = p;
  }
  return _impl_.slide_;
}
inline ::TSP::Reference* CommandSlideInsertBuildChunkArchive::mutable_slide() {
  ::TSP::Reference* _msg = _internal_mutable_slide();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertBuildChunkArchive.slide)
  return _msg;
}
inline void CommandSlideInsertBuildChunkArchive::set_allocated_slide(::TSP::Reference* slide) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_);
  }
  if (slide) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide));
    if (message_arena != submessage_arena) {
      slide = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.slide_ = slide;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideInsertBuildChunkArchive.slide)
}

// required .KN.BuildChunkArchive buildChunk = 3;
inline bool CommandSlideInsertBuildChunkArchive::_internal_has_buildchunk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.buildchunk_ != nullptr);
  return value;
}
inline bool CommandSlideInsertBuildChunkArchive::has_buildchunk() const {
  return _internal_has_buildchunk();
}
inline const ::KN::BuildChunkArchive& CommandSlideInsertBuildChunkArchive::_internal_buildchunk() const {
  const ::KN::BuildChunkArchive* p = _impl_.buildchunk_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::BuildChunkArchive&>(
      ::KN::_BuildChunkArchive_default_instance_);
}
inline const ::KN::BuildChunkArchive& CommandSlideInsertBuildChunkArchive::buildchunk() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertBuildChunkArchive.buildChunk)
  return _internal_buildchunk();
}
inline void CommandSlideInsertBuildChunkArchive::unsafe_arena_set_allocated_buildchunk(
    ::KN::BuildChunkArchive* buildchunk) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buildchunk_);
  }
  _impl_.buildchunk_ = buildchunk;
  if (buildchunk) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideInsertBuildChunkArchive.buildChunk)
}
inline ::KN::BuildChunkArchive* CommandSlideInsertBuildChunkArchive::release_buildchunk() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::KN::BuildChunkArchive* temp = _impl_.buildchunk_;
  _impl_.buildchunk_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::BuildChunkArchive* CommandSlideInsertBuildChunkArchive::unsafe_arena_release_buildchunk() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideInsertBuildChunkArchive.buildChunk)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::KN::BuildChunkArchive* temp = _impl_.buildchunk_;
  _impl_.buildchunk_ = nullptr;
  return temp;
}
inline ::KN::BuildChunkArchive* CommandSlideInsertBuildChunkArchive::_internal_mutable_buildchunk() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.buildchunk_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::BuildChunkArchive>(GetArenaForAllocation());
    _impl_.buildchunk_ = p;
  }
  return _impl_.buildchunk_;
}
inline ::KN::BuildChunkArchive* CommandSlideInsertBuildChunkArchive::mutable_buildchunk() {
  ::KN::BuildChunkArchive* _msg = _internal_mutable_buildchunk();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertBuildChunkArchive.buildChunk)
  return _msg;
}
inline void CommandSlideInsertBuildChunkArchive::set_allocated_buildchunk(::KN::BuildChunkArchive* buildchunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buildchunk_);
  }
  if (buildchunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buildchunk));
    if (message_arena != submessage_arena) {
      buildchunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buildchunk, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.buildchunk_ = buildchunk;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideInsertBuildChunkArchive.buildChunk)
}

// required uint32 index = 4;
inline bool CommandSlideInsertBuildChunkArchive::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSlideInsertBuildChunkArchive::has_index() const {
  return _internal_has_index();
}
inline void CommandSlideInsertBuildChunkArchive::clear_index() {
  _impl_.index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CommandSlideInsertBuildChunkArchive::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t CommandSlideInsertBuildChunkArchive::index() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertBuildChunkArchive.index)
  return _internal_index();
}
inline void CommandSlideInsertBuildChunkArchive::_internal_set_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.index_ = value;
}
inline void CommandSlideInsertBuildChunkArchive::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideInsertBuildChunkArchive.index)
}

// -------------------------------------------------------------------

// CommandSlideRemoveBuildChunkArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideRemoveBuildChunkArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSlideRemoveBuildChunkArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideRemoveBuildChunkArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideRemoveBuildChunkArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveBuildChunkArchive.super)
  return _internal_super();
}
inline void CommandSlideRemoveBuildChunkArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideRemoveBuildChunkArchive.super)
}
inline ::TSK::CommandArchive* CommandSlideRemoveBuildChunkArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideRemoveBuildChunkArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideRemoveBuildChunkArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideRemoveBuildChunkArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSlideRemoveBuildChunkArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveBuildChunkArchive.super)
  return _msg;
}
inline void CommandSlideRemoveBuildChunkArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideRemoveBuildChunkArchive.super)
}

// required .TSP.Reference slide = 2;
inline bool CommandSlideRemoveBuildChunkArchive::_internal_has_slide() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slide_ != nullptr);
  return value;
}
inline bool CommandSlideRemoveBuildChunkArchive::has_slide() const {
  return _internal_has_slide();
}
inline const ::TSP::Reference& CommandSlideRemoveBuildChunkArchive::_internal_slide() const {
  const ::TSP::Reference* p = _impl_.slide_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlideRemoveBuildChunkArchive::slide() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveBuildChunkArchive.slide)
  return _internal_slide();
}
inline void CommandSlideRemoveBuildChunkArchive::unsafe_arena_set_allocated_slide(
    ::TSP::Reference* slide) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_);
  }
  _impl_.slide_ = slide;
  if (slide) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideRemoveBuildChunkArchive.slide)
}
inline ::TSP::Reference* CommandSlideRemoveBuildChunkArchive::release_slide() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.slide_;
  _impl_.slide_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlideRemoveBuildChunkArchive::unsafe_arena_release_slide() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideRemoveBuildChunkArchive.slide)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.slide_;
  _impl_.slide_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlideRemoveBuildChunkArchive::_internal_mutable_slide() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.slide_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.slide_ = p;
  }
  return _impl_.slide_;
}
inline ::TSP::Reference* CommandSlideRemoveBuildChunkArchive::mutable_slide() {
  ::TSP::Reference* _msg = _internal_mutable_slide();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveBuildChunkArchive.slide)
  return _msg;
}
inline void CommandSlideRemoveBuildChunkArchive::set_allocated_slide(::TSP::Reference* slide) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_);
  }
  if (slide) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide));
    if (message_arena != submessage_arena) {
      slide = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.slide_ = slide;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideRemoveBuildChunkArchive.slide)
}

// required .KN.BuildChunkArchive buildChunk = 3;
inline bool CommandSlideRemoveBuildChunkArchive::_internal_has_buildchunk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.buildchunk_ != nullptr);
  return value;
}
inline bool CommandSlideRemoveBuildChunkArchive::has_buildchunk() const {
  return _internal_has_buildchunk();
}
inline const ::KN::BuildChunkArchive& CommandSlideRemoveBuildChunkArchive::_internal_buildchunk() const {
  const ::KN::BuildChunkArchive* p = _impl_.buildchunk_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::BuildChunkArchive&>(
      ::KN::_BuildChunkArchive_default_instance_);
}
inline const ::KN::BuildChunkArchive& CommandSlideRemoveBuildChunkArchive::buildchunk() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveBuildChunkArchive.buildChunk)
  return _internal_buildchunk();
}
inline void CommandSlideRemoveBuildChunkArchive::unsafe_arena_set_allocated_buildchunk(
    ::KN::BuildChunkArchive* buildchunk) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buildchunk_);
  }
  _impl_.buildchunk_ = buildchunk;
  if (buildchunk) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideRemoveBuildChunkArchive.buildChunk)
}
inline ::KN::BuildChunkArchive* CommandSlideRemoveBuildChunkArchive::release_buildchunk() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::KN::BuildChunkArchive* temp = _impl_.buildchunk_;
  _impl_.buildchunk_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::BuildChunkArchive* CommandSlideRemoveBuildChunkArchive::unsafe_arena_release_buildchunk() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideRemoveBuildChunkArchive.buildChunk)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::KN::BuildChunkArchive* temp = _impl_.buildchunk_;
  _impl_.buildchunk_ = nullptr;
  return temp;
}
inline ::KN::BuildChunkArchive* CommandSlideRemoveBuildChunkArchive::_internal_mutable_buildchunk() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.buildchunk_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::BuildChunkArchive>(GetArenaForAllocation());
    _impl_.buildchunk_ = p;
  }
  return _impl_.buildchunk_;
}
inline ::KN::BuildChunkArchive* CommandSlideRemoveBuildChunkArchive::mutable_buildchunk() {
  ::KN::BuildChunkArchive* _msg = _internal_mutable_buildchunk();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveBuildChunkArchive.buildChunk)
  return _msg;
}
inline void CommandSlideRemoveBuildChunkArchive::set_allocated_buildchunk(::KN::BuildChunkArchive* buildchunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buildchunk_);
  }
  if (buildchunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buildchunk));
    if (message_arena != submessage_arena) {
      buildchunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buildchunk, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.buildchunk_ = buildchunk;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideRemoveBuildChunkArchive.buildChunk)
}

// required uint32 index = 4;
inline bool CommandSlideRemoveBuildChunkArchive::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSlideRemoveBuildChunkArchive::has_index() const {
  return _internal_has_index();
}
inline void CommandSlideRemoveBuildChunkArchive::clear_index() {
  _impl_.index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CommandSlideRemoveBuildChunkArchive::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t CommandSlideRemoveBuildChunkArchive::index() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveBuildChunkArchive.index)
  return _internal_index();
}
inline void CommandSlideRemoveBuildChunkArchive::_internal_set_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.index_ = value;
}
inline void CommandSlideRemoveBuildChunkArchive::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideRemoveBuildChunkArchive.index)
}

// -------------------------------------------------------------------

// CommandSlideMoveBuildChunkArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideMoveBuildChunkArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSlideMoveBuildChunkArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideMoveBuildChunkArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideMoveBuildChunkArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveBuildChunkArchive.super)
  return _internal_super();
}
inline void CommandSlideMoveBuildChunkArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideMoveBuildChunkArchive.super)
}
inline ::TSK::CommandArchive* CommandSlideMoveBuildChunkArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideMoveBuildChunkArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideMoveBuildChunkArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideMoveBuildChunkArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSlideMoveBuildChunkArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideMoveBuildChunkArchive.super)
  return _msg;
}
inline void CommandSlideMoveBuildChunkArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideMoveBuildChunkArchive.super)
}

// required .TSP.Reference slide = 2;
inline bool CommandSlideMoveBuildChunkArchive::_internal_has_slide() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slide_ != nullptr);
  return value;
}
inline bool CommandSlideMoveBuildChunkArchive::has_slide() const {
  return _internal_has_slide();
}
inline const ::TSP::Reference& CommandSlideMoveBuildChunkArchive::_internal_slide() const {
  const ::TSP::Reference* p = _impl_.slide_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlideMoveBuildChunkArchive::slide() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveBuildChunkArchive.slide)
  return _internal_slide();
}
inline void CommandSlideMoveBuildChunkArchive::unsafe_arena_set_allocated_slide(
    ::TSP::Reference* slide) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_);
  }
  _impl_.slide_ = slide;
  if (slide) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideMoveBuildChunkArchive.slide)
}
inline ::TSP::Reference* CommandSlideMoveBuildChunkArchive::release_slide() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.slide_;
  _impl_.slide_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlideMoveBuildChunkArchive::unsafe_arena_release_slide() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideMoveBuildChunkArchive.slide)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.slide_;
  _impl_.slide_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlideMoveBuildChunkArchive::_internal_mutable_slide() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.slide_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.slide_ = p;
  }
  return _impl_.slide_;
}
inline ::TSP::Reference* CommandSlideMoveBuildChunkArchive::mutable_slide() {
  ::TSP::Reference* _msg = _internal_mutable_slide();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideMoveBuildChunkArchive.slide)
  return _msg;
}
inline void CommandSlideMoveBuildChunkArchive::set_allocated_slide(::TSP::Reference* slide) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_);
  }
  if (slide) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide));
    if (message_arena != submessage_arena) {
      slide = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.slide_ = slide;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideMoveBuildChunkArchive.slide)
}

// required uint32 index = 3;
inline bool CommandSlideMoveBuildChunkArchive::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSlideMoveBuildChunkArchive::has_index() const {
  return _internal_has_index();
}
inline void CommandSlideMoveBuildChunkArchive::clear_index() {
  _impl_.index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CommandSlideMoveBuildChunkArchive::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t CommandSlideMoveBuildChunkArchive::index() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveBuildChunkArchive.index)
  return _internal_index();
}
inline void CommandSlideMoveBuildChunkArchive::_internal_set_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.index_ = value;
}
inline void CommandSlideMoveBuildChunkArchive::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideMoveBuildChunkArchive.index)
}

// required uint32 oldIndex = 4;
inline bool CommandSlideMoveBuildChunkArchive::_internal_has_oldindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSlideMoveBuildChunkArchive::has_oldindex() const {
  return _internal_has_oldindex();
}
inline void CommandSlideMoveBuildChunkArchive::clear_oldindex() {
  _impl_.oldindex_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CommandSlideMoveBuildChunkArchive::_internal_oldindex() const {
  return _impl_.oldindex_;
}
inline uint32_t CommandSlideMoveBuildChunkArchive::oldindex() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveBuildChunkArchive.oldIndex)
  return _internal_oldindex();
}
inline void CommandSlideMoveBuildChunkArchive::_internal_set_oldindex(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.oldindex_ = value;
}
inline void CommandSlideMoveBuildChunkArchive::set_oldindex(uint32_t value) {
  _internal_set_oldindex(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideMoveBuildChunkArchive.oldIndex)
}

// -------------------------------------------------------------------

// CommandSlideMoveBuildChunksArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideMoveBuildChunksArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSlideMoveBuildChunksArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideMoveBuildChunksArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideMoveBuildChunksArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveBuildChunksArchive.super)
  return _internal_super();
}
inline void CommandSlideMoveBuildChunksArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideMoveBuildChunksArchive.super)
}
inline ::TSK::CommandArchive* CommandSlideMoveBuildChunksArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideMoveBuildChunksArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideMoveBuildChunksArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideMoveBuildChunksArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSlideMoveBuildChunksArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideMoveBuildChunksArchive.super)
  return _msg;
}
inline void CommandSlideMoveBuildChunksArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideMoveBuildChunksArchive.super)
}

// repeated .KN.BuildChunkArchive buildChunks = 2;
inline int CommandSlideMoveBuildChunksArchive::_internal_buildchunks_size() const {
  return _impl_.buildchunks_.size();
}
inline int CommandSlideMoveBuildChunksArchive::buildchunks_size() const {
  return _internal_buildchunks_size();
}
inline ::KN::BuildChunkArchive* CommandSlideMoveBuildChunksArchive::mutable_buildchunks(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideMoveBuildChunksArchive.buildChunks)
  return _impl_.buildchunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkArchive >*
CommandSlideMoveBuildChunksArchive::mutable_buildchunks() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideMoveBuildChunksArchive.buildChunks)
  return &_impl_.buildchunks_;
}
inline const ::KN::BuildChunkArchive& CommandSlideMoveBuildChunksArchive::_internal_buildchunks(int index) const {
  return _impl_.buildchunks_.Get(index);
}
inline const ::KN::BuildChunkArchive& CommandSlideMoveBuildChunksArchive::buildchunks(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveBuildChunksArchive.buildChunks)
  return _internal_buildchunks(index);
}
inline ::KN::BuildChunkArchive* CommandSlideMoveBuildChunksArchive::_internal_add_buildchunks() {
  return _impl_.buildchunks_.Add();
}
inline ::KN::BuildChunkArchive* CommandSlideMoveBuildChunksArchive::add_buildchunks() {
  ::KN::BuildChunkArchive* _add = _internal_add_buildchunks();
  // @@protoc_insertion_point(field_add:KN.CommandSlideMoveBuildChunksArchive.buildChunks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkArchive >&
CommandSlideMoveBuildChunksArchive::buildchunks() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideMoveBuildChunksArchive.buildChunks)
  return _impl_.buildchunks_;
}

// optional uint32 toIndex = 3;
inline bool CommandSlideMoveBuildChunksArchive::_internal_has_toindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSlideMoveBuildChunksArchive::has_toindex() const {
  return _internal_has_toindex();
}
inline void CommandSlideMoveBuildChunksArchive::clear_toindex() {
  _impl_.toindex_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandSlideMoveBuildChunksArchive::_internal_toindex() const {
  return _impl_.toindex_;
}
inline uint32_t CommandSlideMoveBuildChunksArchive::toindex() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveBuildChunksArchive.toIndex)
  return _internal_toindex();
}
inline void CommandSlideMoveBuildChunksArchive::_internal_set_toindex(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.toindex_ = value;
}
inline void CommandSlideMoveBuildChunksArchive::set_toindex(uint32_t value) {
  _internal_set_toindex(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideMoveBuildChunksArchive.toIndex)
}

// -------------------------------------------------------------------

// CommandBuildSetValueArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandBuildSetValueArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandBuildSetValueArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandBuildSetValueArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandBuildSetValueArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildSetValueArchive.super)
  return _internal_super();
}
inline void CommandBuildSetValueArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandBuildSetValueArchive.super)
}
inline ::TSK::CommandArchive* CommandBuildSetValueArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandBuildSetValueArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandBuildSetValueArchive.super)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandBuildSetValueArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandBuildSetValueArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildSetValueArchive.super)
  return _msg;
}
inline void CommandBuildSetValueArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandBuildSetValueArchive.super)
}

// required .TSP.Reference build = 2;
inline bool CommandBuildSetValueArchive::_internal_has_build() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.build_ != nullptr);
  return value;
}
inline bool CommandBuildSetValueArchive::has_build() const {
  return _internal_has_build();
}
inline const ::TSP::Reference& CommandBuildSetValueArchive::_internal_build() const {
  const ::TSP::Reference* p = _impl_.build_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandBuildSetValueArchive::build() const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildSetValueArchive.build)
  return _internal_build();
}
inline void CommandBuildSetValueArchive::unsafe_arena_set_allocated_build(
    ::TSP::Reference* build) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.build_);
  }
  _impl_.build_ = build;
  if (build) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandBuildSetValueArchive.build)
}
inline ::TSP::Reference* CommandBuildSetValueArchive::release_build() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.build_;
  _impl_.build_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandBuildSetValueArchive::unsafe_arena_release_build() {
  // @@protoc_insertion_point(field_release:KN.CommandBuildSetValueArchive.build)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.build_;
  _impl_.build_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandBuildSetValueArchive::_internal_mutable_build() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.build_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.build_ = p;
  }
  return _impl_.build_;
}
inline ::TSP::Reference* CommandBuildSetValueArchive::mutable_build() {
  ::TSP::Reference* _msg = _internal_mutable_build();
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildSetValueArchive.build)
  return _msg;
}
inline void CommandBuildSetValueArchive::set_allocated_build(::TSP::Reference* build) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.build_);
  }
  if (build) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(build));
    if (message_arena != submessage_arena) {
      build = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, build, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.build_ = build;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandBuildSetValueArchive.build)
}

// required string property = 3;
inline bool CommandBuildSetValueArchive::_internal_has_property() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandBuildSetValueArchive::has_property() const {
  return _internal_has_property();
}
inline void CommandBuildSetValueArchive::clear_property() {
  _impl_.property_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandBuildSetValueArchive::property() const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildSetValueArchive.property)
  return _internal_property();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandBuildSetValueArchive::set_property(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.property_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.CommandBuildSetValueArchive.property)
}
inline std::string* CommandBuildSetValueArchive::mutable_property() {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildSetValueArchive.property)
  return _s;
}
inline const std::string& CommandBuildSetValueArchive::_internal_property() const {
  return _impl_.property_.Get();
}
inline void CommandBuildSetValueArchive::_internal_set_property(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.property_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandBuildSetValueArchive::_internal_mutable_property() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.property_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandBuildSetValueArchive::release_property() {
  // @@protoc_insertion_point(field_release:KN.CommandBuildSetValueArchive.property)
  if (!_internal_has_property()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.property_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.property_.IsDefault()) {
    _impl_.property_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandBuildSetValueArchive::set_allocated_property(std::string* property) {
  if (property != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.property_.SetAllocated(property, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.property_.IsDefault()) {
    _impl_.property_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.CommandBuildSetValueArchive.property)
}

// repeated string effects = 4;
inline int CommandBuildSetValueArchive::_internal_effects_size() const {
  return _impl_.effects_.size();
}
inline int CommandBuildSetValueArchive::effects_size() const {
  return _internal_effects_size();
}
inline void CommandBuildSetValueArchive::clear_effects() {
  _impl_.effects_.Clear();
}
inline std::string* CommandBuildSetValueArchive::add_effects() {
  std::string* _s = _internal_add_effects();
  // @@protoc_insertion_point(field_add_mutable:KN.CommandBuildSetValueArchive.effects)
  return _s;
}
inline const std::string& CommandBuildSetValueArchive::_internal_effects(int index) const {
  return _impl_.effects_.Get(index);
}
inline const std::string& CommandBuildSetValueArchive::effects(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildSetValueArchive.effects)
  return _internal_effects(index);
}
inline std::string* CommandBuildSetValueArchive::mutable_effects(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildSetValueArchive.effects)
  return _impl_.effects_.Mutable(index);
}
inline void CommandBuildSetValueArchive::set_effects(int index, const std::string& value) {
  _impl_.effects_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:KN.CommandBuildSetValueArchive.effects)
}
inline void CommandBuildSetValueArchive::set_effects(int index, std::string&& value) {
  _impl_.effects_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:KN.CommandBuildSetValueArchive.effects)
}
inline void CommandBuildSetValueArchive::set_effects(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.effects_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KN.CommandBuildSetValueArchive.effects)
}
inline void CommandBuildSetValueArchive::set_effects(int index, const char* value, size_t size) {
  _impl_.effects_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KN.CommandBuildSetValueArchive.effects)
}
inline std::string* CommandBuildSetValueArchive::_internal_add_effects() {
  return _impl_.effects_.Add();
}
inline void CommandBuildSetValueArchive::add_effects(const std::string& value) {
  _impl_.effects_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KN.CommandBuildSetValueArchive.effects)
}
inline void CommandBuildSetValueArchive::add_effects(std::string&& value) {
  _impl_.effects_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KN.CommandBuildSetValueArchive.effects)
}
inline void CommandBuildSetValueArchive::add_effects(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.effects_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KN.CommandBuildSetValueArchive.effects)
}
inline void CommandBuildSetValueArchive::add_effects(const char* value, size_t size) {
  _impl_.effects_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KN.CommandBuildSetValueArchive.effects)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandBuildSetValueArchive::effects() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildSetValueArchive.effects)
  return _impl_.effects_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandBuildSetValueArchive::mutable_effects() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildSetValueArchive.effects)
  return &_impl_.effects_;
}

// repeated string types = 5;
inline int CommandBuildSetValueArchive::_internal_types_size() const {
  return _impl_.types_.size();
}
inline int CommandBuildSetValueArchive::types_size() const {
  return _internal_types_size();
}
inline void CommandBuildSetValueArchive::clear_types() {
  _impl_.types_.Clear();
}
inline std::string* CommandBuildSetValueArchive::add_types() {
  std::string* _s = _internal_add_types();
  // @@protoc_insertion_point(field_add_mutable:KN.CommandBuildSetValueArchive.types)
  return _s;
}
inline const std::string& CommandBuildSetValueArchive::_internal_types(int index) const {
  return _impl_.types_.Get(index);
}
inline const std::string& CommandBuildSetValueArchive::types(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildSetValueArchive.types)
  return _internal_types(index);
}
inline std::string* CommandBuildSetValueArchive::mutable_types(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildSetValueArchive.types)
  return _impl_.types_.Mutable(index);
}
inline void CommandBuildSetValueArchive::set_types(int index, const std::string& value) {
  _impl_.types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:KN.CommandBuildSetValueArchive.types)
}
inline void CommandBuildSetValueArchive::set_types(int index, std::string&& value) {
  _impl_.types_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:KN.CommandBuildSetValueArchive.types)
}
inline void CommandBuildSetValueArchive::set_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KN.CommandBuildSetValueArchive.types)
}
inline void CommandBuildSetValueArchive::set_types(int index, const char* value, size_t size) {
  _impl_.types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KN.CommandBuildSetValueArchive.types)
}
inline std::string* CommandBuildSetValueArchive::_internal_add_types() {
  return _impl_.types_.Add();
}
inline void CommandBuildSetValueArchive::add_types(const std::string& value) {
  _impl_.types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KN.CommandBuildSetValueArchive.types)
}
inline void CommandBuildSetValueArchive::add_types(std::string&& value) {
  _impl_.types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KN.CommandBuildSetValueArchive.types)
}
inline void CommandBuildSetValueArchive::add_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KN.CommandBuildSetValueArchive.types)
}
inline void CommandBuildSetValueArchive::add_types(const char* value, size_t size) {
  _impl_.types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KN.CommandBuildSetValueArchive.types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandBuildSetValueArchive::types() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildSetValueArchive.types)
  return _impl_.types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandBuildSetValueArchive::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildSetValueArchive.types)
  return &_impl_.types_;
}

// repeated string deliveries = 6;
inline int CommandBuildSetValueArchive::_internal_deliveries_size() const {
  return _impl_.deliveries_.size();
}
inline int CommandBuildSetValueArchive::deliveries_size() const {
  return _internal_deliveries_size();
}
inline void CommandBuildSetValueArchive::clear_deliveries() {
  _impl_.deliveries_.Clear();
}
inline std::string* CommandBuildSetValueArchive::add_deliveries() {
  std::string* _s = _internal_add_deliveries();
  // @@protoc_insertion_point(field_add_mutable:KN.CommandBuildSetValueArchive.deliveries)
  return _s;
}
inline const std::string& CommandBuildSetValueArchive::_internal_deliveries(int index) const {
  return _impl_.deliveries_.Get(index);
}
inline const std::string& CommandBuildSetValueArchive::deliveries(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildSetValueArchive.deliveries)
  return _internal_deliveries(index);
}
inline std::string* CommandBuildSetValueArchive::mutable_deliveries(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildSetValueArchive.deliveries)
  return _impl_.deliveries_.Mutable(index);
}
inline void CommandBuildSetValueArchive::set_deliveries(int index, const std::string& value) {
  _impl_.deliveries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:KN.CommandBuildSetValueArchive.deliveries)
}
inline void CommandBuildSetValueArchive::set_deliveries(int index, std::string&& value) {
  _impl_.deliveries_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:KN.CommandBuildSetValueArchive.deliveries)
}
inline void CommandBuildSetValueArchive::set_deliveries(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.deliveries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KN.CommandBuildSetValueArchive.deliveries)
}
inline void CommandBuildSetValueArchive::set_deliveries(int index, const char* value, size_t size) {
  _impl_.deliveries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KN.CommandBuildSetValueArchive.deliveries)
}
inline std::string* CommandBuildSetValueArchive::_internal_add_deliveries() {
  return _impl_.deliveries_.Add();
}
inline void CommandBuildSetValueArchive::add_deliveries(const std::string& value) {
  _impl_.deliveries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KN.CommandBuildSetValueArchive.deliveries)
}
inline void CommandBuildSetValueArchive::add_deliveries(std::string&& value) {
  _impl_.deliveries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KN.CommandBuildSetValueArchive.deliveries)
}
inline void CommandBuildSetValueArchive::add_deliveries(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.deliveries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KN.CommandBuildSetValueArchive.deliveries)
}
inline void CommandBuildSetValueArchive::add_deliveries(const char* value, size_t size) {
  _impl_.deliveries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KN.CommandBuildSetValueArchive.deliveries)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandBuildSetValueArchive::deliveries() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildSetValueArchive.deliveries)
  return _impl_.deliveries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandBuildSetValueArchive::mutable_deliveries() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildSetValueArchive.deliveries)
  return &_impl_.deliveries_;
}

// repeated uint32 directions = 7;
inline int CommandBuildSetValueArchive::_internal_directions_size() const {
  return _impl_.directions_.size();
}
inline int CommandBuildSetValueArchive::directions_size() const {
  return _internal_directions_size();
}
inline void CommandBuildSetValueArchive::clear_directions() {
  _impl_.directions_.Clear();
}
inline uint32_t CommandBuildSetValueArchive::_internal_directions(int index) const {
  return _impl_.directions_.Get(index);
}
inline uint32_t CommandBuildSetValueArchive::directions(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildSetValueArchive.directions)
  return _internal_directions(index);
}
inline void CommandBuildSetValueArchive::set_directions(int index, uint32_t value) {
  _impl_.directions_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandBuildSetValueArchive.directions)
}
inline void CommandBuildSetValueArchive::_internal_add_directions(uint32_t value) {
  _impl_.directions_.Add(value);
}
inline void CommandBuildSetValueArchive::add_directions(uint32_t value) {
  _internal_add_directions(value);
  // @@protoc_insertion_point(field_add:KN.CommandBuildSetValueArchive.directions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CommandBuildSetValueArchive::_internal_directions() const {
  return _impl_.directions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CommandBuildSetValueArchive::directions() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildSetValueArchive.directions)
  return _internal_directions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CommandBuildSetValueArchive::_internal_mutable_directions() {
  return &_impl_.directions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CommandBuildSetValueArchive::mutable_directions() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildSetValueArchive.directions)
  return _internal_mutable_directions();
}

// repeated double durations = 8;
inline int CommandBuildSetValueArchive::_internal_durations_size() const {
  return _impl_.durations_.size();
}
inline int CommandBuildSetValueArchive::durations_size() const {
  return _internal_durations_size();
}
inline void CommandBuildSetValueArchive::clear_durations() {
  _impl_.durations_.Clear();
}
inline double CommandBuildSetValueArchive::_internal_durations(int index) const {
  return _impl_.durations_.Get(index);
}
inline double CommandBuildSetValueArchive::durations(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildSetValueArchive.durations)
  return _internal_durations(index);
}
inline void CommandBuildSetValueArchive::set_durations(int index, double value) {
  _impl_.durations_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandBuildSetValueArchive.durations)
}
inline void CommandBuildSetValueArchive::_internal_add_durations(double value) {
  _impl_.durations_.Add(value);
}
inline void CommandBuildSetValueArchive::add_durations(double value) {
  _internal_add_durations(value);
  // @@protoc_insertion_point(field_add:KN.CommandBuildSetValueArchive.durations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandBuildSetValueArchive::_internal_durations() const {
  return _impl_.durations_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandBuildSetValueArchive::durations() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildSetValueArchive.durations)
  return _internal_durations();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandBuildSetValueArchive::_internal_mutable_durations() {
  return &_impl_.durations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandBuildSetValueArchive::mutable_durations() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildSetValueArchive.durations)
  return _internal_mutable_durations();
}

// repeated double delays = 9;
inline int CommandBuildSetValueArchive::_internal_delays_size() const {
  return _impl_.delays_.size();
}
inline int CommandBuildSetValueArchive::delays_size() const {
  return _internal_delays_size();
}
inline void CommandBuildSetValueArchive::clear_delays() {
  _impl_.delays_.Clear();
}
inline double CommandBuildSetValueArchive::_internal_delays(int index) const {
  return _impl_.delays_.Get(index);
}
inline double CommandBuildSetValueArchive::delays(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildSetValueArchive.delays)
  return _internal_delays(index);
}
inline void CommandBuildSetValueArchive::set_delays(int index, double value) {
  _impl_.delays_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandBuildSetValueArchive.delays)
}
inline void CommandBuildSetValueArchive::_internal_add_delays(double value) {
  _impl_.delays_.Add(value);
}
inline void CommandBuildSetValueArchive::add_delays(double value) {
  _internal_add_delays(value);
  // @@protoc_insertion_point(field_add:KN.CommandBuildSetValueArchive.delays)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandBuildSetValueArchive::_internal_delays() const {
  return _impl_.delays_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandBuildSetValueArchive::delays() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildSetValueArchive.delays)
  return _internal_delays();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandBuildSetValueArchive::_internal_mutable_delays() {
  return &_impl_.delays_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandBuildSetValueArchive::mutable_delays() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildSetValueArchive.delays)
  return _internal_mutable_delays();
}

// repeated double delayAutomaticAfters = 10;
inline int CommandBuildSetValueArchive::_internal_delayautomaticafters_size() const {
  return _impl_.delayautomaticafters_.size();
}
inline int CommandBuildSetValueArchive::delayautomaticafters_size() const {
  return _internal_delayautomaticafters_size();
}
inline void CommandBuildSetValueArchive::clear_delayautomaticafters() {
  _impl_.delayautomaticafters_.Clear();
}
inline double CommandBuildSetValueArchive::_internal_delayautomaticafters(int index) const {
  return _impl_.delayautomaticafters_.Get(index);
}
inline double CommandBuildSetValueArchive::delayautomaticafters(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildSetValueArchive.delayAutomaticAfters)
  return _internal_delayautomaticafters(index);
}
inline void CommandBuildSetValueArchive::set_delayautomaticafters(int index, double value) {
  _impl_.delayautomaticafters_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandBuildSetValueArchive.delayAutomaticAfters)
}
inline void CommandBuildSetValueArchive::_internal_add_delayautomaticafters(double value) {
  _impl_.delayautomaticafters_.Add(value);
}
inline void CommandBuildSetValueArchive::add_delayautomaticafters(double value) {
  _internal_add_delayautomaticafters(value);
  // @@protoc_insertion_point(field_add:KN.CommandBuildSetValueArchive.delayAutomaticAfters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandBuildSetValueArchive::_internal_delayautomaticafters() const {
  return _impl_.delayautomaticafters_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandBuildSetValueArchive::delayautomaticafters() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildSetValueArchive.delayAutomaticAfters)
  return _internal_delayautomaticafters();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandBuildSetValueArchive::_internal_mutable_delayautomaticafters() {
  return &_impl_.delayautomaticafters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandBuildSetValueArchive::mutable_delayautomaticafters() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildSetValueArchive.delayAutomaticAfters)
  return _internal_mutable_delayautomaticafters();
}

// repeated double delayAutomaticWiths = 11;
inline int CommandBuildSetValueArchive::_internal_delayautomaticwiths_size() const {
  return _impl_.delayautomaticwiths_.size();
}
inline int CommandBuildSetValueArchive::delayautomaticwiths_size() const {
  return _internal_delayautomaticwiths_size();
}
inline void CommandBuildSetValueArchive::clear_delayautomaticwiths() {
  _impl_.delayautomaticwiths_.Clear();
}
inline double CommandBuildSetValueArchive::_internal_delayautomaticwiths(int index) const {
  return _impl_.delayautomaticwiths_.Get(index);
}
inline double CommandBuildSetValueArchive::delayautomaticwiths(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildSetValueArchive.delayAutomaticWiths)
  return _internal_delayautomaticwiths(index);
}
inline void CommandBuildSetValueArchive::set_delayautomaticwiths(int index, double value) {
  _impl_.delayautomaticwiths_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandBuildSetValueArchive.delayAutomaticWiths)
}
inline void CommandBuildSetValueArchive::_internal_add_delayautomaticwiths(double value) {
  _impl_.delayautomaticwiths_.Add(value);
}
inline void CommandBuildSetValueArchive::add_delayautomaticwiths(double value) {
  _internal_add_delayautomaticwiths(value);
  // @@protoc_insertion_point(field_add:KN.CommandBuildSetValueArchive.delayAutomaticWiths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandBuildSetValueArchive::_internal_delayautomaticwiths() const {
  return _impl_.delayautomaticwiths_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandBuildSetValueArchive::delayautomaticwiths() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildSetValueArchive.delayAutomaticWiths)
  return _internal_delayautomaticwiths();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandBuildSetValueArchive::_internal_mutable_delayautomaticwiths() {
  return &_impl_.delayautomaticwiths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandBuildSetValueArchive::mutable_delayautomaticwiths() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildSetValueArchive.delayAutomaticWiths)
  return _internal_mutable_delayautomaticwiths();
}

// repeated bool eventTriggers = 12;
inline int CommandBuildSetValueArchive::_internal_eventtriggers_size() const {
  return _impl_.eventtriggers_.size();
}
inline int CommandBuildSetValueArchive::eventtriggers_size() const {
  return _internal_eventtriggers_size();
}
inline void CommandBuildSetValueArchive::clear_eventtriggers() {
  _impl_.eventtriggers_.Clear();
}
inline bool CommandBuildSetValueArchive::_internal_eventtriggers(int index) const {
  return _impl_.eventtriggers_.Get(index);
}
inline bool CommandBuildSetValueArchive::eventtriggers(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildSetValueArchive.eventTriggers)
  return _internal_eventtriggers(index);
}
inline void CommandBuildSetValueArchive::set_eventtriggers(int index, bool value) {
  _impl_.eventtriggers_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandBuildSetValueArchive.eventTriggers)
}
inline void CommandBuildSetValueArchive::_internal_add_eventtriggers(bool value) {
  _impl_.eventtriggers_.Add(value);
}
inline void CommandBuildSetValueArchive::add_eventtriggers(bool value) {
  _internal_add_eventtriggers(value);
  // @@protoc_insertion_point(field_add:KN.CommandBuildSetValueArchive.eventTriggers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
CommandBuildSetValueArchive::_internal_eventtriggers() const {
  return _impl_.eventtriggers_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
CommandBuildSetValueArchive::eventtriggers() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildSetValueArchive.eventTriggers)
  return _internal_eventtriggers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
CommandBuildSetValueArchive::_internal_mutable_eventtriggers() {
  return &_impl_.eventtriggers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
CommandBuildSetValueArchive::mutable_eventtriggers() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildSetValueArchive.eventTriggers)
  return _internal_mutable_eventtriggers();
}

// -------------------------------------------------------------------

// CommandBuildChunkSetValueArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandBuildChunkSetValueArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandBuildChunkSetValueArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandBuildChunkSetValueArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandBuildChunkSetValueArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildChunkSetValueArchive.super)
  return _internal_super();
}
inline void CommandBuildChunkSetValueArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandBuildChunkSetValueArchive.super)
}
inline ::TSK::CommandArchive* CommandBuildChunkSetValueArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandBuildChunkSetValueArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandBuildChunkSetValueArchive.super)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandBuildChunkSetValueArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandBuildChunkSetValueArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildChunkSetValueArchive.super)
  return _msg;
}
inline void CommandBuildChunkSetValueArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandBuildChunkSetValueArchive.super)
}

// required .KN.BuildChunkArchive buildChunk = 2;
inline bool CommandBuildChunkSetValueArchive::_internal_has_buildchunk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.buildchunk_ != nullptr);
  return value;
}
inline bool CommandBuildChunkSetValueArchive::has_buildchunk() const {
  return _internal_has_buildchunk();
}
inline const ::KN::BuildChunkArchive& CommandBuildChunkSetValueArchive::_internal_buildchunk() const {
  const ::KN::BuildChunkArchive* p = _impl_.buildchunk_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::BuildChunkArchive&>(
      ::KN::_BuildChunkArchive_default_instance_);
}
inline const ::KN::BuildChunkArchive& CommandBuildChunkSetValueArchive::buildchunk() const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildChunkSetValueArchive.buildChunk)
  return _internal_buildchunk();
}
inline void CommandBuildChunkSetValueArchive::unsafe_arena_set_allocated_buildchunk(
    ::KN::BuildChunkArchive* buildchunk) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buildchunk_);
  }
  _impl_.buildchunk_ = buildchunk;
  if (buildchunk) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandBuildChunkSetValueArchive.buildChunk)
}
inline ::KN::BuildChunkArchive* CommandBuildChunkSetValueArchive::release_buildchunk() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::KN::BuildChunkArchive* temp = _impl_.buildchunk_;
  _impl_.buildchunk_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::BuildChunkArchive* CommandBuildChunkSetValueArchive::unsafe_arena_release_buildchunk() {
  // @@protoc_insertion_point(field_release:KN.CommandBuildChunkSetValueArchive.buildChunk)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::KN::BuildChunkArchive* temp = _impl_.buildchunk_;
  _impl_.buildchunk_ = nullptr;
  return temp;
}
inline ::KN::BuildChunkArchive* CommandBuildChunkSetValueArchive::_internal_mutable_buildchunk() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.buildchunk_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::BuildChunkArchive>(GetArenaForAllocation());
    _impl_.buildchunk_ = p;
  }
  return _impl_.buildchunk_;
}
inline ::KN::BuildChunkArchive* CommandBuildChunkSetValueArchive::mutable_buildchunk() {
  ::KN::BuildChunkArchive* _msg = _internal_mutable_buildchunk();
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildChunkSetValueArchive.buildChunk)
  return _msg;
}
inline void CommandBuildChunkSetValueArchive::set_allocated_buildchunk(::KN::BuildChunkArchive* buildchunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buildchunk_);
  }
  if (buildchunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buildchunk));
    if (message_arena != submessage_arena) {
      buildchunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buildchunk, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.buildchunk_ = buildchunk;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandBuildChunkSetValueArchive.buildChunk)
}

// required string property = 3;
inline bool CommandBuildChunkSetValueArchive::_internal_has_property() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandBuildChunkSetValueArchive::has_property() const {
  return _internal_has_property();
}
inline void CommandBuildChunkSetValueArchive::clear_property() {
  _impl_.property_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandBuildChunkSetValueArchive::property() const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildChunkSetValueArchive.property)
  return _internal_property();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandBuildChunkSetValueArchive::set_property(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.property_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.CommandBuildChunkSetValueArchive.property)
}
inline std::string* CommandBuildChunkSetValueArchive::mutable_property() {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildChunkSetValueArchive.property)
  return _s;
}
inline const std::string& CommandBuildChunkSetValueArchive::_internal_property() const {
  return _impl_.property_.Get();
}
inline void CommandBuildChunkSetValueArchive::_internal_set_property(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.property_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandBuildChunkSetValueArchive::_internal_mutable_property() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.property_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandBuildChunkSetValueArchive::release_property() {
  // @@protoc_insertion_point(field_release:KN.CommandBuildChunkSetValueArchive.property)
  if (!_internal_has_property()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.property_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.property_.IsDefault()) {
    _impl_.property_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandBuildChunkSetValueArchive::set_allocated_property(std::string* property) {
  if (property != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.property_.SetAllocated(property, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.property_.IsDefault()) {
    _impl_.property_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.CommandBuildChunkSetValueArchive.property)
}

// repeated uint32 referents = 4;
inline int CommandBuildChunkSetValueArchive::_internal_referents_size() const {
  return _impl_.referents_.size();
}
inline int CommandBuildChunkSetValueArchive::referents_size() const {
  return _internal_referents_size();
}
inline void CommandBuildChunkSetValueArchive::clear_referents() {
  _impl_.referents_.Clear();
}
inline uint32_t CommandBuildChunkSetValueArchive::_internal_referents(int index) const {
  return _impl_.referents_.Get(index);
}
inline uint32_t CommandBuildChunkSetValueArchive::referents(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildChunkSetValueArchive.referents)
  return _internal_referents(index);
}
inline void CommandBuildChunkSetValueArchive::set_referents(int index, uint32_t value) {
  _impl_.referents_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandBuildChunkSetValueArchive.referents)
}
inline void CommandBuildChunkSetValueArchive::_internal_add_referents(uint32_t value) {
  _impl_.referents_.Add(value);
}
inline void CommandBuildChunkSetValueArchive::add_referents(uint32_t value) {
  _internal_add_referents(value);
  // @@protoc_insertion_point(field_add:KN.CommandBuildChunkSetValueArchive.referents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CommandBuildChunkSetValueArchive::_internal_referents() const {
  return _impl_.referents_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CommandBuildChunkSetValueArchive::referents() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildChunkSetValueArchive.referents)
  return _internal_referents();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CommandBuildChunkSetValueArchive::_internal_mutable_referents() {
  return &_impl_.referents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CommandBuildChunkSetValueArchive::mutable_referents() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildChunkSetValueArchive.referents)
  return _internal_mutable_referents();
}

// repeated bool automatics = 5;
inline int CommandBuildChunkSetValueArchive::_internal_automatics_size() const {
  return _impl_.automatics_.size();
}
inline int CommandBuildChunkSetValueArchive::automatics_size() const {
  return _internal_automatics_size();
}
inline void CommandBuildChunkSetValueArchive::clear_automatics() {
  _impl_.automatics_.Clear();
}
inline bool CommandBuildChunkSetValueArchive::_internal_automatics(int index) const {
  return _impl_.automatics_.Get(index);
}
inline bool CommandBuildChunkSetValueArchive::automatics(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildChunkSetValueArchive.automatics)
  return _internal_automatics(index);
}
inline void CommandBuildChunkSetValueArchive::set_automatics(int index, bool value) {
  _impl_.automatics_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandBuildChunkSetValueArchive.automatics)
}
inline void CommandBuildChunkSetValueArchive::_internal_add_automatics(bool value) {
  _impl_.automatics_.Add(value);
}
inline void CommandBuildChunkSetValueArchive::add_automatics(bool value) {
  _internal_add_automatics(value);
  // @@protoc_insertion_point(field_add:KN.CommandBuildChunkSetValueArchive.automatics)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
CommandBuildChunkSetValueArchive::_internal_automatics() const {
  return _impl_.automatics_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
CommandBuildChunkSetValueArchive::automatics() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildChunkSetValueArchive.automatics)
  return _internal_automatics();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
CommandBuildChunkSetValueArchive::_internal_mutable_automatics() {
  return &_impl_.automatics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
CommandBuildChunkSetValueArchive::mutable_automatics() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildChunkSetValueArchive.automatics)
  return _internal_mutable_automatics();
}

// repeated double durations = 6;
inline int CommandBuildChunkSetValueArchive::_internal_durations_size() const {
  return _impl_.durations_.size();
}
inline int CommandBuildChunkSetValueArchive::durations_size() const {
  return _internal_durations_size();
}
inline void CommandBuildChunkSetValueArchive::clear_durations() {
  _impl_.durations_.Clear();
}
inline double CommandBuildChunkSetValueArchive::_internal_durations(int index) const {
  return _impl_.durations_.Get(index);
}
inline double CommandBuildChunkSetValueArchive::durations(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildChunkSetValueArchive.durations)
  return _internal_durations(index);
}
inline void CommandBuildChunkSetValueArchive::set_durations(int index, double value) {
  _impl_.durations_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandBuildChunkSetValueArchive.durations)
}
inline void CommandBuildChunkSetValueArchive::_internal_add_durations(double value) {
  _impl_.durations_.Add(value);
}
inline void CommandBuildChunkSetValueArchive::add_durations(double value) {
  _internal_add_durations(value);
  // @@protoc_insertion_point(field_add:KN.CommandBuildChunkSetValueArchive.durations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandBuildChunkSetValueArchive::_internal_durations() const {
  return _impl_.durations_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandBuildChunkSetValueArchive::durations() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildChunkSetValueArchive.durations)
  return _internal_durations();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandBuildChunkSetValueArchive::_internal_mutable_durations() {
  return &_impl_.durations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandBuildChunkSetValueArchive::mutable_durations() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildChunkSetValueArchive.durations)
  return _internal_mutable_durations();
}

// repeated double delays = 7;
inline int CommandBuildChunkSetValueArchive::_internal_delays_size() const {
  return _impl_.delays_.size();
}
inline int CommandBuildChunkSetValueArchive::delays_size() const {
  return _internal_delays_size();
}
inline void CommandBuildChunkSetValueArchive::clear_delays() {
  _impl_.delays_.Clear();
}
inline double CommandBuildChunkSetValueArchive::_internal_delays(int index) const {
  return _impl_.delays_.Get(index);
}
inline double CommandBuildChunkSetValueArchive::delays(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildChunkSetValueArchive.delays)
  return _internal_delays(index);
}
inline void CommandBuildChunkSetValueArchive::set_delays(int index, double value) {
  _impl_.delays_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandBuildChunkSetValueArchive.delays)
}
inline void CommandBuildChunkSetValueArchive::_internal_add_delays(double value) {
  _impl_.delays_.Add(value);
}
inline void CommandBuildChunkSetValueArchive::add_delays(double value) {
  _internal_add_delays(value);
  // @@protoc_insertion_point(field_add:KN.CommandBuildChunkSetValueArchive.delays)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandBuildChunkSetValueArchive::_internal_delays() const {
  return _impl_.delays_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandBuildChunkSetValueArchive::delays() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildChunkSetValueArchive.delays)
  return _internal_delays();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandBuildChunkSetValueArchive::_internal_mutable_delays() {
  return &_impl_.delays_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandBuildChunkSetValueArchive::mutable_delays() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildChunkSetValueArchive.delays)
  return _internal_mutable_delays();
}

// optional bool oldOwnsValue = 8;
inline bool CommandBuildChunkSetValueArchive::_internal_has_oldownsvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandBuildChunkSetValueArchive::has_oldownsvalue() const {
  return _internal_has_oldownsvalue();
}
inline void CommandBuildChunkSetValueArchive::clear_oldownsvalue() {
  _impl_.oldownsvalue_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CommandBuildChunkSetValueArchive::_internal_oldownsvalue() const {
  return _impl_.oldownsvalue_;
}
inline bool CommandBuildChunkSetValueArchive::oldownsvalue() const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildChunkSetValueArchive.oldOwnsValue)
  return _internal_oldownsvalue();
}
inline void CommandBuildChunkSetValueArchive::_internal_set_oldownsvalue(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.oldownsvalue_ = value;
}
inline void CommandBuildChunkSetValueArchive::set_oldownsvalue(bool value) {
  _internal_set_oldownsvalue(value);
  // @@protoc_insertion_point(field_set:KN.CommandBuildChunkSetValueArchive.oldOwnsValue)
}

// -------------------------------------------------------------------

// CommandTransitionSetValueArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandTransitionSetValueArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandTransitionSetValueArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandTransitionSetValueArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandTransitionSetValueArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandTransitionSetValueArchive.super)
  return _internal_super();
}
inline void CommandTransitionSetValueArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandTransitionSetValueArchive.super)
}
inline ::TSK::CommandArchive* CommandTransitionSetValueArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandTransitionSetValueArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandTransitionSetValueArchive.super)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandTransitionSetValueArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandTransitionSetValueArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandTransitionSetValueArchive.super)
  return _msg;
}
inline void CommandTransitionSetValueArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandTransitionSetValueArchive.super)
}

// required .TSP.Reference slideNode = 2;
inline bool CommandTransitionSetValueArchive::_internal_has_slidenode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slidenode_ != nullptr);
  return value;
}
inline bool CommandTransitionSetValueArchive::has_slidenode() const {
  return _internal_has_slidenode();
}
inline const ::TSP::Reference& CommandTransitionSetValueArchive::_internal_slidenode() const {
  const ::TSP::Reference* p = _impl_.slidenode_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandTransitionSetValueArchive::slidenode() const {
  // @@protoc_insertion_point(field_get:KN.CommandTransitionSetValueArchive.slideNode)
  return _internal_slidenode();
}
inline void CommandTransitionSetValueArchive::unsafe_arena_set_allocated_slidenode(
    ::TSP::Reference* slidenode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidenode_);
  }
  _impl_.slidenode_ = slidenode;
  if (slidenode) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandTransitionSetValueArchive.slideNode)
}
inline ::TSP::Reference* CommandTransitionSetValueArchive::release_slidenode() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.slidenode_;
  _impl_.slidenode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandTransitionSetValueArchive::unsafe_arena_release_slidenode() {
  // @@protoc_insertion_point(field_release:KN.CommandTransitionSetValueArchive.slideNode)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.slidenode_;
  _impl_.slidenode_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandTransitionSetValueArchive::_internal_mutable_slidenode() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.slidenode_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.slidenode_ = p;
  }
  return _impl_.slidenode_;
}
inline ::TSP::Reference* CommandTransitionSetValueArchive::mutable_slidenode() {
  ::TSP::Reference* _msg = _internal_mutable_slidenode();
  // @@protoc_insertion_point(field_mutable:KN.CommandTransitionSetValueArchive.slideNode)
  return _msg;
}
inline void CommandTransitionSetValueArchive::set_allocated_slidenode(::TSP::Reference* slidenode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slidenode_);
  }
  if (slidenode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slidenode));
    if (message_arena != submessage_arena) {
      slidenode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slidenode, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.slidenode_ = slidenode;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandTransitionSetValueArchive.slideNode)
}

// required string property = 3;
inline bool CommandTransitionSetValueArchive::_internal_has_property() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandTransitionSetValueArchive::has_property() const {
  return _internal_has_property();
}
inline void CommandTransitionSetValueArchive::clear_property() {
  _impl_.property_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandTransitionSetValueArchive::property() const {
  // @@protoc_insertion_point(field_get:KN.CommandTransitionSetValueArchive.property)
  return _internal_property();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandTransitionSetValueArchive::set_property(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.property_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.CommandTransitionSetValueArchive.property)
}
inline std::string* CommandTransitionSetValueArchive::mutable_property() {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:KN.CommandTransitionSetValueArchive.property)
  return _s;
}
inline const std::string& CommandTransitionSetValueArchive::_internal_property() const {
  return _impl_.property_.Get();
}
inline void CommandTransitionSetValueArchive::_internal_set_property(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.property_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandTransitionSetValueArchive::_internal_mutable_property() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.property_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandTransitionSetValueArchive::release_property() {
  // @@protoc_insertion_point(field_release:KN.CommandTransitionSetValueArchive.property)
  if (!_internal_has_property()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.property_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.property_.IsDefault()) {
    _impl_.property_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandTransitionSetValueArchive::set_allocated_property(std::string* property) {
  if (property != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.property_.SetAllocated(property, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.property_.IsDefault()) {
    _impl_.property_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.CommandTransitionSetValueArchive.property)
}

// repeated string effects = 4;
inline int CommandTransitionSetValueArchive::_internal_effects_size() const {
  return _impl_.effects_.size();
}
inline int CommandTransitionSetValueArchive::effects_size() const {
  return _internal_effects_size();
}
inline void CommandTransitionSetValueArchive::clear_effects() {
  _impl_.effects_.Clear();
}
inline std::string* CommandTransitionSetValueArchive::add_effects() {
  std::string* _s = _internal_add_effects();
  // @@protoc_insertion_point(field_add_mutable:KN.CommandTransitionSetValueArchive.effects)
  return _s;
}
inline const std::string& CommandTransitionSetValueArchive::_internal_effects(int index) const {
  return _impl_.effects_.Get(index);
}
inline const std::string& CommandTransitionSetValueArchive::effects(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandTransitionSetValueArchive.effects)
  return _internal_effects(index);
}
inline std::string* CommandTransitionSetValueArchive::mutable_effects(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandTransitionSetValueArchive.effects)
  return _impl_.effects_.Mutable(index);
}
inline void CommandTransitionSetValueArchive::set_effects(int index, const std::string& value) {
  _impl_.effects_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:KN.CommandTransitionSetValueArchive.effects)
}
inline void CommandTransitionSetValueArchive::set_effects(int index, std::string&& value) {
  _impl_.effects_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:KN.CommandTransitionSetValueArchive.effects)
}
inline void CommandTransitionSetValueArchive::set_effects(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.effects_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KN.CommandTransitionSetValueArchive.effects)
}
inline void CommandTransitionSetValueArchive::set_effects(int index, const char* value, size_t size) {
  _impl_.effects_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KN.CommandTransitionSetValueArchive.effects)
}
inline std::string* CommandTransitionSetValueArchive::_internal_add_effects() {
  return _impl_.effects_.Add();
}
inline void CommandTransitionSetValueArchive::add_effects(const std::string& value) {
  _impl_.effects_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KN.CommandTransitionSetValueArchive.effects)
}
inline void CommandTransitionSetValueArchive::add_effects(std::string&& value) {
  _impl_.effects_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KN.CommandTransitionSetValueArchive.effects)
}
inline void CommandTransitionSetValueArchive::add_effects(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.effects_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KN.CommandTransitionSetValueArchive.effects)
}
inline void CommandTransitionSetValueArchive::add_effects(const char* value, size_t size) {
  _impl_.effects_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KN.CommandTransitionSetValueArchive.effects)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandTransitionSetValueArchive::effects() const {
  // @@protoc_insertion_point(field_list:KN.CommandTransitionSetValueArchive.effects)
  return _impl_.effects_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandTransitionSetValueArchive::mutable_effects() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandTransitionSetValueArchive.effects)
  return &_impl_.effects_;
}

// repeated string unused = 5;
inline int CommandTransitionSetValueArchive::_internal_unused_size() const {
  return _impl_.unused_.size();
}
inline int CommandTransitionSetValueArchive::unused_size() const {
  return _internal_unused_size();
}
inline void CommandTransitionSetValueArchive::clear_unused() {
  _impl_.unused_.Clear();
}
inline std::string* CommandTransitionSetValueArchive::add_unused() {
  std::string* _s = _internal_add_unused();
  // @@protoc_insertion_point(field_add_mutable:KN.CommandTransitionSetValueArchive.unused)
  return _s;
}
inline const std::string& CommandTransitionSetValueArchive::_internal_unused(int index) const {
  return _impl_.unused_.Get(index);
}
inline const std::string& CommandTransitionSetValueArchive::unused(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandTransitionSetValueArchive.unused)
  return _internal_unused(index);
}
inline std::string* CommandTransitionSetValueArchive::mutable_unused(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandTransitionSetValueArchive.unused)
  return _impl_.unused_.Mutable(index);
}
inline void CommandTransitionSetValueArchive::set_unused(int index, const std::string& value) {
  _impl_.unused_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:KN.CommandTransitionSetValueArchive.unused)
}
inline void CommandTransitionSetValueArchive::set_unused(int index, std::string&& value) {
  _impl_.unused_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:KN.CommandTransitionSetValueArchive.unused)
}
inline void CommandTransitionSetValueArchive::set_unused(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.unused_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KN.CommandTransitionSetValueArchive.unused)
}
inline void CommandTransitionSetValueArchive::set_unused(int index, const char* value, size_t size) {
  _impl_.unused_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KN.CommandTransitionSetValueArchive.unused)
}
inline std::string* CommandTransitionSetValueArchive::_internal_add_unused() {
  return _impl_.unused_.Add();
}
inline void CommandTransitionSetValueArchive::add_unused(const std::string& value) {
  _impl_.unused_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KN.CommandTransitionSetValueArchive.unused)
}
inline void CommandTransitionSetValueArchive::add_unused(std::string&& value) {
  _impl_.unused_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KN.CommandTransitionSetValueArchive.unused)
}
inline void CommandTransitionSetValueArchive::add_unused(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.unused_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KN.CommandTransitionSetValueArchive.unused)
}
inline void CommandTransitionSetValueArchive::add_unused(const char* value, size_t size) {
  _impl_.unused_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KN.CommandTransitionSetValueArchive.unused)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandTransitionSetValueArchive::unused() const {
  // @@protoc_insertion_point(field_list:KN.CommandTransitionSetValueArchive.unused)
  return _impl_.unused_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandTransitionSetValueArchive::mutable_unused() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandTransitionSetValueArchive.unused)
  return &_impl_.unused_;
}

// repeated string unused2 = 6;
inline int CommandTransitionSetValueArchive::_internal_unused2_size() const {
  return _impl_.unused2_.size();
}
inline int CommandTransitionSetValueArchive::unused2_size() const {
  return _internal_unused2_size();
}
inline void CommandTransitionSetValueArchive::clear_unused2() {
  _impl_.unused2_.Clear();
}
inline std::string* CommandTransitionSetValueArchive::add_unused2() {
  std::string* _s = _internal_add_unused2();
  // @@protoc_insertion_point(field_add_mutable:KN.CommandTransitionSetValueArchive.unused2)
  return _s;
}
inline const std::string& CommandTransitionSetValueArchive::_internal_unused2(int index) const {
  return _impl_.unused2_.Get(index);
}
inline const std::string& CommandTransitionSetValueArchive::unused2(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandTransitionSetValueArchive.unused2)
  return _internal_unused2(index);
}
inline std::string* CommandTransitionSetValueArchive::mutable_unused2(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandTransitionSetValueArchive.unused2)
  return _impl_.unused2_.Mutable(index);
}
inline void CommandTransitionSetValueArchive::set_unused2(int index, const std::string& value) {
  _impl_.unused2_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:KN.CommandTransitionSetValueArchive.unused2)
}
inline void CommandTransitionSetValueArchive::set_unused2(int index, std::string&& value) {
  _impl_.unused2_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:KN.CommandTransitionSetValueArchive.unused2)
}
inline void CommandTransitionSetValueArchive::set_unused2(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.unused2_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KN.CommandTransitionSetValueArchive.unused2)
}
inline void CommandTransitionSetValueArchive::set_unused2(int index, const char* value, size_t size) {
  _impl_.unused2_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KN.CommandTransitionSetValueArchive.unused2)
}
inline std::string* CommandTransitionSetValueArchive::_internal_add_unused2() {
  return _impl_.unused2_.Add();
}
inline void CommandTransitionSetValueArchive::add_unused2(const std::string& value) {
  _impl_.unused2_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KN.CommandTransitionSetValueArchive.unused2)
}
inline void CommandTransitionSetValueArchive::add_unused2(std::string&& value) {
  _impl_.unused2_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KN.CommandTransitionSetValueArchive.unused2)
}
inline void CommandTransitionSetValueArchive::add_unused2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.unused2_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KN.CommandTransitionSetValueArchive.unused2)
}
inline void CommandTransitionSetValueArchive::add_unused2(const char* value, size_t size) {
  _impl_.unused2_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KN.CommandTransitionSetValueArchive.unused2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandTransitionSetValueArchive::unused2() const {
  // @@protoc_insertion_point(field_list:KN.CommandTransitionSetValueArchive.unused2)
  return _impl_.unused2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandTransitionSetValueArchive::mutable_unused2() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandTransitionSetValueArchive.unused2)
  return &_impl_.unused2_;
}

// repeated string unused3 = 7;
inline int CommandTransitionSetValueArchive::_internal_unused3_size() const {
  return _impl_.unused3_.size();
}
inline int CommandTransitionSetValueArchive::unused3_size() const {
  return _internal_unused3_size();
}
inline void CommandTransitionSetValueArchive::clear_unused3() {
  _impl_.unused3_.Clear();
}
inline std::string* CommandTransitionSetValueArchive::add_unused3() {
  std::string* _s = _internal_add_unused3();
  // @@protoc_insertion_point(field_add_mutable:KN.CommandTransitionSetValueArchive.unused3)
  return _s;
}
inline const std::string& CommandTransitionSetValueArchive::_internal_unused3(int index) const {
  return _impl_.unused3_.Get(index);
}
inline const std::string& CommandTransitionSetValueArchive::unused3(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandTransitionSetValueArchive.unused3)
  return _internal_unused3(index);
}
inline std::string* CommandTransitionSetValueArchive::mutable_unused3(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandTransitionSetValueArchive.unused3)
  return _impl_.unused3_.Mutable(index);
}
inline void CommandTransitionSetValueArchive::set_unused3(int index, const std::string& value) {
  _impl_.unused3_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:KN.CommandTransitionSetValueArchive.unused3)
}
inline void CommandTransitionSetValueArchive::set_unused3(int index, std::string&& value) {
  _impl_.unused3_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:KN.CommandTransitionSetValueArchive.unused3)
}
inline void CommandTransitionSetValueArchive::set_unused3(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.unused3_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KN.CommandTransitionSetValueArchive.unused3)
}
inline void CommandTransitionSetValueArchive::set_unused3(int index, const char* value, size_t size) {
  _impl_.unused3_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KN.CommandTransitionSetValueArchive.unused3)
}
inline std::string* CommandTransitionSetValueArchive::_internal_add_unused3() {
  return _impl_.unused3_.Add();
}
inline void CommandTransitionSetValueArchive::add_unused3(const std::string& value) {
  _impl_.unused3_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KN.CommandTransitionSetValueArchive.unused3)
}
inline void CommandTransitionSetValueArchive::add_unused3(std::string&& value) {
  _impl_.unused3_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KN.CommandTransitionSetValueArchive.unused3)
}
inline void CommandTransitionSetValueArchive::add_unused3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.unused3_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KN.CommandTransitionSetValueArchive.unused3)
}
inline void CommandTransitionSetValueArchive::add_unused3(const char* value, size_t size) {
  _impl_.unused3_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KN.CommandTransitionSetValueArchive.unused3)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandTransitionSetValueArchive::unused3() const {
  // @@protoc_insertion_point(field_list:KN.CommandTransitionSetValueArchive.unused3)
  return _impl_.unused3_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandTransitionSetValueArchive::mutable_unused3() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandTransitionSetValueArchive.unused3)
  return &_impl_.unused3_;
}

// repeated double durations = 8;
inline int CommandTransitionSetValueArchive::_internal_durations_size() const {
  return _impl_.durations_.size();
}
inline int CommandTransitionSetValueArchive::durations_size() const {
  return _internal_durations_size();
}
inline void CommandTransitionSetValueArchive::clear_durations() {
  _impl_.durations_.Clear();
}
inline double CommandTransitionSetValueArchive::_internal_durations(int index) const {
  return _impl_.durations_.Get(index);
}
inline double CommandTransitionSetValueArchive::durations(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandTransitionSetValueArchive.durations)
  return _internal_durations(index);
}
inline void CommandTransitionSetValueArchive::set_durations(int index, double value) {
  _impl_.durations_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandTransitionSetValueArchive.durations)
}
inline void CommandTransitionSetValueArchive::_internal_add_durations(double value) {
  _impl_.durations_.Add(value);
}
inline void CommandTransitionSetValueArchive::add_durations(double value) {
  _internal_add_durations(value);
  // @@protoc_insertion_point(field_add:KN.CommandTransitionSetValueArchive.durations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandTransitionSetValueArchive::_internal_durations() const {
  return _impl_.durations_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandTransitionSetValueArchive::durations() const {
  // @@protoc_insertion_point(field_list:KN.CommandTransitionSetValueArchive.durations)
  return _internal_durations();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandTransitionSetValueArchive::_internal_mutable_durations() {
  return &_impl_.durations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandTransitionSetValueArchive::mutable_durations() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandTransitionSetValueArchive.durations)
  return _internal_mutable_durations();
}

// repeated uint32 directions = 9;
inline int CommandTransitionSetValueArchive::_internal_directions_size() const {
  return _impl_.directions_.size();
}
inline int CommandTransitionSetValueArchive::directions_size() const {
  return _internal_directions_size();
}
inline void CommandTransitionSetValueArchive::clear_directions() {
  _impl_.directions_.Clear();
}
inline uint32_t CommandTransitionSetValueArchive::_internal_directions(int index) const {
  return _impl_.directions_.Get(index);
}
inline uint32_t CommandTransitionSetValueArchive::directions(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandTransitionSetValueArchive.directions)
  return _internal_directions(index);
}
inline void CommandTransitionSetValueArchive::set_directions(int index, uint32_t value) {
  _impl_.directions_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandTransitionSetValueArchive.directions)
}
inline void CommandTransitionSetValueArchive::_internal_add_directions(uint32_t value) {
  _impl_.directions_.Add(value);
}
inline void CommandTransitionSetValueArchive::add_directions(uint32_t value) {
  _internal_add_directions(value);
  // @@protoc_insertion_point(field_add:KN.CommandTransitionSetValueArchive.directions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CommandTransitionSetValueArchive::_internal_directions() const {
  return _impl_.directions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CommandTransitionSetValueArchive::directions() const {
  // @@protoc_insertion_point(field_list:KN.CommandTransitionSetValueArchive.directions)
  return _internal_directions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CommandTransitionSetValueArchive::_internal_mutable_directions() {
  return &_impl_.directions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CommandTransitionSetValueArchive::mutable_directions() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandTransitionSetValueArchive.directions)
  return _internal_mutable_directions();
}

// repeated bool isAutomatics = 10;
inline int CommandTransitionSetValueArchive::_internal_isautomatics_size() const {
  return _impl_.isautomatics_.size();
}
inline int CommandTransitionSetValueArchive::isautomatics_size() const {
  return _internal_isautomatics_size();
}
inline void CommandTransitionSetValueArchive::clear_isautomatics() {
  _impl_.isautomatics_.Clear();
}
inline bool CommandTransitionSetValueArchive::_internal_isautomatics(int index) const {
  return _impl_.isautomatics_.Get(index);
}
inline bool CommandTransitionSetValueArchive::isautomatics(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandTransitionSetValueArchive.isAutomatics)
  return _internal_isautomatics(index);
}
inline void CommandTransitionSetValueArchive::set_isautomatics(int index, bool value) {
  _impl_.isautomatics_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandTransitionSetValueArchive.isAutomatics)
}
inline void CommandTransitionSetValueArchive::_internal_add_isautomatics(bool value) {
  _impl_.isautomatics_.Add(value);
}
inline void CommandTransitionSetValueArchive::add_isautomatics(bool value) {
  _internal_add_isautomatics(value);
  // @@protoc_insertion_point(field_add:KN.CommandTransitionSetValueArchive.isAutomatics)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
CommandTransitionSetValueArchive::_internal_isautomatics() const {
  return _impl_.isautomatics_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
CommandTransitionSetValueArchive::isautomatics() const {
  // @@protoc_insertion_point(field_list:KN.CommandTransitionSetValueArchive.isAutomatics)
  return _internal_isautomatics();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
CommandTransitionSetValueArchive::_internal_mutable_isautomatics() {
  return &_impl_.isautomatics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
CommandTransitionSetValueArchive::mutable_isautomatics() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandTransitionSetValueArchive.isAutomatics)
  return _internal_mutable_isautomatics();
}

// repeated double delays = 11;
inline int CommandTransitionSetValueArchive::_internal_delays_size() const {
  return _impl_.delays_.size();
}
inline int CommandTransitionSetValueArchive::delays_size() const {
  return _internal_delays_size();
}
inline void CommandTransitionSetValueArchive::clear_delays() {
  _impl_.delays_.Clear();
}
inline double CommandTransitionSetValueArchive::_internal_delays(int index) const {
  return _impl_.delays_.Get(index);
}
inline double CommandTransitionSetValueArchive::delays(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandTransitionSetValueArchive.delays)
  return _internal_delays(index);
}
inline void CommandTransitionSetValueArchive::set_delays(int index, double value) {
  _impl_.delays_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandTransitionSetValueArchive.delays)
}
inline void CommandTransitionSetValueArchive::_internal_add_delays(double value) {
  _impl_.delays_.Add(value);
}
inline void CommandTransitionSetValueArchive::add_delays(double value) {
  _internal_add_delays(value);
  // @@protoc_insertion_point(field_add:KN.CommandTransitionSetValueArchive.delays)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandTransitionSetValueArchive::_internal_delays() const {
  return _impl_.delays_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandTransitionSetValueArchive::delays() const {
  // @@protoc_insertion_point(field_list:KN.CommandTransitionSetValueArchive.delays)
  return _internal_delays();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandTransitionSetValueArchive::_internal_mutable_delays() {
  return &_impl_.delays_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandTransitionSetValueArchive::mutable_delays() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandTransitionSetValueArchive.delays)
  return _internal_mutable_delays();
}

// -------------------------------------------------------------------

// CommandShowSetSlideNumberVisibilityArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandShowSetSlideNumberVisibilityArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandShowSetSlideNumberVisibilityArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandShowSetSlideNumberVisibilityArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandShowSetSlideNumberVisibilityArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetSlideNumberVisibilityArchive.super)
  return _internal_super();
}
inline void CommandShowSetSlideNumberVisibilityArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowSetSlideNumberVisibilityArchive.super)
}
inline ::TSK::CommandArchive* CommandShowSetSlideNumberVisibilityArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandShowSetSlideNumberVisibilityArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandShowSetSlideNumberVisibilityArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandShowSetSlideNumberVisibilityArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandShowSetSlideNumberVisibilityArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowSetSlideNumberVisibilityArchive.super)
  return _msg;
}
inline void CommandShowSetSlideNumberVisibilityArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowSetSlideNumberVisibilityArchive.super)
}

// required .TSP.Reference show = 2;
inline bool CommandShowSetSlideNumberVisibilityArchive::_internal_has_show() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.show_ != nullptr);
  return value;
}
inline bool CommandShowSetSlideNumberVisibilityArchive::has_show() const {
  return _internal_has_show();
}
inline const ::TSP::Reference& CommandShowSetSlideNumberVisibilityArchive::_internal_show() const {
  const ::TSP::Reference* p = _impl_.show_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowSetSlideNumberVisibilityArchive::show() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetSlideNumberVisibilityArchive.show)
  return _internal_show();
}
inline void CommandShowSetSlideNumberVisibilityArchive::unsafe_arena_set_allocated_show(
    ::TSP::Reference* show) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.show_);
  }
  _impl_.show_ = show;
  if (show) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowSetSlideNumberVisibilityArchive.show)
}
inline ::TSP::Reference* CommandShowSetSlideNumberVisibilityArchive::release_show() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.show_;
  _impl_.show_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowSetSlideNumberVisibilityArchive::unsafe_arena_release_show() {
  // @@protoc_insertion_point(field_release:KN.CommandShowSetSlideNumberVisibilityArchive.show)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.show_;
  _impl_.show_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowSetSlideNumberVisibilityArchive::_internal_mutable_show() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.show_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.show_ = p;
  }
  return _impl_.show_;
}
inline ::TSP::Reference* CommandShowSetSlideNumberVisibilityArchive::mutable_show() {
  ::TSP::Reference* _msg = _internal_mutable_show();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowSetSlideNumberVisibilityArchive.show)
  return _msg;
}
inline void CommandShowSetSlideNumberVisibilityArchive::set_allocated_show(::TSP::Reference* show) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.show_);
  }
  if (show) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show));
    if (message_arena != submessage_arena) {
      show = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.show_ = show;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowSetSlideNumberVisibilityArchive.show)
}

// required bool slideNumbersVisible = 3;
inline bool CommandShowSetSlideNumberVisibilityArchive::_internal_has_slidenumbersvisible() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandShowSetSlideNumberVisibilityArchive::has_slidenumbersvisible() const {
  return _internal_has_slidenumbersvisible();
}
inline void CommandShowSetSlideNumberVisibilityArchive::clear_slidenumbersvisible() {
  _impl_.slidenumbersvisible_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CommandShowSetSlideNumberVisibilityArchive::_internal_slidenumbersvisible() const {
  return _impl_.slidenumbersvisible_;
}
inline bool CommandShowSetSlideNumberVisibilityArchive::slidenumbersvisible() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetSlideNumberVisibilityArchive.slideNumbersVisible)
  return _internal_slidenumbersvisible();
}
inline void CommandShowSetSlideNumberVisibilityArchive::_internal_set_slidenumbersvisible(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.slidenumbersvisible_ = value;
}
inline void CommandShowSetSlideNumberVisibilityArchive::set_slidenumbersvisible(bool value) {
  _internal_set_slidenumbersvisible(value);
  // @@protoc_insertion_point(field_set:KN.CommandShowSetSlideNumberVisibilityArchive.slideNumbersVisible)
}

// optional .TSP.Reference providerUndo = 4;
inline bool CommandShowSetSlideNumberVisibilityArchive::_internal_has_providerundo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.providerundo_ != nullptr);
  return value;
}
inline bool CommandShowSetSlideNumberVisibilityArchive::has_providerundo() const {
  return _internal_has_providerundo();
}
inline const ::TSP::Reference& CommandShowSetSlideNumberVisibilityArchive::_internal_providerundo() const {
  const ::TSP::Reference* p = _impl_.providerundo_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowSetSlideNumberVisibilityArchive::providerundo() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetSlideNumberVisibilityArchive.providerUndo)
  return _internal_providerundo();
}
inline void CommandShowSetSlideNumberVisibilityArchive::unsafe_arena_set_allocated_providerundo(
    ::TSP::Reference* providerundo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.providerundo_);
  }
  _impl_.providerundo_ = providerundo;
  if (providerundo) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowSetSlideNumberVisibilityArchive.providerUndo)
}
inline ::TSP::Reference* CommandShowSetSlideNumberVisibilityArchive::release_providerundo() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.providerundo_;
  _impl_.providerundo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowSetSlideNumberVisibilityArchive::unsafe_arena_release_providerundo() {
  // @@protoc_insertion_point(field_release:KN.CommandShowSetSlideNumberVisibilityArchive.providerUndo)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.providerundo_;
  _impl_.providerundo_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowSetSlideNumberVisibilityArchive::_internal_mutable_providerundo() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.providerundo_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.providerundo_ = p;
  }
  return _impl_.providerundo_;
}
inline ::TSP::Reference* CommandShowSetSlideNumberVisibilityArchive::mutable_providerundo() {
  ::TSP::Reference* _msg = _internal_mutable_providerundo();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowSetSlideNumberVisibilityArchive.providerUndo)
  return _msg;
}
inline void CommandShowSetSlideNumberVisibilityArchive::set_allocated_providerundo(::TSP::Reference* providerundo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.providerundo_);
  }
  if (providerundo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(providerundo));
    if (message_arena != submessage_arena) {
      providerundo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, providerundo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.providerundo_ = providerundo;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowSetSlideNumberVisibilityArchive.providerUndo)
}

// -------------------------------------------------------------------

// CommandMasterRescaleArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandMasterRescaleArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandMasterRescaleArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandMasterRescaleArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandMasterRescaleArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandMasterRescaleArchive.super)
  return _internal_super();
}
inline void CommandMasterRescaleArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandMasterRescaleArchive.super)
}
inline ::TSK::CommandArchive* CommandMasterRescaleArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandMasterRescaleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandMasterRescaleArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandMasterRescaleArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandMasterRescaleArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandMasterRescaleArchive.super)
  return _msg;
}
inline void CommandMasterRescaleArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandMasterRescaleArchive.super)
}

// required .TSP.Reference master = 2;
inline bool CommandMasterRescaleArchive::_internal_has_master() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.master_ != nullptr);
  return value;
}
inline bool CommandMasterRescaleArchive::has_master() const {
  return _internal_has_master();
}
inline const ::TSP::Reference& CommandMasterRescaleArchive::_internal_master() const {
  const ::TSP::Reference* p = _impl_.master_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandMasterRescaleArchive::master() const {
  // @@protoc_insertion_point(field_get:KN.CommandMasterRescaleArchive.master)
  return _internal_master();
}
inline void CommandMasterRescaleArchive::unsafe_arena_set_allocated_master(
    ::TSP::Reference* master) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.master_);
  }
  _impl_.master_ = master;
  if (master) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandMasterRescaleArchive.master)
}
inline ::TSP::Reference* CommandMasterRescaleArchive::release_master() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.master_;
  _impl_.master_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandMasterRescaleArchive::unsafe_arena_release_master() {
  // @@protoc_insertion_point(field_release:KN.CommandMasterRescaleArchive.master)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.master_;
  _impl_.master_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandMasterRescaleArchive::_internal_mutable_master() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.master_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.master_ = p;
  }
  return _impl_.master_;
}
inline ::TSP::Reference* CommandMasterRescaleArchive::mutable_master() {
  ::TSP::Reference* _msg = _internal_mutable_master();
  // @@protoc_insertion_point(field_mutable:KN.CommandMasterRescaleArchive.master)
  return _msg;
}
inline void CommandMasterRescaleArchive::set_allocated_master(::TSP::Reference* master) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.master_);
  }
  if (master) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(master));
    if (message_arena != submessage_arena) {
      master = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, master, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.master_ = master;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandMasterRescaleArchive.master)
}

// -------------------------------------------------------------------

// CommandMasterSetThumbnailTextArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandMasterSetThumbnailTextArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandMasterSetThumbnailTextArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandMasterSetThumbnailTextArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandMasterSetThumbnailTextArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandMasterSetThumbnailTextArchive.super)
  return _internal_super();
}
inline void CommandMasterSetThumbnailTextArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandMasterSetThumbnailTextArchive.super)
}
inline ::TSK::CommandArchive* CommandMasterSetThumbnailTextArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandMasterSetThumbnailTextArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandMasterSetThumbnailTextArchive.super)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandMasterSetThumbnailTextArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandMasterSetThumbnailTextArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandMasterSetThumbnailTextArchive.super)
  return _msg;
}
inline void CommandMasterSetThumbnailTextArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandMasterSetThumbnailTextArchive.super)
}

// required .TSP.Reference master = 2;
inline bool CommandMasterSetThumbnailTextArchive::_internal_has_master() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.master_ != nullptr);
  return value;
}
inline bool CommandMasterSetThumbnailTextArchive::has_master() const {
  return _internal_has_master();
}
inline const ::TSP::Reference& CommandMasterSetThumbnailTextArchive::_internal_master() const {
  const ::TSP::Reference* p = _impl_.master_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandMasterSetThumbnailTextArchive::master() const {
  // @@protoc_insertion_point(field_get:KN.CommandMasterSetThumbnailTextArchive.master)
  return _internal_master();
}
inline void CommandMasterSetThumbnailTextArchive::unsafe_arena_set_allocated_master(
    ::TSP::Reference* master) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.master_);
  }
  _impl_.master_ = master;
  if (master) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandMasterSetThumbnailTextArchive.master)
}
inline ::TSP::Reference* CommandMasterSetThumbnailTextArchive::release_master() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.master_;
  _impl_.master_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandMasterSetThumbnailTextArchive::unsafe_arena_release_master() {
  // @@protoc_insertion_point(field_release:KN.CommandMasterSetThumbnailTextArchive.master)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.master_;
  _impl_.master_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandMasterSetThumbnailTextArchive::_internal_mutable_master() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.master_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.master_ = p;
  }
  return _impl_.master_;
}
inline ::TSP::Reference* CommandMasterSetThumbnailTextArchive::mutable_master() {
  ::TSP::Reference* _msg = _internal_mutable_master();
  // @@protoc_insertion_point(field_mutable:KN.CommandMasterSetThumbnailTextArchive.master)
  return _msg;
}
inline void CommandMasterSetThumbnailTextArchive::set_allocated_master(::TSP::Reference* master) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.master_);
  }
  if (master) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(master));
    if (message_arena != submessage_arena) {
      master = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, master, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.master_ = master;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandMasterSetThumbnailTextArchive.master)
}

// required bool is_body = 3;
inline bool CommandMasterSetThumbnailTextArchive::_internal_has_is_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandMasterSetThumbnailTextArchive::has_is_body() const {
  return _internal_has_is_body();
}
inline void CommandMasterSetThumbnailTextArchive::clear_is_body() {
  _impl_.is_body_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CommandMasterSetThumbnailTextArchive::_internal_is_body() const {
  return _impl_.is_body_;
}
inline bool CommandMasterSetThumbnailTextArchive::is_body() const {
  // @@protoc_insertion_point(field_get:KN.CommandMasterSetThumbnailTextArchive.is_body)
  return _internal_is_body();
}
inline void CommandMasterSetThumbnailTextArchive::_internal_set_is_body(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.is_body_ = value;
}
inline void CommandMasterSetThumbnailTextArchive::set_is_body(bool value) {
  _internal_set_is_body(value);
  // @@protoc_insertion_point(field_set:KN.CommandMasterSetThumbnailTextArchive.is_body)
}

// optional string new_text = 4;
inline bool CommandMasterSetThumbnailTextArchive::_internal_has_new_text() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandMasterSetThumbnailTextArchive::has_new_text() const {
  return _internal_has_new_text();
}
inline void CommandMasterSetThumbnailTextArchive::clear_new_text() {
  _impl_.new_text_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandMasterSetThumbnailTextArchive::new_text() const {
  // @@protoc_insertion_point(field_get:KN.CommandMasterSetThumbnailTextArchive.new_text)
  return _internal_new_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandMasterSetThumbnailTextArchive::set_new_text(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.new_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.CommandMasterSetThumbnailTextArchive.new_text)
}
inline std::string* CommandMasterSetThumbnailTextArchive::mutable_new_text() {
  std::string* _s = _internal_mutable_new_text();
  // @@protoc_insertion_point(field_mutable:KN.CommandMasterSetThumbnailTextArchive.new_text)
  return _s;
}
inline const std::string& CommandMasterSetThumbnailTextArchive::_internal_new_text() const {
  return _impl_.new_text_.Get();
}
inline void CommandMasterSetThumbnailTextArchive::_internal_set_new_text(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.new_text_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandMasterSetThumbnailTextArchive::_internal_mutable_new_text() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.new_text_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandMasterSetThumbnailTextArchive::release_new_text() {
  // @@protoc_insertion_point(field_release:KN.CommandMasterSetThumbnailTextArchive.new_text)
  if (!_internal_has_new_text()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.new_text_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.new_text_.IsDefault()) {
    _impl_.new_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandMasterSetThumbnailTextArchive::set_allocated_new_text(std::string* new_text) {
  if (new_text != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.new_text_.SetAllocated(new_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.new_text_.IsDefault()) {
    _impl_.new_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.CommandMasterSetThumbnailTextArchive.new_text)
}

// optional string old_text = 5;
inline bool CommandMasterSetThumbnailTextArchive::_internal_has_old_text() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandMasterSetThumbnailTextArchive::has_old_text() const {
  return _internal_has_old_text();
}
inline void CommandMasterSetThumbnailTextArchive::clear_old_text() {
  _impl_.old_text_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CommandMasterSetThumbnailTextArchive::old_text() const {
  // @@protoc_insertion_point(field_get:KN.CommandMasterSetThumbnailTextArchive.old_text)
  return _internal_old_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandMasterSetThumbnailTextArchive::set_old_text(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.old_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.CommandMasterSetThumbnailTextArchive.old_text)
}
inline std::string* CommandMasterSetThumbnailTextArchive::mutable_old_text() {
  std::string* _s = _internal_mutable_old_text();
  // @@protoc_insertion_point(field_mutable:KN.CommandMasterSetThumbnailTextArchive.old_text)
  return _s;
}
inline const std::string& CommandMasterSetThumbnailTextArchive::_internal_old_text() const {
  return _impl_.old_text_.Get();
}
inline void CommandMasterSetThumbnailTextArchive::_internal_set_old_text(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.old_text_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandMasterSetThumbnailTextArchive::_internal_mutable_old_text() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.old_text_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandMasterSetThumbnailTextArchive::release_old_text() {
  // @@protoc_insertion_point(field_release:KN.CommandMasterSetThumbnailTextArchive.old_text)
  if (!_internal_has_old_text()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.old_text_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.old_text_.IsDefault()) {
    _impl_.old_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandMasterSetThumbnailTextArchive::set_allocated_old_text(std::string* old_text) {
  if (old_text != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.old_text_.SetAllocated(old_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.old_text_.IsDefault()) {
    _impl_.old_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.CommandMasterSetThumbnailTextArchive.old_text)
}

// -------------------------------------------------------------------

// CommandMasterSetBodyStylesArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandMasterSetBodyStylesArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandMasterSetBodyStylesArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandMasterSetBodyStylesArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandMasterSetBodyStylesArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandMasterSetBodyStylesArchive.super)
  return _internal_super();
}
inline void CommandMasterSetBodyStylesArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandMasterSetBodyStylesArchive.super)
}
inline ::TSK::CommandArchive* CommandMasterSetBodyStylesArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandMasterSetBodyStylesArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandMasterSetBodyStylesArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandMasterSetBodyStylesArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandMasterSetBodyStylesArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandMasterSetBodyStylesArchive.super)
  return _msg;
}
inline void CommandMasterSetBodyStylesArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandMasterSetBodyStylesArchive.super)
}

// required .TSP.Reference master = 2;
inline bool CommandMasterSetBodyStylesArchive::_internal_has_master() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.master_ != nullptr);
  return value;
}
inline bool CommandMasterSetBodyStylesArchive::has_master() const {
  return _internal_has_master();
}
inline const ::TSP::Reference& CommandMasterSetBodyStylesArchive::_internal_master() const {
  const ::TSP::Reference* p = _impl_.master_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandMasterSetBodyStylesArchive::master() const {
  // @@protoc_insertion_point(field_get:KN.CommandMasterSetBodyStylesArchive.master)
  return _internal_master();
}
inline void CommandMasterSetBodyStylesArchive::unsafe_arena_set_allocated_master(
    ::TSP::Reference* master) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.master_);
  }
  _impl_.master_ = master;
  if (master) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandMasterSetBodyStylesArchive.master)
}
inline ::TSP::Reference* CommandMasterSetBodyStylesArchive::release_master() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.master_;
  _impl_.master_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandMasterSetBodyStylesArchive::unsafe_arena_release_master() {
  // @@protoc_insertion_point(field_release:KN.CommandMasterSetBodyStylesArchive.master)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.master_;
  _impl_.master_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandMasterSetBodyStylesArchive::_internal_mutable_master() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.master_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.master_ = p;
  }
  return _impl_.master_;
}
inline ::TSP::Reference* CommandMasterSetBodyStylesArchive::mutable_master() {
  ::TSP::Reference* _msg = _internal_mutable_master();
  // @@protoc_insertion_point(field_mutable:KN.CommandMasterSetBodyStylesArchive.master)
  return _msg;
}
inline void CommandMasterSetBodyStylesArchive::set_allocated_master(::TSP::Reference* master) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.master_);
  }
  if (master) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(master));
    if (message_arena != submessage_arena) {
      master = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, master, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.master_ = master;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandMasterSetBodyStylesArchive.master)
}

// repeated .TSP.Reference new_paragraph_styles = 3;
inline int CommandMasterSetBodyStylesArchive::_internal_new_paragraph_styles_size() const {
  return _impl_.new_paragraph_styles_.size();
}
inline int CommandMasterSetBodyStylesArchive::new_paragraph_styles_size() const {
  return _internal_new_paragraph_styles_size();
}
inline ::TSP::Reference* CommandMasterSetBodyStylesArchive::mutable_new_paragraph_styles(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandMasterSetBodyStylesArchive.new_paragraph_styles)
  return _impl_.new_paragraph_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandMasterSetBodyStylesArchive::mutable_new_paragraph_styles() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandMasterSetBodyStylesArchive.new_paragraph_styles)
  return &_impl_.new_paragraph_styles_;
}
inline const ::TSP::Reference& CommandMasterSetBodyStylesArchive::_internal_new_paragraph_styles(int index) const {
  return _impl_.new_paragraph_styles_.Get(index);
}
inline const ::TSP::Reference& CommandMasterSetBodyStylesArchive::new_paragraph_styles(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandMasterSetBodyStylesArchive.new_paragraph_styles)
  return _internal_new_paragraph_styles(index);
}
inline ::TSP::Reference* CommandMasterSetBodyStylesArchive::_internal_add_new_paragraph_styles() {
  return _impl_.new_paragraph_styles_.Add();
}
inline ::TSP::Reference* CommandMasterSetBodyStylesArchive::add_new_paragraph_styles() {
  ::TSP::Reference* _add = _internal_add_new_paragraph_styles();
  // @@protoc_insertion_point(field_add:KN.CommandMasterSetBodyStylesArchive.new_paragraph_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandMasterSetBodyStylesArchive::new_paragraph_styles() const {
  // @@protoc_insertion_point(field_list:KN.CommandMasterSetBodyStylesArchive.new_paragraph_styles)
  return _impl_.new_paragraph_styles_;
}

// repeated .TSP.Reference new_list_styles = 4;
inline int CommandMasterSetBodyStylesArchive::_internal_new_list_styles_size() const {
  return _impl_.new_list_styles_.size();
}
inline int CommandMasterSetBodyStylesArchive::new_list_styles_size() const {
  return _internal_new_list_styles_size();
}
inline ::TSP::Reference* CommandMasterSetBodyStylesArchive::mutable_new_list_styles(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandMasterSetBodyStylesArchive.new_list_styles)
  return _impl_.new_list_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandMasterSetBodyStylesArchive::mutable_new_list_styles() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandMasterSetBodyStylesArchive.new_list_styles)
  return &_impl_.new_list_styles_;
}
inline const ::TSP::Reference& CommandMasterSetBodyStylesArchive::_internal_new_list_styles(int index) const {
  return _impl_.new_list_styles_.Get(index);
}
inline const ::TSP::Reference& CommandMasterSetBodyStylesArchive::new_list_styles(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandMasterSetBodyStylesArchive.new_list_styles)
  return _internal_new_list_styles(index);
}
inline ::TSP::Reference* CommandMasterSetBodyStylesArchive::_internal_add_new_list_styles() {
  return _impl_.new_list_styles_.Add();
}
inline ::TSP::Reference* CommandMasterSetBodyStylesArchive::add_new_list_styles() {
  ::TSP::Reference* _add = _internal_add_new_list_styles();
  // @@protoc_insertion_point(field_add:KN.CommandMasterSetBodyStylesArchive.new_list_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandMasterSetBodyStylesArchive::new_list_styles() const {
  // @@protoc_insertion_point(field_list:KN.CommandMasterSetBodyStylesArchive.new_list_styles)
  return _impl_.new_list_styles_;
}

// repeated .TSP.Reference old_paragraph_styles = 5;
inline int CommandMasterSetBodyStylesArchive::_internal_old_paragraph_styles_size() const {
  return _impl_.old_paragraph_styles_.size();
}
inline int CommandMasterSetBodyStylesArchive::old_paragraph_styles_size() const {
  return _internal_old_paragraph_styles_size();
}
inline ::TSP::Reference* CommandMasterSetBodyStylesArchive::mutable_old_paragraph_styles(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandMasterSetBodyStylesArchive.old_paragraph_styles)
  return _impl_.old_paragraph_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandMasterSetBodyStylesArchive::mutable_old_paragraph_styles() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandMasterSetBodyStylesArchive.old_paragraph_styles)
  return &_impl_.old_paragraph_styles_;
}
inline const ::TSP::Reference& CommandMasterSetBodyStylesArchive::_internal_old_paragraph_styles(int index) const {
  return _impl_.old_paragraph_styles_.Get(index);
}
inline const ::TSP::Reference& CommandMasterSetBodyStylesArchive::old_paragraph_styles(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandMasterSetBodyStylesArchive.old_paragraph_styles)
  return _internal_old_paragraph_styles(index);
}
inline ::TSP::Reference* CommandMasterSetBodyStylesArchive::_internal_add_old_paragraph_styles() {
  return _impl_.old_paragraph_styles_.Add();
}
inline ::TSP::Reference* CommandMasterSetBodyStylesArchive::add_old_paragraph_styles() {
  ::TSP::Reference* _add = _internal_add_old_paragraph_styles();
  // @@protoc_insertion_point(field_add:KN.CommandMasterSetBodyStylesArchive.old_paragraph_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandMasterSetBodyStylesArchive::old_paragraph_styles() const {
  // @@protoc_insertion_point(field_list:KN.CommandMasterSetBodyStylesArchive.old_paragraph_styles)
  return _impl_.old_paragraph_styles_;
}

// repeated .TSP.Reference old_list_styles = 6;
inline int CommandMasterSetBodyStylesArchive::_internal_old_list_styles_size() const {
  return _impl_.old_list_styles_.size();
}
inline int CommandMasterSetBodyStylesArchive::old_list_styles_size() const {
  return _internal_old_list_styles_size();
}
inline ::TSP::Reference* CommandMasterSetBodyStylesArchive::mutable_old_list_styles(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandMasterSetBodyStylesArchive.old_list_styles)
  return _impl_.old_list_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandMasterSetBodyStylesArchive::mutable_old_list_styles() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandMasterSetBodyStylesArchive.old_list_styles)
  return &_impl_.old_list_styles_;
}
inline const ::TSP::Reference& CommandMasterSetBodyStylesArchive::_internal_old_list_styles(int index) const {
  return _impl_.old_list_styles_.Get(index);
}
inline const ::TSP::Reference& CommandMasterSetBodyStylesArchive::old_list_styles(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandMasterSetBodyStylesArchive.old_list_styles)
  return _internal_old_list_styles(index);
}
inline ::TSP::Reference* CommandMasterSetBodyStylesArchive::_internal_add_old_list_styles() {
  return _impl_.old_list_styles_.Add();
}
inline ::TSP::Reference* CommandMasterSetBodyStylesArchive::add_old_list_styles() {
  ::TSP::Reference* _add = _internal_add_old_list_styles();
  // @@protoc_insertion_point(field_add:KN.CommandMasterSetBodyStylesArchive.old_list_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandMasterSetBodyStylesArchive::old_list_styles() const {
  // @@protoc_insertion_point(field_list:KN.CommandMasterSetBodyStylesArchive.old_list_styles)
  return _impl_.old_list_styles_;
}

// -------------------------------------------------------------------

// CommandSlideApplyThemeArchive

// required .TSS.ApplyThemeChildCommandArchive super = 1;
inline bool CommandSlideApplyThemeArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSlideApplyThemeArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::ApplyThemeChildCommandArchive& CommandSlideApplyThemeArchive::_internal_super() const {
  const ::TSS::ApplyThemeChildCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::ApplyThemeChildCommandArchive&>(
      ::TSS::_ApplyThemeChildCommandArchive_default_instance_);
}
inline const ::TSS::ApplyThemeChildCommandArchive& CommandSlideApplyThemeArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideApplyThemeArchive.super)
  return _internal_super();
}
inline void CommandSlideApplyThemeArchive::unsafe_arena_set_allocated_super(
    ::TSS::ApplyThemeChildCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideApplyThemeArchive.super)
}
inline ::TSS::ApplyThemeChildCommandArchive* CommandSlideApplyThemeArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSS::ApplyThemeChildCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSS::ApplyThemeChildCommandArchive* CommandSlideApplyThemeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideApplyThemeArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSS::ApplyThemeChildCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSS::ApplyThemeChildCommandArchive* CommandSlideApplyThemeArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::ApplyThemeChildCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSS::ApplyThemeChildCommandArchive* CommandSlideApplyThemeArchive::mutable_super() {
  ::TSS::ApplyThemeChildCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideApplyThemeArchive.super)
  return _msg;
}
inline void CommandSlideApplyThemeArchive::set_allocated_super(::TSS::ApplyThemeChildCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideApplyThemeArchive.super)
}

// required .KN.MasterChangeBlobArchive blob = 2;
inline bool CommandSlideApplyThemeArchive::_internal_has_blob() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.blob_ != nullptr);
  return value;
}
inline bool CommandSlideApplyThemeArchive::has_blob() const {
  return _internal_has_blob();
}
inline const ::KN::MasterChangeBlobArchive& CommandSlideApplyThemeArchive::_internal_blob() const {
  const ::KN::MasterChangeBlobArchive* p = _impl_.blob_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::MasterChangeBlobArchive&>(
      ::KN::_MasterChangeBlobArchive_default_instance_);
}
inline const ::KN::MasterChangeBlobArchive& CommandSlideApplyThemeArchive::blob() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideApplyThemeArchive.blob)
  return _internal_blob();
}
inline void CommandSlideApplyThemeArchive::unsafe_arena_set_allocated_blob(
    ::KN::MasterChangeBlobArchive* blob) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.blob_);
  }
  _impl_.blob_ = blob;
  if (blob) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideApplyThemeArchive.blob)
}
inline ::KN::MasterChangeBlobArchive* CommandSlideApplyThemeArchive::release_blob() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::KN::MasterChangeBlobArchive* temp = _impl_.blob_;
  _impl_.blob_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::MasterChangeBlobArchive* CommandSlideApplyThemeArchive::unsafe_arena_release_blob() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideApplyThemeArchive.blob)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::KN::MasterChangeBlobArchive* temp = _impl_.blob_;
  _impl_.blob_ = nullptr;
  return temp;
}
inline ::KN::MasterChangeBlobArchive* CommandSlideApplyThemeArchive::_internal_mutable_blob() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.blob_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::MasterChangeBlobArchive>(GetArenaForAllocation());
    _impl_.blob_ = p;
  }
  return _impl_.blob_;
}
inline ::KN::MasterChangeBlobArchive* CommandSlideApplyThemeArchive::mutable_blob() {
  ::KN::MasterChangeBlobArchive* _msg = _internal_mutable_blob();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideApplyThemeArchive.blob)
  return _msg;
}
inline void CommandSlideApplyThemeArchive::set_allocated_blob(::KN::MasterChangeBlobArchive* blob) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.blob_);
  }
  if (blob) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blob));
    if (message_arena != submessage_arena) {
      blob = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blob, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.blob_ = blob;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideApplyThemeArchive.blob)
}

// -------------------------------------------------------------------

// CommandChangeMasterSlideArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandChangeMasterSlideArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandChangeMasterSlideArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandChangeMasterSlideArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandChangeMasterSlideArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandChangeMasterSlideArchive.super)
  return _internal_super();
}
inline void CommandChangeMasterSlideArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandChangeMasterSlideArchive.super)
}
inline ::TSK::CommandArchive* CommandChangeMasterSlideArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandChangeMasterSlideArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandChangeMasterSlideArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandChangeMasterSlideArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandChangeMasterSlideArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandChangeMasterSlideArchive.super)
  return _msg;
}
inline void CommandChangeMasterSlideArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandChangeMasterSlideArchive.super)
}

// required .TSP.Reference slide = 2;
inline bool CommandChangeMasterSlideArchive::_internal_has_slide() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slide_ != nullptr);
  return value;
}
inline bool CommandChangeMasterSlideArchive::has_slide() const {
  return _internal_has_slide();
}
inline const ::TSP::Reference& CommandChangeMasterSlideArchive::_internal_slide() const {
  const ::TSP::Reference* p = _impl_.slide_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandChangeMasterSlideArchive::slide() const {
  // @@protoc_insertion_point(field_get:KN.CommandChangeMasterSlideArchive.slide)
  return _internal_slide();
}
inline void CommandChangeMasterSlideArchive::unsafe_arena_set_allocated_slide(
    ::TSP::Reference* slide) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_);
  }
  _impl_.slide_ = slide;
  if (slide) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandChangeMasterSlideArchive.slide)
}
inline ::TSP::Reference* CommandChangeMasterSlideArchive::release_slide() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.slide_;
  _impl_.slide_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandChangeMasterSlideArchive::unsafe_arena_release_slide() {
  // @@protoc_insertion_point(field_release:KN.CommandChangeMasterSlideArchive.slide)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.slide_;
  _impl_.slide_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandChangeMasterSlideArchive::_internal_mutable_slide() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.slide_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.slide_ = p;
  }
  return _impl_.slide_;
}
inline ::TSP::Reference* CommandChangeMasterSlideArchive::mutable_slide() {
  ::TSP::Reference* _msg = _internal_mutable_slide();
  // @@protoc_insertion_point(field_mutable:KN.CommandChangeMasterSlideArchive.slide)
  return _msg;
}
inline void CommandChangeMasterSlideArchive::set_allocated_slide(::TSP::Reference* slide) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_);
  }
  if (slide) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide));
    if (message_arena != submessage_arena) {
      slide = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.slide_ = slide;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandChangeMasterSlideArchive.slide)
}

// required .TSP.Reference master = 3;
inline bool CommandChangeMasterSlideArchive::_internal_has_master() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.master_ != nullptr);
  return value;
}
inline bool CommandChangeMasterSlideArchive::has_master() const {
  return _internal_has_master();
}
inline const ::TSP::Reference& CommandChangeMasterSlideArchive::_internal_master() const {
  const ::TSP::Reference* p = _impl_.master_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandChangeMasterSlideArchive::master() const {
  // @@protoc_insertion_point(field_get:KN.CommandChangeMasterSlideArchive.master)
  return _internal_master();
}
inline void CommandChangeMasterSlideArchive::unsafe_arena_set_allocated_master(
    ::TSP::Reference* master) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.master_);
  }
  _impl_.master_ = master;
  if (master) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandChangeMasterSlideArchive.master)
}
inline ::TSP::Reference* CommandChangeMasterSlideArchive::release_master() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.master_;
  _impl_.master_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandChangeMasterSlideArchive::unsafe_arena_release_master() {
  // @@protoc_insertion_point(field_release:KN.CommandChangeMasterSlideArchive.master)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.master_;
  _impl_.master_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandChangeMasterSlideArchive::_internal_mutable_master() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.master_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.master_ = p;
  }
  return _impl_.master_;
}
inline ::TSP::Reference* CommandChangeMasterSlideArchive::mutable_master() {
  ::TSP::Reference* _msg = _internal_mutable_master();
  // @@protoc_insertion_point(field_mutable:KN.CommandChangeMasterSlideArchive.master)
  return _msg;
}
inline void CommandChangeMasterSlideArchive::set_allocated_master(::TSP::Reference* master) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.master_);
  }
  if (master) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(master));
    if (message_arena != submessage_arena) {
      master = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, master, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.master_ = master;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandChangeMasterSlideArchive.master)
}

// required .TSP.Reference placeholder_commands = 4;
inline bool CommandChangeMasterSlideArchive::_internal_has_placeholder_commands() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.placeholder_commands_ != nullptr);
  return value;
}
inline bool CommandChangeMasterSlideArchive::has_placeholder_commands() const {
  return _internal_has_placeholder_commands();
}
inline const ::TSP::Reference& CommandChangeMasterSlideArchive::_internal_placeholder_commands() const {
  const ::TSP::Reference* p = _impl_.placeholder_commands_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandChangeMasterSlideArchive::placeholder_commands() const {
  // @@protoc_insertion_point(field_get:KN.CommandChangeMasterSlideArchive.placeholder_commands)
  return _internal_placeholder_commands();
}
inline void CommandChangeMasterSlideArchive::unsafe_arena_set_allocated_placeholder_commands(
    ::TSP::Reference* placeholder_commands) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.placeholder_commands_);
  }
  _impl_.placeholder_commands_ = placeholder_commands;
  if (placeholder_commands) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandChangeMasterSlideArchive.placeholder_commands)
}
inline ::TSP::Reference* CommandChangeMasterSlideArchive::release_placeholder_commands() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.placeholder_commands_;
  _impl_.placeholder_commands_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandChangeMasterSlideArchive::unsafe_arena_release_placeholder_commands() {
  // @@protoc_insertion_point(field_release:KN.CommandChangeMasterSlideArchive.placeholder_commands)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.placeholder_commands_;
  _impl_.placeholder_commands_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandChangeMasterSlideArchive::_internal_mutable_placeholder_commands() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.placeholder_commands_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.placeholder_commands_ = p;
  }
  return _impl_.placeholder_commands_;
}
inline ::TSP::Reference* CommandChangeMasterSlideArchive::mutable_placeholder_commands() {
  ::TSP::Reference* _msg = _internal_mutable_placeholder_commands();
  // @@protoc_insertion_point(field_mutable:KN.CommandChangeMasterSlideArchive.placeholder_commands)
  return _msg;
}
inline void CommandChangeMasterSlideArchive::set_allocated_placeholder_commands(::TSP::Reference* placeholder_commands) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.placeholder_commands_);
  }
  if (placeholder_commands) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(placeholder_commands));
    if (message_arena != submessage_arena) {
      placeholder_commands = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, placeholder_commands, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.placeholder_commands_ = placeholder_commands;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandChangeMasterSlideArchive.placeholder_commands)
}

// -------------------------------------------------------------------

// CommandSlidePrimitiveSetMasterArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlidePrimitiveSetMasterArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSlidePrimitiveSetMasterArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlidePrimitiveSetMasterArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlidePrimitiveSetMasterArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlidePrimitiveSetMasterArchive.super)
  return _internal_super();
}
inline void CommandSlidePrimitiveSetMasterArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlidePrimitiveSetMasterArchive.super)
}
inline ::TSK::CommandArchive* CommandSlidePrimitiveSetMasterArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlidePrimitiveSetMasterArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlidePrimitiveSetMasterArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlidePrimitiveSetMasterArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSlidePrimitiveSetMasterArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlidePrimitiveSetMasterArchive.super)
  return _msg;
}
inline void CommandSlidePrimitiveSetMasterArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlidePrimitiveSetMasterArchive.super)
}

// required .TSP.Reference slide = 2;
inline bool CommandSlidePrimitiveSetMasterArchive::_internal_has_slide() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slide_ != nullptr);
  return value;
}
inline bool CommandSlidePrimitiveSetMasterArchive::has_slide() const {
  return _internal_has_slide();
}
inline const ::TSP::Reference& CommandSlidePrimitiveSetMasterArchive::_internal_slide() const {
  const ::TSP::Reference* p = _impl_.slide_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlidePrimitiveSetMasterArchive::slide() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlidePrimitiveSetMasterArchive.slide)
  return _internal_slide();
}
inline void CommandSlidePrimitiveSetMasterArchive::unsafe_arena_set_allocated_slide(
    ::TSP::Reference* slide) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_);
  }
  _impl_.slide_ = slide;
  if (slide) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlidePrimitiveSetMasterArchive.slide)
}
inline ::TSP::Reference* CommandSlidePrimitiveSetMasterArchive::release_slide() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.slide_;
  _impl_.slide_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlidePrimitiveSetMasterArchive::unsafe_arena_release_slide() {
  // @@protoc_insertion_point(field_release:KN.CommandSlidePrimitiveSetMasterArchive.slide)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.slide_;
  _impl_.slide_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlidePrimitiveSetMasterArchive::_internal_mutable_slide() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.slide_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.slide_ = p;
  }
  return _impl_.slide_;
}
inline ::TSP::Reference* CommandSlidePrimitiveSetMasterArchive::mutable_slide() {
  ::TSP::Reference* _msg = _internal_mutable_slide();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlidePrimitiveSetMasterArchive.slide)
  return _msg;
}
inline void CommandSlidePrimitiveSetMasterArchive::set_allocated_slide(::TSP::Reference* slide) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slide_);
  }
  if (slide) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide));
    if (message_arena != submessage_arena) {
      slide = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.slide_ = slide;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlidePrimitiveSetMasterArchive.slide)
}

// required .TSP.Reference master = 3;
inline bool CommandSlidePrimitiveSetMasterArchive::_internal_has_master() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.master_ != nullptr);
  return value;
}
inline bool CommandSlidePrimitiveSetMasterArchive::has_master() const {
  return _internal_has_master();
}
inline const ::TSP::Reference& CommandSlidePrimitiveSetMasterArchive::_internal_master() const {
  const ::TSP::Reference* p = _impl_.master_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlidePrimitiveSetMasterArchive::master() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlidePrimitiveSetMasterArchive.master)
  return _internal_master();
}
inline void CommandSlidePrimitiveSetMasterArchive::unsafe_arena_set_allocated_master(
    ::TSP::Reference* master) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.master_);
  }
  _impl_.master_ = master;
  if (master) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlidePrimitiveSetMasterArchive.master)
}
inline ::TSP::Reference* CommandSlidePrimitiveSetMasterArchive::release_master() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.master_;
  _impl_.master_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlidePrimitiveSetMasterArchive::unsafe_arena_release_master() {
  // @@protoc_insertion_point(field_release:KN.CommandSlidePrimitiveSetMasterArchive.master)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.master_;
  _impl_.master_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlidePrimitiveSetMasterArchive::_internal_mutable_master() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.master_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.master_ = p;
  }
  return _impl_.master_;
}
inline ::TSP::Reference* CommandSlidePrimitiveSetMasterArchive::mutable_master() {
  ::TSP::Reference* _msg = _internal_mutable_master();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlidePrimitiveSetMasterArchive.master)
  return _msg;
}
inline void CommandSlidePrimitiveSetMasterArchive::set_allocated_master(::TSP::Reference* master) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.master_);
  }
  if (master) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(master));
    if (message_arena != submessage_arena) {
      master = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, master, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.master_ = master;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlidePrimitiveSetMasterArchive.master)
}

// required .TSP.Reference old_master = 4;
inline bool CommandSlidePrimitiveSetMasterArchive::_internal_has_old_master() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_master_ != nullptr);
  return value;
}
inline bool CommandSlidePrimitiveSetMasterArchive::has_old_master() const {
  return _internal_has_old_master();
}
inline const ::TSP::Reference& CommandSlidePrimitiveSetMasterArchive::_internal_old_master() const {
  const ::TSP::Reference* p = _impl_.old_master_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlidePrimitiveSetMasterArchive::old_master() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlidePrimitiveSetMasterArchive.old_master)
  return _internal_old_master();
}
inline void CommandSlidePrimitiveSetMasterArchive::unsafe_arena_set_allocated_old_master(
    ::TSP::Reference* old_master) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_master_);
  }
  _impl_.old_master_ = old_master;
  if (old_master) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlidePrimitiveSetMasterArchive.old_master)
}
inline ::TSP::Reference* CommandSlidePrimitiveSetMasterArchive::release_old_master() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.old_master_;
  _impl_.old_master_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlidePrimitiveSetMasterArchive::unsafe_arena_release_old_master() {
  // @@protoc_insertion_point(field_release:KN.CommandSlidePrimitiveSetMasterArchive.old_master)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.old_master_;
  _impl_.old_master_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlidePrimitiveSetMasterArchive::_internal_mutable_old_master() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.old_master_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.old_master_ = p;
  }
  return _impl_.old_master_;
}
inline ::TSP::Reference* CommandSlidePrimitiveSetMasterArchive::mutable_old_master() {
  ::TSP::Reference* _msg = _internal_mutable_old_master();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlidePrimitiveSetMasterArchive.old_master)
  return _msg;
}
inline void CommandSlidePrimitiveSetMasterArchive::set_allocated_old_master(::TSP::Reference* old_master) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_master_);
  }
  if (old_master) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_master));
    if (message_arena != submessage_arena) {
      old_master = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_master, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.old_master_ = old_master;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlidePrimitiveSetMasterArchive.old_master)
}

// -------------------------------------------------------------------

// CommandSlideReapplyMasterArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideReapplyMasterArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSlideReapplyMasterArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideReapplyMasterArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideReapplyMasterArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideReapplyMasterArchive.super)
  return _internal_super();
}
inline void CommandSlideReapplyMasterArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideReapplyMasterArchive.super)
}
inline ::TSK::CommandArchive* CommandSlideReapplyMasterArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideReapplyMasterArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideReapplyMasterArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideReapplyMasterArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSlideReapplyMasterArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideReapplyMasterArchive.super)
  return _msg;
}
inline void CommandSlideReapplyMasterArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideReapplyMasterArchive.super)
}

// required .TSP.Reference reapply_accumulated_command = 2;
inline bool CommandSlideReapplyMasterArchive::_internal_has_reapply_accumulated_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reapply_accumulated_command_ != nullptr);
  return value;
}
inline bool CommandSlideReapplyMasterArchive::has_reapply_accumulated_command() const {
  return _internal_has_reapply_accumulated_command();
}
inline const ::TSP::Reference& CommandSlideReapplyMasterArchive::_internal_reapply_accumulated_command() const {
  const ::TSP::Reference* p = _impl_.reapply_accumulated_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlideReapplyMasterArchive::reapply_accumulated_command() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideReapplyMasterArchive.reapply_accumulated_command)
  return _internal_reapply_accumulated_command();
}
inline void CommandSlideReapplyMasterArchive::unsafe_arena_set_allocated_reapply_accumulated_command(
    ::TSP::Reference* reapply_accumulated_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reapply_accumulated_command_);
  }
  _impl_.reapply_accumulated_command_ = reapply_accumulated_command;
  if (reapply_accumulated_command) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideReapplyMasterArchive.reapply_accumulated_command)
}
inline ::TSP::Reference* CommandSlideReapplyMasterArchive::release_reapply_accumulated_command() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.reapply_accumulated_command_;
  _impl_.reapply_accumulated_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlideReapplyMasterArchive::unsafe_arena_release_reapply_accumulated_command() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideReapplyMasterArchive.reapply_accumulated_command)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.reapply_accumulated_command_;
  _impl_.reapply_accumulated_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlideReapplyMasterArchive::_internal_mutable_reapply_accumulated_command() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.reapply_accumulated_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.reapply_accumulated_command_ = p;
  }
  return _impl_.reapply_accumulated_command_;
}
inline ::TSP::Reference* CommandSlideReapplyMasterArchive::mutable_reapply_accumulated_command() {
  ::TSP::Reference* _msg = _internal_mutable_reapply_accumulated_command();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideReapplyMasterArchive.reapply_accumulated_command)
  return _msg;
}
inline void CommandSlideReapplyMasterArchive::set_allocated_reapply_accumulated_command(::TSP::Reference* reapply_accumulated_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reapply_accumulated_command_);
  }
  if (reapply_accumulated_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reapply_accumulated_command));
    if (message_arena != submessage_arena) {
      reapply_accumulated_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reapply_accumulated_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.reapply_accumulated_command_ = reapply_accumulated_command;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideReapplyMasterArchive.reapply_accumulated_command)
}

// -------------------------------------------------------------------

// CommandShowSetSoundtrack

// required .TSK.CommandArchive super = 1;
inline bool CommandShowSetSoundtrack::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandShowSetSoundtrack::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandShowSetSoundtrack::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandShowSetSoundtrack::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetSoundtrack.super)
  return _internal_super();
}
inline void CommandShowSetSoundtrack::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowSetSoundtrack.super)
}
inline ::TSK::CommandArchive* CommandShowSetSoundtrack::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandShowSetSoundtrack::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandShowSetSoundtrack.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandShowSetSoundtrack::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandShowSetSoundtrack::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowSetSoundtrack.super)
  return _msg;
}
inline void CommandShowSetSoundtrack::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowSetSoundtrack.super)
}

// optional .TSP.Reference show = 2;
inline bool CommandShowSetSoundtrack::_internal_has_show() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.show_ != nullptr);
  return value;
}
inline bool CommandShowSetSoundtrack::has_show() const {
  return _internal_has_show();
}
inline const ::TSP::Reference& CommandShowSetSoundtrack::_internal_show() const {
  const ::TSP::Reference* p = _impl_.show_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowSetSoundtrack::show() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetSoundtrack.show)
  return _internal_show();
}
inline void CommandShowSetSoundtrack::unsafe_arena_set_allocated_show(
    ::TSP::Reference* show) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.show_);
  }
  _impl_.show_ = show;
  if (show) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowSetSoundtrack.show)
}
inline ::TSP::Reference* CommandShowSetSoundtrack::release_show() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.show_;
  _impl_.show_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowSetSoundtrack::unsafe_arena_release_show() {
  // @@protoc_insertion_point(field_release:KN.CommandShowSetSoundtrack.show)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.show_;
  _impl_.show_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowSetSoundtrack::_internal_mutable_show() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.show_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.show_ = p;
  }
  return _impl_.show_;
}
inline ::TSP::Reference* CommandShowSetSoundtrack::mutable_show() {
  ::TSP::Reference* _msg = _internal_mutable_show();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowSetSoundtrack.show)
  return _msg;
}
inline void CommandShowSetSoundtrack::set_allocated_show(::TSP::Reference* show) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.show_);
  }
  if (show) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show));
    if (message_arena != submessage_arena) {
      show = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.show_ = show;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowSetSoundtrack.show)
}

// optional .TSP.Reference soundtrack = 3;
inline bool CommandShowSetSoundtrack::_internal_has_soundtrack() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.soundtrack_ != nullptr);
  return value;
}
inline bool CommandShowSetSoundtrack::has_soundtrack() const {
  return _internal_has_soundtrack();
}
inline const ::TSP::Reference& CommandShowSetSoundtrack::_internal_soundtrack() const {
  const ::TSP::Reference* p = _impl_.soundtrack_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowSetSoundtrack::soundtrack() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetSoundtrack.soundtrack)
  return _internal_soundtrack();
}
inline void CommandShowSetSoundtrack::unsafe_arena_set_allocated_soundtrack(
    ::TSP::Reference* soundtrack) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.soundtrack_);
  }
  _impl_.soundtrack_ = soundtrack;
  if (soundtrack) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowSetSoundtrack.soundtrack)
}
inline ::TSP::Reference* CommandShowSetSoundtrack::release_soundtrack() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.soundtrack_;
  _impl_.soundtrack_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowSetSoundtrack::unsafe_arena_release_soundtrack() {
  // @@protoc_insertion_point(field_release:KN.CommandShowSetSoundtrack.soundtrack)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.soundtrack_;
  _impl_.soundtrack_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowSetSoundtrack::_internal_mutable_soundtrack() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.soundtrack_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.soundtrack_ = p;
  }
  return _impl_.soundtrack_;
}
inline ::TSP::Reference* CommandShowSetSoundtrack::mutable_soundtrack() {
  ::TSP::Reference* _msg = _internal_mutable_soundtrack();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowSetSoundtrack.soundtrack)
  return _msg;
}
inline void CommandShowSetSoundtrack::set_allocated_soundtrack(::TSP::Reference* soundtrack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.soundtrack_);
  }
  if (soundtrack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soundtrack));
    if (message_arena != submessage_arena) {
      soundtrack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, soundtrack, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.soundtrack_ = soundtrack;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowSetSoundtrack.soundtrack)
}

// optional .TSP.Reference old_soundtrack = 4;
inline bool CommandShowSetSoundtrack::_internal_has_old_soundtrack() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_soundtrack_ != nullptr);
  return value;
}
inline bool CommandShowSetSoundtrack::has_old_soundtrack() const {
  return _internal_has_old_soundtrack();
}
inline const ::TSP::Reference& CommandShowSetSoundtrack::_internal_old_soundtrack() const {
  const ::TSP::Reference* p = _impl_.old_soundtrack_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowSetSoundtrack::old_soundtrack() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetSoundtrack.old_soundtrack)
  return _internal_old_soundtrack();
}
inline void CommandShowSetSoundtrack::unsafe_arena_set_allocated_old_soundtrack(
    ::TSP::Reference* old_soundtrack) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_soundtrack_);
  }
  _impl_.old_soundtrack_ = old_soundtrack;
  if (old_soundtrack) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowSetSoundtrack.old_soundtrack)
}
inline ::TSP::Reference* CommandShowSetSoundtrack::release_old_soundtrack() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.old_soundtrack_;
  _impl_.old_soundtrack_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowSetSoundtrack::unsafe_arena_release_old_soundtrack() {
  // @@protoc_insertion_point(field_release:KN.CommandShowSetSoundtrack.old_soundtrack)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.old_soundtrack_;
  _impl_.old_soundtrack_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowSetSoundtrack::_internal_mutable_old_soundtrack() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.old_soundtrack_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.old_soundtrack_ = p;
  }
  return _impl_.old_soundtrack_;
}
inline ::TSP::Reference* CommandShowSetSoundtrack::mutable_old_soundtrack() {
  ::TSP::Reference* _msg = _internal_mutable_old_soundtrack();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowSetSoundtrack.old_soundtrack)
  return _msg;
}
inline void CommandShowSetSoundtrack::set_allocated_old_soundtrack(::TSP::Reference* old_soundtrack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_soundtrack_);
  }
  if (old_soundtrack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_soundtrack));
    if (message_arena != submessage_arena) {
      old_soundtrack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_soundtrack, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.old_soundtrack_ = old_soundtrack;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowSetSoundtrack.old_soundtrack)
}

// -------------------------------------------------------------------

// CommandSoundtrackSetValue_PropertyValue

// optional double double_value = 1;
inline bool CommandSoundtrackSetValue_PropertyValue::_internal_has_double_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandSoundtrackSetValue_PropertyValue::has_double_value() const {
  return _internal_has_double_value();
}
inline void CommandSoundtrackSetValue_PropertyValue::clear_double_value() {
  _impl_.double_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double CommandSoundtrackSetValue_PropertyValue::_internal_double_value() const {
  return _impl_.double_value_;
}
inline double CommandSoundtrackSetValue_PropertyValue::double_value() const {
  // @@protoc_insertion_point(field_get:KN.CommandSoundtrackSetValue.PropertyValue.double_value)
  return _internal_double_value();
}
inline void CommandSoundtrackSetValue_PropertyValue::_internal_set_double_value(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.double_value_ = value;
}
inline void CommandSoundtrackSetValue_PropertyValue::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:KN.CommandSoundtrackSetValue.PropertyValue.double_value)
}

// optional .KN.Soundtrack.SoundtrackMode mode_value = 2;
inline bool CommandSoundtrackSetValue_PropertyValue::_internal_has_mode_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSoundtrackSetValue_PropertyValue::has_mode_value() const {
  return _internal_has_mode_value();
}
inline void CommandSoundtrackSetValue_PropertyValue::clear_mode_value() {
  _impl_.mode_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::KN::Soundtrack_SoundtrackMode CommandSoundtrackSetValue_PropertyValue::_internal_mode_value() const {
  return static_cast< ::KN::Soundtrack_SoundtrackMode >(_impl_.mode_value_);
}
inline ::KN::Soundtrack_SoundtrackMode CommandSoundtrackSetValue_PropertyValue::mode_value() const {
  // @@protoc_insertion_point(field_get:KN.CommandSoundtrackSetValue.PropertyValue.mode_value)
  return _internal_mode_value();
}
inline void CommandSoundtrackSetValue_PropertyValue::_internal_set_mode_value(::KN::Soundtrack_SoundtrackMode value) {
  assert(::KN::Soundtrack_SoundtrackMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.mode_value_ = value;
}
inline void CommandSoundtrackSetValue_PropertyValue::set_mode_value(::KN::Soundtrack_SoundtrackMode value) {
  _internal_set_mode_value(value);
  // @@protoc_insertion_point(field_set:KN.CommandSoundtrackSetValue.PropertyValue.mode_value)
}

// repeated .TSP.DataReference media_reference_values = 3;
inline int CommandSoundtrackSetValue_PropertyValue::_internal_media_reference_values_size() const {
  return _impl_.media_reference_values_.size();
}
inline int CommandSoundtrackSetValue_PropertyValue::media_reference_values_size() const {
  return _internal_media_reference_values_size();
}
inline ::TSP::DataReference* CommandSoundtrackSetValue_PropertyValue::mutable_media_reference_values(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSoundtrackSetValue.PropertyValue.media_reference_values)
  return _impl_.media_reference_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >*
CommandSoundtrackSetValue_PropertyValue::mutable_media_reference_values() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSoundtrackSetValue.PropertyValue.media_reference_values)
  return &_impl_.media_reference_values_;
}
inline const ::TSP::DataReference& CommandSoundtrackSetValue_PropertyValue::_internal_media_reference_values(int index) const {
  return _impl_.media_reference_values_.Get(index);
}
inline const ::TSP::DataReference& CommandSoundtrackSetValue_PropertyValue::media_reference_values(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSoundtrackSetValue.PropertyValue.media_reference_values)
  return _internal_media_reference_values(index);
}
inline ::TSP::DataReference* CommandSoundtrackSetValue_PropertyValue::_internal_add_media_reference_values() {
  return _impl_.media_reference_values_.Add();
}
inline ::TSP::DataReference* CommandSoundtrackSetValue_PropertyValue::add_media_reference_values() {
  ::TSP::DataReference* _add = _internal_add_media_reference_values();
  // @@protoc_insertion_point(field_add:KN.CommandSoundtrackSetValue.PropertyValue.media_reference_values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >&
CommandSoundtrackSetValue_PropertyValue::media_reference_values() const {
  // @@protoc_insertion_point(field_list:KN.CommandSoundtrackSetValue.PropertyValue.media_reference_values)
  return _impl_.media_reference_values_;
}

// -------------------------------------------------------------------

// CommandSoundtrackSetValue

// required .TSK.CommandArchive super = 1;
inline bool CommandSoundtrackSetValue::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSoundtrackSetValue::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSoundtrackSetValue::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSoundtrackSetValue::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSoundtrackSetValue.super)
  return _internal_super();
}
inline void CommandSoundtrackSetValue::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSoundtrackSetValue.super)
}
inline ::TSK::CommandArchive* CommandSoundtrackSetValue::release_super() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSoundtrackSetValue::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSoundtrackSetValue.super)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSoundtrackSetValue::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSoundtrackSetValue::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSoundtrackSetValue.super)
  return _msg;
}
inline void CommandSoundtrackSetValue::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSoundtrackSetValue.super)
}

// optional .TSP.Reference soundtrack = 2;
inline bool CommandSoundtrackSetValue::_internal_has_soundtrack() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.soundtrack_ != nullptr);
  return value;
}
inline bool CommandSoundtrackSetValue::has_soundtrack() const {
  return _internal_has_soundtrack();
}
inline const ::TSP::Reference& CommandSoundtrackSetValue::_internal_soundtrack() const {
  const ::TSP::Reference* p = _impl_.soundtrack_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSoundtrackSetValue::soundtrack() const {
  // @@protoc_insertion_point(field_get:KN.CommandSoundtrackSetValue.soundtrack)
  return _internal_soundtrack();
}
inline void CommandSoundtrackSetValue::unsafe_arena_set_allocated_soundtrack(
    ::TSP::Reference* soundtrack) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.soundtrack_);
  }
  _impl_.soundtrack_ = soundtrack;
  if (soundtrack) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSoundtrackSetValue.soundtrack)
}
inline ::TSP::Reference* CommandSoundtrackSetValue::release_soundtrack() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.soundtrack_;
  _impl_.soundtrack_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSoundtrackSetValue::unsafe_arena_release_soundtrack() {
  // @@protoc_insertion_point(field_release:KN.CommandSoundtrackSetValue.soundtrack)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.soundtrack_;
  _impl_.soundtrack_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSoundtrackSetValue::_internal_mutable_soundtrack() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.soundtrack_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.soundtrack_ = p;
  }
  return _impl_.soundtrack_;
}
inline ::TSP::Reference* CommandSoundtrackSetValue::mutable_soundtrack() {
  ::TSP::Reference* _msg = _internal_mutable_soundtrack();
  // @@protoc_insertion_point(field_mutable:KN.CommandSoundtrackSetValue.soundtrack)
  return _msg;
}
inline void CommandSoundtrackSetValue::set_allocated_soundtrack(::TSP::Reference* soundtrack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.soundtrack_);
  }
  if (soundtrack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soundtrack));
    if (message_arena != submessage_arena) {
      soundtrack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, soundtrack, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.soundtrack_ = soundtrack;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSoundtrackSetValue.soundtrack)
}

// optional string property = 3;
inline bool CommandSoundtrackSetValue::_internal_has_property() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandSoundtrackSetValue::has_property() const {
  return _internal_has_property();
}
inline void CommandSoundtrackSetValue::clear_property() {
  _impl_.property_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandSoundtrackSetValue::property() const {
  // @@protoc_insertion_point(field_get:KN.CommandSoundtrackSetValue.property)
  return _internal_property();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSoundtrackSetValue::set_property(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.property_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.CommandSoundtrackSetValue.property)
}
inline std::string* CommandSoundtrackSetValue::mutable_property() {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:KN.CommandSoundtrackSetValue.property)
  return _s;
}
inline const std::string& CommandSoundtrackSetValue::_internal_property() const {
  return _impl_.property_.Get();
}
inline void CommandSoundtrackSetValue::_internal_set_property(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.property_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandSoundtrackSetValue::_internal_mutable_property() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.property_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandSoundtrackSetValue::release_property() {
  // @@protoc_insertion_point(field_release:KN.CommandSoundtrackSetValue.property)
  if (!_internal_has_property()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.property_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.property_.IsDefault()) {
    _impl_.property_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandSoundtrackSetValue::set_allocated_property(std::string* property) {
  if (property != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.property_.SetAllocated(property, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.property_.IsDefault()) {
    _impl_.property_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSoundtrackSetValue.property)
}

// optional .KN.CommandSoundtrackSetValue.PropertyValue old_value = 4;
inline bool CommandSoundtrackSetValue::_internal_has_old_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_value_ != nullptr);
  return value;
}
inline bool CommandSoundtrackSetValue::has_old_value() const {
  return _internal_has_old_value();
}
inline void CommandSoundtrackSetValue::clear_old_value() {
  if (_impl_.old_value_ != nullptr) _impl_.old_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::KN::CommandSoundtrackSetValue_PropertyValue& CommandSoundtrackSetValue::_internal_old_value() const {
  const ::KN::CommandSoundtrackSetValue_PropertyValue* p = _impl_.old_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::CommandSoundtrackSetValue_PropertyValue&>(
      ::KN::_CommandSoundtrackSetValue_PropertyValue_default_instance_);
}
inline const ::KN::CommandSoundtrackSetValue_PropertyValue& CommandSoundtrackSetValue::old_value() const {
  // @@protoc_insertion_point(field_get:KN.CommandSoundtrackSetValue.old_value)
  return _internal_old_value();
}
inline void CommandSoundtrackSetValue::unsafe_arena_set_allocated_old_value(
    ::KN::CommandSoundtrackSetValue_PropertyValue* old_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_value_);
  }
  _impl_.old_value_ = old_value;
  if (old_value) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSoundtrackSetValue.old_value)
}
inline ::KN::CommandSoundtrackSetValue_PropertyValue* CommandSoundtrackSetValue::release_old_value() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::KN::CommandSoundtrackSetValue_PropertyValue* temp = _impl_.old_value_;
  _impl_.old_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::CommandSoundtrackSetValue_PropertyValue* CommandSoundtrackSetValue::unsafe_arena_release_old_value() {
  // @@protoc_insertion_point(field_release:KN.CommandSoundtrackSetValue.old_value)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::KN::CommandSoundtrackSetValue_PropertyValue* temp = _impl_.old_value_;
  _impl_.old_value_ = nullptr;
  return temp;
}
inline ::KN::CommandSoundtrackSetValue_PropertyValue* CommandSoundtrackSetValue::_internal_mutable_old_value() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.old_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::CommandSoundtrackSetValue_PropertyValue>(GetArenaForAllocation());
    _impl_.old_value_ = p;
  }
  return _impl_.old_value_;
}
inline ::KN::CommandSoundtrackSetValue_PropertyValue* CommandSoundtrackSetValue::mutable_old_value() {
  ::KN::CommandSoundtrackSetValue_PropertyValue* _msg = _internal_mutable_old_value();
  // @@protoc_insertion_point(field_mutable:KN.CommandSoundtrackSetValue.old_value)
  return _msg;
}
inline void CommandSoundtrackSetValue::set_allocated_old_value(::KN::CommandSoundtrackSetValue_PropertyValue* old_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.old_value_;
  }
  if (old_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(old_value);
    if (message_arena != submessage_arena) {
      old_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.old_value_ = old_value;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSoundtrackSetValue.old_value)
}

// optional .KN.CommandSoundtrackSetValue.PropertyValue new_value = 5;
inline bool CommandSoundtrackSetValue::_internal_has_new_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_value_ != nullptr);
  return value;
}
inline bool CommandSoundtrackSetValue::has_new_value() const {
  return _internal_has_new_value();
}
inline void CommandSoundtrackSetValue::clear_new_value() {
  if (_impl_.new_value_ != nullptr) _impl_.new_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::KN::CommandSoundtrackSetValue_PropertyValue& CommandSoundtrackSetValue::_internal_new_value() const {
  const ::KN::CommandSoundtrackSetValue_PropertyValue* p = _impl_.new_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::CommandSoundtrackSetValue_PropertyValue&>(
      ::KN::_CommandSoundtrackSetValue_PropertyValue_default_instance_);
}
inline const ::KN::CommandSoundtrackSetValue_PropertyValue& CommandSoundtrackSetValue::new_value() const {
  // @@protoc_insertion_point(field_get:KN.CommandSoundtrackSetValue.new_value)
  return _internal_new_value();
}
inline void CommandSoundtrackSetValue::unsafe_arena_set_allocated_new_value(
    ::KN::CommandSoundtrackSetValue_PropertyValue* new_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_value_);
  }
  _impl_.new_value_ = new_value;
  if (new_value) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSoundtrackSetValue.new_value)
}
inline ::KN::CommandSoundtrackSetValue_PropertyValue* CommandSoundtrackSetValue::release_new_value() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::KN::CommandSoundtrackSetValue_PropertyValue* temp = _impl_.new_value_;
  _impl_.new_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::CommandSoundtrackSetValue_PropertyValue* CommandSoundtrackSetValue::unsafe_arena_release_new_value() {
  // @@protoc_insertion_point(field_release:KN.CommandSoundtrackSetValue.new_value)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::KN::CommandSoundtrackSetValue_PropertyValue* temp = _impl_.new_value_;
  _impl_.new_value_ = nullptr;
  return temp;
}
inline ::KN::CommandSoundtrackSetValue_PropertyValue* CommandSoundtrackSetValue::_internal_mutable_new_value() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.new_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::CommandSoundtrackSetValue_PropertyValue>(GetArenaForAllocation());
    _impl_.new_value_ = p;
  }
  return _impl_.new_value_;
}
inline ::KN::CommandSoundtrackSetValue_PropertyValue* CommandSoundtrackSetValue::mutable_new_value() {
  ::KN::CommandSoundtrackSetValue_PropertyValue* _msg = _internal_mutable_new_value();
  // @@protoc_insertion_point(field_mutable:KN.CommandSoundtrackSetValue.new_value)
  return _msg;
}
inline void CommandSoundtrackSetValue::set_allocated_new_value(::KN::CommandSoundtrackSetValue_PropertyValue* new_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.new_value_;
  }
  if (new_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(new_value);
    if (message_arena != submessage_arena) {
      new_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.new_value_ = new_value;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSoundtrackSetValue.new_value)
}

// -------------------------------------------------------------------

// SlideCollectionCommandSelectionBehaviorArchive

// optional .TSP.Reference archived_new_selection = 1;
inline bool SlideCollectionCommandSelectionBehaviorArchive::_internal_has_archived_new_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.archived_new_selection_ != nullptr);
  return value;
}
inline bool SlideCollectionCommandSelectionBehaviorArchive::has_archived_new_selection() const {
  return _internal_has_archived_new_selection();
}
inline const ::TSP::Reference& SlideCollectionCommandSelectionBehaviorArchive::_internal_archived_new_selection() const {
  const ::TSP::Reference* p = _impl_.archived_new_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideCollectionCommandSelectionBehaviorArchive::archived_new_selection() const {
  // @@protoc_insertion_point(field_get:KN.SlideCollectionCommandSelectionBehaviorArchive.archived_new_selection)
  return _internal_archived_new_selection();
}
inline void SlideCollectionCommandSelectionBehaviorArchive::unsafe_arena_set_allocated_archived_new_selection(
    ::TSP::Reference* archived_new_selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.archived_new_selection_);
  }
  _impl_.archived_new_selection_ = archived_new_selection;
  if (archived_new_selection) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideCollectionCommandSelectionBehaviorArchive.archived_new_selection)
}
inline ::TSP::Reference* SlideCollectionCommandSelectionBehaviorArchive::release_archived_new_selection() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.archived_new_selection_;
  _impl_.archived_new_selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideCollectionCommandSelectionBehaviorArchive::unsafe_arena_release_archived_new_selection() {
  // @@protoc_insertion_point(field_release:KN.SlideCollectionCommandSelectionBehaviorArchive.archived_new_selection)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.archived_new_selection_;
  _impl_.archived_new_selection_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideCollectionCommandSelectionBehaviorArchive::_internal_mutable_archived_new_selection() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.archived_new_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.archived_new_selection_ = p;
  }
  return _impl_.archived_new_selection_;
}
inline ::TSP::Reference* SlideCollectionCommandSelectionBehaviorArchive::mutable_archived_new_selection() {
  ::TSP::Reference* _msg = _internal_mutable_archived_new_selection();
  // @@protoc_insertion_point(field_mutable:KN.SlideCollectionCommandSelectionBehaviorArchive.archived_new_selection)
  return _msg;
}
inline void SlideCollectionCommandSelectionBehaviorArchive::set_allocated_archived_new_selection(::TSP::Reference* archived_new_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.archived_new_selection_);
  }
  if (archived_new_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(archived_new_selection));
    if (message_arena != submessage_arena) {
      archived_new_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, archived_new_selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.archived_new_selection_ = archived_new_selection;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideCollectionCommandSelectionBehaviorArchive.archived_new_selection)
}

// optional .TSP.Reference archived_old_selection = 2;
inline bool SlideCollectionCommandSelectionBehaviorArchive::_internal_has_archived_old_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.archived_old_selection_ != nullptr);
  return value;
}
inline bool SlideCollectionCommandSelectionBehaviorArchive::has_archived_old_selection() const {
  return _internal_has_archived_old_selection();
}
inline const ::TSP::Reference& SlideCollectionCommandSelectionBehaviorArchive::_internal_archived_old_selection() const {
  const ::TSP::Reference* p = _impl_.archived_old_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SlideCollectionCommandSelectionBehaviorArchive::archived_old_selection() const {
  // @@protoc_insertion_point(field_get:KN.SlideCollectionCommandSelectionBehaviorArchive.archived_old_selection)
  return _internal_archived_old_selection();
}
inline void SlideCollectionCommandSelectionBehaviorArchive::unsafe_arena_set_allocated_archived_old_selection(
    ::TSP::Reference* archived_old_selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.archived_old_selection_);
  }
  _impl_.archived_old_selection_ = archived_old_selection;
  if (archived_old_selection) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideCollectionCommandSelectionBehaviorArchive.archived_old_selection)
}
inline ::TSP::Reference* SlideCollectionCommandSelectionBehaviorArchive::release_archived_old_selection() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.archived_old_selection_;
  _impl_.archived_old_selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SlideCollectionCommandSelectionBehaviorArchive::unsafe_arena_release_archived_old_selection() {
  // @@protoc_insertion_point(field_release:KN.SlideCollectionCommandSelectionBehaviorArchive.archived_old_selection)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.archived_old_selection_;
  _impl_.archived_old_selection_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SlideCollectionCommandSelectionBehaviorArchive::_internal_mutable_archived_old_selection() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.archived_old_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.archived_old_selection_ = p;
  }
  return _impl_.archived_old_selection_;
}
inline ::TSP::Reference* SlideCollectionCommandSelectionBehaviorArchive::mutable_archived_old_selection() {
  ::TSP::Reference* _msg = _internal_mutable_archived_old_selection();
  // @@protoc_insertion_point(field_mutable:KN.SlideCollectionCommandSelectionBehaviorArchive.archived_old_selection)
  return _msg;
}
inline void SlideCollectionCommandSelectionBehaviorArchive::set_allocated_archived_old_selection(::TSP::Reference* archived_old_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.archived_old_selection_);
  }
  if (archived_old_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(archived_old_selection));
    if (message_arena != submessage_arena) {
      archived_old_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, archived_old_selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.archived_old_selection_ = archived_old_selection;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideCollectionCommandSelectionBehaviorArchive.archived_old_selection)
}

// optional .KN.SlideCollectionCommandSelectionBehaviorArchive.Type type = 3 [default = kKindSlideSelectionBehaviorTypeGeneral];
inline bool SlideCollectionCommandSelectionBehaviorArchive::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SlideCollectionCommandSelectionBehaviorArchive::has_type() const {
  return _internal_has_type();
}
inline void SlideCollectionCommandSelectionBehaviorArchive::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::KN::SlideCollectionCommandSelectionBehaviorArchive_Type SlideCollectionCommandSelectionBehaviorArchive::_internal_type() const {
  return static_cast< ::KN::SlideCollectionCommandSelectionBehaviorArchive_Type >(_impl_.type_);
}
inline ::KN::SlideCollectionCommandSelectionBehaviorArchive_Type SlideCollectionCommandSelectionBehaviorArchive::type() const {
  // @@protoc_insertion_point(field_get:KN.SlideCollectionCommandSelectionBehaviorArchive.type)
  return _internal_type();
}
inline void SlideCollectionCommandSelectionBehaviorArchive::_internal_set_type(::KN::SlideCollectionCommandSelectionBehaviorArchive_Type value) {
  assert(::KN::SlideCollectionCommandSelectionBehaviorArchive_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.type_ = value;
}
inline void SlideCollectionCommandSelectionBehaviorArchive::set_type(::KN::SlideCollectionCommandSelectionBehaviorArchive_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:KN.SlideCollectionCommandSelectionBehaviorArchive.type)
}

// -------------------------------------------------------------------

// ChartInfoGeometryCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ChartInfoGeometryCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool ChartInfoGeometryCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ChartInfoGeometryCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ChartInfoGeometryCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.ChartInfoGeometryCommandArchive.super)
  return _internal_super();
}
inline void ChartInfoGeometryCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ChartInfoGeometryCommandArchive.super)
}
inline ::TSK::CommandArchive* ChartInfoGeometryCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* ChartInfoGeometryCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.ChartInfoGeometryCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ChartInfoGeometryCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* ChartInfoGeometryCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.ChartInfoGeometryCommandArchive.super)
  return _msg;
}
inline void ChartInfoGeometryCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.ChartInfoGeometryCommandArchive.super)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace KN

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::KN::CommandShowInsertSlideArchive_Kind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::CommandShowInsertSlideArchive_Kind>() {
  return ::KN::CommandShowInsertSlideArchive_Kind_descriptor();
}
template <> struct is_proto_enum< ::KN::SlideCollectionCommandSelectionBehaviorArchive_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::SlideCollectionCommandSelectionBehaviorArchive_Type>() {
  return ::KN::SlideCollectionCommandSelectionBehaviorArchive_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_KNCommandArchives_2eproto
