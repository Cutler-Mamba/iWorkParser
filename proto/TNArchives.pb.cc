// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TNArchives.proto

#include "TNArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace TN {
PROTOBUF_CONSTEXPR SheetUIStateArchive::SheetUIStateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.scroll_position_)*/nullptr
  , /*decltype(_impl_.previous_scroll_position_)*/nullptr
  , /*decltype(_impl_.visible_size_)*/nullptr
  , /*decltype(_impl_.previous_visible_size_)*/nullptr
  , /*decltype(_impl_.view_scale_)*/0
  , /*decltype(_impl_.previous_view_scale_)*/0
  , /*decltype(_impl_.scroll_position_is_unscaled_)*/false
  , /*decltype(_impl_.scroll_position_valid_)*/false
  , /*decltype(_impl_.previous_scroll_position_valid_)*/false
  , /*decltype(_impl_.device_idiom_)*/0u
  , /*decltype(_impl_.form_focused_record_index_)*/0u
  , /*decltype(_impl_.form_focused_field_index_)*/0u} {}
struct SheetUIStateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SheetUIStateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SheetUIStateArchiveDefaultTypeInternal() {}
  union {
    SheetUIStateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SheetUIStateArchiveDefaultTypeInternal _SheetUIStateArchive_default_instance_;
PROTOBUF_CONSTEXPR SheetUIStateDictionaryEntryArchive::SheetUIStateDictionaryEntryArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sheet_)*/nullptr
  , /*decltype(_impl_.sheet_uistate_)*/nullptr} {}
struct SheetUIStateDictionaryEntryArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SheetUIStateDictionaryEntryArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SheetUIStateDictionaryEntryArchiveDefaultTypeInternal() {}
  union {
    SheetUIStateDictionaryEntryArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SheetUIStateDictionaryEntryArchiveDefaultTypeInternal _SheetUIStateDictionaryEntryArchive_default_instance_;
PROTOBUF_CONSTEXPR UIStateArchive::UIStateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.selected_info_)*/{}
  , /*decltype(_impl_.sheet_uistate_dictionary_entry_)*/{}
  , /*decltype(_impl_.edit_mode_sheet_uistate_dictionary_entry_)*/{}
  , /*decltype(_impl_.selected_quick_calc_functions_)*/{}
  , /*decltype(_impl_.table_selection_)*/nullptr
  , /*decltype(_impl_.chart_selection_)*/nullptr
  , /*decltype(_impl_.sheet_selection_)*/nullptr
  , /*decltype(_impl_.active_sheet_index_)*/0u
  , /*decltype(_impl_.editing_sheet_index_)*/0u
  , /*decltype(_impl_.document_mode_)*/0
  , /*decltype(_impl_.table_editing_mode_)*/0
  , /*decltype(_impl_.form_focused_record_index_)*/0u
  , /*decltype(_impl_.form_focused_field_index_)*/0u
  , /*decltype(_impl_.inspector_pane_view_mode_)*/0
  , /*decltype(_impl_.in_chart_mode_)*/false
  , /*decltype(_impl_.removed_all_quick_calc_functions_)*/false
  , /*decltype(_impl_.show_canvas_guides_)*/false
  , /*decltype(_impl_.shows_comments_)*/false
  , /*decltype(_impl_.inspector_pane_visible_)*/true} {}
struct UIStateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UIStateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UIStateArchiveDefaultTypeInternal() {}
  union {
    UIStateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UIStateArchiveDefaultTypeInternal _UIStateArchive_default_instance_;
PROTOBUF_CONSTEXPR SheetSelectionArchive::SheetSelectionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sheet_)*/nullptr
  , /*decltype(_impl_.paginated_)*/false} {}
struct SheetSelectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SheetSelectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SheetSelectionArchiveDefaultTypeInternal() {}
  union {
    SheetSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SheetSelectionArchiveDefaultTypeInternal _SheetSelectionArchive_default_instance_;
PROTOBUF_CONSTEXPR UndoRedoStateArchive::UndoRedoStateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ui_state_)*/nullptr} {}
struct UndoRedoStateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UndoRedoStateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UndoRedoStateArchiveDefaultTypeInternal() {}
  union {
    UndoRedoStateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UndoRedoStateArchiveDefaultTypeInternal _UndoRedoStateArchive_default_instance_;
PROTOBUF_CONSTEXPR DocumentArchive::DocumentArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sheets_)*/{}
  , /*decltype(_impl_.printer_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.paper_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.calculation_engine_)*/nullptr
  , /*decltype(_impl_.stylesheet_)*/nullptr
  , /*decltype(_impl_.sidebar_order_)*/nullptr
  , /*decltype(_impl_.theme_)*/nullptr
  , /*decltype(_impl_.uistate_)*/nullptr
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.custom_format_list_)*/nullptr
  , /*decltype(_impl_.page_size_)*/nullptr} {}
struct DocumentArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocumentArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocumentArchiveDefaultTypeInternal() {}
  union {
    DocumentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocumentArchiveDefaultTypeInternal _DocumentArchive_default_instance_;
PROTOBUF_CONSTEXPR PlaceholderArchive::PlaceholderArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct PlaceholderArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlaceholderArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlaceholderArchiveDefaultTypeInternal() {}
  union {
    PlaceholderArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlaceholderArchiveDefaultTypeInternal _PlaceholderArchive_default_instance_;
PROTOBUF_CONSTEXPR SheetArchive::SheetArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.drawable_infos_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.print_margins_)*/nullptr
  , /*decltype(_impl_.header_storage_)*/nullptr
  , /*decltype(_impl_.footer_storage_)*/nullptr
  , /*decltype(_impl_.userdefinedguidestorage_)*/nullptr
  , /*decltype(_impl_.in_portrait_page_orientation_)*/false
  , /*decltype(_impl_.show_repeating_headers_)*/false
  , /*decltype(_impl_.show_page_numbers_)*/false
  , /*decltype(_impl_.is_autofit_on_)*/false
  , /*decltype(_impl_.content_scale_)*/0
  , /*decltype(_impl_.page_order_)*/0
  , /*decltype(_impl_.using_start_page_number_)*/false
  , /*decltype(_impl_.start_page_number_)*/0
  , /*decltype(_impl_.page_header_inset_)*/0
  , /*decltype(_impl_.page_footer_inset_)*/0} {}
struct SheetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SheetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SheetArchiveDefaultTypeInternal() {}
  union {
    SheetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SheetArchiveDefaultTypeInternal _SheetArchive_default_instance_;
PROTOBUF_CONSTEXPR FormBasedSheetArchive::FormBasedSheetArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.table_id_)*/nullptr} {}
struct FormBasedSheetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormBasedSheetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormBasedSheetArchiveDefaultTypeInternal() {}
  union {
    FormBasedSheetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormBasedSheetArchiveDefaultTypeInternal _FormBasedSheetArchive_default_instance_;
PROTOBUF_CONSTEXPR ThemeArchive::ThemeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.prototypes_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct ThemeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThemeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThemeArchiveDefaultTypeInternal() {}
  union {
    ThemeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThemeArchiveDefaultTypeInternal _ThemeArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartMediatorFormulaStorage::ChartMediatorFormulaStorage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_formulae_)*/{}
  , /*decltype(_impl_.row_label_formulae_)*/{}
  , /*decltype(_impl_.col_label_formulae_)*/{}
  , /*decltype(_impl_.error_custom_pos_formulae_)*/{}
  , /*decltype(_impl_.error_custom_neg_formulae_)*/{}
  , /*decltype(_impl_.error_custom_pos_scatterx_formulae_)*/{}
  , /*decltype(_impl_.error_custom_neg_scatterx_formulae_)*/{}
  , /*decltype(_impl_.direction_)*/0} {}
struct ChartMediatorFormulaStorageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartMediatorFormulaStorageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartMediatorFormulaStorageDefaultTypeInternal() {}
  union {
    ChartMediatorFormulaStorage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartMediatorFormulaStorageDefaultTypeInternal _ChartMediatorFormulaStorage_default_instance_;
PROTOBUF_CONSTEXPR ChartMediatorArchive::ChartMediatorArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entity_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.formulas_)*/nullptr
  , /*decltype(_impl_.columns_are_series_)*/false
  , /*decltype(_impl_.is_registered_with_calc_engine_)*/false} {}
struct ChartMediatorArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartMediatorArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartMediatorArchiveDefaultTypeInternal() {}
  union {
    ChartMediatorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartMediatorArchiveDefaultTypeInternal _ChartMediatorArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartSelectionArchive::ChartSelectionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reference_)*/nullptr
  , /*decltype(_impl_.super_)*/nullptr} {}
struct ChartSelectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartSelectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartSelectionArchiveDefaultTypeInternal() {}
  union {
    ChartSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartSelectionArchiveDefaultTypeInternal _ChartSelectionArchive_default_instance_;
}  // namespace TN
static ::_pb::Metadata file_level_metadata_TNArchives_2eproto[13];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_TNArchives_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_TNArchives_2eproto = nullptr;

const uint32_t TableStruct_TNArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateArchive, _impl_.view_scale_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateArchive, _impl_.scroll_position_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateArchive, _impl_.previous_view_scale_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateArchive, _impl_.scroll_position_is_unscaled_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateArchive, _impl_.previous_scroll_position_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateArchive, _impl_.scroll_position_valid_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateArchive, _impl_.previous_scroll_position_valid_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateArchive, _impl_.visible_size_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateArchive, _impl_.previous_visible_size_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateArchive, _impl_.device_idiom_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateArchive, _impl_.form_focused_record_index_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateArchive, _impl_.form_focused_field_index_),
  4,
  0,
  5,
  6,
  1,
  7,
  8,
  2,
  3,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateDictionaryEntryArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateDictionaryEntryArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateDictionaryEntryArchive, _impl_.sheet_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateDictionaryEntryArchive, _impl_.sheet_uistate_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, _impl_.active_sheet_index_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, _impl_.selected_info_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, _impl_.sheet_uistate_dictionary_entry_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, _impl_.table_selection_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, _impl_.editing_sheet_index_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, _impl_.document_mode_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, _impl_.edit_mode_sheet_uistate_dictionary_entry_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, _impl_.table_editing_mode_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, _impl_.form_focused_record_index_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, _impl_.form_focused_field_index_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, _impl_.in_chart_mode_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, _impl_.chart_selection_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, _impl_.sheet_selection_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, _impl_.inspector_pane_visible_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, _impl_.inspector_pane_view_mode_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, _impl_.selected_quick_calc_functions_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, _impl_.removed_all_quick_calc_functions_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, _impl_.show_canvas_guides_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, _impl_.shows_comments_),
  3,
  ~0u,
  ~0u,
  0,
  4,
  5,
  ~0u,
  6,
  7,
  8,
  10,
  1,
  2,
  14,
  9,
  ~0u,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::TN::SheetSelectionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::SheetSelectionArchive, _impl_.sheet_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetSelectionArchive, _impl_.paginated_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TN::UndoRedoStateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::UndoRedoStateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::UndoRedoStateArchive, _impl_.ui_state_),
  0,
  PROTOBUF_FIELD_OFFSET(::TN::DocumentArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::DocumentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::DocumentArchive, _impl_.sheets_),
  PROTOBUF_FIELD_OFFSET(::TN::DocumentArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TN::DocumentArchive, _impl_.calculation_engine_),
  PROTOBUF_FIELD_OFFSET(::TN::DocumentArchive, _impl_.stylesheet_),
  PROTOBUF_FIELD_OFFSET(::TN::DocumentArchive, _impl_.sidebar_order_),
  PROTOBUF_FIELD_OFFSET(::TN::DocumentArchive, _impl_.theme_),
  PROTOBUF_FIELD_OFFSET(::TN::DocumentArchive, _impl_.uistate_),
  PROTOBUF_FIELD_OFFSET(::TN::DocumentArchive, _impl_.custom_format_list_),
  PROTOBUF_FIELD_OFFSET(::TN::DocumentArchive, _impl_.printer_id_),
  PROTOBUF_FIELD_OFFSET(::TN::DocumentArchive, _impl_.paper_id_),
  PROTOBUF_FIELD_OFFSET(::TN::DocumentArchive, _impl_.page_size_),
  ~0u,
  7,
  2,
  3,
  4,
  5,
  6,
  8,
  0,
  1,
  9,
  PROTOBUF_FIELD_OFFSET(::TN::PlaceholderArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::PlaceholderArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::PlaceholderArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, _impl_.drawable_infos_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, _impl_.in_portrait_page_orientation_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, _impl_.show_repeating_headers_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, _impl_.show_page_numbers_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, _impl_.is_autofit_on_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, _impl_.content_scale_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, _impl_.page_order_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, _impl_.print_margins_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, _impl_.using_start_page_number_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, _impl_.start_page_number_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, _impl_.page_header_inset_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, _impl_.page_footer_inset_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, _impl_.header_storage_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, _impl_.footer_storage_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, _impl_.userdefinedguidestorage_),
  0,
  ~0u,
  5,
  6,
  7,
  8,
  9,
  10,
  1,
  11,
  12,
  13,
  14,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TN::FormBasedSheetArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::FormBasedSheetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::FormBasedSheetArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TN::FormBasedSheetArchive, _impl_.table_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TN::ThemeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::ThemeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::ThemeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TN::ThemeArchive, _impl_.prototypes_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorFormulaStorage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorFormulaStorage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorFormulaStorage, _impl_.data_formulae_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorFormulaStorage, _impl_.row_label_formulae_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorFormulaStorage, _impl_.col_label_formulae_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorFormulaStorage, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorFormulaStorage, _impl_.error_custom_pos_formulae_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorFormulaStorage, _impl_.error_custom_neg_formulae_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorFormulaStorage, _impl_.error_custom_pos_scatterx_formulae_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorFormulaStorage, _impl_.error_custom_neg_scatterx_formulae_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorArchive, _impl_.entity_id_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorArchive, _impl_.formulas_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorArchive, _impl_.columns_are_series_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorArchive, _impl_.is_registered_with_calc_engine_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TN::ChartSelectionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::ChartSelectionArchive, _impl_.reference_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartSelectionArchive, _impl_.super_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, -1, sizeof(::TN::SheetUIStateArchive)},
  { 30, 38, -1, sizeof(::TN::SheetUIStateDictionaryEntryArchive)},
  { 40, 65, -1, sizeof(::TN::UIStateArchive)},
  { 84, 92, -1, sizeof(::TN::SheetSelectionArchive)},
  { 94, 101, -1, sizeof(::TN::UndoRedoStateArchive)},
  { 102, 119, -1, sizeof(::TN::DocumentArchive)},
  { 130, 137, -1, sizeof(::TN::PlaceholderArchive)},
  { 138, 160, -1, sizeof(::TN::SheetArchive)},
  { 176, 184, -1, sizeof(::TN::FormBasedSheetArchive)},
  { 186, 194, -1, sizeof(::TN::ThemeArchive)},
  { 196, 210, -1, sizeof(::TN::ChartMediatorFormulaStorage)},
  { 218, 229, -1, sizeof(::TN::ChartMediatorArchive)},
  { 234, 242, -1, sizeof(::TN::ChartSelectionArchive)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::TN::_SheetUIStateArchive_default_instance_._instance,
  &::TN::_SheetUIStateDictionaryEntryArchive_default_instance_._instance,
  &::TN::_UIStateArchive_default_instance_._instance,
  &::TN::_SheetSelectionArchive_default_instance_._instance,
  &::TN::_UndoRedoStateArchive_default_instance_._instance,
  &::TN::_DocumentArchive_default_instance_._instance,
  &::TN::_PlaceholderArchive_default_instance_._instance,
  &::TN::_SheetArchive_default_instance_._instance,
  &::TN::_FormBasedSheetArchive_default_instance_._instance,
  &::TN::_ThemeArchive_default_instance_._instance,
  &::TN::_ChartMediatorFormulaStorage_default_instance_._instance,
  &::TN::_ChartMediatorArchive_default_instance_._instance,
  &::TN::_ChartSelectionArchive_default_instance_._instance,
};

const char descriptor_table_protodef_TNArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020TNArchives.proto\022\002TN\032\021TSPMessages.prot"
  "o\032\021TSKArchives.proto\032\022TSCHArchives.proto"
  "\032\022TSCEArchives.proto\032\021TSSArchives.proto\032"
  "\021TSDArchives.proto\032\022TSWPArchives.proto\032\021"
  "TSAArchives.proto\032\021TSTArchives.proto\"\253\003\n"
  "\023SheetUIStateArchive\022\022\n\nview_scale\030\001 \002(\002"
  "\022#\n\017scroll_position\030\002 \002(\0132\n.TSP.Point\022\033\n"
  "\023previous_view_scale\030\003 \001(\002\022#\n\033scroll_pos"
  "ition_is_unscaled\030\004 \001(\010\022,\n\030previous_scro"
  "ll_position\030\005 \001(\0132\n.TSP.Point\022\035\n\025scroll_"
  "position_valid\030\006 \001(\010\022&\n\036previous_scroll_"
  "position_valid\030\007 \001(\010\022\037\n\014visible_size\030\010 \001"
  "(\0132\t.TSP.Size\022(\n\025previous_visible_size\030\t"
  " \001(\0132\t.TSP.Size\022\024\n\014device_idiom\030\n \001(\r\022!\n"
  "\031form_focused_record_index\030\013 \001(\r\022 \n\030form"
  "_focused_field_index\030\014 \001(\r\"s\n\"SheetUISta"
  "teDictionaryEntryArchive\022\035\n\005sheet\030\001 \002(\0132"
  "\016.TSP.Reference\022.\n\rsheet_uistate\030\002 \002(\0132\027"
  ".TN.SheetUIStateArchive\"\270\007\n\016UIStateArchi"
  "ve\022\036\n\022active_sheet_index\030\001 \002(\rB\002\030\001\022%\n\rse"
  "lected_info\030\002 \003(\0132\016.TSP.Reference\022N\n\036she"
  "et_uistate_dictionary_entry\030\003 \003(\0132&.TN.S"
  "heetUIStateDictionaryEntryArchive\022.\n\017tab"
  "le_selection\030\004 \001(\0132\025.TST.SelectionArchiv"
  "e\022\037\n\023editing_sheet_index\030\005 \001(\rB\002\030\001\022\025\n\rdo"
  "cument_mode\030\006 \001(\005\022X\n(edit_mode_sheet_uis"
  "tate_dictionary_entry\030\007 \003(\0132&.TN.SheetUI"
  "StateDictionaryEntryArchive\022\032\n\022table_edi"
  "ting_mode\030\010 \001(\005\022%\n\031form_focused_record_i"
  "ndex\030\t \001(\rB\002\030\001\022$\n\030form_focused_field_ind"
  "ex\030\n \001(\rB\002\030\001\022\025\n\rin_chart_mode\030\013 \001(\010\0222\n\017c"
  "hart_selection\030\014 \001(\0132\031.TN.ChartSelection"
  "Archive\022\'\n\017sheet_selection\030\r \001(\0132\016.TSP.R"
  "eference\022$\n\026inspector_pane_visible\030\016 \001(\010"
  ":\004true\022h\n\030inspector_pane_view_mode\030\017 \001(\016"
  "2(.TN.UIStateArchive.InspectorPaneViewMo"
  "de:\034kInspectorPaneViewModeFormat\022%\n\035sele"
  "cted_quick_calc_functions\030\020 \003(\r\022(\n remov"
  "ed_all_quick_calc_functions\030\021 \001(\010\022\032\n\022sho"
  "w_canvas_guides\030\022 \001(\010\022\026\n\016shows_comments\030"
  "\023 \001(\010\"[\n\025InspectorPaneViewMode\022 \n\034kInspe"
  "ctorPaneViewModeFormat\020\000\022 \n\034kInspectorPa"
  "neViewModeFilter\020\001\"I\n\025SheetSelectionArch"
  "ive\022\035\n\005sheet\030\001 \001(\0132\016.TSP.Reference\022\021\n\tpa"
  "ginated\030\002 \001(\010\"<\n\024UndoRedoStateArchive\022$\n"
  "\010ui_state\030\001 \002(\0132\022.TN.UIStateArchive\"\205\003\n\017"
  "DocumentArchive\022\036\n\006sheets\030\001 \003(\0132\016.TSP.Re"
  "ference\022#\n\005super\030\010 \002(\0132\024.TSA.DocumentArc"
  "hive\022.\n\022calculation_engine\030\003 \001(\0132\016.TSP.R"
  "eferenceB\002\030\001\022\"\n\nstylesheet\030\004 \002(\0132\016.TSP.R"
  "eference\022%\n\rsidebar_order\030\005 \002(\0132\016.TSP.Re"
  "ference\022\035\n\005theme\030\006 \002(\0132\016.TSP.Reference\022#"
  "\n\007uistate\030\007 \001(\0132\022.TN.UIStateArchive\022*\n\022c"
  "ustom_format_list\030\t \001(\0132\016.TSP.Reference\022"
  "\022\n\nprinter_id\030\n \001(\t\022\020\n\010paper_id\030\013 \001(\t\022\034\n"
  "\tpage_size\030\014 \001(\0132\t.TSP.Size\";\n\022Placehold"
  "erArchive\022%\n\005super\030\001 \002(\0132\026.TSWP.ShapeInf"
  "oArchive\"\241\004\n\014SheetArchive\022\014\n\004name\030\001 \002(\t\022"
  "&\n\016drawable_infos\030\002 \003(\0132\016.TSP.Reference\022"
  "$\n\034in_portrait_page_orientation\030\003 \001(\010\022\"\n"
  "\026show_repeating_headers\030\004 \001(\010B\002\030\001\022\031\n\021sho"
  "w_page_numbers\030\005 \001(\010\022\025\n\ris_autofit_on\030\006 "
  "\001(\010\022\025\n\rcontent_scale\030\007 \001(\002\022&\n\npage_order"
  "\030\010 \001(\0162\022.TN.SheetPageOrder\022-\n\rprint_marg"
  "ins\030\n \001(\0132\026.TSD.EdgeInsetsArchive\022\037\n\027usi"
  "ng_start_page_number\030\013 \001(\010\022\031\n\021start_page"
  "_number\030\014 \001(\005\022\031\n\021page_header_inset\030\r \001(\002"
  "\022\031\n\021page_footer_inset\030\016 \001(\002\022&\n\016header_st"
  "orage\030\017 \001(\0132\016.TSP.Reference\022&\n\016footer_st"
  "orage\030\020 \001(\0132\016.TSP.Reference\022/\n\027userDefin"
  "edGuideStorage\030\021 \001(\0132\016.TSP.Reference\"_\n\025"
  "FormBasedSheetArchive\022\037\n\005super\030\001 \002(\0132\020.T"
  "N.SheetArchive\022%\n\010table_id\030\002 \001(\0132\023.TSCE."
  "CFUUIDArchive\"T\n\014ThemeArchive\022 \n\005super\030\001"
  " \002(\0132\021.TSS.ThemeArchive\022\"\n\nprototypes\030\002 "
  "\003(\0132\016.TSP.Reference\"\267\003\n\033ChartMediatorFor"
  "mulaStorage\022+\n\rdata_formulae\030\001 \003(\0132\024.TSC"
  "E.FormulaArchive\0220\n\022row_label_formulae\030\003"
  " \003(\0132\024.TSCE.FormulaArchive\0220\n\022col_label_"
  "formulae\030\004 \003(\0132\024.TSCE.FormulaArchive\022\021\n\t"
  "direction\030\005 \001(\005\0227\n\031error_custom_pos_form"
  "ulae\030\006 \003(\0132\024.TSCE.FormulaArchive\0227\n\031erro"
  "r_custom_neg_formulae\030\007 \003(\0132\024.TSCE.Formu"
  "laArchive\022@\n\"error_custom_pos_scatterX_f"
  "ormulae\030\010 \003(\0132\024.TSCE.FormulaArchive\022@\n\"e"
  "rror_custom_neg_scatterX_formulae\030\t \003(\0132"
  "\024.TSCE.FormulaArchive\"\317\001\n\024ChartMediatorA"
  "rchive\022)\n\005super\030\001 \002(\0132\032.TSCH.ChartMediat"
  "orArchive\022\021\n\tentity_id\030\002 \002(\t\0221\n\010formulas"
  "\030\003 \001(\0132\037.TN.ChartMediatorFormulaStorage\022"
  "\032\n\022columns_are_series\030\004 \001(\010\022*\n\036is_regist"
  "ered_with_calc_engine\030\005 \001(\010B\002\030\001\"s\n\025Chart"
  "SelectionArchive\022.\n\treference\030\001 \001(\0132\033.TS"
  "CE.RangeReferenceArchive\022*\n\005super\030\002 \001(\0132"
  "\033.TSCH.ChartSelectionArchive*N\n\016SheetPag"
  "eOrder\022\035\n\031SheetPageOrderTopToBottom\020\000\022\035\n"
  "\031SheetPageOrderLeftToRight\020\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_TNArchives_2eproto_deps[9] = {
  &::descriptor_table_TSAArchives_2eproto,
  &::descriptor_table_TSCEArchives_2eproto,
  &::descriptor_table_TSCHArchives_2eproto,
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
  &::descriptor_table_TSTArchives_2eproto,
  &::descriptor_table_TSWPArchives_2eproto,
};
static ::_pbi::once_flag descriptor_table_TNArchives_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TNArchives_2eproto = {
    false, false, 3868, descriptor_table_protodef_TNArchives_2eproto,
    "TNArchives.proto",
    &descriptor_table_TNArchives_2eproto_once, descriptor_table_TNArchives_2eproto_deps, 9, 13,
    schemas, file_default_instances, TableStruct_TNArchives_2eproto::offsets,
    file_level_metadata_TNArchives_2eproto, file_level_enum_descriptors_TNArchives_2eproto,
    file_level_service_descriptors_TNArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TNArchives_2eproto_getter() {
  return &descriptor_table_TNArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TNArchives_2eproto(&descriptor_table_TNArchives_2eproto);
namespace TN {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UIStateArchive_InspectorPaneViewMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TNArchives_2eproto);
  return file_level_enum_descriptors_TNArchives_2eproto[0];
}
bool UIStateArchive_InspectorPaneViewMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr UIStateArchive_InspectorPaneViewMode UIStateArchive::kInspectorPaneViewModeFormat;
constexpr UIStateArchive_InspectorPaneViewMode UIStateArchive::kInspectorPaneViewModeFilter;
constexpr UIStateArchive_InspectorPaneViewMode UIStateArchive::InspectorPaneViewMode_MIN;
constexpr UIStateArchive_InspectorPaneViewMode UIStateArchive::InspectorPaneViewMode_MAX;
constexpr int UIStateArchive::InspectorPaneViewMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SheetPageOrder_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TNArchives_2eproto);
  return file_level_enum_descriptors_TNArchives_2eproto[1];
}
bool SheetPageOrder_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SheetUIStateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SheetUIStateArchive>()._impl_._has_bits_);
  static void set_has_view_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Point& scroll_position(const SheetUIStateArchive* msg);
  static void set_has_scroll_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_previous_view_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_scroll_position_is_unscaled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Point& previous_scroll_position(const SheetUIStateArchive* msg);
  static void set_has_previous_scroll_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scroll_position_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_previous_scroll_position_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::Size& visible_size(const SheetUIStateArchive* msg);
  static void set_has_visible_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Size& previous_visible_size(const SheetUIStateArchive* msg);
  static void set_has_previous_visible_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_device_idiom(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_form_focused_record_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_form_focused_field_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000011) ^ 0x00000011) != 0;
  }
};

const ::TSP::Point&
SheetUIStateArchive::_Internal::scroll_position(const SheetUIStateArchive* msg) {
  return *msg->_impl_.scroll_position_;
}
const ::TSP::Point&
SheetUIStateArchive::_Internal::previous_scroll_position(const SheetUIStateArchive* msg) {
  return *msg->_impl_.previous_scroll_position_;
}
const ::TSP::Size&
SheetUIStateArchive::_Internal::visible_size(const SheetUIStateArchive* msg) {
  return *msg->_impl_.visible_size_;
}
const ::TSP::Size&
SheetUIStateArchive::_Internal::previous_visible_size(const SheetUIStateArchive* msg) {
  return *msg->_impl_.previous_visible_size_;
}
void SheetUIStateArchive::clear_scroll_position() {
  if (_impl_.scroll_position_ != nullptr) _impl_.scroll_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SheetUIStateArchive::clear_previous_scroll_position() {
  if (_impl_.previous_scroll_position_ != nullptr) _impl_.previous_scroll_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void SheetUIStateArchive::clear_visible_size() {
  if (_impl_.visible_size_ != nullptr) _impl_.visible_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void SheetUIStateArchive::clear_previous_visible_size() {
  if (_impl_.previous_visible_size_ != nullptr) _impl_.previous_visible_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
SheetUIStateArchive::SheetUIStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.SheetUIStateArchive)
}
SheetUIStateArchive::SheetUIStateArchive(const SheetUIStateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SheetUIStateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.scroll_position_){nullptr}
    , decltype(_impl_.previous_scroll_position_){nullptr}
    , decltype(_impl_.visible_size_){nullptr}
    , decltype(_impl_.previous_visible_size_){nullptr}
    , decltype(_impl_.view_scale_){}
    , decltype(_impl_.previous_view_scale_){}
    , decltype(_impl_.scroll_position_is_unscaled_){}
    , decltype(_impl_.scroll_position_valid_){}
    , decltype(_impl_.previous_scroll_position_valid_){}
    , decltype(_impl_.device_idiom_){}
    , decltype(_impl_.form_focused_record_index_){}
    , decltype(_impl_.form_focused_field_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scroll_position()) {
    _this->_impl_.scroll_position_ = new ::TSP::Point(*from._impl_.scroll_position_);
  }
  if (from._internal_has_previous_scroll_position()) {
    _this->_impl_.previous_scroll_position_ = new ::TSP::Point(*from._impl_.previous_scroll_position_);
  }
  if (from._internal_has_visible_size()) {
    _this->_impl_.visible_size_ = new ::TSP::Size(*from._impl_.visible_size_);
  }
  if (from._internal_has_previous_visible_size()) {
    _this->_impl_.previous_visible_size_ = new ::TSP::Size(*from._impl_.previous_visible_size_);
  }
  ::memcpy(&_impl_.view_scale_, &from._impl_.view_scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.form_focused_field_index_) -
    reinterpret_cast<char*>(&_impl_.view_scale_)) + sizeof(_impl_.form_focused_field_index_));
  // @@protoc_insertion_point(copy_constructor:TN.SheetUIStateArchive)
}

inline void SheetUIStateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.scroll_position_){nullptr}
    , decltype(_impl_.previous_scroll_position_){nullptr}
    , decltype(_impl_.visible_size_){nullptr}
    , decltype(_impl_.previous_visible_size_){nullptr}
    , decltype(_impl_.view_scale_){0}
    , decltype(_impl_.previous_view_scale_){0}
    , decltype(_impl_.scroll_position_is_unscaled_){false}
    , decltype(_impl_.scroll_position_valid_){false}
    , decltype(_impl_.previous_scroll_position_valid_){false}
    , decltype(_impl_.device_idiom_){0u}
    , decltype(_impl_.form_focused_record_index_){0u}
    , decltype(_impl_.form_focused_field_index_){0u}
  };
}

SheetUIStateArchive::~SheetUIStateArchive() {
  // @@protoc_insertion_point(destructor:TN.SheetUIStateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SheetUIStateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.scroll_position_;
  if (this != internal_default_instance()) delete _impl_.previous_scroll_position_;
  if (this != internal_default_instance()) delete _impl_.visible_size_;
  if (this != internal_default_instance()) delete _impl_.previous_visible_size_;
}

void SheetUIStateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SheetUIStateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.SheetUIStateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.scroll_position_ != nullptr);
      _impl_.scroll_position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.previous_scroll_position_ != nullptr);
      _impl_.previous_scroll_position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.visible_size_ != nullptr);
      _impl_.visible_size_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.previous_visible_size_ != nullptr);
      _impl_.previous_visible_size_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.view_scale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.scroll_position_valid_) -
        reinterpret_cast<char*>(&_impl_.view_scale_)) + sizeof(_impl_.scroll_position_valid_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.previous_scroll_position_valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.form_focused_field_index_) -
        reinterpret_cast<char*>(&_impl_.previous_scroll_position_valid_)) + sizeof(_impl_.form_focused_field_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SheetUIStateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float view_scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_view_scale(&has_bits);
          _impl_.view_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Point scroll_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scroll_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float previous_view_scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_previous_view_scale(&has_bits);
          _impl_.previous_view_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool scroll_position_is_unscaled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_scroll_position_is_unscaled(&has_bits);
          _impl_.scroll_position_is_unscaled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Point previous_scroll_position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_previous_scroll_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool scroll_position_valid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_scroll_position_valid(&has_bits);
          _impl_.scroll_position_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool previous_scroll_position_valid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_previous_scroll_position_valid(&has_bits);
          _impl_.previous_scroll_position_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Size visible_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_visible_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Size previous_visible_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_previous_visible_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 device_idiom = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_device_idiom(&has_bits);
          _impl_.device_idiom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 form_focused_record_index = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_form_focused_record_index(&has_bits);
          _impl_.form_focused_record_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 form_focused_field_index = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_form_focused_field_index(&has_bits);
          _impl_.form_focused_field_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SheetUIStateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.SheetUIStateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float view_scale = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_view_scale(), target);
  }

  // required .TSP.Point scroll_position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::scroll_position(this),
        _Internal::scroll_position(this).GetCachedSize(), target, stream);
  }

  // optional float previous_view_scale = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_previous_view_scale(), target);
  }

  // optional bool scroll_position_is_unscaled = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_scroll_position_is_unscaled(), target);
  }

  // optional .TSP.Point previous_scroll_position = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::previous_scroll_position(this),
        _Internal::previous_scroll_position(this).GetCachedSize(), target, stream);
  }

  // optional bool scroll_position_valid = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_scroll_position_valid(), target);
  }

  // optional bool previous_scroll_position_valid = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_previous_scroll_position_valid(), target);
  }

  // optional .TSP.Size visible_size = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::visible_size(this),
        _Internal::visible_size(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Size previous_visible_size = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::previous_visible_size(this),
        _Internal::previous_visible_size(this).GetCachedSize(), target, stream);
  }

  // optional uint32 device_idiom = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_device_idiom(), target);
  }

  // optional uint32 form_focused_record_index = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_form_focused_record_index(), target);
  }

  // optional uint32 form_focused_field_index = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_form_focused_field_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.SheetUIStateArchive)
  return target;
}

size_t SheetUIStateArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.SheetUIStateArchive)
  size_t total_size = 0;

  if (_internal_has_scroll_position()) {
    // required .TSP.Point scroll_position = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scroll_position_);
  }

  if (_internal_has_view_scale()) {
    // required float view_scale = 1;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SheetUIStateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.SheetUIStateArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000011) ^ 0x00000011) == 0) {  // All required fields are present.
    // required .TSP.Point scroll_position = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scroll_position_);

    // required float view_scale = 1;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSP.Point previous_scroll_position = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.previous_scroll_position_);
    }

    // optional .TSP.Size visible_size = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.visible_size_);
    }

    // optional .TSP.Size previous_visible_size = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.previous_visible_size_);
    }

  }
  if (cached_has_bits & 0x000000e0u) {
    // optional float previous_view_scale = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional bool scroll_position_is_unscaled = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool scroll_position_valid = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool previous_scroll_position_valid = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional uint32 device_idiom = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_device_idiom());
    }

    // optional uint32 form_focused_record_index = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_form_focused_record_index());
    }

    // optional uint32 form_focused_field_index = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_form_focused_field_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SheetUIStateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SheetUIStateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SheetUIStateArchive::GetClassData() const { return &_class_data_; }


void SheetUIStateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SheetUIStateArchive*>(&to_msg);
  auto& from = static_cast<const SheetUIStateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.SheetUIStateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_scroll_position()->::TSP::Point::MergeFrom(
          from._internal_scroll_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_previous_scroll_position()->::TSP::Point::MergeFrom(
          from._internal_previous_scroll_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_visible_size()->::TSP::Size::MergeFrom(
          from._internal_visible_size());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_previous_visible_size()->::TSP::Size::MergeFrom(
          from._internal_previous_visible_size());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.view_scale_ = from._impl_.view_scale_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.previous_view_scale_ = from._impl_.previous_view_scale_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.scroll_position_is_unscaled_ = from._impl_.scroll_position_is_unscaled_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.scroll_position_valid_ = from._impl_.scroll_position_valid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.previous_scroll_position_valid_ = from._impl_.previous_scroll_position_valid_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.device_idiom_ = from._impl_.device_idiom_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.form_focused_record_index_ = from._impl_.form_focused_record_index_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.form_focused_field_index_ = from._impl_.form_focused_field_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SheetUIStateArchive::CopyFrom(const SheetUIStateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.SheetUIStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SheetUIStateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_scroll_position()) {
    if (!_impl_.scroll_position_->IsInitialized()) return false;
  }
  if (_internal_has_previous_scroll_position()) {
    if (!_impl_.previous_scroll_position_->IsInitialized()) return false;
  }
  if (_internal_has_visible_size()) {
    if (!_impl_.visible_size_->IsInitialized()) return false;
  }
  if (_internal_has_previous_visible_size()) {
    if (!_impl_.previous_visible_size_->IsInitialized()) return false;
  }
  return true;
}

void SheetUIStateArchive::InternalSwap(SheetUIStateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SheetUIStateArchive, _impl_.form_focused_field_index_)
      + sizeof(SheetUIStateArchive::_impl_.form_focused_field_index_)
      - PROTOBUF_FIELD_OFFSET(SheetUIStateArchive, _impl_.scroll_position_)>(
          reinterpret_cast<char*>(&_impl_.scroll_position_),
          reinterpret_cast<char*>(&other->_impl_.scroll_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SheetUIStateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[0]);
}

// ===================================================================

class SheetUIStateDictionaryEntryArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SheetUIStateDictionaryEntryArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& sheet(const SheetUIStateDictionaryEntryArchive* msg);
  static void set_has_sheet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TN::SheetUIStateArchive& sheet_uistate(const SheetUIStateDictionaryEntryArchive* msg);
  static void set_has_sheet_uistate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Reference&
SheetUIStateDictionaryEntryArchive::_Internal::sheet(const SheetUIStateDictionaryEntryArchive* msg) {
  return *msg->_impl_.sheet_;
}
const ::TN::SheetUIStateArchive&
SheetUIStateDictionaryEntryArchive::_Internal::sheet_uistate(const SheetUIStateDictionaryEntryArchive* msg) {
  return *msg->_impl_.sheet_uistate_;
}
void SheetUIStateDictionaryEntryArchive::clear_sheet() {
  if (_impl_.sheet_ != nullptr) _impl_.sheet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SheetUIStateDictionaryEntryArchive::SheetUIStateDictionaryEntryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.SheetUIStateDictionaryEntryArchive)
}
SheetUIStateDictionaryEntryArchive::SheetUIStateDictionaryEntryArchive(const SheetUIStateDictionaryEntryArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SheetUIStateDictionaryEntryArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sheet_){nullptr}
    , decltype(_impl_.sheet_uistate_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sheet()) {
    _this->_impl_.sheet_ = new ::TSP::Reference(*from._impl_.sheet_);
  }
  if (from._internal_has_sheet_uistate()) {
    _this->_impl_.sheet_uistate_ = new ::TN::SheetUIStateArchive(*from._impl_.sheet_uistate_);
  }
  // @@protoc_insertion_point(copy_constructor:TN.SheetUIStateDictionaryEntryArchive)
}

inline void SheetUIStateDictionaryEntryArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sheet_){nullptr}
    , decltype(_impl_.sheet_uistate_){nullptr}
  };
}

SheetUIStateDictionaryEntryArchive::~SheetUIStateDictionaryEntryArchive() {
  // @@protoc_insertion_point(destructor:TN.SheetUIStateDictionaryEntryArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SheetUIStateDictionaryEntryArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.sheet_;
  if (this != internal_default_instance()) delete _impl_.sheet_uistate_;
}

void SheetUIStateDictionaryEntryArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SheetUIStateDictionaryEntryArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.SheetUIStateDictionaryEntryArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.sheet_ != nullptr);
      _impl_.sheet_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.sheet_uistate_ != nullptr);
      _impl_.sheet_uistate_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SheetUIStateDictionaryEntryArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference sheet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TN.SheetUIStateArchive sheet_uistate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet_uistate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SheetUIStateDictionaryEntryArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.SheetUIStateDictionaryEntryArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference sheet = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::sheet(this),
        _Internal::sheet(this).GetCachedSize(), target, stream);
  }

  // required .TN.SheetUIStateArchive sheet_uistate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sheet_uistate(this),
        _Internal::sheet_uistate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.SheetUIStateDictionaryEntryArchive)
  return target;
}

size_t SheetUIStateDictionaryEntryArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.SheetUIStateDictionaryEntryArchive)
  size_t total_size = 0;

  if (_internal_has_sheet()) {
    // required .TSP.Reference sheet = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);
  }

  if (_internal_has_sheet_uistate()) {
    // required .TN.SheetUIStateArchive sheet_uistate = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_uistate_);
  }

  return total_size;
}
size_t SheetUIStateDictionaryEntryArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.SheetUIStateDictionaryEntryArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.Reference sheet = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);

    // required .TN.SheetUIStateArchive sheet_uistate = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_uistate_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SheetUIStateDictionaryEntryArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SheetUIStateDictionaryEntryArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SheetUIStateDictionaryEntryArchive::GetClassData() const { return &_class_data_; }


void SheetUIStateDictionaryEntryArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SheetUIStateDictionaryEntryArchive*>(&to_msg);
  auto& from = static_cast<const SheetUIStateDictionaryEntryArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.SheetUIStateDictionaryEntryArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_sheet()->::TSP::Reference::MergeFrom(
          from._internal_sheet());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_sheet_uistate()->::TN::SheetUIStateArchive::MergeFrom(
          from._internal_sheet_uistate());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SheetUIStateDictionaryEntryArchive::CopyFrom(const SheetUIStateDictionaryEntryArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.SheetUIStateDictionaryEntryArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SheetUIStateDictionaryEntryArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_sheet()) {
    if (!_impl_.sheet_->IsInitialized()) return false;
  }
  if (_internal_has_sheet_uistate()) {
    if (!_impl_.sheet_uistate_->IsInitialized()) return false;
  }
  return true;
}

void SheetUIStateDictionaryEntryArchive::InternalSwap(SheetUIStateDictionaryEntryArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SheetUIStateDictionaryEntryArchive, _impl_.sheet_uistate_)
      + sizeof(SheetUIStateDictionaryEntryArchive::_impl_.sheet_uistate_)
      - PROTOBUF_FIELD_OFFSET(SheetUIStateDictionaryEntryArchive, _impl_.sheet_)>(
          reinterpret_cast<char*>(&_impl_.sheet_),
          reinterpret_cast<char*>(&other->_impl_.sheet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SheetUIStateDictionaryEntryArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[1]);
}

// ===================================================================

class UIStateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UIStateArchive>()._impl_._has_bits_);
  static void set_has_active_sheet_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TST::SelectionArchive& table_selection(const UIStateArchive* msg);
  static void set_has_table_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_editing_sheet_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_document_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_table_editing_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_form_focused_record_index(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_form_focused_field_index(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_in_chart_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TN::ChartSelectionArchive& chart_selection(const UIStateArchive* msg);
  static void set_has_chart_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& sheet_selection(const UIStateArchive* msg);
  static void set_has_sheet_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_inspector_pane_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_inspector_pane_view_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_removed_all_quick_calc_functions(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_show_canvas_guides(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_shows_comments(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000008) ^ 0x00000008) != 0;
  }
};

const ::TST::SelectionArchive&
UIStateArchive::_Internal::table_selection(const UIStateArchive* msg) {
  return *msg->_impl_.table_selection_;
}
const ::TN::ChartSelectionArchive&
UIStateArchive::_Internal::chart_selection(const UIStateArchive* msg) {
  return *msg->_impl_.chart_selection_;
}
const ::TSP::Reference&
UIStateArchive::_Internal::sheet_selection(const UIStateArchive* msg) {
  return *msg->_impl_.sheet_selection_;
}
void UIStateArchive::clear_selected_info() {
  _impl_.selected_info_.Clear();
}
void UIStateArchive::clear_table_selection() {
  if (_impl_.table_selection_ != nullptr) _impl_.table_selection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void UIStateArchive::clear_sheet_selection() {
  if (_impl_.sheet_selection_ != nullptr) _impl_.sheet_selection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
UIStateArchive::UIStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.UIStateArchive)
}
UIStateArchive::UIStateArchive(const UIStateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UIStateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selected_info_){from._impl_.selected_info_}
    , decltype(_impl_.sheet_uistate_dictionary_entry_){from._impl_.sheet_uistate_dictionary_entry_}
    , decltype(_impl_.edit_mode_sheet_uistate_dictionary_entry_){from._impl_.edit_mode_sheet_uistate_dictionary_entry_}
    , decltype(_impl_.selected_quick_calc_functions_){from._impl_.selected_quick_calc_functions_}
    , decltype(_impl_.table_selection_){nullptr}
    , decltype(_impl_.chart_selection_){nullptr}
    , decltype(_impl_.sheet_selection_){nullptr}
    , decltype(_impl_.active_sheet_index_){}
    , decltype(_impl_.editing_sheet_index_){}
    , decltype(_impl_.document_mode_){}
    , decltype(_impl_.table_editing_mode_){}
    , decltype(_impl_.form_focused_record_index_){}
    , decltype(_impl_.form_focused_field_index_){}
    , decltype(_impl_.inspector_pane_view_mode_){}
    , decltype(_impl_.in_chart_mode_){}
    , decltype(_impl_.removed_all_quick_calc_functions_){}
    , decltype(_impl_.show_canvas_guides_){}
    , decltype(_impl_.shows_comments_){}
    , decltype(_impl_.inspector_pane_visible_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_selection()) {
    _this->_impl_.table_selection_ = new ::TST::SelectionArchive(*from._impl_.table_selection_);
  }
  if (from._internal_has_chart_selection()) {
    _this->_impl_.chart_selection_ = new ::TN::ChartSelectionArchive(*from._impl_.chart_selection_);
  }
  if (from._internal_has_sheet_selection()) {
    _this->_impl_.sheet_selection_ = new ::TSP::Reference(*from._impl_.sheet_selection_);
  }
  ::memcpy(&_impl_.active_sheet_index_, &from._impl_.active_sheet_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.inspector_pane_visible_) -
    reinterpret_cast<char*>(&_impl_.active_sheet_index_)) + sizeof(_impl_.inspector_pane_visible_));
  // @@protoc_insertion_point(copy_constructor:TN.UIStateArchive)
}

inline void UIStateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selected_info_){arena}
    , decltype(_impl_.sheet_uistate_dictionary_entry_){arena}
    , decltype(_impl_.edit_mode_sheet_uistate_dictionary_entry_){arena}
    , decltype(_impl_.selected_quick_calc_functions_){arena}
    , decltype(_impl_.table_selection_){nullptr}
    , decltype(_impl_.chart_selection_){nullptr}
    , decltype(_impl_.sheet_selection_){nullptr}
    , decltype(_impl_.active_sheet_index_){0u}
    , decltype(_impl_.editing_sheet_index_){0u}
    , decltype(_impl_.document_mode_){0}
    , decltype(_impl_.table_editing_mode_){0}
    , decltype(_impl_.form_focused_record_index_){0u}
    , decltype(_impl_.form_focused_field_index_){0u}
    , decltype(_impl_.inspector_pane_view_mode_){0}
    , decltype(_impl_.in_chart_mode_){false}
    , decltype(_impl_.removed_all_quick_calc_functions_){false}
    , decltype(_impl_.show_canvas_guides_){false}
    , decltype(_impl_.shows_comments_){false}
    , decltype(_impl_.inspector_pane_visible_){true}
  };
}

UIStateArchive::~UIStateArchive() {
  // @@protoc_insertion_point(destructor:TN.UIStateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UIStateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.selected_info_.~RepeatedPtrField();
  _impl_.sheet_uistate_dictionary_entry_.~RepeatedPtrField();
  _impl_.edit_mode_sheet_uistate_dictionary_entry_.~RepeatedPtrField();
  _impl_.selected_quick_calc_functions_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.table_selection_;
  if (this != internal_default_instance()) delete _impl_.chart_selection_;
  if (this != internal_default_instance()) delete _impl_.sheet_selection_;
}

void UIStateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UIStateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.UIStateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.selected_info_.Clear();
  _impl_.sheet_uistate_dictionary_entry_.Clear();
  _impl_.edit_mode_sheet_uistate_dictionary_entry_.Clear();
  _impl_.selected_quick_calc_functions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.table_selection_ != nullptr);
      _impl_.table_selection_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.chart_selection_ != nullptr);
      _impl_.chart_selection_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.sheet_selection_ != nullptr);
      _impl_.sheet_selection_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.active_sheet_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.form_focused_record_index_) -
        reinterpret_cast<char*>(&_impl_.active_sheet_index_)) + sizeof(_impl_.form_focused_record_index_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.form_focused_field_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.shows_comments_) -
        reinterpret_cast<char*>(&_impl_.form_focused_field_index_)) + sizeof(_impl_.shows_comments_));
    _impl_.inspector_pane_visible_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UIStateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 active_sheet_index = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_active_sheet_index(&has_bits);
          _impl_.active_sheet_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference selected_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_selected_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TN.SheetUIStateDictionaryEntryArchive sheet_uistate_dictionary_entry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sheet_uistate_dictionary_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TST.SelectionArchive table_selection = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_selection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 editing_sheet_index = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_editing_sheet_index(&has_bits);
          _impl_.editing_sheet_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 document_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_document_mode(&has_bits);
          _impl_.document_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TN.SheetUIStateDictionaryEntryArchive edit_mode_sheet_uistate_dictionary_entry = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edit_mode_sheet_uistate_dictionary_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 table_editing_mode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_table_editing_mode(&has_bits);
          _impl_.table_editing_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 form_focused_record_index = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_form_focused_record_index(&has_bits);
          _impl_.form_focused_record_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 form_focused_field_index = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_form_focused_field_index(&has_bits);
          _impl_.form_focused_field_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool in_chart_mode = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_in_chart_mode(&has_bits);
          _impl_.in_chart_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TN.ChartSelectionArchive chart_selection = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart_selection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference sheet_selection = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet_selection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool inspector_pane_visible = 14 [default = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_inspector_pane_visible(&has_bits);
          _impl_.inspector_pane_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TN.UIStateArchive.InspectorPaneViewMode inspector_pane_view_mode = 15 [default = kInspectorPaneViewModeFormat];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TN::UIStateArchive_InspectorPaneViewMode_IsValid(val))) {
            _internal_set_inspector_pane_view_mode(static_cast<::TN::UIStateArchive_InspectorPaneViewMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 selected_quick_calc_functions = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_selected_quick_calc_functions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<128>(ptr));
        } else if (static_cast<uint8_t>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_selected_quick_calc_functions(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool removed_all_quick_calc_functions = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_removed_all_quick_calc_functions(&has_bits);
          _impl_.removed_all_quick_calc_functions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_canvas_guides = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_show_canvas_guides(&has_bits);
          _impl_.show_canvas_guides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool shows_comments = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_shows_comments(&has_bits);
          _impl_.shows_comments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UIStateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.UIStateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 active_sheet_index = 1 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_active_sheet_index(), target);
  }

  // repeated .TSP.Reference selected_info = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_selected_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_selected_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TN.SheetUIStateDictionaryEntryArchive sheet_uistate_dictionary_entry = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sheet_uistate_dictionary_entry_size()); i < n; i++) {
    const auto& repfield = this->_internal_sheet_uistate_dictionary_entry(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TST.SelectionArchive table_selection = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::table_selection(this),
        _Internal::table_selection(this).GetCachedSize(), target, stream);
  }

  // optional uint32 editing_sheet_index = 5 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_editing_sheet_index(), target);
  }

  // optional int32 document_mode = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_document_mode(), target);
  }

  // repeated .TN.SheetUIStateDictionaryEntryArchive edit_mode_sheet_uistate_dictionary_entry = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_edit_mode_sheet_uistate_dictionary_entry_size()); i < n; i++) {
    const auto& repfield = this->_internal_edit_mode_sheet_uistate_dictionary_entry(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 table_editing_mode = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_table_editing_mode(), target);
  }

  // optional uint32 form_focused_record_index = 9 [deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_form_focused_record_index(), target);
  }

  // optional uint32 form_focused_field_index = 10 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_form_focused_field_index(), target);
  }

  // optional bool in_chart_mode = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_in_chart_mode(), target);
  }

  // optional .TN.ChartSelectionArchive chart_selection = 12;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::chart_selection(this),
        _Internal::chart_selection(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference sheet_selection = 13;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::sheet_selection(this),
        _Internal::sheet_selection(this).GetCachedSize(), target, stream);
  }

  // optional bool inspector_pane_visible = 14 [default = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_inspector_pane_visible(), target);
  }

  // optional .TN.UIStateArchive.InspectorPaneViewMode inspector_pane_view_mode = 15 [default = kInspectorPaneViewModeFormat];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_inspector_pane_view_mode(), target);
  }

  // repeated uint32 selected_quick_calc_functions = 16;
  for (int i = 0, n = this->_internal_selected_quick_calc_functions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_selected_quick_calc_functions(i), target);
  }

  // optional bool removed_all_quick_calc_functions = 17;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_removed_all_quick_calc_functions(), target);
  }

  // optional bool show_canvas_guides = 18;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_show_canvas_guides(), target);
  }

  // optional bool shows_comments = 19;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_shows_comments(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.UIStateArchive)
  return target;
}

size_t UIStateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.UIStateArchive)
  size_t total_size = 0;

  // required uint32 active_sheet_index = 1 [deprecated = true];
  if (_internal_has_active_sheet_index()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_active_sheet_index());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference selected_info = 2;
  total_size += 1UL * this->_internal_selected_info_size();
  for (const auto& msg : this->_impl_.selected_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TN.SheetUIStateDictionaryEntryArchive sheet_uistate_dictionary_entry = 3;
  total_size += 1UL * this->_internal_sheet_uistate_dictionary_entry_size();
  for (const auto& msg : this->_impl_.sheet_uistate_dictionary_entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TN.SheetUIStateDictionaryEntryArchive edit_mode_sheet_uistate_dictionary_entry = 7;
  total_size += 1UL * this->_internal_edit_mode_sheet_uistate_dictionary_entry_size();
  for (const auto& msg : this->_impl_.edit_mode_sheet_uistate_dictionary_entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 selected_quick_calc_functions = 16;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.selected_quick_calc_functions_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_selected_quick_calc_functions_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TST.SelectionArchive table_selection = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_selection_);
    }

    // optional .TN.ChartSelectionArchive chart_selection = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chart_selection_);
    }

    // optional .TSP.Reference sheet_selection = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sheet_selection_);
    }

  }
  if (cached_has_bits & 0x000000f0u) {
    // optional uint32 editing_sheet_index = 5 [deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_editing_sheet_index());
    }

    // optional int32 document_mode = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_document_mode());
    }

    // optional int32 table_editing_mode = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_table_editing_mode());
    }

    // optional uint32 form_focused_record_index = 9 [deprecated = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_form_focused_record_index());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 form_focused_field_index = 10 [deprecated = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_form_focused_field_index());
    }

    // optional .TN.UIStateArchive.InspectorPaneViewMode inspector_pane_view_mode = 15 [default = kInspectorPaneViewModeFormat];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_inspector_pane_view_mode());
    }

    // optional bool in_chart_mode = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool removed_all_quick_calc_functions = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool show_canvas_guides = 18;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool shows_comments = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool inspector_pane_visible = 14 [default = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UIStateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UIStateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UIStateArchive::GetClassData() const { return &_class_data_; }


void UIStateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UIStateArchive*>(&to_msg);
  auto& from = static_cast<const UIStateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.UIStateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.selected_info_.MergeFrom(from._impl_.selected_info_);
  _this->_impl_.sheet_uistate_dictionary_entry_.MergeFrom(from._impl_.sheet_uistate_dictionary_entry_);
  _this->_impl_.edit_mode_sheet_uistate_dictionary_entry_.MergeFrom(from._impl_.edit_mode_sheet_uistate_dictionary_entry_);
  _this->_impl_.selected_quick_calc_functions_.MergeFrom(from._impl_.selected_quick_calc_functions_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_table_selection()->::TST::SelectionArchive::MergeFrom(
          from._internal_table_selection());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_chart_selection()->::TN::ChartSelectionArchive::MergeFrom(
          from._internal_chart_selection());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_sheet_selection()->::TSP::Reference::MergeFrom(
          from._internal_sheet_selection());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.active_sheet_index_ = from._impl_.active_sheet_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.editing_sheet_index_ = from._impl_.editing_sheet_index_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.document_mode_ = from._impl_.document_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.table_editing_mode_ = from._impl_.table_editing_mode_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.form_focused_record_index_ = from._impl_.form_focused_record_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.form_focused_field_index_ = from._impl_.form_focused_field_index_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.inspector_pane_view_mode_ = from._impl_.inspector_pane_view_mode_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.in_chart_mode_ = from._impl_.in_chart_mode_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.removed_all_quick_calc_functions_ = from._impl_.removed_all_quick_calc_functions_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.show_canvas_guides_ = from._impl_.show_canvas_guides_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.shows_comments_ = from._impl_.shows_comments_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.inspector_pane_visible_ = from._impl_.inspector_pane_visible_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UIStateArchive::CopyFrom(const UIStateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.UIStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIStateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.selected_info_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.sheet_uistate_dictionary_entry_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.edit_mode_sheet_uistate_dictionary_entry_))
    return false;
  if (_internal_has_table_selection()) {
    if (!_impl_.table_selection_->IsInitialized()) return false;
  }
  if (_internal_has_chart_selection()) {
    if (!_impl_.chart_selection_->IsInitialized()) return false;
  }
  if (_internal_has_sheet_selection()) {
    if (!_impl_.sheet_selection_->IsInitialized()) return false;
  }
  return true;
}

void UIStateArchive::InternalSwap(UIStateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.selected_info_.InternalSwap(&other->_impl_.selected_info_);
  _impl_.sheet_uistate_dictionary_entry_.InternalSwap(&other->_impl_.sheet_uistate_dictionary_entry_);
  _impl_.edit_mode_sheet_uistate_dictionary_entry_.InternalSwap(&other->_impl_.edit_mode_sheet_uistate_dictionary_entry_);
  _impl_.selected_quick_calc_functions_.InternalSwap(&other->_impl_.selected_quick_calc_functions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UIStateArchive, _impl_.shows_comments_)
      + sizeof(UIStateArchive::_impl_.shows_comments_)
      - PROTOBUF_FIELD_OFFSET(UIStateArchive, _impl_.table_selection_)>(
          reinterpret_cast<char*>(&_impl_.table_selection_),
          reinterpret_cast<char*>(&other->_impl_.table_selection_));
  swap(_impl_.inspector_pane_visible_, other->_impl_.inspector_pane_visible_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UIStateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[2]);
}

// ===================================================================

class SheetSelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SheetSelectionArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& sheet(const SheetSelectionArchive* msg);
  static void set_has_sheet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_paginated(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
SheetSelectionArchive::_Internal::sheet(const SheetSelectionArchive* msg) {
  return *msg->_impl_.sheet_;
}
void SheetSelectionArchive::clear_sheet() {
  if (_impl_.sheet_ != nullptr) _impl_.sheet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SheetSelectionArchive::SheetSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.SheetSelectionArchive)
}
SheetSelectionArchive::SheetSelectionArchive(const SheetSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SheetSelectionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sheet_){nullptr}
    , decltype(_impl_.paginated_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sheet()) {
    _this->_impl_.sheet_ = new ::TSP::Reference(*from._impl_.sheet_);
  }
  _this->_impl_.paginated_ = from._impl_.paginated_;
  // @@protoc_insertion_point(copy_constructor:TN.SheetSelectionArchive)
}

inline void SheetSelectionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sheet_){nullptr}
    , decltype(_impl_.paginated_){false}
  };
}

SheetSelectionArchive::~SheetSelectionArchive() {
  // @@protoc_insertion_point(destructor:TN.SheetSelectionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SheetSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.sheet_;
}

void SheetSelectionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SheetSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.SheetSelectionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.sheet_ != nullptr);
    _impl_.sheet_->Clear();
  }
  _impl_.paginated_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SheetSelectionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference sheet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool paginated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_paginated(&has_bits);
          _impl_.paginated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SheetSelectionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.SheetSelectionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference sheet = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::sheet(this),
        _Internal::sheet(this).GetCachedSize(), target, stream);
  }

  // optional bool paginated = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_paginated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.SheetSelectionArchive)
  return target;
}

size_t SheetSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.SheetSelectionArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference sheet = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sheet_);
    }

    // optional bool paginated = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SheetSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SheetSelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SheetSelectionArchive::GetClassData() const { return &_class_data_; }


void SheetSelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SheetSelectionArchive*>(&to_msg);
  auto& from = static_cast<const SheetSelectionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.SheetSelectionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_sheet()->::TSP::Reference::MergeFrom(
          from._internal_sheet());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.paginated_ = from._impl_.paginated_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SheetSelectionArchive::CopyFrom(const SheetSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.SheetSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SheetSelectionArchive::IsInitialized() const {
  if (_internal_has_sheet()) {
    if (!_impl_.sheet_->IsInitialized()) return false;
  }
  return true;
}

void SheetSelectionArchive::InternalSwap(SheetSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SheetSelectionArchive, _impl_.paginated_)
      + sizeof(SheetSelectionArchive::_impl_.paginated_)
      - PROTOBUF_FIELD_OFFSET(SheetSelectionArchive, _impl_.sheet_)>(
          reinterpret_cast<char*>(&_impl_.sheet_),
          reinterpret_cast<char*>(&other->_impl_.sheet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SheetSelectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[3]);
}

// ===================================================================

class UndoRedoStateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoRedoStateArchive>()._impl_._has_bits_);
  static const ::TN::UIStateArchive& ui_state(const UndoRedoStateArchive* msg);
  static void set_has_ui_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TN::UIStateArchive&
UndoRedoStateArchive::_Internal::ui_state(const UndoRedoStateArchive* msg) {
  return *msg->_impl_.ui_state_;
}
UndoRedoStateArchive::UndoRedoStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.UndoRedoStateArchive)
}
UndoRedoStateArchive::UndoRedoStateArchive(const UndoRedoStateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UndoRedoStateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ui_state_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ui_state()) {
    _this->_impl_.ui_state_ = new ::TN::UIStateArchive(*from._impl_.ui_state_);
  }
  // @@protoc_insertion_point(copy_constructor:TN.UndoRedoStateArchive)
}

inline void UndoRedoStateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ui_state_){nullptr}
  };
}

UndoRedoStateArchive::~UndoRedoStateArchive() {
  // @@protoc_insertion_point(destructor:TN.UndoRedoStateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UndoRedoStateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ui_state_;
}

void UndoRedoStateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UndoRedoStateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.UndoRedoStateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.ui_state_ != nullptr);
    _impl_.ui_state_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoRedoStateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TN.UIStateArchive ui_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ui_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UndoRedoStateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.UndoRedoStateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TN.UIStateArchive ui_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ui_state(this),
        _Internal::ui_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.UndoRedoStateArchive)
  return target;
}

size_t UndoRedoStateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.UndoRedoStateArchive)
  size_t total_size = 0;

  // required .TN.UIStateArchive ui_state = 1;
  if (_internal_has_ui_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ui_state_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoRedoStateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UndoRedoStateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoRedoStateArchive::GetClassData() const { return &_class_data_; }


void UndoRedoStateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UndoRedoStateArchive*>(&to_msg);
  auto& from = static_cast<const UndoRedoStateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.UndoRedoStateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ui_state()) {
    _this->_internal_mutable_ui_state()->::TN::UIStateArchive::MergeFrom(
        from._internal_ui_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoRedoStateArchive::CopyFrom(const UndoRedoStateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.UndoRedoStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoRedoStateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_ui_state()) {
    if (!_impl_.ui_state_->IsInitialized()) return false;
  }
  return true;
}

void UndoRedoStateArchive::InternalSwap(UndoRedoStateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.ui_state_, other->_impl_.ui_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoRedoStateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[4]);
}

// ===================================================================

class DocumentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentArchive>()._impl_._has_bits_);
  static const ::TSA::DocumentArchive& super(const DocumentArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Reference& calculation_engine(const DocumentArchive* msg);
  static void set_has_calculation_engine(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& stylesheet(const DocumentArchive* msg);
  static void set_has_stylesheet(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& sidebar_order(const DocumentArchive* msg);
  static void set_has_sidebar_order(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& theme(const DocumentArchive* msg);
  static void set_has_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TN::UIStateArchive& uistate(const DocumentArchive* msg);
  static void set_has_uistate(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Reference& custom_format_list(const DocumentArchive* msg);
  static void set_has_custom_format_list(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_printer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_paper_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Size& page_size(const DocumentArchive* msg);
  static void set_has_page_size(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000b8) ^ 0x000000b8) != 0;
  }
};

const ::TSA::DocumentArchive&
DocumentArchive::_Internal::super(const DocumentArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::calculation_engine(const DocumentArchive* msg) {
  return *msg->_impl_.calculation_engine_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::stylesheet(const DocumentArchive* msg) {
  return *msg->_impl_.stylesheet_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::sidebar_order(const DocumentArchive* msg) {
  return *msg->_impl_.sidebar_order_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::theme(const DocumentArchive* msg) {
  return *msg->_impl_.theme_;
}
const ::TN::UIStateArchive&
DocumentArchive::_Internal::uistate(const DocumentArchive* msg) {
  return *msg->_impl_.uistate_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::custom_format_list(const DocumentArchive* msg) {
  return *msg->_impl_.custom_format_list_;
}
const ::TSP::Size&
DocumentArchive::_Internal::page_size(const DocumentArchive* msg) {
  return *msg->_impl_.page_size_;
}
void DocumentArchive::clear_sheets() {
  _impl_.sheets_.Clear();
}
void DocumentArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void DocumentArchive::clear_calculation_engine() {
  if (_impl_.calculation_engine_ != nullptr) _impl_.calculation_engine_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void DocumentArchive::clear_stylesheet() {
  if (_impl_.stylesheet_ != nullptr) _impl_.stylesheet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void DocumentArchive::clear_sidebar_order() {
  if (_impl_.sidebar_order_ != nullptr) _impl_.sidebar_order_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void DocumentArchive::clear_theme() {
  if (_impl_.theme_ != nullptr) _impl_.theme_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void DocumentArchive::clear_custom_format_list() {
  if (_impl_.custom_format_list_ != nullptr) _impl_.custom_format_list_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void DocumentArchive::clear_page_size() {
  if (_impl_.page_size_ != nullptr) _impl_.page_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
DocumentArchive::DocumentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.DocumentArchive)
}
DocumentArchive::DocumentArchive(const DocumentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DocumentArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sheets_){from._impl_.sheets_}
    , decltype(_impl_.printer_id_){}
    , decltype(_impl_.paper_id_){}
    , decltype(_impl_.calculation_engine_){nullptr}
    , decltype(_impl_.stylesheet_){nullptr}
    , decltype(_impl_.sidebar_order_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.uistate_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.custom_format_list_){nullptr}
    , decltype(_impl_.page_size_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.printer_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.printer_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_printer_id()) {
    _this->_impl_.printer_id_.Set(from._internal_printer_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.paper_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paper_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_paper_id()) {
    _this->_impl_.paper_id_.Set(from._internal_paper_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_calculation_engine()) {
    _this->_impl_.calculation_engine_ = new ::TSP::Reference(*from._impl_.calculation_engine_);
  }
  if (from._internal_has_stylesheet()) {
    _this->_impl_.stylesheet_ = new ::TSP::Reference(*from._impl_.stylesheet_);
  }
  if (from._internal_has_sidebar_order()) {
    _this->_impl_.sidebar_order_ = new ::TSP::Reference(*from._impl_.sidebar_order_);
  }
  if (from._internal_has_theme()) {
    _this->_impl_.theme_ = new ::TSP::Reference(*from._impl_.theme_);
  }
  if (from._internal_has_uistate()) {
    _this->_impl_.uistate_ = new ::TN::UIStateArchive(*from._impl_.uistate_);
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSA::DocumentArchive(*from._impl_.super_);
  }
  if (from._internal_has_custom_format_list()) {
    _this->_impl_.custom_format_list_ = new ::TSP::Reference(*from._impl_.custom_format_list_);
  }
  if (from._internal_has_page_size()) {
    _this->_impl_.page_size_ = new ::TSP::Size(*from._impl_.page_size_);
  }
  // @@protoc_insertion_point(copy_constructor:TN.DocumentArchive)
}

inline void DocumentArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sheets_){arena}
    , decltype(_impl_.printer_id_){}
    , decltype(_impl_.paper_id_){}
    , decltype(_impl_.calculation_engine_){nullptr}
    , decltype(_impl_.stylesheet_){nullptr}
    , decltype(_impl_.sidebar_order_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.uistate_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.custom_format_list_){nullptr}
    , decltype(_impl_.page_size_){nullptr}
  };
  _impl_.printer_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.printer_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.paper_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paper_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DocumentArchive::~DocumentArchive() {
  // @@protoc_insertion_point(destructor:TN.DocumentArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DocumentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sheets_.~RepeatedPtrField();
  _impl_.printer_id_.Destroy();
  _impl_.paper_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.calculation_engine_;
  if (this != internal_default_instance()) delete _impl_.stylesheet_;
  if (this != internal_default_instance()) delete _impl_.sidebar_order_;
  if (this != internal_default_instance()) delete _impl_.theme_;
  if (this != internal_default_instance()) delete _impl_.uistate_;
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.custom_format_list_;
  if (this != internal_default_instance()) delete _impl_.page_size_;
}

void DocumentArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DocumentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.DocumentArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sheets_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.printer_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.paper_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.calculation_engine_ != nullptr);
      _impl_.calculation_engine_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.stylesheet_ != nullptr);
      _impl_.stylesheet_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.sidebar_order_ != nullptr);
      _impl_.sidebar_order_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.theme_ != nullptr);
      _impl_.theme_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.uistate_ != nullptr);
      _impl_.uistate_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.custom_format_list_ != nullptr);
      _impl_.custom_format_list_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.page_size_ != nullptr);
      _impl_.page_size_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference sheets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sheets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference calculation_engine = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_calculation_engine(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference stylesheet = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stylesheet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference sidebar_order = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sidebar_order(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference theme = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TN.UIStateArchive uistate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_uistate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSA.DocumentArchive super = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference custom_format_list = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_format_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string printer_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_printer_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TN.DocumentArchive.printer_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string paper_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_paper_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TN.DocumentArchive.paper_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Size page_size = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_page_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DocumentArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.DocumentArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference sheets = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sheets_size()); i < n; i++) {
    const auto& repfield = this->_internal_sheets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference calculation_engine = 3 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::calculation_engine(this),
        _Internal::calculation_engine(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference stylesheet = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::stylesheet(this),
        _Internal::stylesheet(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference sidebar_order = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::sidebar_order(this),
        _Internal::sidebar_order(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference theme = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::theme(this),
        _Internal::theme(this).GetCachedSize(), target, stream);
  }

  // optional .TN.UIStateArchive uistate = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::uistate(this),
        _Internal::uistate(this).GetCachedSize(), target, stream);
  }

  // required .TSA.DocumentArchive super = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference custom_format_list = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::custom_format_list(this),
        _Internal::custom_format_list(this).GetCachedSize(), target, stream);
  }

  // optional string printer_id = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_printer_id().data(), static_cast<int>(this->_internal_printer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TN.DocumentArchive.printer_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_printer_id(), target);
  }

  // optional string paper_id = 11;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_paper_id().data(), static_cast<int>(this->_internal_paper_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TN.DocumentArchive.paper_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_paper_id(), target);
  }

  // optional .TSP.Size page_size = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::page_size(this),
        _Internal::page_size(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.DocumentArchive)
  return target;
}

size_t DocumentArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.DocumentArchive)
  size_t total_size = 0;

  if (_internal_has_stylesheet()) {
    // required .TSP.Reference stylesheet = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stylesheet_);
  }

  if (_internal_has_sidebar_order()) {
    // required .TSP.Reference sidebar_order = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sidebar_order_);
  }

  if (_internal_has_theme()) {
    // required .TSP.Reference theme = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);
  }

  if (_internal_has_super()) {
    // required .TSA.DocumentArchive super = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  return total_size;
}
size_t DocumentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.DocumentArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000000b8) ^ 0x000000b8) == 0) {  // All required fields are present.
    // required .TSP.Reference stylesheet = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stylesheet_);

    // required .TSP.Reference sidebar_order = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sidebar_order_);

    // required .TSP.Reference theme = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);

    // required .TSA.DocumentArchive super = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference sheets = 1;
  total_size += 1UL * this->_internal_sheets_size();
  for (const auto& msg : this->_impl_.sheets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string printer_id = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_printer_id());
    }

    // optional string paper_id = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_paper_id());
    }

    // optional .TSP.Reference calculation_engine = 3 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.calculation_engine_);
    }

  }
  // optional .TN.UIStateArchive uistate = 7;
  if (cached_has_bits & 0x00000040u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uistate_);
  }

  if (cached_has_bits & 0x00000300u) {
    // optional .TSP.Reference custom_format_list = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.custom_format_list_);
    }

    // optional .TSP.Size page_size = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.page_size_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DocumentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentArchive::GetClassData() const { return &_class_data_; }


void DocumentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DocumentArchive*>(&to_msg);
  auto& from = static_cast<const DocumentArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.DocumentArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sheets_.MergeFrom(from._impl_.sheets_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_printer_id(from._internal_printer_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_paper_id(from._internal_paper_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_calculation_engine()->::TSP::Reference::MergeFrom(
          from._internal_calculation_engine());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_stylesheet()->::TSP::Reference::MergeFrom(
          from._internal_stylesheet());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_sidebar_order()->::TSP::Reference::MergeFrom(
          from._internal_sidebar_order());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_theme()->::TSP::Reference::MergeFrom(
          from._internal_theme());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_uistate()->::TN::UIStateArchive::MergeFrom(
          from._internal_uistate());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_super()->::TSA::DocumentArchive::MergeFrom(
          from._internal_super());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_custom_format_list()->::TSP::Reference::MergeFrom(
          from._internal_custom_format_list());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_page_size()->::TSP::Size::MergeFrom(
          from._internal_page_size());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentArchive::CopyFrom(const DocumentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.DocumentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.sheets_))
    return false;
  if (_internal_has_calculation_engine()) {
    if (!_impl_.calculation_engine_->IsInitialized()) return false;
  }
  if (_internal_has_stylesheet()) {
    if (!_impl_.stylesheet_->IsInitialized()) return false;
  }
  if (_internal_has_sidebar_order()) {
    if (!_impl_.sidebar_order_->IsInitialized()) return false;
  }
  if (_internal_has_theme()) {
    if (!_impl_.theme_->IsInitialized()) return false;
  }
  if (_internal_has_uistate()) {
    if (!_impl_.uistate_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_custom_format_list()) {
    if (!_impl_.custom_format_list_->IsInitialized()) return false;
  }
  if (_internal_has_page_size()) {
    if (!_impl_.page_size_->IsInitialized()) return false;
  }
  return true;
}

void DocumentArchive::InternalSwap(DocumentArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.sheets_.InternalSwap(&other->_impl_.sheets_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.printer_id_, lhs_arena,
      &other->_impl_.printer_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.paper_id_, lhs_arena,
      &other->_impl_.paper_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentArchive, _impl_.page_size_)
      + sizeof(DocumentArchive::_impl_.page_size_)
      - PROTOBUF_FIELD_OFFSET(DocumentArchive, _impl_.calculation_engine_)>(
          reinterpret_cast<char*>(&_impl_.calculation_engine_),
          reinterpret_cast<char*>(&other->_impl_.calculation_engine_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[5]);
}

// ===================================================================

class PlaceholderArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PlaceholderArchive>()._impl_._has_bits_);
  static const ::TSWP::ShapeInfoArchive& super(const PlaceholderArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::ShapeInfoArchive&
PlaceholderArchive::_Internal::super(const PlaceholderArchive* msg) {
  return *msg->_impl_.super_;
}
void PlaceholderArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PlaceholderArchive::PlaceholderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.PlaceholderArchive)
}
PlaceholderArchive::PlaceholderArchive(const PlaceholderArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlaceholderArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSWP::ShapeInfoArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TN.PlaceholderArchive)
}

inline void PlaceholderArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

PlaceholderArchive::~PlaceholderArchive() {
  // @@protoc_insertion_point(destructor:TN.PlaceholderArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlaceholderArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void PlaceholderArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlaceholderArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.PlaceholderArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaceholderArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.ShapeInfoArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlaceholderArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.PlaceholderArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSWP.ShapeInfoArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.PlaceholderArchive)
  return target;
}

size_t PlaceholderArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.PlaceholderArchive)
  size_t total_size = 0;

  // required .TSWP.ShapeInfoArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlaceholderArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlaceholderArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlaceholderArchive::GetClassData() const { return &_class_data_; }


void PlaceholderArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlaceholderArchive*>(&to_msg);
  auto& from = static_cast<const PlaceholderArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.PlaceholderArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSWP::ShapeInfoArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlaceholderArchive::CopyFrom(const PlaceholderArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.PlaceholderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceholderArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void PlaceholderArchive::InternalSwap(PlaceholderArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceholderArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[6]);
}

// ===================================================================

class SheetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SheetArchive>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_in_portrait_page_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_show_repeating_headers(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_show_page_numbers(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_autofit_on(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_content_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_page_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSD::EdgeInsetsArchive& print_margins(const SheetArchive* msg);
  static void set_has_print_margins(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_using_start_page_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_start_page_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_page_header_inset(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_page_footer_inset(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::Reference& header_storage(const SheetArchive* msg);
  static void set_has_header_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& footer_storage(const SheetArchive* msg);
  static void set_has_footer_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& userdefinedguidestorage(const SheetArchive* msg);
  static void set_has_userdefinedguidestorage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::EdgeInsetsArchive&
SheetArchive::_Internal::print_margins(const SheetArchive* msg) {
  return *msg->_impl_.print_margins_;
}
const ::TSP::Reference&
SheetArchive::_Internal::header_storage(const SheetArchive* msg) {
  return *msg->_impl_.header_storage_;
}
const ::TSP::Reference&
SheetArchive::_Internal::footer_storage(const SheetArchive* msg) {
  return *msg->_impl_.footer_storage_;
}
const ::TSP::Reference&
SheetArchive::_Internal::userdefinedguidestorage(const SheetArchive* msg) {
  return *msg->_impl_.userdefinedguidestorage_;
}
void SheetArchive::clear_drawable_infos() {
  _impl_.drawable_infos_.Clear();
}
void SheetArchive::clear_print_margins() {
  if (_impl_.print_margins_ != nullptr) _impl_.print_margins_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void SheetArchive::clear_header_storage() {
  if (_impl_.header_storage_ != nullptr) _impl_.header_storage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void SheetArchive::clear_footer_storage() {
  if (_impl_.footer_storage_ != nullptr) _impl_.footer_storage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void SheetArchive::clear_userdefinedguidestorage() {
  if (_impl_.userdefinedguidestorage_ != nullptr) _impl_.userdefinedguidestorage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
SheetArchive::SheetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.SheetArchive)
}
SheetArchive::SheetArchive(const SheetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SheetArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawable_infos_){from._impl_.drawable_infos_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.print_margins_){nullptr}
    , decltype(_impl_.header_storage_){nullptr}
    , decltype(_impl_.footer_storage_){nullptr}
    , decltype(_impl_.userdefinedguidestorage_){nullptr}
    , decltype(_impl_.in_portrait_page_orientation_){}
    , decltype(_impl_.show_repeating_headers_){}
    , decltype(_impl_.show_page_numbers_){}
    , decltype(_impl_.is_autofit_on_){}
    , decltype(_impl_.content_scale_){}
    , decltype(_impl_.page_order_){}
    , decltype(_impl_.using_start_page_number_){}
    , decltype(_impl_.start_page_number_){}
    , decltype(_impl_.page_header_inset_){}
    , decltype(_impl_.page_footer_inset_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_print_margins()) {
    _this->_impl_.print_margins_ = new ::TSD::EdgeInsetsArchive(*from._impl_.print_margins_);
  }
  if (from._internal_has_header_storage()) {
    _this->_impl_.header_storage_ = new ::TSP::Reference(*from._impl_.header_storage_);
  }
  if (from._internal_has_footer_storage()) {
    _this->_impl_.footer_storage_ = new ::TSP::Reference(*from._impl_.footer_storage_);
  }
  if (from._internal_has_userdefinedguidestorage()) {
    _this->_impl_.userdefinedguidestorage_ = new ::TSP::Reference(*from._impl_.userdefinedguidestorage_);
  }
  ::memcpy(&_impl_.in_portrait_page_orientation_, &from._impl_.in_portrait_page_orientation_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.page_footer_inset_) -
    reinterpret_cast<char*>(&_impl_.in_portrait_page_orientation_)) + sizeof(_impl_.page_footer_inset_));
  // @@protoc_insertion_point(copy_constructor:TN.SheetArchive)
}

inline void SheetArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawable_infos_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.print_margins_){nullptr}
    , decltype(_impl_.header_storage_){nullptr}
    , decltype(_impl_.footer_storage_){nullptr}
    , decltype(_impl_.userdefinedguidestorage_){nullptr}
    , decltype(_impl_.in_portrait_page_orientation_){false}
    , decltype(_impl_.show_repeating_headers_){false}
    , decltype(_impl_.show_page_numbers_){false}
    , decltype(_impl_.is_autofit_on_){false}
    , decltype(_impl_.content_scale_){0}
    , decltype(_impl_.page_order_){0}
    , decltype(_impl_.using_start_page_number_){false}
    , decltype(_impl_.start_page_number_){0}
    , decltype(_impl_.page_header_inset_){0}
    , decltype(_impl_.page_footer_inset_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SheetArchive::~SheetArchive() {
  // @@protoc_insertion_point(destructor:TN.SheetArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SheetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.drawable_infos_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.print_margins_;
  if (this != internal_default_instance()) delete _impl_.header_storage_;
  if (this != internal_default_instance()) delete _impl_.footer_storage_;
  if (this != internal_default_instance()) delete _impl_.userdefinedguidestorage_;
}

void SheetArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SheetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.SheetArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.drawable_infos_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.print_margins_ != nullptr);
      _impl_.print_margins_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.header_storage_ != nullptr);
      _impl_.header_storage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.footer_storage_ != nullptr);
      _impl_.footer_storage_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.userdefinedguidestorage_ != nullptr);
      _impl_.userdefinedguidestorage_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.in_portrait_page_orientation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.show_page_numbers_) -
        reinterpret_cast<char*>(&_impl_.in_portrait_page_orientation_)) + sizeof(_impl_.show_page_numbers_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.is_autofit_on_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.page_footer_inset_) -
        reinterpret_cast<char*>(&_impl_.is_autofit_on_)) + sizeof(_impl_.page_footer_inset_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SheetArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TN.SheetArchive.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference drawable_infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawable_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool in_portrait_page_orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_in_portrait_page_orientation(&has_bits);
          _impl_.in_portrait_page_orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_repeating_headers = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_show_repeating_headers(&has_bits);
          _impl_.show_repeating_headers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_page_numbers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_show_page_numbers(&has_bits);
          _impl_.show_page_numbers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_autofit_on = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_autofit_on(&has_bits);
          _impl_.is_autofit_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float content_scale = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_content_scale(&has_bits);
          _impl_.content_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TN.SheetPageOrder page_order = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TN::SheetPageOrder_IsValid(val))) {
            _internal_set_page_order(static_cast<::TN::SheetPageOrder>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.EdgeInsetsArchive print_margins = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_print_margins(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool using_start_page_number = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_using_start_page_number(&has_bits);
          _impl_.using_start_page_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 start_page_number = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_start_page_number(&has_bits);
          _impl_.start_page_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float page_header_inset = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_page_header_inset(&has_bits);
          _impl_.page_header_inset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float page_footer_inset = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_page_footer_inset(&has_bits);
          _impl_.page_footer_inset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference header_storage = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_storage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference footer_storage = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_footer_storage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference userDefinedGuideStorage = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_userdefinedguidestorage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SheetArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.SheetArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TN.SheetArchive.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .TSP.Reference drawable_infos = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_drawable_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_drawable_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool in_portrait_page_orientation = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_in_portrait_page_orientation(), target);
  }

  // optional bool show_repeating_headers = 4 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_show_repeating_headers(), target);
  }

  // optional bool show_page_numbers = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_show_page_numbers(), target);
  }

  // optional bool is_autofit_on = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_autofit_on(), target);
  }

  // optional float content_scale = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_content_scale(), target);
  }

  // optional .TN.SheetPageOrder page_order = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_page_order(), target);
  }

  // optional .TSD.EdgeInsetsArchive print_margins = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::print_margins(this),
        _Internal::print_margins(this).GetCachedSize(), target, stream);
  }

  // optional bool using_start_page_number = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_using_start_page_number(), target);
  }

  // optional int32 start_page_number = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_start_page_number(), target);
  }

  // optional float page_header_inset = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_page_header_inset(), target);
  }

  // optional float page_footer_inset = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_page_footer_inset(), target);
  }

  // optional .TSP.Reference header_storage = 15;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::header_storage(this),
        _Internal::header_storage(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference footer_storage = 16;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::footer_storage(this),
        _Internal::footer_storage(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference userDefinedGuideStorage = 17;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::userdefinedguidestorage(this),
        _Internal::userdefinedguidestorage(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.SheetArchive)
  return target;
}

size_t SheetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.SheetArchive)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference drawable_infos = 2;
  total_size += 1UL * this->_internal_drawable_infos_size();
  for (const auto& msg : this->_impl_.drawable_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TSD.EdgeInsetsArchive print_margins = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.print_margins_);
    }

    // optional .TSP.Reference header_storage = 15;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_storage_);
    }

    // optional .TSP.Reference footer_storage = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.footer_storage_);
    }

    // optional .TSP.Reference userDefinedGuideStorage = 17;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.userdefinedguidestorage_);
    }

    // optional bool in_portrait_page_orientation = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool show_repeating_headers = 4 [deprecated = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool show_page_numbers = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional bool is_autofit_on = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional float content_scale = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional .TN.SheetPageOrder page_order = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_page_order());
    }

    // optional bool using_start_page_number = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional int32 start_page_number = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_start_page_number());
    }

    // optional float page_header_inset = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float page_footer_inset = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SheetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SheetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SheetArchive::GetClassData() const { return &_class_data_; }


void SheetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SheetArchive*>(&to_msg);
  auto& from = static_cast<const SheetArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.SheetArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.drawable_infos_.MergeFrom(from._impl_.drawable_infos_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_print_margins()->::TSD::EdgeInsetsArchive::MergeFrom(
          from._internal_print_margins());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_header_storage()->::TSP::Reference::MergeFrom(
          from._internal_header_storage());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_footer_storage()->::TSP::Reference::MergeFrom(
          from._internal_footer_storage());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_userdefinedguidestorage()->::TSP::Reference::MergeFrom(
          from._internal_userdefinedguidestorage());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.in_portrait_page_orientation_ = from._impl_.in_portrait_page_orientation_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.show_repeating_headers_ = from._impl_.show_repeating_headers_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.show_page_numbers_ = from._impl_.show_page_numbers_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.is_autofit_on_ = from._impl_.is_autofit_on_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.content_scale_ = from._impl_.content_scale_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.page_order_ = from._impl_.page_order_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.using_start_page_number_ = from._impl_.using_start_page_number_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.start_page_number_ = from._impl_.start_page_number_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.page_header_inset_ = from._impl_.page_header_inset_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.page_footer_inset_ = from._impl_.page_footer_inset_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SheetArchive::CopyFrom(const SheetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.SheetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SheetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.drawable_infos_))
    return false;
  if (_internal_has_print_margins()) {
    if (!_impl_.print_margins_->IsInitialized()) return false;
  }
  if (_internal_has_header_storage()) {
    if (!_impl_.header_storage_->IsInitialized()) return false;
  }
  if (_internal_has_footer_storage()) {
    if (!_impl_.footer_storage_->IsInitialized()) return false;
  }
  if (_internal_has_userdefinedguidestorage()) {
    if (!_impl_.userdefinedguidestorage_->IsInitialized()) return false;
  }
  return true;
}

void SheetArchive::InternalSwap(SheetArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.drawable_infos_.InternalSwap(&other->_impl_.drawable_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SheetArchive, _impl_.page_footer_inset_)
      + sizeof(SheetArchive::_impl_.page_footer_inset_)
      - PROTOBUF_FIELD_OFFSET(SheetArchive, _impl_.print_margins_)>(
          reinterpret_cast<char*>(&_impl_.print_margins_),
          reinterpret_cast<char*>(&other->_impl_.print_margins_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SheetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[7]);
}

// ===================================================================

class FormBasedSheetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormBasedSheetArchive>()._impl_._has_bits_);
  static const ::TN::SheetArchive& super(const FormBasedSheetArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::CFUUIDArchive& table_id(const FormBasedSheetArchive* msg);
  static void set_has_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TN::SheetArchive&
FormBasedSheetArchive::_Internal::super(const FormBasedSheetArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSCE::CFUUIDArchive&
FormBasedSheetArchive::_Internal::table_id(const FormBasedSheetArchive* msg) {
  return *msg->_impl_.table_id_;
}
void FormBasedSheetArchive::clear_table_id() {
  if (_impl_.table_id_ != nullptr) _impl_.table_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
FormBasedSheetArchive::FormBasedSheetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.FormBasedSheetArchive)
}
FormBasedSheetArchive::FormBasedSheetArchive(const FormBasedSheetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormBasedSheetArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.table_id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TN::SheetArchive(*from._impl_.super_);
  }
  if (from._internal_has_table_id()) {
    _this->_impl_.table_id_ = new ::TSCE::CFUUIDArchive(*from._impl_.table_id_);
  }
  // @@protoc_insertion_point(copy_constructor:TN.FormBasedSheetArchive)
}

inline void FormBasedSheetArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.table_id_){nullptr}
  };
}

FormBasedSheetArchive::~FormBasedSheetArchive() {
  // @@protoc_insertion_point(destructor:TN.FormBasedSheetArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormBasedSheetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.table_id_;
}

void FormBasedSheetArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormBasedSheetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.FormBasedSheetArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.table_id_ != nullptr);
      _impl_.table_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormBasedSheetArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TN.SheetArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CFUUIDArchive table_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormBasedSheetArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.FormBasedSheetArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TN.SheetArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CFUUIDArchive table_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::table_id(this),
        _Internal::table_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.FormBasedSheetArchive)
  return target;
}

size_t FormBasedSheetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.FormBasedSheetArchive)
  size_t total_size = 0;

  // required .TN.SheetArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSCE.CFUUIDArchive table_id = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormBasedSheetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormBasedSheetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormBasedSheetArchive::GetClassData() const { return &_class_data_; }


void FormBasedSheetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormBasedSheetArchive*>(&to_msg);
  auto& from = static_cast<const FormBasedSheetArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.FormBasedSheetArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TN::SheetArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_table_id()->::TSCE::CFUUIDArchive::MergeFrom(
          from._internal_table_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormBasedSheetArchive::CopyFrom(const FormBasedSheetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.FormBasedSheetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormBasedSheetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void FormBasedSheetArchive::InternalSwap(FormBasedSheetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormBasedSheetArchive, _impl_.table_id_)
      + sizeof(FormBasedSheetArchive::_impl_.table_id_)
      - PROTOBUF_FIELD_OFFSET(FormBasedSheetArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormBasedSheetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[8]);
}

// ===================================================================

class ThemeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ThemeArchive>()._impl_._has_bits_);
  static const ::TSS::ThemeArchive& super(const ThemeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::ThemeArchive&
ThemeArchive::_Internal::super(const ThemeArchive* msg) {
  return *msg->_impl_.super_;
}
void ThemeArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ThemeArchive::clear_prototypes() {
  _impl_.prototypes_.Clear();
}
ThemeArchive::ThemeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.ThemeArchive)
}
ThemeArchive::ThemeArchive(const ThemeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ThemeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.prototypes_){from._impl_.prototypes_}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSS::ThemeArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TN.ThemeArchive)
}

inline void ThemeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.prototypes_){arena}
    , decltype(_impl_.super_){nullptr}
  };
}

ThemeArchive::~ThemeArchive() {
  // @@protoc_insertion_point(destructor:TN.ThemeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThemeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.prototypes_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void ThemeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ThemeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.ThemeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prototypes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThemeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.ThemeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference prototypes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prototypes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThemeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.ThemeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSS.ThemeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference prototypes = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_prototypes_size()); i < n; i++) {
    const auto& repfield = this->_internal_prototypes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.ThemeArchive)
  return target;
}

size_t ThemeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.ThemeArchive)
  size_t total_size = 0;

  // required .TSS.ThemeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference prototypes = 2;
  total_size += 1UL * this->_internal_prototypes_size();
  for (const auto& msg : this->_impl_.prototypes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThemeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ThemeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThemeArchive::GetClassData() const { return &_class_data_; }


void ThemeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ThemeArchive*>(&to_msg);
  auto& from = static_cast<const ThemeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.ThemeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.prototypes_.MergeFrom(from._impl_.prototypes_);
  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSS::ThemeArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThemeArchive::CopyFrom(const ThemeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.ThemeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.prototypes_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void ThemeArchive::InternalSwap(ThemeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.prototypes_.InternalSwap(&other->_impl_.prototypes_);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThemeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[9]);
}

// ===================================================================

class ChartMediatorFormulaStorage::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartMediatorFormulaStorage>()._impl_._has_bits_);
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void ChartMediatorFormulaStorage::clear_data_formulae() {
  _impl_.data_formulae_.Clear();
}
void ChartMediatorFormulaStorage::clear_row_label_formulae() {
  _impl_.row_label_formulae_.Clear();
}
void ChartMediatorFormulaStorage::clear_col_label_formulae() {
  _impl_.col_label_formulae_.Clear();
}
void ChartMediatorFormulaStorage::clear_error_custom_pos_formulae() {
  _impl_.error_custom_pos_formulae_.Clear();
}
void ChartMediatorFormulaStorage::clear_error_custom_neg_formulae() {
  _impl_.error_custom_neg_formulae_.Clear();
}
void ChartMediatorFormulaStorage::clear_error_custom_pos_scatterx_formulae() {
  _impl_.error_custom_pos_scatterx_formulae_.Clear();
}
void ChartMediatorFormulaStorage::clear_error_custom_neg_scatterx_formulae() {
  _impl_.error_custom_neg_scatterx_formulae_.Clear();
}
ChartMediatorFormulaStorage::ChartMediatorFormulaStorage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.ChartMediatorFormulaStorage)
}
ChartMediatorFormulaStorage::ChartMediatorFormulaStorage(const ChartMediatorFormulaStorage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartMediatorFormulaStorage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_formulae_){from._impl_.data_formulae_}
    , decltype(_impl_.row_label_formulae_){from._impl_.row_label_formulae_}
    , decltype(_impl_.col_label_formulae_){from._impl_.col_label_formulae_}
    , decltype(_impl_.error_custom_pos_formulae_){from._impl_.error_custom_pos_formulae_}
    , decltype(_impl_.error_custom_neg_formulae_){from._impl_.error_custom_neg_formulae_}
    , decltype(_impl_.error_custom_pos_scatterx_formulae_){from._impl_.error_custom_pos_scatterx_formulae_}
    , decltype(_impl_.error_custom_neg_scatterx_formulae_){from._impl_.error_custom_neg_scatterx_formulae_}
    , decltype(_impl_.direction_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.direction_ = from._impl_.direction_;
  // @@protoc_insertion_point(copy_constructor:TN.ChartMediatorFormulaStorage)
}

inline void ChartMediatorFormulaStorage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_formulae_){arena}
    , decltype(_impl_.row_label_formulae_){arena}
    , decltype(_impl_.col_label_formulae_){arena}
    , decltype(_impl_.error_custom_pos_formulae_){arena}
    , decltype(_impl_.error_custom_neg_formulae_){arena}
    , decltype(_impl_.error_custom_pos_scatterx_formulae_){arena}
    , decltype(_impl_.error_custom_neg_scatterx_formulae_){arena}
    , decltype(_impl_.direction_){0}
  };
}

ChartMediatorFormulaStorage::~ChartMediatorFormulaStorage() {
  // @@protoc_insertion_point(destructor:TN.ChartMediatorFormulaStorage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartMediatorFormulaStorage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_formulae_.~RepeatedPtrField();
  _impl_.row_label_formulae_.~RepeatedPtrField();
  _impl_.col_label_formulae_.~RepeatedPtrField();
  _impl_.error_custom_pos_formulae_.~RepeatedPtrField();
  _impl_.error_custom_neg_formulae_.~RepeatedPtrField();
  _impl_.error_custom_pos_scatterx_formulae_.~RepeatedPtrField();
  _impl_.error_custom_neg_scatterx_formulae_.~RepeatedPtrField();
}

void ChartMediatorFormulaStorage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartMediatorFormulaStorage::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.ChartMediatorFormulaStorage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_formulae_.Clear();
  _impl_.row_label_formulae_.Clear();
  _impl_.col_label_formulae_.Clear();
  _impl_.error_custom_pos_formulae_.Clear();
  _impl_.error_custom_neg_formulae_.Clear();
  _impl_.error_custom_pos_scatterx_formulae_.Clear();
  _impl_.error_custom_neg_scatterx_formulae_.Clear();
  _impl_.direction_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartMediatorFormulaStorage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.FormulaArchive data_formulae = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_formulae(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.FormulaArchive row_label_formulae = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_label_formulae(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.FormulaArchive col_label_formulae = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_col_label_formulae(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 direction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_direction(&has_bits);
          _impl_.direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.FormulaArchive error_custom_pos_formulae = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_error_custom_pos_formulae(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.FormulaArchive error_custom_neg_formulae = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_error_custom_neg_formulae(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.FormulaArchive error_custom_pos_scatterX_formulae = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_error_custom_pos_scatterx_formulae(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.FormulaArchive error_custom_neg_scatterX_formulae = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_error_custom_neg_scatterx_formulae(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartMediatorFormulaStorage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.ChartMediatorFormulaStorage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.FormulaArchive data_formulae = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_formulae_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_formulae(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCE.FormulaArchive row_label_formulae = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_row_label_formulae_size()); i < n; i++) {
    const auto& repfield = this->_internal_row_label_formulae(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCE.FormulaArchive col_label_formulae = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_col_label_formulae_size()); i < n; i++) {
    const auto& repfield = this->_internal_col_label_formulae(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 direction = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_direction(), target);
  }

  // repeated .TSCE.FormulaArchive error_custom_pos_formulae = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_error_custom_pos_formulae_size()); i < n; i++) {
    const auto& repfield = this->_internal_error_custom_pos_formulae(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCE.FormulaArchive error_custom_neg_formulae = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_error_custom_neg_formulae_size()); i < n; i++) {
    const auto& repfield = this->_internal_error_custom_neg_formulae(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCE.FormulaArchive error_custom_pos_scatterX_formulae = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_error_custom_pos_scatterx_formulae_size()); i < n; i++) {
    const auto& repfield = this->_internal_error_custom_pos_scatterx_formulae(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCE.FormulaArchive error_custom_neg_scatterX_formulae = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_error_custom_neg_scatterx_formulae_size()); i < n; i++) {
    const auto& repfield = this->_internal_error_custom_neg_scatterx_formulae(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.ChartMediatorFormulaStorage)
  return target;
}

size_t ChartMediatorFormulaStorage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.ChartMediatorFormulaStorage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.FormulaArchive data_formulae = 1;
  total_size += 1UL * this->_internal_data_formulae_size();
  for (const auto& msg : this->_impl_.data_formulae_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.FormulaArchive row_label_formulae = 3;
  total_size += 1UL * this->_internal_row_label_formulae_size();
  for (const auto& msg : this->_impl_.row_label_formulae_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.FormulaArchive col_label_formulae = 4;
  total_size += 1UL * this->_internal_col_label_formulae_size();
  for (const auto& msg : this->_impl_.col_label_formulae_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.FormulaArchive error_custom_pos_formulae = 6;
  total_size += 1UL * this->_internal_error_custom_pos_formulae_size();
  for (const auto& msg : this->_impl_.error_custom_pos_formulae_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.FormulaArchive error_custom_neg_formulae = 7;
  total_size += 1UL * this->_internal_error_custom_neg_formulae_size();
  for (const auto& msg : this->_impl_.error_custom_neg_formulae_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.FormulaArchive error_custom_pos_scatterX_formulae = 8;
  total_size += 1UL * this->_internal_error_custom_pos_scatterx_formulae_size();
  for (const auto& msg : this->_impl_.error_custom_pos_scatterx_formulae_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.FormulaArchive error_custom_neg_scatterX_formulae = 9;
  total_size += 1UL * this->_internal_error_custom_neg_scatterx_formulae_size();
  for (const auto& msg : this->_impl_.error_custom_neg_scatterx_formulae_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 direction = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_direction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartMediatorFormulaStorage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartMediatorFormulaStorage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartMediatorFormulaStorage::GetClassData() const { return &_class_data_; }


void ChartMediatorFormulaStorage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartMediatorFormulaStorage*>(&to_msg);
  auto& from = static_cast<const ChartMediatorFormulaStorage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.ChartMediatorFormulaStorage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_formulae_.MergeFrom(from._impl_.data_formulae_);
  _this->_impl_.row_label_formulae_.MergeFrom(from._impl_.row_label_formulae_);
  _this->_impl_.col_label_formulae_.MergeFrom(from._impl_.col_label_formulae_);
  _this->_impl_.error_custom_pos_formulae_.MergeFrom(from._impl_.error_custom_pos_formulae_);
  _this->_impl_.error_custom_neg_formulae_.MergeFrom(from._impl_.error_custom_neg_formulae_);
  _this->_impl_.error_custom_pos_scatterx_formulae_.MergeFrom(from._impl_.error_custom_pos_scatterx_formulae_);
  _this->_impl_.error_custom_neg_scatterx_formulae_.MergeFrom(from._impl_.error_custom_neg_scatterx_formulae_);
  if (from._internal_has_direction()) {
    _this->_internal_set_direction(from._internal_direction());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartMediatorFormulaStorage::CopyFrom(const ChartMediatorFormulaStorage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.ChartMediatorFormulaStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartMediatorFormulaStorage::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.data_formulae_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.row_label_formulae_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.col_label_formulae_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.error_custom_pos_formulae_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.error_custom_neg_formulae_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.error_custom_pos_scatterx_formulae_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.error_custom_neg_scatterx_formulae_))
    return false;
  return true;
}

void ChartMediatorFormulaStorage::InternalSwap(ChartMediatorFormulaStorage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.data_formulae_.InternalSwap(&other->_impl_.data_formulae_);
  _impl_.row_label_formulae_.InternalSwap(&other->_impl_.row_label_formulae_);
  _impl_.col_label_formulae_.InternalSwap(&other->_impl_.col_label_formulae_);
  _impl_.error_custom_pos_formulae_.InternalSwap(&other->_impl_.error_custom_pos_formulae_);
  _impl_.error_custom_neg_formulae_.InternalSwap(&other->_impl_.error_custom_neg_formulae_);
  _impl_.error_custom_pos_scatterx_formulae_.InternalSwap(&other->_impl_.error_custom_pos_scatterx_formulae_);
  _impl_.error_custom_neg_scatterx_formulae_.InternalSwap(&other->_impl_.error_custom_neg_scatterx_formulae_);
  swap(_impl_.direction_, other->_impl_.direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartMediatorFormulaStorage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[10]);
}

// ===================================================================

class ChartMediatorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartMediatorArchive>()._impl_._has_bits_);
  static const ::TSCH::ChartMediatorArchive& super(const ChartMediatorArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entity_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TN::ChartMediatorFormulaStorage& formulas(const ChartMediatorArchive* msg);
  static void set_has_formulas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_columns_are_series(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_registered_with_calc_engine(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCH::ChartMediatorArchive&
ChartMediatorArchive::_Internal::super(const ChartMediatorArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TN::ChartMediatorFormulaStorage&
ChartMediatorArchive::_Internal::formulas(const ChartMediatorArchive* msg) {
  return *msg->_impl_.formulas_;
}
void ChartMediatorArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ChartMediatorArchive::ChartMediatorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.ChartMediatorArchive)
}
ChartMediatorArchive::ChartMediatorArchive(const ChartMediatorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartMediatorArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entity_id_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.formulas_){nullptr}
    , decltype(_impl_.columns_are_series_){}
    , decltype(_impl_.is_registered_with_calc_engine_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.entity_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_entity_id()) {
    _this->_impl_.entity_id_.Set(from._internal_entity_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::ChartMediatorArchive(*from._impl_.super_);
  }
  if (from._internal_has_formulas()) {
    _this->_impl_.formulas_ = new ::TN::ChartMediatorFormulaStorage(*from._impl_.formulas_);
  }
  ::memcpy(&_impl_.columns_are_series_, &from._impl_.columns_are_series_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_registered_with_calc_engine_) -
    reinterpret_cast<char*>(&_impl_.columns_are_series_)) + sizeof(_impl_.is_registered_with_calc_engine_));
  // @@protoc_insertion_point(copy_constructor:TN.ChartMediatorArchive)
}

inline void ChartMediatorArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entity_id_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.formulas_){nullptr}
    , decltype(_impl_.columns_are_series_){false}
    , decltype(_impl_.is_registered_with_calc_engine_){false}
  };
  _impl_.entity_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChartMediatorArchive::~ChartMediatorArchive() {
  // @@protoc_insertion_point(destructor:TN.ChartMediatorArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartMediatorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entity_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.formulas_;
}

void ChartMediatorArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartMediatorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.ChartMediatorArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.entity_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.formulas_ != nullptr);
      _impl_.formulas_->Clear();
    }
  }
  ::memset(&_impl_.columns_are_series_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_registered_with_calc_engine_) -
      reinterpret_cast<char*>(&_impl_.columns_are_series_)) + sizeof(_impl_.is_registered_with_calc_engine_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartMediatorArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartMediatorArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string entity_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_entity_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TN.ChartMediatorArchive.entity_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TN.ChartMediatorFormulaStorage formulas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_formulas(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool columns_are_series = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_columns_are_series(&has_bits);
          _impl_.columns_are_series_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_registered_with_calc_engine = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_registered_with_calc_engine(&has_bits);
          _impl_.is_registered_with_calc_engine_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartMediatorArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.ChartMediatorArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.ChartMediatorArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required string entity_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_entity_id().data(), static_cast<int>(this->_internal_entity_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TN.ChartMediatorArchive.entity_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_entity_id(), target);
  }

  // optional .TN.ChartMediatorFormulaStorage formulas = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::formulas(this),
        _Internal::formulas(this).GetCachedSize(), target, stream);
  }

  // optional bool columns_are_series = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_columns_are_series(), target);
  }

  // optional bool is_registered_with_calc_engine = 5 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_registered_with_calc_engine(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.ChartMediatorArchive)
  return target;
}

size_t ChartMediatorArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.ChartMediatorArchive)
  size_t total_size = 0;

  if (_internal_has_entity_id()) {
    // required string entity_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entity_id());
  }

  if (_internal_has_super()) {
    // required .TSCH.ChartMediatorArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  return total_size;
}
size_t ChartMediatorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.ChartMediatorArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string entity_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entity_id());

    // required .TSCH.ChartMediatorArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    // optional .TN.ChartMediatorFormulaStorage formulas = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.formulas_);
    }

    // optional bool columns_are_series = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_registered_with_calc_engine = 5 [deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartMediatorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartMediatorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartMediatorArchive::GetClassData() const { return &_class_data_; }


void ChartMediatorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartMediatorArchive*>(&to_msg);
  auto& from = static_cast<const ChartMediatorArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.ChartMediatorArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_entity_id(from._internal_entity_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSCH::ChartMediatorArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_formulas()->::TN::ChartMediatorFormulaStorage::MergeFrom(
          from._internal_formulas());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.columns_are_series_ = from._impl_.columns_are_series_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_registered_with_calc_engine_ = from._impl_.is_registered_with_calc_engine_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartMediatorArchive::CopyFrom(const ChartMediatorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.ChartMediatorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartMediatorArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_formulas()) {
    if (!_impl_.formulas_->IsInitialized()) return false;
  }
  return true;
}

void ChartMediatorArchive::InternalSwap(ChartMediatorArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.entity_id_, lhs_arena,
      &other->_impl_.entity_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartMediatorArchive, _impl_.is_registered_with_calc_engine_)
      + sizeof(ChartMediatorArchive::_impl_.is_registered_with_calc_engine_)
      - PROTOBUF_FIELD_OFFSET(ChartMediatorArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartMediatorArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[11]);
}

// ===================================================================

class ChartSelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartSelectionArchive>()._impl_._has_bits_);
  static const ::TSCE::RangeReferenceArchive& reference(const ChartSelectionArchive* msg);
  static void set_has_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCH::ChartSelectionArchive& super(const ChartSelectionArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSCE::RangeReferenceArchive&
ChartSelectionArchive::_Internal::reference(const ChartSelectionArchive* msg) {
  return *msg->_impl_.reference_;
}
const ::TSCH::ChartSelectionArchive&
ChartSelectionArchive::_Internal::super(const ChartSelectionArchive* msg) {
  return *msg->_impl_.super_;
}
void ChartSelectionArchive::clear_reference() {
  if (_impl_.reference_ != nullptr) _impl_.reference_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ChartSelectionArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ChartSelectionArchive::ChartSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.ChartSelectionArchive)
}
ChartSelectionArchive::ChartSelectionArchive(const ChartSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartSelectionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reference_){nullptr}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reference()) {
    _this->_impl_.reference_ = new ::TSCE::RangeReferenceArchive(*from._impl_.reference_);
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::ChartSelectionArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TN.ChartSelectionArchive)
}

inline void ChartSelectionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reference_){nullptr}
    , decltype(_impl_.super_){nullptr}
  };
}

ChartSelectionArchive::~ChartSelectionArchive() {
  // @@protoc_insertion_point(destructor:TN.ChartSelectionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.reference_;
  if (this != internal_default_instance()) delete _impl_.super_;
}

void ChartSelectionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.ChartSelectionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.reference_ != nullptr);
      _impl_.reference_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSelectionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCE.RangeReferenceArchive reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartSelectionArchive super = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartSelectionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.ChartSelectionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCE.RangeReferenceArchive reference = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::reference(this),
        _Internal::reference(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.ChartSelectionArchive super = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.ChartSelectionArchive)
  return target;
}

size_t ChartSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.ChartSelectionArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSCE.RangeReferenceArchive reference = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reference_);
    }

    // optional .TSCH.ChartSelectionArchive super = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.super_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartSelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartSelectionArchive::GetClassData() const { return &_class_data_; }


void ChartSelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartSelectionArchive*>(&to_msg);
  auto& from = static_cast<const ChartSelectionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.ChartSelectionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_reference()->::TSCE::RangeReferenceArchive::MergeFrom(
          from._internal_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSCH::ChartSelectionArchive::MergeFrom(
          from._internal_super());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartSelectionArchive::CopyFrom(const ChartSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.ChartSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSelectionArchive::IsInitialized() const {
  if (_internal_has_reference()) {
    if (!_impl_.reference_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void ChartSelectionArchive::InternalSwap(ChartSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartSelectionArchive, _impl_.super_)
      + sizeof(ChartSelectionArchive::_impl_.super_)
      - PROTOBUF_FIELD_OFFSET(ChartSelectionArchive, _impl_.reference_)>(
          reinterpret_cast<char*>(&_impl_.reference_),
          reinterpret_cast<char*>(&other->_impl_.reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSelectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TN
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TN::SheetUIStateArchive*
Arena::CreateMaybeMessage< ::TN::SheetUIStateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::SheetUIStateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::SheetUIStateDictionaryEntryArchive*
Arena::CreateMaybeMessage< ::TN::SheetUIStateDictionaryEntryArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::SheetUIStateDictionaryEntryArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::UIStateArchive*
Arena::CreateMaybeMessage< ::TN::UIStateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::UIStateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::SheetSelectionArchive*
Arena::CreateMaybeMessage< ::TN::SheetSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::SheetSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::UndoRedoStateArchive*
Arena::CreateMaybeMessage< ::TN::UndoRedoStateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::UndoRedoStateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::DocumentArchive*
Arena::CreateMaybeMessage< ::TN::DocumentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::DocumentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::PlaceholderArchive*
Arena::CreateMaybeMessage< ::TN::PlaceholderArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::PlaceholderArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::SheetArchive*
Arena::CreateMaybeMessage< ::TN::SheetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::SheetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::FormBasedSheetArchive*
Arena::CreateMaybeMessage< ::TN::FormBasedSheetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::FormBasedSheetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::ThemeArchive*
Arena::CreateMaybeMessage< ::TN::ThemeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::ThemeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::ChartMediatorFormulaStorage*
Arena::CreateMaybeMessage< ::TN::ChartMediatorFormulaStorage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::ChartMediatorFormulaStorage >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::ChartMediatorArchive*
Arena::CreateMaybeMessage< ::TN::ChartMediatorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::ChartMediatorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::ChartSelectionArchive*
Arena::CreateMaybeMessage< ::TN::ChartSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::ChartSelectionArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
