// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TNCommandArchives.proto

#include "TNCommandArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace TN {
PROTOBUF_CONSTEXPR SheetCommandSelectionBehaviorArchive::SheetCommandSelectionBehaviorArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sheet_selection_)*/nullptr} {}
struct SheetCommandSelectionBehaviorArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SheetCommandSelectionBehaviorArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SheetCommandSelectionBehaviorArchiveDefaultTypeInternal() {}
  union {
    SheetCommandSelectionBehaviorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SheetCommandSelectionBehaviorArchiveDefaultTypeInternal _SheetCommandSelectionBehaviorArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandFormChooseTargetTableArchive::CommandFormChooseTargetTableArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sheet_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.previous_sheet_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.table_id_)*/nullptr
  , /*decltype(_impl_.previous_table_id_)*/nullptr
  , /*decltype(_impl_.sheet_)*/nullptr} {}
struct CommandFormChooseTargetTableArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandFormChooseTargetTableArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandFormChooseTargetTableArchiveDefaultTypeInternal() {}
  union {
    CommandFormChooseTargetTableArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandFormChooseTargetTableArchiveDefaultTypeInternal _CommandFormChooseTargetTableArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSheetInsertDrawablesArchive::CommandSheetInsertDrawablesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.drawables_)*/{}
  , /*decltype(_impl_.sheet_)*/nullptr
  , /*decltype(_impl_.provider_undo_)*/nullptr
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.atindex_)*/0
  , /*decltype(_impl_.fordrag_)*/false
  , /*decltype(_impl_.forpaste_)*/false} {}
struct CommandSheetInsertDrawablesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSheetInsertDrawablesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSheetInsertDrawablesArchiveDefaultTypeInternal() {}
  union {
    CommandSheetInsertDrawablesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSheetInsertDrawablesArchiveDefaultTypeInternal _CommandSheetInsertDrawablesArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSheetRemoveDrawablesArchive::CommandSheetRemoveDrawablesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sorteddrawables_)*/{}
  , /*decltype(_impl_.old_sheet_sidebar_order_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.sheet_)*/nullptr
  , /*decltype(_impl_.drawableindices_)*/nullptr
  , /*decltype(_impl_.formula_rewrite_command_for_undo_)*/nullptr} {}
struct CommandSheetRemoveDrawablesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSheetRemoveDrawablesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSheetRemoveDrawablesArchiveDefaultTypeInternal() {}
  union {
    CommandSheetRemoveDrawablesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSheetRemoveDrawablesArchiveDefaultTypeInternal _CommandSheetRemoveDrawablesArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSheetMoveDrawableZOrderArchive::CommandSheetMoveDrawableZOrderArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.drawable_infos_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.sheet_)*/nullptr
  , /*decltype(_impl_.indexes_)*/nullptr} {}
struct CommandSheetMoveDrawableZOrderArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSheetMoveDrawableZOrderArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSheetMoveDrawableZOrderArchiveDefaultTypeInternal() {}
  union {
    CommandSheetMoveDrawableZOrderArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSheetMoveDrawableZOrderArchiveDefaultTypeInternal _CommandSheetMoveDrawableZOrderArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandDocumentInsertSheetArchive::CommandDocumentInsertSheetArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.document_)*/nullptr
  , /*decltype(_impl_.sheet_)*/nullptr
  , /*decltype(_impl_.super_)*/nullptr} {}
struct CommandDocumentInsertSheetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandDocumentInsertSheetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandDocumentInsertSheetArchiveDefaultTypeInternal() {}
  union {
    CommandDocumentInsertSheetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandDocumentInsertSheetArchiveDefaultTypeInternal _CommandDocumentInsertSheetArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandDocumentRemoveSheetArchive::CommandDocumentRemoveSheetArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.old_sheet_sidebar_order_)*/{}
  , /*decltype(_impl_.document_)*/nullptr
  , /*decltype(_impl_.sheet_)*/nullptr
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.formula_rewrite_command_for_undo_)*/nullptr
  , /*decltype(_impl_.index_)*/0u} {}
struct CommandDocumentRemoveSheetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandDocumentRemoveSheetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandDocumentRemoveSheetArchiveDefaultTypeInternal() {}
  union {
    CommandDocumentRemoveSheetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandDocumentRemoveSheetArchiveDefaultTypeInternal _CommandDocumentRemoveSheetArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandDocumentReplaceLastSheetArchive::CommandDocumentReplaceLastSheetArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.document_)*/nullptr
  , /*decltype(_impl_.last_sheet_)*/nullptr
  , /*decltype(_impl_.new_sheet_)*/nullptr
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.index_)*/0u} {}
struct CommandDocumentReplaceLastSheetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandDocumentReplaceLastSheetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandDocumentReplaceLastSheetArchiveDefaultTypeInternal() {}
  union {
    CommandDocumentReplaceLastSheetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandDocumentReplaceLastSheetArchiveDefaultTypeInternal _CommandDocumentReplaceLastSheetArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandDocumentReorderSheetArchive::CommandDocumentReorderSheetArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.document_)*/nullptr
  , /*decltype(_impl_.sheet_)*/nullptr
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.source_index_)*/0u
  , /*decltype(_impl_.dest_index_)*/0u} {}
struct CommandDocumentReorderSheetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandDocumentReorderSheetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandDocumentReorderSheetArchiveDefaultTypeInternal() {}
  union {
    CommandDocumentReorderSheetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandDocumentReorderSheetArchiveDefaultTypeInternal _CommandDocumentReorderSheetArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetSheetNameArchive::CommandSetSheetNameArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.newname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.oldname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sheet_)*/nullptr
  , /*decltype(_impl_.super_)*/nullptr} {}
struct CommandSetSheetNameArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetSheetNameArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetSheetNameArchiveDefaultTypeInternal() {}
  union {
    CommandSetSheetNameArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetSheetNameArchiveDefaultTypeInternal _CommandSetSheetNameArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetPageOrientationArchive::CommandSetPageOrientationArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sheet_)*/nullptr
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.in_portrait_page_orientation_)*/false} {}
struct CommandSetPageOrientationArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetPageOrientationArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetPageOrientationArchiveDefaultTypeInternal() {}
  union {
    CommandSetPageOrientationArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetPageOrientationArchiveDefaultTypeInternal _CommandSetPageOrientationArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetShowPageNumbersValueArchive::CommandSetShowPageNumbersValueArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sheet_)*/nullptr
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.show_page_numbers_)*/false} {}
struct CommandSetShowPageNumbersValueArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetShowPageNumbersValueArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetShowPageNumbersValueArchiveDefaultTypeInternal() {}
  union {
    CommandSetShowPageNumbersValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetShowPageNumbersValueArchiveDefaultTypeInternal _CommandSetShowPageNumbersValueArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetRepeatingHeadersValueArchive::CommandSetRepeatingHeadersValueArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sheet_)*/nullptr
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.show_repeating_headers_)*/false} {}
struct CommandSetRepeatingHeadersValueArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetRepeatingHeadersValueArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetRepeatingHeadersValueArchiveDefaultTypeInternal() {}
  union {
    CommandSetRepeatingHeadersValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetRepeatingHeadersValueArchiveDefaultTypeInternal _CommandSetRepeatingHeadersValueArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetContentScaleArchive::CommandSetContentScaleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sheet_)*/nullptr
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.is_autofit_on_)*/false
  , /*decltype(_impl_.old_content_scale_)*/0
  , /*decltype(_impl_.new_content_scale_)*/0} {}
struct CommandSetContentScaleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetContentScaleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetContentScaleArchiveDefaultTypeInternal() {}
  union {
    CommandSetContentScaleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetContentScaleArchiveDefaultTypeInternal _CommandSetContentScaleArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetAutofitValueArchive::CommandSetAutofitValueArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sheet_)*/nullptr
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.old_content_scale_)*/0} {}
struct CommandSetAutofitValueArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetAutofitValueArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetAutofitValueArchiveDefaultTypeInternal() {}
  union {
    CommandSetAutofitValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetAutofitValueArchiveDefaultTypeInternal _CommandSetAutofitValueArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetDocumentPrinterOptions::CommandSetDocumentPrinterOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.printer_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.paper_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.page_size_)*/nullptr
  , /*decltype(_impl_.super_)*/nullptr} {}
struct CommandSetDocumentPrinterOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetDocumentPrinterOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetDocumentPrinterOptionsDefaultTypeInternal() {}
  union {
    CommandSetDocumentPrinterOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetDocumentPrinterOptionsDefaultTypeInternal _CommandSetDocumentPrinterOptions_default_instance_;
PROTOBUF_CONSTEXPR CommandEnterPrintPreviewModeArchive::CommandEnterPrintPreviewModeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct CommandEnterPrintPreviewModeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandEnterPrintPreviewModeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandEnterPrintPreviewModeArchiveDefaultTypeInternal() {}
  union {
    CommandEnterPrintPreviewModeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandEnterPrintPreviewModeArchiveDefaultTypeInternal _CommandEnterPrintPreviewModeArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandExitPrintPreviewModeArchive::CommandExitPrintPreviewModeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct CommandExitPrintPreviewModeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandExitPrintPreviewModeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandExitPrintPreviewModeArchiveDefaultTypeInternal() {}
  union {
    CommandExitPrintPreviewModeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandExitPrintPreviewModeArchiveDefaultTypeInternal _CommandExitPrintPreviewModeArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandPasteDrawablesArchive::CommandPasteDrawablesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.drawables_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.sheet_)*/nullptr} {}
struct CommandPasteDrawablesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandPasteDrawablesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandPasteDrawablesArchiveDefaultTypeInternal() {}
  union {
    CommandPasteDrawablesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandPasteDrawablesArchiveDefaultTypeInternal _CommandPasteDrawablesArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandPasteSheetArchive::CommandPasteSheetArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.document_)*/nullptr
  , /*decltype(_impl_.sheet_)*/nullptr
  , /*decltype(_impl_.sheet_uistate_)*/nullptr
  , /*decltype(_impl_.sheetindex_)*/0u} {}
struct CommandPasteSheetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandPasteSheetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandPasteSheetArchiveDefaultTypeInternal() {}
  union {
    CommandPasteSheetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandPasteSheetArchiveDefaultTypeInternal _CommandPasteSheetArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandReorderSidebarItemChildrenAchive::CommandReorderSidebarItemChildrenAchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.old_children_)*/{}
  , /*decltype(_impl_.new_children_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.sheet_)*/nullptr} {}
struct CommandReorderSidebarItemChildrenAchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandReorderSidebarItemChildrenAchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandReorderSidebarItemChildrenAchiveDefaultTypeInternal() {}
  union {
    CommandReorderSidebarItemChildrenAchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandReorderSidebarItemChildrenAchiveDefaultTypeInternal _CommandReorderSidebarItemChildrenAchive_default_instance_;
PROTOBUF_CONSTEXPR CommandChartMediatorSetEditingState::CommandChartMediatorSetEditingState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.old_formulas_)*/nullptr
  , /*decltype(_impl_.new_formulas_)*/nullptr
  , /*decltype(_impl_.old_direction_)*/0
  , /*decltype(_impl_.new_direction_)*/0
  , /*decltype(_impl_.old_scatter_format_)*/0
  , /*decltype(_impl_.new_scatter_format_)*/0} {}
struct CommandChartMediatorSetEditingStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandChartMediatorSetEditingStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandChartMediatorSetEditingStateDefaultTypeInternal() {}
  union {
    CommandChartMediatorSetEditingState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandChartMediatorSetEditingStateDefaultTypeInternal _CommandChartMediatorSetEditingState_default_instance_;
PROTOBUF_CONSTEXPR CommandChartMediatorUpdateForEntityDelete::CommandChartMediatorUpdateForEntityDelete(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.cmd_)*/nullptr} {}
struct CommandChartMediatorUpdateForEntityDeleteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandChartMediatorUpdateForEntityDeleteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandChartMediatorUpdateForEntityDeleteDefaultTypeInternal() {}
  union {
    CommandChartMediatorUpdateForEntityDelete _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandChartMediatorUpdateForEntityDeleteDefaultTypeInternal _CommandChartMediatorUpdateForEntityDelete_default_instance_;
PROTOBUF_CONSTEXPR ChartCommandSetSeriesNameArchive::ChartCommandSetSeriesNameArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.mediator_)*/nullptr
  , /*decltype(_impl_.old_formula_)*/nullptr
  , /*decltype(_impl_.new_formula_)*/nullptr
  , /*decltype(_impl_.seriesindex_)*/0u} {}
struct ChartCommandSetSeriesNameArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartCommandSetSeriesNameArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartCommandSetSeriesNameArchiveDefaultTypeInternal() {}
  union {
    ChartCommandSetSeriesNameArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartCommandSetSeriesNameArchiveDefaultTypeInternal _ChartCommandSetSeriesNameArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartCommandSelectionBehaviorArchive::ChartCommandSelectionBehaviorArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.drawable_info_)*/nullptr
  , /*decltype(_impl_.begin_selection_)*/nullptr
  , /*decltype(_impl_.end_selection_)*/nullptr} {}
struct ChartCommandSelectionBehaviorArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartCommandSelectionBehaviorArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartCommandSelectionBehaviorArchiveDefaultTypeInternal() {}
  union {
    ChartCommandSelectionBehaviorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartCommandSelectionBehaviorArchiveDefaultTypeInternal _ChartCommandSelectionBehaviorArchive_default_instance_;
}  // namespace TN
static ::_pb::Metadata file_level_metadata_TNCommandArchives_2eproto[25];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_TNCommandArchives_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_TNCommandArchives_2eproto = nullptr;

const uint32_t TableStruct_TNCommandArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TN::SheetCommandSelectionBehaviorArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetCommandSelectionBehaviorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::SheetCommandSelectionBehaviorArchive, _impl_.sheet_selection_),
  0,
  PROTOBUF_FIELD_OFFSET(::TN::CommandFormChooseTargetTableArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandFormChooseTargetTableArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::CommandFormChooseTargetTableArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandFormChooseTargetTableArchive, _impl_.table_id_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandFormChooseTargetTableArchive, _impl_.previous_table_id_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandFormChooseTargetTableArchive, _impl_.sheet_name_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandFormChooseTargetTableArchive, _impl_.previous_sheet_name_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandFormChooseTargetTableArchive, _impl_.sheet_),
  2,
  3,
  4,
  0,
  1,
  5,
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetInsertDrawablesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetInsertDrawablesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetInsertDrawablesArchive, _impl_.sheet_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetInsertDrawablesArchive, _impl_.drawables_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetInsertDrawablesArchive, _impl_.provider_undo_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetInsertDrawablesArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetInsertDrawablesArchive, _impl_.fordrag_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetInsertDrawablesArchive, _impl_.forpaste_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetInsertDrawablesArchive, _impl_.atindex_),
  0,
  ~0u,
  1,
  2,
  4,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetRemoveDrawablesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetRemoveDrawablesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetRemoveDrawablesArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetRemoveDrawablesArchive, _impl_.sheet_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetRemoveDrawablesArchive, _impl_.sorteddrawables_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetRemoveDrawablesArchive, _impl_.drawableindices_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetRemoveDrawablesArchive, _impl_.old_sheet_sidebar_order_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetRemoveDrawablesArchive, _impl_.formula_rewrite_command_for_undo_),
  0,
  1,
  ~0u,
  2,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetMoveDrawableZOrderArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetMoveDrawableZOrderArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetMoveDrawableZOrderArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetMoveDrawableZOrderArchive, _impl_.sheet_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetMoveDrawableZOrderArchive, _impl_.drawable_infos_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetMoveDrawableZOrderArchive, _impl_.indexes_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentInsertSheetArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentInsertSheetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentInsertSheetArchive, _impl_.document_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentInsertSheetArchive, _impl_.sheet_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentInsertSheetArchive, _impl_.super_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentRemoveSheetArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentRemoveSheetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentRemoveSheetArchive, _impl_.document_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentRemoveSheetArchive, _impl_.sheet_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentRemoveSheetArchive, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentRemoveSheetArchive, _impl_.old_sheet_sidebar_order_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentRemoveSheetArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentRemoveSheetArchive, _impl_.formula_rewrite_command_for_undo_),
  0,
  1,
  4,
  ~0u,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentReplaceLastSheetArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentReplaceLastSheetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentReplaceLastSheetArchive, _impl_.document_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentReplaceLastSheetArchive, _impl_.last_sheet_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentReplaceLastSheetArchive, _impl_.new_sheet_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentReplaceLastSheetArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentReplaceLastSheetArchive, _impl_.index_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentReorderSheetArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentReorderSheetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentReorderSheetArchive, _impl_.document_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentReorderSheetArchive, _impl_.sheet_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentReorderSheetArchive, _impl_.source_index_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentReorderSheetArchive, _impl_.dest_index_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentReorderSheetArchive, _impl_.super_),
  0,
  1,
  3,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetSheetNameArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetSheetNameArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetSheetNameArchive, _impl_.newname_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetSheetNameArchive, _impl_.oldname_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetSheetNameArchive, _impl_.sheet_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetSheetNameArchive, _impl_.super_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetPageOrientationArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetPageOrientationArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetPageOrientationArchive, _impl_.in_portrait_page_orientation_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetPageOrientationArchive, _impl_.sheet_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetPageOrientationArchive, _impl_.super_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetShowPageNumbersValueArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetShowPageNumbersValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetShowPageNumbersValueArchive, _impl_.show_page_numbers_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetShowPageNumbersValueArchive, _impl_.sheet_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetShowPageNumbersValueArchive, _impl_.super_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetRepeatingHeadersValueArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetRepeatingHeadersValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetRepeatingHeadersValueArchive, _impl_.show_repeating_headers_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetRepeatingHeadersValueArchive, _impl_.sheet_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetRepeatingHeadersValueArchive, _impl_.super_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetContentScaleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetContentScaleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetContentScaleArchive, _impl_.is_autofit_on_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetContentScaleArchive, _impl_.old_content_scale_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetContentScaleArchive, _impl_.new_content_scale_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetContentScaleArchive, _impl_.sheet_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetContentScaleArchive, _impl_.super_),
  2,
  3,
  4,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetAutofitValueArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetAutofitValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetAutofitValueArchive, _impl_.old_content_scale_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetAutofitValueArchive, _impl_.sheet_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetAutofitValueArchive, _impl_.super_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetDocumentPrinterOptions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetDocumentPrinterOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetDocumentPrinterOptions, _impl_.printer_id_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetDocumentPrinterOptions, _impl_.paper_id_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetDocumentPrinterOptions, _impl_.page_size_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetDocumentPrinterOptions, _impl_.super_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TN::CommandEnterPrintPreviewModeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandEnterPrintPreviewModeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::CommandEnterPrintPreviewModeArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TN::CommandExitPrintPreviewModeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandExitPrintPreviewModeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::CommandExitPrintPreviewModeArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TN::CommandPasteDrawablesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandPasteDrawablesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::CommandPasteDrawablesArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandPasteDrawablesArchive, _impl_.sheet_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandPasteDrawablesArchive, _impl_.drawables_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TN::CommandPasteSheetArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandPasteSheetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::CommandPasteSheetArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandPasteSheetArchive, _impl_.document_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandPasteSheetArchive, _impl_.sheet_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandPasteSheetArchive, _impl_.sheet_uistate_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandPasteSheetArchive, _impl_.sheetindex_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TN::CommandReorderSidebarItemChildrenAchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandReorderSidebarItemChildrenAchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::CommandReorderSidebarItemChildrenAchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandReorderSidebarItemChildrenAchive, _impl_.sheet_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandReorderSidebarItemChildrenAchive, _impl_.old_children_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandReorderSidebarItemChildrenAchive, _impl_.new_children_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetEditingState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetEditingState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetEditingState, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetEditingState, _impl_.old_formulas_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetEditingState, _impl_.new_formulas_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetEditingState, _impl_.old_direction_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetEditingState, _impl_.new_direction_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetEditingState, _impl_.old_scatter_format_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetEditingState, _impl_.new_scatter_format_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorUpdateForEntityDelete, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorUpdateForEntityDelete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorUpdateForEntityDelete, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorUpdateForEntityDelete, _impl_.cmd_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TN::ChartCommandSetSeriesNameArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartCommandSetSeriesNameArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::ChartCommandSetSeriesNameArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartCommandSetSeriesNameArchive, _impl_.mediator_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartCommandSetSeriesNameArchive, _impl_.seriesindex_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartCommandSetSeriesNameArchive, _impl_.old_formula_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartCommandSetSeriesNameArchive, _impl_.new_formula_),
  0,
  1,
  4,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TN::ChartCommandSelectionBehaviorArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartCommandSelectionBehaviorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TN::ChartCommandSelectionBehaviorArchive, _impl_.drawable_info_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartCommandSelectionBehaviorArchive, _impl_.begin_selection_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartCommandSelectionBehaviorArchive, _impl_.end_selection_),
  0,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::TN::SheetCommandSelectionBehaviorArchive)},
  { 8, 20, -1, sizeof(::TN::CommandFormChooseTargetTableArchive)},
  { 26, 39, -1, sizeof(::TN::CommandSheetInsertDrawablesArchive)},
  { 46, 58, -1, sizeof(::TN::CommandSheetRemoveDrawablesArchive)},
  { 64, 74, -1, sizeof(::TN::CommandSheetMoveDrawableZOrderArchive)},
  { 78, 87, -1, sizeof(::TN::CommandDocumentInsertSheetArchive)},
  { 90, 102, -1, sizeof(::TN::CommandDocumentRemoveSheetArchive)},
  { 108, 119, -1, sizeof(::TN::CommandDocumentReplaceLastSheetArchive)},
  { 124, 135, -1, sizeof(::TN::CommandDocumentReorderSheetArchive)},
  { 140, 150, -1, sizeof(::TN::CommandSetSheetNameArchive)},
  { 154, 163, -1, sizeof(::TN::CommandSetPageOrientationArchive)},
  { 166, 175, -1, sizeof(::TN::CommandSetShowPageNumbersValueArchive)},
  { 178, 187, -1, sizeof(::TN::CommandSetRepeatingHeadersValueArchive)},
  { 190, 201, -1, sizeof(::TN::CommandSetContentScaleArchive)},
  { 206, 215, -1, sizeof(::TN::CommandSetAutofitValueArchive)},
  { 218, 228, -1, sizeof(::TN::CommandSetDocumentPrinterOptions)},
  { 232, 239, -1, sizeof(::TN::CommandEnterPrintPreviewModeArchive)},
  { 240, 247, -1, sizeof(::TN::CommandExitPrintPreviewModeArchive)},
  { 248, 257, -1, sizeof(::TN::CommandPasteDrawablesArchive)},
  { 260, 271, -1, sizeof(::TN::CommandPasteSheetArchive)},
  { 276, 286, -1, sizeof(::TN::CommandReorderSidebarItemChildrenAchive)},
  { 290, 303, -1, sizeof(::TN::CommandChartMediatorSetEditingState)},
  { 310, 318, -1, sizeof(::TN::CommandChartMediatorUpdateForEntityDelete)},
  { 320, 331, -1, sizeof(::TN::ChartCommandSetSeriesNameArchive)},
  { 336, 345, -1, sizeof(::TN::ChartCommandSelectionBehaviorArchive)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::TN::_SheetCommandSelectionBehaviorArchive_default_instance_._instance,
  &::TN::_CommandFormChooseTargetTableArchive_default_instance_._instance,
  &::TN::_CommandSheetInsertDrawablesArchive_default_instance_._instance,
  &::TN::_CommandSheetRemoveDrawablesArchive_default_instance_._instance,
  &::TN::_CommandSheetMoveDrawableZOrderArchive_default_instance_._instance,
  &::TN::_CommandDocumentInsertSheetArchive_default_instance_._instance,
  &::TN::_CommandDocumentRemoveSheetArchive_default_instance_._instance,
  &::TN::_CommandDocumentReplaceLastSheetArchive_default_instance_._instance,
  &::TN::_CommandDocumentReorderSheetArchive_default_instance_._instance,
  &::TN::_CommandSetSheetNameArchive_default_instance_._instance,
  &::TN::_CommandSetPageOrientationArchive_default_instance_._instance,
  &::TN::_CommandSetShowPageNumbersValueArchive_default_instance_._instance,
  &::TN::_CommandSetRepeatingHeadersValueArchive_default_instance_._instance,
  &::TN::_CommandSetContentScaleArchive_default_instance_._instance,
  &::TN::_CommandSetAutofitValueArchive_default_instance_._instance,
  &::TN::_CommandSetDocumentPrinterOptions_default_instance_._instance,
  &::TN::_CommandEnterPrintPreviewModeArchive_default_instance_._instance,
  &::TN::_CommandExitPrintPreviewModeArchive_default_instance_._instance,
  &::TN::_CommandPasteDrawablesArchive_default_instance_._instance,
  &::TN::_CommandPasteSheetArchive_default_instance_._instance,
  &::TN::_CommandReorderSidebarItemChildrenAchive_default_instance_._instance,
  &::TN::_CommandChartMediatorSetEditingState_default_instance_._instance,
  &::TN::_CommandChartMediatorUpdateForEntityDelete_default_instance_._instance,
  &::TN::_ChartCommandSetSeriesNameArchive_default_instance_._instance,
  &::TN::_ChartCommandSelectionBehaviorArchive_default_instance_._instance,
};

const char descriptor_table_protodef_TNCommandArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027TNCommandArchives.proto\022\002TN\032\021TSPMessag"
  "es.proto\032\021TSKArchives.proto\032\022TSCHArchive"
  "s.proto\032\031TSCHCommandArchives.proto\032\022TSCE"
  "Archives.proto\032\021TSSArchives.proto\032\021TSDAr"
  "chives.proto\032\022TSWPArchives.proto\032\021TSAArc"
  "hives.proto\032\021TSTArchives.proto\032\020TNArchiv"
  "es.proto\"O\n$SheetCommandSelectionBehavio"
  "rArchive\022\'\n\017sheet_selection\030\001 \001(\0132\016.TSP."
  "Reference\"\360\001\n#CommandFormChooseTargetTab"
  "leArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandAr"
  "chive\022%\n\010table_id\030\002 \001(\0132\023.TSCE.CFUUIDArc"
  "hive\022.\n\021previous_table_id\030\003 \001(\0132\023.TSCE.C"
  "FUUIDArchive\022\022\n\nsheet_name\030\004 \001(\t\022\033\n\023prev"
  "ious_sheet_name\030\005 \001(\t\022\035\n\005sheet\030\006 \002(\0132\016.T"
  "SP.Reference\"\345\001\n\"CommandSheetInsertDrawa"
  "blesArchive\022\035\n\005sheet\030\001 \002(\0132\016.TSP.Referen"
  "ce\022!\n\tdrawables\030\002 \003(\0132\016.TSP.Reference\022%\n"
  "\rprovider_undo\030\003 \001(\0132\016.TSP.Reference\022\"\n\005"
  "super\030\004 \002(\0132\023.TSK.CommandArchive\022\017\n\007forD"
  "rag\030\005 \001(\010\022\020\n\010forPaste\030\007 \001(\010\022\017\n\007atIndex\030\006"
  " \001(\005\"\243\002\n\"CommandSheetRemoveDrawablesArch"
  "ive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022"
  "\035\n\005sheet\030\002 \002(\0132\016.TSP.Reference\022\'\n\017sorted"
  "Drawables\030\003 \003(\0132\016.TSP.Reference\022&\n\017drawa"
  "bleIndices\030\004 \002(\0132\r.TSP.IndexSet\022/\n\027old_s"
  "heet_sidebar_order\030\005 \003(\0132\016.TSP.Reference"
  "\0228\n formula_rewrite_command_for_undo\030\006 \001"
  "(\0132\016.TSP.Reference\"\262\001\n%CommandSheetMoveD"
  "rawableZOrderArchive\022\"\n\005super\030\001 \002(\0132\023.TS"
  "K.CommandArchive\022\035\n\005sheet\030\002 \002(\0132\016.TSP.Re"
  "ference\022&\n\016drawable_infos\030\003 \003(\0132\016.TSP.Re"
  "ference\022\036\n\007indexes\030\004 \002(\0132\r.TSP.IndexSet\""
  "\210\001\n!CommandDocumentInsertSheetArchive\022 \n"
  "\010document\030\001 \002(\0132\016.TSP.Reference\022\035\n\005sheet"
  "\030\002 \002(\0132\016.TSP.Reference\022\"\n\005super\030\003 \002(\0132\023."
  "TSK.CommandArchive\"\202\002\n!CommandDocumentRe"
  "moveSheetArchive\022 \n\010document\030\001 \002(\0132\016.TSP"
  ".Reference\022\035\n\005sheet\030\002 \002(\0132\016.TSP.Referenc"
  "e\022\r\n\005index\030\003 \002(\r\022/\n\027old_sheet_sidebar_or"
  "der\030\004 \003(\0132\016.TSP.Reference\022\"\n\005super\030\005 \002(\013"
  "2\023.TSK.CommandArchive\0228\n formula_rewrite"
  "_command_for_undo\030\006 \001(\0132\016.TSP.Reference\""
  "\304\001\n&CommandDocumentReplaceLastSheetArchi"
  "ve\022 \n\010document\030\001 \002(\0132\016.TSP.Reference\022\"\n\n"
  "last_sheet\030\002 \002(\0132\016.TSP.Reference\022!\n\tnew_"
  "sheet\030\003 \002(\0132\016.TSP.Reference\022\"\n\005super\030\004 \002"
  "(\0132\023.TSK.CommandArchive\022\r\n\005index\030\005 \001(\r\"\263"
  "\001\n\"CommandDocumentReorderSheetArchive\022 \n"
  "\010document\030\001 \002(\0132\016.TSP.Reference\022\035\n\005sheet"
  "\030\002 \002(\0132\016.TSP.Reference\022\024\n\014source_index\030\003"
  " \002(\r\022\022\n\ndest_index\030\004 \002(\r\022\"\n\005super\030\005 \002(\0132"
  "\023.TSK.CommandArchive\"\201\001\n\032CommandSetSheet"
  "NameArchive\022\017\n\007newname\030\001 \002(\t\022\017\n\007oldname\030"
  "\002 \002(\t\022\035\n\005sheet\030\003 \002(\0132\016.TSP.Reference\022\"\n\005"
  "super\030\004 \002(\0132\023.TSK.CommandArchive\"\213\001\n Com"
  "mandSetPageOrientationArchive\022$\n\034in_port"
  "rait_page_orientation\030\001 \002(\010\022\035\n\005sheet\030\002 \002"
  "(\0132\016.TSP.Reference\022\"\n\005super\030\003 \002(\0132\023.TSK."
  "CommandArchive\"\205\001\n%CommandSetShowPageNum"
  "bersValueArchive\022\031\n\021show_page_numbers\030\001 "
  "\002(\010\022\035\n\005sheet\030\002 \002(\0132\016.TSP.Reference\022\"\n\005su"
  "per\030\003 \002(\0132\023.TSK.CommandArchive\"\213\001\n&Comma"
  "ndSetRepeatingHeadersValueArchive\022\036\n\026sho"
  "w_repeating_headers\030\001 \002(\010\022\035\n\005sheet\030\002 \002(\013"
  "2\016.TSP.Reference\022\"\n\005super\030\003 \002(\0132\023.TSK.Co"
  "mmandArchive\"\257\001\n\035CommandSetContentScaleA"
  "rchive\022\025\n\ris_autofit_on\030\001 \002(\010\022\031\n\021old_con"
  "tent_scale\030\002 \002(\002\022\031\n\021new_content_scale\030\003 "
  "\001(\002\022\035\n\005sheet\030\004 \002(\0132\016.TSP.Reference\022\"\n\005su"
  "per\030\005 \002(\0132\023.TSK.CommandArchive\"}\n\035Comman"
  "dSetAutofitValueArchive\022\031\n\021old_content_s"
  "cale\030\001 \002(\002\022\035\n\005sheet\030\002 \002(\0132\016.TSP.Referenc"
  "e\022\"\n\005super\030\003 \002(\0132\023.TSK.CommandArchive\"\212\001"
  "\n CommandSetDocumentPrinterOptions\022\022\n\npr"
  "inter_id\030\001 \002(\t\022\020\n\010paper_id\030\002 \002(\t\022\034\n\tpage"
  "_size\030\003 \002(\0132\t.TSP.Size\022\"\n\005super\030\004 \002(\0132\023."
  "TSK.CommandArchive\"I\n#CommandEnterPrintP"
  "reviewModeArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.C"
  "ommandArchive\"H\n\"CommandExitPrintPreview"
  "ModeArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Command"
  "Archive\"\204\001\n\034CommandPasteDrawablesArchive"
  "\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\035\n\005"
  "sheet\030\002 \002(\0132\016.TSP.Reference\022!\n\tdrawables"
  "\030\003 \003(\0132\016.TSP.Reference\"\303\001\n\030CommandPasteS"
  "heetArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Command"
  "Archive\022 \n\010document\030\002 \002(\0132\016.TSP.Referenc"
  "e\022\035\n\005sheet\030\003 \002(\0132\016.TSP.Reference\022.\n\rshee"
  "t_uistate\030\004 \001(\0132\027.TN.SheetUIStateArchive"
  "\022\022\n\nsheetIndex\030\005 \002(\r\"\270\001\n\'CommandReorderS"
  "idebarItemChildrenAchive\022\"\n\005super\030\001 \002(\0132"
  "\023.TSK.CommandArchive\022\035\n\005sheet\030\002 \002(\0132\016.TS"
  "P.Reference\022$\n\014old_children\030\003 \003(\0132\016.TSP."
  "Reference\022$\n\014new_children\030\004 \003(\0132\016.TSP.Re"
  "ference\"\243\002\n#CommandChartMediatorSetEditi"
  "ngState\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartComma"
  "ndArchive\0225\n\014old_formulas\030\003 \001(\0132\037.TN.Cha"
  "rtMediatorFormulaStorage\0225\n\014new_formulas"
  "\030\004 \001(\0132\037.TN.ChartMediatorFormulaStorage\022"
  "\025\n\rold_direction\030\005 \001(\005\022\025\n\rnew_direction\030"
  "\006 \001(\005\022\032\n\022old_scatter_format\030\007 \001(\005\022\032\n\022new"
  "_scatter_format\030\010 \001(\005\"r\n)CommandChartMed"
  "iatorUpdateForEntityDelete\022(\n\005super\030\001 \002("
  "\0132\031.TSCH.ChartCommandArchive\022\033\n\003cmd\030\003 \001("
  "\0132\016.TSP.Reference\"\331\001\n ChartCommandSetSer"
  "iesNameArchive\022(\n\005super\030\001 \002(\0132\031.TSCH.Cha"
  "rtCommandArchive\022 \n\010mediator\030\002 \002(\0132\016.TSP"
  ".Reference\022\023\n\013seriesindex\030\003 \002(\r\022)\n\013old_f"
  "ormula\030\004 \001(\0132\024.TSCE.FormulaArchive\022)\n\013ne"
  "w_formula\030\005 \001(\0132\024.TSCE.FormulaArchive\"\263\001"
  "\n$ChartCommandSelectionBehaviorArchive\022%"
  "\n\rdrawable_info\030\001 \002(\0132\016.TSP.Reference\0222\n"
  "\017begin_selection\030\002 \001(\0132\031.TN.ChartSelecti"
  "onArchive\0220\n\rend_selection\030\003 \001(\0132\031.TN.Ch"
  "artSelectionArchive"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_TNCommandArchives_2eproto_deps[11] = {
  &::descriptor_table_TNArchives_2eproto,
  &::descriptor_table_TSAArchives_2eproto,
  &::descriptor_table_TSCEArchives_2eproto,
  &::descriptor_table_TSCHArchives_2eproto,
  &::descriptor_table_TSCHCommandArchives_2eproto,
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
  &::descriptor_table_TSTArchives_2eproto,
  &::descriptor_table_TSWPArchives_2eproto,
};
static ::_pbi::once_flag descriptor_table_TNCommandArchives_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TNCommandArchives_2eproto = {
    false, false, 4539, descriptor_table_protodef_TNCommandArchives_2eproto,
    "TNCommandArchives.proto",
    &descriptor_table_TNCommandArchives_2eproto_once, descriptor_table_TNCommandArchives_2eproto_deps, 11, 25,
    schemas, file_default_instances, TableStruct_TNCommandArchives_2eproto::offsets,
    file_level_metadata_TNCommandArchives_2eproto, file_level_enum_descriptors_TNCommandArchives_2eproto,
    file_level_service_descriptors_TNCommandArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TNCommandArchives_2eproto_getter() {
  return &descriptor_table_TNCommandArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TNCommandArchives_2eproto(&descriptor_table_TNCommandArchives_2eproto);
namespace TN {

// ===================================================================

class SheetCommandSelectionBehaviorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SheetCommandSelectionBehaviorArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& sheet_selection(const SheetCommandSelectionBehaviorArchive* msg);
  static void set_has_sheet_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
SheetCommandSelectionBehaviorArchive::_Internal::sheet_selection(const SheetCommandSelectionBehaviorArchive* msg) {
  return *msg->_impl_.sheet_selection_;
}
void SheetCommandSelectionBehaviorArchive::clear_sheet_selection() {
  if (_impl_.sheet_selection_ != nullptr) _impl_.sheet_selection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SheetCommandSelectionBehaviorArchive::SheetCommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.SheetCommandSelectionBehaviorArchive)
}
SheetCommandSelectionBehaviorArchive::SheetCommandSelectionBehaviorArchive(const SheetCommandSelectionBehaviorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SheetCommandSelectionBehaviorArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sheet_selection_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sheet_selection()) {
    _this->_impl_.sheet_selection_ = new ::TSP::Reference(*from._impl_.sheet_selection_);
  }
  // @@protoc_insertion_point(copy_constructor:TN.SheetCommandSelectionBehaviorArchive)
}

inline void SheetCommandSelectionBehaviorArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sheet_selection_){nullptr}
  };
}

SheetCommandSelectionBehaviorArchive::~SheetCommandSelectionBehaviorArchive() {
  // @@protoc_insertion_point(destructor:TN.SheetCommandSelectionBehaviorArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SheetCommandSelectionBehaviorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.sheet_selection_;
}

void SheetCommandSelectionBehaviorArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SheetCommandSelectionBehaviorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.SheetCommandSelectionBehaviorArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.sheet_selection_ != nullptr);
    _impl_.sheet_selection_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SheetCommandSelectionBehaviorArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference sheet_selection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet_selection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SheetCommandSelectionBehaviorArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.SheetCommandSelectionBehaviorArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference sheet_selection = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::sheet_selection(this),
        _Internal::sheet_selection(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.SheetCommandSelectionBehaviorArchive)
  return target;
}

size_t SheetCommandSelectionBehaviorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.SheetCommandSelectionBehaviorArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference sheet_selection = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_selection_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SheetCommandSelectionBehaviorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SheetCommandSelectionBehaviorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SheetCommandSelectionBehaviorArchive::GetClassData() const { return &_class_data_; }


void SheetCommandSelectionBehaviorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SheetCommandSelectionBehaviorArchive*>(&to_msg);
  auto& from = static_cast<const SheetCommandSelectionBehaviorArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.SheetCommandSelectionBehaviorArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sheet_selection()) {
    _this->_internal_mutable_sheet_selection()->::TSP::Reference::MergeFrom(
        from._internal_sheet_selection());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SheetCommandSelectionBehaviorArchive::CopyFrom(const SheetCommandSelectionBehaviorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.SheetCommandSelectionBehaviorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SheetCommandSelectionBehaviorArchive::IsInitialized() const {
  if (_internal_has_sheet_selection()) {
    if (!_impl_.sheet_selection_->IsInitialized()) return false;
  }
  return true;
}

void SheetCommandSelectionBehaviorArchive::InternalSwap(SheetCommandSelectionBehaviorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.sheet_selection_, other->_impl_.sheet_selection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SheetCommandSelectionBehaviorArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[0]);
}

// ===================================================================

class CommandFormChooseTargetTableArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandFormChooseTargetTableArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandFormChooseTargetTableArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::CFUUIDArchive& table_id(const CommandFormChooseTargetTableArchive* msg);
  static void set_has_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::CFUUIDArchive& previous_table_id(const CommandFormChooseTargetTableArchive* msg);
  static void set_has_previous_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sheet_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_previous_sheet_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& sheet(const CommandFormChooseTargetTableArchive* msg);
  static void set_has_sheet(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000024) ^ 0x00000024) != 0;
  }
};

const ::TSK::CommandArchive&
CommandFormChooseTargetTableArchive::_Internal::super(const CommandFormChooseTargetTableArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSCE::CFUUIDArchive&
CommandFormChooseTargetTableArchive::_Internal::table_id(const CommandFormChooseTargetTableArchive* msg) {
  return *msg->_impl_.table_id_;
}
const ::TSCE::CFUUIDArchive&
CommandFormChooseTargetTableArchive::_Internal::previous_table_id(const CommandFormChooseTargetTableArchive* msg) {
  return *msg->_impl_.previous_table_id_;
}
const ::TSP::Reference&
CommandFormChooseTargetTableArchive::_Internal::sheet(const CommandFormChooseTargetTableArchive* msg) {
  return *msg->_impl_.sheet_;
}
void CommandFormChooseTargetTableArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandFormChooseTargetTableArchive::clear_table_id() {
  if (_impl_.table_id_ != nullptr) _impl_.table_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandFormChooseTargetTableArchive::clear_previous_table_id() {
  if (_impl_.previous_table_id_ != nullptr) _impl_.previous_table_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void CommandFormChooseTargetTableArchive::clear_sheet() {
  if (_impl_.sheet_ != nullptr) _impl_.sheet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
CommandFormChooseTargetTableArchive::CommandFormChooseTargetTableArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.CommandFormChooseTargetTableArchive)
}
CommandFormChooseTargetTableArchive::CommandFormChooseTargetTableArchive(const CommandFormChooseTargetTableArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandFormChooseTargetTableArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sheet_name_){}
    , decltype(_impl_.previous_sheet_name_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.table_id_){nullptr}
    , decltype(_impl_.previous_table_id_){nullptr}
    , decltype(_impl_.sheet_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sheet_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sheet_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sheet_name()) {
    _this->_impl_.sheet_name_.Set(from._internal_sheet_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.previous_sheet_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.previous_sheet_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_previous_sheet_name()) {
    _this->_impl_.previous_sheet_name_.Set(from._internal_previous_sheet_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_table_id()) {
    _this->_impl_.table_id_ = new ::TSCE::CFUUIDArchive(*from._impl_.table_id_);
  }
  if (from._internal_has_previous_table_id()) {
    _this->_impl_.previous_table_id_ = new ::TSCE::CFUUIDArchive(*from._impl_.previous_table_id_);
  }
  if (from._internal_has_sheet()) {
    _this->_impl_.sheet_ = new ::TSP::Reference(*from._impl_.sheet_);
  }
  // @@protoc_insertion_point(copy_constructor:TN.CommandFormChooseTargetTableArchive)
}

inline void CommandFormChooseTargetTableArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sheet_name_){}
    , decltype(_impl_.previous_sheet_name_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.table_id_){nullptr}
    , decltype(_impl_.previous_table_id_){nullptr}
    , decltype(_impl_.sheet_){nullptr}
  };
  _impl_.sheet_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sheet_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.previous_sheet_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.previous_sheet_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandFormChooseTargetTableArchive::~CommandFormChooseTargetTableArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandFormChooseTargetTableArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandFormChooseTargetTableArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sheet_name_.Destroy();
  _impl_.previous_sheet_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.table_id_;
  if (this != internal_default_instance()) delete _impl_.previous_table_id_;
  if (this != internal_default_instance()) delete _impl_.sheet_;
}

void CommandFormChooseTargetTableArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandFormChooseTargetTableArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandFormChooseTargetTableArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.sheet_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.previous_sheet_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.table_id_ != nullptr);
      _impl_.table_id_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.previous_table_id_ != nullptr);
      _impl_.previous_table_id_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.sheet_ != nullptr);
      _impl_.sheet_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandFormChooseTargetTableArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CFUUIDArchive table_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CFUUIDArchive previous_table_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_previous_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string sheet_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sheet_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TN.CommandFormChooseTargetTableArchive.sheet_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string previous_sheet_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_previous_sheet_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TN.CommandFormChooseTargetTableArchive.previous_sheet_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference sheet = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandFormChooseTargetTableArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandFormChooseTargetTableArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CFUUIDArchive table_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::table_id(this),
        _Internal::table_id(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CFUUIDArchive previous_table_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::previous_table_id(this),
        _Internal::previous_table_id(this).GetCachedSize(), target, stream);
  }

  // optional string sheet_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sheet_name().data(), static_cast<int>(this->_internal_sheet_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TN.CommandFormChooseTargetTableArchive.sheet_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sheet_name(), target);
  }

  // optional string previous_sheet_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_previous_sheet_name().data(), static_cast<int>(this->_internal_previous_sheet_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TN.CommandFormChooseTargetTableArchive.previous_sheet_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_previous_sheet_name(), target);
  }

  // required .TSP.Reference sheet = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::sheet(this),
        _Internal::sheet(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandFormChooseTargetTableArchive)
  return target;
}

size_t CommandFormChooseTargetTableArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandFormChooseTargetTableArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_sheet()) {
    // required .TSP.Reference sheet = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);
  }

  return total_size;
}
size_t CommandFormChooseTargetTableArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandFormChooseTargetTableArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000024) ^ 0x00000024) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference sheet = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string sheet_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sheet_name());
    }

    // optional string previous_sheet_name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_previous_sheet_name());
    }

  }
  if (cached_has_bits & 0x00000018u) {
    // optional .TSCE.CFUUIDArchive table_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_id_);
    }

    // optional .TSCE.CFUUIDArchive previous_table_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.previous_table_id_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandFormChooseTargetTableArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandFormChooseTargetTableArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandFormChooseTargetTableArchive::GetClassData() const { return &_class_data_; }


void CommandFormChooseTargetTableArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandFormChooseTargetTableArchive*>(&to_msg);
  auto& from = static_cast<const CommandFormChooseTargetTableArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandFormChooseTargetTableArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_sheet_name(from._internal_sheet_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_previous_sheet_name(from._internal_previous_sheet_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_table_id()->::TSCE::CFUUIDArchive::MergeFrom(
          from._internal_table_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_previous_table_id()->::TSCE::CFUUIDArchive::MergeFrom(
          from._internal_previous_table_id());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_sheet()->::TSP::Reference::MergeFrom(
          from._internal_sheet());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandFormChooseTargetTableArchive::CopyFrom(const CommandFormChooseTargetTableArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandFormChooseTargetTableArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandFormChooseTargetTableArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_sheet()) {
    if (!_impl_.sheet_->IsInitialized()) return false;
  }
  return true;
}

void CommandFormChooseTargetTableArchive::InternalSwap(CommandFormChooseTargetTableArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sheet_name_, lhs_arena,
      &other->_impl_.sheet_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.previous_sheet_name_, lhs_arena,
      &other->_impl_.previous_sheet_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandFormChooseTargetTableArchive, _impl_.sheet_)
      + sizeof(CommandFormChooseTargetTableArchive::_impl_.sheet_)
      - PROTOBUF_FIELD_OFFSET(CommandFormChooseTargetTableArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandFormChooseTargetTableArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[1]);
}

// ===================================================================

class CommandSheetInsertDrawablesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSheetInsertDrawablesArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& sheet(const CommandSheetInsertDrawablesArchive* msg);
  static void set_has_sheet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& provider_undo(const CommandSheetInsertDrawablesArchive* msg);
  static void set_has_provider_undo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSK::CommandArchive& super(const CommandSheetInsertDrawablesArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fordrag(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_forpaste(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_atindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

const ::TSP::Reference&
CommandSheetInsertDrawablesArchive::_Internal::sheet(const CommandSheetInsertDrawablesArchive* msg) {
  return *msg->_impl_.sheet_;
}
const ::TSP::Reference&
CommandSheetInsertDrawablesArchive::_Internal::provider_undo(const CommandSheetInsertDrawablesArchive* msg) {
  return *msg->_impl_.provider_undo_;
}
const ::TSK::CommandArchive&
CommandSheetInsertDrawablesArchive::_Internal::super(const CommandSheetInsertDrawablesArchive* msg) {
  return *msg->_impl_.super_;
}
void CommandSheetInsertDrawablesArchive::clear_sheet() {
  if (_impl_.sheet_ != nullptr) _impl_.sheet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSheetInsertDrawablesArchive::clear_drawables() {
  _impl_.drawables_.Clear();
}
void CommandSheetInsertDrawablesArchive::clear_provider_undo() {
  if (_impl_.provider_undo_ != nullptr) _impl_.provider_undo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSheetInsertDrawablesArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandSheetInsertDrawablesArchive::CommandSheetInsertDrawablesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.CommandSheetInsertDrawablesArchive)
}
CommandSheetInsertDrawablesArchive::CommandSheetInsertDrawablesArchive(const CommandSheetInsertDrawablesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSheetInsertDrawablesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawables_){from._impl_.drawables_}
    , decltype(_impl_.sheet_){nullptr}
    , decltype(_impl_.provider_undo_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.atindex_){}
    , decltype(_impl_.fordrag_){}
    , decltype(_impl_.forpaste_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sheet()) {
    _this->_impl_.sheet_ = new ::TSP::Reference(*from._impl_.sheet_);
  }
  if (from._internal_has_provider_undo()) {
    _this->_impl_.provider_undo_ = new ::TSP::Reference(*from._impl_.provider_undo_);
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.atindex_, &from._impl_.atindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.forpaste_) -
    reinterpret_cast<char*>(&_impl_.atindex_)) + sizeof(_impl_.forpaste_));
  // @@protoc_insertion_point(copy_constructor:TN.CommandSheetInsertDrawablesArchive)
}

inline void CommandSheetInsertDrawablesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawables_){arena}
    , decltype(_impl_.sheet_){nullptr}
    , decltype(_impl_.provider_undo_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.atindex_){0}
    , decltype(_impl_.fordrag_){false}
    , decltype(_impl_.forpaste_){false}
  };
}

CommandSheetInsertDrawablesArchive::~CommandSheetInsertDrawablesArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandSheetInsertDrawablesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSheetInsertDrawablesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.drawables_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.sheet_;
  if (this != internal_default_instance()) delete _impl_.provider_undo_;
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSheetInsertDrawablesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSheetInsertDrawablesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandSheetInsertDrawablesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.drawables_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.sheet_ != nullptr);
      _impl_.sheet_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.provider_undo_ != nullptr);
      _impl_.provider_undo_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.atindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.forpaste_) -
        reinterpret_cast<char*>(&_impl_.atindex_)) + sizeof(_impl_.forpaste_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSheetInsertDrawablesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference sheet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference drawables = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference provider_undo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_provider_undo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSK.CommandArchive super = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool forDrag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_fordrag(&has_bits);
          _impl_.fordrag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 atIndex = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_atindex(&has_bits);
          _impl_.atindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool forPaste = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_forpaste(&has_bits);
          _impl_.forpaste_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSheetInsertDrawablesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandSheetInsertDrawablesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference sheet = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::sheet(this),
        _Internal::sheet(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference drawables = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_drawables_size()); i < n; i++) {
    const auto& repfield = this->_internal_drawables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference provider_undo = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::provider_undo(this),
        _Internal::provider_undo(this).GetCachedSize(), target, stream);
  }

  // required .TSK.CommandArchive super = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional bool forDrag = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_fordrag(), target);
  }

  // optional int32 atIndex = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_atindex(), target);
  }

  // optional bool forPaste = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_forpaste(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandSheetInsertDrawablesArchive)
  return target;
}

size_t CommandSheetInsertDrawablesArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandSheetInsertDrawablesArchive)
  size_t total_size = 0;

  if (_internal_has_sheet()) {
    // required .TSP.Reference sheet = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  return total_size;
}
size_t CommandSheetInsertDrawablesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandSheetInsertDrawablesArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .TSP.Reference sheet = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);

    // required .TSK.CommandArchive super = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference drawables = 2;
  total_size += 1UL * this->_internal_drawables_size();
  for (const auto& msg : this->_impl_.drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference provider_undo = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.provider_undo_);
  }

  if (cached_has_bits & 0x00000038u) {
    // optional int32 atIndex = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_atindex());
    }

    // optional bool forDrag = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool forPaste = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSheetInsertDrawablesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSheetInsertDrawablesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSheetInsertDrawablesArchive::GetClassData() const { return &_class_data_; }


void CommandSheetInsertDrawablesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSheetInsertDrawablesArchive*>(&to_msg);
  auto& from = static_cast<const CommandSheetInsertDrawablesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandSheetInsertDrawablesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.drawables_.MergeFrom(from._impl_.drawables_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_sheet()->::TSP::Reference::MergeFrom(
          from._internal_sheet());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_provider_undo()->::TSP::Reference::MergeFrom(
          from._internal_provider_undo());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.atindex_ = from._impl_.atindex_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.fordrag_ = from._impl_.fordrag_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.forpaste_ = from._impl_.forpaste_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSheetInsertDrawablesArchive::CopyFrom(const CommandSheetInsertDrawablesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandSheetInsertDrawablesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSheetInsertDrawablesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.drawables_))
    return false;
  if (_internal_has_sheet()) {
    if (!_impl_.sheet_->IsInitialized()) return false;
  }
  if (_internal_has_provider_undo()) {
    if (!_impl_.provider_undo_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSheetInsertDrawablesArchive::InternalSwap(CommandSheetInsertDrawablesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.drawables_.InternalSwap(&other->_impl_.drawables_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSheetInsertDrawablesArchive, _impl_.forpaste_)
      + sizeof(CommandSheetInsertDrawablesArchive::_impl_.forpaste_)
      - PROTOBUF_FIELD_OFFSET(CommandSheetInsertDrawablesArchive, _impl_.sheet_)>(
          reinterpret_cast<char*>(&_impl_.sheet_),
          reinterpret_cast<char*>(&other->_impl_.sheet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSheetInsertDrawablesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[2]);
}

// ===================================================================

class CommandSheetRemoveDrawablesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSheetRemoveDrawablesArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSheetRemoveDrawablesArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& sheet(const CommandSheetRemoveDrawablesArchive* msg);
  static void set_has_sheet(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::IndexSet& drawableindices(const CommandSheetRemoveDrawablesArchive* msg);
  static void set_has_drawableindices(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& formula_rewrite_command_for_undo(const CommandSheetRemoveDrawablesArchive* msg);
  static void set_has_formula_rewrite_command_for_undo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSheetRemoveDrawablesArchive::_Internal::super(const CommandSheetRemoveDrawablesArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSheetRemoveDrawablesArchive::_Internal::sheet(const CommandSheetRemoveDrawablesArchive* msg) {
  return *msg->_impl_.sheet_;
}
const ::TSP::IndexSet&
CommandSheetRemoveDrawablesArchive::_Internal::drawableindices(const CommandSheetRemoveDrawablesArchive* msg) {
  return *msg->_impl_.drawableindices_;
}
const ::TSP::Reference&
CommandSheetRemoveDrawablesArchive::_Internal::formula_rewrite_command_for_undo(const CommandSheetRemoveDrawablesArchive* msg) {
  return *msg->_impl_.formula_rewrite_command_for_undo_;
}
void CommandSheetRemoveDrawablesArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSheetRemoveDrawablesArchive::clear_sheet() {
  if (_impl_.sheet_ != nullptr) _impl_.sheet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSheetRemoveDrawablesArchive::clear_sorteddrawables() {
  _impl_.sorteddrawables_.Clear();
}
void CommandSheetRemoveDrawablesArchive::clear_drawableindices() {
  if (_impl_.drawableindices_ != nullptr) _impl_.drawableindices_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandSheetRemoveDrawablesArchive::clear_old_sheet_sidebar_order() {
  _impl_.old_sheet_sidebar_order_.Clear();
}
void CommandSheetRemoveDrawablesArchive::clear_formula_rewrite_command_for_undo() {
  if (_impl_.formula_rewrite_command_for_undo_ != nullptr) _impl_.formula_rewrite_command_for_undo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandSheetRemoveDrawablesArchive::CommandSheetRemoveDrawablesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.CommandSheetRemoveDrawablesArchive)
}
CommandSheetRemoveDrawablesArchive::CommandSheetRemoveDrawablesArchive(const CommandSheetRemoveDrawablesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSheetRemoveDrawablesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sorteddrawables_){from._impl_.sorteddrawables_}
    , decltype(_impl_.old_sheet_sidebar_order_){from._impl_.old_sheet_sidebar_order_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.sheet_){nullptr}
    , decltype(_impl_.drawableindices_){nullptr}
    , decltype(_impl_.formula_rewrite_command_for_undo_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_sheet()) {
    _this->_impl_.sheet_ = new ::TSP::Reference(*from._impl_.sheet_);
  }
  if (from._internal_has_drawableindices()) {
    _this->_impl_.drawableindices_ = new ::TSP::IndexSet(*from._impl_.drawableindices_);
  }
  if (from._internal_has_formula_rewrite_command_for_undo()) {
    _this->_impl_.formula_rewrite_command_for_undo_ = new ::TSP::Reference(*from._impl_.formula_rewrite_command_for_undo_);
  }
  // @@protoc_insertion_point(copy_constructor:TN.CommandSheetRemoveDrawablesArchive)
}

inline void CommandSheetRemoveDrawablesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sorteddrawables_){arena}
    , decltype(_impl_.old_sheet_sidebar_order_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.sheet_){nullptr}
    , decltype(_impl_.drawableindices_){nullptr}
    , decltype(_impl_.formula_rewrite_command_for_undo_){nullptr}
  };
}

CommandSheetRemoveDrawablesArchive::~CommandSheetRemoveDrawablesArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandSheetRemoveDrawablesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSheetRemoveDrawablesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sorteddrawables_.~RepeatedPtrField();
  _impl_.old_sheet_sidebar_order_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.sheet_;
  if (this != internal_default_instance()) delete _impl_.drawableindices_;
  if (this != internal_default_instance()) delete _impl_.formula_rewrite_command_for_undo_;
}

void CommandSheetRemoveDrawablesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSheetRemoveDrawablesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandSheetRemoveDrawablesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sorteddrawables_.Clear();
  _impl_.old_sheet_sidebar_order_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.sheet_ != nullptr);
      _impl_.sheet_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.drawableindices_ != nullptr);
      _impl_.drawableindices_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.formula_rewrite_command_for_undo_ != nullptr);
      _impl_.formula_rewrite_command_for_undo_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSheetRemoveDrawablesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference sheet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference sortedDrawables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sorteddrawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .TSP.IndexSet drawableIndices = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_drawableindices(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_sheet_sidebar_order = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_sheet_sidebar_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference formula_rewrite_command_for_undo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_rewrite_command_for_undo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSheetRemoveDrawablesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandSheetRemoveDrawablesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference sheet = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sheet(this),
        _Internal::sheet(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference sortedDrawables = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sorteddrawables_size()); i < n; i++) {
    const auto& repfield = this->_internal_sorteddrawables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .TSP.IndexSet drawableIndices = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::drawableindices(this),
        _Internal::drawableindices(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference old_sheet_sidebar_order = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_sheet_sidebar_order_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_sheet_sidebar_order(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference formula_rewrite_command_for_undo = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::formula_rewrite_command_for_undo(this),
        _Internal::formula_rewrite_command_for_undo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandSheetRemoveDrawablesArchive)
  return target;
}

size_t CommandSheetRemoveDrawablesArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandSheetRemoveDrawablesArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_sheet()) {
    // required .TSP.Reference sheet = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);
  }

  if (_internal_has_drawableindices()) {
    // required .TSP.IndexSet drawableIndices = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drawableindices_);
  }

  return total_size;
}
size_t CommandSheetRemoveDrawablesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandSheetRemoveDrawablesArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference sheet = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);

    // required .TSP.IndexSet drawableIndices = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drawableindices_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference sortedDrawables = 3;
  total_size += 1UL * this->_internal_sorteddrawables_size();
  for (const auto& msg : this->_impl_.sorteddrawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_sheet_sidebar_order = 5;
  total_size += 1UL * this->_internal_old_sheet_sidebar_order_size();
  for (const auto& msg : this->_impl_.old_sheet_sidebar_order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference formula_rewrite_command_for_undo = 6;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formula_rewrite_command_for_undo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSheetRemoveDrawablesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSheetRemoveDrawablesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSheetRemoveDrawablesArchive::GetClassData() const { return &_class_data_; }


void CommandSheetRemoveDrawablesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSheetRemoveDrawablesArchive*>(&to_msg);
  auto& from = static_cast<const CommandSheetRemoveDrawablesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandSheetRemoveDrawablesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sorteddrawables_.MergeFrom(from._impl_.sorteddrawables_);
  _this->_impl_.old_sheet_sidebar_order_.MergeFrom(from._impl_.old_sheet_sidebar_order_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_sheet()->::TSP::Reference::MergeFrom(
          from._internal_sheet());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_drawableindices()->::TSP::IndexSet::MergeFrom(
          from._internal_drawableindices());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_formula_rewrite_command_for_undo()->::TSP::Reference::MergeFrom(
          from._internal_formula_rewrite_command_for_undo());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSheetRemoveDrawablesArchive::CopyFrom(const CommandSheetRemoveDrawablesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandSheetRemoveDrawablesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSheetRemoveDrawablesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.sorteddrawables_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.old_sheet_sidebar_order_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_sheet()) {
    if (!_impl_.sheet_->IsInitialized()) return false;
  }
  if (_internal_has_drawableindices()) {
    if (!_impl_.drawableindices_->IsInitialized()) return false;
  }
  if (_internal_has_formula_rewrite_command_for_undo()) {
    if (!_impl_.formula_rewrite_command_for_undo_->IsInitialized()) return false;
  }
  return true;
}

void CommandSheetRemoveDrawablesArchive::InternalSwap(CommandSheetRemoveDrawablesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.sorteddrawables_.InternalSwap(&other->_impl_.sorteddrawables_);
  _impl_.old_sheet_sidebar_order_.InternalSwap(&other->_impl_.old_sheet_sidebar_order_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSheetRemoveDrawablesArchive, _impl_.formula_rewrite_command_for_undo_)
      + sizeof(CommandSheetRemoveDrawablesArchive::_impl_.formula_rewrite_command_for_undo_)
      - PROTOBUF_FIELD_OFFSET(CommandSheetRemoveDrawablesArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSheetRemoveDrawablesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[3]);
}

// ===================================================================

class CommandSheetMoveDrawableZOrderArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSheetMoveDrawableZOrderArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSheetMoveDrawableZOrderArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& sheet(const CommandSheetMoveDrawableZOrderArchive* msg);
  static void set_has_sheet(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::IndexSet& indexes(const CommandSheetMoveDrawableZOrderArchive* msg);
  static void set_has_indexes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSheetMoveDrawableZOrderArchive::_Internal::super(const CommandSheetMoveDrawableZOrderArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSheetMoveDrawableZOrderArchive::_Internal::sheet(const CommandSheetMoveDrawableZOrderArchive* msg) {
  return *msg->_impl_.sheet_;
}
const ::TSP::IndexSet&
CommandSheetMoveDrawableZOrderArchive::_Internal::indexes(const CommandSheetMoveDrawableZOrderArchive* msg) {
  return *msg->_impl_.indexes_;
}
void CommandSheetMoveDrawableZOrderArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSheetMoveDrawableZOrderArchive::clear_sheet() {
  if (_impl_.sheet_ != nullptr) _impl_.sheet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSheetMoveDrawableZOrderArchive::clear_drawable_infos() {
  _impl_.drawable_infos_.Clear();
}
void CommandSheetMoveDrawableZOrderArchive::clear_indexes() {
  if (_impl_.indexes_ != nullptr) _impl_.indexes_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandSheetMoveDrawableZOrderArchive::CommandSheetMoveDrawableZOrderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.CommandSheetMoveDrawableZOrderArchive)
}
CommandSheetMoveDrawableZOrderArchive::CommandSheetMoveDrawableZOrderArchive(const CommandSheetMoveDrawableZOrderArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSheetMoveDrawableZOrderArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawable_infos_){from._impl_.drawable_infos_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.sheet_){nullptr}
    , decltype(_impl_.indexes_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_sheet()) {
    _this->_impl_.sheet_ = new ::TSP::Reference(*from._impl_.sheet_);
  }
  if (from._internal_has_indexes()) {
    _this->_impl_.indexes_ = new ::TSP::IndexSet(*from._impl_.indexes_);
  }
  // @@protoc_insertion_point(copy_constructor:TN.CommandSheetMoveDrawableZOrderArchive)
}

inline void CommandSheetMoveDrawableZOrderArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawable_infos_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.sheet_){nullptr}
    , decltype(_impl_.indexes_){nullptr}
  };
}

CommandSheetMoveDrawableZOrderArchive::~CommandSheetMoveDrawableZOrderArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandSheetMoveDrawableZOrderArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSheetMoveDrawableZOrderArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.drawable_infos_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.sheet_;
  if (this != internal_default_instance()) delete _impl_.indexes_;
}

void CommandSheetMoveDrawableZOrderArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSheetMoveDrawableZOrderArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandSheetMoveDrawableZOrderArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.drawable_infos_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.sheet_ != nullptr);
      _impl_.sheet_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.indexes_ != nullptr);
      _impl_.indexes_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSheetMoveDrawableZOrderArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference sheet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference drawable_infos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawable_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .TSP.IndexSet indexes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_indexes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSheetMoveDrawableZOrderArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandSheetMoveDrawableZOrderArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference sheet = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sheet(this),
        _Internal::sheet(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference drawable_infos = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_drawable_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_drawable_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .TSP.IndexSet indexes = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::indexes(this),
        _Internal::indexes(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandSheetMoveDrawableZOrderArchive)
  return target;
}

size_t CommandSheetMoveDrawableZOrderArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandSheetMoveDrawableZOrderArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_sheet()) {
    // required .TSP.Reference sheet = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);
  }

  if (_internal_has_indexes()) {
    // required .TSP.IndexSet indexes = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.indexes_);
  }

  return total_size;
}
size_t CommandSheetMoveDrawableZOrderArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandSheetMoveDrawableZOrderArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference sheet = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);

    // required .TSP.IndexSet indexes = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.indexes_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference drawable_infos = 3;
  total_size += 1UL * this->_internal_drawable_infos_size();
  for (const auto& msg : this->_impl_.drawable_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSheetMoveDrawableZOrderArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSheetMoveDrawableZOrderArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSheetMoveDrawableZOrderArchive::GetClassData() const { return &_class_data_; }


void CommandSheetMoveDrawableZOrderArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSheetMoveDrawableZOrderArchive*>(&to_msg);
  auto& from = static_cast<const CommandSheetMoveDrawableZOrderArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandSheetMoveDrawableZOrderArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.drawable_infos_.MergeFrom(from._impl_.drawable_infos_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_sheet()->::TSP::Reference::MergeFrom(
          from._internal_sheet());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_indexes()->::TSP::IndexSet::MergeFrom(
          from._internal_indexes());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSheetMoveDrawableZOrderArchive::CopyFrom(const CommandSheetMoveDrawableZOrderArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandSheetMoveDrawableZOrderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSheetMoveDrawableZOrderArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.drawable_infos_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_sheet()) {
    if (!_impl_.sheet_->IsInitialized()) return false;
  }
  if (_internal_has_indexes()) {
    if (!_impl_.indexes_->IsInitialized()) return false;
  }
  return true;
}

void CommandSheetMoveDrawableZOrderArchive::InternalSwap(CommandSheetMoveDrawableZOrderArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.drawable_infos_.InternalSwap(&other->_impl_.drawable_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSheetMoveDrawableZOrderArchive, _impl_.indexes_)
      + sizeof(CommandSheetMoveDrawableZOrderArchive::_impl_.indexes_)
      - PROTOBUF_FIELD_OFFSET(CommandSheetMoveDrawableZOrderArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSheetMoveDrawableZOrderArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[4]);
}

// ===================================================================

class CommandDocumentInsertSheetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandDocumentInsertSheetArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& document(const CommandDocumentInsertSheetArchive* msg);
  static void set_has_document(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& sheet(const CommandDocumentInsertSheetArchive* msg);
  static void set_has_sheet(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSK::CommandArchive& super(const CommandDocumentInsertSheetArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSP::Reference&
CommandDocumentInsertSheetArchive::_Internal::document(const CommandDocumentInsertSheetArchive* msg) {
  return *msg->_impl_.document_;
}
const ::TSP::Reference&
CommandDocumentInsertSheetArchive::_Internal::sheet(const CommandDocumentInsertSheetArchive* msg) {
  return *msg->_impl_.sheet_;
}
const ::TSK::CommandArchive&
CommandDocumentInsertSheetArchive::_Internal::super(const CommandDocumentInsertSheetArchive* msg) {
  return *msg->_impl_.super_;
}
void CommandDocumentInsertSheetArchive::clear_document() {
  if (_impl_.document_ != nullptr) _impl_.document_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandDocumentInsertSheetArchive::clear_sheet() {
  if (_impl_.sheet_ != nullptr) _impl_.sheet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandDocumentInsertSheetArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandDocumentInsertSheetArchive::CommandDocumentInsertSheetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.CommandDocumentInsertSheetArchive)
}
CommandDocumentInsertSheetArchive::CommandDocumentInsertSheetArchive(const CommandDocumentInsertSheetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandDocumentInsertSheetArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.document_){nullptr}
    , decltype(_impl_.sheet_){nullptr}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_document()) {
    _this->_impl_.document_ = new ::TSP::Reference(*from._impl_.document_);
  }
  if (from._internal_has_sheet()) {
    _this->_impl_.sheet_ = new ::TSP::Reference(*from._impl_.sheet_);
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TN.CommandDocumentInsertSheetArchive)
}

inline void CommandDocumentInsertSheetArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.document_){nullptr}
    , decltype(_impl_.sheet_){nullptr}
    , decltype(_impl_.super_){nullptr}
  };
}

CommandDocumentInsertSheetArchive::~CommandDocumentInsertSheetArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandDocumentInsertSheetArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandDocumentInsertSheetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.document_;
  if (this != internal_default_instance()) delete _impl_.sheet_;
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandDocumentInsertSheetArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandDocumentInsertSheetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandDocumentInsertSheetArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.document_ != nullptr);
      _impl_.document_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.sheet_ != nullptr);
      _impl_.sheet_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandDocumentInsertSheetArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference document = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference sheet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSK.CommandArchive super = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandDocumentInsertSheetArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandDocumentInsertSheetArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference document = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::document(this),
        _Internal::document(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference sheet = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sheet(this),
        _Internal::sheet(this).GetCachedSize(), target, stream);
  }

  // required .TSK.CommandArchive super = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandDocumentInsertSheetArchive)
  return target;
}

size_t CommandDocumentInsertSheetArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandDocumentInsertSheetArchive)
  size_t total_size = 0;

  if (_internal_has_document()) {
    // required .TSP.Reference document = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.document_);
  }

  if (_internal_has_sheet()) {
    // required .TSP.Reference sheet = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  return total_size;
}
size_t CommandDocumentInsertSheetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandDocumentInsertSheetArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSP.Reference document = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.document_);

    // required .TSP.Reference sheet = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);

    // required .TSK.CommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandDocumentInsertSheetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandDocumentInsertSheetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandDocumentInsertSheetArchive::GetClassData() const { return &_class_data_; }


void CommandDocumentInsertSheetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandDocumentInsertSheetArchive*>(&to_msg);
  auto& from = static_cast<const CommandDocumentInsertSheetArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandDocumentInsertSheetArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_document()->::TSP::Reference::MergeFrom(
          from._internal_document());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_sheet()->::TSP::Reference::MergeFrom(
          from._internal_sheet());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandDocumentInsertSheetArchive::CopyFrom(const CommandDocumentInsertSheetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandDocumentInsertSheetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDocumentInsertSheetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_document()) {
    if (!_impl_.document_->IsInitialized()) return false;
  }
  if (_internal_has_sheet()) {
    if (!_impl_.sheet_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandDocumentInsertSheetArchive::InternalSwap(CommandDocumentInsertSheetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandDocumentInsertSheetArchive, _impl_.super_)
      + sizeof(CommandDocumentInsertSheetArchive::_impl_.super_)
      - PROTOBUF_FIELD_OFFSET(CommandDocumentInsertSheetArchive, _impl_.document_)>(
          reinterpret_cast<char*>(&_impl_.document_),
          reinterpret_cast<char*>(&other->_impl_.document_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandDocumentInsertSheetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[5]);
}

// ===================================================================

class CommandDocumentRemoveSheetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandDocumentRemoveSheetArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& document(const CommandDocumentRemoveSheetArchive* msg);
  static void set_has_document(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& sheet(const CommandDocumentRemoveSheetArchive* msg);
  static void set_has_sheet(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSK::CommandArchive& super(const CommandDocumentRemoveSheetArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& formula_rewrite_command_for_undo(const CommandDocumentRemoveSheetArchive* msg);
  static void set_has_formula_rewrite_command_for_undo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000017) ^ 0x00000017) != 0;
  }
};

const ::TSP::Reference&
CommandDocumentRemoveSheetArchive::_Internal::document(const CommandDocumentRemoveSheetArchive* msg) {
  return *msg->_impl_.document_;
}
const ::TSP::Reference&
CommandDocumentRemoveSheetArchive::_Internal::sheet(const CommandDocumentRemoveSheetArchive* msg) {
  return *msg->_impl_.sheet_;
}
const ::TSK::CommandArchive&
CommandDocumentRemoveSheetArchive::_Internal::super(const CommandDocumentRemoveSheetArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandDocumentRemoveSheetArchive::_Internal::formula_rewrite_command_for_undo(const CommandDocumentRemoveSheetArchive* msg) {
  return *msg->_impl_.formula_rewrite_command_for_undo_;
}
void CommandDocumentRemoveSheetArchive::clear_document() {
  if (_impl_.document_ != nullptr) _impl_.document_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandDocumentRemoveSheetArchive::clear_sheet() {
  if (_impl_.sheet_ != nullptr) _impl_.sheet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandDocumentRemoveSheetArchive::clear_old_sheet_sidebar_order() {
  _impl_.old_sheet_sidebar_order_.Clear();
}
void CommandDocumentRemoveSheetArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandDocumentRemoveSheetArchive::clear_formula_rewrite_command_for_undo() {
  if (_impl_.formula_rewrite_command_for_undo_ != nullptr) _impl_.formula_rewrite_command_for_undo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandDocumentRemoveSheetArchive::CommandDocumentRemoveSheetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.CommandDocumentRemoveSheetArchive)
}
CommandDocumentRemoveSheetArchive::CommandDocumentRemoveSheetArchive(const CommandDocumentRemoveSheetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandDocumentRemoveSheetArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.old_sheet_sidebar_order_){from._impl_.old_sheet_sidebar_order_}
    , decltype(_impl_.document_){nullptr}
    , decltype(_impl_.sheet_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.formula_rewrite_command_for_undo_){nullptr}
    , decltype(_impl_.index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_document()) {
    _this->_impl_.document_ = new ::TSP::Reference(*from._impl_.document_);
  }
  if (from._internal_has_sheet()) {
    _this->_impl_.sheet_ = new ::TSP::Reference(*from._impl_.sheet_);
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_formula_rewrite_command_for_undo()) {
    _this->_impl_.formula_rewrite_command_for_undo_ = new ::TSP::Reference(*from._impl_.formula_rewrite_command_for_undo_);
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:TN.CommandDocumentRemoveSheetArchive)
}

inline void CommandDocumentRemoveSheetArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.old_sheet_sidebar_order_){arena}
    , decltype(_impl_.document_){nullptr}
    , decltype(_impl_.sheet_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.formula_rewrite_command_for_undo_){nullptr}
    , decltype(_impl_.index_){0u}
  };
}

CommandDocumentRemoveSheetArchive::~CommandDocumentRemoveSheetArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandDocumentRemoveSheetArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandDocumentRemoveSheetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.old_sheet_sidebar_order_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.document_;
  if (this != internal_default_instance()) delete _impl_.sheet_;
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.formula_rewrite_command_for_undo_;
}

void CommandDocumentRemoveSheetArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandDocumentRemoveSheetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandDocumentRemoveSheetArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.old_sheet_sidebar_order_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.document_ != nullptr);
      _impl_.document_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.sheet_ != nullptr);
      _impl_.sheet_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.formula_rewrite_command_for_undo_ != nullptr);
      _impl_.formula_rewrite_command_for_undo_->Clear();
    }
  }
  _impl_.index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandDocumentRemoveSheetArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference document = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference sheet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_sheet_sidebar_order = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_sheet_sidebar_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .TSK.CommandArchive super = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference formula_rewrite_command_for_undo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_rewrite_command_for_undo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandDocumentRemoveSheetArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandDocumentRemoveSheetArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference document = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::document(this),
        _Internal::document(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference sheet = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sheet(this),
        _Internal::sheet(this).GetCachedSize(), target, stream);
  }

  // required uint32 index = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_index(), target);
  }

  // repeated .TSP.Reference old_sheet_sidebar_order = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_sheet_sidebar_order_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_sheet_sidebar_order(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .TSK.CommandArchive super = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference formula_rewrite_command_for_undo = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::formula_rewrite_command_for_undo(this),
        _Internal::formula_rewrite_command_for_undo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandDocumentRemoveSheetArchive)
  return target;
}

size_t CommandDocumentRemoveSheetArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandDocumentRemoveSheetArchive)
  size_t total_size = 0;

  if (_internal_has_document()) {
    // required .TSP.Reference document = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.document_);
  }

  if (_internal_has_sheet()) {
    // required .TSP.Reference sheet = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_index()) {
    // required uint32 index = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return total_size;
}
size_t CommandDocumentRemoveSheetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandDocumentRemoveSheetArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000017) ^ 0x00000017) == 0) {  // All required fields are present.
    // required .TSP.Reference document = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.document_);

    // required .TSP.Reference sheet = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);

    // required .TSK.CommandArchive super = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required uint32 index = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference old_sheet_sidebar_order = 4;
  total_size += 1UL * this->_internal_old_sheet_sidebar_order_size();
  for (const auto& msg : this->_impl_.old_sheet_sidebar_order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference formula_rewrite_command_for_undo = 6;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formula_rewrite_command_for_undo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandDocumentRemoveSheetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandDocumentRemoveSheetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandDocumentRemoveSheetArchive::GetClassData() const { return &_class_data_; }


void CommandDocumentRemoveSheetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandDocumentRemoveSheetArchive*>(&to_msg);
  auto& from = static_cast<const CommandDocumentRemoveSheetArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandDocumentRemoveSheetArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.old_sheet_sidebar_order_.MergeFrom(from._impl_.old_sheet_sidebar_order_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_document()->::TSP::Reference::MergeFrom(
          from._internal_document());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_sheet()->::TSP::Reference::MergeFrom(
          from._internal_sheet());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_formula_rewrite_command_for_undo()->::TSP::Reference::MergeFrom(
          from._internal_formula_rewrite_command_for_undo());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandDocumentRemoveSheetArchive::CopyFrom(const CommandDocumentRemoveSheetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandDocumentRemoveSheetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDocumentRemoveSheetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.old_sheet_sidebar_order_))
    return false;
  if (_internal_has_document()) {
    if (!_impl_.document_->IsInitialized()) return false;
  }
  if (_internal_has_sheet()) {
    if (!_impl_.sheet_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_formula_rewrite_command_for_undo()) {
    if (!_impl_.formula_rewrite_command_for_undo_->IsInitialized()) return false;
  }
  return true;
}

void CommandDocumentRemoveSheetArchive::InternalSwap(CommandDocumentRemoveSheetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.old_sheet_sidebar_order_.InternalSwap(&other->_impl_.old_sheet_sidebar_order_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandDocumentRemoveSheetArchive, _impl_.index_)
      + sizeof(CommandDocumentRemoveSheetArchive::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(CommandDocumentRemoveSheetArchive, _impl_.document_)>(
          reinterpret_cast<char*>(&_impl_.document_),
          reinterpret_cast<char*>(&other->_impl_.document_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandDocumentRemoveSheetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[6]);
}

// ===================================================================

class CommandDocumentReplaceLastSheetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandDocumentReplaceLastSheetArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& document(const CommandDocumentReplaceLastSheetArchive* msg);
  static void set_has_document(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& last_sheet(const CommandDocumentReplaceLastSheetArchive* msg);
  static void set_has_last_sheet(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& new_sheet(const CommandDocumentReplaceLastSheetArchive* msg);
  static void set_has_new_sheet(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSK::CommandArchive& super(const CommandDocumentReplaceLastSheetArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSP::Reference&
CommandDocumentReplaceLastSheetArchive::_Internal::document(const CommandDocumentReplaceLastSheetArchive* msg) {
  return *msg->_impl_.document_;
}
const ::TSP::Reference&
CommandDocumentReplaceLastSheetArchive::_Internal::last_sheet(const CommandDocumentReplaceLastSheetArchive* msg) {
  return *msg->_impl_.last_sheet_;
}
const ::TSP::Reference&
CommandDocumentReplaceLastSheetArchive::_Internal::new_sheet(const CommandDocumentReplaceLastSheetArchive* msg) {
  return *msg->_impl_.new_sheet_;
}
const ::TSK::CommandArchive&
CommandDocumentReplaceLastSheetArchive::_Internal::super(const CommandDocumentReplaceLastSheetArchive* msg) {
  return *msg->_impl_.super_;
}
void CommandDocumentReplaceLastSheetArchive::clear_document() {
  if (_impl_.document_ != nullptr) _impl_.document_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandDocumentReplaceLastSheetArchive::clear_last_sheet() {
  if (_impl_.last_sheet_ != nullptr) _impl_.last_sheet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandDocumentReplaceLastSheetArchive::clear_new_sheet() {
  if (_impl_.new_sheet_ != nullptr) _impl_.new_sheet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandDocumentReplaceLastSheetArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandDocumentReplaceLastSheetArchive::CommandDocumentReplaceLastSheetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.CommandDocumentReplaceLastSheetArchive)
}
CommandDocumentReplaceLastSheetArchive::CommandDocumentReplaceLastSheetArchive(const CommandDocumentReplaceLastSheetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandDocumentReplaceLastSheetArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.document_){nullptr}
    , decltype(_impl_.last_sheet_){nullptr}
    , decltype(_impl_.new_sheet_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_document()) {
    _this->_impl_.document_ = new ::TSP::Reference(*from._impl_.document_);
  }
  if (from._internal_has_last_sheet()) {
    _this->_impl_.last_sheet_ = new ::TSP::Reference(*from._impl_.last_sheet_);
  }
  if (from._internal_has_new_sheet()) {
    _this->_impl_.new_sheet_ = new ::TSP::Reference(*from._impl_.new_sheet_);
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:TN.CommandDocumentReplaceLastSheetArchive)
}

inline void CommandDocumentReplaceLastSheetArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.document_){nullptr}
    , decltype(_impl_.last_sheet_){nullptr}
    , decltype(_impl_.new_sheet_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.index_){0u}
  };
}

CommandDocumentReplaceLastSheetArchive::~CommandDocumentReplaceLastSheetArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandDocumentReplaceLastSheetArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandDocumentReplaceLastSheetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.document_;
  if (this != internal_default_instance()) delete _impl_.last_sheet_;
  if (this != internal_default_instance()) delete _impl_.new_sheet_;
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandDocumentReplaceLastSheetArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandDocumentReplaceLastSheetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandDocumentReplaceLastSheetArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.document_ != nullptr);
      _impl_.document_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.last_sheet_ != nullptr);
      _impl_.last_sheet_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.new_sheet_ != nullptr);
      _impl_.new_sheet_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_.index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandDocumentReplaceLastSheetArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference document = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference last_sheet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_sheet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference new_sheet = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_sheet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSK.CommandArchive super = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandDocumentReplaceLastSheetArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandDocumentReplaceLastSheetArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference document = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::document(this),
        _Internal::document(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference last_sheet = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::last_sheet(this),
        _Internal::last_sheet(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference new_sheet = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::new_sheet(this),
        _Internal::new_sheet(this).GetCachedSize(), target, stream);
  }

  // required .TSK.CommandArchive super = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional uint32 index = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandDocumentReplaceLastSheetArchive)
  return target;
}

size_t CommandDocumentReplaceLastSheetArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandDocumentReplaceLastSheetArchive)
  size_t total_size = 0;

  if (_internal_has_document()) {
    // required .TSP.Reference document = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.document_);
  }

  if (_internal_has_last_sheet()) {
    // required .TSP.Reference last_sheet = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_sheet_);
  }

  if (_internal_has_new_sheet()) {
    // required .TSP.Reference new_sheet = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_sheet_);
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  return total_size;
}
size_t CommandDocumentReplaceLastSheetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandDocumentReplaceLastSheetArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSP.Reference document = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.document_);

    // required .TSP.Reference last_sheet = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_sheet_);

    // required .TSP.Reference new_sheet = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_sheet_);

    // required .TSK.CommandArchive super = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 index = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandDocumentReplaceLastSheetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandDocumentReplaceLastSheetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandDocumentReplaceLastSheetArchive::GetClassData() const { return &_class_data_; }


void CommandDocumentReplaceLastSheetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandDocumentReplaceLastSheetArchive*>(&to_msg);
  auto& from = static_cast<const CommandDocumentReplaceLastSheetArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandDocumentReplaceLastSheetArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_document()->::TSP::Reference::MergeFrom(
          from._internal_document());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_last_sheet()->::TSP::Reference::MergeFrom(
          from._internal_last_sheet());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_new_sheet()->::TSP::Reference::MergeFrom(
          from._internal_new_sheet());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandDocumentReplaceLastSheetArchive::CopyFrom(const CommandDocumentReplaceLastSheetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandDocumentReplaceLastSheetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDocumentReplaceLastSheetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_document()) {
    if (!_impl_.document_->IsInitialized()) return false;
  }
  if (_internal_has_last_sheet()) {
    if (!_impl_.last_sheet_->IsInitialized()) return false;
  }
  if (_internal_has_new_sheet()) {
    if (!_impl_.new_sheet_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandDocumentReplaceLastSheetArchive::InternalSwap(CommandDocumentReplaceLastSheetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandDocumentReplaceLastSheetArchive, _impl_.index_)
      + sizeof(CommandDocumentReplaceLastSheetArchive::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(CommandDocumentReplaceLastSheetArchive, _impl_.document_)>(
          reinterpret_cast<char*>(&_impl_.document_),
          reinterpret_cast<char*>(&other->_impl_.document_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandDocumentReplaceLastSheetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[7]);
}

// ===================================================================

class CommandDocumentReorderSheetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandDocumentReorderSheetArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& document(const CommandDocumentReorderSheetArchive* msg);
  static void set_has_document(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& sheet(const CommandDocumentReorderSheetArchive* msg);
  static void set_has_sheet(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dest_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSK::CommandArchive& super(const CommandDocumentReorderSheetArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TSP::Reference&
CommandDocumentReorderSheetArchive::_Internal::document(const CommandDocumentReorderSheetArchive* msg) {
  return *msg->_impl_.document_;
}
const ::TSP::Reference&
CommandDocumentReorderSheetArchive::_Internal::sheet(const CommandDocumentReorderSheetArchive* msg) {
  return *msg->_impl_.sheet_;
}
const ::TSK::CommandArchive&
CommandDocumentReorderSheetArchive::_Internal::super(const CommandDocumentReorderSheetArchive* msg) {
  return *msg->_impl_.super_;
}
void CommandDocumentReorderSheetArchive::clear_document() {
  if (_impl_.document_ != nullptr) _impl_.document_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandDocumentReorderSheetArchive::clear_sheet() {
  if (_impl_.sheet_ != nullptr) _impl_.sheet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandDocumentReorderSheetArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandDocumentReorderSheetArchive::CommandDocumentReorderSheetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.CommandDocumentReorderSheetArchive)
}
CommandDocumentReorderSheetArchive::CommandDocumentReorderSheetArchive(const CommandDocumentReorderSheetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandDocumentReorderSheetArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.document_){nullptr}
    , decltype(_impl_.sheet_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.source_index_){}
    , decltype(_impl_.dest_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_document()) {
    _this->_impl_.document_ = new ::TSP::Reference(*from._impl_.document_);
  }
  if (from._internal_has_sheet()) {
    _this->_impl_.sheet_ = new ::TSP::Reference(*from._impl_.sheet_);
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.source_index_, &from._impl_.source_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dest_index_) -
    reinterpret_cast<char*>(&_impl_.source_index_)) + sizeof(_impl_.dest_index_));
  // @@protoc_insertion_point(copy_constructor:TN.CommandDocumentReorderSheetArchive)
}

inline void CommandDocumentReorderSheetArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.document_){nullptr}
    , decltype(_impl_.sheet_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.source_index_){0u}
    , decltype(_impl_.dest_index_){0u}
  };
}

CommandDocumentReorderSheetArchive::~CommandDocumentReorderSheetArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandDocumentReorderSheetArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandDocumentReorderSheetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.document_;
  if (this != internal_default_instance()) delete _impl_.sheet_;
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandDocumentReorderSheetArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandDocumentReorderSheetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandDocumentReorderSheetArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.document_ != nullptr);
      _impl_.document_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.sheet_ != nullptr);
      _impl_.sheet_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.source_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.dest_index_) -
        reinterpret_cast<char*>(&_impl_.source_index_)) + sizeof(_impl_.dest_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandDocumentReorderSheetArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference document = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference sheet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 source_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_source_index(&has_bits);
          _impl_.source_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 dest_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_dest_index(&has_bits);
          _impl_.dest_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSK.CommandArchive super = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandDocumentReorderSheetArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandDocumentReorderSheetArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference document = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::document(this),
        _Internal::document(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference sheet = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sheet(this),
        _Internal::sheet(this).GetCachedSize(), target, stream);
  }

  // required uint32 source_index = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_source_index(), target);
  }

  // required uint32 dest_index = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_dest_index(), target);
  }

  // required .TSK.CommandArchive super = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandDocumentReorderSheetArchive)
  return target;
}

size_t CommandDocumentReorderSheetArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandDocumentReorderSheetArchive)
  size_t total_size = 0;

  if (_internal_has_document()) {
    // required .TSP.Reference document = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.document_);
  }

  if (_internal_has_sheet()) {
    // required .TSP.Reference sheet = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_source_index()) {
    // required uint32 source_index = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_source_index());
  }

  if (_internal_has_dest_index()) {
    // required uint32 dest_index = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dest_index());
  }

  return total_size;
}
size_t CommandDocumentReorderSheetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandDocumentReorderSheetArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .TSP.Reference document = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.document_);

    // required .TSP.Reference sheet = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);

    // required .TSK.CommandArchive super = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required uint32 source_index = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_source_index());

    // required uint32 dest_index = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dest_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandDocumentReorderSheetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandDocumentReorderSheetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandDocumentReorderSheetArchive::GetClassData() const { return &_class_data_; }


void CommandDocumentReorderSheetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandDocumentReorderSheetArchive*>(&to_msg);
  auto& from = static_cast<const CommandDocumentReorderSheetArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandDocumentReorderSheetArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_document()->::TSP::Reference::MergeFrom(
          from._internal_document());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_sheet()->::TSP::Reference::MergeFrom(
          from._internal_sheet());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.source_index_ = from._impl_.source_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.dest_index_ = from._impl_.dest_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandDocumentReorderSheetArchive::CopyFrom(const CommandDocumentReorderSheetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandDocumentReorderSheetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDocumentReorderSheetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_document()) {
    if (!_impl_.document_->IsInitialized()) return false;
  }
  if (_internal_has_sheet()) {
    if (!_impl_.sheet_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandDocumentReorderSheetArchive::InternalSwap(CommandDocumentReorderSheetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandDocumentReorderSheetArchive, _impl_.dest_index_)
      + sizeof(CommandDocumentReorderSheetArchive::_impl_.dest_index_)
      - PROTOBUF_FIELD_OFFSET(CommandDocumentReorderSheetArchive, _impl_.document_)>(
          reinterpret_cast<char*>(&_impl_.document_),
          reinterpret_cast<char*>(&other->_impl_.document_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandDocumentReorderSheetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[8]);
}

// ===================================================================

class CommandSetSheetNameArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetSheetNameArchive>()._impl_._has_bits_);
  static void set_has_newname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_oldname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& sheet(const CommandSetSheetNameArchive* msg);
  static void set_has_sheet(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSK::CommandArchive& super(const CommandSetSheetNameArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSP::Reference&
CommandSetSheetNameArchive::_Internal::sheet(const CommandSetSheetNameArchive* msg) {
  return *msg->_impl_.sheet_;
}
const ::TSK::CommandArchive&
CommandSetSheetNameArchive::_Internal::super(const CommandSetSheetNameArchive* msg) {
  return *msg->_impl_.super_;
}
void CommandSetSheetNameArchive::clear_sheet() {
  if (_impl_.sheet_ != nullptr) _impl_.sheet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandSetSheetNameArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandSetSheetNameArchive::CommandSetSheetNameArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.CommandSetSheetNameArchive)
}
CommandSetSheetNameArchive::CommandSetSheetNameArchive(const CommandSetSheetNameArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetSheetNameArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.newname_){}
    , decltype(_impl_.oldname_){}
    , decltype(_impl_.sheet_){nullptr}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.newname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_newname()) {
    _this->_impl_.newname_.Set(from._internal_newname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.oldname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oldname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_oldname()) {
    _this->_impl_.oldname_.Set(from._internal_oldname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_sheet()) {
    _this->_impl_.sheet_ = new ::TSP::Reference(*from._impl_.sheet_);
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TN.CommandSetSheetNameArchive)
}

inline void CommandSetSheetNameArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.newname_){}
    , decltype(_impl_.oldname_){}
    , decltype(_impl_.sheet_){nullptr}
    , decltype(_impl_.super_){nullptr}
  };
  _impl_.newname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oldname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oldname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandSetSheetNameArchive::~CommandSetSheetNameArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandSetSheetNameArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetSheetNameArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.newname_.Destroy();
  _impl_.oldname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.sheet_;
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetSheetNameArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetSheetNameArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandSetSheetNameArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.newname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.oldname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.sheet_ != nullptr);
      _impl_.sheet_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetSheetNameArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string newname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_newname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TN.CommandSetSheetNameArchive.newname");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string oldname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_oldname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TN.CommandSetSheetNameArchive.oldname");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference sheet = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSK.CommandArchive super = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetSheetNameArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandSetSheetNameArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string newname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_newname().data(), static_cast<int>(this->_internal_newname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TN.CommandSetSheetNameArchive.newname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_newname(), target);
  }

  // required string oldname = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_oldname().data(), static_cast<int>(this->_internal_oldname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TN.CommandSetSheetNameArchive.oldname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_oldname(), target);
  }

  // required .TSP.Reference sheet = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::sheet(this),
        _Internal::sheet(this).GetCachedSize(), target, stream);
  }

  // required .TSK.CommandArchive super = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandSetSheetNameArchive)
  return target;
}

size_t CommandSetSheetNameArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandSetSheetNameArchive)
  size_t total_size = 0;

  if (_internal_has_newname()) {
    // required string newname = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newname());
  }

  if (_internal_has_oldname()) {
    // required string oldname = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_oldname());
  }

  if (_internal_has_sheet()) {
    // required .TSP.Reference sheet = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  return total_size;
}
size_t CommandSetSheetNameArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandSetSheetNameArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string newname = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newname());

    // required string oldname = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_oldname());

    // required .TSP.Reference sheet = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);

    // required .TSK.CommandArchive super = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetSheetNameArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetSheetNameArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetSheetNameArchive::GetClassData() const { return &_class_data_; }


void CommandSetSheetNameArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetSheetNameArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetSheetNameArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandSetSheetNameArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_newname(from._internal_newname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_oldname(from._internal_oldname());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_sheet()->::TSP::Reference::MergeFrom(
          from._internal_sheet());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetSheetNameArchive::CopyFrom(const CommandSetSheetNameArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandSetSheetNameArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetSheetNameArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_sheet()) {
    if (!_impl_.sheet_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetSheetNameArchive::InternalSwap(CommandSetSheetNameArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.newname_, lhs_arena,
      &other->_impl_.newname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.oldname_, lhs_arena,
      &other->_impl_.oldname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetSheetNameArchive, _impl_.super_)
      + sizeof(CommandSetSheetNameArchive::_impl_.super_)
      - PROTOBUF_FIELD_OFFSET(CommandSetSheetNameArchive, _impl_.sheet_)>(
          reinterpret_cast<char*>(&_impl_.sheet_),
          reinterpret_cast<char*>(&other->_impl_.sheet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetSheetNameArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[9]);
}

// ===================================================================

class CommandSetPageOrientationArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetPageOrientationArchive>()._impl_._has_bits_);
  static void set_has_in_portrait_page_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& sheet(const CommandSetPageOrientationArchive* msg);
  static void set_has_sheet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSK::CommandArchive& super(const CommandSetPageOrientationArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSP::Reference&
CommandSetPageOrientationArchive::_Internal::sheet(const CommandSetPageOrientationArchive* msg) {
  return *msg->_impl_.sheet_;
}
const ::TSK::CommandArchive&
CommandSetPageOrientationArchive::_Internal::super(const CommandSetPageOrientationArchive* msg) {
  return *msg->_impl_.super_;
}
void CommandSetPageOrientationArchive::clear_sheet() {
  if (_impl_.sheet_ != nullptr) _impl_.sheet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSetPageOrientationArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandSetPageOrientationArchive::CommandSetPageOrientationArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.CommandSetPageOrientationArchive)
}
CommandSetPageOrientationArchive::CommandSetPageOrientationArchive(const CommandSetPageOrientationArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetPageOrientationArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sheet_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.in_portrait_page_orientation_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sheet()) {
    _this->_impl_.sheet_ = new ::TSP::Reference(*from._impl_.sheet_);
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  _this->_impl_.in_portrait_page_orientation_ = from._impl_.in_portrait_page_orientation_;
  // @@protoc_insertion_point(copy_constructor:TN.CommandSetPageOrientationArchive)
}

inline void CommandSetPageOrientationArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sheet_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.in_portrait_page_orientation_){false}
  };
}

CommandSetPageOrientationArchive::~CommandSetPageOrientationArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandSetPageOrientationArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetPageOrientationArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.sheet_;
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetPageOrientationArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetPageOrientationArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandSetPageOrientationArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.sheet_ != nullptr);
      _impl_.sheet_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_.in_portrait_page_orientation_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetPageOrientationArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool in_portrait_page_orientation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_in_portrait_page_orientation(&has_bits);
          _impl_.in_portrait_page_orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference sheet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSK.CommandArchive super = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetPageOrientationArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandSetPageOrientationArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool in_portrait_page_orientation = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_in_portrait_page_orientation(), target);
  }

  // required .TSP.Reference sheet = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sheet(this),
        _Internal::sheet(this).GetCachedSize(), target, stream);
  }

  // required .TSK.CommandArchive super = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandSetPageOrientationArchive)
  return target;
}

size_t CommandSetPageOrientationArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandSetPageOrientationArchive)
  size_t total_size = 0;

  if (_internal_has_sheet()) {
    // required .TSP.Reference sheet = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_in_portrait_page_orientation()) {
    // required bool in_portrait_page_orientation = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetPageOrientationArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandSetPageOrientationArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSP.Reference sheet = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);

    // required .TSK.CommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required bool in_portrait_page_orientation = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetPageOrientationArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetPageOrientationArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetPageOrientationArchive::GetClassData() const { return &_class_data_; }


void CommandSetPageOrientationArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetPageOrientationArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetPageOrientationArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandSetPageOrientationArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_sheet()->::TSP::Reference::MergeFrom(
          from._internal_sheet());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.in_portrait_page_orientation_ = from._impl_.in_portrait_page_orientation_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetPageOrientationArchive::CopyFrom(const CommandSetPageOrientationArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandSetPageOrientationArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetPageOrientationArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_sheet()) {
    if (!_impl_.sheet_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetPageOrientationArchive::InternalSwap(CommandSetPageOrientationArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetPageOrientationArchive, _impl_.in_portrait_page_orientation_)
      + sizeof(CommandSetPageOrientationArchive::_impl_.in_portrait_page_orientation_)
      - PROTOBUF_FIELD_OFFSET(CommandSetPageOrientationArchive, _impl_.sheet_)>(
          reinterpret_cast<char*>(&_impl_.sheet_),
          reinterpret_cast<char*>(&other->_impl_.sheet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetPageOrientationArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[10]);
}

// ===================================================================

class CommandSetShowPageNumbersValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetShowPageNumbersValueArchive>()._impl_._has_bits_);
  static void set_has_show_page_numbers(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& sheet(const CommandSetShowPageNumbersValueArchive* msg);
  static void set_has_sheet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSK::CommandArchive& super(const CommandSetShowPageNumbersValueArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSP::Reference&
CommandSetShowPageNumbersValueArchive::_Internal::sheet(const CommandSetShowPageNumbersValueArchive* msg) {
  return *msg->_impl_.sheet_;
}
const ::TSK::CommandArchive&
CommandSetShowPageNumbersValueArchive::_Internal::super(const CommandSetShowPageNumbersValueArchive* msg) {
  return *msg->_impl_.super_;
}
void CommandSetShowPageNumbersValueArchive::clear_sheet() {
  if (_impl_.sheet_ != nullptr) _impl_.sheet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSetShowPageNumbersValueArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandSetShowPageNumbersValueArchive::CommandSetShowPageNumbersValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.CommandSetShowPageNumbersValueArchive)
}
CommandSetShowPageNumbersValueArchive::CommandSetShowPageNumbersValueArchive(const CommandSetShowPageNumbersValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetShowPageNumbersValueArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sheet_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_page_numbers_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sheet()) {
    _this->_impl_.sheet_ = new ::TSP::Reference(*from._impl_.sheet_);
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  _this->_impl_.show_page_numbers_ = from._impl_.show_page_numbers_;
  // @@protoc_insertion_point(copy_constructor:TN.CommandSetShowPageNumbersValueArchive)
}

inline void CommandSetShowPageNumbersValueArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sheet_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_page_numbers_){false}
  };
}

CommandSetShowPageNumbersValueArchive::~CommandSetShowPageNumbersValueArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandSetShowPageNumbersValueArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetShowPageNumbersValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.sheet_;
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetShowPageNumbersValueArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetShowPageNumbersValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandSetShowPageNumbersValueArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.sheet_ != nullptr);
      _impl_.sheet_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_.show_page_numbers_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetShowPageNumbersValueArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool show_page_numbers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_show_page_numbers(&has_bits);
          _impl_.show_page_numbers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference sheet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSK.CommandArchive super = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetShowPageNumbersValueArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandSetShowPageNumbersValueArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool show_page_numbers = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_show_page_numbers(), target);
  }

  // required .TSP.Reference sheet = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sheet(this),
        _Internal::sheet(this).GetCachedSize(), target, stream);
  }

  // required .TSK.CommandArchive super = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandSetShowPageNumbersValueArchive)
  return target;
}

size_t CommandSetShowPageNumbersValueArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandSetShowPageNumbersValueArchive)
  size_t total_size = 0;

  if (_internal_has_sheet()) {
    // required .TSP.Reference sheet = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_show_page_numbers()) {
    // required bool show_page_numbers = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetShowPageNumbersValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandSetShowPageNumbersValueArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSP.Reference sheet = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);

    // required .TSK.CommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required bool show_page_numbers = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetShowPageNumbersValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetShowPageNumbersValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetShowPageNumbersValueArchive::GetClassData() const { return &_class_data_; }


void CommandSetShowPageNumbersValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetShowPageNumbersValueArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetShowPageNumbersValueArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandSetShowPageNumbersValueArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_sheet()->::TSP::Reference::MergeFrom(
          from._internal_sheet());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.show_page_numbers_ = from._impl_.show_page_numbers_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetShowPageNumbersValueArchive::CopyFrom(const CommandSetShowPageNumbersValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandSetShowPageNumbersValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetShowPageNumbersValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_sheet()) {
    if (!_impl_.sheet_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetShowPageNumbersValueArchive::InternalSwap(CommandSetShowPageNumbersValueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetShowPageNumbersValueArchive, _impl_.show_page_numbers_)
      + sizeof(CommandSetShowPageNumbersValueArchive::_impl_.show_page_numbers_)
      - PROTOBUF_FIELD_OFFSET(CommandSetShowPageNumbersValueArchive, _impl_.sheet_)>(
          reinterpret_cast<char*>(&_impl_.sheet_),
          reinterpret_cast<char*>(&other->_impl_.sheet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetShowPageNumbersValueArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[11]);
}

// ===================================================================

class CommandSetRepeatingHeadersValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetRepeatingHeadersValueArchive>()._impl_._has_bits_);
  static void set_has_show_repeating_headers(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& sheet(const CommandSetRepeatingHeadersValueArchive* msg);
  static void set_has_sheet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSK::CommandArchive& super(const CommandSetRepeatingHeadersValueArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSP::Reference&
CommandSetRepeatingHeadersValueArchive::_Internal::sheet(const CommandSetRepeatingHeadersValueArchive* msg) {
  return *msg->_impl_.sheet_;
}
const ::TSK::CommandArchive&
CommandSetRepeatingHeadersValueArchive::_Internal::super(const CommandSetRepeatingHeadersValueArchive* msg) {
  return *msg->_impl_.super_;
}
void CommandSetRepeatingHeadersValueArchive::clear_sheet() {
  if (_impl_.sheet_ != nullptr) _impl_.sheet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSetRepeatingHeadersValueArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandSetRepeatingHeadersValueArchive::CommandSetRepeatingHeadersValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.CommandSetRepeatingHeadersValueArchive)
}
CommandSetRepeatingHeadersValueArchive::CommandSetRepeatingHeadersValueArchive(const CommandSetRepeatingHeadersValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetRepeatingHeadersValueArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sheet_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_repeating_headers_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sheet()) {
    _this->_impl_.sheet_ = new ::TSP::Reference(*from._impl_.sheet_);
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  _this->_impl_.show_repeating_headers_ = from._impl_.show_repeating_headers_;
  // @@protoc_insertion_point(copy_constructor:TN.CommandSetRepeatingHeadersValueArchive)
}

inline void CommandSetRepeatingHeadersValueArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sheet_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_repeating_headers_){false}
  };
}

CommandSetRepeatingHeadersValueArchive::~CommandSetRepeatingHeadersValueArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandSetRepeatingHeadersValueArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetRepeatingHeadersValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.sheet_;
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetRepeatingHeadersValueArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetRepeatingHeadersValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandSetRepeatingHeadersValueArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.sheet_ != nullptr);
      _impl_.sheet_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_.show_repeating_headers_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetRepeatingHeadersValueArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool show_repeating_headers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_show_repeating_headers(&has_bits);
          _impl_.show_repeating_headers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference sheet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSK.CommandArchive super = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetRepeatingHeadersValueArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandSetRepeatingHeadersValueArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool show_repeating_headers = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_show_repeating_headers(), target);
  }

  // required .TSP.Reference sheet = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sheet(this),
        _Internal::sheet(this).GetCachedSize(), target, stream);
  }

  // required .TSK.CommandArchive super = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandSetRepeatingHeadersValueArchive)
  return target;
}

size_t CommandSetRepeatingHeadersValueArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandSetRepeatingHeadersValueArchive)
  size_t total_size = 0;

  if (_internal_has_sheet()) {
    // required .TSP.Reference sheet = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_show_repeating_headers()) {
    // required bool show_repeating_headers = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetRepeatingHeadersValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandSetRepeatingHeadersValueArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSP.Reference sheet = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);

    // required .TSK.CommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required bool show_repeating_headers = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetRepeatingHeadersValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetRepeatingHeadersValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetRepeatingHeadersValueArchive::GetClassData() const { return &_class_data_; }


void CommandSetRepeatingHeadersValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetRepeatingHeadersValueArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetRepeatingHeadersValueArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandSetRepeatingHeadersValueArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_sheet()->::TSP::Reference::MergeFrom(
          from._internal_sheet());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.show_repeating_headers_ = from._impl_.show_repeating_headers_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetRepeatingHeadersValueArchive::CopyFrom(const CommandSetRepeatingHeadersValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandSetRepeatingHeadersValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetRepeatingHeadersValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_sheet()) {
    if (!_impl_.sheet_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetRepeatingHeadersValueArchive::InternalSwap(CommandSetRepeatingHeadersValueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetRepeatingHeadersValueArchive, _impl_.show_repeating_headers_)
      + sizeof(CommandSetRepeatingHeadersValueArchive::_impl_.show_repeating_headers_)
      - PROTOBUF_FIELD_OFFSET(CommandSetRepeatingHeadersValueArchive, _impl_.sheet_)>(
          reinterpret_cast<char*>(&_impl_.sheet_),
          reinterpret_cast<char*>(&other->_impl_.sheet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetRepeatingHeadersValueArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[12]);
}

// ===================================================================

class CommandSetContentScaleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetContentScaleArchive>()._impl_._has_bits_);
  static void set_has_is_autofit_on(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_old_content_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_new_content_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& sheet(const CommandSetContentScaleArchive* msg);
  static void set_has_sheet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSK::CommandArchive& super(const CommandSetContentScaleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSP::Reference&
CommandSetContentScaleArchive::_Internal::sheet(const CommandSetContentScaleArchive* msg) {
  return *msg->_impl_.sheet_;
}
const ::TSK::CommandArchive&
CommandSetContentScaleArchive::_Internal::super(const CommandSetContentScaleArchive* msg) {
  return *msg->_impl_.super_;
}
void CommandSetContentScaleArchive::clear_sheet() {
  if (_impl_.sheet_ != nullptr) _impl_.sheet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSetContentScaleArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandSetContentScaleArchive::CommandSetContentScaleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.CommandSetContentScaleArchive)
}
CommandSetContentScaleArchive::CommandSetContentScaleArchive(const CommandSetContentScaleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetContentScaleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sheet_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.is_autofit_on_){}
    , decltype(_impl_.old_content_scale_){}
    , decltype(_impl_.new_content_scale_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sheet()) {
    _this->_impl_.sheet_ = new ::TSP::Reference(*from._impl_.sheet_);
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.is_autofit_on_, &from._impl_.is_autofit_on_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.new_content_scale_) -
    reinterpret_cast<char*>(&_impl_.is_autofit_on_)) + sizeof(_impl_.new_content_scale_));
  // @@protoc_insertion_point(copy_constructor:TN.CommandSetContentScaleArchive)
}

inline void CommandSetContentScaleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sheet_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.is_autofit_on_){false}
    , decltype(_impl_.old_content_scale_){0}
    , decltype(_impl_.new_content_scale_){0}
  };
}

CommandSetContentScaleArchive::~CommandSetContentScaleArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandSetContentScaleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetContentScaleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.sheet_;
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetContentScaleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetContentScaleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandSetContentScaleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.sheet_ != nullptr);
      _impl_.sheet_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.is_autofit_on_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.new_content_scale_) -
        reinterpret_cast<char*>(&_impl_.is_autofit_on_)) + sizeof(_impl_.new_content_scale_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetContentScaleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool is_autofit_on = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_autofit_on(&has_bits);
          _impl_.is_autofit_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float old_content_scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_old_content_scale(&has_bits);
          _impl_.old_content_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float new_content_scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_new_content_scale(&has_bits);
          _impl_.new_content_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference sheet = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSK.CommandArchive super = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetContentScaleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandSetContentScaleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool is_autofit_on = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_autofit_on(), target);
  }

  // required float old_content_scale = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_old_content_scale(), target);
  }

  // optional float new_content_scale = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_new_content_scale(), target);
  }

  // required .TSP.Reference sheet = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::sheet(this),
        _Internal::sheet(this).GetCachedSize(), target, stream);
  }

  // required .TSK.CommandArchive super = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandSetContentScaleArchive)
  return target;
}

size_t CommandSetContentScaleArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandSetContentScaleArchive)
  size_t total_size = 0;

  if (_internal_has_sheet()) {
    // required .TSP.Reference sheet = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_is_autofit_on()) {
    // required bool is_autofit_on = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_old_content_scale()) {
    // required float old_content_scale = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t CommandSetContentScaleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandSetContentScaleArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSP.Reference sheet = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);

    // required .TSK.CommandArchive super = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required bool is_autofit_on = 1;
    total_size += 1 + 1;

    // required float old_content_scale = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float new_content_scale = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetContentScaleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetContentScaleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetContentScaleArchive::GetClassData() const { return &_class_data_; }


void CommandSetContentScaleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetContentScaleArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetContentScaleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandSetContentScaleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_sheet()->::TSP::Reference::MergeFrom(
          from._internal_sheet());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_autofit_on_ = from._impl_.is_autofit_on_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.old_content_scale_ = from._impl_.old_content_scale_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.new_content_scale_ = from._impl_.new_content_scale_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetContentScaleArchive::CopyFrom(const CommandSetContentScaleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandSetContentScaleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetContentScaleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_sheet()) {
    if (!_impl_.sheet_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetContentScaleArchive::InternalSwap(CommandSetContentScaleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetContentScaleArchive, _impl_.new_content_scale_)
      + sizeof(CommandSetContentScaleArchive::_impl_.new_content_scale_)
      - PROTOBUF_FIELD_OFFSET(CommandSetContentScaleArchive, _impl_.sheet_)>(
          reinterpret_cast<char*>(&_impl_.sheet_),
          reinterpret_cast<char*>(&other->_impl_.sheet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetContentScaleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[13]);
}

// ===================================================================

class CommandSetAutofitValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetAutofitValueArchive>()._impl_._has_bits_);
  static void set_has_old_content_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& sheet(const CommandSetAutofitValueArchive* msg);
  static void set_has_sheet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSK::CommandArchive& super(const CommandSetAutofitValueArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSP::Reference&
CommandSetAutofitValueArchive::_Internal::sheet(const CommandSetAutofitValueArchive* msg) {
  return *msg->_impl_.sheet_;
}
const ::TSK::CommandArchive&
CommandSetAutofitValueArchive::_Internal::super(const CommandSetAutofitValueArchive* msg) {
  return *msg->_impl_.super_;
}
void CommandSetAutofitValueArchive::clear_sheet() {
  if (_impl_.sheet_ != nullptr) _impl_.sheet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandSetAutofitValueArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandSetAutofitValueArchive::CommandSetAutofitValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.CommandSetAutofitValueArchive)
}
CommandSetAutofitValueArchive::CommandSetAutofitValueArchive(const CommandSetAutofitValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetAutofitValueArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sheet_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_content_scale_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sheet()) {
    _this->_impl_.sheet_ = new ::TSP::Reference(*from._impl_.sheet_);
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  _this->_impl_.old_content_scale_ = from._impl_.old_content_scale_;
  // @@protoc_insertion_point(copy_constructor:TN.CommandSetAutofitValueArchive)
}

inline void CommandSetAutofitValueArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sheet_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_content_scale_){0}
  };
}

CommandSetAutofitValueArchive::~CommandSetAutofitValueArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandSetAutofitValueArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetAutofitValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.sheet_;
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetAutofitValueArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetAutofitValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandSetAutofitValueArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.sheet_ != nullptr);
      _impl_.sheet_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_.old_content_scale_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetAutofitValueArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float old_content_scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_old_content_scale(&has_bits);
          _impl_.old_content_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference sheet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSK.CommandArchive super = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetAutofitValueArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandSetAutofitValueArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float old_content_scale = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_old_content_scale(), target);
  }

  // required .TSP.Reference sheet = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sheet(this),
        _Internal::sheet(this).GetCachedSize(), target, stream);
  }

  // required .TSK.CommandArchive super = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandSetAutofitValueArchive)
  return target;
}

size_t CommandSetAutofitValueArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandSetAutofitValueArchive)
  size_t total_size = 0;

  if (_internal_has_sheet()) {
    // required .TSP.Reference sheet = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_old_content_scale()) {
    // required float old_content_scale = 1;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t CommandSetAutofitValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandSetAutofitValueArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSP.Reference sheet = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);

    // required .TSK.CommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required float old_content_scale = 1;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetAutofitValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetAutofitValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetAutofitValueArchive::GetClassData() const { return &_class_data_; }


void CommandSetAutofitValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetAutofitValueArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetAutofitValueArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandSetAutofitValueArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_sheet()->::TSP::Reference::MergeFrom(
          from._internal_sheet());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.old_content_scale_ = from._impl_.old_content_scale_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetAutofitValueArchive::CopyFrom(const CommandSetAutofitValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandSetAutofitValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetAutofitValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_sheet()) {
    if (!_impl_.sheet_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetAutofitValueArchive::InternalSwap(CommandSetAutofitValueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetAutofitValueArchive, _impl_.old_content_scale_)
      + sizeof(CommandSetAutofitValueArchive::_impl_.old_content_scale_)
      - PROTOBUF_FIELD_OFFSET(CommandSetAutofitValueArchive, _impl_.sheet_)>(
          reinterpret_cast<char*>(&_impl_.sheet_),
          reinterpret_cast<char*>(&other->_impl_.sheet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetAutofitValueArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[14]);
}

// ===================================================================

class CommandSetDocumentPrinterOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetDocumentPrinterOptions>()._impl_._has_bits_);
  static void set_has_printer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_paper_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Size& page_size(const CommandSetDocumentPrinterOptions* msg);
  static void set_has_page_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSK::CommandArchive& super(const CommandSetDocumentPrinterOptions* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSP::Size&
CommandSetDocumentPrinterOptions::_Internal::page_size(const CommandSetDocumentPrinterOptions* msg) {
  return *msg->_impl_.page_size_;
}
const ::TSK::CommandArchive&
CommandSetDocumentPrinterOptions::_Internal::super(const CommandSetDocumentPrinterOptions* msg) {
  return *msg->_impl_.super_;
}
void CommandSetDocumentPrinterOptions::clear_page_size() {
  if (_impl_.page_size_ != nullptr) _impl_.page_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandSetDocumentPrinterOptions::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandSetDocumentPrinterOptions::CommandSetDocumentPrinterOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.CommandSetDocumentPrinterOptions)
}
CommandSetDocumentPrinterOptions::CommandSetDocumentPrinterOptions(const CommandSetDocumentPrinterOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetDocumentPrinterOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.printer_id_){}
    , decltype(_impl_.paper_id_){}
    , decltype(_impl_.page_size_){nullptr}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.printer_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.printer_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_printer_id()) {
    _this->_impl_.printer_id_.Set(from._internal_printer_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.paper_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paper_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_paper_id()) {
    _this->_impl_.paper_id_.Set(from._internal_paper_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_page_size()) {
    _this->_impl_.page_size_ = new ::TSP::Size(*from._impl_.page_size_);
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TN.CommandSetDocumentPrinterOptions)
}

inline void CommandSetDocumentPrinterOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.printer_id_){}
    , decltype(_impl_.paper_id_){}
    , decltype(_impl_.page_size_){nullptr}
    , decltype(_impl_.super_){nullptr}
  };
  _impl_.printer_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.printer_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.paper_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paper_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandSetDocumentPrinterOptions::~CommandSetDocumentPrinterOptions() {
  // @@protoc_insertion_point(destructor:TN.CommandSetDocumentPrinterOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetDocumentPrinterOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.printer_id_.Destroy();
  _impl_.paper_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.page_size_;
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetDocumentPrinterOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetDocumentPrinterOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandSetDocumentPrinterOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.printer_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.paper_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.page_size_ != nullptr);
      _impl_.page_size_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetDocumentPrinterOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string printer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_printer_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TN.CommandSetDocumentPrinterOptions.printer_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string paper_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_paper_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TN.CommandSetDocumentPrinterOptions.paper_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Size page_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_page_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSK.CommandArchive super = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetDocumentPrinterOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandSetDocumentPrinterOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string printer_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_printer_id().data(), static_cast<int>(this->_internal_printer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TN.CommandSetDocumentPrinterOptions.printer_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_printer_id(), target);
  }

  // required string paper_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_paper_id().data(), static_cast<int>(this->_internal_paper_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TN.CommandSetDocumentPrinterOptions.paper_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_paper_id(), target);
  }

  // required .TSP.Size page_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::page_size(this),
        _Internal::page_size(this).GetCachedSize(), target, stream);
  }

  // required .TSK.CommandArchive super = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandSetDocumentPrinterOptions)
  return target;
}

size_t CommandSetDocumentPrinterOptions::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandSetDocumentPrinterOptions)
  size_t total_size = 0;

  if (_internal_has_printer_id()) {
    // required string printer_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_printer_id());
  }

  if (_internal_has_paper_id()) {
    // required string paper_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_paper_id());
  }

  if (_internal_has_page_size()) {
    // required .TSP.Size page_size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.page_size_);
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  return total_size;
}
size_t CommandSetDocumentPrinterOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandSetDocumentPrinterOptions)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string printer_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_printer_id());

    // required string paper_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_paper_id());

    // required .TSP.Size page_size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.page_size_);

    // required .TSK.CommandArchive super = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetDocumentPrinterOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetDocumentPrinterOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetDocumentPrinterOptions::GetClassData() const { return &_class_data_; }


void CommandSetDocumentPrinterOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetDocumentPrinterOptions*>(&to_msg);
  auto& from = static_cast<const CommandSetDocumentPrinterOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandSetDocumentPrinterOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_printer_id(from._internal_printer_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_paper_id(from._internal_paper_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_page_size()->::TSP::Size::MergeFrom(
          from._internal_page_size());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetDocumentPrinterOptions::CopyFrom(const CommandSetDocumentPrinterOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandSetDocumentPrinterOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetDocumentPrinterOptions::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_page_size()) {
    if (!_impl_.page_size_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetDocumentPrinterOptions::InternalSwap(CommandSetDocumentPrinterOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.printer_id_, lhs_arena,
      &other->_impl_.printer_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.paper_id_, lhs_arena,
      &other->_impl_.paper_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetDocumentPrinterOptions, _impl_.super_)
      + sizeof(CommandSetDocumentPrinterOptions::_impl_.super_)
      - PROTOBUF_FIELD_OFFSET(CommandSetDocumentPrinterOptions, _impl_.page_size_)>(
          reinterpret_cast<char*>(&_impl_.page_size_),
          reinterpret_cast<char*>(&other->_impl_.page_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetDocumentPrinterOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[15]);
}

// ===================================================================

class CommandEnterPrintPreviewModeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandEnterPrintPreviewModeArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandEnterPrintPreviewModeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandEnterPrintPreviewModeArchive::_Internal::super(const CommandEnterPrintPreviewModeArchive* msg) {
  return *msg->_impl_.super_;
}
void CommandEnterPrintPreviewModeArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CommandEnterPrintPreviewModeArchive::CommandEnterPrintPreviewModeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.CommandEnterPrintPreviewModeArchive)
}
CommandEnterPrintPreviewModeArchive::CommandEnterPrintPreviewModeArchive(const CommandEnterPrintPreviewModeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandEnterPrintPreviewModeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TN.CommandEnterPrintPreviewModeArchive)
}

inline void CommandEnterPrintPreviewModeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

CommandEnterPrintPreviewModeArchive::~CommandEnterPrintPreviewModeArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandEnterPrintPreviewModeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandEnterPrintPreviewModeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandEnterPrintPreviewModeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandEnterPrintPreviewModeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandEnterPrintPreviewModeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandEnterPrintPreviewModeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandEnterPrintPreviewModeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandEnterPrintPreviewModeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandEnterPrintPreviewModeArchive)
  return target;
}

size_t CommandEnterPrintPreviewModeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandEnterPrintPreviewModeArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandEnterPrintPreviewModeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandEnterPrintPreviewModeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandEnterPrintPreviewModeArchive::GetClassData() const { return &_class_data_; }


void CommandEnterPrintPreviewModeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandEnterPrintPreviewModeArchive*>(&to_msg);
  auto& from = static_cast<const CommandEnterPrintPreviewModeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandEnterPrintPreviewModeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandEnterPrintPreviewModeArchive::CopyFrom(const CommandEnterPrintPreviewModeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandEnterPrintPreviewModeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandEnterPrintPreviewModeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandEnterPrintPreviewModeArchive::InternalSwap(CommandEnterPrintPreviewModeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandEnterPrintPreviewModeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[16]);
}

// ===================================================================

class CommandExitPrintPreviewModeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandExitPrintPreviewModeArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandExitPrintPreviewModeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandExitPrintPreviewModeArchive::_Internal::super(const CommandExitPrintPreviewModeArchive* msg) {
  return *msg->_impl_.super_;
}
void CommandExitPrintPreviewModeArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CommandExitPrintPreviewModeArchive::CommandExitPrintPreviewModeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.CommandExitPrintPreviewModeArchive)
}
CommandExitPrintPreviewModeArchive::CommandExitPrintPreviewModeArchive(const CommandExitPrintPreviewModeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandExitPrintPreviewModeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TN.CommandExitPrintPreviewModeArchive)
}

inline void CommandExitPrintPreviewModeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

CommandExitPrintPreviewModeArchive::~CommandExitPrintPreviewModeArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandExitPrintPreviewModeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandExitPrintPreviewModeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandExitPrintPreviewModeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandExitPrintPreviewModeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandExitPrintPreviewModeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandExitPrintPreviewModeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandExitPrintPreviewModeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandExitPrintPreviewModeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandExitPrintPreviewModeArchive)
  return target;
}

size_t CommandExitPrintPreviewModeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandExitPrintPreviewModeArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandExitPrintPreviewModeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandExitPrintPreviewModeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandExitPrintPreviewModeArchive::GetClassData() const { return &_class_data_; }


void CommandExitPrintPreviewModeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandExitPrintPreviewModeArchive*>(&to_msg);
  auto& from = static_cast<const CommandExitPrintPreviewModeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandExitPrintPreviewModeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandExitPrintPreviewModeArchive::CopyFrom(const CommandExitPrintPreviewModeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandExitPrintPreviewModeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandExitPrintPreviewModeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandExitPrintPreviewModeArchive::InternalSwap(CommandExitPrintPreviewModeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandExitPrintPreviewModeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[17]);
}

// ===================================================================

class CommandPasteDrawablesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandPasteDrawablesArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandPasteDrawablesArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& sheet(const CommandPasteDrawablesArchive* msg);
  static void set_has_sheet(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandPasteDrawablesArchive::_Internal::super(const CommandPasteDrawablesArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandPasteDrawablesArchive::_Internal::sheet(const CommandPasteDrawablesArchive* msg) {
  return *msg->_impl_.sheet_;
}
void CommandPasteDrawablesArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandPasteDrawablesArchive::clear_sheet() {
  if (_impl_.sheet_ != nullptr) _impl_.sheet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandPasteDrawablesArchive::clear_drawables() {
  _impl_.drawables_.Clear();
}
CommandPasteDrawablesArchive::CommandPasteDrawablesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.CommandPasteDrawablesArchive)
}
CommandPasteDrawablesArchive::CommandPasteDrawablesArchive(const CommandPasteDrawablesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandPasteDrawablesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawables_){from._impl_.drawables_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.sheet_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_sheet()) {
    _this->_impl_.sheet_ = new ::TSP::Reference(*from._impl_.sheet_);
  }
  // @@protoc_insertion_point(copy_constructor:TN.CommandPasteDrawablesArchive)
}

inline void CommandPasteDrawablesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawables_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.sheet_){nullptr}
  };
}

CommandPasteDrawablesArchive::~CommandPasteDrawablesArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandPasteDrawablesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandPasteDrawablesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.drawables_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.sheet_;
}

void CommandPasteDrawablesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandPasteDrawablesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandPasteDrawablesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.drawables_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.sheet_ != nullptr);
      _impl_.sheet_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandPasteDrawablesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference sheet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference drawables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandPasteDrawablesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandPasteDrawablesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference sheet = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sheet(this),
        _Internal::sheet(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference drawables = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_drawables_size()); i < n; i++) {
    const auto& repfield = this->_internal_drawables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandPasteDrawablesArchive)
  return target;
}

size_t CommandPasteDrawablesArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandPasteDrawablesArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_sheet()) {
    // required .TSP.Reference sheet = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);
  }

  return total_size;
}
size_t CommandPasteDrawablesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandPasteDrawablesArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference sheet = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference drawables = 3;
  total_size += 1UL * this->_internal_drawables_size();
  for (const auto& msg : this->_impl_.drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandPasteDrawablesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandPasteDrawablesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandPasteDrawablesArchive::GetClassData() const { return &_class_data_; }


void CommandPasteDrawablesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandPasteDrawablesArchive*>(&to_msg);
  auto& from = static_cast<const CommandPasteDrawablesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandPasteDrawablesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.drawables_.MergeFrom(from._impl_.drawables_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_sheet()->::TSP::Reference::MergeFrom(
          from._internal_sheet());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandPasteDrawablesArchive::CopyFrom(const CommandPasteDrawablesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandPasteDrawablesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPasteDrawablesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.drawables_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_sheet()) {
    if (!_impl_.sheet_->IsInitialized()) return false;
  }
  return true;
}

void CommandPasteDrawablesArchive::InternalSwap(CommandPasteDrawablesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.drawables_.InternalSwap(&other->_impl_.drawables_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandPasteDrawablesArchive, _impl_.sheet_)
      + sizeof(CommandPasteDrawablesArchive::_impl_.sheet_)
      - PROTOBUF_FIELD_OFFSET(CommandPasteDrawablesArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandPasteDrawablesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[18]);
}

// ===================================================================

class CommandPasteSheetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandPasteSheetArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandPasteSheetArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& document(const CommandPasteSheetArchive* msg);
  static void set_has_document(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& sheet(const CommandPasteSheetArchive* msg);
  static void set_has_sheet(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TN::SheetUIStateArchive& sheet_uistate(const CommandPasteSheetArchive* msg);
  static void set_has_sheet_uistate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sheetindex(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000017) ^ 0x00000017) != 0;
  }
};

const ::TSK::CommandArchive&
CommandPasteSheetArchive::_Internal::super(const CommandPasteSheetArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandPasteSheetArchive::_Internal::document(const CommandPasteSheetArchive* msg) {
  return *msg->_impl_.document_;
}
const ::TSP::Reference&
CommandPasteSheetArchive::_Internal::sheet(const CommandPasteSheetArchive* msg) {
  return *msg->_impl_.sheet_;
}
const ::TN::SheetUIStateArchive&
CommandPasteSheetArchive::_Internal::sheet_uistate(const CommandPasteSheetArchive* msg) {
  return *msg->_impl_.sheet_uistate_;
}
void CommandPasteSheetArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandPasteSheetArchive::clear_document() {
  if (_impl_.document_ != nullptr) _impl_.document_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandPasteSheetArchive::clear_sheet() {
  if (_impl_.sheet_ != nullptr) _impl_.sheet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandPasteSheetArchive::clear_sheet_uistate() {
  if (_impl_.sheet_uistate_ != nullptr) _impl_.sheet_uistate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandPasteSheetArchive::CommandPasteSheetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.CommandPasteSheetArchive)
}
CommandPasteSheetArchive::CommandPasteSheetArchive(const CommandPasteSheetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandPasteSheetArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.document_){nullptr}
    , decltype(_impl_.sheet_){nullptr}
    , decltype(_impl_.sheet_uistate_){nullptr}
    , decltype(_impl_.sheetindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_document()) {
    _this->_impl_.document_ = new ::TSP::Reference(*from._impl_.document_);
  }
  if (from._internal_has_sheet()) {
    _this->_impl_.sheet_ = new ::TSP::Reference(*from._impl_.sheet_);
  }
  if (from._internal_has_sheet_uistate()) {
    _this->_impl_.sheet_uistate_ = new ::TN::SheetUIStateArchive(*from._impl_.sheet_uistate_);
  }
  _this->_impl_.sheetindex_ = from._impl_.sheetindex_;
  // @@protoc_insertion_point(copy_constructor:TN.CommandPasteSheetArchive)
}

inline void CommandPasteSheetArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.document_){nullptr}
    , decltype(_impl_.sheet_){nullptr}
    , decltype(_impl_.sheet_uistate_){nullptr}
    , decltype(_impl_.sheetindex_){0u}
  };
}

CommandPasteSheetArchive::~CommandPasteSheetArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandPasteSheetArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandPasteSheetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.document_;
  if (this != internal_default_instance()) delete _impl_.sheet_;
  if (this != internal_default_instance()) delete _impl_.sheet_uistate_;
}

void CommandPasteSheetArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandPasteSheetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandPasteSheetArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.document_ != nullptr);
      _impl_.document_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.sheet_ != nullptr);
      _impl_.sheet_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.sheet_uistate_ != nullptr);
      _impl_.sheet_uistate_->Clear();
    }
  }
  _impl_.sheetindex_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandPasteSheetArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference document = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference sheet = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TN.SheetUIStateArchive sheet_uistate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet_uistate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 sheetIndex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_sheetindex(&has_bits);
          _impl_.sheetindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandPasteSheetArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandPasteSheetArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference document = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::document(this),
        _Internal::document(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference sheet = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::sheet(this),
        _Internal::sheet(this).GetCachedSize(), target, stream);
  }

  // optional .TN.SheetUIStateArchive sheet_uistate = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::sheet_uistate(this),
        _Internal::sheet_uistate(this).GetCachedSize(), target, stream);
  }

  // required uint32 sheetIndex = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sheetindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandPasteSheetArchive)
  return target;
}

size_t CommandPasteSheetArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandPasteSheetArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_document()) {
    // required .TSP.Reference document = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.document_);
  }

  if (_internal_has_sheet()) {
    // required .TSP.Reference sheet = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);
  }

  if (_internal_has_sheetindex()) {
    // required uint32 sheetIndex = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sheetindex());
  }

  return total_size;
}
size_t CommandPasteSheetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandPasteSheetArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000017) ^ 0x00000017) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference document = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.document_);

    // required .TSP.Reference sheet = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);

    // required uint32 sheetIndex = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sheetindex());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TN.SheetUIStateArchive sheet_uistate = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_uistate_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandPasteSheetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandPasteSheetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandPasteSheetArchive::GetClassData() const { return &_class_data_; }


void CommandPasteSheetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandPasteSheetArchive*>(&to_msg);
  auto& from = static_cast<const CommandPasteSheetArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandPasteSheetArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_document()->::TSP::Reference::MergeFrom(
          from._internal_document());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_sheet()->::TSP::Reference::MergeFrom(
          from._internal_sheet());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_sheet_uistate()->::TN::SheetUIStateArchive::MergeFrom(
          from._internal_sheet_uistate());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.sheetindex_ = from._impl_.sheetindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandPasteSheetArchive::CopyFrom(const CommandPasteSheetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandPasteSheetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPasteSheetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_document()) {
    if (!_impl_.document_->IsInitialized()) return false;
  }
  if (_internal_has_sheet()) {
    if (!_impl_.sheet_->IsInitialized()) return false;
  }
  if (_internal_has_sheet_uistate()) {
    if (!_impl_.sheet_uistate_->IsInitialized()) return false;
  }
  return true;
}

void CommandPasteSheetArchive::InternalSwap(CommandPasteSheetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandPasteSheetArchive, _impl_.sheetindex_)
      + sizeof(CommandPasteSheetArchive::_impl_.sheetindex_)
      - PROTOBUF_FIELD_OFFSET(CommandPasteSheetArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandPasteSheetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[19]);
}

// ===================================================================

class CommandReorderSidebarItemChildrenAchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandReorderSidebarItemChildrenAchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandReorderSidebarItemChildrenAchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& sheet(const CommandReorderSidebarItemChildrenAchive* msg);
  static void set_has_sheet(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandReorderSidebarItemChildrenAchive::_Internal::super(const CommandReorderSidebarItemChildrenAchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandReorderSidebarItemChildrenAchive::_Internal::sheet(const CommandReorderSidebarItemChildrenAchive* msg) {
  return *msg->_impl_.sheet_;
}
void CommandReorderSidebarItemChildrenAchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandReorderSidebarItemChildrenAchive::clear_sheet() {
  if (_impl_.sheet_ != nullptr) _impl_.sheet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandReorderSidebarItemChildrenAchive::clear_old_children() {
  _impl_.old_children_.Clear();
}
void CommandReorderSidebarItemChildrenAchive::clear_new_children() {
  _impl_.new_children_.Clear();
}
CommandReorderSidebarItemChildrenAchive::CommandReorderSidebarItemChildrenAchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.CommandReorderSidebarItemChildrenAchive)
}
CommandReorderSidebarItemChildrenAchive::CommandReorderSidebarItemChildrenAchive(const CommandReorderSidebarItemChildrenAchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandReorderSidebarItemChildrenAchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.old_children_){from._impl_.old_children_}
    , decltype(_impl_.new_children_){from._impl_.new_children_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.sheet_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_sheet()) {
    _this->_impl_.sheet_ = new ::TSP::Reference(*from._impl_.sheet_);
  }
  // @@protoc_insertion_point(copy_constructor:TN.CommandReorderSidebarItemChildrenAchive)
}

inline void CommandReorderSidebarItemChildrenAchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.old_children_){arena}
    , decltype(_impl_.new_children_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.sheet_){nullptr}
  };
}

CommandReorderSidebarItemChildrenAchive::~CommandReorderSidebarItemChildrenAchive() {
  // @@protoc_insertion_point(destructor:TN.CommandReorderSidebarItemChildrenAchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandReorderSidebarItemChildrenAchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.old_children_.~RepeatedPtrField();
  _impl_.new_children_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.sheet_;
}

void CommandReorderSidebarItemChildrenAchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandReorderSidebarItemChildrenAchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandReorderSidebarItemChildrenAchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.old_children_.Clear();
  _impl_.new_children_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.sheet_ != nullptr);
      _impl_.sheet_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandReorderSidebarItemChildrenAchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference sheet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_children = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference new_children = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_new_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandReorderSidebarItemChildrenAchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandReorderSidebarItemChildrenAchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference sheet = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sheet(this),
        _Internal::sheet(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference old_children = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_children_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_children(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference new_children = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_new_children_size()); i < n; i++) {
    const auto& repfield = this->_internal_new_children(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandReorderSidebarItemChildrenAchive)
  return target;
}

size_t CommandReorderSidebarItemChildrenAchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandReorderSidebarItemChildrenAchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_sheet()) {
    // required .TSP.Reference sheet = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);
  }

  return total_size;
}
size_t CommandReorderSidebarItemChildrenAchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandReorderSidebarItemChildrenAchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference sheet = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sheet_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference old_children = 3;
  total_size += 1UL * this->_internal_old_children_size();
  for (const auto& msg : this->_impl_.old_children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference new_children = 4;
  total_size += 1UL * this->_internal_new_children_size();
  for (const auto& msg : this->_impl_.new_children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandReorderSidebarItemChildrenAchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandReorderSidebarItemChildrenAchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandReorderSidebarItemChildrenAchive::GetClassData() const { return &_class_data_; }


void CommandReorderSidebarItemChildrenAchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandReorderSidebarItemChildrenAchive*>(&to_msg);
  auto& from = static_cast<const CommandReorderSidebarItemChildrenAchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandReorderSidebarItemChildrenAchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.old_children_.MergeFrom(from._impl_.old_children_);
  _this->_impl_.new_children_.MergeFrom(from._impl_.new_children_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_sheet()->::TSP::Reference::MergeFrom(
          from._internal_sheet());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandReorderSidebarItemChildrenAchive::CopyFrom(const CommandReorderSidebarItemChildrenAchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandReorderSidebarItemChildrenAchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReorderSidebarItemChildrenAchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.old_children_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.new_children_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_sheet()) {
    if (!_impl_.sheet_->IsInitialized()) return false;
  }
  return true;
}

void CommandReorderSidebarItemChildrenAchive::InternalSwap(CommandReorderSidebarItemChildrenAchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.old_children_.InternalSwap(&other->_impl_.old_children_);
  _impl_.new_children_.InternalSwap(&other->_impl_.new_children_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandReorderSidebarItemChildrenAchive, _impl_.sheet_)
      + sizeof(CommandReorderSidebarItemChildrenAchive::_impl_.sheet_)
      - PROTOBUF_FIELD_OFFSET(CommandReorderSidebarItemChildrenAchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandReorderSidebarItemChildrenAchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[20]);
}

// ===================================================================

class CommandChartMediatorSetEditingState::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandChartMediatorSetEditingState>()._impl_._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandChartMediatorSetEditingState* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TN::ChartMediatorFormulaStorage& old_formulas(const CommandChartMediatorSetEditingState* msg);
  static void set_has_old_formulas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TN::ChartMediatorFormulaStorage& new_formulas(const CommandChartMediatorSetEditingState* msg);
  static void set_has_new_formulas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_old_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_new_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_old_scatter_format(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_new_scatter_format(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandChartMediatorSetEditingState::_Internal::super(const CommandChartMediatorSetEditingState* msg) {
  return *msg->_impl_.super_;
}
const ::TN::ChartMediatorFormulaStorage&
CommandChartMediatorSetEditingState::_Internal::old_formulas(const CommandChartMediatorSetEditingState* msg) {
  return *msg->_impl_.old_formulas_;
}
const ::TN::ChartMediatorFormulaStorage&
CommandChartMediatorSetEditingState::_Internal::new_formulas(const CommandChartMediatorSetEditingState* msg) {
  return *msg->_impl_.new_formulas_;
}
void CommandChartMediatorSetEditingState::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandChartMediatorSetEditingState::clear_old_formulas() {
  if (_impl_.old_formulas_ != nullptr) _impl_.old_formulas_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandChartMediatorSetEditingState::clear_new_formulas() {
  if (_impl_.new_formulas_ != nullptr) _impl_.new_formulas_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandChartMediatorSetEditingState::CommandChartMediatorSetEditingState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.CommandChartMediatorSetEditingState)
}
CommandChartMediatorSetEditingState::CommandChartMediatorSetEditingState(const CommandChartMediatorSetEditingState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandChartMediatorSetEditingState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_formulas_){nullptr}
    , decltype(_impl_.new_formulas_){nullptr}
    , decltype(_impl_.old_direction_){}
    , decltype(_impl_.new_direction_){}
    , decltype(_impl_.old_scatter_format_){}
    , decltype(_impl_.new_scatter_format_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::ChartCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_old_formulas()) {
    _this->_impl_.old_formulas_ = new ::TN::ChartMediatorFormulaStorage(*from._impl_.old_formulas_);
  }
  if (from._internal_has_new_formulas()) {
    _this->_impl_.new_formulas_ = new ::TN::ChartMediatorFormulaStorage(*from._impl_.new_formulas_);
  }
  ::memcpy(&_impl_.old_direction_, &from._impl_.old_direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.new_scatter_format_) -
    reinterpret_cast<char*>(&_impl_.old_direction_)) + sizeof(_impl_.new_scatter_format_));
  // @@protoc_insertion_point(copy_constructor:TN.CommandChartMediatorSetEditingState)
}

inline void CommandChartMediatorSetEditingState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_formulas_){nullptr}
    , decltype(_impl_.new_formulas_){nullptr}
    , decltype(_impl_.old_direction_){0}
    , decltype(_impl_.new_direction_){0}
    , decltype(_impl_.old_scatter_format_){0}
    , decltype(_impl_.new_scatter_format_){0}
  };
}

CommandChartMediatorSetEditingState::~CommandChartMediatorSetEditingState() {
  // @@protoc_insertion_point(destructor:TN.CommandChartMediatorSetEditingState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandChartMediatorSetEditingState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.old_formulas_;
  if (this != internal_default_instance()) delete _impl_.new_formulas_;
}

void CommandChartMediatorSetEditingState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandChartMediatorSetEditingState::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandChartMediatorSetEditingState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.old_formulas_ != nullptr);
      _impl_.old_formulas_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.new_formulas_ != nullptr);
      _impl_.new_formulas_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&_impl_.old_direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.new_scatter_format_) -
        reinterpret_cast<char*>(&_impl_.old_direction_)) + sizeof(_impl_.new_scatter_format_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandChartMediatorSetEditingState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TN.ChartMediatorFormulaStorage old_formulas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_formulas(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TN.ChartMediatorFormulaStorage new_formulas = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_formulas(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 old_direction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_old_direction(&has_bits);
          _impl_.old_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 new_direction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_new_direction(&has_bits);
          _impl_.new_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 old_scatter_format = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_old_scatter_format(&has_bits);
          _impl_.old_scatter_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 new_scatter_format = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_new_scatter_format(&has_bits);
          _impl_.new_scatter_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandChartMediatorSetEditingState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandChartMediatorSetEditingState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TN.ChartMediatorFormulaStorage old_formulas = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::old_formulas(this),
        _Internal::old_formulas(this).GetCachedSize(), target, stream);
  }

  // optional .TN.ChartMediatorFormulaStorage new_formulas = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::new_formulas(this),
        _Internal::new_formulas(this).GetCachedSize(), target, stream);
  }

  // optional int32 old_direction = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_old_direction(), target);
  }

  // optional int32 new_direction = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_new_direction(), target);
  }

  // optional int32 old_scatter_format = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_old_scatter_format(), target);
  }

  // optional int32 new_scatter_format = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_new_scatter_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandChartMediatorSetEditingState)
  return target;
}

size_t CommandChartMediatorSetEditingState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandChartMediatorSetEditingState)
  size_t total_size = 0;

  // required .TSCH.ChartCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007eu) {
    // optional .TN.ChartMediatorFormulaStorage old_formulas = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_formulas_);
    }

    // optional .TN.ChartMediatorFormulaStorage new_formulas = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_formulas_);
    }

    // optional int32 old_direction = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_old_direction());
    }

    // optional int32 new_direction = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_new_direction());
    }

    // optional int32 old_scatter_format = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_old_scatter_format());
    }

    // optional int32 new_scatter_format = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_new_scatter_format());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandChartMediatorSetEditingState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandChartMediatorSetEditingState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandChartMediatorSetEditingState::GetClassData() const { return &_class_data_; }


void CommandChartMediatorSetEditingState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandChartMediatorSetEditingState*>(&to_msg);
  auto& from = static_cast<const CommandChartMediatorSetEditingState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandChartMediatorSetEditingState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_old_formulas()->::TN::ChartMediatorFormulaStorage::MergeFrom(
          from._internal_old_formulas());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_new_formulas()->::TN::ChartMediatorFormulaStorage::MergeFrom(
          from._internal_new_formulas());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.old_direction_ = from._impl_.old_direction_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.new_direction_ = from._impl_.new_direction_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.old_scatter_format_ = from._impl_.old_scatter_format_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.new_scatter_format_ = from._impl_.new_scatter_format_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandChartMediatorSetEditingState::CopyFrom(const CommandChartMediatorSetEditingState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandChartMediatorSetEditingState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandChartMediatorSetEditingState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_old_formulas()) {
    if (!_impl_.old_formulas_->IsInitialized()) return false;
  }
  if (_internal_has_new_formulas()) {
    if (!_impl_.new_formulas_->IsInitialized()) return false;
  }
  return true;
}

void CommandChartMediatorSetEditingState::InternalSwap(CommandChartMediatorSetEditingState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandChartMediatorSetEditingState, _impl_.new_scatter_format_)
      + sizeof(CommandChartMediatorSetEditingState::_impl_.new_scatter_format_)
      - PROTOBUF_FIELD_OFFSET(CommandChartMediatorSetEditingState, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandChartMediatorSetEditingState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[21]);
}

// ===================================================================

class CommandChartMediatorUpdateForEntityDelete::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandChartMediatorUpdateForEntityDelete>()._impl_._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandChartMediatorUpdateForEntityDelete* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& cmd(const CommandChartMediatorUpdateForEntityDelete* msg);
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandChartMediatorUpdateForEntityDelete::_Internal::super(const CommandChartMediatorUpdateForEntityDelete* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandChartMediatorUpdateForEntityDelete::_Internal::cmd(const CommandChartMediatorUpdateForEntityDelete* msg) {
  return *msg->_impl_.cmd_;
}
void CommandChartMediatorUpdateForEntityDelete::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandChartMediatorUpdateForEntityDelete::clear_cmd() {
  if (_impl_.cmd_ != nullptr) _impl_.cmd_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandChartMediatorUpdateForEntityDelete::CommandChartMediatorUpdateForEntityDelete(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.CommandChartMediatorUpdateForEntityDelete)
}
CommandChartMediatorUpdateForEntityDelete::CommandChartMediatorUpdateForEntityDelete(const CommandChartMediatorUpdateForEntityDelete& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandChartMediatorUpdateForEntityDelete* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cmd_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::ChartCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_cmd()) {
    _this->_impl_.cmd_ = new ::TSP::Reference(*from._impl_.cmd_);
  }
  // @@protoc_insertion_point(copy_constructor:TN.CommandChartMediatorUpdateForEntityDelete)
}

inline void CommandChartMediatorUpdateForEntityDelete::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cmd_){nullptr}
  };
}

CommandChartMediatorUpdateForEntityDelete::~CommandChartMediatorUpdateForEntityDelete() {
  // @@protoc_insertion_point(destructor:TN.CommandChartMediatorUpdateForEntityDelete)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandChartMediatorUpdateForEntityDelete::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.cmd_;
}

void CommandChartMediatorUpdateForEntityDelete::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandChartMediatorUpdateForEntityDelete::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandChartMediatorUpdateForEntityDelete)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cmd_ != nullptr);
      _impl_.cmd_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandChartMediatorUpdateForEntityDelete::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference cmd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cmd(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandChartMediatorUpdateForEntityDelete::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandChartMediatorUpdateForEntityDelete)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference cmd = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::cmd(this),
        _Internal::cmd(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandChartMediatorUpdateForEntityDelete)
  return target;
}

size_t CommandChartMediatorUpdateForEntityDelete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandChartMediatorUpdateForEntityDelete)
  size_t total_size = 0;

  // required .TSCH.ChartCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference cmd = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cmd_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandChartMediatorUpdateForEntityDelete::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandChartMediatorUpdateForEntityDelete::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandChartMediatorUpdateForEntityDelete::GetClassData() const { return &_class_data_; }


void CommandChartMediatorUpdateForEntityDelete::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandChartMediatorUpdateForEntityDelete*>(&to_msg);
  auto& from = static_cast<const CommandChartMediatorUpdateForEntityDelete&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandChartMediatorUpdateForEntityDelete)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cmd()->::TSP::Reference::MergeFrom(
          from._internal_cmd());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandChartMediatorUpdateForEntityDelete::CopyFrom(const CommandChartMediatorUpdateForEntityDelete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandChartMediatorUpdateForEntityDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandChartMediatorUpdateForEntityDelete::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_cmd()) {
    if (!_impl_.cmd_->IsInitialized()) return false;
  }
  return true;
}

void CommandChartMediatorUpdateForEntityDelete::InternalSwap(CommandChartMediatorUpdateForEntityDelete* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandChartMediatorUpdateForEntityDelete, _impl_.cmd_)
      + sizeof(CommandChartMediatorUpdateForEntityDelete::_impl_.cmd_)
      - PROTOBUF_FIELD_OFFSET(CommandChartMediatorUpdateForEntityDelete, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandChartMediatorUpdateForEntityDelete::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[22]);
}

// ===================================================================

class ChartCommandSetSeriesNameArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartCommandSetSeriesNameArchive>()._impl_._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const ChartCommandSetSeriesNameArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& mediator(const ChartCommandSetSeriesNameArchive* msg);
  static void set_has_mediator(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seriesindex(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCE::FormulaArchive& old_formula(const ChartCommandSetSeriesNameArchive* msg);
  static void set_has_old_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::FormulaArchive& new_formula(const ChartCommandSetSeriesNameArchive* msg);
  static void set_has_new_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000013) ^ 0x00000013) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
ChartCommandSetSeriesNameArchive::_Internal::super(const ChartCommandSetSeriesNameArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
ChartCommandSetSeriesNameArchive::_Internal::mediator(const ChartCommandSetSeriesNameArchive* msg) {
  return *msg->_impl_.mediator_;
}
const ::TSCE::FormulaArchive&
ChartCommandSetSeriesNameArchive::_Internal::old_formula(const ChartCommandSetSeriesNameArchive* msg) {
  return *msg->_impl_.old_formula_;
}
const ::TSCE::FormulaArchive&
ChartCommandSetSeriesNameArchive::_Internal::new_formula(const ChartCommandSetSeriesNameArchive* msg) {
  return *msg->_impl_.new_formula_;
}
void ChartCommandSetSeriesNameArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ChartCommandSetSeriesNameArchive::clear_mediator() {
  if (_impl_.mediator_ != nullptr) _impl_.mediator_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ChartCommandSetSeriesNameArchive::clear_old_formula() {
  if (_impl_.old_formula_ != nullptr) _impl_.old_formula_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ChartCommandSetSeriesNameArchive::clear_new_formula() {
  if (_impl_.new_formula_ != nullptr) _impl_.new_formula_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
ChartCommandSetSeriesNameArchive::ChartCommandSetSeriesNameArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.ChartCommandSetSeriesNameArchive)
}
ChartCommandSetSeriesNameArchive::ChartCommandSetSeriesNameArchive(const ChartCommandSetSeriesNameArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartCommandSetSeriesNameArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.mediator_){nullptr}
    , decltype(_impl_.old_formula_){nullptr}
    , decltype(_impl_.new_formula_){nullptr}
    , decltype(_impl_.seriesindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::ChartCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_mediator()) {
    _this->_impl_.mediator_ = new ::TSP::Reference(*from._impl_.mediator_);
  }
  if (from._internal_has_old_formula()) {
    _this->_impl_.old_formula_ = new ::TSCE::FormulaArchive(*from._impl_.old_formula_);
  }
  if (from._internal_has_new_formula()) {
    _this->_impl_.new_formula_ = new ::TSCE::FormulaArchive(*from._impl_.new_formula_);
  }
  _this->_impl_.seriesindex_ = from._impl_.seriesindex_;
  // @@protoc_insertion_point(copy_constructor:TN.ChartCommandSetSeriesNameArchive)
}

inline void ChartCommandSetSeriesNameArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.mediator_){nullptr}
    , decltype(_impl_.old_formula_){nullptr}
    , decltype(_impl_.new_formula_){nullptr}
    , decltype(_impl_.seriesindex_){0u}
  };
}

ChartCommandSetSeriesNameArchive::~ChartCommandSetSeriesNameArchive() {
  // @@protoc_insertion_point(destructor:TN.ChartCommandSetSeriesNameArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartCommandSetSeriesNameArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.mediator_;
  if (this != internal_default_instance()) delete _impl_.old_formula_;
  if (this != internal_default_instance()) delete _impl_.new_formula_;
}

void ChartCommandSetSeriesNameArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartCommandSetSeriesNameArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.ChartCommandSetSeriesNameArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.mediator_ != nullptr);
      _impl_.mediator_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.old_formula_ != nullptr);
      _impl_.old_formula_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.new_formula_ != nullptr);
      _impl_.new_formula_->Clear();
    }
  }
  _impl_.seriesindex_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartCommandSetSeriesNameArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference mediator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mediator(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 seriesindex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_seriesindex(&has_bits);
          _impl_.seriesindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.FormulaArchive old_formula = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_formula(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.FormulaArchive new_formula = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_formula(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartCommandSetSeriesNameArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.ChartCommandSetSeriesNameArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference mediator = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::mediator(this),
        _Internal::mediator(this).GetCachedSize(), target, stream);
  }

  // required uint32 seriesindex = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_seriesindex(), target);
  }

  // optional .TSCE.FormulaArchive old_formula = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::old_formula(this),
        _Internal::old_formula(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.FormulaArchive new_formula = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::new_formula(this),
        _Internal::new_formula(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.ChartCommandSetSeriesNameArchive)
  return target;
}

size_t ChartCommandSetSeriesNameArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.ChartCommandSetSeriesNameArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_mediator()) {
    // required .TSP.Reference mediator = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mediator_);
  }

  if (_internal_has_seriesindex()) {
    // required uint32 seriesindex = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_seriesindex());
  }

  return total_size;
}
size_t ChartCommandSetSeriesNameArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.ChartCommandSetSeriesNameArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference mediator = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mediator_);

    // required uint32 seriesindex = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_seriesindex());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .TSCE.FormulaArchive old_formula = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_formula_);
    }

    // optional .TSCE.FormulaArchive new_formula = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_formula_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartCommandSetSeriesNameArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartCommandSetSeriesNameArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartCommandSetSeriesNameArchive::GetClassData() const { return &_class_data_; }


void ChartCommandSetSeriesNameArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartCommandSetSeriesNameArchive*>(&to_msg);
  auto& from = static_cast<const ChartCommandSetSeriesNameArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.ChartCommandSetSeriesNameArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_mediator()->::TSP::Reference::MergeFrom(
          from._internal_mediator());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_old_formula()->::TSCE::FormulaArchive::MergeFrom(
          from._internal_old_formula());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_new_formula()->::TSCE::FormulaArchive::MergeFrom(
          from._internal_new_formula());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.seriesindex_ = from._impl_.seriesindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartCommandSetSeriesNameArchive::CopyFrom(const ChartCommandSetSeriesNameArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.ChartCommandSetSeriesNameArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartCommandSetSeriesNameArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_mediator()) {
    if (!_impl_.mediator_->IsInitialized()) return false;
  }
  if (_internal_has_old_formula()) {
    if (!_impl_.old_formula_->IsInitialized()) return false;
  }
  if (_internal_has_new_formula()) {
    if (!_impl_.new_formula_->IsInitialized()) return false;
  }
  return true;
}

void ChartCommandSetSeriesNameArchive::InternalSwap(ChartCommandSetSeriesNameArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartCommandSetSeriesNameArchive, _impl_.seriesindex_)
      + sizeof(ChartCommandSetSeriesNameArchive::_impl_.seriesindex_)
      - PROTOBUF_FIELD_OFFSET(ChartCommandSetSeriesNameArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartCommandSetSeriesNameArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[23]);
}

// ===================================================================

class ChartCommandSelectionBehaviorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartCommandSelectionBehaviorArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& drawable_info(const ChartCommandSelectionBehaviorArchive* msg);
  static void set_has_drawable_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TN::ChartSelectionArchive& begin_selection(const ChartCommandSelectionBehaviorArchive* msg);
  static void set_has_begin_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TN::ChartSelectionArchive& end_selection(const ChartCommandSelectionBehaviorArchive* msg);
  static void set_has_end_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
ChartCommandSelectionBehaviorArchive::_Internal::drawable_info(const ChartCommandSelectionBehaviorArchive* msg) {
  return *msg->_impl_.drawable_info_;
}
const ::TN::ChartSelectionArchive&
ChartCommandSelectionBehaviorArchive::_Internal::begin_selection(const ChartCommandSelectionBehaviorArchive* msg) {
  return *msg->_impl_.begin_selection_;
}
const ::TN::ChartSelectionArchive&
ChartCommandSelectionBehaviorArchive::_Internal::end_selection(const ChartCommandSelectionBehaviorArchive* msg) {
  return *msg->_impl_.end_selection_;
}
void ChartCommandSelectionBehaviorArchive::clear_drawable_info() {
  if (_impl_.drawable_info_ != nullptr) _impl_.drawable_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ChartCommandSelectionBehaviorArchive::clear_begin_selection() {
  if (_impl_.begin_selection_ != nullptr) _impl_.begin_selection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ChartCommandSelectionBehaviorArchive::clear_end_selection() {
  if (_impl_.end_selection_ != nullptr) _impl_.end_selection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ChartCommandSelectionBehaviorArchive::ChartCommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TN.ChartCommandSelectionBehaviorArchive)
}
ChartCommandSelectionBehaviorArchive::ChartCommandSelectionBehaviorArchive(const ChartCommandSelectionBehaviorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartCommandSelectionBehaviorArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawable_info_){nullptr}
    , decltype(_impl_.begin_selection_){nullptr}
    , decltype(_impl_.end_selection_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_drawable_info()) {
    _this->_impl_.drawable_info_ = new ::TSP::Reference(*from._impl_.drawable_info_);
  }
  if (from._internal_has_begin_selection()) {
    _this->_impl_.begin_selection_ = new ::TN::ChartSelectionArchive(*from._impl_.begin_selection_);
  }
  if (from._internal_has_end_selection()) {
    _this->_impl_.end_selection_ = new ::TN::ChartSelectionArchive(*from._impl_.end_selection_);
  }
  // @@protoc_insertion_point(copy_constructor:TN.ChartCommandSelectionBehaviorArchive)
}

inline void ChartCommandSelectionBehaviorArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawable_info_){nullptr}
    , decltype(_impl_.begin_selection_){nullptr}
    , decltype(_impl_.end_selection_){nullptr}
  };
}

ChartCommandSelectionBehaviorArchive::~ChartCommandSelectionBehaviorArchive() {
  // @@protoc_insertion_point(destructor:TN.ChartCommandSelectionBehaviorArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartCommandSelectionBehaviorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.drawable_info_;
  if (this != internal_default_instance()) delete _impl_.begin_selection_;
  if (this != internal_default_instance()) delete _impl_.end_selection_;
}

void ChartCommandSelectionBehaviorArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartCommandSelectionBehaviorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.ChartCommandSelectionBehaviorArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.drawable_info_ != nullptr);
      _impl_.drawable_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.begin_selection_ != nullptr);
      _impl_.begin_selection_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.end_selection_ != nullptr);
      _impl_.end_selection_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartCommandSelectionBehaviorArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference drawable_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_drawable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TN.ChartSelectionArchive begin_selection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_begin_selection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TN.ChartSelectionArchive end_selection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_selection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartCommandSelectionBehaviorArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.ChartCommandSelectionBehaviorArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference drawable_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::drawable_info(this),
        _Internal::drawable_info(this).GetCachedSize(), target, stream);
  }

  // optional .TN.ChartSelectionArchive begin_selection = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::begin_selection(this),
        _Internal::begin_selection(this).GetCachedSize(), target, stream);
  }

  // optional .TN.ChartSelectionArchive end_selection = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::end_selection(this),
        _Internal::end_selection(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.ChartCommandSelectionBehaviorArchive)
  return target;
}

size_t ChartCommandSelectionBehaviorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.ChartCommandSelectionBehaviorArchive)
  size_t total_size = 0;

  // required .TSP.Reference drawable_info = 1;
  if (_internal_has_drawable_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drawable_info_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TN.ChartSelectionArchive begin_selection = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.begin_selection_);
    }

    // optional .TN.ChartSelectionArchive end_selection = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.end_selection_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartCommandSelectionBehaviorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartCommandSelectionBehaviorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartCommandSelectionBehaviorArchive::GetClassData() const { return &_class_data_; }


void ChartCommandSelectionBehaviorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartCommandSelectionBehaviorArchive*>(&to_msg);
  auto& from = static_cast<const ChartCommandSelectionBehaviorArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TN.ChartCommandSelectionBehaviorArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_drawable_info()->::TSP::Reference::MergeFrom(
          from._internal_drawable_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_begin_selection()->::TN::ChartSelectionArchive::MergeFrom(
          from._internal_begin_selection());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_end_selection()->::TN::ChartSelectionArchive::MergeFrom(
          from._internal_end_selection());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartCommandSelectionBehaviorArchive::CopyFrom(const ChartCommandSelectionBehaviorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.ChartCommandSelectionBehaviorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartCommandSelectionBehaviorArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_drawable_info()) {
    if (!_impl_.drawable_info_->IsInitialized()) return false;
  }
  if (_internal_has_begin_selection()) {
    if (!_impl_.begin_selection_->IsInitialized()) return false;
  }
  if (_internal_has_end_selection()) {
    if (!_impl_.end_selection_->IsInitialized()) return false;
  }
  return true;
}

void ChartCommandSelectionBehaviorArchive::InternalSwap(ChartCommandSelectionBehaviorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartCommandSelectionBehaviorArchive, _impl_.end_selection_)
      + sizeof(ChartCommandSelectionBehaviorArchive::_impl_.end_selection_)
      - PROTOBUF_FIELD_OFFSET(ChartCommandSelectionBehaviorArchive, _impl_.drawable_info_)>(
          reinterpret_cast<char*>(&_impl_.drawable_info_),
          reinterpret_cast<char*>(&other->_impl_.drawable_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartCommandSelectionBehaviorArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[24]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TN
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TN::SheetCommandSelectionBehaviorArchive*
Arena::CreateMaybeMessage< ::TN::SheetCommandSelectionBehaviorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::SheetCommandSelectionBehaviorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandFormChooseTargetTableArchive*
Arena::CreateMaybeMessage< ::TN::CommandFormChooseTargetTableArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandFormChooseTargetTableArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandSheetInsertDrawablesArchive*
Arena::CreateMaybeMessage< ::TN::CommandSheetInsertDrawablesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandSheetInsertDrawablesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandSheetRemoveDrawablesArchive*
Arena::CreateMaybeMessage< ::TN::CommandSheetRemoveDrawablesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandSheetRemoveDrawablesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandSheetMoveDrawableZOrderArchive*
Arena::CreateMaybeMessage< ::TN::CommandSheetMoveDrawableZOrderArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandSheetMoveDrawableZOrderArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandDocumentInsertSheetArchive*
Arena::CreateMaybeMessage< ::TN::CommandDocumentInsertSheetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandDocumentInsertSheetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandDocumentRemoveSheetArchive*
Arena::CreateMaybeMessage< ::TN::CommandDocumentRemoveSheetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandDocumentRemoveSheetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandDocumentReplaceLastSheetArchive*
Arena::CreateMaybeMessage< ::TN::CommandDocumentReplaceLastSheetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandDocumentReplaceLastSheetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandDocumentReorderSheetArchive*
Arena::CreateMaybeMessage< ::TN::CommandDocumentReorderSheetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandDocumentReorderSheetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandSetSheetNameArchive*
Arena::CreateMaybeMessage< ::TN::CommandSetSheetNameArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandSetSheetNameArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandSetPageOrientationArchive*
Arena::CreateMaybeMessage< ::TN::CommandSetPageOrientationArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandSetPageOrientationArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandSetShowPageNumbersValueArchive*
Arena::CreateMaybeMessage< ::TN::CommandSetShowPageNumbersValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandSetShowPageNumbersValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandSetRepeatingHeadersValueArchive*
Arena::CreateMaybeMessage< ::TN::CommandSetRepeatingHeadersValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandSetRepeatingHeadersValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandSetContentScaleArchive*
Arena::CreateMaybeMessage< ::TN::CommandSetContentScaleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandSetContentScaleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandSetAutofitValueArchive*
Arena::CreateMaybeMessage< ::TN::CommandSetAutofitValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandSetAutofitValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandSetDocumentPrinterOptions*
Arena::CreateMaybeMessage< ::TN::CommandSetDocumentPrinterOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandSetDocumentPrinterOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandEnterPrintPreviewModeArchive*
Arena::CreateMaybeMessage< ::TN::CommandEnterPrintPreviewModeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandEnterPrintPreviewModeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandExitPrintPreviewModeArchive*
Arena::CreateMaybeMessage< ::TN::CommandExitPrintPreviewModeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandExitPrintPreviewModeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandPasteDrawablesArchive*
Arena::CreateMaybeMessage< ::TN::CommandPasteDrawablesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandPasteDrawablesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandPasteSheetArchive*
Arena::CreateMaybeMessage< ::TN::CommandPasteSheetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandPasteSheetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandReorderSidebarItemChildrenAchive*
Arena::CreateMaybeMessage< ::TN::CommandReorderSidebarItemChildrenAchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandReorderSidebarItemChildrenAchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandChartMediatorSetEditingState*
Arena::CreateMaybeMessage< ::TN::CommandChartMediatorSetEditingState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandChartMediatorSetEditingState >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandChartMediatorUpdateForEntityDelete*
Arena::CreateMaybeMessage< ::TN::CommandChartMediatorUpdateForEntityDelete >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandChartMediatorUpdateForEntityDelete >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::ChartCommandSetSeriesNameArchive*
Arena::CreateMaybeMessage< ::TN::ChartCommandSetSeriesNameArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::ChartCommandSetSeriesNameArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::ChartCommandSelectionBehaviorArchive*
Arena::CreateMaybeMessage< ::TN::ChartCommandSelectionBehaviorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::ChartCommandSelectionBehaviorArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
