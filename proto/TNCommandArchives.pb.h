// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TNCommandArchives.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TNCommandArchives_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TNCommandArchives_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSKArchives.pb.h"
#include "TSCHArchives.pb.h"
#include "TSCHCommandArchives.pb.h"
#include "TSCEArchives.pb.h"
#include "TSSArchives.pb.h"
#include "TSDArchives.pb.h"
#include "TSWPArchives.pb.h"
#include "TSAArchives.pb.h"
#include "TSTArchives.pb.h"
#include "TNArchives.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TNCommandArchives_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TNCommandArchives_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TNCommandArchives_2eproto;
namespace TN {
class ChartCommandSelectionBehaviorArchive;
struct ChartCommandSelectionBehaviorArchiveDefaultTypeInternal;
extern ChartCommandSelectionBehaviorArchiveDefaultTypeInternal _ChartCommandSelectionBehaviorArchive_default_instance_;
class ChartCommandSetSeriesNameArchive;
struct ChartCommandSetSeriesNameArchiveDefaultTypeInternal;
extern ChartCommandSetSeriesNameArchiveDefaultTypeInternal _ChartCommandSetSeriesNameArchive_default_instance_;
class CommandChartMediatorSetEditingState;
struct CommandChartMediatorSetEditingStateDefaultTypeInternal;
extern CommandChartMediatorSetEditingStateDefaultTypeInternal _CommandChartMediatorSetEditingState_default_instance_;
class CommandChartMediatorUpdateForEntityDelete;
struct CommandChartMediatorUpdateForEntityDeleteDefaultTypeInternal;
extern CommandChartMediatorUpdateForEntityDeleteDefaultTypeInternal _CommandChartMediatorUpdateForEntityDelete_default_instance_;
class CommandDocumentInsertSheetArchive;
struct CommandDocumentInsertSheetArchiveDefaultTypeInternal;
extern CommandDocumentInsertSheetArchiveDefaultTypeInternal _CommandDocumentInsertSheetArchive_default_instance_;
class CommandDocumentRemoveSheetArchive;
struct CommandDocumentRemoveSheetArchiveDefaultTypeInternal;
extern CommandDocumentRemoveSheetArchiveDefaultTypeInternal _CommandDocumentRemoveSheetArchive_default_instance_;
class CommandDocumentReorderSheetArchive;
struct CommandDocumentReorderSheetArchiveDefaultTypeInternal;
extern CommandDocumentReorderSheetArchiveDefaultTypeInternal _CommandDocumentReorderSheetArchive_default_instance_;
class CommandDocumentReplaceLastSheetArchive;
struct CommandDocumentReplaceLastSheetArchiveDefaultTypeInternal;
extern CommandDocumentReplaceLastSheetArchiveDefaultTypeInternal _CommandDocumentReplaceLastSheetArchive_default_instance_;
class CommandEnterPrintPreviewModeArchive;
struct CommandEnterPrintPreviewModeArchiveDefaultTypeInternal;
extern CommandEnterPrintPreviewModeArchiveDefaultTypeInternal _CommandEnterPrintPreviewModeArchive_default_instance_;
class CommandExitPrintPreviewModeArchive;
struct CommandExitPrintPreviewModeArchiveDefaultTypeInternal;
extern CommandExitPrintPreviewModeArchiveDefaultTypeInternal _CommandExitPrintPreviewModeArchive_default_instance_;
class CommandFormChooseTargetTableArchive;
struct CommandFormChooseTargetTableArchiveDefaultTypeInternal;
extern CommandFormChooseTargetTableArchiveDefaultTypeInternal _CommandFormChooseTargetTableArchive_default_instance_;
class CommandPasteDrawablesArchive;
struct CommandPasteDrawablesArchiveDefaultTypeInternal;
extern CommandPasteDrawablesArchiveDefaultTypeInternal _CommandPasteDrawablesArchive_default_instance_;
class CommandPasteSheetArchive;
struct CommandPasteSheetArchiveDefaultTypeInternal;
extern CommandPasteSheetArchiveDefaultTypeInternal _CommandPasteSheetArchive_default_instance_;
class CommandReorderSidebarItemChildrenAchive;
struct CommandReorderSidebarItemChildrenAchiveDefaultTypeInternal;
extern CommandReorderSidebarItemChildrenAchiveDefaultTypeInternal _CommandReorderSidebarItemChildrenAchive_default_instance_;
class CommandSetAutofitValueArchive;
struct CommandSetAutofitValueArchiveDefaultTypeInternal;
extern CommandSetAutofitValueArchiveDefaultTypeInternal _CommandSetAutofitValueArchive_default_instance_;
class CommandSetContentScaleArchive;
struct CommandSetContentScaleArchiveDefaultTypeInternal;
extern CommandSetContentScaleArchiveDefaultTypeInternal _CommandSetContentScaleArchive_default_instance_;
class CommandSetDocumentPrinterOptions;
struct CommandSetDocumentPrinterOptionsDefaultTypeInternal;
extern CommandSetDocumentPrinterOptionsDefaultTypeInternal _CommandSetDocumentPrinterOptions_default_instance_;
class CommandSetPageOrientationArchive;
struct CommandSetPageOrientationArchiveDefaultTypeInternal;
extern CommandSetPageOrientationArchiveDefaultTypeInternal _CommandSetPageOrientationArchive_default_instance_;
class CommandSetRepeatingHeadersValueArchive;
struct CommandSetRepeatingHeadersValueArchiveDefaultTypeInternal;
extern CommandSetRepeatingHeadersValueArchiveDefaultTypeInternal _CommandSetRepeatingHeadersValueArchive_default_instance_;
class CommandSetSheetNameArchive;
struct CommandSetSheetNameArchiveDefaultTypeInternal;
extern CommandSetSheetNameArchiveDefaultTypeInternal _CommandSetSheetNameArchive_default_instance_;
class CommandSetShowPageNumbersValueArchive;
struct CommandSetShowPageNumbersValueArchiveDefaultTypeInternal;
extern CommandSetShowPageNumbersValueArchiveDefaultTypeInternal _CommandSetShowPageNumbersValueArchive_default_instance_;
class CommandSheetInsertDrawablesArchive;
struct CommandSheetInsertDrawablesArchiveDefaultTypeInternal;
extern CommandSheetInsertDrawablesArchiveDefaultTypeInternal _CommandSheetInsertDrawablesArchive_default_instance_;
class CommandSheetMoveDrawableZOrderArchive;
struct CommandSheetMoveDrawableZOrderArchiveDefaultTypeInternal;
extern CommandSheetMoveDrawableZOrderArchiveDefaultTypeInternal _CommandSheetMoveDrawableZOrderArchive_default_instance_;
class CommandSheetRemoveDrawablesArchive;
struct CommandSheetRemoveDrawablesArchiveDefaultTypeInternal;
extern CommandSheetRemoveDrawablesArchiveDefaultTypeInternal _CommandSheetRemoveDrawablesArchive_default_instance_;
class SheetCommandSelectionBehaviorArchive;
struct SheetCommandSelectionBehaviorArchiveDefaultTypeInternal;
extern SheetCommandSelectionBehaviorArchiveDefaultTypeInternal _SheetCommandSelectionBehaviorArchive_default_instance_;
}  // namespace TN
PROTOBUF_NAMESPACE_OPEN
template<> ::TN::ChartCommandSelectionBehaviorArchive* Arena::CreateMaybeMessage<::TN::ChartCommandSelectionBehaviorArchive>(Arena*);
template<> ::TN::ChartCommandSetSeriesNameArchive* Arena::CreateMaybeMessage<::TN::ChartCommandSetSeriesNameArchive>(Arena*);
template<> ::TN::CommandChartMediatorSetEditingState* Arena::CreateMaybeMessage<::TN::CommandChartMediatorSetEditingState>(Arena*);
template<> ::TN::CommandChartMediatorUpdateForEntityDelete* Arena::CreateMaybeMessage<::TN::CommandChartMediatorUpdateForEntityDelete>(Arena*);
template<> ::TN::CommandDocumentInsertSheetArchive* Arena::CreateMaybeMessage<::TN::CommandDocumentInsertSheetArchive>(Arena*);
template<> ::TN::CommandDocumentRemoveSheetArchive* Arena::CreateMaybeMessage<::TN::CommandDocumentRemoveSheetArchive>(Arena*);
template<> ::TN::CommandDocumentReorderSheetArchive* Arena::CreateMaybeMessage<::TN::CommandDocumentReorderSheetArchive>(Arena*);
template<> ::TN::CommandDocumentReplaceLastSheetArchive* Arena::CreateMaybeMessage<::TN::CommandDocumentReplaceLastSheetArchive>(Arena*);
template<> ::TN::CommandEnterPrintPreviewModeArchive* Arena::CreateMaybeMessage<::TN::CommandEnterPrintPreviewModeArchive>(Arena*);
template<> ::TN::CommandExitPrintPreviewModeArchive* Arena::CreateMaybeMessage<::TN::CommandExitPrintPreviewModeArchive>(Arena*);
template<> ::TN::CommandFormChooseTargetTableArchive* Arena::CreateMaybeMessage<::TN::CommandFormChooseTargetTableArchive>(Arena*);
template<> ::TN::CommandPasteDrawablesArchive* Arena::CreateMaybeMessage<::TN::CommandPasteDrawablesArchive>(Arena*);
template<> ::TN::CommandPasteSheetArchive* Arena::CreateMaybeMessage<::TN::CommandPasteSheetArchive>(Arena*);
template<> ::TN::CommandReorderSidebarItemChildrenAchive* Arena::CreateMaybeMessage<::TN::CommandReorderSidebarItemChildrenAchive>(Arena*);
template<> ::TN::CommandSetAutofitValueArchive* Arena::CreateMaybeMessage<::TN::CommandSetAutofitValueArchive>(Arena*);
template<> ::TN::CommandSetContentScaleArchive* Arena::CreateMaybeMessage<::TN::CommandSetContentScaleArchive>(Arena*);
template<> ::TN::CommandSetDocumentPrinterOptions* Arena::CreateMaybeMessage<::TN::CommandSetDocumentPrinterOptions>(Arena*);
template<> ::TN::CommandSetPageOrientationArchive* Arena::CreateMaybeMessage<::TN::CommandSetPageOrientationArchive>(Arena*);
template<> ::TN::CommandSetRepeatingHeadersValueArchive* Arena::CreateMaybeMessage<::TN::CommandSetRepeatingHeadersValueArchive>(Arena*);
template<> ::TN::CommandSetSheetNameArchive* Arena::CreateMaybeMessage<::TN::CommandSetSheetNameArchive>(Arena*);
template<> ::TN::CommandSetShowPageNumbersValueArchive* Arena::CreateMaybeMessage<::TN::CommandSetShowPageNumbersValueArchive>(Arena*);
template<> ::TN::CommandSheetInsertDrawablesArchive* Arena::CreateMaybeMessage<::TN::CommandSheetInsertDrawablesArchive>(Arena*);
template<> ::TN::CommandSheetMoveDrawableZOrderArchive* Arena::CreateMaybeMessage<::TN::CommandSheetMoveDrawableZOrderArchive>(Arena*);
template<> ::TN::CommandSheetRemoveDrawablesArchive* Arena::CreateMaybeMessage<::TN::CommandSheetRemoveDrawablesArchive>(Arena*);
template<> ::TN::SheetCommandSelectionBehaviorArchive* Arena::CreateMaybeMessage<::TN::SheetCommandSelectionBehaviorArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TN {

// ===================================================================

class SheetCommandSelectionBehaviorArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.SheetCommandSelectionBehaviorArchive) */ {
 public:
  inline SheetCommandSelectionBehaviorArchive() : SheetCommandSelectionBehaviorArchive(nullptr) {}
  ~SheetCommandSelectionBehaviorArchive() override;
  explicit PROTOBUF_CONSTEXPR SheetCommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SheetCommandSelectionBehaviorArchive(const SheetCommandSelectionBehaviorArchive& from);
  SheetCommandSelectionBehaviorArchive(SheetCommandSelectionBehaviorArchive&& from) noexcept
    : SheetCommandSelectionBehaviorArchive() {
    *this = ::std::move(from);
  }

  inline SheetCommandSelectionBehaviorArchive& operator=(const SheetCommandSelectionBehaviorArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SheetCommandSelectionBehaviorArchive& operator=(SheetCommandSelectionBehaviorArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SheetCommandSelectionBehaviorArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SheetCommandSelectionBehaviorArchive* internal_default_instance() {
    return reinterpret_cast<const SheetCommandSelectionBehaviorArchive*>(
               &_SheetCommandSelectionBehaviorArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SheetCommandSelectionBehaviorArchive& a, SheetCommandSelectionBehaviorArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SheetCommandSelectionBehaviorArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SheetCommandSelectionBehaviorArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SheetCommandSelectionBehaviorArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SheetCommandSelectionBehaviorArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SheetCommandSelectionBehaviorArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SheetCommandSelectionBehaviorArchive& from) {
    SheetCommandSelectionBehaviorArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SheetCommandSelectionBehaviorArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.SheetCommandSelectionBehaviorArchive";
  }
  protected:
  explicit SheetCommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSheetSelectionFieldNumber = 1,
  };
  // optional .TSP.Reference sheet_selection = 1;
  bool has_sheet_selection() const;
  private:
  bool _internal_has_sheet_selection() const;
  public:
  void clear_sheet_selection();
  const ::TSP::Reference& sheet_selection() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_sheet_selection();
  ::TSP::Reference* mutable_sheet_selection();
  void set_allocated_sheet_selection(::TSP::Reference* sheet_selection);
  private:
  const ::TSP::Reference& _internal_sheet_selection() const;
  ::TSP::Reference* _internal_mutable_sheet_selection();
  public:
  void unsafe_arena_set_allocated_sheet_selection(
      ::TSP::Reference* sheet_selection);
  ::TSP::Reference* unsafe_arena_release_sheet_selection();

  // @@protoc_insertion_point(class_scope:TN.SheetCommandSelectionBehaviorArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* sheet_selection_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandFormChooseTargetTableArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandFormChooseTargetTableArchive) */ {
 public:
  inline CommandFormChooseTargetTableArchive() : CommandFormChooseTargetTableArchive(nullptr) {}
  ~CommandFormChooseTargetTableArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandFormChooseTargetTableArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandFormChooseTargetTableArchive(const CommandFormChooseTargetTableArchive& from);
  CommandFormChooseTargetTableArchive(CommandFormChooseTargetTableArchive&& from) noexcept
    : CommandFormChooseTargetTableArchive() {
    *this = ::std::move(from);
  }

  inline CommandFormChooseTargetTableArchive& operator=(const CommandFormChooseTargetTableArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandFormChooseTargetTableArchive& operator=(CommandFormChooseTargetTableArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandFormChooseTargetTableArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandFormChooseTargetTableArchive* internal_default_instance() {
    return reinterpret_cast<const CommandFormChooseTargetTableArchive*>(
               &_CommandFormChooseTargetTableArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommandFormChooseTargetTableArchive& a, CommandFormChooseTargetTableArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandFormChooseTargetTableArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandFormChooseTargetTableArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandFormChooseTargetTableArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandFormChooseTargetTableArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandFormChooseTargetTableArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandFormChooseTargetTableArchive& from) {
    CommandFormChooseTargetTableArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandFormChooseTargetTableArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandFormChooseTargetTableArchive";
  }
  protected:
  explicit CommandFormChooseTargetTableArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSheetNameFieldNumber = 4,
    kPreviousSheetNameFieldNumber = 5,
    kSuperFieldNumber = 1,
    kTableIdFieldNumber = 2,
    kPreviousTableIdFieldNumber = 3,
    kSheetFieldNumber = 6,
  };
  // optional string sheet_name = 4;
  bool has_sheet_name() const;
  private:
  bool _internal_has_sheet_name() const;
  public:
  void clear_sheet_name();
  const std::string& sheet_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sheet_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sheet_name();
  PROTOBUF_NODISCARD std::string* release_sheet_name();
  void set_allocated_sheet_name(std::string* sheet_name);
  private:
  const std::string& _internal_sheet_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sheet_name(const std::string& value);
  std::string* _internal_mutable_sheet_name();
  public:

  // optional string previous_sheet_name = 5;
  bool has_previous_sheet_name() const;
  private:
  bool _internal_has_previous_sheet_name() const;
  public:
  void clear_previous_sheet_name();
  const std::string& previous_sheet_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_previous_sheet_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_previous_sheet_name();
  PROTOBUF_NODISCARD std::string* release_previous_sheet_name();
  void set_allocated_previous_sheet_name(std::string* previous_sheet_name);
  private:
  const std::string& _internal_previous_sheet_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_previous_sheet_name(const std::string& value);
  std::string* _internal_mutable_previous_sheet_name();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSCE.CFUUIDArchive table_id = 2;
  bool has_table_id() const;
  private:
  bool _internal_has_table_id() const;
  public:
  void clear_table_id();
  const ::TSCE::CFUUIDArchive& table_id() const;
  PROTOBUF_NODISCARD ::TSCE::CFUUIDArchive* release_table_id();
  ::TSCE::CFUUIDArchive* mutable_table_id();
  void set_allocated_table_id(::TSCE::CFUUIDArchive* table_id);
  private:
  const ::TSCE::CFUUIDArchive& _internal_table_id() const;
  ::TSCE::CFUUIDArchive* _internal_mutable_table_id();
  public:
  void unsafe_arena_set_allocated_table_id(
      ::TSCE::CFUUIDArchive* table_id);
  ::TSCE::CFUUIDArchive* unsafe_arena_release_table_id();

  // optional .TSCE.CFUUIDArchive previous_table_id = 3;
  bool has_previous_table_id() const;
  private:
  bool _internal_has_previous_table_id() const;
  public:
  void clear_previous_table_id();
  const ::TSCE::CFUUIDArchive& previous_table_id() const;
  PROTOBUF_NODISCARD ::TSCE::CFUUIDArchive* release_previous_table_id();
  ::TSCE::CFUUIDArchive* mutable_previous_table_id();
  void set_allocated_previous_table_id(::TSCE::CFUUIDArchive* previous_table_id);
  private:
  const ::TSCE::CFUUIDArchive& _internal_previous_table_id() const;
  ::TSCE::CFUUIDArchive* _internal_mutable_previous_table_id();
  public:
  void unsafe_arena_set_allocated_previous_table_id(
      ::TSCE::CFUUIDArchive* previous_table_id);
  ::TSCE::CFUUIDArchive* unsafe_arena_release_previous_table_id();

  // required .TSP.Reference sheet = 6;
  bool has_sheet() const;
  private:
  bool _internal_has_sheet() const;
  public:
  void clear_sheet();
  const ::TSP::Reference& sheet() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_sheet();
  ::TSP::Reference* mutable_sheet();
  void set_allocated_sheet(::TSP::Reference* sheet);
  private:
  const ::TSP::Reference& _internal_sheet() const;
  ::TSP::Reference* _internal_mutable_sheet();
  public:
  void unsafe_arena_set_allocated_sheet(
      ::TSP::Reference* sheet);
  ::TSP::Reference* unsafe_arena_release_sheet();

  // @@protoc_insertion_point(class_scope:TN.CommandFormChooseTargetTableArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sheet_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previous_sheet_name_;
    ::TSK::CommandArchive* super_;
    ::TSCE::CFUUIDArchive* table_id_;
    ::TSCE::CFUUIDArchive* previous_table_id_;
    ::TSP::Reference* sheet_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSheetInsertDrawablesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandSheetInsertDrawablesArchive) */ {
 public:
  inline CommandSheetInsertDrawablesArchive() : CommandSheetInsertDrawablesArchive(nullptr) {}
  ~CommandSheetInsertDrawablesArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSheetInsertDrawablesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSheetInsertDrawablesArchive(const CommandSheetInsertDrawablesArchive& from);
  CommandSheetInsertDrawablesArchive(CommandSheetInsertDrawablesArchive&& from) noexcept
    : CommandSheetInsertDrawablesArchive() {
    *this = ::std::move(from);
  }

  inline CommandSheetInsertDrawablesArchive& operator=(const CommandSheetInsertDrawablesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSheetInsertDrawablesArchive& operator=(CommandSheetInsertDrawablesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSheetInsertDrawablesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSheetInsertDrawablesArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSheetInsertDrawablesArchive*>(
               &_CommandSheetInsertDrawablesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CommandSheetInsertDrawablesArchive& a, CommandSheetInsertDrawablesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSheetInsertDrawablesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSheetInsertDrawablesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSheetInsertDrawablesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSheetInsertDrawablesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSheetInsertDrawablesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSheetInsertDrawablesArchive& from) {
    CommandSheetInsertDrawablesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSheetInsertDrawablesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandSheetInsertDrawablesArchive";
  }
  protected:
  explicit CommandSheetInsertDrawablesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawablesFieldNumber = 2,
    kSheetFieldNumber = 1,
    kProviderUndoFieldNumber = 3,
    kSuperFieldNumber = 4,
    kAtIndexFieldNumber = 6,
    kForDragFieldNumber = 5,
    kForPasteFieldNumber = 7,
  };
  // repeated .TSP.Reference drawables = 2;
  int drawables_size() const;
  private:
  int _internal_drawables_size() const;
  public:
  void clear_drawables();
  ::TSP::Reference* mutable_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_drawables();
  private:
  const ::TSP::Reference& _internal_drawables(int index) const;
  ::TSP::Reference* _internal_add_drawables();
  public:
  const ::TSP::Reference& drawables(int index) const;
  ::TSP::Reference* add_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      drawables() const;

  // required .TSP.Reference sheet = 1;
  bool has_sheet() const;
  private:
  bool _internal_has_sheet() const;
  public:
  void clear_sheet();
  const ::TSP::Reference& sheet() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_sheet();
  ::TSP::Reference* mutable_sheet();
  void set_allocated_sheet(::TSP::Reference* sheet);
  private:
  const ::TSP::Reference& _internal_sheet() const;
  ::TSP::Reference* _internal_mutable_sheet();
  public:
  void unsafe_arena_set_allocated_sheet(
      ::TSP::Reference* sheet);
  ::TSP::Reference* unsafe_arena_release_sheet();

  // optional .TSP.Reference provider_undo = 3;
  bool has_provider_undo() const;
  private:
  bool _internal_has_provider_undo() const;
  public:
  void clear_provider_undo();
  const ::TSP::Reference& provider_undo() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_provider_undo();
  ::TSP::Reference* mutable_provider_undo();
  void set_allocated_provider_undo(::TSP::Reference* provider_undo);
  private:
  const ::TSP::Reference& _internal_provider_undo() const;
  ::TSP::Reference* _internal_mutable_provider_undo();
  public:
  void unsafe_arena_set_allocated_provider_undo(
      ::TSP::Reference* provider_undo);
  ::TSP::Reference* unsafe_arena_release_provider_undo();

  // required .TSK.CommandArchive super = 4;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional int32 atIndex = 6;
  bool has_atindex() const;
  private:
  bool _internal_has_atindex() const;
  public:
  void clear_atindex();
  int32_t atindex() const;
  void set_atindex(int32_t value);
  private:
  int32_t _internal_atindex() const;
  void _internal_set_atindex(int32_t value);
  public:

  // optional bool forDrag = 5;
  bool has_fordrag() const;
  private:
  bool _internal_has_fordrag() const;
  public:
  void clear_fordrag();
  bool fordrag() const;
  void set_fordrag(bool value);
  private:
  bool _internal_fordrag() const;
  void _internal_set_fordrag(bool value);
  public:

  // optional bool forPaste = 7;
  bool has_forpaste() const;
  private:
  bool _internal_has_forpaste() const;
  public:
  void clear_forpaste();
  bool forpaste() const;
  void set_forpaste(bool value);
  private:
  bool _internal_forpaste() const;
  void _internal_set_forpaste(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TN.CommandSheetInsertDrawablesArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > drawables_;
    ::TSP::Reference* sheet_;
    ::TSP::Reference* provider_undo_;
    ::TSK::CommandArchive* super_;
    int32_t atindex_;
    bool fordrag_;
    bool forpaste_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSheetRemoveDrawablesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandSheetRemoveDrawablesArchive) */ {
 public:
  inline CommandSheetRemoveDrawablesArchive() : CommandSheetRemoveDrawablesArchive(nullptr) {}
  ~CommandSheetRemoveDrawablesArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSheetRemoveDrawablesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSheetRemoveDrawablesArchive(const CommandSheetRemoveDrawablesArchive& from);
  CommandSheetRemoveDrawablesArchive(CommandSheetRemoveDrawablesArchive&& from) noexcept
    : CommandSheetRemoveDrawablesArchive() {
    *this = ::std::move(from);
  }

  inline CommandSheetRemoveDrawablesArchive& operator=(const CommandSheetRemoveDrawablesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSheetRemoveDrawablesArchive& operator=(CommandSheetRemoveDrawablesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSheetRemoveDrawablesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSheetRemoveDrawablesArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSheetRemoveDrawablesArchive*>(
               &_CommandSheetRemoveDrawablesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CommandSheetRemoveDrawablesArchive& a, CommandSheetRemoveDrawablesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSheetRemoveDrawablesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSheetRemoveDrawablesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSheetRemoveDrawablesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSheetRemoveDrawablesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSheetRemoveDrawablesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSheetRemoveDrawablesArchive& from) {
    CommandSheetRemoveDrawablesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSheetRemoveDrawablesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandSheetRemoveDrawablesArchive";
  }
  protected:
  explicit CommandSheetRemoveDrawablesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSortedDrawablesFieldNumber = 3,
    kOldSheetSidebarOrderFieldNumber = 5,
    kSuperFieldNumber = 1,
    kSheetFieldNumber = 2,
    kDrawableIndicesFieldNumber = 4,
    kFormulaRewriteCommandForUndoFieldNumber = 6,
  };
  // repeated .TSP.Reference sortedDrawables = 3;
  int sorteddrawables_size() const;
  private:
  int _internal_sorteddrawables_size() const;
  public:
  void clear_sorteddrawables();
  ::TSP::Reference* mutable_sorteddrawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_sorteddrawables();
  private:
  const ::TSP::Reference& _internal_sorteddrawables(int index) const;
  ::TSP::Reference* _internal_add_sorteddrawables();
  public:
  const ::TSP::Reference& sorteddrawables(int index) const;
  ::TSP::Reference* add_sorteddrawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      sorteddrawables() const;

  // repeated .TSP.Reference old_sheet_sidebar_order = 5;
  int old_sheet_sidebar_order_size() const;
  private:
  int _internal_old_sheet_sidebar_order_size() const;
  public:
  void clear_old_sheet_sidebar_order();
  ::TSP::Reference* mutable_old_sheet_sidebar_order(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_old_sheet_sidebar_order();
  private:
  const ::TSP::Reference& _internal_old_sheet_sidebar_order(int index) const;
  ::TSP::Reference* _internal_add_old_sheet_sidebar_order();
  public:
  const ::TSP::Reference& old_sheet_sidebar_order(int index) const;
  ::TSP::Reference* add_old_sheet_sidebar_order();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      old_sheet_sidebar_order() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference sheet = 2;
  bool has_sheet() const;
  private:
  bool _internal_has_sheet() const;
  public:
  void clear_sheet();
  const ::TSP::Reference& sheet() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_sheet();
  ::TSP::Reference* mutable_sheet();
  void set_allocated_sheet(::TSP::Reference* sheet);
  private:
  const ::TSP::Reference& _internal_sheet() const;
  ::TSP::Reference* _internal_mutable_sheet();
  public:
  void unsafe_arena_set_allocated_sheet(
      ::TSP::Reference* sheet);
  ::TSP::Reference* unsafe_arena_release_sheet();

  // required .TSP.IndexSet drawableIndices = 4;
  bool has_drawableindices() const;
  private:
  bool _internal_has_drawableindices() const;
  public:
  void clear_drawableindices();
  const ::TSP::IndexSet& drawableindices() const;
  PROTOBUF_NODISCARD ::TSP::IndexSet* release_drawableindices();
  ::TSP::IndexSet* mutable_drawableindices();
  void set_allocated_drawableindices(::TSP::IndexSet* drawableindices);
  private:
  const ::TSP::IndexSet& _internal_drawableindices() const;
  ::TSP::IndexSet* _internal_mutable_drawableindices();
  public:
  void unsafe_arena_set_allocated_drawableindices(
      ::TSP::IndexSet* drawableindices);
  ::TSP::IndexSet* unsafe_arena_release_drawableindices();

  // optional .TSP.Reference formula_rewrite_command_for_undo = 6;
  bool has_formula_rewrite_command_for_undo() const;
  private:
  bool _internal_has_formula_rewrite_command_for_undo() const;
  public:
  void clear_formula_rewrite_command_for_undo();
  const ::TSP::Reference& formula_rewrite_command_for_undo() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_formula_rewrite_command_for_undo();
  ::TSP::Reference* mutable_formula_rewrite_command_for_undo();
  void set_allocated_formula_rewrite_command_for_undo(::TSP::Reference* formula_rewrite_command_for_undo);
  private:
  const ::TSP::Reference& _internal_formula_rewrite_command_for_undo() const;
  ::TSP::Reference* _internal_mutable_formula_rewrite_command_for_undo();
  public:
  void unsafe_arena_set_allocated_formula_rewrite_command_for_undo(
      ::TSP::Reference* formula_rewrite_command_for_undo);
  ::TSP::Reference* unsafe_arena_release_formula_rewrite_command_for_undo();

  // @@protoc_insertion_point(class_scope:TN.CommandSheetRemoveDrawablesArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > sorteddrawables_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > old_sheet_sidebar_order_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* sheet_;
    ::TSP::IndexSet* drawableindices_;
    ::TSP::Reference* formula_rewrite_command_for_undo_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSheetMoveDrawableZOrderArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandSheetMoveDrawableZOrderArchive) */ {
 public:
  inline CommandSheetMoveDrawableZOrderArchive() : CommandSheetMoveDrawableZOrderArchive(nullptr) {}
  ~CommandSheetMoveDrawableZOrderArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSheetMoveDrawableZOrderArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSheetMoveDrawableZOrderArchive(const CommandSheetMoveDrawableZOrderArchive& from);
  CommandSheetMoveDrawableZOrderArchive(CommandSheetMoveDrawableZOrderArchive&& from) noexcept
    : CommandSheetMoveDrawableZOrderArchive() {
    *this = ::std::move(from);
  }

  inline CommandSheetMoveDrawableZOrderArchive& operator=(const CommandSheetMoveDrawableZOrderArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSheetMoveDrawableZOrderArchive& operator=(CommandSheetMoveDrawableZOrderArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSheetMoveDrawableZOrderArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSheetMoveDrawableZOrderArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSheetMoveDrawableZOrderArchive*>(
               &_CommandSheetMoveDrawableZOrderArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CommandSheetMoveDrawableZOrderArchive& a, CommandSheetMoveDrawableZOrderArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSheetMoveDrawableZOrderArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSheetMoveDrawableZOrderArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSheetMoveDrawableZOrderArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSheetMoveDrawableZOrderArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSheetMoveDrawableZOrderArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSheetMoveDrawableZOrderArchive& from) {
    CommandSheetMoveDrawableZOrderArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSheetMoveDrawableZOrderArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandSheetMoveDrawableZOrderArchive";
  }
  protected:
  explicit CommandSheetMoveDrawableZOrderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawableInfosFieldNumber = 3,
    kSuperFieldNumber = 1,
    kSheetFieldNumber = 2,
    kIndexesFieldNumber = 4,
  };
  // repeated .TSP.Reference drawable_infos = 3;
  int drawable_infos_size() const;
  private:
  int _internal_drawable_infos_size() const;
  public:
  void clear_drawable_infos();
  ::TSP::Reference* mutable_drawable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_drawable_infos();
  private:
  const ::TSP::Reference& _internal_drawable_infos(int index) const;
  ::TSP::Reference* _internal_add_drawable_infos();
  public:
  const ::TSP::Reference& drawable_infos(int index) const;
  ::TSP::Reference* add_drawable_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      drawable_infos() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference sheet = 2;
  bool has_sheet() const;
  private:
  bool _internal_has_sheet() const;
  public:
  void clear_sheet();
  const ::TSP::Reference& sheet() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_sheet();
  ::TSP::Reference* mutable_sheet();
  void set_allocated_sheet(::TSP::Reference* sheet);
  private:
  const ::TSP::Reference& _internal_sheet() const;
  ::TSP::Reference* _internal_mutable_sheet();
  public:
  void unsafe_arena_set_allocated_sheet(
      ::TSP::Reference* sheet);
  ::TSP::Reference* unsafe_arena_release_sheet();

  // required .TSP.IndexSet indexes = 4;
  bool has_indexes() const;
  private:
  bool _internal_has_indexes() const;
  public:
  void clear_indexes();
  const ::TSP::IndexSet& indexes() const;
  PROTOBUF_NODISCARD ::TSP::IndexSet* release_indexes();
  ::TSP::IndexSet* mutable_indexes();
  void set_allocated_indexes(::TSP::IndexSet* indexes);
  private:
  const ::TSP::IndexSet& _internal_indexes() const;
  ::TSP::IndexSet* _internal_mutable_indexes();
  public:
  void unsafe_arena_set_allocated_indexes(
      ::TSP::IndexSet* indexes);
  ::TSP::IndexSet* unsafe_arena_release_indexes();

  // @@protoc_insertion_point(class_scope:TN.CommandSheetMoveDrawableZOrderArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > drawable_infos_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* sheet_;
    ::TSP::IndexSet* indexes_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandDocumentInsertSheetArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandDocumentInsertSheetArchive) */ {
 public:
  inline CommandDocumentInsertSheetArchive() : CommandDocumentInsertSheetArchive(nullptr) {}
  ~CommandDocumentInsertSheetArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandDocumentInsertSheetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandDocumentInsertSheetArchive(const CommandDocumentInsertSheetArchive& from);
  CommandDocumentInsertSheetArchive(CommandDocumentInsertSheetArchive&& from) noexcept
    : CommandDocumentInsertSheetArchive() {
    *this = ::std::move(from);
  }

  inline CommandDocumentInsertSheetArchive& operator=(const CommandDocumentInsertSheetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandDocumentInsertSheetArchive& operator=(CommandDocumentInsertSheetArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandDocumentInsertSheetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandDocumentInsertSheetArchive* internal_default_instance() {
    return reinterpret_cast<const CommandDocumentInsertSheetArchive*>(
               &_CommandDocumentInsertSheetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CommandDocumentInsertSheetArchive& a, CommandDocumentInsertSheetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandDocumentInsertSheetArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandDocumentInsertSheetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandDocumentInsertSheetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandDocumentInsertSheetArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandDocumentInsertSheetArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandDocumentInsertSheetArchive& from) {
    CommandDocumentInsertSheetArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandDocumentInsertSheetArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandDocumentInsertSheetArchive";
  }
  protected:
  explicit CommandDocumentInsertSheetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocumentFieldNumber = 1,
    kSheetFieldNumber = 2,
    kSuperFieldNumber = 3,
  };
  // required .TSP.Reference document = 1;
  bool has_document() const;
  private:
  bool _internal_has_document() const;
  public:
  void clear_document();
  const ::TSP::Reference& document() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_document();
  ::TSP::Reference* mutable_document();
  void set_allocated_document(::TSP::Reference* document);
  private:
  const ::TSP::Reference& _internal_document() const;
  ::TSP::Reference* _internal_mutable_document();
  public:
  void unsafe_arena_set_allocated_document(
      ::TSP::Reference* document);
  ::TSP::Reference* unsafe_arena_release_document();

  // required .TSP.Reference sheet = 2;
  bool has_sheet() const;
  private:
  bool _internal_has_sheet() const;
  public:
  void clear_sheet();
  const ::TSP::Reference& sheet() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_sheet();
  ::TSP::Reference* mutable_sheet();
  void set_allocated_sheet(::TSP::Reference* sheet);
  private:
  const ::TSP::Reference& _internal_sheet() const;
  ::TSP::Reference* _internal_mutable_sheet();
  public:
  void unsafe_arena_set_allocated_sheet(
      ::TSP::Reference* sheet);
  ::TSP::Reference* unsafe_arena_release_sheet();

  // required .TSK.CommandArchive super = 3;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TN.CommandDocumentInsertSheetArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* document_;
    ::TSP::Reference* sheet_;
    ::TSK::CommandArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandDocumentRemoveSheetArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandDocumentRemoveSheetArchive) */ {
 public:
  inline CommandDocumentRemoveSheetArchive() : CommandDocumentRemoveSheetArchive(nullptr) {}
  ~CommandDocumentRemoveSheetArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandDocumentRemoveSheetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandDocumentRemoveSheetArchive(const CommandDocumentRemoveSheetArchive& from);
  CommandDocumentRemoveSheetArchive(CommandDocumentRemoveSheetArchive&& from) noexcept
    : CommandDocumentRemoveSheetArchive() {
    *this = ::std::move(from);
  }

  inline CommandDocumentRemoveSheetArchive& operator=(const CommandDocumentRemoveSheetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandDocumentRemoveSheetArchive& operator=(CommandDocumentRemoveSheetArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandDocumentRemoveSheetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandDocumentRemoveSheetArchive* internal_default_instance() {
    return reinterpret_cast<const CommandDocumentRemoveSheetArchive*>(
               &_CommandDocumentRemoveSheetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CommandDocumentRemoveSheetArchive& a, CommandDocumentRemoveSheetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandDocumentRemoveSheetArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandDocumentRemoveSheetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandDocumentRemoveSheetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandDocumentRemoveSheetArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandDocumentRemoveSheetArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandDocumentRemoveSheetArchive& from) {
    CommandDocumentRemoveSheetArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandDocumentRemoveSheetArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandDocumentRemoveSheetArchive";
  }
  protected:
  explicit CommandDocumentRemoveSheetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldSheetSidebarOrderFieldNumber = 4,
    kDocumentFieldNumber = 1,
    kSheetFieldNumber = 2,
    kSuperFieldNumber = 5,
    kFormulaRewriteCommandForUndoFieldNumber = 6,
    kIndexFieldNumber = 3,
  };
  // repeated .TSP.Reference old_sheet_sidebar_order = 4;
  int old_sheet_sidebar_order_size() const;
  private:
  int _internal_old_sheet_sidebar_order_size() const;
  public:
  void clear_old_sheet_sidebar_order();
  ::TSP::Reference* mutable_old_sheet_sidebar_order(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_old_sheet_sidebar_order();
  private:
  const ::TSP::Reference& _internal_old_sheet_sidebar_order(int index) const;
  ::TSP::Reference* _internal_add_old_sheet_sidebar_order();
  public:
  const ::TSP::Reference& old_sheet_sidebar_order(int index) const;
  ::TSP::Reference* add_old_sheet_sidebar_order();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      old_sheet_sidebar_order() const;

  // required .TSP.Reference document = 1;
  bool has_document() const;
  private:
  bool _internal_has_document() const;
  public:
  void clear_document();
  const ::TSP::Reference& document() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_document();
  ::TSP::Reference* mutable_document();
  void set_allocated_document(::TSP::Reference* document);
  private:
  const ::TSP::Reference& _internal_document() const;
  ::TSP::Reference* _internal_mutable_document();
  public:
  void unsafe_arena_set_allocated_document(
      ::TSP::Reference* document);
  ::TSP::Reference* unsafe_arena_release_document();

  // required .TSP.Reference sheet = 2;
  bool has_sheet() const;
  private:
  bool _internal_has_sheet() const;
  public:
  void clear_sheet();
  const ::TSP::Reference& sheet() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_sheet();
  ::TSP::Reference* mutable_sheet();
  void set_allocated_sheet(::TSP::Reference* sheet);
  private:
  const ::TSP::Reference& _internal_sheet() const;
  ::TSP::Reference* _internal_mutable_sheet();
  public:
  void unsafe_arena_set_allocated_sheet(
      ::TSP::Reference* sheet);
  ::TSP::Reference* unsafe_arena_release_sheet();

  // required .TSK.CommandArchive super = 5;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference formula_rewrite_command_for_undo = 6;
  bool has_formula_rewrite_command_for_undo() const;
  private:
  bool _internal_has_formula_rewrite_command_for_undo() const;
  public:
  void clear_formula_rewrite_command_for_undo();
  const ::TSP::Reference& formula_rewrite_command_for_undo() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_formula_rewrite_command_for_undo();
  ::TSP::Reference* mutable_formula_rewrite_command_for_undo();
  void set_allocated_formula_rewrite_command_for_undo(::TSP::Reference* formula_rewrite_command_for_undo);
  private:
  const ::TSP::Reference& _internal_formula_rewrite_command_for_undo() const;
  ::TSP::Reference* _internal_mutable_formula_rewrite_command_for_undo();
  public:
  void unsafe_arena_set_allocated_formula_rewrite_command_for_undo(
      ::TSP::Reference* formula_rewrite_command_for_undo);
  ::TSP::Reference* unsafe_arena_release_formula_rewrite_command_for_undo();

  // required uint32 index = 3;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TN.CommandDocumentRemoveSheetArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > old_sheet_sidebar_order_;
    ::TSP::Reference* document_;
    ::TSP::Reference* sheet_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* formula_rewrite_command_for_undo_;
    uint32_t index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandDocumentReplaceLastSheetArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandDocumentReplaceLastSheetArchive) */ {
 public:
  inline CommandDocumentReplaceLastSheetArchive() : CommandDocumentReplaceLastSheetArchive(nullptr) {}
  ~CommandDocumentReplaceLastSheetArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandDocumentReplaceLastSheetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandDocumentReplaceLastSheetArchive(const CommandDocumentReplaceLastSheetArchive& from);
  CommandDocumentReplaceLastSheetArchive(CommandDocumentReplaceLastSheetArchive&& from) noexcept
    : CommandDocumentReplaceLastSheetArchive() {
    *this = ::std::move(from);
  }

  inline CommandDocumentReplaceLastSheetArchive& operator=(const CommandDocumentReplaceLastSheetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandDocumentReplaceLastSheetArchive& operator=(CommandDocumentReplaceLastSheetArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandDocumentReplaceLastSheetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandDocumentReplaceLastSheetArchive* internal_default_instance() {
    return reinterpret_cast<const CommandDocumentReplaceLastSheetArchive*>(
               &_CommandDocumentReplaceLastSheetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CommandDocumentReplaceLastSheetArchive& a, CommandDocumentReplaceLastSheetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandDocumentReplaceLastSheetArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandDocumentReplaceLastSheetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandDocumentReplaceLastSheetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandDocumentReplaceLastSheetArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandDocumentReplaceLastSheetArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandDocumentReplaceLastSheetArchive& from) {
    CommandDocumentReplaceLastSheetArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandDocumentReplaceLastSheetArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandDocumentReplaceLastSheetArchive";
  }
  protected:
  explicit CommandDocumentReplaceLastSheetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocumentFieldNumber = 1,
    kLastSheetFieldNumber = 2,
    kNewSheetFieldNumber = 3,
    kSuperFieldNumber = 4,
    kIndexFieldNumber = 5,
  };
  // required .TSP.Reference document = 1;
  bool has_document() const;
  private:
  bool _internal_has_document() const;
  public:
  void clear_document();
  const ::TSP::Reference& document() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_document();
  ::TSP::Reference* mutable_document();
  void set_allocated_document(::TSP::Reference* document);
  private:
  const ::TSP::Reference& _internal_document() const;
  ::TSP::Reference* _internal_mutable_document();
  public:
  void unsafe_arena_set_allocated_document(
      ::TSP::Reference* document);
  ::TSP::Reference* unsafe_arena_release_document();

  // required .TSP.Reference last_sheet = 2;
  bool has_last_sheet() const;
  private:
  bool _internal_has_last_sheet() const;
  public:
  void clear_last_sheet();
  const ::TSP::Reference& last_sheet() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_last_sheet();
  ::TSP::Reference* mutable_last_sheet();
  void set_allocated_last_sheet(::TSP::Reference* last_sheet);
  private:
  const ::TSP::Reference& _internal_last_sheet() const;
  ::TSP::Reference* _internal_mutable_last_sheet();
  public:
  void unsafe_arena_set_allocated_last_sheet(
      ::TSP::Reference* last_sheet);
  ::TSP::Reference* unsafe_arena_release_last_sheet();

  // required .TSP.Reference new_sheet = 3;
  bool has_new_sheet() const;
  private:
  bool _internal_has_new_sheet() const;
  public:
  void clear_new_sheet();
  const ::TSP::Reference& new_sheet() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_new_sheet();
  ::TSP::Reference* mutable_new_sheet();
  void set_allocated_new_sheet(::TSP::Reference* new_sheet);
  private:
  const ::TSP::Reference& _internal_new_sheet() const;
  ::TSP::Reference* _internal_mutable_new_sheet();
  public:
  void unsafe_arena_set_allocated_new_sheet(
      ::TSP::Reference* new_sheet);
  ::TSP::Reference* unsafe_arena_release_new_sheet();

  // required .TSK.CommandArchive super = 4;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional uint32 index = 5;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TN.CommandDocumentReplaceLastSheetArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* document_;
    ::TSP::Reference* last_sheet_;
    ::TSP::Reference* new_sheet_;
    ::TSK::CommandArchive* super_;
    uint32_t index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandDocumentReorderSheetArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandDocumentReorderSheetArchive) */ {
 public:
  inline CommandDocumentReorderSheetArchive() : CommandDocumentReorderSheetArchive(nullptr) {}
  ~CommandDocumentReorderSheetArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandDocumentReorderSheetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandDocumentReorderSheetArchive(const CommandDocumentReorderSheetArchive& from);
  CommandDocumentReorderSheetArchive(CommandDocumentReorderSheetArchive&& from) noexcept
    : CommandDocumentReorderSheetArchive() {
    *this = ::std::move(from);
  }

  inline CommandDocumentReorderSheetArchive& operator=(const CommandDocumentReorderSheetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandDocumentReorderSheetArchive& operator=(CommandDocumentReorderSheetArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandDocumentReorderSheetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandDocumentReorderSheetArchive* internal_default_instance() {
    return reinterpret_cast<const CommandDocumentReorderSheetArchive*>(
               &_CommandDocumentReorderSheetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CommandDocumentReorderSheetArchive& a, CommandDocumentReorderSheetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandDocumentReorderSheetArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandDocumentReorderSheetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandDocumentReorderSheetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandDocumentReorderSheetArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandDocumentReorderSheetArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandDocumentReorderSheetArchive& from) {
    CommandDocumentReorderSheetArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandDocumentReorderSheetArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandDocumentReorderSheetArchive";
  }
  protected:
  explicit CommandDocumentReorderSheetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocumentFieldNumber = 1,
    kSheetFieldNumber = 2,
    kSuperFieldNumber = 5,
    kSourceIndexFieldNumber = 3,
    kDestIndexFieldNumber = 4,
  };
  // required .TSP.Reference document = 1;
  bool has_document() const;
  private:
  bool _internal_has_document() const;
  public:
  void clear_document();
  const ::TSP::Reference& document() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_document();
  ::TSP::Reference* mutable_document();
  void set_allocated_document(::TSP::Reference* document);
  private:
  const ::TSP::Reference& _internal_document() const;
  ::TSP::Reference* _internal_mutable_document();
  public:
  void unsafe_arena_set_allocated_document(
      ::TSP::Reference* document);
  ::TSP::Reference* unsafe_arena_release_document();

  // required .TSP.Reference sheet = 2;
  bool has_sheet() const;
  private:
  bool _internal_has_sheet() const;
  public:
  void clear_sheet();
  const ::TSP::Reference& sheet() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_sheet();
  ::TSP::Reference* mutable_sheet();
  void set_allocated_sheet(::TSP::Reference* sheet);
  private:
  const ::TSP::Reference& _internal_sheet() const;
  ::TSP::Reference* _internal_mutable_sheet();
  public:
  void unsafe_arena_set_allocated_sheet(
      ::TSP::Reference* sheet);
  ::TSP::Reference* unsafe_arena_release_sheet();

  // required .TSK.CommandArchive super = 5;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required uint32 source_index = 3;
  bool has_source_index() const;
  private:
  bool _internal_has_source_index() const;
  public:
  void clear_source_index();
  uint32_t source_index() const;
  void set_source_index(uint32_t value);
  private:
  uint32_t _internal_source_index() const;
  void _internal_set_source_index(uint32_t value);
  public:

  // required uint32 dest_index = 4;
  bool has_dest_index() const;
  private:
  bool _internal_has_dest_index() const;
  public:
  void clear_dest_index();
  uint32_t dest_index() const;
  void set_dest_index(uint32_t value);
  private:
  uint32_t _internal_dest_index() const;
  void _internal_set_dest_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TN.CommandDocumentReorderSheetArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* document_;
    ::TSP::Reference* sheet_;
    ::TSK::CommandArchive* super_;
    uint32_t source_index_;
    uint32_t dest_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetSheetNameArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandSetSheetNameArchive) */ {
 public:
  inline CommandSetSheetNameArchive() : CommandSetSheetNameArchive(nullptr) {}
  ~CommandSetSheetNameArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetSheetNameArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetSheetNameArchive(const CommandSetSheetNameArchive& from);
  CommandSetSheetNameArchive(CommandSetSheetNameArchive&& from) noexcept
    : CommandSetSheetNameArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetSheetNameArchive& operator=(const CommandSetSheetNameArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetSheetNameArchive& operator=(CommandSetSheetNameArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetSheetNameArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetSheetNameArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetSheetNameArchive*>(
               &_CommandSetSheetNameArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CommandSetSheetNameArchive& a, CommandSetSheetNameArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetSheetNameArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetSheetNameArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetSheetNameArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetSheetNameArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetSheetNameArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetSheetNameArchive& from) {
    CommandSetSheetNameArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetSheetNameArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandSetSheetNameArchive";
  }
  protected:
  explicit CommandSetSheetNameArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewnameFieldNumber = 1,
    kOldnameFieldNumber = 2,
    kSheetFieldNumber = 3,
    kSuperFieldNumber = 4,
  };
  // required string newname = 1;
  bool has_newname() const;
  private:
  bool _internal_has_newname() const;
  public:
  void clear_newname();
  const std::string& newname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_newname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_newname();
  PROTOBUF_NODISCARD std::string* release_newname();
  void set_allocated_newname(std::string* newname);
  private:
  const std::string& _internal_newname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_newname(const std::string& value);
  std::string* _internal_mutable_newname();
  public:

  // required string oldname = 2;
  bool has_oldname() const;
  private:
  bool _internal_has_oldname() const;
  public:
  void clear_oldname();
  const std::string& oldname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oldname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oldname();
  PROTOBUF_NODISCARD std::string* release_oldname();
  void set_allocated_oldname(std::string* oldname);
  private:
  const std::string& _internal_oldname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oldname(const std::string& value);
  std::string* _internal_mutable_oldname();
  public:

  // required .TSP.Reference sheet = 3;
  bool has_sheet() const;
  private:
  bool _internal_has_sheet() const;
  public:
  void clear_sheet();
  const ::TSP::Reference& sheet() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_sheet();
  ::TSP::Reference* mutable_sheet();
  void set_allocated_sheet(::TSP::Reference* sheet);
  private:
  const ::TSP::Reference& _internal_sheet() const;
  ::TSP::Reference* _internal_mutable_sheet();
  public:
  void unsafe_arena_set_allocated_sheet(
      ::TSP::Reference* sheet);
  ::TSP::Reference* unsafe_arena_release_sheet();

  // required .TSK.CommandArchive super = 4;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TN.CommandSetSheetNameArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oldname_;
    ::TSP::Reference* sheet_;
    ::TSK::CommandArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetPageOrientationArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandSetPageOrientationArchive) */ {
 public:
  inline CommandSetPageOrientationArchive() : CommandSetPageOrientationArchive(nullptr) {}
  ~CommandSetPageOrientationArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetPageOrientationArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetPageOrientationArchive(const CommandSetPageOrientationArchive& from);
  CommandSetPageOrientationArchive(CommandSetPageOrientationArchive&& from) noexcept
    : CommandSetPageOrientationArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetPageOrientationArchive& operator=(const CommandSetPageOrientationArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetPageOrientationArchive& operator=(CommandSetPageOrientationArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetPageOrientationArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetPageOrientationArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetPageOrientationArchive*>(
               &_CommandSetPageOrientationArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CommandSetPageOrientationArchive& a, CommandSetPageOrientationArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetPageOrientationArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetPageOrientationArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetPageOrientationArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetPageOrientationArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetPageOrientationArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetPageOrientationArchive& from) {
    CommandSetPageOrientationArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetPageOrientationArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandSetPageOrientationArchive";
  }
  protected:
  explicit CommandSetPageOrientationArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSheetFieldNumber = 2,
    kSuperFieldNumber = 3,
    kInPortraitPageOrientationFieldNumber = 1,
  };
  // required .TSP.Reference sheet = 2;
  bool has_sheet() const;
  private:
  bool _internal_has_sheet() const;
  public:
  void clear_sheet();
  const ::TSP::Reference& sheet() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_sheet();
  ::TSP::Reference* mutable_sheet();
  void set_allocated_sheet(::TSP::Reference* sheet);
  private:
  const ::TSP::Reference& _internal_sheet() const;
  ::TSP::Reference* _internal_mutable_sheet();
  public:
  void unsafe_arena_set_allocated_sheet(
      ::TSP::Reference* sheet);
  ::TSP::Reference* unsafe_arena_release_sheet();

  // required .TSK.CommandArchive super = 3;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required bool in_portrait_page_orientation = 1;
  bool has_in_portrait_page_orientation() const;
  private:
  bool _internal_has_in_portrait_page_orientation() const;
  public:
  void clear_in_portrait_page_orientation();
  bool in_portrait_page_orientation() const;
  void set_in_portrait_page_orientation(bool value);
  private:
  bool _internal_in_portrait_page_orientation() const;
  void _internal_set_in_portrait_page_orientation(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TN.CommandSetPageOrientationArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* sheet_;
    ::TSK::CommandArchive* super_;
    bool in_portrait_page_orientation_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetShowPageNumbersValueArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandSetShowPageNumbersValueArchive) */ {
 public:
  inline CommandSetShowPageNumbersValueArchive() : CommandSetShowPageNumbersValueArchive(nullptr) {}
  ~CommandSetShowPageNumbersValueArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetShowPageNumbersValueArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetShowPageNumbersValueArchive(const CommandSetShowPageNumbersValueArchive& from);
  CommandSetShowPageNumbersValueArchive(CommandSetShowPageNumbersValueArchive&& from) noexcept
    : CommandSetShowPageNumbersValueArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetShowPageNumbersValueArchive& operator=(const CommandSetShowPageNumbersValueArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetShowPageNumbersValueArchive& operator=(CommandSetShowPageNumbersValueArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetShowPageNumbersValueArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetShowPageNumbersValueArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetShowPageNumbersValueArchive*>(
               &_CommandSetShowPageNumbersValueArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CommandSetShowPageNumbersValueArchive& a, CommandSetShowPageNumbersValueArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetShowPageNumbersValueArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetShowPageNumbersValueArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetShowPageNumbersValueArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetShowPageNumbersValueArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetShowPageNumbersValueArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetShowPageNumbersValueArchive& from) {
    CommandSetShowPageNumbersValueArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetShowPageNumbersValueArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandSetShowPageNumbersValueArchive";
  }
  protected:
  explicit CommandSetShowPageNumbersValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSheetFieldNumber = 2,
    kSuperFieldNumber = 3,
    kShowPageNumbersFieldNumber = 1,
  };
  // required .TSP.Reference sheet = 2;
  bool has_sheet() const;
  private:
  bool _internal_has_sheet() const;
  public:
  void clear_sheet();
  const ::TSP::Reference& sheet() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_sheet();
  ::TSP::Reference* mutable_sheet();
  void set_allocated_sheet(::TSP::Reference* sheet);
  private:
  const ::TSP::Reference& _internal_sheet() const;
  ::TSP::Reference* _internal_mutable_sheet();
  public:
  void unsafe_arena_set_allocated_sheet(
      ::TSP::Reference* sheet);
  ::TSP::Reference* unsafe_arena_release_sheet();

  // required .TSK.CommandArchive super = 3;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required bool show_page_numbers = 1;
  bool has_show_page_numbers() const;
  private:
  bool _internal_has_show_page_numbers() const;
  public:
  void clear_show_page_numbers();
  bool show_page_numbers() const;
  void set_show_page_numbers(bool value);
  private:
  bool _internal_show_page_numbers() const;
  void _internal_set_show_page_numbers(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TN.CommandSetShowPageNumbersValueArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* sheet_;
    ::TSK::CommandArchive* super_;
    bool show_page_numbers_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetRepeatingHeadersValueArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandSetRepeatingHeadersValueArchive) */ {
 public:
  inline CommandSetRepeatingHeadersValueArchive() : CommandSetRepeatingHeadersValueArchive(nullptr) {}
  ~CommandSetRepeatingHeadersValueArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetRepeatingHeadersValueArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetRepeatingHeadersValueArchive(const CommandSetRepeatingHeadersValueArchive& from);
  CommandSetRepeatingHeadersValueArchive(CommandSetRepeatingHeadersValueArchive&& from) noexcept
    : CommandSetRepeatingHeadersValueArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetRepeatingHeadersValueArchive& operator=(const CommandSetRepeatingHeadersValueArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetRepeatingHeadersValueArchive& operator=(CommandSetRepeatingHeadersValueArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetRepeatingHeadersValueArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetRepeatingHeadersValueArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetRepeatingHeadersValueArchive*>(
               &_CommandSetRepeatingHeadersValueArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CommandSetRepeatingHeadersValueArchive& a, CommandSetRepeatingHeadersValueArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetRepeatingHeadersValueArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetRepeatingHeadersValueArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetRepeatingHeadersValueArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetRepeatingHeadersValueArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetRepeatingHeadersValueArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetRepeatingHeadersValueArchive& from) {
    CommandSetRepeatingHeadersValueArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetRepeatingHeadersValueArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandSetRepeatingHeadersValueArchive";
  }
  protected:
  explicit CommandSetRepeatingHeadersValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSheetFieldNumber = 2,
    kSuperFieldNumber = 3,
    kShowRepeatingHeadersFieldNumber = 1,
  };
  // required .TSP.Reference sheet = 2;
  bool has_sheet() const;
  private:
  bool _internal_has_sheet() const;
  public:
  void clear_sheet();
  const ::TSP::Reference& sheet() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_sheet();
  ::TSP::Reference* mutable_sheet();
  void set_allocated_sheet(::TSP::Reference* sheet);
  private:
  const ::TSP::Reference& _internal_sheet() const;
  ::TSP::Reference* _internal_mutable_sheet();
  public:
  void unsafe_arena_set_allocated_sheet(
      ::TSP::Reference* sheet);
  ::TSP::Reference* unsafe_arena_release_sheet();

  // required .TSK.CommandArchive super = 3;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required bool show_repeating_headers = 1;
  bool has_show_repeating_headers() const;
  private:
  bool _internal_has_show_repeating_headers() const;
  public:
  void clear_show_repeating_headers();
  bool show_repeating_headers() const;
  void set_show_repeating_headers(bool value);
  private:
  bool _internal_show_repeating_headers() const;
  void _internal_set_show_repeating_headers(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TN.CommandSetRepeatingHeadersValueArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* sheet_;
    ::TSK::CommandArchive* super_;
    bool show_repeating_headers_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetContentScaleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandSetContentScaleArchive) */ {
 public:
  inline CommandSetContentScaleArchive() : CommandSetContentScaleArchive(nullptr) {}
  ~CommandSetContentScaleArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetContentScaleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetContentScaleArchive(const CommandSetContentScaleArchive& from);
  CommandSetContentScaleArchive(CommandSetContentScaleArchive&& from) noexcept
    : CommandSetContentScaleArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetContentScaleArchive& operator=(const CommandSetContentScaleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetContentScaleArchive& operator=(CommandSetContentScaleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetContentScaleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetContentScaleArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetContentScaleArchive*>(
               &_CommandSetContentScaleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CommandSetContentScaleArchive& a, CommandSetContentScaleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetContentScaleArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetContentScaleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetContentScaleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetContentScaleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetContentScaleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetContentScaleArchive& from) {
    CommandSetContentScaleArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetContentScaleArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandSetContentScaleArchive";
  }
  protected:
  explicit CommandSetContentScaleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSheetFieldNumber = 4,
    kSuperFieldNumber = 5,
    kIsAutofitOnFieldNumber = 1,
    kOldContentScaleFieldNumber = 2,
    kNewContentScaleFieldNumber = 3,
  };
  // required .TSP.Reference sheet = 4;
  bool has_sheet() const;
  private:
  bool _internal_has_sheet() const;
  public:
  void clear_sheet();
  const ::TSP::Reference& sheet() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_sheet();
  ::TSP::Reference* mutable_sheet();
  void set_allocated_sheet(::TSP::Reference* sheet);
  private:
  const ::TSP::Reference& _internal_sheet() const;
  ::TSP::Reference* _internal_mutable_sheet();
  public:
  void unsafe_arena_set_allocated_sheet(
      ::TSP::Reference* sheet);
  ::TSP::Reference* unsafe_arena_release_sheet();

  // required .TSK.CommandArchive super = 5;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required bool is_autofit_on = 1;
  bool has_is_autofit_on() const;
  private:
  bool _internal_has_is_autofit_on() const;
  public:
  void clear_is_autofit_on();
  bool is_autofit_on() const;
  void set_is_autofit_on(bool value);
  private:
  bool _internal_is_autofit_on() const;
  void _internal_set_is_autofit_on(bool value);
  public:

  // required float old_content_scale = 2;
  bool has_old_content_scale() const;
  private:
  bool _internal_has_old_content_scale() const;
  public:
  void clear_old_content_scale();
  float old_content_scale() const;
  void set_old_content_scale(float value);
  private:
  float _internal_old_content_scale() const;
  void _internal_set_old_content_scale(float value);
  public:

  // optional float new_content_scale = 3;
  bool has_new_content_scale() const;
  private:
  bool _internal_has_new_content_scale() const;
  public:
  void clear_new_content_scale();
  float new_content_scale() const;
  void set_new_content_scale(float value);
  private:
  float _internal_new_content_scale() const;
  void _internal_set_new_content_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:TN.CommandSetContentScaleArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* sheet_;
    ::TSK::CommandArchive* super_;
    bool is_autofit_on_;
    float old_content_scale_;
    float new_content_scale_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetAutofitValueArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandSetAutofitValueArchive) */ {
 public:
  inline CommandSetAutofitValueArchive() : CommandSetAutofitValueArchive(nullptr) {}
  ~CommandSetAutofitValueArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetAutofitValueArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetAutofitValueArchive(const CommandSetAutofitValueArchive& from);
  CommandSetAutofitValueArchive(CommandSetAutofitValueArchive&& from) noexcept
    : CommandSetAutofitValueArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetAutofitValueArchive& operator=(const CommandSetAutofitValueArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetAutofitValueArchive& operator=(CommandSetAutofitValueArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetAutofitValueArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetAutofitValueArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetAutofitValueArchive*>(
               &_CommandSetAutofitValueArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CommandSetAutofitValueArchive& a, CommandSetAutofitValueArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetAutofitValueArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetAutofitValueArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetAutofitValueArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetAutofitValueArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetAutofitValueArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetAutofitValueArchive& from) {
    CommandSetAutofitValueArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetAutofitValueArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandSetAutofitValueArchive";
  }
  protected:
  explicit CommandSetAutofitValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSheetFieldNumber = 2,
    kSuperFieldNumber = 3,
    kOldContentScaleFieldNumber = 1,
  };
  // required .TSP.Reference sheet = 2;
  bool has_sheet() const;
  private:
  bool _internal_has_sheet() const;
  public:
  void clear_sheet();
  const ::TSP::Reference& sheet() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_sheet();
  ::TSP::Reference* mutable_sheet();
  void set_allocated_sheet(::TSP::Reference* sheet);
  private:
  const ::TSP::Reference& _internal_sheet() const;
  ::TSP::Reference* _internal_mutable_sheet();
  public:
  void unsafe_arena_set_allocated_sheet(
      ::TSP::Reference* sheet);
  ::TSP::Reference* unsafe_arena_release_sheet();

  // required .TSK.CommandArchive super = 3;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required float old_content_scale = 1;
  bool has_old_content_scale() const;
  private:
  bool _internal_has_old_content_scale() const;
  public:
  void clear_old_content_scale();
  float old_content_scale() const;
  void set_old_content_scale(float value);
  private:
  float _internal_old_content_scale() const;
  void _internal_set_old_content_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:TN.CommandSetAutofitValueArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* sheet_;
    ::TSK::CommandArchive* super_;
    float old_content_scale_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetDocumentPrinterOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandSetDocumentPrinterOptions) */ {
 public:
  inline CommandSetDocumentPrinterOptions() : CommandSetDocumentPrinterOptions(nullptr) {}
  ~CommandSetDocumentPrinterOptions() override;
  explicit PROTOBUF_CONSTEXPR CommandSetDocumentPrinterOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetDocumentPrinterOptions(const CommandSetDocumentPrinterOptions& from);
  CommandSetDocumentPrinterOptions(CommandSetDocumentPrinterOptions&& from) noexcept
    : CommandSetDocumentPrinterOptions() {
    *this = ::std::move(from);
  }

  inline CommandSetDocumentPrinterOptions& operator=(const CommandSetDocumentPrinterOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetDocumentPrinterOptions& operator=(CommandSetDocumentPrinterOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetDocumentPrinterOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetDocumentPrinterOptions* internal_default_instance() {
    return reinterpret_cast<const CommandSetDocumentPrinterOptions*>(
               &_CommandSetDocumentPrinterOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CommandSetDocumentPrinterOptions& a, CommandSetDocumentPrinterOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetDocumentPrinterOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetDocumentPrinterOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetDocumentPrinterOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetDocumentPrinterOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetDocumentPrinterOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetDocumentPrinterOptions& from) {
    CommandSetDocumentPrinterOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetDocumentPrinterOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandSetDocumentPrinterOptions";
  }
  protected:
  explicit CommandSetDocumentPrinterOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrinterIdFieldNumber = 1,
    kPaperIdFieldNumber = 2,
    kPageSizeFieldNumber = 3,
    kSuperFieldNumber = 4,
  };
  // required string printer_id = 1;
  bool has_printer_id() const;
  private:
  bool _internal_has_printer_id() const;
  public:
  void clear_printer_id();
  const std::string& printer_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_printer_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_printer_id();
  PROTOBUF_NODISCARD std::string* release_printer_id();
  void set_allocated_printer_id(std::string* printer_id);
  private:
  const std::string& _internal_printer_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_printer_id(const std::string& value);
  std::string* _internal_mutable_printer_id();
  public:

  // required string paper_id = 2;
  bool has_paper_id() const;
  private:
  bool _internal_has_paper_id() const;
  public:
  void clear_paper_id();
  const std::string& paper_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_paper_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_paper_id();
  PROTOBUF_NODISCARD std::string* release_paper_id();
  void set_allocated_paper_id(std::string* paper_id);
  private:
  const std::string& _internal_paper_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_paper_id(const std::string& value);
  std::string* _internal_mutable_paper_id();
  public:

  // required .TSP.Size page_size = 3;
  bool has_page_size() const;
  private:
  bool _internal_has_page_size() const;
  public:
  void clear_page_size();
  const ::TSP::Size& page_size() const;
  PROTOBUF_NODISCARD ::TSP::Size* release_page_size();
  ::TSP::Size* mutable_page_size();
  void set_allocated_page_size(::TSP::Size* page_size);
  private:
  const ::TSP::Size& _internal_page_size() const;
  ::TSP::Size* _internal_mutable_page_size();
  public:
  void unsafe_arena_set_allocated_page_size(
      ::TSP::Size* page_size);
  ::TSP::Size* unsafe_arena_release_page_size();

  // required .TSK.CommandArchive super = 4;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TN.CommandSetDocumentPrinterOptions)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr printer_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paper_id_;
    ::TSP::Size* page_size_;
    ::TSK::CommandArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandEnterPrintPreviewModeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandEnterPrintPreviewModeArchive) */ {
 public:
  inline CommandEnterPrintPreviewModeArchive() : CommandEnterPrintPreviewModeArchive(nullptr) {}
  ~CommandEnterPrintPreviewModeArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandEnterPrintPreviewModeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandEnterPrintPreviewModeArchive(const CommandEnterPrintPreviewModeArchive& from);
  CommandEnterPrintPreviewModeArchive(CommandEnterPrintPreviewModeArchive&& from) noexcept
    : CommandEnterPrintPreviewModeArchive() {
    *this = ::std::move(from);
  }

  inline CommandEnterPrintPreviewModeArchive& operator=(const CommandEnterPrintPreviewModeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandEnterPrintPreviewModeArchive& operator=(CommandEnterPrintPreviewModeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandEnterPrintPreviewModeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandEnterPrintPreviewModeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandEnterPrintPreviewModeArchive*>(
               &_CommandEnterPrintPreviewModeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CommandEnterPrintPreviewModeArchive& a, CommandEnterPrintPreviewModeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandEnterPrintPreviewModeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandEnterPrintPreviewModeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandEnterPrintPreviewModeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandEnterPrintPreviewModeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandEnterPrintPreviewModeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandEnterPrintPreviewModeArchive& from) {
    CommandEnterPrintPreviewModeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandEnterPrintPreviewModeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandEnterPrintPreviewModeArchive";
  }
  protected:
  explicit CommandEnterPrintPreviewModeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TN.CommandEnterPrintPreviewModeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandExitPrintPreviewModeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandExitPrintPreviewModeArchive) */ {
 public:
  inline CommandExitPrintPreviewModeArchive() : CommandExitPrintPreviewModeArchive(nullptr) {}
  ~CommandExitPrintPreviewModeArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandExitPrintPreviewModeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandExitPrintPreviewModeArchive(const CommandExitPrintPreviewModeArchive& from);
  CommandExitPrintPreviewModeArchive(CommandExitPrintPreviewModeArchive&& from) noexcept
    : CommandExitPrintPreviewModeArchive() {
    *this = ::std::move(from);
  }

  inline CommandExitPrintPreviewModeArchive& operator=(const CommandExitPrintPreviewModeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandExitPrintPreviewModeArchive& operator=(CommandExitPrintPreviewModeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandExitPrintPreviewModeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandExitPrintPreviewModeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandExitPrintPreviewModeArchive*>(
               &_CommandExitPrintPreviewModeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CommandExitPrintPreviewModeArchive& a, CommandExitPrintPreviewModeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandExitPrintPreviewModeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandExitPrintPreviewModeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandExitPrintPreviewModeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandExitPrintPreviewModeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandExitPrintPreviewModeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandExitPrintPreviewModeArchive& from) {
    CommandExitPrintPreviewModeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandExitPrintPreviewModeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandExitPrintPreviewModeArchive";
  }
  protected:
  explicit CommandExitPrintPreviewModeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TN.CommandExitPrintPreviewModeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandPasteDrawablesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandPasteDrawablesArchive) */ {
 public:
  inline CommandPasteDrawablesArchive() : CommandPasteDrawablesArchive(nullptr) {}
  ~CommandPasteDrawablesArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandPasteDrawablesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandPasteDrawablesArchive(const CommandPasteDrawablesArchive& from);
  CommandPasteDrawablesArchive(CommandPasteDrawablesArchive&& from) noexcept
    : CommandPasteDrawablesArchive() {
    *this = ::std::move(from);
  }

  inline CommandPasteDrawablesArchive& operator=(const CommandPasteDrawablesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandPasteDrawablesArchive& operator=(CommandPasteDrawablesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandPasteDrawablesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandPasteDrawablesArchive* internal_default_instance() {
    return reinterpret_cast<const CommandPasteDrawablesArchive*>(
               &_CommandPasteDrawablesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CommandPasteDrawablesArchive& a, CommandPasteDrawablesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandPasteDrawablesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandPasteDrawablesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandPasteDrawablesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandPasteDrawablesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandPasteDrawablesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandPasteDrawablesArchive& from) {
    CommandPasteDrawablesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandPasteDrawablesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandPasteDrawablesArchive";
  }
  protected:
  explicit CommandPasteDrawablesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawablesFieldNumber = 3,
    kSuperFieldNumber = 1,
    kSheetFieldNumber = 2,
  };
  // repeated .TSP.Reference drawables = 3;
  int drawables_size() const;
  private:
  int _internal_drawables_size() const;
  public:
  void clear_drawables();
  ::TSP::Reference* mutable_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_drawables();
  private:
  const ::TSP::Reference& _internal_drawables(int index) const;
  ::TSP::Reference* _internal_add_drawables();
  public:
  const ::TSP::Reference& drawables(int index) const;
  ::TSP::Reference* add_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      drawables() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference sheet = 2;
  bool has_sheet() const;
  private:
  bool _internal_has_sheet() const;
  public:
  void clear_sheet();
  const ::TSP::Reference& sheet() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_sheet();
  ::TSP::Reference* mutable_sheet();
  void set_allocated_sheet(::TSP::Reference* sheet);
  private:
  const ::TSP::Reference& _internal_sheet() const;
  ::TSP::Reference* _internal_mutable_sheet();
  public:
  void unsafe_arena_set_allocated_sheet(
      ::TSP::Reference* sheet);
  ::TSP::Reference* unsafe_arena_release_sheet();

  // @@protoc_insertion_point(class_scope:TN.CommandPasteDrawablesArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > drawables_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* sheet_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandPasteSheetArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandPasteSheetArchive) */ {
 public:
  inline CommandPasteSheetArchive() : CommandPasteSheetArchive(nullptr) {}
  ~CommandPasteSheetArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandPasteSheetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandPasteSheetArchive(const CommandPasteSheetArchive& from);
  CommandPasteSheetArchive(CommandPasteSheetArchive&& from) noexcept
    : CommandPasteSheetArchive() {
    *this = ::std::move(from);
  }

  inline CommandPasteSheetArchive& operator=(const CommandPasteSheetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandPasteSheetArchive& operator=(CommandPasteSheetArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandPasteSheetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandPasteSheetArchive* internal_default_instance() {
    return reinterpret_cast<const CommandPasteSheetArchive*>(
               &_CommandPasteSheetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CommandPasteSheetArchive& a, CommandPasteSheetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandPasteSheetArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandPasteSheetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandPasteSheetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandPasteSheetArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandPasteSheetArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandPasteSheetArchive& from) {
    CommandPasteSheetArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandPasteSheetArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandPasteSheetArchive";
  }
  protected:
  explicit CommandPasteSheetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kDocumentFieldNumber = 2,
    kSheetFieldNumber = 3,
    kSheetUistateFieldNumber = 4,
    kSheetIndexFieldNumber = 5,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference document = 2;
  bool has_document() const;
  private:
  bool _internal_has_document() const;
  public:
  void clear_document();
  const ::TSP::Reference& document() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_document();
  ::TSP::Reference* mutable_document();
  void set_allocated_document(::TSP::Reference* document);
  private:
  const ::TSP::Reference& _internal_document() const;
  ::TSP::Reference* _internal_mutable_document();
  public:
  void unsafe_arena_set_allocated_document(
      ::TSP::Reference* document);
  ::TSP::Reference* unsafe_arena_release_document();

  // required .TSP.Reference sheet = 3;
  bool has_sheet() const;
  private:
  bool _internal_has_sheet() const;
  public:
  void clear_sheet();
  const ::TSP::Reference& sheet() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_sheet();
  ::TSP::Reference* mutable_sheet();
  void set_allocated_sheet(::TSP::Reference* sheet);
  private:
  const ::TSP::Reference& _internal_sheet() const;
  ::TSP::Reference* _internal_mutable_sheet();
  public:
  void unsafe_arena_set_allocated_sheet(
      ::TSP::Reference* sheet);
  ::TSP::Reference* unsafe_arena_release_sheet();

  // optional .TN.SheetUIStateArchive sheet_uistate = 4;
  bool has_sheet_uistate() const;
  private:
  bool _internal_has_sheet_uistate() const;
  public:
  void clear_sheet_uistate();
  const ::TN::SheetUIStateArchive& sheet_uistate() const;
  PROTOBUF_NODISCARD ::TN::SheetUIStateArchive* release_sheet_uistate();
  ::TN::SheetUIStateArchive* mutable_sheet_uistate();
  void set_allocated_sheet_uistate(::TN::SheetUIStateArchive* sheet_uistate);
  private:
  const ::TN::SheetUIStateArchive& _internal_sheet_uistate() const;
  ::TN::SheetUIStateArchive* _internal_mutable_sheet_uistate();
  public:
  void unsafe_arena_set_allocated_sheet_uistate(
      ::TN::SheetUIStateArchive* sheet_uistate);
  ::TN::SheetUIStateArchive* unsafe_arena_release_sheet_uistate();

  // required uint32 sheetIndex = 5;
  bool has_sheetindex() const;
  private:
  bool _internal_has_sheetindex() const;
  public:
  void clear_sheetindex();
  uint32_t sheetindex() const;
  void set_sheetindex(uint32_t value);
  private:
  uint32_t _internal_sheetindex() const;
  void _internal_set_sheetindex(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TN.CommandPasteSheetArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* document_;
    ::TSP::Reference* sheet_;
    ::TN::SheetUIStateArchive* sheet_uistate_;
    uint32_t sheetindex_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandReorderSidebarItemChildrenAchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandReorderSidebarItemChildrenAchive) */ {
 public:
  inline CommandReorderSidebarItemChildrenAchive() : CommandReorderSidebarItemChildrenAchive(nullptr) {}
  ~CommandReorderSidebarItemChildrenAchive() override;
  explicit PROTOBUF_CONSTEXPR CommandReorderSidebarItemChildrenAchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandReorderSidebarItemChildrenAchive(const CommandReorderSidebarItemChildrenAchive& from);
  CommandReorderSidebarItemChildrenAchive(CommandReorderSidebarItemChildrenAchive&& from) noexcept
    : CommandReorderSidebarItemChildrenAchive() {
    *this = ::std::move(from);
  }

  inline CommandReorderSidebarItemChildrenAchive& operator=(const CommandReorderSidebarItemChildrenAchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandReorderSidebarItemChildrenAchive& operator=(CommandReorderSidebarItemChildrenAchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandReorderSidebarItemChildrenAchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandReorderSidebarItemChildrenAchive* internal_default_instance() {
    return reinterpret_cast<const CommandReorderSidebarItemChildrenAchive*>(
               &_CommandReorderSidebarItemChildrenAchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CommandReorderSidebarItemChildrenAchive& a, CommandReorderSidebarItemChildrenAchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandReorderSidebarItemChildrenAchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandReorderSidebarItemChildrenAchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandReorderSidebarItemChildrenAchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandReorderSidebarItemChildrenAchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandReorderSidebarItemChildrenAchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandReorderSidebarItemChildrenAchive& from) {
    CommandReorderSidebarItemChildrenAchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandReorderSidebarItemChildrenAchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandReorderSidebarItemChildrenAchive";
  }
  protected:
  explicit CommandReorderSidebarItemChildrenAchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldChildrenFieldNumber = 3,
    kNewChildrenFieldNumber = 4,
    kSuperFieldNumber = 1,
    kSheetFieldNumber = 2,
  };
  // repeated .TSP.Reference old_children = 3;
  int old_children_size() const;
  private:
  int _internal_old_children_size() const;
  public:
  void clear_old_children();
  ::TSP::Reference* mutable_old_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_old_children();
  private:
  const ::TSP::Reference& _internal_old_children(int index) const;
  ::TSP::Reference* _internal_add_old_children();
  public:
  const ::TSP::Reference& old_children(int index) const;
  ::TSP::Reference* add_old_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      old_children() const;

  // repeated .TSP.Reference new_children = 4;
  int new_children_size() const;
  private:
  int _internal_new_children_size() const;
  public:
  void clear_new_children();
  ::TSP::Reference* mutable_new_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_new_children();
  private:
  const ::TSP::Reference& _internal_new_children(int index) const;
  ::TSP::Reference* _internal_add_new_children();
  public:
  const ::TSP::Reference& new_children(int index) const;
  ::TSP::Reference* add_new_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      new_children() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference sheet = 2;
  bool has_sheet() const;
  private:
  bool _internal_has_sheet() const;
  public:
  void clear_sheet();
  const ::TSP::Reference& sheet() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_sheet();
  ::TSP::Reference* mutable_sheet();
  void set_allocated_sheet(::TSP::Reference* sheet);
  private:
  const ::TSP::Reference& _internal_sheet() const;
  ::TSP::Reference* _internal_mutable_sheet();
  public:
  void unsafe_arena_set_allocated_sheet(
      ::TSP::Reference* sheet);
  ::TSP::Reference* unsafe_arena_release_sheet();

  // @@protoc_insertion_point(class_scope:TN.CommandReorderSidebarItemChildrenAchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > old_children_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > new_children_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* sheet_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandChartMediatorSetEditingState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandChartMediatorSetEditingState) */ {
 public:
  inline CommandChartMediatorSetEditingState() : CommandChartMediatorSetEditingState(nullptr) {}
  ~CommandChartMediatorSetEditingState() override;
  explicit PROTOBUF_CONSTEXPR CommandChartMediatorSetEditingState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandChartMediatorSetEditingState(const CommandChartMediatorSetEditingState& from);
  CommandChartMediatorSetEditingState(CommandChartMediatorSetEditingState&& from) noexcept
    : CommandChartMediatorSetEditingState() {
    *this = ::std::move(from);
  }

  inline CommandChartMediatorSetEditingState& operator=(const CommandChartMediatorSetEditingState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandChartMediatorSetEditingState& operator=(CommandChartMediatorSetEditingState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandChartMediatorSetEditingState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandChartMediatorSetEditingState* internal_default_instance() {
    return reinterpret_cast<const CommandChartMediatorSetEditingState*>(
               &_CommandChartMediatorSetEditingState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CommandChartMediatorSetEditingState& a, CommandChartMediatorSetEditingState& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandChartMediatorSetEditingState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandChartMediatorSetEditingState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandChartMediatorSetEditingState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandChartMediatorSetEditingState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandChartMediatorSetEditingState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandChartMediatorSetEditingState& from) {
    CommandChartMediatorSetEditingState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandChartMediatorSetEditingState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandChartMediatorSetEditingState";
  }
  protected:
  explicit CommandChartMediatorSetEditingState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOldFormulasFieldNumber = 3,
    kNewFormulasFieldNumber = 4,
    kOldDirectionFieldNumber = 5,
    kNewDirectionFieldNumber = 6,
    kOldScatterFormatFieldNumber = 7,
    kNewScatterFormatFieldNumber = 8,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // optional .TN.ChartMediatorFormulaStorage old_formulas = 3;
  bool has_old_formulas() const;
  private:
  bool _internal_has_old_formulas() const;
  public:
  void clear_old_formulas();
  const ::TN::ChartMediatorFormulaStorage& old_formulas() const;
  PROTOBUF_NODISCARD ::TN::ChartMediatorFormulaStorage* release_old_formulas();
  ::TN::ChartMediatorFormulaStorage* mutable_old_formulas();
  void set_allocated_old_formulas(::TN::ChartMediatorFormulaStorage* old_formulas);
  private:
  const ::TN::ChartMediatorFormulaStorage& _internal_old_formulas() const;
  ::TN::ChartMediatorFormulaStorage* _internal_mutable_old_formulas();
  public:
  void unsafe_arena_set_allocated_old_formulas(
      ::TN::ChartMediatorFormulaStorage* old_formulas);
  ::TN::ChartMediatorFormulaStorage* unsafe_arena_release_old_formulas();

  // optional .TN.ChartMediatorFormulaStorage new_formulas = 4;
  bool has_new_formulas() const;
  private:
  bool _internal_has_new_formulas() const;
  public:
  void clear_new_formulas();
  const ::TN::ChartMediatorFormulaStorage& new_formulas() const;
  PROTOBUF_NODISCARD ::TN::ChartMediatorFormulaStorage* release_new_formulas();
  ::TN::ChartMediatorFormulaStorage* mutable_new_formulas();
  void set_allocated_new_formulas(::TN::ChartMediatorFormulaStorage* new_formulas);
  private:
  const ::TN::ChartMediatorFormulaStorage& _internal_new_formulas() const;
  ::TN::ChartMediatorFormulaStorage* _internal_mutable_new_formulas();
  public:
  void unsafe_arena_set_allocated_new_formulas(
      ::TN::ChartMediatorFormulaStorage* new_formulas);
  ::TN::ChartMediatorFormulaStorage* unsafe_arena_release_new_formulas();

  // optional int32 old_direction = 5;
  bool has_old_direction() const;
  private:
  bool _internal_has_old_direction() const;
  public:
  void clear_old_direction();
  int32_t old_direction() const;
  void set_old_direction(int32_t value);
  private:
  int32_t _internal_old_direction() const;
  void _internal_set_old_direction(int32_t value);
  public:

  // optional int32 new_direction = 6;
  bool has_new_direction() const;
  private:
  bool _internal_has_new_direction() const;
  public:
  void clear_new_direction();
  int32_t new_direction() const;
  void set_new_direction(int32_t value);
  private:
  int32_t _internal_new_direction() const;
  void _internal_set_new_direction(int32_t value);
  public:

  // optional int32 old_scatter_format = 7;
  bool has_old_scatter_format() const;
  private:
  bool _internal_has_old_scatter_format() const;
  public:
  void clear_old_scatter_format();
  int32_t old_scatter_format() const;
  void set_old_scatter_format(int32_t value);
  private:
  int32_t _internal_old_scatter_format() const;
  void _internal_set_old_scatter_format(int32_t value);
  public:

  // optional int32 new_scatter_format = 8;
  bool has_new_scatter_format() const;
  private:
  bool _internal_has_new_scatter_format() const;
  public:
  void clear_new_scatter_format();
  int32_t new_scatter_format() const;
  void set_new_scatter_format(int32_t value);
  private:
  int32_t _internal_new_scatter_format() const;
  void _internal_set_new_scatter_format(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TN.CommandChartMediatorSetEditingState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCH::ChartCommandArchive* super_;
    ::TN::ChartMediatorFormulaStorage* old_formulas_;
    ::TN::ChartMediatorFormulaStorage* new_formulas_;
    int32_t old_direction_;
    int32_t new_direction_;
    int32_t old_scatter_format_;
    int32_t new_scatter_format_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandChartMediatorUpdateForEntityDelete final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandChartMediatorUpdateForEntityDelete) */ {
 public:
  inline CommandChartMediatorUpdateForEntityDelete() : CommandChartMediatorUpdateForEntityDelete(nullptr) {}
  ~CommandChartMediatorUpdateForEntityDelete() override;
  explicit PROTOBUF_CONSTEXPR CommandChartMediatorUpdateForEntityDelete(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandChartMediatorUpdateForEntityDelete(const CommandChartMediatorUpdateForEntityDelete& from);
  CommandChartMediatorUpdateForEntityDelete(CommandChartMediatorUpdateForEntityDelete&& from) noexcept
    : CommandChartMediatorUpdateForEntityDelete() {
    *this = ::std::move(from);
  }

  inline CommandChartMediatorUpdateForEntityDelete& operator=(const CommandChartMediatorUpdateForEntityDelete& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandChartMediatorUpdateForEntityDelete& operator=(CommandChartMediatorUpdateForEntityDelete&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandChartMediatorUpdateForEntityDelete& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandChartMediatorUpdateForEntityDelete* internal_default_instance() {
    return reinterpret_cast<const CommandChartMediatorUpdateForEntityDelete*>(
               &_CommandChartMediatorUpdateForEntityDelete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CommandChartMediatorUpdateForEntityDelete& a, CommandChartMediatorUpdateForEntityDelete& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandChartMediatorUpdateForEntityDelete* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandChartMediatorUpdateForEntityDelete* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandChartMediatorUpdateForEntityDelete* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandChartMediatorUpdateForEntityDelete>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandChartMediatorUpdateForEntityDelete& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandChartMediatorUpdateForEntityDelete& from) {
    CommandChartMediatorUpdateForEntityDelete::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandChartMediatorUpdateForEntityDelete* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandChartMediatorUpdateForEntityDelete";
  }
  protected:
  explicit CommandChartMediatorUpdateForEntityDelete(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kCmdFieldNumber = 3,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference cmd = 3;
  bool has_cmd() const;
  private:
  bool _internal_has_cmd() const;
  public:
  void clear_cmd();
  const ::TSP::Reference& cmd() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_cmd();
  ::TSP::Reference* mutable_cmd();
  void set_allocated_cmd(::TSP::Reference* cmd);
  private:
  const ::TSP::Reference& _internal_cmd() const;
  ::TSP::Reference* _internal_mutable_cmd();
  public:
  void unsafe_arena_set_allocated_cmd(
      ::TSP::Reference* cmd);
  ::TSP::Reference* unsafe_arena_release_cmd();

  // @@protoc_insertion_point(class_scope:TN.CommandChartMediatorUpdateForEntityDelete)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCH::ChartCommandArchive* super_;
    ::TSP::Reference* cmd_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartCommandSetSeriesNameArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.ChartCommandSetSeriesNameArchive) */ {
 public:
  inline ChartCommandSetSeriesNameArchive() : ChartCommandSetSeriesNameArchive(nullptr) {}
  ~ChartCommandSetSeriesNameArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartCommandSetSeriesNameArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartCommandSetSeriesNameArchive(const ChartCommandSetSeriesNameArchive& from);
  ChartCommandSetSeriesNameArchive(ChartCommandSetSeriesNameArchive&& from) noexcept
    : ChartCommandSetSeriesNameArchive() {
    *this = ::std::move(from);
  }

  inline ChartCommandSetSeriesNameArchive& operator=(const ChartCommandSetSeriesNameArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartCommandSetSeriesNameArchive& operator=(ChartCommandSetSeriesNameArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartCommandSetSeriesNameArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartCommandSetSeriesNameArchive* internal_default_instance() {
    return reinterpret_cast<const ChartCommandSetSeriesNameArchive*>(
               &_ChartCommandSetSeriesNameArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ChartCommandSetSeriesNameArchive& a, ChartCommandSetSeriesNameArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartCommandSetSeriesNameArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartCommandSetSeriesNameArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartCommandSetSeriesNameArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartCommandSetSeriesNameArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartCommandSetSeriesNameArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartCommandSetSeriesNameArchive& from) {
    ChartCommandSetSeriesNameArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartCommandSetSeriesNameArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.ChartCommandSetSeriesNameArchive";
  }
  protected:
  explicit ChartCommandSetSeriesNameArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kMediatorFieldNumber = 2,
    kOldFormulaFieldNumber = 4,
    kNewFormulaFieldNumber = 5,
    kSeriesindexFieldNumber = 3,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference mediator = 2;
  bool has_mediator() const;
  private:
  bool _internal_has_mediator() const;
  public:
  void clear_mediator();
  const ::TSP::Reference& mediator() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_mediator();
  ::TSP::Reference* mutable_mediator();
  void set_allocated_mediator(::TSP::Reference* mediator);
  private:
  const ::TSP::Reference& _internal_mediator() const;
  ::TSP::Reference* _internal_mutable_mediator();
  public:
  void unsafe_arena_set_allocated_mediator(
      ::TSP::Reference* mediator);
  ::TSP::Reference* unsafe_arena_release_mediator();

  // optional .TSCE.FormulaArchive old_formula = 4;
  bool has_old_formula() const;
  private:
  bool _internal_has_old_formula() const;
  public:
  void clear_old_formula();
  const ::TSCE::FormulaArchive& old_formula() const;
  PROTOBUF_NODISCARD ::TSCE::FormulaArchive* release_old_formula();
  ::TSCE::FormulaArchive* mutable_old_formula();
  void set_allocated_old_formula(::TSCE::FormulaArchive* old_formula);
  private:
  const ::TSCE::FormulaArchive& _internal_old_formula() const;
  ::TSCE::FormulaArchive* _internal_mutable_old_formula();
  public:
  void unsafe_arena_set_allocated_old_formula(
      ::TSCE::FormulaArchive* old_formula);
  ::TSCE::FormulaArchive* unsafe_arena_release_old_formula();

  // optional .TSCE.FormulaArchive new_formula = 5;
  bool has_new_formula() const;
  private:
  bool _internal_has_new_formula() const;
  public:
  void clear_new_formula();
  const ::TSCE::FormulaArchive& new_formula() const;
  PROTOBUF_NODISCARD ::TSCE::FormulaArchive* release_new_formula();
  ::TSCE::FormulaArchive* mutable_new_formula();
  void set_allocated_new_formula(::TSCE::FormulaArchive* new_formula);
  private:
  const ::TSCE::FormulaArchive& _internal_new_formula() const;
  ::TSCE::FormulaArchive* _internal_mutable_new_formula();
  public:
  void unsafe_arena_set_allocated_new_formula(
      ::TSCE::FormulaArchive* new_formula);
  ::TSCE::FormulaArchive* unsafe_arena_release_new_formula();

  // required uint32 seriesindex = 3;
  bool has_seriesindex() const;
  private:
  bool _internal_has_seriesindex() const;
  public:
  void clear_seriesindex();
  uint32_t seriesindex() const;
  void set_seriesindex(uint32_t value);
  private:
  uint32_t _internal_seriesindex() const;
  void _internal_set_seriesindex(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TN.ChartCommandSetSeriesNameArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCH::ChartCommandArchive* super_;
    ::TSP::Reference* mediator_;
    ::TSCE::FormulaArchive* old_formula_;
    ::TSCE::FormulaArchive* new_formula_;
    uint32_t seriesindex_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartCommandSelectionBehaviorArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.ChartCommandSelectionBehaviorArchive) */ {
 public:
  inline ChartCommandSelectionBehaviorArchive() : ChartCommandSelectionBehaviorArchive(nullptr) {}
  ~ChartCommandSelectionBehaviorArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartCommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartCommandSelectionBehaviorArchive(const ChartCommandSelectionBehaviorArchive& from);
  ChartCommandSelectionBehaviorArchive(ChartCommandSelectionBehaviorArchive&& from) noexcept
    : ChartCommandSelectionBehaviorArchive() {
    *this = ::std::move(from);
  }

  inline ChartCommandSelectionBehaviorArchive& operator=(const ChartCommandSelectionBehaviorArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartCommandSelectionBehaviorArchive& operator=(ChartCommandSelectionBehaviorArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartCommandSelectionBehaviorArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartCommandSelectionBehaviorArchive* internal_default_instance() {
    return reinterpret_cast<const ChartCommandSelectionBehaviorArchive*>(
               &_ChartCommandSelectionBehaviorArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ChartCommandSelectionBehaviorArchive& a, ChartCommandSelectionBehaviorArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartCommandSelectionBehaviorArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartCommandSelectionBehaviorArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartCommandSelectionBehaviorArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartCommandSelectionBehaviorArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartCommandSelectionBehaviorArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartCommandSelectionBehaviorArchive& from) {
    ChartCommandSelectionBehaviorArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartCommandSelectionBehaviorArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.ChartCommandSelectionBehaviorArchive";
  }
  protected:
  explicit ChartCommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawableInfoFieldNumber = 1,
    kBeginSelectionFieldNumber = 2,
    kEndSelectionFieldNumber = 3,
  };
  // required .TSP.Reference drawable_info = 1;
  bool has_drawable_info() const;
  private:
  bool _internal_has_drawable_info() const;
  public:
  void clear_drawable_info();
  const ::TSP::Reference& drawable_info() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_drawable_info();
  ::TSP::Reference* mutable_drawable_info();
  void set_allocated_drawable_info(::TSP::Reference* drawable_info);
  private:
  const ::TSP::Reference& _internal_drawable_info() const;
  ::TSP::Reference* _internal_mutable_drawable_info();
  public:
  void unsafe_arena_set_allocated_drawable_info(
      ::TSP::Reference* drawable_info);
  ::TSP::Reference* unsafe_arena_release_drawable_info();

  // optional .TN.ChartSelectionArchive begin_selection = 2;
  bool has_begin_selection() const;
  private:
  bool _internal_has_begin_selection() const;
  public:
  void clear_begin_selection();
  const ::TN::ChartSelectionArchive& begin_selection() const;
  PROTOBUF_NODISCARD ::TN::ChartSelectionArchive* release_begin_selection();
  ::TN::ChartSelectionArchive* mutable_begin_selection();
  void set_allocated_begin_selection(::TN::ChartSelectionArchive* begin_selection);
  private:
  const ::TN::ChartSelectionArchive& _internal_begin_selection() const;
  ::TN::ChartSelectionArchive* _internal_mutable_begin_selection();
  public:
  void unsafe_arena_set_allocated_begin_selection(
      ::TN::ChartSelectionArchive* begin_selection);
  ::TN::ChartSelectionArchive* unsafe_arena_release_begin_selection();

  // optional .TN.ChartSelectionArchive end_selection = 3;
  bool has_end_selection() const;
  private:
  bool _internal_has_end_selection() const;
  public:
  void clear_end_selection();
  const ::TN::ChartSelectionArchive& end_selection() const;
  PROTOBUF_NODISCARD ::TN::ChartSelectionArchive* release_end_selection();
  ::TN::ChartSelectionArchive* mutable_end_selection();
  void set_allocated_end_selection(::TN::ChartSelectionArchive* end_selection);
  private:
  const ::TN::ChartSelectionArchive& _internal_end_selection() const;
  ::TN::ChartSelectionArchive* _internal_mutable_end_selection();
  public:
  void unsafe_arena_set_allocated_end_selection(
      ::TN::ChartSelectionArchive* end_selection);
  ::TN::ChartSelectionArchive* unsafe_arena_release_end_selection();

  // @@protoc_insertion_point(class_scope:TN.ChartCommandSelectionBehaviorArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* drawable_info_;
    ::TN::ChartSelectionArchive* begin_selection_;
    ::TN::ChartSelectionArchive* end_selection_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SheetCommandSelectionBehaviorArchive

// optional .TSP.Reference sheet_selection = 1;
inline bool SheetCommandSelectionBehaviorArchive::_internal_has_sheet_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sheet_selection_ != nullptr);
  return value;
}
inline bool SheetCommandSelectionBehaviorArchive::has_sheet_selection() const {
  return _internal_has_sheet_selection();
}
inline const ::TSP::Reference& SheetCommandSelectionBehaviorArchive::_internal_sheet_selection() const {
  const ::TSP::Reference* p = _impl_.sheet_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SheetCommandSelectionBehaviorArchive::sheet_selection() const {
  // @@protoc_insertion_point(field_get:TN.SheetCommandSelectionBehaviorArchive.sheet_selection)
  return _internal_sheet_selection();
}
inline void SheetCommandSelectionBehaviorArchive::unsafe_arena_set_allocated_sheet_selection(
    ::TSP::Reference* sheet_selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_selection_);
  }
  _impl_.sheet_selection_ = sheet_selection;
  if (sheet_selection) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.SheetCommandSelectionBehaviorArchive.sheet_selection)
}
inline ::TSP::Reference* SheetCommandSelectionBehaviorArchive::release_sheet_selection() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.sheet_selection_;
  _impl_.sheet_selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SheetCommandSelectionBehaviorArchive::unsafe_arena_release_sheet_selection() {
  // @@protoc_insertion_point(field_release:TN.SheetCommandSelectionBehaviorArchive.sheet_selection)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.sheet_selection_;
  _impl_.sheet_selection_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SheetCommandSelectionBehaviorArchive::_internal_mutable_sheet_selection() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.sheet_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.sheet_selection_ = p;
  }
  return _impl_.sheet_selection_;
}
inline ::TSP::Reference* SheetCommandSelectionBehaviorArchive::mutable_sheet_selection() {
  ::TSP::Reference* _msg = _internal_mutable_sheet_selection();
  // @@protoc_insertion_point(field_mutable:TN.SheetCommandSelectionBehaviorArchive.sheet_selection)
  return _msg;
}
inline void SheetCommandSelectionBehaviorArchive::set_allocated_sheet_selection(::TSP::Reference* sheet_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_selection_);
  }
  if (sheet_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_selection));
    if (message_arena != submessage_arena) {
      sheet_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet_selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sheet_selection_ = sheet_selection;
  // @@protoc_insertion_point(field_set_allocated:TN.SheetCommandSelectionBehaviorArchive.sheet_selection)
}

// -------------------------------------------------------------------

// CommandFormChooseTargetTableArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandFormChooseTargetTableArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandFormChooseTargetTableArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandFormChooseTargetTableArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandFormChooseTargetTableArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandFormChooseTargetTableArchive.super)
  return _internal_super();
}
inline void CommandFormChooseTargetTableArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandFormChooseTargetTableArchive.super)
}
inline ::TSK::CommandArchive* CommandFormChooseTargetTableArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandFormChooseTargetTableArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandFormChooseTargetTableArchive.super)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandFormChooseTargetTableArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandFormChooseTargetTableArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TN.CommandFormChooseTargetTableArchive.super)
  return _msg;
}
inline void CommandFormChooseTargetTableArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandFormChooseTargetTableArchive.super)
}

// optional .TSCE.CFUUIDArchive table_id = 2;
inline bool CommandFormChooseTargetTableArchive::_internal_has_table_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.table_id_ != nullptr);
  return value;
}
inline bool CommandFormChooseTargetTableArchive::has_table_id() const {
  return _internal_has_table_id();
}
inline const ::TSCE::CFUUIDArchive& CommandFormChooseTargetTableArchive::_internal_table_id() const {
  const ::TSCE::CFUUIDArchive* p = _impl_.table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CFUUIDArchive&>(
      ::TSCE::_CFUUIDArchive_default_instance_);
}
inline const ::TSCE::CFUUIDArchive& CommandFormChooseTargetTableArchive::table_id() const {
  // @@protoc_insertion_point(field_get:TN.CommandFormChooseTargetTableArchive.table_id)
  return _internal_table_id();
}
inline void CommandFormChooseTargetTableArchive::unsafe_arena_set_allocated_table_id(
    ::TSCE::CFUUIDArchive* table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_id_);
  }
  _impl_.table_id_ = table_id;
  if (table_id) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandFormChooseTargetTableArchive.table_id)
}
inline ::TSCE::CFUUIDArchive* CommandFormChooseTargetTableArchive::release_table_id() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::CFUUIDArchive* temp = _impl_.table_id_;
  _impl_.table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CFUUIDArchive* CommandFormChooseTargetTableArchive::unsafe_arena_release_table_id() {
  // @@protoc_insertion_point(field_release:TN.CommandFormChooseTargetTableArchive.table_id)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::CFUUIDArchive* temp = _impl_.table_id_;
  _impl_.table_id_ = nullptr;
  return temp;
}
inline ::TSCE::CFUUIDArchive* CommandFormChooseTargetTableArchive::_internal_mutable_table_id() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CFUUIDArchive>(GetArenaForAllocation());
    _impl_.table_id_ = p;
  }
  return _impl_.table_id_;
}
inline ::TSCE::CFUUIDArchive* CommandFormChooseTargetTableArchive::mutable_table_id() {
  ::TSCE::CFUUIDArchive* _msg = _internal_mutable_table_id();
  // @@protoc_insertion_point(field_mutable:TN.CommandFormChooseTargetTableArchive.table_id)
  return _msg;
}
inline void CommandFormChooseTargetTableArchive::set_allocated_table_id(::TSCE::CFUUIDArchive* table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_id_);
  }
  if (table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id));
    if (message_arena != submessage_arena) {
      table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.table_id_ = table_id;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandFormChooseTargetTableArchive.table_id)
}

// optional .TSCE.CFUUIDArchive previous_table_id = 3;
inline bool CommandFormChooseTargetTableArchive::_internal_has_previous_table_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.previous_table_id_ != nullptr);
  return value;
}
inline bool CommandFormChooseTargetTableArchive::has_previous_table_id() const {
  return _internal_has_previous_table_id();
}
inline const ::TSCE::CFUUIDArchive& CommandFormChooseTargetTableArchive::_internal_previous_table_id() const {
  const ::TSCE::CFUUIDArchive* p = _impl_.previous_table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CFUUIDArchive&>(
      ::TSCE::_CFUUIDArchive_default_instance_);
}
inline const ::TSCE::CFUUIDArchive& CommandFormChooseTargetTableArchive::previous_table_id() const {
  // @@protoc_insertion_point(field_get:TN.CommandFormChooseTargetTableArchive.previous_table_id)
  return _internal_previous_table_id();
}
inline void CommandFormChooseTargetTableArchive::unsafe_arena_set_allocated_previous_table_id(
    ::TSCE::CFUUIDArchive* previous_table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.previous_table_id_);
  }
  _impl_.previous_table_id_ = previous_table_id;
  if (previous_table_id) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandFormChooseTargetTableArchive.previous_table_id)
}
inline ::TSCE::CFUUIDArchive* CommandFormChooseTargetTableArchive::release_previous_table_id() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCE::CFUUIDArchive* temp = _impl_.previous_table_id_;
  _impl_.previous_table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CFUUIDArchive* CommandFormChooseTargetTableArchive::unsafe_arena_release_previous_table_id() {
  // @@protoc_insertion_point(field_release:TN.CommandFormChooseTargetTableArchive.previous_table_id)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCE::CFUUIDArchive* temp = _impl_.previous_table_id_;
  _impl_.previous_table_id_ = nullptr;
  return temp;
}
inline ::TSCE::CFUUIDArchive* CommandFormChooseTargetTableArchive::_internal_mutable_previous_table_id() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.previous_table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CFUUIDArchive>(GetArenaForAllocation());
    _impl_.previous_table_id_ = p;
  }
  return _impl_.previous_table_id_;
}
inline ::TSCE::CFUUIDArchive* CommandFormChooseTargetTableArchive::mutable_previous_table_id() {
  ::TSCE::CFUUIDArchive* _msg = _internal_mutable_previous_table_id();
  // @@protoc_insertion_point(field_mutable:TN.CommandFormChooseTargetTableArchive.previous_table_id)
  return _msg;
}
inline void CommandFormChooseTargetTableArchive::set_allocated_previous_table_id(::TSCE::CFUUIDArchive* previous_table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.previous_table_id_);
  }
  if (previous_table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previous_table_id));
    if (message_arena != submessage_arena) {
      previous_table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previous_table_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.previous_table_id_ = previous_table_id;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandFormChooseTargetTableArchive.previous_table_id)
}

// optional string sheet_name = 4;
inline bool CommandFormChooseTargetTableArchive::_internal_has_sheet_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandFormChooseTargetTableArchive::has_sheet_name() const {
  return _internal_has_sheet_name();
}
inline void CommandFormChooseTargetTableArchive::clear_sheet_name() {
  _impl_.sheet_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandFormChooseTargetTableArchive::sheet_name() const {
  // @@protoc_insertion_point(field_get:TN.CommandFormChooseTargetTableArchive.sheet_name)
  return _internal_sheet_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandFormChooseTargetTableArchive::set_sheet_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.sheet_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TN.CommandFormChooseTargetTableArchive.sheet_name)
}
inline std::string* CommandFormChooseTargetTableArchive::mutable_sheet_name() {
  std::string* _s = _internal_mutable_sheet_name();
  // @@protoc_insertion_point(field_mutable:TN.CommandFormChooseTargetTableArchive.sheet_name)
  return _s;
}
inline const std::string& CommandFormChooseTargetTableArchive::_internal_sheet_name() const {
  return _impl_.sheet_name_.Get();
}
inline void CommandFormChooseTargetTableArchive::_internal_set_sheet_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sheet_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandFormChooseTargetTableArchive::_internal_mutable_sheet_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.sheet_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandFormChooseTargetTableArchive::release_sheet_name() {
  // @@protoc_insertion_point(field_release:TN.CommandFormChooseTargetTableArchive.sheet_name)
  if (!_internal_has_sheet_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.sheet_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sheet_name_.IsDefault()) {
    _impl_.sheet_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandFormChooseTargetTableArchive::set_allocated_sheet_name(std::string* sheet_name) {
  if (sheet_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sheet_name_.SetAllocated(sheet_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sheet_name_.IsDefault()) {
    _impl_.sheet_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TN.CommandFormChooseTargetTableArchive.sheet_name)
}

// optional string previous_sheet_name = 5;
inline bool CommandFormChooseTargetTableArchive::_internal_has_previous_sheet_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandFormChooseTargetTableArchive::has_previous_sheet_name() const {
  return _internal_has_previous_sheet_name();
}
inline void CommandFormChooseTargetTableArchive::clear_previous_sheet_name() {
  _impl_.previous_sheet_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CommandFormChooseTargetTableArchive::previous_sheet_name() const {
  // @@protoc_insertion_point(field_get:TN.CommandFormChooseTargetTableArchive.previous_sheet_name)
  return _internal_previous_sheet_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandFormChooseTargetTableArchive::set_previous_sheet_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.previous_sheet_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TN.CommandFormChooseTargetTableArchive.previous_sheet_name)
}
inline std::string* CommandFormChooseTargetTableArchive::mutable_previous_sheet_name() {
  std::string* _s = _internal_mutable_previous_sheet_name();
  // @@protoc_insertion_point(field_mutable:TN.CommandFormChooseTargetTableArchive.previous_sheet_name)
  return _s;
}
inline const std::string& CommandFormChooseTargetTableArchive::_internal_previous_sheet_name() const {
  return _impl_.previous_sheet_name_.Get();
}
inline void CommandFormChooseTargetTableArchive::_internal_set_previous_sheet_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.previous_sheet_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandFormChooseTargetTableArchive::_internal_mutable_previous_sheet_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.previous_sheet_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandFormChooseTargetTableArchive::release_previous_sheet_name() {
  // @@protoc_insertion_point(field_release:TN.CommandFormChooseTargetTableArchive.previous_sheet_name)
  if (!_internal_has_previous_sheet_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.previous_sheet_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.previous_sheet_name_.IsDefault()) {
    _impl_.previous_sheet_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandFormChooseTargetTableArchive::set_allocated_previous_sheet_name(std::string* previous_sheet_name) {
  if (previous_sheet_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.previous_sheet_name_.SetAllocated(previous_sheet_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.previous_sheet_name_.IsDefault()) {
    _impl_.previous_sheet_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TN.CommandFormChooseTargetTableArchive.previous_sheet_name)
}

// required .TSP.Reference sheet = 6;
inline bool CommandFormChooseTargetTableArchive::_internal_has_sheet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sheet_ != nullptr);
  return value;
}
inline bool CommandFormChooseTargetTableArchive::has_sheet() const {
  return _internal_has_sheet();
}
inline const ::TSP::Reference& CommandFormChooseTargetTableArchive::_internal_sheet() const {
  const ::TSP::Reference* p = _impl_.sheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandFormChooseTargetTableArchive::sheet() const {
  // @@protoc_insertion_point(field_get:TN.CommandFormChooseTargetTableArchive.sheet)
  return _internal_sheet();
}
inline void CommandFormChooseTargetTableArchive::unsafe_arena_set_allocated_sheet(
    ::TSP::Reference* sheet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  _impl_.sheet_ = sheet;
  if (sheet) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandFormChooseTargetTableArchive.sheet)
}
inline ::TSP::Reference* CommandFormChooseTargetTableArchive::release_sheet() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandFormChooseTargetTableArchive::unsafe_arena_release_sheet() {
  // @@protoc_insertion_point(field_release:TN.CommandFormChooseTargetTableArchive.sheet)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandFormChooseTargetTableArchive::_internal_mutable_sheet() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.sheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.sheet_ = p;
  }
  return _impl_.sheet_;
}
inline ::TSP::Reference* CommandFormChooseTargetTableArchive::mutable_sheet() {
  ::TSP::Reference* _msg = _internal_mutable_sheet();
  // @@protoc_insertion_point(field_mutable:TN.CommandFormChooseTargetTableArchive.sheet)
  return _msg;
}
inline void CommandFormChooseTargetTableArchive::set_allocated_sheet(::TSP::Reference* sheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  if (sheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet));
    if (message_arena != submessage_arena) {
      sheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.sheet_ = sheet;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandFormChooseTargetTableArchive.sheet)
}

// -------------------------------------------------------------------

// CommandSheetInsertDrawablesArchive

// required .TSP.Reference sheet = 1;
inline bool CommandSheetInsertDrawablesArchive::_internal_has_sheet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sheet_ != nullptr);
  return value;
}
inline bool CommandSheetInsertDrawablesArchive::has_sheet() const {
  return _internal_has_sheet();
}
inline const ::TSP::Reference& CommandSheetInsertDrawablesArchive::_internal_sheet() const {
  const ::TSP::Reference* p = _impl_.sheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSheetInsertDrawablesArchive::sheet() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetInsertDrawablesArchive.sheet)
  return _internal_sheet();
}
inline void CommandSheetInsertDrawablesArchive::unsafe_arena_set_allocated_sheet(
    ::TSP::Reference* sheet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  _impl_.sheet_ = sheet;
  if (sheet) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSheetInsertDrawablesArchive.sheet)
}
inline ::TSP::Reference* CommandSheetInsertDrawablesArchive::release_sheet() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSheetInsertDrawablesArchive::unsafe_arena_release_sheet() {
  // @@protoc_insertion_point(field_release:TN.CommandSheetInsertDrawablesArchive.sheet)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSheetInsertDrawablesArchive::_internal_mutable_sheet() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.sheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.sheet_ = p;
  }
  return _impl_.sheet_;
}
inline ::TSP::Reference* CommandSheetInsertDrawablesArchive::mutable_sheet() {
  ::TSP::Reference* _msg = _internal_mutable_sheet();
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetInsertDrawablesArchive.sheet)
  return _msg;
}
inline void CommandSheetInsertDrawablesArchive::set_allocated_sheet(::TSP::Reference* sheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  if (sheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet));
    if (message_arena != submessage_arena) {
      sheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sheet_ = sheet;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSheetInsertDrawablesArchive.sheet)
}

// repeated .TSP.Reference drawables = 2;
inline int CommandSheetInsertDrawablesArchive::_internal_drawables_size() const {
  return _impl_.drawables_.size();
}
inline int CommandSheetInsertDrawablesArchive::drawables_size() const {
  return _internal_drawables_size();
}
inline ::TSP::Reference* CommandSheetInsertDrawablesArchive::mutable_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetInsertDrawablesArchive.drawables)
  return _impl_.drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSheetInsertDrawablesArchive::mutable_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandSheetInsertDrawablesArchive.drawables)
  return &_impl_.drawables_;
}
inline const ::TSP::Reference& CommandSheetInsertDrawablesArchive::_internal_drawables(int index) const {
  return _impl_.drawables_.Get(index);
}
inline const ::TSP::Reference& CommandSheetInsertDrawablesArchive::drawables(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetInsertDrawablesArchive.drawables)
  return _internal_drawables(index);
}
inline ::TSP::Reference* CommandSheetInsertDrawablesArchive::_internal_add_drawables() {
  return _impl_.drawables_.Add();
}
inline ::TSP::Reference* CommandSheetInsertDrawablesArchive::add_drawables() {
  ::TSP::Reference* _add = _internal_add_drawables();
  // @@protoc_insertion_point(field_add:TN.CommandSheetInsertDrawablesArchive.drawables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSheetInsertDrawablesArchive::drawables() const {
  // @@protoc_insertion_point(field_list:TN.CommandSheetInsertDrawablesArchive.drawables)
  return _impl_.drawables_;
}

// optional .TSP.Reference provider_undo = 3;
inline bool CommandSheetInsertDrawablesArchive::_internal_has_provider_undo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.provider_undo_ != nullptr);
  return value;
}
inline bool CommandSheetInsertDrawablesArchive::has_provider_undo() const {
  return _internal_has_provider_undo();
}
inline const ::TSP::Reference& CommandSheetInsertDrawablesArchive::_internal_provider_undo() const {
  const ::TSP::Reference* p = _impl_.provider_undo_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSheetInsertDrawablesArchive::provider_undo() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetInsertDrawablesArchive.provider_undo)
  return _internal_provider_undo();
}
inline void CommandSheetInsertDrawablesArchive::unsafe_arena_set_allocated_provider_undo(
    ::TSP::Reference* provider_undo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.provider_undo_);
  }
  _impl_.provider_undo_ = provider_undo;
  if (provider_undo) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSheetInsertDrawablesArchive.provider_undo)
}
inline ::TSP::Reference* CommandSheetInsertDrawablesArchive::release_provider_undo() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.provider_undo_;
  _impl_.provider_undo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSheetInsertDrawablesArchive::unsafe_arena_release_provider_undo() {
  // @@protoc_insertion_point(field_release:TN.CommandSheetInsertDrawablesArchive.provider_undo)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.provider_undo_;
  _impl_.provider_undo_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSheetInsertDrawablesArchive::_internal_mutable_provider_undo() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.provider_undo_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.provider_undo_ = p;
  }
  return _impl_.provider_undo_;
}
inline ::TSP::Reference* CommandSheetInsertDrawablesArchive::mutable_provider_undo() {
  ::TSP::Reference* _msg = _internal_mutable_provider_undo();
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetInsertDrawablesArchive.provider_undo)
  return _msg;
}
inline void CommandSheetInsertDrawablesArchive::set_allocated_provider_undo(::TSP::Reference* provider_undo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.provider_undo_);
  }
  if (provider_undo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(provider_undo));
    if (message_arena != submessage_arena) {
      provider_undo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, provider_undo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.provider_undo_ = provider_undo;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSheetInsertDrawablesArchive.provider_undo)
}

// required .TSK.CommandArchive super = 4;
inline bool CommandSheetInsertDrawablesArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSheetInsertDrawablesArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSheetInsertDrawablesArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSheetInsertDrawablesArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetInsertDrawablesArchive.super)
  return _internal_super();
}
inline void CommandSheetInsertDrawablesArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSheetInsertDrawablesArchive.super)
}
inline ::TSK::CommandArchive* CommandSheetInsertDrawablesArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSheetInsertDrawablesArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandSheetInsertDrawablesArchive.super)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSheetInsertDrawablesArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSheetInsertDrawablesArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetInsertDrawablesArchive.super)
  return _msg;
}
inline void CommandSheetInsertDrawablesArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSheetInsertDrawablesArchive.super)
}

// optional bool forDrag = 5;
inline bool CommandSheetInsertDrawablesArchive::_internal_has_fordrag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandSheetInsertDrawablesArchive::has_fordrag() const {
  return _internal_has_fordrag();
}
inline void CommandSheetInsertDrawablesArchive::clear_fordrag() {
  _impl_.fordrag_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CommandSheetInsertDrawablesArchive::_internal_fordrag() const {
  return _impl_.fordrag_;
}
inline bool CommandSheetInsertDrawablesArchive::fordrag() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetInsertDrawablesArchive.forDrag)
  return _internal_fordrag();
}
inline void CommandSheetInsertDrawablesArchive::_internal_set_fordrag(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.fordrag_ = value;
}
inline void CommandSheetInsertDrawablesArchive::set_fordrag(bool value) {
  _internal_set_fordrag(value);
  // @@protoc_insertion_point(field_set:TN.CommandSheetInsertDrawablesArchive.forDrag)
}

// optional bool forPaste = 7;
inline bool CommandSheetInsertDrawablesArchive::_internal_has_forpaste() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandSheetInsertDrawablesArchive::has_forpaste() const {
  return _internal_has_forpaste();
}
inline void CommandSheetInsertDrawablesArchive::clear_forpaste() {
  _impl_.forpaste_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CommandSheetInsertDrawablesArchive::_internal_forpaste() const {
  return _impl_.forpaste_;
}
inline bool CommandSheetInsertDrawablesArchive::forpaste() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetInsertDrawablesArchive.forPaste)
  return _internal_forpaste();
}
inline void CommandSheetInsertDrawablesArchive::_internal_set_forpaste(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.forpaste_ = value;
}
inline void CommandSheetInsertDrawablesArchive::set_forpaste(bool value) {
  _internal_set_forpaste(value);
  // @@protoc_insertion_point(field_set:TN.CommandSheetInsertDrawablesArchive.forPaste)
}

// optional int32 atIndex = 6;
inline bool CommandSheetInsertDrawablesArchive::_internal_has_atindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSheetInsertDrawablesArchive::has_atindex() const {
  return _internal_has_atindex();
}
inline void CommandSheetInsertDrawablesArchive::clear_atindex() {
  _impl_.atindex_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CommandSheetInsertDrawablesArchive::_internal_atindex() const {
  return _impl_.atindex_;
}
inline int32_t CommandSheetInsertDrawablesArchive::atindex() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetInsertDrawablesArchive.atIndex)
  return _internal_atindex();
}
inline void CommandSheetInsertDrawablesArchive::_internal_set_atindex(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.atindex_ = value;
}
inline void CommandSheetInsertDrawablesArchive::set_atindex(int32_t value) {
  _internal_set_atindex(value);
  // @@protoc_insertion_point(field_set:TN.CommandSheetInsertDrawablesArchive.atIndex)
}

// -------------------------------------------------------------------

// CommandSheetRemoveDrawablesArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSheetRemoveDrawablesArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSheetRemoveDrawablesArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSheetRemoveDrawablesArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSheetRemoveDrawablesArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetRemoveDrawablesArchive.super)
  return _internal_super();
}
inline void CommandSheetRemoveDrawablesArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSheetRemoveDrawablesArchive.super)
}
inline ::TSK::CommandArchive* CommandSheetRemoveDrawablesArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSheetRemoveDrawablesArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandSheetRemoveDrawablesArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSheetRemoveDrawablesArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSheetRemoveDrawablesArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetRemoveDrawablesArchive.super)
  return _msg;
}
inline void CommandSheetRemoveDrawablesArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSheetRemoveDrawablesArchive.super)
}

// required .TSP.Reference sheet = 2;
inline bool CommandSheetRemoveDrawablesArchive::_internal_has_sheet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sheet_ != nullptr);
  return value;
}
inline bool CommandSheetRemoveDrawablesArchive::has_sheet() const {
  return _internal_has_sheet();
}
inline const ::TSP::Reference& CommandSheetRemoveDrawablesArchive::_internal_sheet() const {
  const ::TSP::Reference* p = _impl_.sheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSheetRemoveDrawablesArchive::sheet() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetRemoveDrawablesArchive.sheet)
  return _internal_sheet();
}
inline void CommandSheetRemoveDrawablesArchive::unsafe_arena_set_allocated_sheet(
    ::TSP::Reference* sheet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  _impl_.sheet_ = sheet;
  if (sheet) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSheetRemoveDrawablesArchive.sheet)
}
inline ::TSP::Reference* CommandSheetRemoveDrawablesArchive::release_sheet() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSheetRemoveDrawablesArchive::unsafe_arena_release_sheet() {
  // @@protoc_insertion_point(field_release:TN.CommandSheetRemoveDrawablesArchive.sheet)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSheetRemoveDrawablesArchive::_internal_mutable_sheet() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.sheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.sheet_ = p;
  }
  return _impl_.sheet_;
}
inline ::TSP::Reference* CommandSheetRemoveDrawablesArchive::mutable_sheet() {
  ::TSP::Reference* _msg = _internal_mutable_sheet();
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetRemoveDrawablesArchive.sheet)
  return _msg;
}
inline void CommandSheetRemoveDrawablesArchive::set_allocated_sheet(::TSP::Reference* sheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  if (sheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet));
    if (message_arena != submessage_arena) {
      sheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.sheet_ = sheet;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSheetRemoveDrawablesArchive.sheet)
}

// repeated .TSP.Reference sortedDrawables = 3;
inline int CommandSheetRemoveDrawablesArchive::_internal_sorteddrawables_size() const {
  return _impl_.sorteddrawables_.size();
}
inline int CommandSheetRemoveDrawablesArchive::sorteddrawables_size() const {
  return _internal_sorteddrawables_size();
}
inline ::TSP::Reference* CommandSheetRemoveDrawablesArchive::mutable_sorteddrawables(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetRemoveDrawablesArchive.sortedDrawables)
  return _impl_.sorteddrawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSheetRemoveDrawablesArchive::mutable_sorteddrawables() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandSheetRemoveDrawablesArchive.sortedDrawables)
  return &_impl_.sorteddrawables_;
}
inline const ::TSP::Reference& CommandSheetRemoveDrawablesArchive::_internal_sorteddrawables(int index) const {
  return _impl_.sorteddrawables_.Get(index);
}
inline const ::TSP::Reference& CommandSheetRemoveDrawablesArchive::sorteddrawables(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetRemoveDrawablesArchive.sortedDrawables)
  return _internal_sorteddrawables(index);
}
inline ::TSP::Reference* CommandSheetRemoveDrawablesArchive::_internal_add_sorteddrawables() {
  return _impl_.sorteddrawables_.Add();
}
inline ::TSP::Reference* CommandSheetRemoveDrawablesArchive::add_sorteddrawables() {
  ::TSP::Reference* _add = _internal_add_sorteddrawables();
  // @@protoc_insertion_point(field_add:TN.CommandSheetRemoveDrawablesArchive.sortedDrawables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSheetRemoveDrawablesArchive::sorteddrawables() const {
  // @@protoc_insertion_point(field_list:TN.CommandSheetRemoveDrawablesArchive.sortedDrawables)
  return _impl_.sorteddrawables_;
}

// required .TSP.IndexSet drawableIndices = 4;
inline bool CommandSheetRemoveDrawablesArchive::_internal_has_drawableindices() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.drawableindices_ != nullptr);
  return value;
}
inline bool CommandSheetRemoveDrawablesArchive::has_drawableindices() const {
  return _internal_has_drawableindices();
}
inline const ::TSP::IndexSet& CommandSheetRemoveDrawablesArchive::_internal_drawableindices() const {
  const ::TSP::IndexSet* p = _impl_.drawableindices_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::IndexSet&>(
      ::TSP::_IndexSet_default_instance_);
}
inline const ::TSP::IndexSet& CommandSheetRemoveDrawablesArchive::drawableindices() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetRemoveDrawablesArchive.drawableIndices)
  return _internal_drawableindices();
}
inline void CommandSheetRemoveDrawablesArchive::unsafe_arena_set_allocated_drawableindices(
    ::TSP::IndexSet* drawableindices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drawableindices_);
  }
  _impl_.drawableindices_ = drawableindices;
  if (drawableindices) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSheetRemoveDrawablesArchive.drawableIndices)
}
inline ::TSP::IndexSet* CommandSheetRemoveDrawablesArchive::release_drawableindices() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::IndexSet* temp = _impl_.drawableindices_;
  _impl_.drawableindices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::IndexSet* CommandSheetRemoveDrawablesArchive::unsafe_arena_release_drawableindices() {
  // @@protoc_insertion_point(field_release:TN.CommandSheetRemoveDrawablesArchive.drawableIndices)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::IndexSet* temp = _impl_.drawableindices_;
  _impl_.drawableindices_ = nullptr;
  return temp;
}
inline ::TSP::IndexSet* CommandSheetRemoveDrawablesArchive::_internal_mutable_drawableindices() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.drawableindices_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::IndexSet>(GetArenaForAllocation());
    _impl_.drawableindices_ = p;
  }
  return _impl_.drawableindices_;
}
inline ::TSP::IndexSet* CommandSheetRemoveDrawablesArchive::mutable_drawableindices() {
  ::TSP::IndexSet* _msg = _internal_mutable_drawableindices();
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetRemoveDrawablesArchive.drawableIndices)
  return _msg;
}
inline void CommandSheetRemoveDrawablesArchive::set_allocated_drawableindices(::TSP::IndexSet* drawableindices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drawableindices_);
  }
  if (drawableindices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawableindices));
    if (message_arena != submessage_arena) {
      drawableindices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drawableindices, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.drawableindices_ = drawableindices;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSheetRemoveDrawablesArchive.drawableIndices)
}

// repeated .TSP.Reference old_sheet_sidebar_order = 5;
inline int CommandSheetRemoveDrawablesArchive::_internal_old_sheet_sidebar_order_size() const {
  return _impl_.old_sheet_sidebar_order_.size();
}
inline int CommandSheetRemoveDrawablesArchive::old_sheet_sidebar_order_size() const {
  return _internal_old_sheet_sidebar_order_size();
}
inline ::TSP::Reference* CommandSheetRemoveDrawablesArchive::mutable_old_sheet_sidebar_order(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetRemoveDrawablesArchive.old_sheet_sidebar_order)
  return _impl_.old_sheet_sidebar_order_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSheetRemoveDrawablesArchive::mutable_old_sheet_sidebar_order() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandSheetRemoveDrawablesArchive.old_sheet_sidebar_order)
  return &_impl_.old_sheet_sidebar_order_;
}
inline const ::TSP::Reference& CommandSheetRemoveDrawablesArchive::_internal_old_sheet_sidebar_order(int index) const {
  return _impl_.old_sheet_sidebar_order_.Get(index);
}
inline const ::TSP::Reference& CommandSheetRemoveDrawablesArchive::old_sheet_sidebar_order(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetRemoveDrawablesArchive.old_sheet_sidebar_order)
  return _internal_old_sheet_sidebar_order(index);
}
inline ::TSP::Reference* CommandSheetRemoveDrawablesArchive::_internal_add_old_sheet_sidebar_order() {
  return _impl_.old_sheet_sidebar_order_.Add();
}
inline ::TSP::Reference* CommandSheetRemoveDrawablesArchive::add_old_sheet_sidebar_order() {
  ::TSP::Reference* _add = _internal_add_old_sheet_sidebar_order();
  // @@protoc_insertion_point(field_add:TN.CommandSheetRemoveDrawablesArchive.old_sheet_sidebar_order)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSheetRemoveDrawablesArchive::old_sheet_sidebar_order() const {
  // @@protoc_insertion_point(field_list:TN.CommandSheetRemoveDrawablesArchive.old_sheet_sidebar_order)
  return _impl_.old_sheet_sidebar_order_;
}

// optional .TSP.Reference formula_rewrite_command_for_undo = 6;
inline bool CommandSheetRemoveDrawablesArchive::_internal_has_formula_rewrite_command_for_undo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.formula_rewrite_command_for_undo_ != nullptr);
  return value;
}
inline bool CommandSheetRemoveDrawablesArchive::has_formula_rewrite_command_for_undo() const {
  return _internal_has_formula_rewrite_command_for_undo();
}
inline const ::TSP::Reference& CommandSheetRemoveDrawablesArchive::_internal_formula_rewrite_command_for_undo() const {
  const ::TSP::Reference* p = _impl_.formula_rewrite_command_for_undo_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSheetRemoveDrawablesArchive::formula_rewrite_command_for_undo() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetRemoveDrawablesArchive.formula_rewrite_command_for_undo)
  return _internal_formula_rewrite_command_for_undo();
}
inline void CommandSheetRemoveDrawablesArchive::unsafe_arena_set_allocated_formula_rewrite_command_for_undo(
    ::TSP::Reference* formula_rewrite_command_for_undo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_rewrite_command_for_undo_);
  }
  _impl_.formula_rewrite_command_for_undo_ = formula_rewrite_command_for_undo;
  if (formula_rewrite_command_for_undo) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSheetRemoveDrawablesArchive.formula_rewrite_command_for_undo)
}
inline ::TSP::Reference* CommandSheetRemoveDrawablesArchive::release_formula_rewrite_command_for_undo() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.formula_rewrite_command_for_undo_;
  _impl_.formula_rewrite_command_for_undo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSheetRemoveDrawablesArchive::unsafe_arena_release_formula_rewrite_command_for_undo() {
  // @@protoc_insertion_point(field_release:TN.CommandSheetRemoveDrawablesArchive.formula_rewrite_command_for_undo)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.formula_rewrite_command_for_undo_;
  _impl_.formula_rewrite_command_for_undo_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSheetRemoveDrawablesArchive::_internal_mutable_formula_rewrite_command_for_undo() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.formula_rewrite_command_for_undo_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.formula_rewrite_command_for_undo_ = p;
  }
  return _impl_.formula_rewrite_command_for_undo_;
}
inline ::TSP::Reference* CommandSheetRemoveDrawablesArchive::mutable_formula_rewrite_command_for_undo() {
  ::TSP::Reference* _msg = _internal_mutable_formula_rewrite_command_for_undo();
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetRemoveDrawablesArchive.formula_rewrite_command_for_undo)
  return _msg;
}
inline void CommandSheetRemoveDrawablesArchive::set_allocated_formula_rewrite_command_for_undo(::TSP::Reference* formula_rewrite_command_for_undo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_rewrite_command_for_undo_);
  }
  if (formula_rewrite_command_for_undo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_rewrite_command_for_undo));
    if (message_arena != submessage_arena) {
      formula_rewrite_command_for_undo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula_rewrite_command_for_undo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.formula_rewrite_command_for_undo_ = formula_rewrite_command_for_undo;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSheetRemoveDrawablesArchive.formula_rewrite_command_for_undo)
}

// -------------------------------------------------------------------

// CommandSheetMoveDrawableZOrderArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSheetMoveDrawableZOrderArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSheetMoveDrawableZOrderArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSheetMoveDrawableZOrderArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSheetMoveDrawableZOrderArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetMoveDrawableZOrderArchive.super)
  return _internal_super();
}
inline void CommandSheetMoveDrawableZOrderArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSheetMoveDrawableZOrderArchive.super)
}
inline ::TSK::CommandArchive* CommandSheetMoveDrawableZOrderArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSheetMoveDrawableZOrderArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandSheetMoveDrawableZOrderArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSheetMoveDrawableZOrderArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSheetMoveDrawableZOrderArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetMoveDrawableZOrderArchive.super)
  return _msg;
}
inline void CommandSheetMoveDrawableZOrderArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSheetMoveDrawableZOrderArchive.super)
}

// required .TSP.Reference sheet = 2;
inline bool CommandSheetMoveDrawableZOrderArchive::_internal_has_sheet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sheet_ != nullptr);
  return value;
}
inline bool CommandSheetMoveDrawableZOrderArchive::has_sheet() const {
  return _internal_has_sheet();
}
inline const ::TSP::Reference& CommandSheetMoveDrawableZOrderArchive::_internal_sheet() const {
  const ::TSP::Reference* p = _impl_.sheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSheetMoveDrawableZOrderArchive::sheet() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetMoveDrawableZOrderArchive.sheet)
  return _internal_sheet();
}
inline void CommandSheetMoveDrawableZOrderArchive::unsafe_arena_set_allocated_sheet(
    ::TSP::Reference* sheet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  _impl_.sheet_ = sheet;
  if (sheet) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSheetMoveDrawableZOrderArchive.sheet)
}
inline ::TSP::Reference* CommandSheetMoveDrawableZOrderArchive::release_sheet() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSheetMoveDrawableZOrderArchive::unsafe_arena_release_sheet() {
  // @@protoc_insertion_point(field_release:TN.CommandSheetMoveDrawableZOrderArchive.sheet)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSheetMoveDrawableZOrderArchive::_internal_mutable_sheet() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.sheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.sheet_ = p;
  }
  return _impl_.sheet_;
}
inline ::TSP::Reference* CommandSheetMoveDrawableZOrderArchive::mutable_sheet() {
  ::TSP::Reference* _msg = _internal_mutable_sheet();
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetMoveDrawableZOrderArchive.sheet)
  return _msg;
}
inline void CommandSheetMoveDrawableZOrderArchive::set_allocated_sheet(::TSP::Reference* sheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  if (sheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet));
    if (message_arena != submessage_arena) {
      sheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.sheet_ = sheet;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSheetMoveDrawableZOrderArchive.sheet)
}

// repeated .TSP.Reference drawable_infos = 3;
inline int CommandSheetMoveDrawableZOrderArchive::_internal_drawable_infos_size() const {
  return _impl_.drawable_infos_.size();
}
inline int CommandSheetMoveDrawableZOrderArchive::drawable_infos_size() const {
  return _internal_drawable_infos_size();
}
inline ::TSP::Reference* CommandSheetMoveDrawableZOrderArchive::mutable_drawable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetMoveDrawableZOrderArchive.drawable_infos)
  return _impl_.drawable_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSheetMoveDrawableZOrderArchive::mutable_drawable_infos() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandSheetMoveDrawableZOrderArchive.drawable_infos)
  return &_impl_.drawable_infos_;
}
inline const ::TSP::Reference& CommandSheetMoveDrawableZOrderArchive::_internal_drawable_infos(int index) const {
  return _impl_.drawable_infos_.Get(index);
}
inline const ::TSP::Reference& CommandSheetMoveDrawableZOrderArchive::drawable_infos(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetMoveDrawableZOrderArchive.drawable_infos)
  return _internal_drawable_infos(index);
}
inline ::TSP::Reference* CommandSheetMoveDrawableZOrderArchive::_internal_add_drawable_infos() {
  return _impl_.drawable_infos_.Add();
}
inline ::TSP::Reference* CommandSheetMoveDrawableZOrderArchive::add_drawable_infos() {
  ::TSP::Reference* _add = _internal_add_drawable_infos();
  // @@protoc_insertion_point(field_add:TN.CommandSheetMoveDrawableZOrderArchive.drawable_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSheetMoveDrawableZOrderArchive::drawable_infos() const {
  // @@protoc_insertion_point(field_list:TN.CommandSheetMoveDrawableZOrderArchive.drawable_infos)
  return _impl_.drawable_infos_;
}

// required .TSP.IndexSet indexes = 4;
inline bool CommandSheetMoveDrawableZOrderArchive::_internal_has_indexes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.indexes_ != nullptr);
  return value;
}
inline bool CommandSheetMoveDrawableZOrderArchive::has_indexes() const {
  return _internal_has_indexes();
}
inline const ::TSP::IndexSet& CommandSheetMoveDrawableZOrderArchive::_internal_indexes() const {
  const ::TSP::IndexSet* p = _impl_.indexes_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::IndexSet&>(
      ::TSP::_IndexSet_default_instance_);
}
inline const ::TSP::IndexSet& CommandSheetMoveDrawableZOrderArchive::indexes() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetMoveDrawableZOrderArchive.indexes)
  return _internal_indexes();
}
inline void CommandSheetMoveDrawableZOrderArchive::unsafe_arena_set_allocated_indexes(
    ::TSP::IndexSet* indexes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.indexes_);
  }
  _impl_.indexes_ = indexes;
  if (indexes) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSheetMoveDrawableZOrderArchive.indexes)
}
inline ::TSP::IndexSet* CommandSheetMoveDrawableZOrderArchive::release_indexes() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::IndexSet* temp = _impl_.indexes_;
  _impl_.indexes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::IndexSet* CommandSheetMoveDrawableZOrderArchive::unsafe_arena_release_indexes() {
  // @@protoc_insertion_point(field_release:TN.CommandSheetMoveDrawableZOrderArchive.indexes)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::IndexSet* temp = _impl_.indexes_;
  _impl_.indexes_ = nullptr;
  return temp;
}
inline ::TSP::IndexSet* CommandSheetMoveDrawableZOrderArchive::_internal_mutable_indexes() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.indexes_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::IndexSet>(GetArenaForAllocation());
    _impl_.indexes_ = p;
  }
  return _impl_.indexes_;
}
inline ::TSP::IndexSet* CommandSheetMoveDrawableZOrderArchive::mutable_indexes() {
  ::TSP::IndexSet* _msg = _internal_mutable_indexes();
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetMoveDrawableZOrderArchive.indexes)
  return _msg;
}
inline void CommandSheetMoveDrawableZOrderArchive::set_allocated_indexes(::TSP::IndexSet* indexes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.indexes_);
  }
  if (indexes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(indexes));
    if (message_arena != submessage_arena) {
      indexes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, indexes, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.indexes_ = indexes;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSheetMoveDrawableZOrderArchive.indexes)
}

// -------------------------------------------------------------------

// CommandDocumentInsertSheetArchive

// required .TSP.Reference document = 1;
inline bool CommandDocumentInsertSheetArchive::_internal_has_document() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.document_ != nullptr);
  return value;
}
inline bool CommandDocumentInsertSheetArchive::has_document() const {
  return _internal_has_document();
}
inline const ::TSP::Reference& CommandDocumentInsertSheetArchive::_internal_document() const {
  const ::TSP::Reference* p = _impl_.document_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandDocumentInsertSheetArchive::document() const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentInsertSheetArchive.document)
  return _internal_document();
}
inline void CommandDocumentInsertSheetArchive::unsafe_arena_set_allocated_document(
    ::TSP::Reference* document) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.document_);
  }
  _impl_.document_ = document;
  if (document) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandDocumentInsertSheetArchive.document)
}
inline ::TSP::Reference* CommandDocumentInsertSheetArchive::release_document() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.document_;
  _impl_.document_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandDocumentInsertSheetArchive::unsafe_arena_release_document() {
  // @@protoc_insertion_point(field_release:TN.CommandDocumentInsertSheetArchive.document)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.document_;
  _impl_.document_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandDocumentInsertSheetArchive::_internal_mutable_document() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.document_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.document_ = p;
  }
  return _impl_.document_;
}
inline ::TSP::Reference* CommandDocumentInsertSheetArchive::mutable_document() {
  ::TSP::Reference* _msg = _internal_mutable_document();
  // @@protoc_insertion_point(field_mutable:TN.CommandDocumentInsertSheetArchive.document)
  return _msg;
}
inline void CommandDocumentInsertSheetArchive::set_allocated_document(::TSP::Reference* document) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.document_);
  }
  if (document) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document));
    if (message_arena != submessage_arena) {
      document = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, document, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.document_ = document;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandDocumentInsertSheetArchive.document)
}

// required .TSP.Reference sheet = 2;
inline bool CommandDocumentInsertSheetArchive::_internal_has_sheet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sheet_ != nullptr);
  return value;
}
inline bool CommandDocumentInsertSheetArchive::has_sheet() const {
  return _internal_has_sheet();
}
inline const ::TSP::Reference& CommandDocumentInsertSheetArchive::_internal_sheet() const {
  const ::TSP::Reference* p = _impl_.sheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandDocumentInsertSheetArchive::sheet() const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentInsertSheetArchive.sheet)
  return _internal_sheet();
}
inline void CommandDocumentInsertSheetArchive::unsafe_arena_set_allocated_sheet(
    ::TSP::Reference* sheet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  _impl_.sheet_ = sheet;
  if (sheet) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandDocumentInsertSheetArchive.sheet)
}
inline ::TSP::Reference* CommandDocumentInsertSheetArchive::release_sheet() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandDocumentInsertSheetArchive::unsafe_arena_release_sheet() {
  // @@protoc_insertion_point(field_release:TN.CommandDocumentInsertSheetArchive.sheet)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandDocumentInsertSheetArchive::_internal_mutable_sheet() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.sheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.sheet_ = p;
  }
  return _impl_.sheet_;
}
inline ::TSP::Reference* CommandDocumentInsertSheetArchive::mutable_sheet() {
  ::TSP::Reference* _msg = _internal_mutable_sheet();
  // @@protoc_insertion_point(field_mutable:TN.CommandDocumentInsertSheetArchive.sheet)
  return _msg;
}
inline void CommandDocumentInsertSheetArchive::set_allocated_sheet(::TSP::Reference* sheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  if (sheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet));
    if (message_arena != submessage_arena) {
      sheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.sheet_ = sheet;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandDocumentInsertSheetArchive.sheet)
}

// required .TSK.CommandArchive super = 3;
inline bool CommandDocumentInsertSheetArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandDocumentInsertSheetArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandDocumentInsertSheetArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandDocumentInsertSheetArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentInsertSheetArchive.super)
  return _internal_super();
}
inline void CommandDocumentInsertSheetArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandDocumentInsertSheetArchive.super)
}
inline ::TSK::CommandArchive* CommandDocumentInsertSheetArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandDocumentInsertSheetArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandDocumentInsertSheetArchive.super)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandDocumentInsertSheetArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandDocumentInsertSheetArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TN.CommandDocumentInsertSheetArchive.super)
  return _msg;
}
inline void CommandDocumentInsertSheetArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandDocumentInsertSheetArchive.super)
}

// -------------------------------------------------------------------

// CommandDocumentRemoveSheetArchive

// required .TSP.Reference document = 1;
inline bool CommandDocumentRemoveSheetArchive::_internal_has_document() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.document_ != nullptr);
  return value;
}
inline bool CommandDocumentRemoveSheetArchive::has_document() const {
  return _internal_has_document();
}
inline const ::TSP::Reference& CommandDocumentRemoveSheetArchive::_internal_document() const {
  const ::TSP::Reference* p = _impl_.document_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandDocumentRemoveSheetArchive::document() const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentRemoveSheetArchive.document)
  return _internal_document();
}
inline void CommandDocumentRemoveSheetArchive::unsafe_arena_set_allocated_document(
    ::TSP::Reference* document) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.document_);
  }
  _impl_.document_ = document;
  if (document) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandDocumentRemoveSheetArchive.document)
}
inline ::TSP::Reference* CommandDocumentRemoveSheetArchive::release_document() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.document_;
  _impl_.document_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandDocumentRemoveSheetArchive::unsafe_arena_release_document() {
  // @@protoc_insertion_point(field_release:TN.CommandDocumentRemoveSheetArchive.document)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.document_;
  _impl_.document_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandDocumentRemoveSheetArchive::_internal_mutable_document() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.document_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.document_ = p;
  }
  return _impl_.document_;
}
inline ::TSP::Reference* CommandDocumentRemoveSheetArchive::mutable_document() {
  ::TSP::Reference* _msg = _internal_mutable_document();
  // @@protoc_insertion_point(field_mutable:TN.CommandDocumentRemoveSheetArchive.document)
  return _msg;
}
inline void CommandDocumentRemoveSheetArchive::set_allocated_document(::TSP::Reference* document) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.document_);
  }
  if (document) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document));
    if (message_arena != submessage_arena) {
      document = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, document, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.document_ = document;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandDocumentRemoveSheetArchive.document)
}

// required .TSP.Reference sheet = 2;
inline bool CommandDocumentRemoveSheetArchive::_internal_has_sheet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sheet_ != nullptr);
  return value;
}
inline bool CommandDocumentRemoveSheetArchive::has_sheet() const {
  return _internal_has_sheet();
}
inline const ::TSP::Reference& CommandDocumentRemoveSheetArchive::_internal_sheet() const {
  const ::TSP::Reference* p = _impl_.sheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandDocumentRemoveSheetArchive::sheet() const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentRemoveSheetArchive.sheet)
  return _internal_sheet();
}
inline void CommandDocumentRemoveSheetArchive::unsafe_arena_set_allocated_sheet(
    ::TSP::Reference* sheet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  _impl_.sheet_ = sheet;
  if (sheet) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandDocumentRemoveSheetArchive.sheet)
}
inline ::TSP::Reference* CommandDocumentRemoveSheetArchive::release_sheet() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandDocumentRemoveSheetArchive::unsafe_arena_release_sheet() {
  // @@protoc_insertion_point(field_release:TN.CommandDocumentRemoveSheetArchive.sheet)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandDocumentRemoveSheetArchive::_internal_mutable_sheet() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.sheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.sheet_ = p;
  }
  return _impl_.sheet_;
}
inline ::TSP::Reference* CommandDocumentRemoveSheetArchive::mutable_sheet() {
  ::TSP::Reference* _msg = _internal_mutable_sheet();
  // @@protoc_insertion_point(field_mutable:TN.CommandDocumentRemoveSheetArchive.sheet)
  return _msg;
}
inline void CommandDocumentRemoveSheetArchive::set_allocated_sheet(::TSP::Reference* sheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  if (sheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet));
    if (message_arena != submessage_arena) {
      sheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.sheet_ = sheet;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandDocumentRemoveSheetArchive.sheet)
}

// required uint32 index = 3;
inline bool CommandDocumentRemoveSheetArchive::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandDocumentRemoveSheetArchive::has_index() const {
  return _internal_has_index();
}
inline void CommandDocumentRemoveSheetArchive::clear_index() {
  _impl_.index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CommandDocumentRemoveSheetArchive::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t CommandDocumentRemoveSheetArchive::index() const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentRemoveSheetArchive.index)
  return _internal_index();
}
inline void CommandDocumentRemoveSheetArchive::_internal_set_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.index_ = value;
}
inline void CommandDocumentRemoveSheetArchive::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:TN.CommandDocumentRemoveSheetArchive.index)
}

// repeated .TSP.Reference old_sheet_sidebar_order = 4;
inline int CommandDocumentRemoveSheetArchive::_internal_old_sheet_sidebar_order_size() const {
  return _impl_.old_sheet_sidebar_order_.size();
}
inline int CommandDocumentRemoveSheetArchive::old_sheet_sidebar_order_size() const {
  return _internal_old_sheet_sidebar_order_size();
}
inline ::TSP::Reference* CommandDocumentRemoveSheetArchive::mutable_old_sheet_sidebar_order(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandDocumentRemoveSheetArchive.old_sheet_sidebar_order)
  return _impl_.old_sheet_sidebar_order_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandDocumentRemoveSheetArchive::mutable_old_sheet_sidebar_order() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandDocumentRemoveSheetArchive.old_sheet_sidebar_order)
  return &_impl_.old_sheet_sidebar_order_;
}
inline const ::TSP::Reference& CommandDocumentRemoveSheetArchive::_internal_old_sheet_sidebar_order(int index) const {
  return _impl_.old_sheet_sidebar_order_.Get(index);
}
inline const ::TSP::Reference& CommandDocumentRemoveSheetArchive::old_sheet_sidebar_order(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentRemoveSheetArchive.old_sheet_sidebar_order)
  return _internal_old_sheet_sidebar_order(index);
}
inline ::TSP::Reference* CommandDocumentRemoveSheetArchive::_internal_add_old_sheet_sidebar_order() {
  return _impl_.old_sheet_sidebar_order_.Add();
}
inline ::TSP::Reference* CommandDocumentRemoveSheetArchive::add_old_sheet_sidebar_order() {
  ::TSP::Reference* _add = _internal_add_old_sheet_sidebar_order();
  // @@protoc_insertion_point(field_add:TN.CommandDocumentRemoveSheetArchive.old_sheet_sidebar_order)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandDocumentRemoveSheetArchive::old_sheet_sidebar_order() const {
  // @@protoc_insertion_point(field_list:TN.CommandDocumentRemoveSheetArchive.old_sheet_sidebar_order)
  return _impl_.old_sheet_sidebar_order_;
}

// required .TSK.CommandArchive super = 5;
inline bool CommandDocumentRemoveSheetArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandDocumentRemoveSheetArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandDocumentRemoveSheetArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandDocumentRemoveSheetArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentRemoveSheetArchive.super)
  return _internal_super();
}
inline void CommandDocumentRemoveSheetArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandDocumentRemoveSheetArchive.super)
}
inline ::TSK::CommandArchive* CommandDocumentRemoveSheetArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandDocumentRemoveSheetArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandDocumentRemoveSheetArchive.super)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandDocumentRemoveSheetArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandDocumentRemoveSheetArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TN.CommandDocumentRemoveSheetArchive.super)
  return _msg;
}
inline void CommandDocumentRemoveSheetArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandDocumentRemoveSheetArchive.super)
}

// optional .TSP.Reference formula_rewrite_command_for_undo = 6;
inline bool CommandDocumentRemoveSheetArchive::_internal_has_formula_rewrite_command_for_undo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.formula_rewrite_command_for_undo_ != nullptr);
  return value;
}
inline bool CommandDocumentRemoveSheetArchive::has_formula_rewrite_command_for_undo() const {
  return _internal_has_formula_rewrite_command_for_undo();
}
inline const ::TSP::Reference& CommandDocumentRemoveSheetArchive::_internal_formula_rewrite_command_for_undo() const {
  const ::TSP::Reference* p = _impl_.formula_rewrite_command_for_undo_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandDocumentRemoveSheetArchive::formula_rewrite_command_for_undo() const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentRemoveSheetArchive.formula_rewrite_command_for_undo)
  return _internal_formula_rewrite_command_for_undo();
}
inline void CommandDocumentRemoveSheetArchive::unsafe_arena_set_allocated_formula_rewrite_command_for_undo(
    ::TSP::Reference* formula_rewrite_command_for_undo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_rewrite_command_for_undo_);
  }
  _impl_.formula_rewrite_command_for_undo_ = formula_rewrite_command_for_undo;
  if (formula_rewrite_command_for_undo) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandDocumentRemoveSheetArchive.formula_rewrite_command_for_undo)
}
inline ::TSP::Reference* CommandDocumentRemoveSheetArchive::release_formula_rewrite_command_for_undo() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.formula_rewrite_command_for_undo_;
  _impl_.formula_rewrite_command_for_undo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandDocumentRemoveSheetArchive::unsafe_arena_release_formula_rewrite_command_for_undo() {
  // @@protoc_insertion_point(field_release:TN.CommandDocumentRemoveSheetArchive.formula_rewrite_command_for_undo)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.formula_rewrite_command_for_undo_;
  _impl_.formula_rewrite_command_for_undo_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandDocumentRemoveSheetArchive::_internal_mutable_formula_rewrite_command_for_undo() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.formula_rewrite_command_for_undo_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.formula_rewrite_command_for_undo_ = p;
  }
  return _impl_.formula_rewrite_command_for_undo_;
}
inline ::TSP::Reference* CommandDocumentRemoveSheetArchive::mutable_formula_rewrite_command_for_undo() {
  ::TSP::Reference* _msg = _internal_mutable_formula_rewrite_command_for_undo();
  // @@protoc_insertion_point(field_mutable:TN.CommandDocumentRemoveSheetArchive.formula_rewrite_command_for_undo)
  return _msg;
}
inline void CommandDocumentRemoveSheetArchive::set_allocated_formula_rewrite_command_for_undo(::TSP::Reference* formula_rewrite_command_for_undo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_rewrite_command_for_undo_);
  }
  if (formula_rewrite_command_for_undo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_rewrite_command_for_undo));
    if (message_arena != submessage_arena) {
      formula_rewrite_command_for_undo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula_rewrite_command_for_undo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.formula_rewrite_command_for_undo_ = formula_rewrite_command_for_undo;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandDocumentRemoveSheetArchive.formula_rewrite_command_for_undo)
}

// -------------------------------------------------------------------

// CommandDocumentReplaceLastSheetArchive

// required .TSP.Reference document = 1;
inline bool CommandDocumentReplaceLastSheetArchive::_internal_has_document() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.document_ != nullptr);
  return value;
}
inline bool CommandDocumentReplaceLastSheetArchive::has_document() const {
  return _internal_has_document();
}
inline const ::TSP::Reference& CommandDocumentReplaceLastSheetArchive::_internal_document() const {
  const ::TSP::Reference* p = _impl_.document_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandDocumentReplaceLastSheetArchive::document() const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentReplaceLastSheetArchive.document)
  return _internal_document();
}
inline void CommandDocumentReplaceLastSheetArchive::unsafe_arena_set_allocated_document(
    ::TSP::Reference* document) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.document_);
  }
  _impl_.document_ = document;
  if (document) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandDocumentReplaceLastSheetArchive.document)
}
inline ::TSP::Reference* CommandDocumentReplaceLastSheetArchive::release_document() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.document_;
  _impl_.document_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandDocumentReplaceLastSheetArchive::unsafe_arena_release_document() {
  // @@protoc_insertion_point(field_release:TN.CommandDocumentReplaceLastSheetArchive.document)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.document_;
  _impl_.document_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandDocumentReplaceLastSheetArchive::_internal_mutable_document() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.document_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.document_ = p;
  }
  return _impl_.document_;
}
inline ::TSP::Reference* CommandDocumentReplaceLastSheetArchive::mutable_document() {
  ::TSP::Reference* _msg = _internal_mutable_document();
  // @@protoc_insertion_point(field_mutable:TN.CommandDocumentReplaceLastSheetArchive.document)
  return _msg;
}
inline void CommandDocumentReplaceLastSheetArchive::set_allocated_document(::TSP::Reference* document) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.document_);
  }
  if (document) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document));
    if (message_arena != submessage_arena) {
      document = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, document, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.document_ = document;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandDocumentReplaceLastSheetArchive.document)
}

// required .TSP.Reference last_sheet = 2;
inline bool CommandDocumentReplaceLastSheetArchive::_internal_has_last_sheet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_sheet_ != nullptr);
  return value;
}
inline bool CommandDocumentReplaceLastSheetArchive::has_last_sheet() const {
  return _internal_has_last_sheet();
}
inline const ::TSP::Reference& CommandDocumentReplaceLastSheetArchive::_internal_last_sheet() const {
  const ::TSP::Reference* p = _impl_.last_sheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandDocumentReplaceLastSheetArchive::last_sheet() const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentReplaceLastSheetArchive.last_sheet)
  return _internal_last_sheet();
}
inline void CommandDocumentReplaceLastSheetArchive::unsafe_arena_set_allocated_last_sheet(
    ::TSP::Reference* last_sheet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_sheet_);
  }
  _impl_.last_sheet_ = last_sheet;
  if (last_sheet) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandDocumentReplaceLastSheetArchive.last_sheet)
}
inline ::TSP::Reference* CommandDocumentReplaceLastSheetArchive::release_last_sheet() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.last_sheet_;
  _impl_.last_sheet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandDocumentReplaceLastSheetArchive::unsafe_arena_release_last_sheet() {
  // @@protoc_insertion_point(field_release:TN.CommandDocumentReplaceLastSheetArchive.last_sheet)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.last_sheet_;
  _impl_.last_sheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandDocumentReplaceLastSheetArchive::_internal_mutable_last_sheet() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.last_sheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.last_sheet_ = p;
  }
  return _impl_.last_sheet_;
}
inline ::TSP::Reference* CommandDocumentReplaceLastSheetArchive::mutable_last_sheet() {
  ::TSP::Reference* _msg = _internal_mutable_last_sheet();
  // @@protoc_insertion_point(field_mutable:TN.CommandDocumentReplaceLastSheetArchive.last_sheet)
  return _msg;
}
inline void CommandDocumentReplaceLastSheetArchive::set_allocated_last_sheet(::TSP::Reference* last_sheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_sheet_);
  }
  if (last_sheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_sheet));
    if (message_arena != submessage_arena) {
      last_sheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_sheet, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.last_sheet_ = last_sheet;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandDocumentReplaceLastSheetArchive.last_sheet)
}

// required .TSP.Reference new_sheet = 3;
inline bool CommandDocumentReplaceLastSheetArchive::_internal_has_new_sheet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_sheet_ != nullptr);
  return value;
}
inline bool CommandDocumentReplaceLastSheetArchive::has_new_sheet() const {
  return _internal_has_new_sheet();
}
inline const ::TSP::Reference& CommandDocumentReplaceLastSheetArchive::_internal_new_sheet() const {
  const ::TSP::Reference* p = _impl_.new_sheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandDocumentReplaceLastSheetArchive::new_sheet() const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentReplaceLastSheetArchive.new_sheet)
  return _internal_new_sheet();
}
inline void CommandDocumentReplaceLastSheetArchive::unsafe_arena_set_allocated_new_sheet(
    ::TSP::Reference* new_sheet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_sheet_);
  }
  _impl_.new_sheet_ = new_sheet;
  if (new_sheet) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandDocumentReplaceLastSheetArchive.new_sheet)
}
inline ::TSP::Reference* CommandDocumentReplaceLastSheetArchive::release_new_sheet() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.new_sheet_;
  _impl_.new_sheet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandDocumentReplaceLastSheetArchive::unsafe_arena_release_new_sheet() {
  // @@protoc_insertion_point(field_release:TN.CommandDocumentReplaceLastSheetArchive.new_sheet)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.new_sheet_;
  _impl_.new_sheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandDocumentReplaceLastSheetArchive::_internal_mutable_new_sheet() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.new_sheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.new_sheet_ = p;
  }
  return _impl_.new_sheet_;
}
inline ::TSP::Reference* CommandDocumentReplaceLastSheetArchive::mutable_new_sheet() {
  ::TSP::Reference* _msg = _internal_mutable_new_sheet();
  // @@protoc_insertion_point(field_mutable:TN.CommandDocumentReplaceLastSheetArchive.new_sheet)
  return _msg;
}
inline void CommandDocumentReplaceLastSheetArchive::set_allocated_new_sheet(::TSP::Reference* new_sheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_sheet_);
  }
  if (new_sheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_sheet));
    if (message_arena != submessage_arena) {
      new_sheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_sheet, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.new_sheet_ = new_sheet;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandDocumentReplaceLastSheetArchive.new_sheet)
}

// required .TSK.CommandArchive super = 4;
inline bool CommandDocumentReplaceLastSheetArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandDocumentReplaceLastSheetArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandDocumentReplaceLastSheetArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandDocumentReplaceLastSheetArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentReplaceLastSheetArchive.super)
  return _internal_super();
}
inline void CommandDocumentReplaceLastSheetArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandDocumentReplaceLastSheetArchive.super)
}
inline ::TSK::CommandArchive* CommandDocumentReplaceLastSheetArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandDocumentReplaceLastSheetArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandDocumentReplaceLastSheetArchive.super)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandDocumentReplaceLastSheetArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandDocumentReplaceLastSheetArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TN.CommandDocumentReplaceLastSheetArchive.super)
  return _msg;
}
inline void CommandDocumentReplaceLastSheetArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandDocumentReplaceLastSheetArchive.super)
}

// optional uint32 index = 5;
inline bool CommandDocumentReplaceLastSheetArchive::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandDocumentReplaceLastSheetArchive::has_index() const {
  return _internal_has_index();
}
inline void CommandDocumentReplaceLastSheetArchive::clear_index() {
  _impl_.index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CommandDocumentReplaceLastSheetArchive::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t CommandDocumentReplaceLastSheetArchive::index() const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentReplaceLastSheetArchive.index)
  return _internal_index();
}
inline void CommandDocumentReplaceLastSheetArchive::_internal_set_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.index_ = value;
}
inline void CommandDocumentReplaceLastSheetArchive::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:TN.CommandDocumentReplaceLastSheetArchive.index)
}

// -------------------------------------------------------------------

// CommandDocumentReorderSheetArchive

// required .TSP.Reference document = 1;
inline bool CommandDocumentReorderSheetArchive::_internal_has_document() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.document_ != nullptr);
  return value;
}
inline bool CommandDocumentReorderSheetArchive::has_document() const {
  return _internal_has_document();
}
inline const ::TSP::Reference& CommandDocumentReorderSheetArchive::_internal_document() const {
  const ::TSP::Reference* p = _impl_.document_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandDocumentReorderSheetArchive::document() const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentReorderSheetArchive.document)
  return _internal_document();
}
inline void CommandDocumentReorderSheetArchive::unsafe_arena_set_allocated_document(
    ::TSP::Reference* document) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.document_);
  }
  _impl_.document_ = document;
  if (document) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandDocumentReorderSheetArchive.document)
}
inline ::TSP::Reference* CommandDocumentReorderSheetArchive::release_document() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.document_;
  _impl_.document_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandDocumentReorderSheetArchive::unsafe_arena_release_document() {
  // @@protoc_insertion_point(field_release:TN.CommandDocumentReorderSheetArchive.document)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.document_;
  _impl_.document_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandDocumentReorderSheetArchive::_internal_mutable_document() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.document_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.document_ = p;
  }
  return _impl_.document_;
}
inline ::TSP::Reference* CommandDocumentReorderSheetArchive::mutable_document() {
  ::TSP::Reference* _msg = _internal_mutable_document();
  // @@protoc_insertion_point(field_mutable:TN.CommandDocumentReorderSheetArchive.document)
  return _msg;
}
inline void CommandDocumentReorderSheetArchive::set_allocated_document(::TSP::Reference* document) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.document_);
  }
  if (document) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document));
    if (message_arena != submessage_arena) {
      document = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, document, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.document_ = document;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandDocumentReorderSheetArchive.document)
}

// required .TSP.Reference sheet = 2;
inline bool CommandDocumentReorderSheetArchive::_internal_has_sheet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sheet_ != nullptr);
  return value;
}
inline bool CommandDocumentReorderSheetArchive::has_sheet() const {
  return _internal_has_sheet();
}
inline const ::TSP::Reference& CommandDocumentReorderSheetArchive::_internal_sheet() const {
  const ::TSP::Reference* p = _impl_.sheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandDocumentReorderSheetArchive::sheet() const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentReorderSheetArchive.sheet)
  return _internal_sheet();
}
inline void CommandDocumentReorderSheetArchive::unsafe_arena_set_allocated_sheet(
    ::TSP::Reference* sheet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  _impl_.sheet_ = sheet;
  if (sheet) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandDocumentReorderSheetArchive.sheet)
}
inline ::TSP::Reference* CommandDocumentReorderSheetArchive::release_sheet() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandDocumentReorderSheetArchive::unsafe_arena_release_sheet() {
  // @@protoc_insertion_point(field_release:TN.CommandDocumentReorderSheetArchive.sheet)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandDocumentReorderSheetArchive::_internal_mutable_sheet() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.sheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.sheet_ = p;
  }
  return _impl_.sheet_;
}
inline ::TSP::Reference* CommandDocumentReorderSheetArchive::mutable_sheet() {
  ::TSP::Reference* _msg = _internal_mutable_sheet();
  // @@protoc_insertion_point(field_mutable:TN.CommandDocumentReorderSheetArchive.sheet)
  return _msg;
}
inline void CommandDocumentReorderSheetArchive::set_allocated_sheet(::TSP::Reference* sheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  if (sheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet));
    if (message_arena != submessage_arena) {
      sheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.sheet_ = sheet;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandDocumentReorderSheetArchive.sheet)
}

// required uint32 source_index = 3;
inline bool CommandDocumentReorderSheetArchive::_internal_has_source_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandDocumentReorderSheetArchive::has_source_index() const {
  return _internal_has_source_index();
}
inline void CommandDocumentReorderSheetArchive::clear_source_index() {
  _impl_.source_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CommandDocumentReorderSheetArchive::_internal_source_index() const {
  return _impl_.source_index_;
}
inline uint32_t CommandDocumentReorderSheetArchive::source_index() const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentReorderSheetArchive.source_index)
  return _internal_source_index();
}
inline void CommandDocumentReorderSheetArchive::_internal_set_source_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.source_index_ = value;
}
inline void CommandDocumentReorderSheetArchive::set_source_index(uint32_t value) {
  _internal_set_source_index(value);
  // @@protoc_insertion_point(field_set:TN.CommandDocumentReorderSheetArchive.source_index)
}

// required uint32 dest_index = 4;
inline bool CommandDocumentReorderSheetArchive::_internal_has_dest_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandDocumentReorderSheetArchive::has_dest_index() const {
  return _internal_has_dest_index();
}
inline void CommandDocumentReorderSheetArchive::clear_dest_index() {
  _impl_.dest_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CommandDocumentReorderSheetArchive::_internal_dest_index() const {
  return _impl_.dest_index_;
}
inline uint32_t CommandDocumentReorderSheetArchive::dest_index() const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentReorderSheetArchive.dest_index)
  return _internal_dest_index();
}
inline void CommandDocumentReorderSheetArchive::_internal_set_dest_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.dest_index_ = value;
}
inline void CommandDocumentReorderSheetArchive::set_dest_index(uint32_t value) {
  _internal_set_dest_index(value);
  // @@protoc_insertion_point(field_set:TN.CommandDocumentReorderSheetArchive.dest_index)
}

// required .TSK.CommandArchive super = 5;
inline bool CommandDocumentReorderSheetArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandDocumentReorderSheetArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandDocumentReorderSheetArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandDocumentReorderSheetArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentReorderSheetArchive.super)
  return _internal_super();
}
inline void CommandDocumentReorderSheetArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandDocumentReorderSheetArchive.super)
}
inline ::TSK::CommandArchive* CommandDocumentReorderSheetArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandDocumentReorderSheetArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandDocumentReorderSheetArchive.super)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandDocumentReorderSheetArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandDocumentReorderSheetArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TN.CommandDocumentReorderSheetArchive.super)
  return _msg;
}
inline void CommandDocumentReorderSheetArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandDocumentReorderSheetArchive.super)
}

// -------------------------------------------------------------------

// CommandSetSheetNameArchive

// required string newname = 1;
inline bool CommandSetSheetNameArchive::_internal_has_newname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandSetSheetNameArchive::has_newname() const {
  return _internal_has_newname();
}
inline void CommandSetSheetNameArchive::clear_newname() {
  _impl_.newname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandSetSheetNameArchive::newname() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetSheetNameArchive.newname)
  return _internal_newname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSetSheetNameArchive::set_newname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.newname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TN.CommandSetSheetNameArchive.newname)
}
inline std::string* CommandSetSheetNameArchive::mutable_newname() {
  std::string* _s = _internal_mutable_newname();
  // @@protoc_insertion_point(field_mutable:TN.CommandSetSheetNameArchive.newname)
  return _s;
}
inline const std::string& CommandSetSheetNameArchive::_internal_newname() const {
  return _impl_.newname_.Get();
}
inline void CommandSetSheetNameArchive::_internal_set_newname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.newname_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandSetSheetNameArchive::_internal_mutable_newname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.newname_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandSetSheetNameArchive::release_newname() {
  // @@protoc_insertion_point(field_release:TN.CommandSetSheetNameArchive.newname)
  if (!_internal_has_newname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.newname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.newname_.IsDefault()) {
    _impl_.newname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandSetSheetNameArchive::set_allocated_newname(std::string* newname) {
  if (newname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.newname_.SetAllocated(newname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.newname_.IsDefault()) {
    _impl_.newname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetSheetNameArchive.newname)
}

// required string oldname = 2;
inline bool CommandSetSheetNameArchive::_internal_has_oldname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetSheetNameArchive::has_oldname() const {
  return _internal_has_oldname();
}
inline void CommandSetSheetNameArchive::clear_oldname() {
  _impl_.oldname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CommandSetSheetNameArchive::oldname() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetSheetNameArchive.oldname)
  return _internal_oldname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSetSheetNameArchive::set_oldname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.oldname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TN.CommandSetSheetNameArchive.oldname)
}
inline std::string* CommandSetSheetNameArchive::mutable_oldname() {
  std::string* _s = _internal_mutable_oldname();
  // @@protoc_insertion_point(field_mutable:TN.CommandSetSheetNameArchive.oldname)
  return _s;
}
inline const std::string& CommandSetSheetNameArchive::_internal_oldname() const {
  return _impl_.oldname_.Get();
}
inline void CommandSetSheetNameArchive::_internal_set_oldname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.oldname_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandSetSheetNameArchive::_internal_mutable_oldname() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.oldname_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandSetSheetNameArchive::release_oldname() {
  // @@protoc_insertion_point(field_release:TN.CommandSetSheetNameArchive.oldname)
  if (!_internal_has_oldname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.oldname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.oldname_.IsDefault()) {
    _impl_.oldname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandSetSheetNameArchive::set_allocated_oldname(std::string* oldname) {
  if (oldname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.oldname_.SetAllocated(oldname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.oldname_.IsDefault()) {
    _impl_.oldname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetSheetNameArchive.oldname)
}

// required .TSP.Reference sheet = 3;
inline bool CommandSetSheetNameArchive::_internal_has_sheet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sheet_ != nullptr);
  return value;
}
inline bool CommandSetSheetNameArchive::has_sheet() const {
  return _internal_has_sheet();
}
inline const ::TSP::Reference& CommandSetSheetNameArchive::_internal_sheet() const {
  const ::TSP::Reference* p = _impl_.sheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetSheetNameArchive::sheet() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetSheetNameArchive.sheet)
  return _internal_sheet();
}
inline void CommandSetSheetNameArchive::unsafe_arena_set_allocated_sheet(
    ::TSP::Reference* sheet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  _impl_.sheet_ = sheet;
  if (sheet) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetSheetNameArchive.sheet)
}
inline ::TSP::Reference* CommandSetSheetNameArchive::release_sheet() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetSheetNameArchive::unsafe_arena_release_sheet() {
  // @@protoc_insertion_point(field_release:TN.CommandSetSheetNameArchive.sheet)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetSheetNameArchive::_internal_mutable_sheet() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.sheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.sheet_ = p;
  }
  return _impl_.sheet_;
}
inline ::TSP::Reference* CommandSetSheetNameArchive::mutable_sheet() {
  ::TSP::Reference* _msg = _internal_mutable_sheet();
  // @@protoc_insertion_point(field_mutable:TN.CommandSetSheetNameArchive.sheet)
  return _msg;
}
inline void CommandSetSheetNameArchive::set_allocated_sheet(::TSP::Reference* sheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  if (sheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet));
    if (message_arena != submessage_arena) {
      sheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.sheet_ = sheet;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetSheetNameArchive.sheet)
}

// required .TSK.CommandArchive super = 4;
inline bool CommandSetSheetNameArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetSheetNameArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSetSheetNameArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSetSheetNameArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetSheetNameArchive.super)
  return _internal_super();
}
inline void CommandSetSheetNameArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetSheetNameArchive.super)
}
inline ::TSK::CommandArchive* CommandSetSheetNameArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSetSheetNameArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandSetSheetNameArchive.super)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSetSheetNameArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSetSheetNameArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TN.CommandSetSheetNameArchive.super)
  return _msg;
}
inline void CommandSetSheetNameArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetSheetNameArchive.super)
}

// -------------------------------------------------------------------

// CommandSetPageOrientationArchive

// required bool in_portrait_page_orientation = 1;
inline bool CommandSetPageOrientationArchive::_internal_has_in_portrait_page_orientation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetPageOrientationArchive::has_in_portrait_page_orientation() const {
  return _internal_has_in_portrait_page_orientation();
}
inline void CommandSetPageOrientationArchive::clear_in_portrait_page_orientation() {
  _impl_.in_portrait_page_orientation_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CommandSetPageOrientationArchive::_internal_in_portrait_page_orientation() const {
  return _impl_.in_portrait_page_orientation_;
}
inline bool CommandSetPageOrientationArchive::in_portrait_page_orientation() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetPageOrientationArchive.in_portrait_page_orientation)
  return _internal_in_portrait_page_orientation();
}
inline void CommandSetPageOrientationArchive::_internal_set_in_portrait_page_orientation(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.in_portrait_page_orientation_ = value;
}
inline void CommandSetPageOrientationArchive::set_in_portrait_page_orientation(bool value) {
  _internal_set_in_portrait_page_orientation(value);
  // @@protoc_insertion_point(field_set:TN.CommandSetPageOrientationArchive.in_portrait_page_orientation)
}

// required .TSP.Reference sheet = 2;
inline bool CommandSetPageOrientationArchive::_internal_has_sheet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sheet_ != nullptr);
  return value;
}
inline bool CommandSetPageOrientationArchive::has_sheet() const {
  return _internal_has_sheet();
}
inline const ::TSP::Reference& CommandSetPageOrientationArchive::_internal_sheet() const {
  const ::TSP::Reference* p = _impl_.sheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetPageOrientationArchive::sheet() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetPageOrientationArchive.sheet)
  return _internal_sheet();
}
inline void CommandSetPageOrientationArchive::unsafe_arena_set_allocated_sheet(
    ::TSP::Reference* sheet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  _impl_.sheet_ = sheet;
  if (sheet) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetPageOrientationArchive.sheet)
}
inline ::TSP::Reference* CommandSetPageOrientationArchive::release_sheet() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetPageOrientationArchive::unsafe_arena_release_sheet() {
  // @@protoc_insertion_point(field_release:TN.CommandSetPageOrientationArchive.sheet)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetPageOrientationArchive::_internal_mutable_sheet() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.sheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.sheet_ = p;
  }
  return _impl_.sheet_;
}
inline ::TSP::Reference* CommandSetPageOrientationArchive::mutable_sheet() {
  ::TSP::Reference* _msg = _internal_mutable_sheet();
  // @@protoc_insertion_point(field_mutable:TN.CommandSetPageOrientationArchive.sheet)
  return _msg;
}
inline void CommandSetPageOrientationArchive::set_allocated_sheet(::TSP::Reference* sheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  if (sheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet));
    if (message_arena != submessage_arena) {
      sheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sheet_ = sheet;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetPageOrientationArchive.sheet)
}

// required .TSK.CommandArchive super = 3;
inline bool CommandSetPageOrientationArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetPageOrientationArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSetPageOrientationArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSetPageOrientationArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetPageOrientationArchive.super)
  return _internal_super();
}
inline void CommandSetPageOrientationArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetPageOrientationArchive.super)
}
inline ::TSK::CommandArchive* CommandSetPageOrientationArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSetPageOrientationArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandSetPageOrientationArchive.super)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSetPageOrientationArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSetPageOrientationArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TN.CommandSetPageOrientationArchive.super)
  return _msg;
}
inline void CommandSetPageOrientationArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetPageOrientationArchive.super)
}

// -------------------------------------------------------------------

// CommandSetShowPageNumbersValueArchive

// required bool show_page_numbers = 1;
inline bool CommandSetShowPageNumbersValueArchive::_internal_has_show_page_numbers() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetShowPageNumbersValueArchive::has_show_page_numbers() const {
  return _internal_has_show_page_numbers();
}
inline void CommandSetShowPageNumbersValueArchive::clear_show_page_numbers() {
  _impl_.show_page_numbers_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CommandSetShowPageNumbersValueArchive::_internal_show_page_numbers() const {
  return _impl_.show_page_numbers_;
}
inline bool CommandSetShowPageNumbersValueArchive::show_page_numbers() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetShowPageNumbersValueArchive.show_page_numbers)
  return _internal_show_page_numbers();
}
inline void CommandSetShowPageNumbersValueArchive::_internal_set_show_page_numbers(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.show_page_numbers_ = value;
}
inline void CommandSetShowPageNumbersValueArchive::set_show_page_numbers(bool value) {
  _internal_set_show_page_numbers(value);
  // @@protoc_insertion_point(field_set:TN.CommandSetShowPageNumbersValueArchive.show_page_numbers)
}

// required .TSP.Reference sheet = 2;
inline bool CommandSetShowPageNumbersValueArchive::_internal_has_sheet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sheet_ != nullptr);
  return value;
}
inline bool CommandSetShowPageNumbersValueArchive::has_sheet() const {
  return _internal_has_sheet();
}
inline const ::TSP::Reference& CommandSetShowPageNumbersValueArchive::_internal_sheet() const {
  const ::TSP::Reference* p = _impl_.sheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetShowPageNumbersValueArchive::sheet() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetShowPageNumbersValueArchive.sheet)
  return _internal_sheet();
}
inline void CommandSetShowPageNumbersValueArchive::unsafe_arena_set_allocated_sheet(
    ::TSP::Reference* sheet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  _impl_.sheet_ = sheet;
  if (sheet) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetShowPageNumbersValueArchive.sheet)
}
inline ::TSP::Reference* CommandSetShowPageNumbersValueArchive::release_sheet() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetShowPageNumbersValueArchive::unsafe_arena_release_sheet() {
  // @@protoc_insertion_point(field_release:TN.CommandSetShowPageNumbersValueArchive.sheet)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetShowPageNumbersValueArchive::_internal_mutable_sheet() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.sheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.sheet_ = p;
  }
  return _impl_.sheet_;
}
inline ::TSP::Reference* CommandSetShowPageNumbersValueArchive::mutable_sheet() {
  ::TSP::Reference* _msg = _internal_mutable_sheet();
  // @@protoc_insertion_point(field_mutable:TN.CommandSetShowPageNumbersValueArchive.sheet)
  return _msg;
}
inline void CommandSetShowPageNumbersValueArchive::set_allocated_sheet(::TSP::Reference* sheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  if (sheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet));
    if (message_arena != submessage_arena) {
      sheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sheet_ = sheet;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetShowPageNumbersValueArchive.sheet)
}

// required .TSK.CommandArchive super = 3;
inline bool CommandSetShowPageNumbersValueArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetShowPageNumbersValueArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSetShowPageNumbersValueArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSetShowPageNumbersValueArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetShowPageNumbersValueArchive.super)
  return _internal_super();
}
inline void CommandSetShowPageNumbersValueArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetShowPageNumbersValueArchive.super)
}
inline ::TSK::CommandArchive* CommandSetShowPageNumbersValueArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSetShowPageNumbersValueArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandSetShowPageNumbersValueArchive.super)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSetShowPageNumbersValueArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSetShowPageNumbersValueArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TN.CommandSetShowPageNumbersValueArchive.super)
  return _msg;
}
inline void CommandSetShowPageNumbersValueArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetShowPageNumbersValueArchive.super)
}

// -------------------------------------------------------------------

// CommandSetRepeatingHeadersValueArchive

// required bool show_repeating_headers = 1;
inline bool CommandSetRepeatingHeadersValueArchive::_internal_has_show_repeating_headers() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetRepeatingHeadersValueArchive::has_show_repeating_headers() const {
  return _internal_has_show_repeating_headers();
}
inline void CommandSetRepeatingHeadersValueArchive::clear_show_repeating_headers() {
  _impl_.show_repeating_headers_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CommandSetRepeatingHeadersValueArchive::_internal_show_repeating_headers() const {
  return _impl_.show_repeating_headers_;
}
inline bool CommandSetRepeatingHeadersValueArchive::show_repeating_headers() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetRepeatingHeadersValueArchive.show_repeating_headers)
  return _internal_show_repeating_headers();
}
inline void CommandSetRepeatingHeadersValueArchive::_internal_set_show_repeating_headers(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.show_repeating_headers_ = value;
}
inline void CommandSetRepeatingHeadersValueArchive::set_show_repeating_headers(bool value) {
  _internal_set_show_repeating_headers(value);
  // @@protoc_insertion_point(field_set:TN.CommandSetRepeatingHeadersValueArchive.show_repeating_headers)
}

// required .TSP.Reference sheet = 2;
inline bool CommandSetRepeatingHeadersValueArchive::_internal_has_sheet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sheet_ != nullptr);
  return value;
}
inline bool CommandSetRepeatingHeadersValueArchive::has_sheet() const {
  return _internal_has_sheet();
}
inline const ::TSP::Reference& CommandSetRepeatingHeadersValueArchive::_internal_sheet() const {
  const ::TSP::Reference* p = _impl_.sheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetRepeatingHeadersValueArchive::sheet() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetRepeatingHeadersValueArchive.sheet)
  return _internal_sheet();
}
inline void CommandSetRepeatingHeadersValueArchive::unsafe_arena_set_allocated_sheet(
    ::TSP::Reference* sheet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  _impl_.sheet_ = sheet;
  if (sheet) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetRepeatingHeadersValueArchive.sheet)
}
inline ::TSP::Reference* CommandSetRepeatingHeadersValueArchive::release_sheet() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetRepeatingHeadersValueArchive::unsafe_arena_release_sheet() {
  // @@protoc_insertion_point(field_release:TN.CommandSetRepeatingHeadersValueArchive.sheet)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetRepeatingHeadersValueArchive::_internal_mutable_sheet() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.sheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.sheet_ = p;
  }
  return _impl_.sheet_;
}
inline ::TSP::Reference* CommandSetRepeatingHeadersValueArchive::mutable_sheet() {
  ::TSP::Reference* _msg = _internal_mutable_sheet();
  // @@protoc_insertion_point(field_mutable:TN.CommandSetRepeatingHeadersValueArchive.sheet)
  return _msg;
}
inline void CommandSetRepeatingHeadersValueArchive::set_allocated_sheet(::TSP::Reference* sheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  if (sheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet));
    if (message_arena != submessage_arena) {
      sheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sheet_ = sheet;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetRepeatingHeadersValueArchive.sheet)
}

// required .TSK.CommandArchive super = 3;
inline bool CommandSetRepeatingHeadersValueArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetRepeatingHeadersValueArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSetRepeatingHeadersValueArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSetRepeatingHeadersValueArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetRepeatingHeadersValueArchive.super)
  return _internal_super();
}
inline void CommandSetRepeatingHeadersValueArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetRepeatingHeadersValueArchive.super)
}
inline ::TSK::CommandArchive* CommandSetRepeatingHeadersValueArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSetRepeatingHeadersValueArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandSetRepeatingHeadersValueArchive.super)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSetRepeatingHeadersValueArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSetRepeatingHeadersValueArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TN.CommandSetRepeatingHeadersValueArchive.super)
  return _msg;
}
inline void CommandSetRepeatingHeadersValueArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetRepeatingHeadersValueArchive.super)
}

// -------------------------------------------------------------------

// CommandSetContentScaleArchive

// required bool is_autofit_on = 1;
inline bool CommandSetContentScaleArchive::_internal_has_is_autofit_on() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetContentScaleArchive::has_is_autofit_on() const {
  return _internal_has_is_autofit_on();
}
inline void CommandSetContentScaleArchive::clear_is_autofit_on() {
  _impl_.is_autofit_on_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CommandSetContentScaleArchive::_internal_is_autofit_on() const {
  return _impl_.is_autofit_on_;
}
inline bool CommandSetContentScaleArchive::is_autofit_on() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetContentScaleArchive.is_autofit_on)
  return _internal_is_autofit_on();
}
inline void CommandSetContentScaleArchive::_internal_set_is_autofit_on(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.is_autofit_on_ = value;
}
inline void CommandSetContentScaleArchive::set_is_autofit_on(bool value) {
  _internal_set_is_autofit_on(value);
  // @@protoc_insertion_point(field_set:TN.CommandSetContentScaleArchive.is_autofit_on)
}

// required float old_content_scale = 2;
inline bool CommandSetContentScaleArchive::_internal_has_old_content_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSetContentScaleArchive::has_old_content_scale() const {
  return _internal_has_old_content_scale();
}
inline void CommandSetContentScaleArchive::clear_old_content_scale() {
  _impl_.old_content_scale_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float CommandSetContentScaleArchive::_internal_old_content_scale() const {
  return _impl_.old_content_scale_;
}
inline float CommandSetContentScaleArchive::old_content_scale() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetContentScaleArchive.old_content_scale)
  return _internal_old_content_scale();
}
inline void CommandSetContentScaleArchive::_internal_set_old_content_scale(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.old_content_scale_ = value;
}
inline void CommandSetContentScaleArchive::set_old_content_scale(float value) {
  _internal_set_old_content_scale(value);
  // @@protoc_insertion_point(field_set:TN.CommandSetContentScaleArchive.old_content_scale)
}

// optional float new_content_scale = 3;
inline bool CommandSetContentScaleArchive::_internal_has_new_content_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandSetContentScaleArchive::has_new_content_scale() const {
  return _internal_has_new_content_scale();
}
inline void CommandSetContentScaleArchive::clear_new_content_scale() {
  _impl_.new_content_scale_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float CommandSetContentScaleArchive::_internal_new_content_scale() const {
  return _impl_.new_content_scale_;
}
inline float CommandSetContentScaleArchive::new_content_scale() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetContentScaleArchive.new_content_scale)
  return _internal_new_content_scale();
}
inline void CommandSetContentScaleArchive::_internal_set_new_content_scale(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.new_content_scale_ = value;
}
inline void CommandSetContentScaleArchive::set_new_content_scale(float value) {
  _internal_set_new_content_scale(value);
  // @@protoc_insertion_point(field_set:TN.CommandSetContentScaleArchive.new_content_scale)
}

// required .TSP.Reference sheet = 4;
inline bool CommandSetContentScaleArchive::_internal_has_sheet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sheet_ != nullptr);
  return value;
}
inline bool CommandSetContentScaleArchive::has_sheet() const {
  return _internal_has_sheet();
}
inline const ::TSP::Reference& CommandSetContentScaleArchive::_internal_sheet() const {
  const ::TSP::Reference* p = _impl_.sheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetContentScaleArchive::sheet() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetContentScaleArchive.sheet)
  return _internal_sheet();
}
inline void CommandSetContentScaleArchive::unsafe_arena_set_allocated_sheet(
    ::TSP::Reference* sheet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  _impl_.sheet_ = sheet;
  if (sheet) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetContentScaleArchive.sheet)
}
inline ::TSP::Reference* CommandSetContentScaleArchive::release_sheet() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetContentScaleArchive::unsafe_arena_release_sheet() {
  // @@protoc_insertion_point(field_release:TN.CommandSetContentScaleArchive.sheet)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetContentScaleArchive::_internal_mutable_sheet() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.sheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.sheet_ = p;
  }
  return _impl_.sheet_;
}
inline ::TSP::Reference* CommandSetContentScaleArchive::mutable_sheet() {
  ::TSP::Reference* _msg = _internal_mutable_sheet();
  // @@protoc_insertion_point(field_mutable:TN.CommandSetContentScaleArchive.sheet)
  return _msg;
}
inline void CommandSetContentScaleArchive::set_allocated_sheet(::TSP::Reference* sheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  if (sheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet));
    if (message_arena != submessage_arena) {
      sheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sheet_ = sheet;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetContentScaleArchive.sheet)
}

// required .TSK.CommandArchive super = 5;
inline bool CommandSetContentScaleArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetContentScaleArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSetContentScaleArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSetContentScaleArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetContentScaleArchive.super)
  return _internal_super();
}
inline void CommandSetContentScaleArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetContentScaleArchive.super)
}
inline ::TSK::CommandArchive* CommandSetContentScaleArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSetContentScaleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandSetContentScaleArchive.super)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSetContentScaleArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSetContentScaleArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TN.CommandSetContentScaleArchive.super)
  return _msg;
}
inline void CommandSetContentScaleArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetContentScaleArchive.super)
}

// -------------------------------------------------------------------

// CommandSetAutofitValueArchive

// required float old_content_scale = 1;
inline bool CommandSetAutofitValueArchive::_internal_has_old_content_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetAutofitValueArchive::has_old_content_scale() const {
  return _internal_has_old_content_scale();
}
inline void CommandSetAutofitValueArchive::clear_old_content_scale() {
  _impl_.old_content_scale_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float CommandSetAutofitValueArchive::_internal_old_content_scale() const {
  return _impl_.old_content_scale_;
}
inline float CommandSetAutofitValueArchive::old_content_scale() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetAutofitValueArchive.old_content_scale)
  return _internal_old_content_scale();
}
inline void CommandSetAutofitValueArchive::_internal_set_old_content_scale(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.old_content_scale_ = value;
}
inline void CommandSetAutofitValueArchive::set_old_content_scale(float value) {
  _internal_set_old_content_scale(value);
  // @@protoc_insertion_point(field_set:TN.CommandSetAutofitValueArchive.old_content_scale)
}

// required .TSP.Reference sheet = 2;
inline bool CommandSetAutofitValueArchive::_internal_has_sheet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sheet_ != nullptr);
  return value;
}
inline bool CommandSetAutofitValueArchive::has_sheet() const {
  return _internal_has_sheet();
}
inline const ::TSP::Reference& CommandSetAutofitValueArchive::_internal_sheet() const {
  const ::TSP::Reference* p = _impl_.sheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetAutofitValueArchive::sheet() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetAutofitValueArchive.sheet)
  return _internal_sheet();
}
inline void CommandSetAutofitValueArchive::unsafe_arena_set_allocated_sheet(
    ::TSP::Reference* sheet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  _impl_.sheet_ = sheet;
  if (sheet) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetAutofitValueArchive.sheet)
}
inline ::TSP::Reference* CommandSetAutofitValueArchive::release_sheet() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetAutofitValueArchive::unsafe_arena_release_sheet() {
  // @@protoc_insertion_point(field_release:TN.CommandSetAutofitValueArchive.sheet)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetAutofitValueArchive::_internal_mutable_sheet() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.sheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.sheet_ = p;
  }
  return _impl_.sheet_;
}
inline ::TSP::Reference* CommandSetAutofitValueArchive::mutable_sheet() {
  ::TSP::Reference* _msg = _internal_mutable_sheet();
  // @@protoc_insertion_point(field_mutable:TN.CommandSetAutofitValueArchive.sheet)
  return _msg;
}
inline void CommandSetAutofitValueArchive::set_allocated_sheet(::TSP::Reference* sheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  if (sheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet));
    if (message_arena != submessage_arena) {
      sheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sheet_ = sheet;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetAutofitValueArchive.sheet)
}

// required .TSK.CommandArchive super = 3;
inline bool CommandSetAutofitValueArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetAutofitValueArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSetAutofitValueArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSetAutofitValueArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetAutofitValueArchive.super)
  return _internal_super();
}
inline void CommandSetAutofitValueArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetAutofitValueArchive.super)
}
inline ::TSK::CommandArchive* CommandSetAutofitValueArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSetAutofitValueArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandSetAutofitValueArchive.super)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSetAutofitValueArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSetAutofitValueArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TN.CommandSetAutofitValueArchive.super)
  return _msg;
}
inline void CommandSetAutofitValueArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetAutofitValueArchive.super)
}

// -------------------------------------------------------------------

// CommandSetDocumentPrinterOptions

// required string printer_id = 1;
inline bool CommandSetDocumentPrinterOptions::_internal_has_printer_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandSetDocumentPrinterOptions::has_printer_id() const {
  return _internal_has_printer_id();
}
inline void CommandSetDocumentPrinterOptions::clear_printer_id() {
  _impl_.printer_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandSetDocumentPrinterOptions::printer_id() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetDocumentPrinterOptions.printer_id)
  return _internal_printer_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSetDocumentPrinterOptions::set_printer_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.printer_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TN.CommandSetDocumentPrinterOptions.printer_id)
}
inline std::string* CommandSetDocumentPrinterOptions::mutable_printer_id() {
  std::string* _s = _internal_mutable_printer_id();
  // @@protoc_insertion_point(field_mutable:TN.CommandSetDocumentPrinterOptions.printer_id)
  return _s;
}
inline const std::string& CommandSetDocumentPrinterOptions::_internal_printer_id() const {
  return _impl_.printer_id_.Get();
}
inline void CommandSetDocumentPrinterOptions::_internal_set_printer_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.printer_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandSetDocumentPrinterOptions::_internal_mutable_printer_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.printer_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandSetDocumentPrinterOptions::release_printer_id() {
  // @@protoc_insertion_point(field_release:TN.CommandSetDocumentPrinterOptions.printer_id)
  if (!_internal_has_printer_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.printer_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.printer_id_.IsDefault()) {
    _impl_.printer_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandSetDocumentPrinterOptions::set_allocated_printer_id(std::string* printer_id) {
  if (printer_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.printer_id_.SetAllocated(printer_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.printer_id_.IsDefault()) {
    _impl_.printer_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetDocumentPrinterOptions.printer_id)
}

// required string paper_id = 2;
inline bool CommandSetDocumentPrinterOptions::_internal_has_paper_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetDocumentPrinterOptions::has_paper_id() const {
  return _internal_has_paper_id();
}
inline void CommandSetDocumentPrinterOptions::clear_paper_id() {
  _impl_.paper_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CommandSetDocumentPrinterOptions::paper_id() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetDocumentPrinterOptions.paper_id)
  return _internal_paper_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSetDocumentPrinterOptions::set_paper_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.paper_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TN.CommandSetDocumentPrinterOptions.paper_id)
}
inline std::string* CommandSetDocumentPrinterOptions::mutable_paper_id() {
  std::string* _s = _internal_mutable_paper_id();
  // @@protoc_insertion_point(field_mutable:TN.CommandSetDocumentPrinterOptions.paper_id)
  return _s;
}
inline const std::string& CommandSetDocumentPrinterOptions::_internal_paper_id() const {
  return _impl_.paper_id_.Get();
}
inline void CommandSetDocumentPrinterOptions::_internal_set_paper_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.paper_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandSetDocumentPrinterOptions::_internal_mutable_paper_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.paper_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandSetDocumentPrinterOptions::release_paper_id() {
  // @@protoc_insertion_point(field_release:TN.CommandSetDocumentPrinterOptions.paper_id)
  if (!_internal_has_paper_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.paper_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.paper_id_.IsDefault()) {
    _impl_.paper_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandSetDocumentPrinterOptions::set_allocated_paper_id(std::string* paper_id) {
  if (paper_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.paper_id_.SetAllocated(paper_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.paper_id_.IsDefault()) {
    _impl_.paper_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetDocumentPrinterOptions.paper_id)
}

// required .TSP.Size page_size = 3;
inline bool CommandSetDocumentPrinterOptions::_internal_has_page_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.page_size_ != nullptr);
  return value;
}
inline bool CommandSetDocumentPrinterOptions::has_page_size() const {
  return _internal_has_page_size();
}
inline const ::TSP::Size& CommandSetDocumentPrinterOptions::_internal_page_size() const {
  const ::TSP::Size* p = _impl_.page_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& CommandSetDocumentPrinterOptions::page_size() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetDocumentPrinterOptions.page_size)
  return _internal_page_size();
}
inline void CommandSetDocumentPrinterOptions::unsafe_arena_set_allocated_page_size(
    ::TSP::Size* page_size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.page_size_);
  }
  _impl_.page_size_ = page_size;
  if (page_size) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetDocumentPrinterOptions.page_size)
}
inline ::TSP::Size* CommandSetDocumentPrinterOptions::release_page_size() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Size* temp = _impl_.page_size_;
  _impl_.page_size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Size* CommandSetDocumentPrinterOptions::unsafe_arena_release_page_size() {
  // @@protoc_insertion_point(field_release:TN.CommandSetDocumentPrinterOptions.page_size)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Size* temp = _impl_.page_size_;
  _impl_.page_size_ = nullptr;
  return temp;
}
inline ::TSP::Size* CommandSetDocumentPrinterOptions::_internal_mutable_page_size() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.page_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArenaForAllocation());
    _impl_.page_size_ = p;
  }
  return _impl_.page_size_;
}
inline ::TSP::Size* CommandSetDocumentPrinterOptions::mutable_page_size() {
  ::TSP::Size* _msg = _internal_mutable_page_size();
  // @@protoc_insertion_point(field_mutable:TN.CommandSetDocumentPrinterOptions.page_size)
  return _msg;
}
inline void CommandSetDocumentPrinterOptions::set_allocated_page_size(::TSP::Size* page_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.page_size_);
  }
  if (page_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(page_size));
    if (message_arena != submessage_arena) {
      page_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, page_size, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.page_size_ = page_size;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetDocumentPrinterOptions.page_size)
}

// required .TSK.CommandArchive super = 4;
inline bool CommandSetDocumentPrinterOptions::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetDocumentPrinterOptions::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSetDocumentPrinterOptions::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSetDocumentPrinterOptions::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetDocumentPrinterOptions.super)
  return _internal_super();
}
inline void CommandSetDocumentPrinterOptions::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetDocumentPrinterOptions.super)
}
inline ::TSK::CommandArchive* CommandSetDocumentPrinterOptions::release_super() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSetDocumentPrinterOptions::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandSetDocumentPrinterOptions.super)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSetDocumentPrinterOptions::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSetDocumentPrinterOptions::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TN.CommandSetDocumentPrinterOptions.super)
  return _msg;
}
inline void CommandSetDocumentPrinterOptions::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetDocumentPrinterOptions.super)
}

// -------------------------------------------------------------------

// CommandEnterPrintPreviewModeArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandEnterPrintPreviewModeArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandEnterPrintPreviewModeArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandEnterPrintPreviewModeArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandEnterPrintPreviewModeArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandEnterPrintPreviewModeArchive.super)
  return _internal_super();
}
inline void CommandEnterPrintPreviewModeArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandEnterPrintPreviewModeArchive.super)
}
inline ::TSK::CommandArchive* CommandEnterPrintPreviewModeArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandEnterPrintPreviewModeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandEnterPrintPreviewModeArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandEnterPrintPreviewModeArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandEnterPrintPreviewModeArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TN.CommandEnterPrintPreviewModeArchive.super)
  return _msg;
}
inline void CommandEnterPrintPreviewModeArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandEnterPrintPreviewModeArchive.super)
}

// -------------------------------------------------------------------

// CommandExitPrintPreviewModeArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandExitPrintPreviewModeArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandExitPrintPreviewModeArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandExitPrintPreviewModeArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandExitPrintPreviewModeArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandExitPrintPreviewModeArchive.super)
  return _internal_super();
}
inline void CommandExitPrintPreviewModeArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandExitPrintPreviewModeArchive.super)
}
inline ::TSK::CommandArchive* CommandExitPrintPreviewModeArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandExitPrintPreviewModeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandExitPrintPreviewModeArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandExitPrintPreviewModeArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandExitPrintPreviewModeArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TN.CommandExitPrintPreviewModeArchive.super)
  return _msg;
}
inline void CommandExitPrintPreviewModeArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandExitPrintPreviewModeArchive.super)
}

// -------------------------------------------------------------------

// CommandPasteDrawablesArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandPasteDrawablesArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandPasteDrawablesArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandPasteDrawablesArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandPasteDrawablesArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandPasteDrawablesArchive.super)
  return _internal_super();
}
inline void CommandPasteDrawablesArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandPasteDrawablesArchive.super)
}
inline ::TSK::CommandArchive* CommandPasteDrawablesArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandPasteDrawablesArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandPasteDrawablesArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandPasteDrawablesArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandPasteDrawablesArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TN.CommandPasteDrawablesArchive.super)
  return _msg;
}
inline void CommandPasteDrawablesArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandPasteDrawablesArchive.super)
}

// required .TSP.Reference sheet = 2;
inline bool CommandPasteDrawablesArchive::_internal_has_sheet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sheet_ != nullptr);
  return value;
}
inline bool CommandPasteDrawablesArchive::has_sheet() const {
  return _internal_has_sheet();
}
inline const ::TSP::Reference& CommandPasteDrawablesArchive::_internal_sheet() const {
  const ::TSP::Reference* p = _impl_.sheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandPasteDrawablesArchive::sheet() const {
  // @@protoc_insertion_point(field_get:TN.CommandPasteDrawablesArchive.sheet)
  return _internal_sheet();
}
inline void CommandPasteDrawablesArchive::unsafe_arena_set_allocated_sheet(
    ::TSP::Reference* sheet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  _impl_.sheet_ = sheet;
  if (sheet) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandPasteDrawablesArchive.sheet)
}
inline ::TSP::Reference* CommandPasteDrawablesArchive::release_sheet() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandPasteDrawablesArchive::unsafe_arena_release_sheet() {
  // @@protoc_insertion_point(field_release:TN.CommandPasteDrawablesArchive.sheet)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandPasteDrawablesArchive::_internal_mutable_sheet() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.sheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.sheet_ = p;
  }
  return _impl_.sheet_;
}
inline ::TSP::Reference* CommandPasteDrawablesArchive::mutable_sheet() {
  ::TSP::Reference* _msg = _internal_mutable_sheet();
  // @@protoc_insertion_point(field_mutable:TN.CommandPasteDrawablesArchive.sheet)
  return _msg;
}
inline void CommandPasteDrawablesArchive::set_allocated_sheet(::TSP::Reference* sheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  if (sheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet));
    if (message_arena != submessage_arena) {
      sheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.sheet_ = sheet;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandPasteDrawablesArchive.sheet)
}

// repeated .TSP.Reference drawables = 3;
inline int CommandPasteDrawablesArchive::_internal_drawables_size() const {
  return _impl_.drawables_.size();
}
inline int CommandPasteDrawablesArchive::drawables_size() const {
  return _internal_drawables_size();
}
inline ::TSP::Reference* CommandPasteDrawablesArchive::mutable_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandPasteDrawablesArchive.drawables)
  return _impl_.drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandPasteDrawablesArchive::mutable_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandPasteDrawablesArchive.drawables)
  return &_impl_.drawables_;
}
inline const ::TSP::Reference& CommandPasteDrawablesArchive::_internal_drawables(int index) const {
  return _impl_.drawables_.Get(index);
}
inline const ::TSP::Reference& CommandPasteDrawablesArchive::drawables(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandPasteDrawablesArchive.drawables)
  return _internal_drawables(index);
}
inline ::TSP::Reference* CommandPasteDrawablesArchive::_internal_add_drawables() {
  return _impl_.drawables_.Add();
}
inline ::TSP::Reference* CommandPasteDrawablesArchive::add_drawables() {
  ::TSP::Reference* _add = _internal_add_drawables();
  // @@protoc_insertion_point(field_add:TN.CommandPasteDrawablesArchive.drawables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandPasteDrawablesArchive::drawables() const {
  // @@protoc_insertion_point(field_list:TN.CommandPasteDrawablesArchive.drawables)
  return _impl_.drawables_;
}

// -------------------------------------------------------------------

// CommandPasteSheetArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandPasteSheetArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandPasteSheetArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandPasteSheetArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandPasteSheetArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandPasteSheetArchive.super)
  return _internal_super();
}
inline void CommandPasteSheetArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandPasteSheetArchive.super)
}
inline ::TSK::CommandArchive* CommandPasteSheetArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandPasteSheetArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandPasteSheetArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandPasteSheetArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandPasteSheetArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TN.CommandPasteSheetArchive.super)
  return _msg;
}
inline void CommandPasteSheetArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandPasteSheetArchive.super)
}

// required .TSP.Reference document = 2;
inline bool CommandPasteSheetArchive::_internal_has_document() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.document_ != nullptr);
  return value;
}
inline bool CommandPasteSheetArchive::has_document() const {
  return _internal_has_document();
}
inline const ::TSP::Reference& CommandPasteSheetArchive::_internal_document() const {
  const ::TSP::Reference* p = _impl_.document_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandPasteSheetArchive::document() const {
  // @@protoc_insertion_point(field_get:TN.CommandPasteSheetArchive.document)
  return _internal_document();
}
inline void CommandPasteSheetArchive::unsafe_arena_set_allocated_document(
    ::TSP::Reference* document) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.document_);
  }
  _impl_.document_ = document;
  if (document) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandPasteSheetArchive.document)
}
inline ::TSP::Reference* CommandPasteSheetArchive::release_document() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.document_;
  _impl_.document_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandPasteSheetArchive::unsafe_arena_release_document() {
  // @@protoc_insertion_point(field_release:TN.CommandPasteSheetArchive.document)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.document_;
  _impl_.document_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandPasteSheetArchive::_internal_mutable_document() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.document_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.document_ = p;
  }
  return _impl_.document_;
}
inline ::TSP::Reference* CommandPasteSheetArchive::mutable_document() {
  ::TSP::Reference* _msg = _internal_mutable_document();
  // @@protoc_insertion_point(field_mutable:TN.CommandPasteSheetArchive.document)
  return _msg;
}
inline void CommandPasteSheetArchive::set_allocated_document(::TSP::Reference* document) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.document_);
  }
  if (document) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document));
    if (message_arena != submessage_arena) {
      document = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, document, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.document_ = document;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandPasteSheetArchive.document)
}

// required .TSP.Reference sheet = 3;
inline bool CommandPasteSheetArchive::_internal_has_sheet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sheet_ != nullptr);
  return value;
}
inline bool CommandPasteSheetArchive::has_sheet() const {
  return _internal_has_sheet();
}
inline const ::TSP::Reference& CommandPasteSheetArchive::_internal_sheet() const {
  const ::TSP::Reference* p = _impl_.sheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandPasteSheetArchive::sheet() const {
  // @@protoc_insertion_point(field_get:TN.CommandPasteSheetArchive.sheet)
  return _internal_sheet();
}
inline void CommandPasteSheetArchive::unsafe_arena_set_allocated_sheet(
    ::TSP::Reference* sheet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  _impl_.sheet_ = sheet;
  if (sheet) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandPasteSheetArchive.sheet)
}
inline ::TSP::Reference* CommandPasteSheetArchive::release_sheet() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandPasteSheetArchive::unsafe_arena_release_sheet() {
  // @@protoc_insertion_point(field_release:TN.CommandPasteSheetArchive.sheet)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandPasteSheetArchive::_internal_mutable_sheet() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.sheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.sheet_ = p;
  }
  return _impl_.sheet_;
}
inline ::TSP::Reference* CommandPasteSheetArchive::mutable_sheet() {
  ::TSP::Reference* _msg = _internal_mutable_sheet();
  // @@protoc_insertion_point(field_mutable:TN.CommandPasteSheetArchive.sheet)
  return _msg;
}
inline void CommandPasteSheetArchive::set_allocated_sheet(::TSP::Reference* sheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  if (sheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet));
    if (message_arena != submessage_arena) {
      sheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.sheet_ = sheet;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandPasteSheetArchive.sheet)
}

// optional .TN.SheetUIStateArchive sheet_uistate = 4;
inline bool CommandPasteSheetArchive::_internal_has_sheet_uistate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sheet_uistate_ != nullptr);
  return value;
}
inline bool CommandPasteSheetArchive::has_sheet_uistate() const {
  return _internal_has_sheet_uistate();
}
inline const ::TN::SheetUIStateArchive& CommandPasteSheetArchive::_internal_sheet_uistate() const {
  const ::TN::SheetUIStateArchive* p = _impl_.sheet_uistate_;
  return p != nullptr ? *p : reinterpret_cast<const ::TN::SheetUIStateArchive&>(
      ::TN::_SheetUIStateArchive_default_instance_);
}
inline const ::TN::SheetUIStateArchive& CommandPasteSheetArchive::sheet_uistate() const {
  // @@protoc_insertion_point(field_get:TN.CommandPasteSheetArchive.sheet_uistate)
  return _internal_sheet_uistate();
}
inline void CommandPasteSheetArchive::unsafe_arena_set_allocated_sheet_uistate(
    ::TN::SheetUIStateArchive* sheet_uistate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_uistate_);
  }
  _impl_.sheet_uistate_ = sheet_uistate;
  if (sheet_uistate) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandPasteSheetArchive.sheet_uistate)
}
inline ::TN::SheetUIStateArchive* CommandPasteSheetArchive::release_sheet_uistate() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TN::SheetUIStateArchive* temp = _impl_.sheet_uistate_;
  _impl_.sheet_uistate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TN::SheetUIStateArchive* CommandPasteSheetArchive::unsafe_arena_release_sheet_uistate() {
  // @@protoc_insertion_point(field_release:TN.CommandPasteSheetArchive.sheet_uistate)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TN::SheetUIStateArchive* temp = _impl_.sheet_uistate_;
  _impl_.sheet_uistate_ = nullptr;
  return temp;
}
inline ::TN::SheetUIStateArchive* CommandPasteSheetArchive::_internal_mutable_sheet_uistate() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.sheet_uistate_ == nullptr) {
    auto* p = CreateMaybeMessage<::TN::SheetUIStateArchive>(GetArenaForAllocation());
    _impl_.sheet_uistate_ = p;
  }
  return _impl_.sheet_uistate_;
}
inline ::TN::SheetUIStateArchive* CommandPasteSheetArchive::mutable_sheet_uistate() {
  ::TN::SheetUIStateArchive* _msg = _internal_mutable_sheet_uistate();
  // @@protoc_insertion_point(field_mutable:TN.CommandPasteSheetArchive.sheet_uistate)
  return _msg;
}
inline void CommandPasteSheetArchive::set_allocated_sheet_uistate(::TN::SheetUIStateArchive* sheet_uistate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_uistate_);
  }
  if (sheet_uistate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uistate));
    if (message_arena != submessage_arena) {
      sheet_uistate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet_uistate, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.sheet_uistate_ = sheet_uistate;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandPasteSheetArchive.sheet_uistate)
}

// required uint32 sheetIndex = 5;
inline bool CommandPasteSheetArchive::_internal_has_sheetindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandPasteSheetArchive::has_sheetindex() const {
  return _internal_has_sheetindex();
}
inline void CommandPasteSheetArchive::clear_sheetindex() {
  _impl_.sheetindex_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CommandPasteSheetArchive::_internal_sheetindex() const {
  return _impl_.sheetindex_;
}
inline uint32_t CommandPasteSheetArchive::sheetindex() const {
  // @@protoc_insertion_point(field_get:TN.CommandPasteSheetArchive.sheetIndex)
  return _internal_sheetindex();
}
inline void CommandPasteSheetArchive::_internal_set_sheetindex(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.sheetindex_ = value;
}
inline void CommandPasteSheetArchive::set_sheetindex(uint32_t value) {
  _internal_set_sheetindex(value);
  // @@protoc_insertion_point(field_set:TN.CommandPasteSheetArchive.sheetIndex)
}

// -------------------------------------------------------------------

// CommandReorderSidebarItemChildrenAchive

// required .TSK.CommandArchive super = 1;
inline bool CommandReorderSidebarItemChildrenAchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandReorderSidebarItemChildrenAchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandReorderSidebarItemChildrenAchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandReorderSidebarItemChildrenAchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandReorderSidebarItemChildrenAchive.super)
  return _internal_super();
}
inline void CommandReorderSidebarItemChildrenAchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandReorderSidebarItemChildrenAchive.super)
}
inline ::TSK::CommandArchive* CommandReorderSidebarItemChildrenAchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandReorderSidebarItemChildrenAchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandReorderSidebarItemChildrenAchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandReorderSidebarItemChildrenAchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandReorderSidebarItemChildrenAchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TN.CommandReorderSidebarItemChildrenAchive.super)
  return _msg;
}
inline void CommandReorderSidebarItemChildrenAchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandReorderSidebarItemChildrenAchive.super)
}

// required .TSP.Reference sheet = 2;
inline bool CommandReorderSidebarItemChildrenAchive::_internal_has_sheet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sheet_ != nullptr);
  return value;
}
inline bool CommandReorderSidebarItemChildrenAchive::has_sheet() const {
  return _internal_has_sheet();
}
inline const ::TSP::Reference& CommandReorderSidebarItemChildrenAchive::_internal_sheet() const {
  const ::TSP::Reference* p = _impl_.sheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandReorderSidebarItemChildrenAchive::sheet() const {
  // @@protoc_insertion_point(field_get:TN.CommandReorderSidebarItemChildrenAchive.sheet)
  return _internal_sheet();
}
inline void CommandReorderSidebarItemChildrenAchive::unsafe_arena_set_allocated_sheet(
    ::TSP::Reference* sheet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  _impl_.sheet_ = sheet;
  if (sheet) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandReorderSidebarItemChildrenAchive.sheet)
}
inline ::TSP::Reference* CommandReorderSidebarItemChildrenAchive::release_sheet() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandReorderSidebarItemChildrenAchive::unsafe_arena_release_sheet() {
  // @@protoc_insertion_point(field_release:TN.CommandReorderSidebarItemChildrenAchive.sheet)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.sheet_;
  _impl_.sheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandReorderSidebarItemChildrenAchive::_internal_mutable_sheet() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.sheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.sheet_ = p;
  }
  return _impl_.sheet_;
}
inline ::TSP::Reference* CommandReorderSidebarItemChildrenAchive::mutable_sheet() {
  ::TSP::Reference* _msg = _internal_mutable_sheet();
  // @@protoc_insertion_point(field_mutable:TN.CommandReorderSidebarItemChildrenAchive.sheet)
  return _msg;
}
inline void CommandReorderSidebarItemChildrenAchive::set_allocated_sheet(::TSP::Reference* sheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sheet_);
  }
  if (sheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet));
    if (message_arena != submessage_arena) {
      sheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.sheet_ = sheet;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandReorderSidebarItemChildrenAchive.sheet)
}

// repeated .TSP.Reference old_children = 3;
inline int CommandReorderSidebarItemChildrenAchive::_internal_old_children_size() const {
  return _impl_.old_children_.size();
}
inline int CommandReorderSidebarItemChildrenAchive::old_children_size() const {
  return _internal_old_children_size();
}
inline ::TSP::Reference* CommandReorderSidebarItemChildrenAchive::mutable_old_children(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandReorderSidebarItemChildrenAchive.old_children)
  return _impl_.old_children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandReorderSidebarItemChildrenAchive::mutable_old_children() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandReorderSidebarItemChildrenAchive.old_children)
  return &_impl_.old_children_;
}
inline const ::TSP::Reference& CommandReorderSidebarItemChildrenAchive::_internal_old_children(int index) const {
  return _impl_.old_children_.Get(index);
}
inline const ::TSP::Reference& CommandReorderSidebarItemChildrenAchive::old_children(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandReorderSidebarItemChildrenAchive.old_children)
  return _internal_old_children(index);
}
inline ::TSP::Reference* CommandReorderSidebarItemChildrenAchive::_internal_add_old_children() {
  return _impl_.old_children_.Add();
}
inline ::TSP::Reference* CommandReorderSidebarItemChildrenAchive::add_old_children() {
  ::TSP::Reference* _add = _internal_add_old_children();
  // @@protoc_insertion_point(field_add:TN.CommandReorderSidebarItemChildrenAchive.old_children)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandReorderSidebarItemChildrenAchive::old_children() const {
  // @@protoc_insertion_point(field_list:TN.CommandReorderSidebarItemChildrenAchive.old_children)
  return _impl_.old_children_;
}

// repeated .TSP.Reference new_children = 4;
inline int CommandReorderSidebarItemChildrenAchive::_internal_new_children_size() const {
  return _impl_.new_children_.size();
}
inline int CommandReorderSidebarItemChildrenAchive::new_children_size() const {
  return _internal_new_children_size();
}
inline ::TSP::Reference* CommandReorderSidebarItemChildrenAchive::mutable_new_children(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandReorderSidebarItemChildrenAchive.new_children)
  return _impl_.new_children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandReorderSidebarItemChildrenAchive::mutable_new_children() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandReorderSidebarItemChildrenAchive.new_children)
  return &_impl_.new_children_;
}
inline const ::TSP::Reference& CommandReorderSidebarItemChildrenAchive::_internal_new_children(int index) const {
  return _impl_.new_children_.Get(index);
}
inline const ::TSP::Reference& CommandReorderSidebarItemChildrenAchive::new_children(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandReorderSidebarItemChildrenAchive.new_children)
  return _internal_new_children(index);
}
inline ::TSP::Reference* CommandReorderSidebarItemChildrenAchive::_internal_add_new_children() {
  return _impl_.new_children_.Add();
}
inline ::TSP::Reference* CommandReorderSidebarItemChildrenAchive::add_new_children() {
  ::TSP::Reference* _add = _internal_add_new_children();
  // @@protoc_insertion_point(field_add:TN.CommandReorderSidebarItemChildrenAchive.new_children)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandReorderSidebarItemChildrenAchive::new_children() const {
  // @@protoc_insertion_point(field_list:TN.CommandReorderSidebarItemChildrenAchive.new_children)
  return _impl_.new_children_;
}

// -------------------------------------------------------------------

// CommandChartMediatorSetEditingState

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandChartMediatorSetEditingState::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandChartMediatorSetEditingState::has_super() const {
  return _internal_has_super();
}
inline const ::TSCH::ChartCommandArchive& CommandChartMediatorSetEditingState::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandChartMediatorSetEditingState::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetEditingState.super)
  return _internal_super();
}
inline void CommandChartMediatorSetEditingState::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandChartMediatorSetEditingState.super)
}
inline ::TSCH::ChartCommandArchive* CommandChartMediatorSetEditingState::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandChartMediatorSetEditingState::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandChartMediatorSetEditingState.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandChartMediatorSetEditingState::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSCH::ChartCommandArchive* CommandChartMediatorSetEditingState::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TN.CommandChartMediatorSetEditingState.super)
  return _msg;
}
inline void CommandChartMediatorSetEditingState::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandChartMediatorSetEditingState.super)
}

// optional .TN.ChartMediatorFormulaStorage old_formulas = 3;
inline bool CommandChartMediatorSetEditingState::_internal_has_old_formulas() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_formulas_ != nullptr);
  return value;
}
inline bool CommandChartMediatorSetEditingState::has_old_formulas() const {
  return _internal_has_old_formulas();
}
inline const ::TN::ChartMediatorFormulaStorage& CommandChartMediatorSetEditingState::_internal_old_formulas() const {
  const ::TN::ChartMediatorFormulaStorage* p = _impl_.old_formulas_;
  return p != nullptr ? *p : reinterpret_cast<const ::TN::ChartMediatorFormulaStorage&>(
      ::TN::_ChartMediatorFormulaStorage_default_instance_);
}
inline const ::TN::ChartMediatorFormulaStorage& CommandChartMediatorSetEditingState::old_formulas() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetEditingState.old_formulas)
  return _internal_old_formulas();
}
inline void CommandChartMediatorSetEditingState::unsafe_arena_set_allocated_old_formulas(
    ::TN::ChartMediatorFormulaStorage* old_formulas) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_formulas_);
  }
  _impl_.old_formulas_ = old_formulas;
  if (old_formulas) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandChartMediatorSetEditingState.old_formulas)
}
inline ::TN::ChartMediatorFormulaStorage* CommandChartMediatorSetEditingState::release_old_formulas() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TN::ChartMediatorFormulaStorage* temp = _impl_.old_formulas_;
  _impl_.old_formulas_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TN::ChartMediatorFormulaStorage* CommandChartMediatorSetEditingState::unsafe_arena_release_old_formulas() {
  // @@protoc_insertion_point(field_release:TN.CommandChartMediatorSetEditingState.old_formulas)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TN::ChartMediatorFormulaStorage* temp = _impl_.old_formulas_;
  _impl_.old_formulas_ = nullptr;
  return temp;
}
inline ::TN::ChartMediatorFormulaStorage* CommandChartMediatorSetEditingState::_internal_mutable_old_formulas() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.old_formulas_ == nullptr) {
    auto* p = CreateMaybeMessage<::TN::ChartMediatorFormulaStorage>(GetArenaForAllocation());
    _impl_.old_formulas_ = p;
  }
  return _impl_.old_formulas_;
}
inline ::TN::ChartMediatorFormulaStorage* CommandChartMediatorSetEditingState::mutable_old_formulas() {
  ::TN::ChartMediatorFormulaStorage* _msg = _internal_mutable_old_formulas();
  // @@protoc_insertion_point(field_mutable:TN.CommandChartMediatorSetEditingState.old_formulas)
  return _msg;
}
inline void CommandChartMediatorSetEditingState::set_allocated_old_formulas(::TN::ChartMediatorFormulaStorage* old_formulas) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_formulas_);
  }
  if (old_formulas) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_formulas));
    if (message_arena != submessage_arena) {
      old_formulas = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_formulas, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.old_formulas_ = old_formulas;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandChartMediatorSetEditingState.old_formulas)
}

// optional .TN.ChartMediatorFormulaStorage new_formulas = 4;
inline bool CommandChartMediatorSetEditingState::_internal_has_new_formulas() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_formulas_ != nullptr);
  return value;
}
inline bool CommandChartMediatorSetEditingState::has_new_formulas() const {
  return _internal_has_new_formulas();
}
inline const ::TN::ChartMediatorFormulaStorage& CommandChartMediatorSetEditingState::_internal_new_formulas() const {
  const ::TN::ChartMediatorFormulaStorage* p = _impl_.new_formulas_;
  return p != nullptr ? *p : reinterpret_cast<const ::TN::ChartMediatorFormulaStorage&>(
      ::TN::_ChartMediatorFormulaStorage_default_instance_);
}
inline const ::TN::ChartMediatorFormulaStorage& CommandChartMediatorSetEditingState::new_formulas() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetEditingState.new_formulas)
  return _internal_new_formulas();
}
inline void CommandChartMediatorSetEditingState::unsafe_arena_set_allocated_new_formulas(
    ::TN::ChartMediatorFormulaStorage* new_formulas) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_formulas_);
  }
  _impl_.new_formulas_ = new_formulas;
  if (new_formulas) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandChartMediatorSetEditingState.new_formulas)
}
inline ::TN::ChartMediatorFormulaStorage* CommandChartMediatorSetEditingState::release_new_formulas() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TN::ChartMediatorFormulaStorage* temp = _impl_.new_formulas_;
  _impl_.new_formulas_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TN::ChartMediatorFormulaStorage* CommandChartMediatorSetEditingState::unsafe_arena_release_new_formulas() {
  // @@protoc_insertion_point(field_release:TN.CommandChartMediatorSetEditingState.new_formulas)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TN::ChartMediatorFormulaStorage* temp = _impl_.new_formulas_;
  _impl_.new_formulas_ = nullptr;
  return temp;
}
inline ::TN::ChartMediatorFormulaStorage* CommandChartMediatorSetEditingState::_internal_mutable_new_formulas() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.new_formulas_ == nullptr) {
    auto* p = CreateMaybeMessage<::TN::ChartMediatorFormulaStorage>(GetArenaForAllocation());
    _impl_.new_formulas_ = p;
  }
  return _impl_.new_formulas_;
}
inline ::TN::ChartMediatorFormulaStorage* CommandChartMediatorSetEditingState::mutable_new_formulas() {
  ::TN::ChartMediatorFormulaStorage* _msg = _internal_mutable_new_formulas();
  // @@protoc_insertion_point(field_mutable:TN.CommandChartMediatorSetEditingState.new_formulas)
  return _msg;
}
inline void CommandChartMediatorSetEditingState::set_allocated_new_formulas(::TN::ChartMediatorFormulaStorage* new_formulas) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_formulas_);
  }
  if (new_formulas) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_formulas));
    if (message_arena != submessage_arena) {
      new_formulas = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_formulas, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.new_formulas_ = new_formulas;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandChartMediatorSetEditingState.new_formulas)
}

// optional int32 old_direction = 5;
inline bool CommandChartMediatorSetEditingState::_internal_has_old_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandChartMediatorSetEditingState::has_old_direction() const {
  return _internal_has_old_direction();
}
inline void CommandChartMediatorSetEditingState::clear_old_direction() {
  _impl_.old_direction_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CommandChartMediatorSetEditingState::_internal_old_direction() const {
  return _impl_.old_direction_;
}
inline int32_t CommandChartMediatorSetEditingState::old_direction() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetEditingState.old_direction)
  return _internal_old_direction();
}
inline void CommandChartMediatorSetEditingState::_internal_set_old_direction(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.old_direction_ = value;
}
inline void CommandChartMediatorSetEditingState::set_old_direction(int32_t value) {
  _internal_set_old_direction(value);
  // @@protoc_insertion_point(field_set:TN.CommandChartMediatorSetEditingState.old_direction)
}

// optional int32 new_direction = 6;
inline bool CommandChartMediatorSetEditingState::_internal_has_new_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandChartMediatorSetEditingState::has_new_direction() const {
  return _internal_has_new_direction();
}
inline void CommandChartMediatorSetEditingState::clear_new_direction() {
  _impl_.new_direction_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t CommandChartMediatorSetEditingState::_internal_new_direction() const {
  return _impl_.new_direction_;
}
inline int32_t CommandChartMediatorSetEditingState::new_direction() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetEditingState.new_direction)
  return _internal_new_direction();
}
inline void CommandChartMediatorSetEditingState::_internal_set_new_direction(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.new_direction_ = value;
}
inline void CommandChartMediatorSetEditingState::set_new_direction(int32_t value) {
  _internal_set_new_direction(value);
  // @@protoc_insertion_point(field_set:TN.CommandChartMediatorSetEditingState.new_direction)
}

// optional int32 old_scatter_format = 7;
inline bool CommandChartMediatorSetEditingState::_internal_has_old_scatter_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandChartMediatorSetEditingState::has_old_scatter_format() const {
  return _internal_has_old_scatter_format();
}
inline void CommandChartMediatorSetEditingState::clear_old_scatter_format() {
  _impl_.old_scatter_format_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t CommandChartMediatorSetEditingState::_internal_old_scatter_format() const {
  return _impl_.old_scatter_format_;
}
inline int32_t CommandChartMediatorSetEditingState::old_scatter_format() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetEditingState.old_scatter_format)
  return _internal_old_scatter_format();
}
inline void CommandChartMediatorSetEditingState::_internal_set_old_scatter_format(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.old_scatter_format_ = value;
}
inline void CommandChartMediatorSetEditingState::set_old_scatter_format(int32_t value) {
  _internal_set_old_scatter_format(value);
  // @@protoc_insertion_point(field_set:TN.CommandChartMediatorSetEditingState.old_scatter_format)
}

// optional int32 new_scatter_format = 8;
inline bool CommandChartMediatorSetEditingState::_internal_has_new_scatter_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CommandChartMediatorSetEditingState::has_new_scatter_format() const {
  return _internal_has_new_scatter_format();
}
inline void CommandChartMediatorSetEditingState::clear_new_scatter_format() {
  _impl_.new_scatter_format_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t CommandChartMediatorSetEditingState::_internal_new_scatter_format() const {
  return _impl_.new_scatter_format_;
}
inline int32_t CommandChartMediatorSetEditingState::new_scatter_format() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetEditingState.new_scatter_format)
  return _internal_new_scatter_format();
}
inline void CommandChartMediatorSetEditingState::_internal_set_new_scatter_format(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.new_scatter_format_ = value;
}
inline void CommandChartMediatorSetEditingState::set_new_scatter_format(int32_t value) {
  _internal_set_new_scatter_format(value);
  // @@protoc_insertion_point(field_set:TN.CommandChartMediatorSetEditingState.new_scatter_format)
}

// -------------------------------------------------------------------

// CommandChartMediatorUpdateForEntityDelete

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandChartMediatorUpdateForEntityDelete::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandChartMediatorUpdateForEntityDelete::has_super() const {
  return _internal_has_super();
}
inline const ::TSCH::ChartCommandArchive& CommandChartMediatorUpdateForEntityDelete::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandChartMediatorUpdateForEntityDelete::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorUpdateForEntityDelete.super)
  return _internal_super();
}
inline void CommandChartMediatorUpdateForEntityDelete::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandChartMediatorUpdateForEntityDelete.super)
}
inline ::TSCH::ChartCommandArchive* CommandChartMediatorUpdateForEntityDelete::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandChartMediatorUpdateForEntityDelete::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandChartMediatorUpdateForEntityDelete.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandChartMediatorUpdateForEntityDelete::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSCH::ChartCommandArchive* CommandChartMediatorUpdateForEntityDelete::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TN.CommandChartMediatorUpdateForEntityDelete.super)
  return _msg;
}
inline void CommandChartMediatorUpdateForEntityDelete::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandChartMediatorUpdateForEntityDelete.super)
}

// optional .TSP.Reference cmd = 3;
inline bool CommandChartMediatorUpdateForEntityDelete::_internal_has_cmd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cmd_ != nullptr);
  return value;
}
inline bool CommandChartMediatorUpdateForEntityDelete::has_cmd() const {
  return _internal_has_cmd();
}
inline const ::TSP::Reference& CommandChartMediatorUpdateForEntityDelete::_internal_cmd() const {
  const ::TSP::Reference* p = _impl_.cmd_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandChartMediatorUpdateForEntityDelete::cmd() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorUpdateForEntityDelete.cmd)
  return _internal_cmd();
}
inline void CommandChartMediatorUpdateForEntityDelete::unsafe_arena_set_allocated_cmd(
    ::TSP::Reference* cmd) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cmd_);
  }
  _impl_.cmd_ = cmd;
  if (cmd) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandChartMediatorUpdateForEntityDelete.cmd)
}
inline ::TSP::Reference* CommandChartMediatorUpdateForEntityDelete::release_cmd() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.cmd_;
  _impl_.cmd_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandChartMediatorUpdateForEntityDelete::unsafe_arena_release_cmd() {
  // @@protoc_insertion_point(field_release:TN.CommandChartMediatorUpdateForEntityDelete.cmd)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.cmd_;
  _impl_.cmd_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandChartMediatorUpdateForEntityDelete::_internal_mutable_cmd() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.cmd_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.cmd_ = p;
  }
  return _impl_.cmd_;
}
inline ::TSP::Reference* CommandChartMediatorUpdateForEntityDelete::mutable_cmd() {
  ::TSP::Reference* _msg = _internal_mutable_cmd();
  // @@protoc_insertion_point(field_mutable:TN.CommandChartMediatorUpdateForEntityDelete.cmd)
  return _msg;
}
inline void CommandChartMediatorUpdateForEntityDelete::set_allocated_cmd(::TSP::Reference* cmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cmd_);
  }
  if (cmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cmd));
    if (message_arena != submessage_arena) {
      cmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cmd, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cmd_ = cmd;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandChartMediatorUpdateForEntityDelete.cmd)
}

// -------------------------------------------------------------------

// ChartCommandSetSeriesNameArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool ChartCommandSetSeriesNameArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool ChartCommandSetSeriesNameArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSCH::ChartCommandArchive& ChartCommandSetSeriesNameArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& ChartCommandSetSeriesNameArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.ChartCommandSetSeriesNameArchive.super)
  return _internal_super();
}
inline void ChartCommandSetSeriesNameArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.ChartCommandSetSeriesNameArchive.super)
}
inline ::TSCH::ChartCommandArchive* ChartCommandSetSeriesNameArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* ChartCommandSetSeriesNameArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.ChartCommandSetSeriesNameArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* ChartCommandSetSeriesNameArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSCH::ChartCommandArchive* ChartCommandSetSeriesNameArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TN.ChartCommandSetSeriesNameArchive.super)
  return _msg;
}
inline void ChartCommandSetSeriesNameArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.ChartCommandSetSeriesNameArchive.super)
}

// required .TSP.Reference mediator = 2;
inline bool ChartCommandSetSeriesNameArchive::_internal_has_mediator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mediator_ != nullptr);
  return value;
}
inline bool ChartCommandSetSeriesNameArchive::has_mediator() const {
  return _internal_has_mediator();
}
inline const ::TSP::Reference& ChartCommandSetSeriesNameArchive::_internal_mediator() const {
  const ::TSP::Reference* p = _impl_.mediator_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartCommandSetSeriesNameArchive::mediator() const {
  // @@protoc_insertion_point(field_get:TN.ChartCommandSetSeriesNameArchive.mediator)
  return _internal_mediator();
}
inline void ChartCommandSetSeriesNameArchive::unsafe_arena_set_allocated_mediator(
    ::TSP::Reference* mediator) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mediator_);
  }
  _impl_.mediator_ = mediator;
  if (mediator) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.ChartCommandSetSeriesNameArchive.mediator)
}
inline ::TSP::Reference* ChartCommandSetSeriesNameArchive::release_mediator() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.mediator_;
  _impl_.mediator_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartCommandSetSeriesNameArchive::unsafe_arena_release_mediator() {
  // @@protoc_insertion_point(field_release:TN.ChartCommandSetSeriesNameArchive.mediator)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.mediator_;
  _impl_.mediator_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartCommandSetSeriesNameArchive::_internal_mutable_mediator() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.mediator_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.mediator_ = p;
  }
  return _impl_.mediator_;
}
inline ::TSP::Reference* ChartCommandSetSeriesNameArchive::mutable_mediator() {
  ::TSP::Reference* _msg = _internal_mutable_mediator();
  // @@protoc_insertion_point(field_mutable:TN.ChartCommandSetSeriesNameArchive.mediator)
  return _msg;
}
inline void ChartCommandSetSeriesNameArchive::set_allocated_mediator(::TSP::Reference* mediator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mediator_);
  }
  if (mediator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mediator));
    if (message_arena != submessage_arena) {
      mediator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mediator, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.mediator_ = mediator;
  // @@protoc_insertion_point(field_set_allocated:TN.ChartCommandSetSeriesNameArchive.mediator)
}

// required uint32 seriesindex = 3;
inline bool ChartCommandSetSeriesNameArchive::_internal_has_seriesindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ChartCommandSetSeriesNameArchive::has_seriesindex() const {
  return _internal_has_seriesindex();
}
inline void ChartCommandSetSeriesNameArchive::clear_seriesindex() {
  _impl_.seriesindex_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t ChartCommandSetSeriesNameArchive::_internal_seriesindex() const {
  return _impl_.seriesindex_;
}
inline uint32_t ChartCommandSetSeriesNameArchive::seriesindex() const {
  // @@protoc_insertion_point(field_get:TN.ChartCommandSetSeriesNameArchive.seriesindex)
  return _internal_seriesindex();
}
inline void ChartCommandSetSeriesNameArchive::_internal_set_seriesindex(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.seriesindex_ = value;
}
inline void ChartCommandSetSeriesNameArchive::set_seriesindex(uint32_t value) {
  _internal_set_seriesindex(value);
  // @@protoc_insertion_point(field_set:TN.ChartCommandSetSeriesNameArchive.seriesindex)
}

// optional .TSCE.FormulaArchive old_formula = 4;
inline bool ChartCommandSetSeriesNameArchive::_internal_has_old_formula() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_formula_ != nullptr);
  return value;
}
inline bool ChartCommandSetSeriesNameArchive::has_old_formula() const {
  return _internal_has_old_formula();
}
inline const ::TSCE::FormulaArchive& ChartCommandSetSeriesNameArchive::_internal_old_formula() const {
  const ::TSCE::FormulaArchive* p = _impl_.old_formula_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::FormulaArchive&>(
      ::TSCE::_FormulaArchive_default_instance_);
}
inline const ::TSCE::FormulaArchive& ChartCommandSetSeriesNameArchive::old_formula() const {
  // @@protoc_insertion_point(field_get:TN.ChartCommandSetSeriesNameArchive.old_formula)
  return _internal_old_formula();
}
inline void ChartCommandSetSeriesNameArchive::unsafe_arena_set_allocated_old_formula(
    ::TSCE::FormulaArchive* old_formula) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_formula_);
  }
  _impl_.old_formula_ = old_formula;
  if (old_formula) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.ChartCommandSetSeriesNameArchive.old_formula)
}
inline ::TSCE::FormulaArchive* ChartCommandSetSeriesNameArchive::release_old_formula() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::FormulaArchive* temp = _impl_.old_formula_;
  _impl_.old_formula_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::FormulaArchive* ChartCommandSetSeriesNameArchive::unsafe_arena_release_old_formula() {
  // @@protoc_insertion_point(field_release:TN.ChartCommandSetSeriesNameArchive.old_formula)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::FormulaArchive* temp = _impl_.old_formula_;
  _impl_.old_formula_ = nullptr;
  return temp;
}
inline ::TSCE::FormulaArchive* ChartCommandSetSeriesNameArchive::_internal_mutable_old_formula() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.old_formula_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::FormulaArchive>(GetArenaForAllocation());
    _impl_.old_formula_ = p;
  }
  return _impl_.old_formula_;
}
inline ::TSCE::FormulaArchive* ChartCommandSetSeriesNameArchive::mutable_old_formula() {
  ::TSCE::FormulaArchive* _msg = _internal_mutable_old_formula();
  // @@protoc_insertion_point(field_mutable:TN.ChartCommandSetSeriesNameArchive.old_formula)
  return _msg;
}
inline void ChartCommandSetSeriesNameArchive::set_allocated_old_formula(::TSCE::FormulaArchive* old_formula) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_formula_);
  }
  if (old_formula) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_formula));
    if (message_arena != submessage_arena) {
      old_formula = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_formula, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.old_formula_ = old_formula;
  // @@protoc_insertion_point(field_set_allocated:TN.ChartCommandSetSeriesNameArchive.old_formula)
}

// optional .TSCE.FormulaArchive new_formula = 5;
inline bool ChartCommandSetSeriesNameArchive::_internal_has_new_formula() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_formula_ != nullptr);
  return value;
}
inline bool ChartCommandSetSeriesNameArchive::has_new_formula() const {
  return _internal_has_new_formula();
}
inline const ::TSCE::FormulaArchive& ChartCommandSetSeriesNameArchive::_internal_new_formula() const {
  const ::TSCE::FormulaArchive* p = _impl_.new_formula_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::FormulaArchive&>(
      ::TSCE::_FormulaArchive_default_instance_);
}
inline const ::TSCE::FormulaArchive& ChartCommandSetSeriesNameArchive::new_formula() const {
  // @@protoc_insertion_point(field_get:TN.ChartCommandSetSeriesNameArchive.new_formula)
  return _internal_new_formula();
}
inline void ChartCommandSetSeriesNameArchive::unsafe_arena_set_allocated_new_formula(
    ::TSCE::FormulaArchive* new_formula) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_formula_);
  }
  _impl_.new_formula_ = new_formula;
  if (new_formula) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.ChartCommandSetSeriesNameArchive.new_formula)
}
inline ::TSCE::FormulaArchive* ChartCommandSetSeriesNameArchive::release_new_formula() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::FormulaArchive* temp = _impl_.new_formula_;
  _impl_.new_formula_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::FormulaArchive* ChartCommandSetSeriesNameArchive::unsafe_arena_release_new_formula() {
  // @@protoc_insertion_point(field_release:TN.ChartCommandSetSeriesNameArchive.new_formula)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::FormulaArchive* temp = _impl_.new_formula_;
  _impl_.new_formula_ = nullptr;
  return temp;
}
inline ::TSCE::FormulaArchive* ChartCommandSetSeriesNameArchive::_internal_mutable_new_formula() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.new_formula_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::FormulaArchive>(GetArenaForAllocation());
    _impl_.new_formula_ = p;
  }
  return _impl_.new_formula_;
}
inline ::TSCE::FormulaArchive* ChartCommandSetSeriesNameArchive::mutable_new_formula() {
  ::TSCE::FormulaArchive* _msg = _internal_mutable_new_formula();
  // @@protoc_insertion_point(field_mutable:TN.ChartCommandSetSeriesNameArchive.new_formula)
  return _msg;
}
inline void ChartCommandSetSeriesNameArchive::set_allocated_new_formula(::TSCE::FormulaArchive* new_formula) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_formula_);
  }
  if (new_formula) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_formula));
    if (message_arena != submessage_arena) {
      new_formula = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_formula, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.new_formula_ = new_formula;
  // @@protoc_insertion_point(field_set_allocated:TN.ChartCommandSetSeriesNameArchive.new_formula)
}

// -------------------------------------------------------------------

// ChartCommandSelectionBehaviorArchive

// required .TSP.Reference drawable_info = 1;
inline bool ChartCommandSelectionBehaviorArchive::_internal_has_drawable_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.drawable_info_ != nullptr);
  return value;
}
inline bool ChartCommandSelectionBehaviorArchive::has_drawable_info() const {
  return _internal_has_drawable_info();
}
inline const ::TSP::Reference& ChartCommandSelectionBehaviorArchive::_internal_drawable_info() const {
  const ::TSP::Reference* p = _impl_.drawable_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartCommandSelectionBehaviorArchive::drawable_info() const {
  // @@protoc_insertion_point(field_get:TN.ChartCommandSelectionBehaviorArchive.drawable_info)
  return _internal_drawable_info();
}
inline void ChartCommandSelectionBehaviorArchive::unsafe_arena_set_allocated_drawable_info(
    ::TSP::Reference* drawable_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drawable_info_);
  }
  _impl_.drawable_info_ = drawable_info;
  if (drawable_info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.ChartCommandSelectionBehaviorArchive.drawable_info)
}
inline ::TSP::Reference* ChartCommandSelectionBehaviorArchive::release_drawable_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.drawable_info_;
  _impl_.drawable_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartCommandSelectionBehaviorArchive::unsafe_arena_release_drawable_info() {
  // @@protoc_insertion_point(field_release:TN.ChartCommandSelectionBehaviorArchive.drawable_info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.drawable_info_;
  _impl_.drawable_info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartCommandSelectionBehaviorArchive::_internal_mutable_drawable_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.drawable_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.drawable_info_ = p;
  }
  return _impl_.drawable_info_;
}
inline ::TSP::Reference* ChartCommandSelectionBehaviorArchive::mutable_drawable_info() {
  ::TSP::Reference* _msg = _internal_mutable_drawable_info();
  // @@protoc_insertion_point(field_mutable:TN.ChartCommandSelectionBehaviorArchive.drawable_info)
  return _msg;
}
inline void ChartCommandSelectionBehaviorArchive::set_allocated_drawable_info(::TSP::Reference* drawable_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drawable_info_);
  }
  if (drawable_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_info));
    if (message_arena != submessage_arena) {
      drawable_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drawable_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.drawable_info_ = drawable_info;
  // @@protoc_insertion_point(field_set_allocated:TN.ChartCommandSelectionBehaviorArchive.drawable_info)
}

// optional .TN.ChartSelectionArchive begin_selection = 2;
inline bool ChartCommandSelectionBehaviorArchive::_internal_has_begin_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.begin_selection_ != nullptr);
  return value;
}
inline bool ChartCommandSelectionBehaviorArchive::has_begin_selection() const {
  return _internal_has_begin_selection();
}
inline const ::TN::ChartSelectionArchive& ChartCommandSelectionBehaviorArchive::_internal_begin_selection() const {
  const ::TN::ChartSelectionArchive* p = _impl_.begin_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TN::ChartSelectionArchive&>(
      ::TN::_ChartSelectionArchive_default_instance_);
}
inline const ::TN::ChartSelectionArchive& ChartCommandSelectionBehaviorArchive::begin_selection() const {
  // @@protoc_insertion_point(field_get:TN.ChartCommandSelectionBehaviorArchive.begin_selection)
  return _internal_begin_selection();
}
inline void ChartCommandSelectionBehaviorArchive::unsafe_arena_set_allocated_begin_selection(
    ::TN::ChartSelectionArchive* begin_selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.begin_selection_);
  }
  _impl_.begin_selection_ = begin_selection;
  if (begin_selection) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.ChartCommandSelectionBehaviorArchive.begin_selection)
}
inline ::TN::ChartSelectionArchive* ChartCommandSelectionBehaviorArchive::release_begin_selection() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TN::ChartSelectionArchive* temp = _impl_.begin_selection_;
  _impl_.begin_selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TN::ChartSelectionArchive* ChartCommandSelectionBehaviorArchive::unsafe_arena_release_begin_selection() {
  // @@protoc_insertion_point(field_release:TN.ChartCommandSelectionBehaviorArchive.begin_selection)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TN::ChartSelectionArchive* temp = _impl_.begin_selection_;
  _impl_.begin_selection_ = nullptr;
  return temp;
}
inline ::TN::ChartSelectionArchive* ChartCommandSelectionBehaviorArchive::_internal_mutable_begin_selection() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.begin_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TN::ChartSelectionArchive>(GetArenaForAllocation());
    _impl_.begin_selection_ = p;
  }
  return _impl_.begin_selection_;
}
inline ::TN::ChartSelectionArchive* ChartCommandSelectionBehaviorArchive::mutable_begin_selection() {
  ::TN::ChartSelectionArchive* _msg = _internal_mutable_begin_selection();
  // @@protoc_insertion_point(field_mutable:TN.ChartCommandSelectionBehaviorArchive.begin_selection)
  return _msg;
}
inline void ChartCommandSelectionBehaviorArchive::set_allocated_begin_selection(::TN::ChartSelectionArchive* begin_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.begin_selection_);
  }
  if (begin_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(begin_selection));
    if (message_arena != submessage_arena) {
      begin_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, begin_selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.begin_selection_ = begin_selection;
  // @@protoc_insertion_point(field_set_allocated:TN.ChartCommandSelectionBehaviorArchive.begin_selection)
}

// optional .TN.ChartSelectionArchive end_selection = 3;
inline bool ChartCommandSelectionBehaviorArchive::_internal_has_end_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_selection_ != nullptr);
  return value;
}
inline bool ChartCommandSelectionBehaviorArchive::has_end_selection() const {
  return _internal_has_end_selection();
}
inline const ::TN::ChartSelectionArchive& ChartCommandSelectionBehaviorArchive::_internal_end_selection() const {
  const ::TN::ChartSelectionArchive* p = _impl_.end_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TN::ChartSelectionArchive&>(
      ::TN::_ChartSelectionArchive_default_instance_);
}
inline const ::TN::ChartSelectionArchive& ChartCommandSelectionBehaviorArchive::end_selection() const {
  // @@protoc_insertion_point(field_get:TN.ChartCommandSelectionBehaviorArchive.end_selection)
  return _internal_end_selection();
}
inline void ChartCommandSelectionBehaviorArchive::unsafe_arena_set_allocated_end_selection(
    ::TN::ChartSelectionArchive* end_selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_selection_);
  }
  _impl_.end_selection_ = end_selection;
  if (end_selection) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.ChartCommandSelectionBehaviorArchive.end_selection)
}
inline ::TN::ChartSelectionArchive* ChartCommandSelectionBehaviorArchive::release_end_selection() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TN::ChartSelectionArchive* temp = _impl_.end_selection_;
  _impl_.end_selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TN::ChartSelectionArchive* ChartCommandSelectionBehaviorArchive::unsafe_arena_release_end_selection() {
  // @@protoc_insertion_point(field_release:TN.ChartCommandSelectionBehaviorArchive.end_selection)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TN::ChartSelectionArchive* temp = _impl_.end_selection_;
  _impl_.end_selection_ = nullptr;
  return temp;
}
inline ::TN::ChartSelectionArchive* ChartCommandSelectionBehaviorArchive::_internal_mutable_end_selection() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.end_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TN::ChartSelectionArchive>(GetArenaForAllocation());
    _impl_.end_selection_ = p;
  }
  return _impl_.end_selection_;
}
inline ::TN::ChartSelectionArchive* ChartCommandSelectionBehaviorArchive::mutable_end_selection() {
  ::TN::ChartSelectionArchive* _msg = _internal_mutable_end_selection();
  // @@protoc_insertion_point(field_mutable:TN.ChartCommandSelectionBehaviorArchive.end_selection)
  return _msg;
}
inline void ChartCommandSelectionBehaviorArchive::set_allocated_end_selection(::TN::ChartSelectionArchive* end_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_selection_);
  }
  if (end_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_selection));
    if (message_arena != submessage_arena) {
      end_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.end_selection_ = end_selection;
  // @@protoc_insertion_point(field_set_allocated:TN.ChartCommandSelectionBehaviorArchive.end_selection)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TN

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TNCommandArchives_2eproto
