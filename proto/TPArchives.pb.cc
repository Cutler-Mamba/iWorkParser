// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TPArchives.proto

#include "TPArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace TP {
PROTOBUF_CONSTEXPR DocumentArchive::DocumentArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.citation_records_)*/{}
  , /*decltype(_impl_.toc_styles_)*/{}
  , /*decltype(_impl_.change_sessions_)*/{}
  , /*decltype(_impl_.printer_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.paper_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stylesheet_)*/nullptr
  , /*decltype(_impl_.floating_drawables_)*/nullptr
  , /*decltype(_impl_.body_storage_)*/nullptr
  , /*decltype(_impl_.section_)*/nullptr
  , /*decltype(_impl_.theme_)*/nullptr
  , /*decltype(_impl_.settings_)*/nullptr
  , /*decltype(_impl_.deprecated_layout_state_)*/nullptr
  , /*decltype(_impl_.deprecated_view_state_)*/nullptr
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.drawables_zorder_)*/nullptr
  , /*decltype(_impl_.tables_custom_format_list_)*/nullptr
  , /*decltype(_impl_.page_width_)*/0
  , /*decltype(_impl_.page_height_)*/0
  , /*decltype(_impl_.left_margin_)*/0
  , /*decltype(_impl_.right_margin_)*/0
  , /*decltype(_impl_.top_margin_)*/0
  , /*decltype(_impl_.bottom_margin_)*/0
  , /*decltype(_impl_.header_margin_)*/0
  , /*decltype(_impl_.uses_single_header_footer_)*/false
  , /*decltype(_impl_.layout_body_vertically_)*/false
  , /*decltype(_impl_.change_tracking_enabled_)*/false
  , /*decltype(_impl_.change_tracking_paused_)*/false
  , /*decltype(_impl_.footer_margin_)*/0
  , /*decltype(_impl_.page_scale_)*/0
  , /*decltype(_impl_.orientation_)*/0u} {}
struct DocumentArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocumentArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocumentArchiveDefaultTypeInternal() {}
  union {
    DocumentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocumentArchiveDefaultTypeInternal _DocumentArchive_default_instance_;
PROTOBUF_CONSTEXPR ThemeArchive::ThemeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct ThemeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThemeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThemeArchiveDefaultTypeInternal() {}
  union {
    ThemeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThemeArchiveDefaultTypeInternal _ThemeArchive_default_instance_;
PROTOBUF_CONSTEXPR SettingsArchive::SettingsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.decimal_tab_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hyphenation_language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.creation_locale_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.last_locale_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.orig_template_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.creation_date_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bibliography_format_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.placeholder_authoring_)*/false
  , /*decltype(_impl_.hyphenation_)*/false
  , /*decltype(_impl_.use_ligatures_)*/false
  , /*decltype(_impl_.toc_links_enabled_)*/false
  , /*decltype(_impl_.ct_bubbles_visibility_)*/0
  , /*decltype(_impl_.document_is_rtl_)*/false
  , /*decltype(_impl_.section_authoring_)*/false
  , /*decltype(_impl_.footnote_kind_)*/0
  , /*decltype(_impl_.footnote_format_)*/0
  , /*decltype(_impl_.footnote_numbering_)*/0
  , /*decltype(_impl_.footnote_gap_)*/0
  , /*decltype(_impl_.show_ct_deletions_)*/true
  , /*decltype(_impl_.change_bars_visible_)*/true
  , /*decltype(_impl_.format_changes_visible_)*/true
  , /*decltype(_impl_.annotations_visible_)*/true
  , /*decltype(_impl_.body_)*/true
  , /*decltype(_impl_.headers_)*/true
  , /*decltype(_impl_.footers_)*/true
  , /*decltype(_impl_.preview_)*/true
  , /*decltype(_impl_.copy_movies_)*/true
  , /*decltype(_impl_.copy_assets_)*/true
  , /*decltype(_impl_.links_enabled_)*/true
  , /*decltype(_impl_.show_ct_markup_)*/true} {}
struct SettingsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SettingsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SettingsArchiveDefaultTypeInternal() {}
  union {
    SettingsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SettingsArchiveDefaultTypeInternal _SettingsArchive_default_instance_;
PROTOBUF_CONSTEXPR PlaceholderArchive::PlaceholderArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct PlaceholderArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlaceholderArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlaceholderArchiveDefaultTypeInternal() {}
  union {
    PlaceholderArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlaceholderArchiveDefaultTypeInternal _PlaceholderArchive_default_instance_;
PROTOBUF_CONSTEXPR FloatingDrawablesArchive_DrawableEntry::FloatingDrawablesArchive_DrawableEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.drawable_)*/nullptr} {}
struct FloatingDrawablesArchive_DrawableEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FloatingDrawablesArchive_DrawableEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FloatingDrawablesArchive_DrawableEntryDefaultTypeInternal() {}
  union {
    FloatingDrawablesArchive_DrawableEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FloatingDrawablesArchive_DrawableEntryDefaultTypeInternal _FloatingDrawablesArchive_DrawableEntry_default_instance_;
PROTOBUF_CONSTEXPR FloatingDrawablesArchive_PageGroup::FloatingDrawablesArchive_PageGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.background_drawables_)*/{}
  , /*decltype(_impl_.foreground_drawables_)*/{}
  , /*decltype(_impl_.drawables_)*/{}
  , /*decltype(_impl_.page_index_)*/0u} {}
struct FloatingDrawablesArchive_PageGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FloatingDrawablesArchive_PageGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FloatingDrawablesArchive_PageGroupDefaultTypeInternal() {}
  union {
    FloatingDrawablesArchive_PageGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FloatingDrawablesArchive_PageGroupDefaultTypeInternal _FloatingDrawablesArchive_PageGroup_default_instance_;
PROTOBUF_CONSTEXPR FloatingDrawablesArchive::FloatingDrawablesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.page_groups_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FloatingDrawablesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FloatingDrawablesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FloatingDrawablesArchiveDefaultTypeInternal() {}
  union {
    FloatingDrawablesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FloatingDrawablesArchiveDefaultTypeInternal _FloatingDrawablesArchive_default_instance_;
PROTOBUF_CONSTEXPR DrawablesZOrderArchive::DrawablesZOrderArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.drawables_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DrawablesZOrderArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DrawablesZOrderArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DrawablesZOrderArchiveDefaultTypeInternal() {}
  union {
    DrawablesZOrderArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DrawablesZOrderArchiveDefaultTypeInternal _DrawablesZOrderArchive_default_instance_;
PROTOBUF_CONSTEXPR PageMasterArchive::PageMasterArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.headers_)*/{}
  , /*decltype(_impl_.footers_)*/{}
  , /*decltype(_impl_.master_drawables_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PageMasterArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PageMasterArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PageMasterArchiveDefaultTypeInternal() {}
  union {
    PageMasterArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PageMasterArchiveDefaultTypeInternal _PageMasterArchive_default_instance_;
PROTOBUF_CONSTEXPR SectionArchive::SectionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.obsolete_headers_)*/{}
  , /*decltype(_impl_.obsolete_footers_)*/{}
  , /*decltype(_impl_.obsolete_master_drawables_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.first_page_master_)*/nullptr
  , /*decltype(_impl_.even_page_master_)*/nullptr
  , /*decltype(_impl_.odd_page_master_)*/nullptr
  , /*decltype(_impl_.obsolete_left_margin_)*/0
  , /*decltype(_impl_.obsolete_right_margin_)*/0
  , /*decltype(_impl_.obsolete_top_margin_)*/0
  , /*decltype(_impl_.obsolete_bottom_margin_)*/0
  , /*decltype(_impl_.obsolete_shows_header_)*/false
  , /*decltype(_impl_.obsolete_shows_footer_)*/false
  , /*decltype(_impl_.obsolete_landscape_mode_)*/false
  , /*decltype(_impl_.inherit_previous_header_footer_)*/false
  , /*decltype(_impl_.obsolete_header_padding_)*/0
  , /*decltype(_impl_.obsolete_footer_padding_)*/0
  , /*decltype(_impl_.obsolete_paper_width_)*/0
  , /*decltype(_impl_.obsolete_paper_height_)*/0
  , /*decltype(_impl_.obsolete_header_margin_)*/0
  , /*decltype(_impl_.obsolete_footer_margin_)*/0
  , /*decltype(_impl_.section_start_kind_)*/0u
  , /*decltype(_impl_.section_page_number_kind_)*/0u
  , /*decltype(_impl_.page_master_first_page_different_)*/false
  , /*decltype(_impl_.page_master_even_odd_pages_different_)*/false
  , /*decltype(_impl_.page_master_first_page_hides_header_footer_)*/false
  , /*decltype(_impl_.section_page_number_start_)*/0u} {}
struct SectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SectionArchiveDefaultTypeInternal() {}
  union {
    SectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SectionArchiveDefaultTypeInternal _SectionArchive_default_instance_;
PROTOBUF_CONSTEXPR AnchorPosArchive::AnchorPosArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attachment_)*/nullptr
  , /*decltype(_impl_.position_)*/nullptr} {}
struct AnchorPosArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnchorPosArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnchorPosArchiveDefaultTypeInternal() {}
  union {
    AnchorPosArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnchorPosArchiveDefaultTypeInternal _AnchorPosArchive_default_instance_;
PROTOBUF_CONSTEXPR TargetHintArchive::TargetHintArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.frame_origin_)*/nullptr
  , /*decltype(_impl_.frame_size_)*/nullptr
  , /*decltype(_impl_.range_)*/nullptr
  , /*decltype(_impl_.anchored_range_)*/nullptr
  , /*decltype(_impl_.next_widow_pulls_down_from_char_index_)*/0
  , /*decltype(_impl_.column_count_)*/0} {}
struct TargetHintArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TargetHintArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TargetHintArchiveDefaultTypeInternal() {}
  union {
    TargetHintArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TargetHintArchiveDefaultTypeInternal _TargetHintArchive_default_instance_;
PROTOBUF_CONSTEXPR PageHintArchive::PageHintArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.target_hints_)*/{}
  , /*decltype(_impl_.anchored_attachments_map_)*/{}
  , /*decltype(_impl_.footnote_auto_number_range_)*/nullptr
  , /*decltype(_impl_.footnote_layout_range_)*/nullptr
  , /*decltype(_impl_.first_child_hint_)*/nullptr
  , /*decltype(_impl_.last_child_hint_)*/nullptr
  , /*decltype(_impl_.topic_numbers_)*/nullptr
  , /*decltype(_impl_.page_kind_)*/0
  , /*decltype(_impl_.version_number_)*/0u
  , /*decltype(_impl_.platform_id_)*/0u} {}
struct PageHintArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PageHintArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PageHintArchiveDefaultTypeInternal() {}
  union {
    PageHintArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PageHintArchiveDefaultTypeInternal _PageHintArchive_default_instance_;
PROTOBUF_CONSTEXPR SectionHintArchive::SectionHintArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.page_hints_)*/{}
  , /*decltype(_impl_.start_page_index_)*/0u} {}
struct SectionHintArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SectionHintArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SectionHintArchiveDefaultTypeInternal() {}
  union {
    SectionHintArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SectionHintArchiveDefaultTypeInternal _SectionHintArchive_default_instance_;
PROTOBUF_CONSTEXPR TextboxHintArchive::TextboxHintArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.range_)*/nullptr
  , /*decltype(_impl_.size_)*/nullptr} {}
struct TextboxHintArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TextboxHintArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TextboxHintArchiveDefaultTypeInternal() {}
  union {
    TextboxHintArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TextboxHintArchiveDefaultTypeInternal _TextboxHintArchive_default_instance_;
PROTOBUF_CONSTEXPR TopicNumberEntryArchive::TopicNumberEntryArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.topic_number_)*/{}
  , /*decltype(_impl_.character_index_)*/{}
  , /*decltype(_impl_.list_style_)*/nullptr} {}
struct TopicNumberEntryArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TopicNumberEntryArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TopicNumberEntryArchiveDefaultTypeInternal() {}
  union {
    TopicNumberEntryArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TopicNumberEntryArchiveDefaultTypeInternal _TopicNumberEntryArchive_default_instance_;
PROTOBUF_CONSTEXPR TopicNumberHintsArchive::TopicNumberHintsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.topic_numbers_map_)*/{}
  , /*decltype(_impl_.charindex_)*/0u
  , /*decltype(_impl_.valid_through_char_index_)*/0u} {}
struct TopicNumberHintsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TopicNumberHintsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TopicNumberHintsArchiveDefaultTypeInternal() {}
  union {
    TopicNumberHintsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TopicNumberHintsArchiveDefaultTypeInternal _TopicNumberHintsArchive_default_instance_;
PROTOBUF_CONSTEXPR LayoutStateArchive::LayoutStateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.section_hints_)*/{}
  , /*decltype(_impl_.section_index_)*/0u
  , /*decltype(_impl_.section_page_index_)*/0u
  , /*decltype(_impl_.document_page_index_)*/0u
  , /*decltype(_impl_.last_page_count_)*/0u} {}
struct LayoutStateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LayoutStateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LayoutStateArchiveDefaultTypeInternal() {}
  union {
    LayoutStateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LayoutStateArchiveDefaultTypeInternal _LayoutStateArchive_default_instance_;
PROTOBUF_CONSTEXPR CanvasSelectionArchive::CanvasSelectionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.infos_)*/{}
  , /*decltype(_impl_.excluded_infos_)*/{}
  , /*decltype(_impl_.additional_infos_)*/{}
  , /*decltype(_impl_.range_)*/nullptr
  , /*decltype(_impl_.container_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.style_insertion_behavior_)*/0
  , /*decltype(_impl_.caret_affinity_)*/0} {}
struct CanvasSelectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CanvasSelectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CanvasSelectionArchiveDefaultTypeInternal() {}
  union {
    CanvasSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CanvasSelectionArchiveDefaultTypeInternal _CanvasSelectionArchive_default_instance_;
PROTOBUF_CONSTEXPR ViewStateArchive::ViewStateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chart_ui_state_)*/{}
  , /*decltype(_impl_.selected_inspector_switch_segment_identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.visible_rect_origin_)*/nullptr
  , /*decltype(_impl_.selection_)*/nullptr
  , /*decltype(_impl_.selection_model_)*/nullptr
  , /*decltype(_impl_.visible_rect_size_)*/nullptr
  , /*decltype(_impl_.window_frame_origin_)*/nullptr
  , /*decltype(_impl_.window_frame_size_)*/nullptr
  , /*decltype(_impl_.obsolete_view_scale_)*/0
  , /*decltype(_impl_.obsolete_landscape_)*/false
  , /*decltype(_impl_.master_drawables_selectable_)*/false
  , /*decltype(_impl_.layout_borders_visible_)*/false
  , /*decltype(_impl_.word_count_hud_visible_)*/false
  , /*decltype(_impl_.view_scale_mode_)*/0
  , /*decltype(_impl_.shows_page_navigator_)*/false
  , /*decltype(_impl_.inspector_hidden_)*/false
  , /*decltype(_impl_.ruler_visible_)*/true
  , /*decltype(_impl_.shows_comments_)*/true
  , /*decltype(_impl_.view_scale_)*/1.25f} {}
struct ViewStateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewStateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewStateArchiveDefaultTypeInternal() {}
  union {
    ViewStateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewStateArchiveDefaultTypeInternal _ViewStateArchive_default_instance_;
PROTOBUF_CONSTEXPR UIStateArchive::UIStateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.layout_state_)*/nullptr
  , /*decltype(_impl_.view_state_)*/nullptr} {}
struct UIStateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UIStateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UIStateArchiveDefaultTypeInternal() {}
  union {
    UIStateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UIStateArchiveDefaultTypeInternal _UIStateArchive_default_instance_;
}  // namespace TP
static ::_pb::Metadata file_level_metadata_TPArchives_2eproto[21];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_TPArchives_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_TPArchives_2eproto = nullptr;

const uint32_t TableStruct_TPArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_.stylesheet_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_.floating_drawables_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_.body_storage_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_.section_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_.theme_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_.settings_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_.deprecated_layout_state_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_.deprecated_view_state_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_.citation_records_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_.toc_styles_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_.change_sessions_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_.drawables_zorder_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_.uses_single_header_footer_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_.page_width_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_.page_height_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_.left_margin_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_.right_margin_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_.top_margin_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_.bottom_margin_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_.header_margin_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_.footer_margin_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_.page_scale_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_.layout_body_vertically_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_.change_tracking_enabled_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_.tables_custom_format_list_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_.orientation_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_.printer_id_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_.paper_id_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _impl_.change_tracking_paused_),
  10,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  ~0u,
  ~0u,
  ~0u,
  11,
  20,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  24,
  25,
  21,
  22,
  12,
  26,
  0,
  1,
  23,
  PROTOBUF_FIELD_OFFSET(::TP::ThemeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::ThemeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TP::ThemeArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.body_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.headers_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.footers_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.preview_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.copy_movies_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.copy_assets_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.placeholder_authoring_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.links_enabled_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.hyphenation_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.use_ligatures_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.toc_links_enabled_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.show_ct_markup_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.show_ct_deletions_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.ct_bubbles_visibility_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.change_bars_visible_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.format_changes_visible_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.annotations_visible_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.document_is_rtl_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.decimal_tab_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.hyphenation_language_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.creation_locale_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.last_locale_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.orig_template_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.creation_date_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.bibliography_format_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.footnote_kind_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.footnote_format_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.footnote_numbering_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.footnote_gap_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _impl_.section_authoring_),
  23,
  24,
  25,
  26,
  27,
  28,
  8,
  29,
  9,
  10,
  11,
  30,
  19,
  12,
  20,
  21,
  22,
  13,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  15,
  16,
  17,
  18,
  14,
  PROTOBUF_FIELD_OFFSET(::TP::PlaceholderArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::PlaceholderArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TP::PlaceholderArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TP::FloatingDrawablesArchive_DrawableEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::FloatingDrawablesArchive_DrawableEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TP::FloatingDrawablesArchive_DrawableEntry, _impl_.drawable_),
  0,
  PROTOBUF_FIELD_OFFSET(::TP::FloatingDrawablesArchive_PageGroup, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::FloatingDrawablesArchive_PageGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TP::FloatingDrawablesArchive_PageGroup, _impl_.page_index_),
  PROTOBUF_FIELD_OFFSET(::TP::FloatingDrawablesArchive_PageGroup, _impl_.background_drawables_),
  PROTOBUF_FIELD_OFFSET(::TP::FloatingDrawablesArchive_PageGroup, _impl_.foreground_drawables_),
  PROTOBUF_FIELD_OFFSET(::TP::FloatingDrawablesArchive_PageGroup, _impl_.drawables_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TP::FloatingDrawablesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TP::FloatingDrawablesArchive, _impl_.page_groups_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TP::DrawablesZOrderArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TP::DrawablesZOrderArchive, _impl_.drawables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TP::PageMasterArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TP::PageMasterArchive, _impl_.headers_),
  PROTOBUF_FIELD_OFFSET(::TP::PageMasterArchive, _impl_.footers_),
  PROTOBUF_FIELD_OFFSET(::TP::PageMasterArchive, _impl_.master_drawables_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _impl_.obsolete_shows_header_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _impl_.obsolete_shows_footer_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _impl_.obsolete_headers_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _impl_.obsolete_footers_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _impl_.obsolete_left_margin_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _impl_.obsolete_right_margin_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _impl_.obsolete_top_margin_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _impl_.obsolete_bottom_margin_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _impl_.obsolete_header_padding_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _impl_.obsolete_footer_padding_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _impl_.obsolete_paper_width_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _impl_.obsolete_paper_height_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _impl_.obsolete_landscape_mode_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _impl_.obsolete_master_drawables_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _impl_.obsolete_header_margin_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _impl_.obsolete_footer_margin_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _impl_.inherit_previous_header_footer_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _impl_.page_master_first_page_different_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _impl_.page_master_even_odd_pages_different_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _impl_.section_start_kind_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _impl_.section_page_number_kind_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _impl_.section_page_number_start_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _impl_.first_page_master_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _impl_.even_page_master_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _impl_.odd_page_master_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _impl_.page_master_first_page_hides_header_footer_),
  8,
  9,
  ~0u,
  ~0u,
  4,
  5,
  6,
  7,
  12,
  13,
  14,
  15,
  10,
  ~0u,
  16,
  17,
  11,
  20,
  21,
  18,
  19,
  23,
  1,
  2,
  3,
  0,
  22,
  PROTOBUF_FIELD_OFFSET(::TP::AnchorPosArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::AnchorPosArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TP::AnchorPosArchive, _impl_.attachment_),
  PROTOBUF_FIELD_OFFSET(::TP::AnchorPosArchive, _impl_.position_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TP::TargetHintArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::TargetHintArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TP::TargetHintArchive, _impl_.frame_origin_),
  PROTOBUF_FIELD_OFFSET(::TP::TargetHintArchive, _impl_.frame_size_),
  PROTOBUF_FIELD_OFFSET(::TP::TargetHintArchive, _impl_.range_),
  PROTOBUF_FIELD_OFFSET(::TP::TargetHintArchive, _impl_.next_widow_pulls_down_from_char_index_),
  PROTOBUF_FIELD_OFFSET(::TP::TargetHintArchive, _impl_.anchored_range_),
  PROTOBUF_FIELD_OFFSET(::TP::TargetHintArchive, _impl_.column_count_),
  0,
  1,
  2,
  4,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, _impl_.page_kind_),
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, _impl_.target_hints_),
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, _impl_.footnote_auto_number_range_),
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, _impl_.footnote_layout_range_),
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, _impl_.first_child_hint_),
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, _impl_.last_child_hint_),
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, _impl_.anchored_attachments_map_),
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, _impl_.topic_numbers_),
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, _impl_.version_number_),
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, _impl_.platform_id_),
  5,
  ~0u,
  0,
  1,
  2,
  3,
  ~0u,
  4,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::TP::SectionHintArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionHintArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TP::SectionHintArchive, _impl_.page_hints_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionHintArchive, _impl_.start_page_index_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TP::TextboxHintArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::TextboxHintArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TP::TextboxHintArchive, _impl_.range_),
  PROTOBUF_FIELD_OFFSET(::TP::TextboxHintArchive, _impl_.size_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TP::TopicNumberEntryArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::TopicNumberEntryArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TP::TopicNumberEntryArchive, _impl_.list_style_),
  PROTOBUF_FIELD_OFFSET(::TP::TopicNumberEntryArchive, _impl_.topic_number_),
  PROTOBUF_FIELD_OFFSET(::TP::TopicNumberEntryArchive, _impl_.character_index_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TP::TopicNumberHintsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::TopicNumberHintsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TP::TopicNumberHintsArchive, _impl_.charindex_),
  PROTOBUF_FIELD_OFFSET(::TP::TopicNumberHintsArchive, _impl_.topic_numbers_map_),
  PROTOBUF_FIELD_OFFSET(::TP::TopicNumberHintsArchive, _impl_.valid_through_char_index_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TP::LayoutStateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::LayoutStateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TP::LayoutStateArchive, _impl_.section_index_),
  PROTOBUF_FIELD_OFFSET(::TP::LayoutStateArchive, _impl_.section_page_index_),
  PROTOBUF_FIELD_OFFSET(::TP::LayoutStateArchive, _impl_.document_page_index_),
  PROTOBUF_FIELD_OFFSET(::TP::LayoutStateArchive, _impl_.last_page_count_),
  PROTOBUF_FIELD_OFFSET(::TP::LayoutStateArchive, _impl_.section_hints_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TP::CanvasSelectionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::CanvasSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TP::CanvasSelectionArchive, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::TP::CanvasSelectionArchive, _impl_.range_),
  PROTOBUF_FIELD_OFFSET(::TP::CanvasSelectionArchive, _impl_.style_insertion_behavior_),
  PROTOBUF_FIELD_OFFSET(::TP::CanvasSelectionArchive, _impl_.caret_affinity_),
  PROTOBUF_FIELD_OFFSET(::TP::CanvasSelectionArchive, _impl_.infos_),
  PROTOBUF_FIELD_OFFSET(::TP::CanvasSelectionArchive, _impl_.excluded_infos_),
  PROTOBUF_FIELD_OFFSET(::TP::CanvasSelectionArchive, _impl_.additional_infos_),
  PROTOBUF_FIELD_OFFSET(::TP::CanvasSelectionArchive, _impl_.container_),
  2,
  0,
  3,
  4,
  ~0u,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TP::ViewStateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::ViewStateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TP::ViewStateArchive, _impl_.obsolete_view_scale_),
  PROTOBUF_FIELD_OFFSET(::TP::ViewStateArchive, _impl_.visible_rect_origin_),
  PROTOBUF_FIELD_OFFSET(::TP::ViewStateArchive, _impl_.obsolete_landscape_),
  PROTOBUF_FIELD_OFFSET(::TP::ViewStateArchive, _impl_.selection_),
  PROTOBUF_FIELD_OFFSET(::TP::ViewStateArchive, _impl_.selection_model_),
  PROTOBUF_FIELD_OFFSET(::TP::ViewStateArchive, _impl_.master_drawables_selectable_),
  PROTOBUF_FIELD_OFFSET(::TP::ViewStateArchive, _impl_.visible_rect_size_),
  PROTOBUF_FIELD_OFFSET(::TP::ViewStateArchive, _impl_.chart_ui_state_),
  PROTOBUF_FIELD_OFFSET(::TP::ViewStateArchive, _impl_.ruler_visible_),
  PROTOBUF_FIELD_OFFSET(::TP::ViewStateArchive, _impl_.layout_borders_visible_),
  PROTOBUF_FIELD_OFFSET(::TP::ViewStateArchive, _impl_.word_count_hud_visible_),
  PROTOBUF_FIELD_OFFSET(::TP::ViewStateArchive, _impl_.shows_comments_),
  PROTOBUF_FIELD_OFFSET(::TP::ViewStateArchive, _impl_.shows_page_navigator_),
  PROTOBUF_FIELD_OFFSET(::TP::ViewStateArchive, _impl_.view_scale_mode_),
  PROTOBUF_FIELD_OFFSET(::TP::ViewStateArchive, _impl_.view_scale_),
  PROTOBUF_FIELD_OFFSET(::TP::ViewStateArchive, _impl_.window_frame_origin_),
  PROTOBUF_FIELD_OFFSET(::TP::ViewStateArchive, _impl_.window_frame_size_),
  PROTOBUF_FIELD_OFFSET(::TP::ViewStateArchive, _impl_.selected_inspector_switch_segment_identifier_),
  PROTOBUF_FIELD_OFFSET(::TP::ViewStateArchive, _impl_.inspector_hidden_),
  7,
  1,
  8,
  2,
  3,
  9,
  4,
  ~0u,
  15,
  10,
  11,
  16,
  13,
  12,
  17,
  5,
  6,
  0,
  14,
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, _impl_.layout_state_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, _impl_.view_state_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 36, -1, sizeof(::TP::DocumentArchive)},
  { 66, 73, -1, sizeof(::TP::ThemeArchive)},
  { 74, 111, -1, sizeof(::TP::SettingsArchive)},
  { 142, 149, -1, sizeof(::TP::PlaceholderArchive)},
  { 150, 157, -1, sizeof(::TP::FloatingDrawablesArchive_DrawableEntry)},
  { 158, 168, -1, sizeof(::TP::FloatingDrawablesArchive_PageGroup)},
  { 172, -1, -1, sizeof(::TP::FloatingDrawablesArchive)},
  { 179, -1, -1, sizeof(::TP::DrawablesZOrderArchive)},
  { 186, -1, -1, sizeof(::TP::PageMasterArchive)},
  { 195, 228, -1, sizeof(::TP::SectionArchive)},
  { 255, 263, -1, sizeof(::TP::AnchorPosArchive)},
  { 265, 277, -1, sizeof(::TP::TargetHintArchive)},
  { 283, 299, -1, sizeof(::TP::PageHintArchive)},
  { 309, 317, -1, sizeof(::TP::SectionHintArchive)},
  { 319, 327, -1, sizeof(::TP::TextboxHintArchive)},
  { 329, 338, -1, sizeof(::TP::TopicNumberEntryArchive)},
  { 341, 350, -1, sizeof(::TP::TopicNumberHintsArchive)},
  { 353, 364, -1, sizeof(::TP::LayoutStateArchive)},
  { 369, 383, -1, sizeof(::TP::CanvasSelectionArchive)},
  { 391, 416, -1, sizeof(::TP::ViewStateArchive)},
  { 435, 443, -1, sizeof(::TP::UIStateArchive)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::TP::_DocumentArchive_default_instance_._instance,
  &::TP::_ThemeArchive_default_instance_._instance,
  &::TP::_SettingsArchive_default_instance_._instance,
  &::TP::_PlaceholderArchive_default_instance_._instance,
  &::TP::_FloatingDrawablesArchive_DrawableEntry_default_instance_._instance,
  &::TP::_FloatingDrawablesArchive_PageGroup_default_instance_._instance,
  &::TP::_FloatingDrawablesArchive_default_instance_._instance,
  &::TP::_DrawablesZOrderArchive_default_instance_._instance,
  &::TP::_PageMasterArchive_default_instance_._instance,
  &::TP::_SectionArchive_default_instance_._instance,
  &::TP::_AnchorPosArchive_default_instance_._instance,
  &::TP::_TargetHintArchive_default_instance_._instance,
  &::TP::_PageHintArchive_default_instance_._instance,
  &::TP::_SectionHintArchive_default_instance_._instance,
  &::TP::_TextboxHintArchive_default_instance_._instance,
  &::TP::_TopicNumberEntryArchive_default_instance_._instance,
  &::TP::_TopicNumberHintsArchive_default_instance_._instance,
  &::TP::_LayoutStateArchive_default_instance_._instance,
  &::TP::_CanvasSelectionArchive_default_instance_._instance,
  &::TP::_ViewStateArchive_default_instance_._instance,
  &::TP::_UIStateArchive_default_instance_._instance,
};

const char descriptor_table_protodef_TPArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020TPArchives.proto\022\002TP\032\021TSDArchives.prot"
  "o\032\021TSKArchives.proto\032\021TSPMessages.proto\032"
  "\022TSWPArchives.proto\032\021TSSArchives.proto\032\021"
  "TSAArchives.proto\032\022TSCHArchives.proto\"\305\007"
  "\n\017DocumentArchive\022#\n\005super\030\017 \002(\0132\024.TSA.D"
  "ocumentArchive\022\"\n\nstylesheet\030\002 \001(\0132\016.TSP"
  ".Reference\022*\n\022floating_drawables\030\003 \001(\0132\016"
  ".TSP.Reference\022$\n\014body_storage\030\004 \001(\0132\016.T"
  "SP.Reference\022\037\n\007section\030\005 \001(\0132\016.TSP.Refe"
  "rence\022\035\n\005theme\030\006 \001(\0132\016.TSP.Reference\022 \n\010"
  "settings\030\007 \001(\0132\016.TSP.Reference\022/\n\027deprec"
  "ated_layout_state\030\013 \001(\0132\016.TSP.Reference\022"
  "-\n\025deprecated_view_state\030\014 \001(\0132\016.TSP.Ref"
  "erence\022(\n\020citation_records\030\r \003(\0132\016.TSP.R"
  "eference\022\"\n\ntoc_styles\030\016 \003(\0132\016.TSP.Refer"
  "ence\022\'\n\017change_sessions\030\020 \003(\0132\016.TSP.Refe"
  "rence\022(\n\020drawables_zorder\030\024 \001(\0132\016.TSP.Re"
  "ference\022!\n\031uses_single_header_footer\030\025 \001"
  "(\010\022\022\n\npage_width\030\036 \001(\002\022\023\n\013page_height\030\037 "
  "\001(\002\022\023\n\013left_margin\030  \001(\002\022\024\n\014right_margin"
  "\030! \001(\002\022\022\n\ntop_margin\030\" \001(\002\022\025\n\rbottom_mar"
  "gin\030# \001(\002\022\025\n\rheader_margin\030$ \001(\002\022\025\n\rfoot"
  "er_margin\030% \001(\002\022\022\n\npage_scale\030& \001(\002\022\036\n\026l"
  "ayout_body_vertically\030\' \001(\010\022\037\n\027change_tr"
  "acking_enabled\030( \001(\010\0221\n\031tables_custom_fo"
  "rmat_list\030) \001(\0132\016.TSP.Reference\022\026\n\013orien"
  "tation\030* \001(\r:\0010\022\022\n\nprinter_id\030+ \001(\t\022\020\n\010p"
  "aper_id\030, \001(\t\022\036\n\026change_tracking_paused\030"
  "- \001(\010\"0\n\014ThemeArchive\022 \n\005super\030\001 \002(\0132\021.T"
  "SS.ThemeArchive\"\204\013\n\017SettingsArchive\022\022\n\004b"
  "ody\030\001 \001(\010:\004true\022\025\n\007headers\030\002 \001(\010:\004true\022\025"
  "\n\007footers\030\003 \001(\010:\004true\022\025\n\007preview\030\004 \001(\010:\004"
  "true\022\031\n\013copy_movies\030\005 \001(\010:\004true\022\031\n\013copy_"
  "assets\030\006 \001(\010:\004true\022$\n\025placeholder_author"
  "ing\030\007 \001(\010:\005false\022\033\n\rlinks_enabled\030\010 \001(\010:"
  "\004true\022\032\n\013hyphenation\030\t \001(\010:\005false\022\034\n\ruse"
  "_ligatures\030\n \001(\010:\005false\022 \n\021toc_links_ena"
  "bled\030\013 \001(\010:\005false\022\034\n\016show_ct_markup\030\014 \001("
  "\010:\004true\022\037\n\021show_ct_deletions\030\r \001(\010:\004true"
  "\022\035\n\025ct_bubbles_visibility\030\016 \001(\005\022!\n\023chang"
  "e_bars_visible\030\017 \001(\010:\004true\022$\n\026format_cha"
  "nges_visible\030\020 \001(\010:\004true\022!\n\023annotations_"
  "visible\030\021 \001(\010:\004true\022\036\n\017document_is_rtl\030\022"
  " \001(\010:\005false\022\023\n\013decimal_tab\030\024 \001(\t\022\020\n\010lang"
  "uage\030\025 \001(\t\022\034\n\024hyphenation_language\030\026 \001(\t"
  "\022\027\n\017creation_locale\030\027 \001(\t\022\023\n\013last_locale"
  "\030\030 \001(\t\022\025\n\rorig_template\030\031 \001(\t\022\025\n\rcreatio"
  "n_date\030\032 \001(\t\022\033\n\023bibliography_format\030\033 \001("
  "\t\0227\n\rfootnote_kind\030\036 \001(\0162 .TP.SettingsAr"
  "chive.FootnoteKind\022;\n\017footnote_format\030\037 "
  "\001(\0162\".TP.SettingsArchive.FootnoteFormat\022"
  "A\n\022footnote_numbering\030  \001(\0162%.TP.Setting"
  "sArchive.FootnoteNumbering\022\024\n\014footnote_g"
  "ap\030! \001(\005\022 \n\021section_authoring\030( \001(\010:\005fal"
  "se\"o\n\014FootnoteKind\022\032\n\026kFootnoteKindFootn"
  "otes\020\000\022!\n\035kFootnoteKindDocumentEndnotes\020"
  "\001\022 \n\034kFootnoteKindSectionEndnotes\020\002\"\257\001\n\016"
  "FootnoteFormat\022\032\n\026kFootnoteFormatNumeric"
  "\020\000\022\030\n\024kFootnoteFormatRoman\020\001\022\033\n\027kFootnot"
  "eFormatSymbolic\020\002\022\"\n\036kFootnoteFormatJapa"
  "neseNumeric\020\003\022&\n\"kFootnoteFormatJapanese"
  "Ideographic\020\004\"\206\001\n\021FootnoteNumbering\022 \n\034k"
  "FootnoteNumberingContinuous\020\000\022%\n!kFootno"
  "teNumberingRestartEachPage\020\001\022(\n$kFootnot"
  "eNumberingRestartEachSection\020\002\";\n\022Placeh"
  "olderArchive\022%\n\005super\030\001 \002(\0132\026.TSWP.Shape"
  "InfoArchive\"\377\002\n\030FloatingDrawablesArchive"
  "\022;\n\013page_groups\030\001 \003(\0132&.TP.FloatingDrawa"
  "blesArchive.PageGroup\0321\n\rDrawableEntry\022 "
  "\n\010drawable\030\001 \001(\0132\016.TSP.Reference\032\362\001\n\tPag"
  "eGroup\022\022\n\npage_index\030\001 \002(\r\022H\n\024background"
  "_drawables\030\002 \003(\0132*.TP.FloatingDrawablesA"
  "rchive.DrawableEntry\022H\n\024foreground_drawa"
  "bles\030\003 \003(\0132*.TP.FloatingDrawablesArchive"
  ".DrawableEntry\022=\n\tdrawables\030\004 \003(\0132*.TP.F"
  "loatingDrawablesArchive.DrawableEntry\";\n"
  "\026DrawablesZOrderArchive\022!\n\tdrawables\030\001 \003"
  "(\0132\016.TSP.Reference\"\177\n\021PageMasterArchive\022"
  "\037\n\007headers\030\001 \003(\0132\016.TSP.Reference\022\037\n\007foot"
  "ers\030\002 \003(\0132\016.TSP.Reference\022(\n\020master_draw"
  "ables\030\003 \003(\0132\016.TSP.Reference\"\320\007\n\016SectionA"
  "rchive\022\035\n\025OBSOLETE_shows_header\030\001 \001(\010\022\035\n"
  "\025OBSOLETE_shows_footer\030\002 \001(\010\022(\n\020OBSOLETE"
  "_headers\030\003 \003(\0132\016.TSP.Reference\022(\n\020OBSOLE"
  "TE_footers\030\004 \003(\0132\016.TSP.Reference\022\034\n\024OBSO"
  "LETE_left_margin\030\005 \001(\002\022\035\n\025OBSOLETE_right"
  "_margin\030\006 \001(\002\022\033\n\023OBSOLETE_top_margin\030\007 \001"
  "(\002\022\036\n\026OBSOLETE_bottom_margin\030\010 \001(\002\022\037\n\027OB"
  "SOLETE_header_padding\030\t \001(\002\022\037\n\027OBSOLETE_"
  "footer_padding\030\n \001(\002\022\034\n\024OBSOLETE_paper_w"
  "idth\030\013 \001(\002\022\035\n\025OBSOLETE_paper_height\030\014 \001("
  "\002\022\037\n\027OBSOLETE_landscape_mode\030\r \001(\010\0221\n\031OB"
  "SOLETE_master_drawables\030\016 \003(\0132\016.TSP.Refe"
  "rence\022\036\n\026OBSOLETE_header_margin\030\017 \001(\002\022\036\n"
  "\026OBSOLETE_footer_margin\030\020 \001(\002\022&\n\036inherit"
  "_previous_header_footer\030\021 \001(\010\022(\n page_ma"
  "ster_first_page_different\030\022 \001(\010\022,\n$page_"
  "master_even_odd_pages_different\030\023 \001(\010\022\032\n"
  "\022section_start_kind\030\024 \001(\r\022 \n\030section_pag"
  "e_number_kind\030\025 \001(\r\022!\n\031section_page_numb"
  "er_start\030\026 \001(\r\022)\n\021first_page_master\030\027 \001("
  "\0132\016.TSP.Reference\022(\n\020even_page_master\030\030 "
  "\001(\0132\016.TSP.Reference\022\'\n\017odd_page_master\030\031"
  " \001(\0132\016.TSP.Reference\022\014\n\004name\030\032 \001(\t\0222\n*pa"
  "ge_master_first_page_hides_header_footer"
  "\030\034 \001(\010\"T\n\020AnchorPosArchive\022\"\n\nattachment"
  "\030\001 \001(\0132\016.TSP.Reference\022\034\n\010position\030\002 \001(\013"
  "2\n.TSP.Point\"\330\001\n\021TargetHintArchive\022 \n\014fr"
  "ame_origin\030\001 \001(\0132\n.TSP.Point\022\035\n\nframe_si"
  "ze\030\002 \001(\0132\t.TSP.Size\022\031\n\005range\030\003 \001(\0132\n.TSP"
  ".Range\022-\n%next_widow_pulls_down_from_cha"
  "r_index\030\004 \001(\005\022\"\n\016anchored_range\030\005 \001(\0132\n."
  "TSP.Range\022\024\n\014column_count\030\006 \001(\005\"\330\004\n\017Page"
  "HintArchive\022/\n\tpage_kind\030\001 \001(\0162\034.TP.Page"
  "HintArchive.PageKind\022+\n\014target_hints\030\002 \003"
  "(\0132\025.TP.TargetHintArchive\022.\n\032footnote_au"
  "to_number_range\030\003 \001(\0132\n.TSP.Range\022)\n\025foo"
  "tnote_layout_range\030\004 \001(\0132\n.TSP.Range\022(\n\020"
  "first_child_hint\030\006 \001(\0132\016.TSP.Reference\022\'"
  "\n\017last_child_hint\030\007 \001(\0132\016.TSP.Reference\022"
  "6\n\030anchored_attachments_map\030\010 \003(\0132\024.TP.A"
  "nchorPosArchive\0222\n\rtopic_numbers\030\t \001(\0132\033"
  ".TP.TopicNumberHintsArchive\022\026\n\016version_n"
  "umber\030\n \001(\r\022\023\n\013platform_id\030\013 \001(\r\"\237\001\n\010Pag"
  "eKind\022\021\n\rkPageKindNone\020\000\022\021\n\rkPageKindTex"
  "t\020\001\022\023\n\017kPageKindFiller\020\002\022\023\n\017kPageKindOrp"
  "han\020\003\022\024\n\020kPageKindEndnote\020\004\022\022\n\016kPageKind"
  "Dirty\020\005\022\031\n\025kTPPageKindPageLayout\020\006\"W\n\022Se"
  "ctionHintArchive\022\'\n\npage_hints\030\001 \003(\0132\023.T"
  "P.PageHintArchive\022\030\n\020start_page_index\030\002 "
  "\001(\r\"H\n\022TextboxHintArchive\022\031\n\005range\030\001 \002(\013"
  "2\n.TSP.Range\022\027\n\004size\030\002 \002(\0132\t.TSP.Size\"l\n"
  "\027TopicNumberEntryArchive\022\"\n\nlist_style\030\001"
  " \002(\0132\016.TSP.Reference\022\024\n\014topic_number\030\002 \003"
  "(\r\022\027\n\017character_index\030\003 \003(\r\"\206\001\n\027TopicNum"
  "berHintsArchive\022\021\n\tcharIndex\030\001 \001(\r\0226\n\021to"
  "pic_numbers_map\030\002 \003(\0132\033.TP.TopicNumberEn"
  "tryArchive\022 \n\030valid_through_char_index\030\003"
  " \001(\r\"\254\001\n\022LayoutStateArchive\022\025\n\rsection_i"
  "ndex\030\001 \001(\r\022\032\n\022section_page_index\030\002 \001(\r\022\033"
  "\n\023document_page_index\030\003 \001(\r\022\027\n\017last_page"
  "_count\030\004 \001(\r\022-\n\rsection_hints\030\005 \003(\0132\026.TP"
  ".SectionHintArchive\"\327\002\n\026CanvasSelectionA"
  "rchive\022!\n\004type\030\001 \002(\0162\023.TSWP.SelectionTyp"
  "e\022\031\n\005range\030\002 \002(\0132\n.TSP.Range\022>\n\030style_in"
  "sertion_behavior\030\003 \002(\0162\034.TSWP.StyleInser"
  "tionBehavior\022+\n\016caret_affinity\030\004 \002(\0162\023.T"
  "SWP.CaretAffinity\022\035\n\005infos\030\005 \003(\0132\016.TSP.R"
  "eference\022&\n\016excluded_infos\030\006 \003(\0132\016.TSP.R"
  "eference\022(\n\020additional_infos\030\007 \003(\0132\016.TSP"
  ".Reference\022!\n\tcontainer\030\010 \001(\0132\016.TSP.Refe"
  "rence\"\345\005\n\020ViewStateArchive\022\033\n\023OBSOLETE_v"
  "iew_scale\030\001 \001(\002\022\'\n\023visible_rect_origin\030\002"
  " \001(\0132\n.TSP.Point\022\032\n\022OBSOLETE_landscape\030\003"
  " \001(\010\022!\n\tselection\030\004 \001(\0132\016.TSP.Reference\022"
  "\'\n\017selection_model\030\005 \001(\0132\016.TSP.Reference"
  "\022#\n\033master_drawables_selectable\030\006 \001(\010\022$\n"
  "\021visible_rect_size\030\007 \001(\0132\t.TSP.Size\022*\n\016c"
  "hart_ui_state\030\010 \003(\0132\022.TSCH.ChartUIState\022"
  "\033\n\rruler_visible\030\t \001(\010:\004true\022%\n\026layout_b"
  "orders_visible\030\n \001(\010:\005false\022%\n\026word_coun"
  "t_hud_visible\030\013 \001(\010:\005false\022\034\n\016shows_comm"
  "ents\030\014 \001(\010:\004true\022#\n\024shows_page_navigator"
  "\030\r \001(\010:\005false\022E\n\017view_scale_mode\030\016 \001(\0162\021"
  ".TP.ViewScaleMode:\031ViewScaleMode_UserDef"
  "ined\022\030\n\nview_scale\030\017 \001(\002:\0041.25\022\'\n\023window"
  "_frame_origin\030\020 \001(\0132\n.TSP.Point\022$\n\021windo"
  "w_frame_size\030\021 \001(\0132\t.TSP.Size\0224\n,selecte"
  "d_inspector_switch_segment_identifier\030\022 "
  "\001(\t\022\030\n\020inspector_hidden\030\023 \001(\010\"Z\n\016UIState"
  "Archive\022$\n\014layout_state\030\001 \001(\0132\016.TSP.Refe"
  "rence\022\"\n\nview_state\030\002 \001(\0132\016.TSP.Referenc"
  "e*e\n\rViewScaleMode\022\035\n\031ViewScaleMode_User"
  "Defined\020\000\022\032\n\026ViewScaleMode_FitWidth\020\001\022\031\n"
  "\025ViewScaleMode_FirPage\020\002"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_TPArchives_2eproto_deps[7] = {
  &::descriptor_table_TSAArchives_2eproto,
  &::descriptor_table_TSCHArchives_2eproto,
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
  &::descriptor_table_TSWPArchives_2eproto,
};
static ::_pbi::once_flag descriptor_table_TPArchives_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TPArchives_2eproto = {
    false, false, 6984, descriptor_table_protodef_TPArchives_2eproto,
    "TPArchives.proto",
    &descriptor_table_TPArchives_2eproto_once, descriptor_table_TPArchives_2eproto_deps, 7, 21,
    schemas, file_default_instances, TableStruct_TPArchives_2eproto::offsets,
    file_level_metadata_TPArchives_2eproto, file_level_enum_descriptors_TPArchives_2eproto,
    file_level_service_descriptors_TPArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TPArchives_2eproto_getter() {
  return &descriptor_table_TPArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TPArchives_2eproto(&descriptor_table_TPArchives_2eproto);
namespace TP {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SettingsArchive_FootnoteKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TPArchives_2eproto);
  return file_level_enum_descriptors_TPArchives_2eproto[0];
}
bool SettingsArchive_FootnoteKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SettingsArchive_FootnoteKind SettingsArchive::kFootnoteKindFootnotes;
constexpr SettingsArchive_FootnoteKind SettingsArchive::kFootnoteKindDocumentEndnotes;
constexpr SettingsArchive_FootnoteKind SettingsArchive::kFootnoteKindSectionEndnotes;
constexpr SettingsArchive_FootnoteKind SettingsArchive::FootnoteKind_MIN;
constexpr SettingsArchive_FootnoteKind SettingsArchive::FootnoteKind_MAX;
constexpr int SettingsArchive::FootnoteKind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SettingsArchive_FootnoteFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TPArchives_2eproto);
  return file_level_enum_descriptors_TPArchives_2eproto[1];
}
bool SettingsArchive_FootnoteFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SettingsArchive_FootnoteFormat SettingsArchive::kFootnoteFormatNumeric;
constexpr SettingsArchive_FootnoteFormat SettingsArchive::kFootnoteFormatRoman;
constexpr SettingsArchive_FootnoteFormat SettingsArchive::kFootnoteFormatSymbolic;
constexpr SettingsArchive_FootnoteFormat SettingsArchive::kFootnoteFormatJapaneseNumeric;
constexpr SettingsArchive_FootnoteFormat SettingsArchive::kFootnoteFormatJapaneseIdeographic;
constexpr SettingsArchive_FootnoteFormat SettingsArchive::FootnoteFormat_MIN;
constexpr SettingsArchive_FootnoteFormat SettingsArchive::FootnoteFormat_MAX;
constexpr int SettingsArchive::FootnoteFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SettingsArchive_FootnoteNumbering_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TPArchives_2eproto);
  return file_level_enum_descriptors_TPArchives_2eproto[2];
}
bool SettingsArchive_FootnoteNumbering_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SettingsArchive_FootnoteNumbering SettingsArchive::kFootnoteNumberingContinuous;
constexpr SettingsArchive_FootnoteNumbering SettingsArchive::kFootnoteNumberingRestartEachPage;
constexpr SettingsArchive_FootnoteNumbering SettingsArchive::kFootnoteNumberingRestartEachSection;
constexpr SettingsArchive_FootnoteNumbering SettingsArchive::FootnoteNumbering_MIN;
constexpr SettingsArchive_FootnoteNumbering SettingsArchive::FootnoteNumbering_MAX;
constexpr int SettingsArchive::FootnoteNumbering_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PageHintArchive_PageKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TPArchives_2eproto);
  return file_level_enum_descriptors_TPArchives_2eproto[3];
}
bool PageHintArchive_PageKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PageHintArchive_PageKind PageHintArchive::kPageKindNone;
constexpr PageHintArchive_PageKind PageHintArchive::kPageKindText;
constexpr PageHintArchive_PageKind PageHintArchive::kPageKindFiller;
constexpr PageHintArchive_PageKind PageHintArchive::kPageKindOrphan;
constexpr PageHintArchive_PageKind PageHintArchive::kPageKindEndnote;
constexpr PageHintArchive_PageKind PageHintArchive::kPageKindDirty;
constexpr PageHintArchive_PageKind PageHintArchive::kTPPageKindPageLayout;
constexpr PageHintArchive_PageKind PageHintArchive::PageKind_MIN;
constexpr PageHintArchive_PageKind PageHintArchive::PageKind_MAX;
constexpr int PageHintArchive::PageKind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ViewScaleMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TPArchives_2eproto);
  return file_level_enum_descriptors_TPArchives_2eproto[4];
}
bool ViewScaleMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class DocumentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentArchive>()._impl_._has_bits_);
  static const ::TSA::DocumentArchive& super(const DocumentArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSP::Reference& stylesheet(const DocumentArchive* msg);
  static void set_has_stylesheet(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& floating_drawables(const DocumentArchive* msg);
  static void set_has_floating_drawables(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& body_storage(const DocumentArchive* msg);
  static void set_has_body_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& section(const DocumentArchive* msg);
  static void set_has_section(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& theme(const DocumentArchive* msg);
  static void set_has_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Reference& settings(const DocumentArchive* msg);
  static void set_has_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Reference& deprecated_layout_state(const DocumentArchive* msg);
  static void set_has_deprecated_layout_state(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::Reference& deprecated_view_state(const DocumentArchive* msg);
  static void set_has_deprecated_view_state(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Reference& drawables_zorder(const DocumentArchive* msg);
  static void set_has_drawables_zorder(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_uses_single_header_footer(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_page_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_page_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_left_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_right_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_top_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_bottom_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_header_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_footer_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_page_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_layout_body_vertically(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_change_tracking_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::TSP::Reference& tables_custom_format_list(const DocumentArchive* msg);
  static void set_has_tables_custom_format_list(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_printer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_paper_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_change_tracking_paused(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000400) ^ 0x00000400) != 0;
  }
};

const ::TSA::DocumentArchive&
DocumentArchive::_Internal::super(const DocumentArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::stylesheet(const DocumentArchive* msg) {
  return *msg->_impl_.stylesheet_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::floating_drawables(const DocumentArchive* msg) {
  return *msg->_impl_.floating_drawables_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::body_storage(const DocumentArchive* msg) {
  return *msg->_impl_.body_storage_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::section(const DocumentArchive* msg) {
  return *msg->_impl_.section_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::theme(const DocumentArchive* msg) {
  return *msg->_impl_.theme_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::settings(const DocumentArchive* msg) {
  return *msg->_impl_.settings_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::deprecated_layout_state(const DocumentArchive* msg) {
  return *msg->_impl_.deprecated_layout_state_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::deprecated_view_state(const DocumentArchive* msg) {
  return *msg->_impl_.deprecated_view_state_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::drawables_zorder(const DocumentArchive* msg) {
  return *msg->_impl_.drawables_zorder_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::tables_custom_format_list(const DocumentArchive* msg) {
  return *msg->_impl_.tables_custom_format_list_;
}
void DocumentArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void DocumentArchive::clear_stylesheet() {
  if (_impl_.stylesheet_ != nullptr) _impl_.stylesheet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void DocumentArchive::clear_floating_drawables() {
  if (_impl_.floating_drawables_ != nullptr) _impl_.floating_drawables_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void DocumentArchive::clear_body_storage() {
  if (_impl_.body_storage_ != nullptr) _impl_.body_storage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void DocumentArchive::clear_section() {
  if (_impl_.section_ != nullptr) _impl_.section_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void DocumentArchive::clear_theme() {
  if (_impl_.theme_ != nullptr) _impl_.theme_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void DocumentArchive::clear_settings() {
  if (_impl_.settings_ != nullptr) _impl_.settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void DocumentArchive::clear_deprecated_layout_state() {
  if (_impl_.deprecated_layout_state_ != nullptr) _impl_.deprecated_layout_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void DocumentArchive::clear_deprecated_view_state() {
  if (_impl_.deprecated_view_state_ != nullptr) _impl_.deprecated_view_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void DocumentArchive::clear_citation_records() {
  _impl_.citation_records_.Clear();
}
void DocumentArchive::clear_toc_styles() {
  _impl_.toc_styles_.Clear();
}
void DocumentArchive::clear_change_sessions() {
  _impl_.change_sessions_.Clear();
}
void DocumentArchive::clear_drawables_zorder() {
  if (_impl_.drawables_zorder_ != nullptr) _impl_.drawables_zorder_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void DocumentArchive::clear_tables_custom_format_list() {
  if (_impl_.tables_custom_format_list_ != nullptr) _impl_.tables_custom_format_list_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
DocumentArchive::DocumentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TP.DocumentArchive)
}
DocumentArchive::DocumentArchive(const DocumentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DocumentArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.citation_records_){from._impl_.citation_records_}
    , decltype(_impl_.toc_styles_){from._impl_.toc_styles_}
    , decltype(_impl_.change_sessions_){from._impl_.change_sessions_}
    , decltype(_impl_.printer_id_){}
    , decltype(_impl_.paper_id_){}
    , decltype(_impl_.stylesheet_){nullptr}
    , decltype(_impl_.floating_drawables_){nullptr}
    , decltype(_impl_.body_storage_){nullptr}
    , decltype(_impl_.section_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.settings_){nullptr}
    , decltype(_impl_.deprecated_layout_state_){nullptr}
    , decltype(_impl_.deprecated_view_state_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.drawables_zorder_){nullptr}
    , decltype(_impl_.tables_custom_format_list_){nullptr}
    , decltype(_impl_.page_width_){}
    , decltype(_impl_.page_height_){}
    , decltype(_impl_.left_margin_){}
    , decltype(_impl_.right_margin_){}
    , decltype(_impl_.top_margin_){}
    , decltype(_impl_.bottom_margin_){}
    , decltype(_impl_.header_margin_){}
    , decltype(_impl_.uses_single_header_footer_){}
    , decltype(_impl_.layout_body_vertically_){}
    , decltype(_impl_.change_tracking_enabled_){}
    , decltype(_impl_.change_tracking_paused_){}
    , decltype(_impl_.footer_margin_){}
    , decltype(_impl_.page_scale_){}
    , decltype(_impl_.orientation_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.printer_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.printer_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_printer_id()) {
    _this->_impl_.printer_id_.Set(from._internal_printer_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.paper_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paper_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_paper_id()) {
    _this->_impl_.paper_id_.Set(from._internal_paper_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stylesheet()) {
    _this->_impl_.stylesheet_ = new ::TSP::Reference(*from._impl_.stylesheet_);
  }
  if (from._internal_has_floating_drawables()) {
    _this->_impl_.floating_drawables_ = new ::TSP::Reference(*from._impl_.floating_drawables_);
  }
  if (from._internal_has_body_storage()) {
    _this->_impl_.body_storage_ = new ::TSP::Reference(*from._impl_.body_storage_);
  }
  if (from._internal_has_section()) {
    _this->_impl_.section_ = new ::TSP::Reference(*from._impl_.section_);
  }
  if (from._internal_has_theme()) {
    _this->_impl_.theme_ = new ::TSP::Reference(*from._impl_.theme_);
  }
  if (from._internal_has_settings()) {
    _this->_impl_.settings_ = new ::TSP::Reference(*from._impl_.settings_);
  }
  if (from._internal_has_deprecated_layout_state()) {
    _this->_impl_.deprecated_layout_state_ = new ::TSP::Reference(*from._impl_.deprecated_layout_state_);
  }
  if (from._internal_has_deprecated_view_state()) {
    _this->_impl_.deprecated_view_state_ = new ::TSP::Reference(*from._impl_.deprecated_view_state_);
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSA::DocumentArchive(*from._impl_.super_);
  }
  if (from._internal_has_drawables_zorder()) {
    _this->_impl_.drawables_zorder_ = new ::TSP::Reference(*from._impl_.drawables_zorder_);
  }
  if (from._internal_has_tables_custom_format_list()) {
    _this->_impl_.tables_custom_format_list_ = new ::TSP::Reference(*from._impl_.tables_custom_format_list_);
  }
  ::memcpy(&_impl_.page_width_, &from._impl_.page_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.orientation_) -
    reinterpret_cast<char*>(&_impl_.page_width_)) + sizeof(_impl_.orientation_));
  // @@protoc_insertion_point(copy_constructor:TP.DocumentArchive)
}

inline void DocumentArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.citation_records_){arena}
    , decltype(_impl_.toc_styles_){arena}
    , decltype(_impl_.change_sessions_){arena}
    , decltype(_impl_.printer_id_){}
    , decltype(_impl_.paper_id_){}
    , decltype(_impl_.stylesheet_){nullptr}
    , decltype(_impl_.floating_drawables_){nullptr}
    , decltype(_impl_.body_storage_){nullptr}
    , decltype(_impl_.section_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.settings_){nullptr}
    , decltype(_impl_.deprecated_layout_state_){nullptr}
    , decltype(_impl_.deprecated_view_state_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.drawables_zorder_){nullptr}
    , decltype(_impl_.tables_custom_format_list_){nullptr}
    , decltype(_impl_.page_width_){0}
    , decltype(_impl_.page_height_){0}
    , decltype(_impl_.left_margin_){0}
    , decltype(_impl_.right_margin_){0}
    , decltype(_impl_.top_margin_){0}
    , decltype(_impl_.bottom_margin_){0}
    , decltype(_impl_.header_margin_){0}
    , decltype(_impl_.uses_single_header_footer_){false}
    , decltype(_impl_.layout_body_vertically_){false}
    , decltype(_impl_.change_tracking_enabled_){false}
    , decltype(_impl_.change_tracking_paused_){false}
    , decltype(_impl_.footer_margin_){0}
    , decltype(_impl_.page_scale_){0}
    , decltype(_impl_.orientation_){0u}
  };
  _impl_.printer_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.printer_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.paper_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paper_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DocumentArchive::~DocumentArchive() {
  // @@protoc_insertion_point(destructor:TP.DocumentArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DocumentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.citation_records_.~RepeatedPtrField();
  _impl_.toc_styles_.~RepeatedPtrField();
  _impl_.change_sessions_.~RepeatedPtrField();
  _impl_.printer_id_.Destroy();
  _impl_.paper_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stylesheet_;
  if (this != internal_default_instance()) delete _impl_.floating_drawables_;
  if (this != internal_default_instance()) delete _impl_.body_storage_;
  if (this != internal_default_instance()) delete _impl_.section_;
  if (this != internal_default_instance()) delete _impl_.theme_;
  if (this != internal_default_instance()) delete _impl_.settings_;
  if (this != internal_default_instance()) delete _impl_.deprecated_layout_state_;
  if (this != internal_default_instance()) delete _impl_.deprecated_view_state_;
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.drawables_zorder_;
  if (this != internal_default_instance()) delete _impl_.tables_custom_format_list_;
}

void DocumentArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DocumentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.DocumentArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.citation_records_.Clear();
  _impl_.toc_styles_.Clear();
  _impl_.change_sessions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.printer_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.paper_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.stylesheet_ != nullptr);
      _impl_.stylesheet_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.floating_drawables_ != nullptr);
      _impl_.floating_drawables_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.body_storage_ != nullptr);
      _impl_.body_storage_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.section_ != nullptr);
      _impl_.section_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.theme_ != nullptr);
      _impl_.theme_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.settings_ != nullptr);
      _impl_.settings_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.deprecated_layout_state_ != nullptr);
      _impl_.deprecated_layout_state_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.deprecated_view_state_ != nullptr);
      _impl_.deprecated_view_state_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.drawables_zorder_ != nullptr);
      _impl_.drawables_zorder_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.tables_custom_format_list_ != nullptr);
      _impl_.tables_custom_format_list_->Clear();
    }
  }
  if (cached_has_bits & 0x0000e000u) {
    ::memset(&_impl_.page_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.left_margin_) -
        reinterpret_cast<char*>(&_impl_.page_width_)) + sizeof(_impl_.left_margin_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.right_margin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.change_tracking_paused_) -
        reinterpret_cast<char*>(&_impl_.right_margin_)) + sizeof(_impl_.change_tracking_paused_));
  }
  if (cached_has_bits & 0x07000000u) {
    ::memset(&_impl_.footer_margin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.orientation_) -
        reinterpret_cast<char*>(&_impl_.footer_margin_)) + sizeof(_impl_.orientation_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference stylesheet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stylesheet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference floating_drawables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_floating_drawables(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference body_storage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_body_storage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference section = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_section(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference theme = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference settings = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference deprecated_layout_state = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_layout_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference deprecated_view_state = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_view_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference citation_records = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_citation_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference toc_styles = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_toc_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .TSA.DocumentArchive super = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference change_sessions = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_change_sessions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference drawables_zorder = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_drawables_zorder(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool uses_single_header_footer = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_uses_single_header_footer(&has_bits);
          _impl_.uses_single_header_footer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float page_width = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 245)) {
          _Internal::set_has_page_width(&has_bits);
          _impl_.page_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float page_height = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 253)) {
          _Internal::set_has_page_height(&has_bits);
          _impl_.page_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float left_margin = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 5)) {
          _Internal::set_has_left_margin(&has_bits);
          _impl_.left_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float right_margin = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_right_margin(&has_bits);
          _impl_.right_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float top_margin = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_top_margin(&has_bits);
          _impl_.top_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float bottom_margin = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_bottom_margin(&has_bits);
          _impl_.bottom_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float header_margin = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_header_margin(&has_bits);
          _impl_.header_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float footer_margin = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_footer_margin(&has_bits);
          _impl_.footer_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float page_scale = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_page_scale(&has_bits);
          _impl_.page_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool layout_body_vertically = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_layout_body_vertically(&has_bits);
          _impl_.layout_body_vertically_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool change_tracking_enabled = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_change_tracking_enabled(&has_bits);
          _impl_.change_tracking_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference tables_custom_format_list = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tables_custom_format_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 orientation = 42 [default = 0];
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_orientation(&has_bits);
          _impl_.orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string printer_id = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_printer_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TP.DocumentArchive.printer_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string paper_id = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_paper_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TP.DocumentArchive.paper_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool change_tracking_paused = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_change_tracking_paused(&has_bits);
          _impl_.change_tracking_paused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DocumentArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.DocumentArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference stylesheet = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::stylesheet(this),
        _Internal::stylesheet(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference floating_drawables = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::floating_drawables(this),
        _Internal::floating_drawables(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference body_storage = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::body_storage(this),
        _Internal::body_storage(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference section = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::section(this),
        _Internal::section(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference theme = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::theme(this),
        _Internal::theme(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference settings = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::settings(this),
        _Internal::settings(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference deprecated_layout_state = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::deprecated_layout_state(this),
        _Internal::deprecated_layout_state(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference deprecated_view_state = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::deprecated_view_state(this),
        _Internal::deprecated_view_state(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference citation_records = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_citation_records_size()); i < n; i++) {
    const auto& repfield = this->_internal_citation_records(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference toc_styles = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_toc_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_toc_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .TSA.DocumentArchive super = 15;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference change_sessions = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_change_sessions_size()); i < n; i++) {
    const auto& repfield = this->_internal_change_sessions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference drawables_zorder = 20;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::drawables_zorder(this),
        _Internal::drawables_zorder(this).GetCachedSize(), target, stream);
  }

  // optional bool uses_single_header_footer = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_uses_single_header_footer(), target);
  }

  // optional float page_width = 30;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(30, this->_internal_page_width(), target);
  }

  // optional float page_height = 31;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(31, this->_internal_page_height(), target);
  }

  // optional float left_margin = 32;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(32, this->_internal_left_margin(), target);
  }

  // optional float right_margin = 33;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(33, this->_internal_right_margin(), target);
  }

  // optional float top_margin = 34;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(34, this->_internal_top_margin(), target);
  }

  // optional float bottom_margin = 35;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(35, this->_internal_bottom_margin(), target);
  }

  // optional float header_margin = 36;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(36, this->_internal_header_margin(), target);
  }

  // optional float footer_margin = 37;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(37, this->_internal_footer_margin(), target);
  }

  // optional float page_scale = 38;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(38, this->_internal_page_scale(), target);
  }

  // optional bool layout_body_vertically = 39;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(39, this->_internal_layout_body_vertically(), target);
  }

  // optional bool change_tracking_enabled = 40;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(40, this->_internal_change_tracking_enabled(), target);
  }

  // optional .TSP.Reference tables_custom_format_list = 41;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, _Internal::tables_custom_format_list(this),
        _Internal::tables_custom_format_list(this).GetCachedSize(), target, stream);
  }

  // optional uint32 orientation = 42 [default = 0];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(42, this->_internal_orientation(), target);
  }

  // optional string printer_id = 43;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_printer_id().data(), static_cast<int>(this->_internal_printer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.DocumentArchive.printer_id");
    target = stream->WriteStringMaybeAliased(
        43, this->_internal_printer_id(), target);
  }

  // optional string paper_id = 44;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_paper_id().data(), static_cast<int>(this->_internal_paper_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.DocumentArchive.paper_id");
    target = stream->WriteStringMaybeAliased(
        44, this->_internal_paper_id(), target);
  }

  // optional bool change_tracking_paused = 45;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(45, this->_internal_change_tracking_paused(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.DocumentArchive)
  return target;
}

size_t DocumentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.DocumentArchive)
  size_t total_size = 0;

  // required .TSA.DocumentArchive super = 15;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference citation_records = 13;
  total_size += 1UL * this->_internal_citation_records_size();
  for (const auto& msg : this->_impl_.citation_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference toc_styles = 14;
  total_size += 1UL * this->_internal_toc_styles_size();
  for (const auto& msg : this->_impl_.toc_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference change_sessions = 16;
  total_size += 2UL * this->_internal_change_sessions_size();
  for (const auto& msg : this->_impl_.change_sessions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string printer_id = 43;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_printer_id());
    }

    // optional string paper_id = 44;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_paper_id());
    }

    // optional .TSP.Reference stylesheet = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stylesheet_);
    }

    // optional .TSP.Reference floating_drawables = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.floating_drawables_);
    }

    // optional .TSP.Reference body_storage = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.body_storage_);
    }

    // optional .TSP.Reference section = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.section_);
    }

    // optional .TSP.Reference theme = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.theme_);
    }

    // optional .TSP.Reference settings = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.settings_);
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .TSP.Reference deprecated_layout_state = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deprecated_layout_state_);
    }

    // optional .TSP.Reference deprecated_view_state = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deprecated_view_state_);
    }

  }
  if (cached_has_bits & 0x0000f800u) {
    // optional .TSP.Reference drawables_zorder = 20;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.drawables_zorder_);
    }

    // optional .TSP.Reference tables_custom_format_list = 41;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tables_custom_format_list_);
    }

    // optional float page_width = 30;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float page_height = 31;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float left_margin = 32;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float right_margin = 33;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float top_margin = 34;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float bottom_margin = 35;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float header_margin = 36;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional bool uses_single_header_footer = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool layout_body_vertically = 39;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool change_tracking_enabled = 40;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool change_tracking_paused = 45;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x07000000u) {
    // optional float footer_margin = 37;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional float page_scale = 38;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 4;
    }

    // optional uint32 orientation = 42 [default = 0];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_orientation());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DocumentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentArchive::GetClassData() const { return &_class_data_; }


void DocumentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DocumentArchive*>(&to_msg);
  auto& from = static_cast<const DocumentArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TP.DocumentArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.citation_records_.MergeFrom(from._impl_.citation_records_);
  _this->_impl_.toc_styles_.MergeFrom(from._impl_.toc_styles_);
  _this->_impl_.change_sessions_.MergeFrom(from._impl_.change_sessions_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_printer_id(from._internal_printer_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_paper_id(from._internal_paper_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_stylesheet()->::TSP::Reference::MergeFrom(
          from._internal_stylesheet());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_floating_drawables()->::TSP::Reference::MergeFrom(
          from._internal_floating_drawables());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_body_storage()->::TSP::Reference::MergeFrom(
          from._internal_body_storage());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_section()->::TSP::Reference::MergeFrom(
          from._internal_section());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_theme()->::TSP::Reference::MergeFrom(
          from._internal_theme());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_settings()->::TSP::Reference::MergeFrom(
          from._internal_settings());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_deprecated_layout_state()->::TSP::Reference::MergeFrom(
          from._internal_deprecated_layout_state());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_deprecated_view_state()->::TSP::Reference::MergeFrom(
          from._internal_deprecated_view_state());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_super()->::TSA::DocumentArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_drawables_zorder()->::TSP::Reference::MergeFrom(
          from._internal_drawables_zorder());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_tables_custom_format_list()->::TSP::Reference::MergeFrom(
          from._internal_tables_custom_format_list());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.page_width_ = from._impl_.page_width_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.page_height_ = from._impl_.page_height_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.left_margin_ = from._impl_.left_margin_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.right_margin_ = from._impl_.right_margin_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.top_margin_ = from._impl_.top_margin_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.bottom_margin_ = from._impl_.bottom_margin_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.header_margin_ = from._impl_.header_margin_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.uses_single_header_footer_ = from._impl_.uses_single_header_footer_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.layout_body_vertically_ = from._impl_.layout_body_vertically_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.change_tracking_enabled_ = from._impl_.change_tracking_enabled_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.change_tracking_paused_ = from._impl_.change_tracking_paused_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x07000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.footer_margin_ = from._impl_.footer_margin_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.page_scale_ = from._impl_.page_scale_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.orientation_ = from._impl_.orientation_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentArchive::CopyFrom(const DocumentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.DocumentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.citation_records_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.toc_styles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.change_sessions_))
    return false;
  if (_internal_has_stylesheet()) {
    if (!_impl_.stylesheet_->IsInitialized()) return false;
  }
  if (_internal_has_floating_drawables()) {
    if (!_impl_.floating_drawables_->IsInitialized()) return false;
  }
  if (_internal_has_body_storage()) {
    if (!_impl_.body_storage_->IsInitialized()) return false;
  }
  if (_internal_has_section()) {
    if (!_impl_.section_->IsInitialized()) return false;
  }
  if (_internal_has_theme()) {
    if (!_impl_.theme_->IsInitialized()) return false;
  }
  if (_internal_has_settings()) {
    if (!_impl_.settings_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_layout_state()) {
    if (!_impl_.deprecated_layout_state_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_view_state()) {
    if (!_impl_.deprecated_view_state_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_drawables_zorder()) {
    if (!_impl_.drawables_zorder_->IsInitialized()) return false;
  }
  if (_internal_has_tables_custom_format_list()) {
    if (!_impl_.tables_custom_format_list_->IsInitialized()) return false;
  }
  return true;
}

void DocumentArchive::InternalSwap(DocumentArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.citation_records_.InternalSwap(&other->_impl_.citation_records_);
  _impl_.toc_styles_.InternalSwap(&other->_impl_.toc_styles_);
  _impl_.change_sessions_.InternalSwap(&other->_impl_.change_sessions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.printer_id_, lhs_arena,
      &other->_impl_.printer_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.paper_id_, lhs_arena,
      &other->_impl_.paper_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentArchive, _impl_.orientation_)
      + sizeof(DocumentArchive::_impl_.orientation_)
      - PROTOBUF_FIELD_OFFSET(DocumentArchive, _impl_.stylesheet_)>(
          reinterpret_cast<char*>(&_impl_.stylesheet_),
          reinterpret_cast<char*>(&other->_impl_.stylesheet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[0]);
}

// ===================================================================

class ThemeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ThemeArchive>()._impl_._has_bits_);
  static const ::TSS::ThemeArchive& super(const ThemeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::ThemeArchive&
ThemeArchive::_Internal::super(const ThemeArchive* msg) {
  return *msg->_impl_.super_;
}
void ThemeArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ThemeArchive::ThemeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TP.ThemeArchive)
}
ThemeArchive::ThemeArchive(const ThemeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ThemeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSS::ThemeArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TP.ThemeArchive)
}

inline void ThemeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

ThemeArchive::~ThemeArchive() {
  // @@protoc_insertion_point(destructor:TP.ThemeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThemeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void ThemeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ThemeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.ThemeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThemeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.ThemeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThemeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.ThemeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSS.ThemeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.ThemeArchive)
  return target;
}

size_t ThemeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.ThemeArchive)
  size_t total_size = 0;

  // required .TSS.ThemeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThemeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ThemeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThemeArchive::GetClassData() const { return &_class_data_; }


void ThemeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ThemeArchive*>(&to_msg);
  auto& from = static_cast<const ThemeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TP.ThemeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSS::ThemeArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThemeArchive::CopyFrom(const ThemeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.ThemeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void ThemeArchive::InternalSwap(ThemeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThemeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[1]);
}

// ===================================================================

class SettingsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SettingsArchive>()._impl_._has_bits_);
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_headers(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_footers(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_preview(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_copy_movies(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_copy_assets(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_placeholder_authoring(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_links_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_hyphenation(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_use_ligatures(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_toc_links_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_show_ct_markup(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_show_ct_deletions(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_ct_bubbles_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_change_bars_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_format_changes_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_annotations_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_document_is_rtl(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_decimal_tab(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hyphenation_language(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_creation_locale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_last_locale(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_orig_template(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_creation_date(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_bibliography_format(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_footnote_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_footnote_format(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_footnote_numbering(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_footnote_gap(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_section_authoring(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

SettingsArchive::SettingsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TP.SettingsArchive)
}
SettingsArchive::SettingsArchive(const SettingsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SettingsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.decimal_tab_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.hyphenation_language_){}
    , decltype(_impl_.creation_locale_){}
    , decltype(_impl_.last_locale_){}
    , decltype(_impl_.orig_template_){}
    , decltype(_impl_.creation_date_){}
    , decltype(_impl_.bibliography_format_){}
    , decltype(_impl_.placeholder_authoring_){}
    , decltype(_impl_.hyphenation_){}
    , decltype(_impl_.use_ligatures_){}
    , decltype(_impl_.toc_links_enabled_){}
    , decltype(_impl_.ct_bubbles_visibility_){}
    , decltype(_impl_.document_is_rtl_){}
    , decltype(_impl_.section_authoring_){}
    , decltype(_impl_.footnote_kind_){}
    , decltype(_impl_.footnote_format_){}
    , decltype(_impl_.footnote_numbering_){}
    , decltype(_impl_.footnote_gap_){}
    , decltype(_impl_.show_ct_deletions_){}
    , decltype(_impl_.change_bars_visible_){}
    , decltype(_impl_.format_changes_visible_){}
    , decltype(_impl_.annotations_visible_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.headers_){}
    , decltype(_impl_.footers_){}
    , decltype(_impl_.preview_){}
    , decltype(_impl_.copy_movies_){}
    , decltype(_impl_.copy_assets_){}
    , decltype(_impl_.links_enabled_){}
    , decltype(_impl_.show_ct_markup_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.decimal_tab_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.decimal_tab_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_decimal_tab()) {
    _this->_impl_.decimal_tab_.Set(from._internal_decimal_tab(), 
      _this->GetArenaForAllocation());
  }
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language()) {
    _this->_impl_.language_.Set(from._internal_language(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hyphenation_language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hyphenation_language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hyphenation_language()) {
    _this->_impl_.hyphenation_language_.Set(from._internal_hyphenation_language(), 
      _this->GetArenaForAllocation());
  }
  _impl_.creation_locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creation_locale_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_creation_locale()) {
    _this->_impl_.creation_locale_.Set(from._internal_creation_locale(), 
      _this->GetArenaForAllocation());
  }
  _impl_.last_locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_locale_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_last_locale()) {
    _this->_impl_.last_locale_.Set(from._internal_last_locale(), 
      _this->GetArenaForAllocation());
  }
  _impl_.orig_template_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.orig_template_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_orig_template()) {
    _this->_impl_.orig_template_.Set(from._internal_orig_template(), 
      _this->GetArenaForAllocation());
  }
  _impl_.creation_date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creation_date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_creation_date()) {
    _this->_impl_.creation_date_.Set(from._internal_creation_date(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bibliography_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bibliography_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bibliography_format()) {
    _this->_impl_.bibliography_format_.Set(from._internal_bibliography_format(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.placeholder_authoring_, &from._impl_.placeholder_authoring_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.show_ct_markup_) -
    reinterpret_cast<char*>(&_impl_.placeholder_authoring_)) + sizeof(_impl_.show_ct_markup_));
  // @@protoc_insertion_point(copy_constructor:TP.SettingsArchive)
}

inline void SettingsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.decimal_tab_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.hyphenation_language_){}
    , decltype(_impl_.creation_locale_){}
    , decltype(_impl_.last_locale_){}
    , decltype(_impl_.orig_template_){}
    , decltype(_impl_.creation_date_){}
    , decltype(_impl_.bibliography_format_){}
    , decltype(_impl_.placeholder_authoring_){false}
    , decltype(_impl_.hyphenation_){false}
    , decltype(_impl_.use_ligatures_){false}
    , decltype(_impl_.toc_links_enabled_){false}
    , decltype(_impl_.ct_bubbles_visibility_){0}
    , decltype(_impl_.document_is_rtl_){false}
    , decltype(_impl_.section_authoring_){false}
    , decltype(_impl_.footnote_kind_){0}
    , decltype(_impl_.footnote_format_){0}
    , decltype(_impl_.footnote_numbering_){0}
    , decltype(_impl_.footnote_gap_){0}
    , decltype(_impl_.show_ct_deletions_){true}
    , decltype(_impl_.change_bars_visible_){true}
    , decltype(_impl_.format_changes_visible_){true}
    , decltype(_impl_.annotations_visible_){true}
    , decltype(_impl_.body_){true}
    , decltype(_impl_.headers_){true}
    , decltype(_impl_.footers_){true}
    , decltype(_impl_.preview_){true}
    , decltype(_impl_.copy_movies_){true}
    , decltype(_impl_.copy_assets_){true}
    , decltype(_impl_.links_enabled_){true}
    , decltype(_impl_.show_ct_markup_){true}
  };
  _impl_.decimal_tab_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.decimal_tab_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hyphenation_language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hyphenation_language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.creation_locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creation_locale_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.last_locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_locale_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.orig_template_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.orig_template_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.creation_date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creation_date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bibliography_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bibliography_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SettingsArchive::~SettingsArchive() {
  // @@protoc_insertion_point(destructor:TP.SettingsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SettingsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.decimal_tab_.Destroy();
  _impl_.language_.Destroy();
  _impl_.hyphenation_language_.Destroy();
  _impl_.creation_locale_.Destroy();
  _impl_.last_locale_.Destroy();
  _impl_.orig_template_.Destroy();
  _impl_.creation_date_.Destroy();
  _impl_.bibliography_format_.Destroy();
}

void SettingsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SettingsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.SettingsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.decimal_tab_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.language_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.hyphenation_language_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.creation_locale_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.last_locale_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.orig_template_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.creation_date_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.bibliography_format_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.placeholder_authoring_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.footnote_kind_) -
        reinterpret_cast<char*>(&_impl_.placeholder_authoring_)) + sizeof(_impl_.footnote_kind_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.footnote_format_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.footnote_gap_) -
        reinterpret_cast<char*>(&_impl_.footnote_format_)) + sizeof(_impl_.footnote_gap_));
    _impl_.show_ct_deletions_ = true;
    _impl_.change_bars_visible_ = true;
    _impl_.format_changes_visible_ = true;
    _impl_.annotations_visible_ = true;
    _impl_.body_ = true;
  }
  if (cached_has_bits & 0x7f000000u) {
    _impl_.headers_ = true;
    _impl_.footers_ = true;
    _impl_.preview_ = true;
    _impl_.copy_movies_ = true;
    _impl_.copy_assets_ = true;
    _impl_.links_enabled_ = true;
    _impl_.show_ct_markup_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SettingsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool body = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_body(&has_bits);
          _impl_.body_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool headers = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_headers(&has_bits);
          _impl_.headers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool footers = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_footers(&has_bits);
          _impl_.footers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool preview = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_preview(&has_bits);
          _impl_.preview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool copy_movies = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_copy_movies(&has_bits);
          _impl_.copy_movies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool copy_assets = 6 [default = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_copy_assets(&has_bits);
          _impl_.copy_assets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool placeholder_authoring = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_placeholder_authoring(&has_bits);
          _impl_.placeholder_authoring_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool links_enabled = 8 [default = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_links_enabled(&has_bits);
          _impl_.links_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hyphenation = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_hyphenation(&has_bits);
          _impl_.hyphenation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_ligatures = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_use_ligatures(&has_bits);
          _impl_.use_ligatures_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool toc_links_enabled = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_toc_links_enabled(&has_bits);
          _impl_.toc_links_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_ct_markup = 12 [default = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_show_ct_markup(&has_bits);
          _impl_.show_ct_markup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_ct_deletions = 13 [default = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_show_ct_deletions(&has_bits);
          _impl_.show_ct_deletions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ct_bubbles_visibility = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_ct_bubbles_visibility(&has_bits);
          _impl_.ct_bubbles_visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool change_bars_visible = 15 [default = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_change_bars_visible(&has_bits);
          _impl_.change_bars_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool format_changes_visible = 16 [default = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_format_changes_visible(&has_bits);
          _impl_.format_changes_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool annotations_visible = 17 [default = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_annotations_visible(&has_bits);
          _impl_.annotations_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool document_is_rtl = 18 [default = false];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_document_is_rtl(&has_bits);
          _impl_.document_is_rtl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string decimal_tab = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_decimal_tab();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TP.SettingsArchive.decimal_tab");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string language = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TP.SettingsArchive.language");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string hyphenation_language = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_hyphenation_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TP.SettingsArchive.hyphenation_language");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string creation_locale = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_creation_locale();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TP.SettingsArchive.creation_locale");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string last_locale = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_last_locale();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TP.SettingsArchive.last_locale");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string orig_template = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_orig_template();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TP.SettingsArchive.orig_template");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string creation_date = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_creation_date();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TP.SettingsArchive.creation_date");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string bibliography_format = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_bibliography_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TP.SettingsArchive.bibliography_format");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TP.SettingsArchive.FootnoteKind footnote_kind = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TP::SettingsArchive_FootnoteKind_IsValid(val))) {
            _internal_set_footnote_kind(static_cast<::TP::SettingsArchive_FootnoteKind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(30, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TP.SettingsArchive.FootnoteFormat footnote_format = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TP::SettingsArchive_FootnoteFormat_IsValid(val))) {
            _internal_set_footnote_format(static_cast<::TP::SettingsArchive_FootnoteFormat>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(31, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TP.SettingsArchive.FootnoteNumbering footnote_numbering = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TP::SettingsArchive_FootnoteNumbering_IsValid(val))) {
            _internal_set_footnote_numbering(static_cast<::TP::SettingsArchive_FootnoteNumbering>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(32, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 footnote_gap = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_footnote_gap(&has_bits);
          _impl_.footnote_gap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool section_authoring = 40 [default = false];
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_section_authoring(&has_bits);
          _impl_.section_authoring_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SettingsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.SettingsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool body = 1 [default = true];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_body(), target);
  }

  // optional bool headers = 2 [default = true];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_headers(), target);
  }

  // optional bool footers = 3 [default = true];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_footers(), target);
  }

  // optional bool preview = 4 [default = true];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_preview(), target);
  }

  // optional bool copy_movies = 5 [default = true];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_copy_movies(), target);
  }

  // optional bool copy_assets = 6 [default = true];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_copy_assets(), target);
  }

  // optional bool placeholder_authoring = 7 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_placeholder_authoring(), target);
  }

  // optional bool links_enabled = 8 [default = true];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_links_enabled(), target);
  }

  // optional bool hyphenation = 9 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_hyphenation(), target);
  }

  // optional bool use_ligatures = 10 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_use_ligatures(), target);
  }

  // optional bool toc_links_enabled = 11 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_toc_links_enabled(), target);
  }

  // optional bool show_ct_markup = 12 [default = true];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_show_ct_markup(), target);
  }

  // optional bool show_ct_deletions = 13 [default = true];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_show_ct_deletions(), target);
  }

  // optional int32 ct_bubbles_visibility = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_ct_bubbles_visibility(), target);
  }

  // optional bool change_bars_visible = 15 [default = true];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_change_bars_visible(), target);
  }

  // optional bool format_changes_visible = 16 [default = true];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_format_changes_visible(), target);
  }

  // optional bool annotations_visible = 17 [default = true];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_annotations_visible(), target);
  }

  // optional bool document_is_rtl = 18 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_document_is_rtl(), target);
  }

  // optional string decimal_tab = 20;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_decimal_tab().data(), static_cast<int>(this->_internal_decimal_tab().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.SettingsArchive.decimal_tab");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_decimal_tab(), target);
  }

  // optional string language = 21;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.SettingsArchive.language");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_language(), target);
  }

  // optional string hyphenation_language = 22;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hyphenation_language().data(), static_cast<int>(this->_internal_hyphenation_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.SettingsArchive.hyphenation_language");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_hyphenation_language(), target);
  }

  // optional string creation_locale = 23;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_creation_locale().data(), static_cast<int>(this->_internal_creation_locale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.SettingsArchive.creation_locale");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_creation_locale(), target);
  }

  // optional string last_locale = 24;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_last_locale().data(), static_cast<int>(this->_internal_last_locale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.SettingsArchive.last_locale");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_last_locale(), target);
  }

  // optional string orig_template = 25;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_orig_template().data(), static_cast<int>(this->_internal_orig_template().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.SettingsArchive.orig_template");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_orig_template(), target);
  }

  // optional string creation_date = 26;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_creation_date().data(), static_cast<int>(this->_internal_creation_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.SettingsArchive.creation_date");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_creation_date(), target);
  }

  // optional string bibliography_format = 27;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bibliography_format().data(), static_cast<int>(this->_internal_bibliography_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.SettingsArchive.bibliography_format");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_bibliography_format(), target);
  }

  // optional .TP.SettingsArchive.FootnoteKind footnote_kind = 30;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      30, this->_internal_footnote_kind(), target);
  }

  // optional .TP.SettingsArchive.FootnoteFormat footnote_format = 31;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      31, this->_internal_footnote_format(), target);
  }

  // optional .TP.SettingsArchive.FootnoteNumbering footnote_numbering = 32;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      32, this->_internal_footnote_numbering(), target);
  }

  // optional int32 footnote_gap = 33;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(33, this->_internal_footnote_gap(), target);
  }

  // optional bool section_authoring = 40 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(40, this->_internal_section_authoring(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.SettingsArchive)
  return target;
}

size_t SettingsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.SettingsArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string decimal_tab = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_decimal_tab());
    }

    // optional string language = 21;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

    // optional string hyphenation_language = 22;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hyphenation_language());
    }

    // optional string creation_locale = 23;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_creation_locale());
    }

    // optional string last_locale = 24;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_last_locale());
    }

    // optional string orig_template = 25;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_orig_template());
    }

    // optional string creation_date = 26;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_creation_date());
    }

    // optional string bibliography_format = 27;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bibliography_format());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool placeholder_authoring = 7 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool hyphenation = 9 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool use_ligatures = 10 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool toc_links_enabled = 11 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional int32 ct_bubbles_visibility = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ct_bubbles_visibility());
    }

    // optional bool document_is_rtl = 18 [default = false];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool section_authoring = 40 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional .TP.SettingsArchive.FootnoteKind footnote_kind = 30;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_footnote_kind());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TP.SettingsArchive.FootnoteFormat footnote_format = 31;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_footnote_format());
    }

    // optional .TP.SettingsArchive.FootnoteNumbering footnote_numbering = 32;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_footnote_numbering());
    }

    // optional int32 footnote_gap = 33;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_footnote_gap());
    }

    // optional bool show_ct_deletions = 13 [default = true];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional bool change_bars_visible = 15 [default = true];
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 1;
    }

    // optional bool format_changes_visible = 16 [default = true];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool annotations_visible = 17 [default = true];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool body = 1 [default = true];
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x7f000000u) {
    // optional bool headers = 2 [default = true];
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 + 1;
    }

    // optional bool footers = 3 [default = true];
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 + 1;
    }

    // optional bool preview = 4 [default = true];
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 + 1;
    }

    // optional bool copy_movies = 5 [default = true];
    if (cached_has_bits & 0x08000000u) {
      total_size += 1 + 1;
    }

    // optional bool copy_assets = 6 [default = true];
    if (cached_has_bits & 0x10000000u) {
      total_size += 1 + 1;
    }

    // optional bool links_enabled = 8 [default = true];
    if (cached_has_bits & 0x20000000u) {
      total_size += 1 + 1;
    }

    // optional bool show_ct_markup = 12 [default = true];
    if (cached_has_bits & 0x40000000u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SettingsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SettingsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SettingsArchive::GetClassData() const { return &_class_data_; }


void SettingsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SettingsArchive*>(&to_msg);
  auto& from = static_cast<const SettingsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TP.SettingsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_decimal_tab(from._internal_decimal_tab());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_hyphenation_language(from._internal_hyphenation_language());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_creation_locale(from._internal_creation_locale());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_last_locale(from._internal_last_locale());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_orig_template(from._internal_orig_template());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_creation_date(from._internal_creation_date());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_bibliography_format(from._internal_bibliography_format());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.placeholder_authoring_ = from._impl_.placeholder_authoring_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.hyphenation_ = from._impl_.hyphenation_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.use_ligatures_ = from._impl_.use_ligatures_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.toc_links_enabled_ = from._impl_.toc_links_enabled_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.ct_bubbles_visibility_ = from._impl_.ct_bubbles_visibility_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.document_is_rtl_ = from._impl_.document_is_rtl_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.section_authoring_ = from._impl_.section_authoring_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.footnote_kind_ = from._impl_.footnote_kind_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.footnote_format_ = from._impl_.footnote_format_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.footnote_numbering_ = from._impl_.footnote_numbering_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.footnote_gap_ = from._impl_.footnote_gap_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.show_ct_deletions_ = from._impl_.show_ct_deletions_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.change_bars_visible_ = from._impl_.change_bars_visible_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.format_changes_visible_ = from._impl_.format_changes_visible_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.annotations_visible_ = from._impl_.annotations_visible_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.body_ = from._impl_.body_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.headers_ = from._impl_.headers_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.footers_ = from._impl_.footers_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.preview_ = from._impl_.preview_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.copy_movies_ = from._impl_.copy_movies_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.copy_assets_ = from._impl_.copy_assets_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.links_enabled_ = from._impl_.links_enabled_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.show_ct_markup_ = from._impl_.show_ct_markup_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SettingsArchive::CopyFrom(const SettingsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.SettingsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingsArchive::IsInitialized() const {
  return true;
}

void SettingsArchive::InternalSwap(SettingsArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.decimal_tab_, lhs_arena,
      &other->_impl_.decimal_tab_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.language_, lhs_arena,
      &other->_impl_.language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hyphenation_language_, lhs_arena,
      &other->_impl_.hyphenation_language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.creation_locale_, lhs_arena,
      &other->_impl_.creation_locale_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.last_locale_, lhs_arena,
      &other->_impl_.last_locale_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.orig_template_, lhs_arena,
      &other->_impl_.orig_template_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.creation_date_, lhs_arena,
      &other->_impl_.creation_date_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bibliography_format_, lhs_arena,
      &other->_impl_.bibliography_format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SettingsArchive, _impl_.footnote_gap_)
      + sizeof(SettingsArchive::_impl_.footnote_gap_)
      - PROTOBUF_FIELD_OFFSET(SettingsArchive, _impl_.placeholder_authoring_)>(
          reinterpret_cast<char*>(&_impl_.placeholder_authoring_),
          reinterpret_cast<char*>(&other->_impl_.placeholder_authoring_));
  swap(_impl_.show_ct_deletions_, other->_impl_.show_ct_deletions_);
  swap(_impl_.change_bars_visible_, other->_impl_.change_bars_visible_);
  swap(_impl_.format_changes_visible_, other->_impl_.format_changes_visible_);
  swap(_impl_.annotations_visible_, other->_impl_.annotations_visible_);
  swap(_impl_.body_, other->_impl_.body_);
  swap(_impl_.headers_, other->_impl_.headers_);
  swap(_impl_.footers_, other->_impl_.footers_);
  swap(_impl_.preview_, other->_impl_.preview_);
  swap(_impl_.copy_movies_, other->_impl_.copy_movies_);
  swap(_impl_.copy_assets_, other->_impl_.copy_assets_);
  swap(_impl_.links_enabled_, other->_impl_.links_enabled_);
  swap(_impl_.show_ct_markup_, other->_impl_.show_ct_markup_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SettingsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[2]);
}

// ===================================================================

class PlaceholderArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PlaceholderArchive>()._impl_._has_bits_);
  static const ::TSWP::ShapeInfoArchive& super(const PlaceholderArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::ShapeInfoArchive&
PlaceholderArchive::_Internal::super(const PlaceholderArchive* msg) {
  return *msg->_impl_.super_;
}
void PlaceholderArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PlaceholderArchive::PlaceholderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TP.PlaceholderArchive)
}
PlaceholderArchive::PlaceholderArchive(const PlaceholderArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlaceholderArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSWP::ShapeInfoArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TP.PlaceholderArchive)
}

inline void PlaceholderArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

PlaceholderArchive::~PlaceholderArchive() {
  // @@protoc_insertion_point(destructor:TP.PlaceholderArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlaceholderArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void PlaceholderArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlaceholderArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.PlaceholderArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaceholderArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.ShapeInfoArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlaceholderArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.PlaceholderArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSWP.ShapeInfoArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.PlaceholderArchive)
  return target;
}

size_t PlaceholderArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.PlaceholderArchive)
  size_t total_size = 0;

  // required .TSWP.ShapeInfoArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlaceholderArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlaceholderArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlaceholderArchive::GetClassData() const { return &_class_data_; }


void PlaceholderArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlaceholderArchive*>(&to_msg);
  auto& from = static_cast<const PlaceholderArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TP.PlaceholderArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSWP::ShapeInfoArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlaceholderArchive::CopyFrom(const PlaceholderArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.PlaceholderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceholderArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void PlaceholderArchive::InternalSwap(PlaceholderArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceholderArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[3]);
}

// ===================================================================

class FloatingDrawablesArchive_DrawableEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<FloatingDrawablesArchive_DrawableEntry>()._impl_._has_bits_);
  static const ::TSP::Reference& drawable(const FloatingDrawablesArchive_DrawableEntry* msg);
  static void set_has_drawable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
FloatingDrawablesArchive_DrawableEntry::_Internal::drawable(const FloatingDrawablesArchive_DrawableEntry* msg) {
  return *msg->_impl_.drawable_;
}
void FloatingDrawablesArchive_DrawableEntry::clear_drawable() {
  if (_impl_.drawable_ != nullptr) _impl_.drawable_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FloatingDrawablesArchive_DrawableEntry::FloatingDrawablesArchive_DrawableEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TP.FloatingDrawablesArchive.DrawableEntry)
}
FloatingDrawablesArchive_DrawableEntry::FloatingDrawablesArchive_DrawableEntry(const FloatingDrawablesArchive_DrawableEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FloatingDrawablesArchive_DrawableEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawable_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_drawable()) {
    _this->_impl_.drawable_ = new ::TSP::Reference(*from._impl_.drawable_);
  }
  // @@protoc_insertion_point(copy_constructor:TP.FloatingDrawablesArchive.DrawableEntry)
}

inline void FloatingDrawablesArchive_DrawableEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawable_){nullptr}
  };
}

FloatingDrawablesArchive_DrawableEntry::~FloatingDrawablesArchive_DrawableEntry() {
  // @@protoc_insertion_point(destructor:TP.FloatingDrawablesArchive.DrawableEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FloatingDrawablesArchive_DrawableEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.drawable_;
}

void FloatingDrawablesArchive_DrawableEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FloatingDrawablesArchive_DrawableEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.FloatingDrawablesArchive.DrawableEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.drawable_ != nullptr);
    _impl_.drawable_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FloatingDrawablesArchive_DrawableEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference drawable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_drawable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FloatingDrawablesArchive_DrawableEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.FloatingDrawablesArchive.DrawableEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference drawable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::drawable(this),
        _Internal::drawable(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.FloatingDrawablesArchive.DrawableEntry)
  return target;
}

size_t FloatingDrawablesArchive_DrawableEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.FloatingDrawablesArchive.DrawableEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference drawable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drawable_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FloatingDrawablesArchive_DrawableEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FloatingDrawablesArchive_DrawableEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FloatingDrawablesArchive_DrawableEntry::GetClassData() const { return &_class_data_; }


void FloatingDrawablesArchive_DrawableEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FloatingDrawablesArchive_DrawableEntry*>(&to_msg);
  auto& from = static_cast<const FloatingDrawablesArchive_DrawableEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TP.FloatingDrawablesArchive.DrawableEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_drawable()) {
    _this->_internal_mutable_drawable()->::TSP::Reference::MergeFrom(
        from._internal_drawable());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FloatingDrawablesArchive_DrawableEntry::CopyFrom(const FloatingDrawablesArchive_DrawableEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.FloatingDrawablesArchive.DrawableEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatingDrawablesArchive_DrawableEntry::IsInitialized() const {
  if (_internal_has_drawable()) {
    if (!_impl_.drawable_->IsInitialized()) return false;
  }
  return true;
}

void FloatingDrawablesArchive_DrawableEntry::InternalSwap(FloatingDrawablesArchive_DrawableEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.drawable_, other->_impl_.drawable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatingDrawablesArchive_DrawableEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[4]);
}

// ===================================================================

class FloatingDrawablesArchive_PageGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<FloatingDrawablesArchive_PageGroup>()._impl_._has_bits_);
  static void set_has_page_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

FloatingDrawablesArchive_PageGroup::FloatingDrawablesArchive_PageGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TP.FloatingDrawablesArchive.PageGroup)
}
FloatingDrawablesArchive_PageGroup::FloatingDrawablesArchive_PageGroup(const FloatingDrawablesArchive_PageGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FloatingDrawablesArchive_PageGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.background_drawables_){from._impl_.background_drawables_}
    , decltype(_impl_.foreground_drawables_){from._impl_.foreground_drawables_}
    , decltype(_impl_.drawables_){from._impl_.drawables_}
    , decltype(_impl_.page_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.page_index_ = from._impl_.page_index_;
  // @@protoc_insertion_point(copy_constructor:TP.FloatingDrawablesArchive.PageGroup)
}

inline void FloatingDrawablesArchive_PageGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.background_drawables_){arena}
    , decltype(_impl_.foreground_drawables_){arena}
    , decltype(_impl_.drawables_){arena}
    , decltype(_impl_.page_index_){0u}
  };
}

FloatingDrawablesArchive_PageGroup::~FloatingDrawablesArchive_PageGroup() {
  // @@protoc_insertion_point(destructor:TP.FloatingDrawablesArchive.PageGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FloatingDrawablesArchive_PageGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.background_drawables_.~RepeatedPtrField();
  _impl_.foreground_drawables_.~RepeatedPtrField();
  _impl_.drawables_.~RepeatedPtrField();
}

void FloatingDrawablesArchive_PageGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FloatingDrawablesArchive_PageGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.FloatingDrawablesArchive.PageGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.background_drawables_.Clear();
  _impl_.foreground_drawables_.Clear();
  _impl_.drawables_.Clear();
  _impl_.page_index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FloatingDrawablesArchive_PageGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 page_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_page_index(&has_bits);
          _impl_.page_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TP.FloatingDrawablesArchive.DrawableEntry background_drawables = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_background_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TP.FloatingDrawablesArchive.DrawableEntry foreground_drawables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_foreground_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TP.FloatingDrawablesArchive.DrawableEntry drawables = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FloatingDrawablesArchive_PageGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.FloatingDrawablesArchive.PageGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 page_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page_index(), target);
  }

  // repeated .TP.FloatingDrawablesArchive.DrawableEntry background_drawables = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_background_drawables_size()); i < n; i++) {
    const auto& repfield = this->_internal_background_drawables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TP.FloatingDrawablesArchive.DrawableEntry foreground_drawables = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_foreground_drawables_size()); i < n; i++) {
    const auto& repfield = this->_internal_foreground_drawables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TP.FloatingDrawablesArchive.DrawableEntry drawables = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_drawables_size()); i < n; i++) {
    const auto& repfield = this->_internal_drawables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.FloatingDrawablesArchive.PageGroup)
  return target;
}

size_t FloatingDrawablesArchive_PageGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.FloatingDrawablesArchive.PageGroup)
  size_t total_size = 0;

  // required uint32 page_index = 1;
  if (_internal_has_page_index()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page_index());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TP.FloatingDrawablesArchive.DrawableEntry background_drawables = 2;
  total_size += 1UL * this->_internal_background_drawables_size();
  for (const auto& msg : this->_impl_.background_drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TP.FloatingDrawablesArchive.DrawableEntry foreground_drawables = 3;
  total_size += 1UL * this->_internal_foreground_drawables_size();
  for (const auto& msg : this->_impl_.foreground_drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TP.FloatingDrawablesArchive.DrawableEntry drawables = 4;
  total_size += 1UL * this->_internal_drawables_size();
  for (const auto& msg : this->_impl_.drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FloatingDrawablesArchive_PageGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FloatingDrawablesArchive_PageGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FloatingDrawablesArchive_PageGroup::GetClassData() const { return &_class_data_; }


void FloatingDrawablesArchive_PageGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FloatingDrawablesArchive_PageGroup*>(&to_msg);
  auto& from = static_cast<const FloatingDrawablesArchive_PageGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TP.FloatingDrawablesArchive.PageGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.background_drawables_.MergeFrom(from._impl_.background_drawables_);
  _this->_impl_.foreground_drawables_.MergeFrom(from._impl_.foreground_drawables_);
  _this->_impl_.drawables_.MergeFrom(from._impl_.drawables_);
  if (from._internal_has_page_index()) {
    _this->_internal_set_page_index(from._internal_page_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FloatingDrawablesArchive_PageGroup::CopyFrom(const FloatingDrawablesArchive_PageGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.FloatingDrawablesArchive.PageGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatingDrawablesArchive_PageGroup::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.background_drawables_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.foreground_drawables_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.drawables_))
    return false;
  return true;
}

void FloatingDrawablesArchive_PageGroup::InternalSwap(FloatingDrawablesArchive_PageGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.background_drawables_.InternalSwap(&other->_impl_.background_drawables_);
  _impl_.foreground_drawables_.InternalSwap(&other->_impl_.foreground_drawables_);
  _impl_.drawables_.InternalSwap(&other->_impl_.drawables_);
  swap(_impl_.page_index_, other->_impl_.page_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatingDrawablesArchive_PageGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[5]);
}

// ===================================================================

class FloatingDrawablesArchive::_Internal {
 public:
};

FloatingDrawablesArchive::FloatingDrawablesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TP.FloatingDrawablesArchive)
}
FloatingDrawablesArchive::FloatingDrawablesArchive(const FloatingDrawablesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FloatingDrawablesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.page_groups_){from._impl_.page_groups_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TP.FloatingDrawablesArchive)
}

inline void FloatingDrawablesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.page_groups_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FloatingDrawablesArchive::~FloatingDrawablesArchive() {
  // @@protoc_insertion_point(destructor:TP.FloatingDrawablesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FloatingDrawablesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.page_groups_.~RepeatedPtrField();
}

void FloatingDrawablesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FloatingDrawablesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.FloatingDrawablesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.page_groups_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FloatingDrawablesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TP.FloatingDrawablesArchive.PageGroup page_groups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_page_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FloatingDrawablesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.FloatingDrawablesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TP.FloatingDrawablesArchive.PageGroup page_groups = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_page_groups_size()); i < n; i++) {
    const auto& repfield = this->_internal_page_groups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.FloatingDrawablesArchive)
  return target;
}

size_t FloatingDrawablesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.FloatingDrawablesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TP.FloatingDrawablesArchive.PageGroup page_groups = 1;
  total_size += 1UL * this->_internal_page_groups_size();
  for (const auto& msg : this->_impl_.page_groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FloatingDrawablesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FloatingDrawablesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FloatingDrawablesArchive::GetClassData() const { return &_class_data_; }


void FloatingDrawablesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FloatingDrawablesArchive*>(&to_msg);
  auto& from = static_cast<const FloatingDrawablesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TP.FloatingDrawablesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.page_groups_.MergeFrom(from._impl_.page_groups_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FloatingDrawablesArchive::CopyFrom(const FloatingDrawablesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.FloatingDrawablesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatingDrawablesArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.page_groups_))
    return false;
  return true;
}

void FloatingDrawablesArchive::InternalSwap(FloatingDrawablesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.page_groups_.InternalSwap(&other->_impl_.page_groups_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatingDrawablesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[6]);
}

// ===================================================================

class DrawablesZOrderArchive::_Internal {
 public:
};

void DrawablesZOrderArchive::clear_drawables() {
  _impl_.drawables_.Clear();
}
DrawablesZOrderArchive::DrawablesZOrderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TP.DrawablesZOrderArchive)
}
DrawablesZOrderArchive::DrawablesZOrderArchive(const DrawablesZOrderArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DrawablesZOrderArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.drawables_){from._impl_.drawables_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TP.DrawablesZOrderArchive)
}

inline void DrawablesZOrderArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.drawables_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DrawablesZOrderArchive::~DrawablesZOrderArchive() {
  // @@protoc_insertion_point(destructor:TP.DrawablesZOrderArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DrawablesZOrderArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.drawables_.~RepeatedPtrField();
}

void DrawablesZOrderArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DrawablesZOrderArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.DrawablesZOrderArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.drawables_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawablesZOrderArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference drawables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DrawablesZOrderArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.DrawablesZOrderArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference drawables = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_drawables_size()); i < n; i++) {
    const auto& repfield = this->_internal_drawables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.DrawablesZOrderArchive)
  return target;
}

size_t DrawablesZOrderArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.DrawablesZOrderArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference drawables = 1;
  total_size += 1UL * this->_internal_drawables_size();
  for (const auto& msg : this->_impl_.drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DrawablesZOrderArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DrawablesZOrderArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DrawablesZOrderArchive::GetClassData() const { return &_class_data_; }


void DrawablesZOrderArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DrawablesZOrderArchive*>(&to_msg);
  auto& from = static_cast<const DrawablesZOrderArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TP.DrawablesZOrderArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.drawables_.MergeFrom(from._impl_.drawables_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DrawablesZOrderArchive::CopyFrom(const DrawablesZOrderArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.DrawablesZOrderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawablesZOrderArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.drawables_))
    return false;
  return true;
}

void DrawablesZOrderArchive::InternalSwap(DrawablesZOrderArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.drawables_.InternalSwap(&other->_impl_.drawables_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawablesZOrderArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[7]);
}

// ===================================================================

class PageMasterArchive::_Internal {
 public:
};

void PageMasterArchive::clear_headers() {
  _impl_.headers_.Clear();
}
void PageMasterArchive::clear_footers() {
  _impl_.footers_.Clear();
}
void PageMasterArchive::clear_master_drawables() {
  _impl_.master_drawables_.Clear();
}
PageMasterArchive::PageMasterArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TP.PageMasterArchive)
}
PageMasterArchive::PageMasterArchive(const PageMasterArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PageMasterArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.headers_){from._impl_.headers_}
    , decltype(_impl_.footers_){from._impl_.footers_}
    , decltype(_impl_.master_drawables_){from._impl_.master_drawables_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TP.PageMasterArchive)
}

inline void PageMasterArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.headers_){arena}
    , decltype(_impl_.footers_){arena}
    , decltype(_impl_.master_drawables_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PageMasterArchive::~PageMasterArchive() {
  // @@protoc_insertion_point(destructor:TP.PageMasterArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PageMasterArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.headers_.~RepeatedPtrField();
  _impl_.footers_.~RepeatedPtrField();
  _impl_.master_drawables_.~RepeatedPtrField();
}

void PageMasterArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PageMasterArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.PageMasterArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.headers_.Clear();
  _impl_.footers_.Clear();
  _impl_.master_drawables_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PageMasterArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference headers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference footers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_footers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference master_drawables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_master_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PageMasterArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.PageMasterArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference headers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_headers_size()); i < n; i++) {
    const auto& repfield = this->_internal_headers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference footers = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_footers_size()); i < n; i++) {
    const auto& repfield = this->_internal_footers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference master_drawables = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_master_drawables_size()); i < n; i++) {
    const auto& repfield = this->_internal_master_drawables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.PageMasterArchive)
  return target;
}

size_t PageMasterArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.PageMasterArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference headers = 1;
  total_size += 1UL * this->_internal_headers_size();
  for (const auto& msg : this->_impl_.headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference footers = 2;
  total_size += 1UL * this->_internal_footers_size();
  for (const auto& msg : this->_impl_.footers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference master_drawables = 3;
  total_size += 1UL * this->_internal_master_drawables_size();
  for (const auto& msg : this->_impl_.master_drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PageMasterArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PageMasterArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PageMasterArchive::GetClassData() const { return &_class_data_; }


void PageMasterArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PageMasterArchive*>(&to_msg);
  auto& from = static_cast<const PageMasterArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TP.PageMasterArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.headers_.MergeFrom(from._impl_.headers_);
  _this->_impl_.footers_.MergeFrom(from._impl_.footers_);
  _this->_impl_.master_drawables_.MergeFrom(from._impl_.master_drawables_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PageMasterArchive::CopyFrom(const PageMasterArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.PageMasterArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageMasterArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.headers_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.footers_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.master_drawables_))
    return false;
  return true;
}

void PageMasterArchive::InternalSwap(PageMasterArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.headers_.InternalSwap(&other->_impl_.headers_);
  _impl_.footers_.InternalSwap(&other->_impl_.footers_);
  _impl_.master_drawables_.InternalSwap(&other->_impl_.master_drawables_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PageMasterArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[8]);
}

// ===================================================================

class SectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SectionArchive>()._impl_._has_bits_);
  static void set_has_obsolete_shows_header(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_obsolete_shows_footer(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_obsolete_left_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_obsolete_right_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_obsolete_top_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_obsolete_bottom_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_obsolete_header_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_obsolete_footer_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_obsolete_paper_width(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_obsolete_paper_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_obsolete_landscape_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_obsolete_header_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_obsolete_footer_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_inherit_previous_header_footer(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_page_master_first_page_different(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_page_master_even_odd_pages_different(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_section_start_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_section_page_number_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_section_page_number_start(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::TSP::Reference& first_page_master(const SectionArchive* msg);
  static void set_has_first_page_master(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& even_page_master(const SectionArchive* msg);
  static void set_has_even_page_master(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& odd_page_master(const SectionArchive* msg);
  static void set_has_odd_page_master(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_page_master_first_page_hides_header_footer(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
};

const ::TSP::Reference&
SectionArchive::_Internal::first_page_master(const SectionArchive* msg) {
  return *msg->_impl_.first_page_master_;
}
const ::TSP::Reference&
SectionArchive::_Internal::even_page_master(const SectionArchive* msg) {
  return *msg->_impl_.even_page_master_;
}
const ::TSP::Reference&
SectionArchive::_Internal::odd_page_master(const SectionArchive* msg) {
  return *msg->_impl_.odd_page_master_;
}
void SectionArchive::clear_obsolete_headers() {
  _impl_.obsolete_headers_.Clear();
}
void SectionArchive::clear_obsolete_footers() {
  _impl_.obsolete_footers_.Clear();
}
void SectionArchive::clear_obsolete_master_drawables() {
  _impl_.obsolete_master_drawables_.Clear();
}
void SectionArchive::clear_first_page_master() {
  if (_impl_.first_page_master_ != nullptr) _impl_.first_page_master_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void SectionArchive::clear_even_page_master() {
  if (_impl_.even_page_master_ != nullptr) _impl_.even_page_master_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void SectionArchive::clear_odd_page_master() {
  if (_impl_.odd_page_master_ != nullptr) _impl_.odd_page_master_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
SectionArchive::SectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TP.SectionArchive)
}
SectionArchive::SectionArchive(const SectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SectionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obsolete_headers_){from._impl_.obsolete_headers_}
    , decltype(_impl_.obsolete_footers_){from._impl_.obsolete_footers_}
    , decltype(_impl_.obsolete_master_drawables_){from._impl_.obsolete_master_drawables_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.first_page_master_){nullptr}
    , decltype(_impl_.even_page_master_){nullptr}
    , decltype(_impl_.odd_page_master_){nullptr}
    , decltype(_impl_.obsolete_left_margin_){}
    , decltype(_impl_.obsolete_right_margin_){}
    , decltype(_impl_.obsolete_top_margin_){}
    , decltype(_impl_.obsolete_bottom_margin_){}
    , decltype(_impl_.obsolete_shows_header_){}
    , decltype(_impl_.obsolete_shows_footer_){}
    , decltype(_impl_.obsolete_landscape_mode_){}
    , decltype(_impl_.inherit_previous_header_footer_){}
    , decltype(_impl_.obsolete_header_padding_){}
    , decltype(_impl_.obsolete_footer_padding_){}
    , decltype(_impl_.obsolete_paper_width_){}
    , decltype(_impl_.obsolete_paper_height_){}
    , decltype(_impl_.obsolete_header_margin_){}
    , decltype(_impl_.obsolete_footer_margin_){}
    , decltype(_impl_.section_start_kind_){}
    , decltype(_impl_.section_page_number_kind_){}
    , decltype(_impl_.page_master_first_page_different_){}
    , decltype(_impl_.page_master_even_odd_pages_different_){}
    , decltype(_impl_.page_master_first_page_hides_header_footer_){}
    , decltype(_impl_.section_page_number_start_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_first_page_master()) {
    _this->_impl_.first_page_master_ = new ::TSP::Reference(*from._impl_.first_page_master_);
  }
  if (from._internal_has_even_page_master()) {
    _this->_impl_.even_page_master_ = new ::TSP::Reference(*from._impl_.even_page_master_);
  }
  if (from._internal_has_odd_page_master()) {
    _this->_impl_.odd_page_master_ = new ::TSP::Reference(*from._impl_.odd_page_master_);
  }
  ::memcpy(&_impl_.obsolete_left_margin_, &from._impl_.obsolete_left_margin_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.section_page_number_start_) -
    reinterpret_cast<char*>(&_impl_.obsolete_left_margin_)) + sizeof(_impl_.section_page_number_start_));
  // @@protoc_insertion_point(copy_constructor:TP.SectionArchive)
}

inline void SectionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obsolete_headers_){arena}
    , decltype(_impl_.obsolete_footers_){arena}
    , decltype(_impl_.obsolete_master_drawables_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.first_page_master_){nullptr}
    , decltype(_impl_.even_page_master_){nullptr}
    , decltype(_impl_.odd_page_master_){nullptr}
    , decltype(_impl_.obsolete_left_margin_){0}
    , decltype(_impl_.obsolete_right_margin_){0}
    , decltype(_impl_.obsolete_top_margin_){0}
    , decltype(_impl_.obsolete_bottom_margin_){0}
    , decltype(_impl_.obsolete_shows_header_){false}
    , decltype(_impl_.obsolete_shows_footer_){false}
    , decltype(_impl_.obsolete_landscape_mode_){false}
    , decltype(_impl_.inherit_previous_header_footer_){false}
    , decltype(_impl_.obsolete_header_padding_){0}
    , decltype(_impl_.obsolete_footer_padding_){0}
    , decltype(_impl_.obsolete_paper_width_){0}
    , decltype(_impl_.obsolete_paper_height_){0}
    , decltype(_impl_.obsolete_header_margin_){0}
    , decltype(_impl_.obsolete_footer_margin_){0}
    , decltype(_impl_.section_start_kind_){0u}
    , decltype(_impl_.section_page_number_kind_){0u}
    , decltype(_impl_.page_master_first_page_different_){false}
    , decltype(_impl_.page_master_even_odd_pages_different_){false}
    , decltype(_impl_.page_master_first_page_hides_header_footer_){false}
    , decltype(_impl_.section_page_number_start_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SectionArchive::~SectionArchive() {
  // @@protoc_insertion_point(destructor:TP.SectionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.obsolete_headers_.~RepeatedPtrField();
  _impl_.obsolete_footers_.~RepeatedPtrField();
  _impl_.obsolete_master_drawables_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.first_page_master_;
  if (this != internal_default_instance()) delete _impl_.even_page_master_;
  if (this != internal_default_instance()) delete _impl_.odd_page_master_;
}

void SectionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.SectionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.obsolete_headers_.Clear();
  _impl_.obsolete_footers_.Clear();
  _impl_.obsolete_master_drawables_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.first_page_master_ != nullptr);
      _impl_.first_page_master_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.even_page_master_ != nullptr);
      _impl_.even_page_master_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.odd_page_master_ != nullptr);
      _impl_.odd_page_master_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.obsolete_left_margin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.obsolete_bottom_margin_) -
        reinterpret_cast<char*>(&_impl_.obsolete_left_margin_)) + sizeof(_impl_.obsolete_bottom_margin_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.obsolete_shows_header_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.obsolete_paper_height_) -
        reinterpret_cast<char*>(&_impl_.obsolete_shows_header_)) + sizeof(_impl_.obsolete_paper_height_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.obsolete_header_margin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.section_page_number_start_) -
        reinterpret_cast<char*>(&_impl_.obsolete_header_margin_)) + sizeof(_impl_.section_page_number_start_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SectionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool OBSOLETE_shows_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_obsolete_shows_header(&has_bits);
          _impl_.obsolete_shows_header_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool OBSOLETE_shows_footer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_obsolete_shows_footer(&has_bits);
          _impl_.obsolete_shows_footer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference OBSOLETE_headers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obsolete_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference OBSOLETE_footers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obsolete_footers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional float OBSOLETE_left_margin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_obsolete_left_margin(&has_bits);
          _impl_.obsolete_left_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float OBSOLETE_right_margin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_obsolete_right_margin(&has_bits);
          _impl_.obsolete_right_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float OBSOLETE_top_margin = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_obsolete_top_margin(&has_bits);
          _impl_.obsolete_top_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float OBSOLETE_bottom_margin = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_obsolete_bottom_margin(&has_bits);
          _impl_.obsolete_bottom_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float OBSOLETE_header_padding = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_obsolete_header_padding(&has_bits);
          _impl_.obsolete_header_padding_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float OBSOLETE_footer_padding = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_obsolete_footer_padding(&has_bits);
          _impl_.obsolete_footer_padding_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float OBSOLETE_paper_width = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_obsolete_paper_width(&has_bits);
          _impl_.obsolete_paper_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float OBSOLETE_paper_height = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_obsolete_paper_height(&has_bits);
          _impl_.obsolete_paper_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool OBSOLETE_landscape_mode = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_obsolete_landscape_mode(&has_bits);
          _impl_.obsolete_landscape_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference OBSOLETE_master_drawables = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obsolete_master_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional float OBSOLETE_header_margin = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_obsolete_header_margin(&has_bits);
          _impl_.obsolete_header_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float OBSOLETE_footer_margin = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _Internal::set_has_obsolete_footer_margin(&has_bits);
          _impl_.obsolete_footer_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool inherit_previous_header_footer = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_inherit_previous_header_footer(&has_bits);
          _impl_.inherit_previous_header_footer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool page_master_first_page_different = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_page_master_first_page_different(&has_bits);
          _impl_.page_master_first_page_different_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool page_master_even_odd_pages_different = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_page_master_even_odd_pages_different(&has_bits);
          _impl_.page_master_even_odd_pages_different_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 section_start_kind = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_section_start_kind(&has_bits);
          _impl_.section_start_kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 section_page_number_kind = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_section_page_number_kind(&has_bits);
          _impl_.section_page_number_kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 section_page_number_start = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_section_page_number_start(&has_bits);
          _impl_.section_page_number_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference first_page_master = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_page_master(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference even_page_master = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_even_page_master(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference odd_page_master = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_odd_page_master(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TP.SectionArchive.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool page_master_first_page_hides_header_footer = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_page_master_first_page_hides_header_footer(&has_bits);
          _impl_.page_master_first_page_hides_header_footer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SectionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.SectionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool OBSOLETE_shows_header = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_obsolete_shows_header(), target);
  }

  // optional bool OBSOLETE_shows_footer = 2;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_obsolete_shows_footer(), target);
  }

  // repeated .TSP.Reference OBSOLETE_headers = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_obsolete_headers_size()); i < n; i++) {
    const auto& repfield = this->_internal_obsolete_headers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference OBSOLETE_footers = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_obsolete_footers_size()); i < n; i++) {
    const auto& repfield = this->_internal_obsolete_footers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional float OBSOLETE_left_margin = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_obsolete_left_margin(), target);
  }

  // optional float OBSOLETE_right_margin = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_obsolete_right_margin(), target);
  }

  // optional float OBSOLETE_top_margin = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_obsolete_top_margin(), target);
  }

  // optional float OBSOLETE_bottom_margin = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_obsolete_bottom_margin(), target);
  }

  // optional float OBSOLETE_header_padding = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_obsolete_header_padding(), target);
  }

  // optional float OBSOLETE_footer_padding = 10;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_obsolete_footer_padding(), target);
  }

  // optional float OBSOLETE_paper_width = 11;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_obsolete_paper_width(), target);
  }

  // optional float OBSOLETE_paper_height = 12;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_obsolete_paper_height(), target);
  }

  // optional bool OBSOLETE_landscape_mode = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_obsolete_landscape_mode(), target);
  }

  // repeated .TSP.Reference OBSOLETE_master_drawables = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_obsolete_master_drawables_size()); i < n; i++) {
    const auto& repfield = this->_internal_obsolete_master_drawables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional float OBSOLETE_header_margin = 15;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_obsolete_header_margin(), target);
  }

  // optional float OBSOLETE_footer_margin = 16;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_obsolete_footer_margin(), target);
  }

  // optional bool inherit_previous_header_footer = 17;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_inherit_previous_header_footer(), target);
  }

  // optional bool page_master_first_page_different = 18;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_page_master_first_page_different(), target);
  }

  // optional bool page_master_even_odd_pages_different = 19;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_page_master_even_odd_pages_different(), target);
  }

  // optional uint32 section_start_kind = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_section_start_kind(), target);
  }

  // optional uint32 section_page_number_kind = 21;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_section_page_number_kind(), target);
  }

  // optional uint32 section_page_number_start = 22;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_section_page_number_start(), target);
  }

  // optional .TSP.Reference first_page_master = 23;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::first_page_master(this),
        _Internal::first_page_master(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference even_page_master = 24;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::even_page_master(this),
        _Internal::even_page_master(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference odd_page_master = 25;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::odd_page_master(this),
        _Internal::odd_page_master(this).GetCachedSize(), target, stream);
  }

  // optional string name = 26;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.SectionArchive.name");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_name(), target);
  }

  // optional bool page_master_first_page_hides_header_footer = 28;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(28, this->_internal_page_master_first_page_hides_header_footer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.SectionArchive)
  return target;
}

size_t SectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.SectionArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference OBSOLETE_headers = 3;
  total_size += 1UL * this->_internal_obsolete_headers_size();
  for (const auto& msg : this->_impl_.obsolete_headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference OBSOLETE_footers = 4;
  total_size += 1UL * this->_internal_obsolete_footers_size();
  for (const auto& msg : this->_impl_.obsolete_footers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference OBSOLETE_master_drawables = 14;
  total_size += 1UL * this->_internal_obsolete_master_drawables_size();
  for (const auto& msg : this->_impl_.obsolete_master_drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 26;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .TSP.Reference first_page_master = 23;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.first_page_master_);
    }

    // optional .TSP.Reference even_page_master = 24;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.even_page_master_);
    }

    // optional .TSP.Reference odd_page_master = 25;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.odd_page_master_);
    }

    // optional float OBSOLETE_left_margin = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float OBSOLETE_right_margin = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float OBSOLETE_top_margin = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float OBSOLETE_bottom_margin = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool OBSOLETE_shows_header = 1;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool OBSOLETE_shows_footer = 2;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool OBSOLETE_landscape_mode = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool inherit_previous_header_footer = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional float OBSOLETE_header_padding = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float OBSOLETE_footer_padding = 10;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float OBSOLETE_paper_width = 11;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float OBSOLETE_paper_height = 12;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float OBSOLETE_header_margin = 15;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 4;
    }

    // optional float OBSOLETE_footer_margin = 16;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional uint32 section_start_kind = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_section_start_kind());
    }

    // optional uint32 section_page_number_kind = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_section_page_number_kind());
    }

    // optional bool page_master_first_page_different = 18;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool page_master_even_odd_pages_different = 19;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool page_master_first_page_hides_header_footer = 28;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional uint32 section_page_number_start = 22;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_section_page_number_start());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SectionArchive::GetClassData() const { return &_class_data_; }


void SectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SectionArchive*>(&to_msg);
  auto& from = static_cast<const SectionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TP.SectionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.obsolete_headers_.MergeFrom(from._impl_.obsolete_headers_);
  _this->_impl_.obsolete_footers_.MergeFrom(from._impl_.obsolete_footers_);
  _this->_impl_.obsolete_master_drawables_.MergeFrom(from._impl_.obsolete_master_drawables_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_first_page_master()->::TSP::Reference::MergeFrom(
          from._internal_first_page_master());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_even_page_master()->::TSP::Reference::MergeFrom(
          from._internal_even_page_master());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_odd_page_master()->::TSP::Reference::MergeFrom(
          from._internal_odd_page_master());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.obsolete_left_margin_ = from._impl_.obsolete_left_margin_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.obsolete_right_margin_ = from._impl_.obsolete_right_margin_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.obsolete_top_margin_ = from._impl_.obsolete_top_margin_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.obsolete_bottom_margin_ = from._impl_.obsolete_bottom_margin_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.obsolete_shows_header_ = from._impl_.obsolete_shows_header_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.obsolete_shows_footer_ = from._impl_.obsolete_shows_footer_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.obsolete_landscape_mode_ = from._impl_.obsolete_landscape_mode_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.inherit_previous_header_footer_ = from._impl_.inherit_previous_header_footer_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.obsolete_header_padding_ = from._impl_.obsolete_header_padding_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.obsolete_footer_padding_ = from._impl_.obsolete_footer_padding_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.obsolete_paper_width_ = from._impl_.obsolete_paper_width_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.obsolete_paper_height_ = from._impl_.obsolete_paper_height_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.obsolete_header_margin_ = from._impl_.obsolete_header_margin_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.obsolete_footer_margin_ = from._impl_.obsolete_footer_margin_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.section_start_kind_ = from._impl_.section_start_kind_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.section_page_number_kind_ = from._impl_.section_page_number_kind_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.page_master_first_page_different_ = from._impl_.page_master_first_page_different_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.page_master_even_odd_pages_different_ = from._impl_.page_master_even_odd_pages_different_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.page_master_first_page_hides_header_footer_ = from._impl_.page_master_first_page_hides_header_footer_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.section_page_number_start_ = from._impl_.section_page_number_start_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SectionArchive::CopyFrom(const SectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.SectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.obsolete_headers_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.obsolete_footers_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.obsolete_master_drawables_))
    return false;
  if (_internal_has_first_page_master()) {
    if (!_impl_.first_page_master_->IsInitialized()) return false;
  }
  if (_internal_has_even_page_master()) {
    if (!_impl_.even_page_master_->IsInitialized()) return false;
  }
  if (_internal_has_odd_page_master()) {
    if (!_impl_.odd_page_master_->IsInitialized()) return false;
  }
  return true;
}

void SectionArchive::InternalSwap(SectionArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.obsolete_headers_.InternalSwap(&other->_impl_.obsolete_headers_);
  _impl_.obsolete_footers_.InternalSwap(&other->_impl_.obsolete_footers_);
  _impl_.obsolete_master_drawables_.InternalSwap(&other->_impl_.obsolete_master_drawables_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SectionArchive, _impl_.section_page_number_start_)
      + sizeof(SectionArchive::_impl_.section_page_number_start_)
      - PROTOBUF_FIELD_OFFSET(SectionArchive, _impl_.first_page_master_)>(
          reinterpret_cast<char*>(&_impl_.first_page_master_),
          reinterpret_cast<char*>(&other->_impl_.first_page_master_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[9]);
}

// ===================================================================

class AnchorPosArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<AnchorPosArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& attachment(const AnchorPosArchive* msg);
  static void set_has_attachment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Point& position(const AnchorPosArchive* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
AnchorPosArchive::_Internal::attachment(const AnchorPosArchive* msg) {
  return *msg->_impl_.attachment_;
}
const ::TSP::Point&
AnchorPosArchive::_Internal::position(const AnchorPosArchive* msg) {
  return *msg->_impl_.position_;
}
void AnchorPosArchive::clear_attachment() {
  if (_impl_.attachment_ != nullptr) _impl_.attachment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AnchorPosArchive::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
AnchorPosArchive::AnchorPosArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TP.AnchorPosArchive)
}
AnchorPosArchive::AnchorPosArchive(const AnchorPosArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnchorPosArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attachment_){nullptr}
    , decltype(_impl_.position_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attachment()) {
    _this->_impl_.attachment_ = new ::TSP::Reference(*from._impl_.attachment_);
  }
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::TSP::Point(*from._impl_.position_);
  }
  // @@protoc_insertion_point(copy_constructor:TP.AnchorPosArchive)
}

inline void AnchorPosArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attachment_){nullptr}
    , decltype(_impl_.position_){nullptr}
  };
}

AnchorPosArchive::~AnchorPosArchive() {
  // @@protoc_insertion_point(destructor:TP.AnchorPosArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnchorPosArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.attachment_;
  if (this != internal_default_instance()) delete _impl_.position_;
}

void AnchorPosArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnchorPosArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.AnchorPosArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.attachment_ != nullptr);
      _impl_.attachment_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnchorPosArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference attachment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_attachment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Point position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnchorPosArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.AnchorPosArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference attachment = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::attachment(this),
        _Internal::attachment(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Point position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.AnchorPosArchive)
  return target;
}

size_t AnchorPosArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.AnchorPosArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference attachment = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.attachment_);
    }

    // optional .TSP.Point position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnchorPosArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AnchorPosArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnchorPosArchive::GetClassData() const { return &_class_data_; }


void AnchorPosArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AnchorPosArchive*>(&to_msg);
  auto& from = static_cast<const AnchorPosArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TP.AnchorPosArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_attachment()->::TSP::Reference::MergeFrom(
          from._internal_attachment());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_position()->::TSP::Point::MergeFrom(
          from._internal_position());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnchorPosArchive::CopyFrom(const AnchorPosArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.AnchorPosArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnchorPosArchive::IsInitialized() const {
  if (_internal_has_attachment()) {
    if (!_impl_.attachment_->IsInitialized()) return false;
  }
  if (_internal_has_position()) {
    if (!_impl_.position_->IsInitialized()) return false;
  }
  return true;
}

void AnchorPosArchive::InternalSwap(AnchorPosArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnchorPosArchive, _impl_.position_)
      + sizeof(AnchorPosArchive::_impl_.position_)
      - PROTOBUF_FIELD_OFFSET(AnchorPosArchive, _impl_.attachment_)>(
          reinterpret_cast<char*>(&_impl_.attachment_),
          reinterpret_cast<char*>(&other->_impl_.attachment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnchorPosArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[10]);
}

// ===================================================================

class TargetHintArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TargetHintArchive>()._impl_._has_bits_);
  static const ::TSP::Point& frame_origin(const TargetHintArchive* msg);
  static void set_has_frame_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Size& frame_size(const TargetHintArchive* msg);
  static void set_has_frame_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Range& range(const TargetHintArchive* msg);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_next_widow_pulls_down_from_char_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Range& anchored_range(const TargetHintArchive* msg);
  static void set_has_anchored_range(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_column_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::TSP::Point&
TargetHintArchive::_Internal::frame_origin(const TargetHintArchive* msg) {
  return *msg->_impl_.frame_origin_;
}
const ::TSP::Size&
TargetHintArchive::_Internal::frame_size(const TargetHintArchive* msg) {
  return *msg->_impl_.frame_size_;
}
const ::TSP::Range&
TargetHintArchive::_Internal::range(const TargetHintArchive* msg) {
  return *msg->_impl_.range_;
}
const ::TSP::Range&
TargetHintArchive::_Internal::anchored_range(const TargetHintArchive* msg) {
  return *msg->_impl_.anchored_range_;
}
void TargetHintArchive::clear_frame_origin() {
  if (_impl_.frame_origin_ != nullptr) _impl_.frame_origin_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TargetHintArchive::clear_frame_size() {
  if (_impl_.frame_size_ != nullptr) _impl_.frame_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void TargetHintArchive::clear_range() {
  if (_impl_.range_ != nullptr) _impl_.range_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void TargetHintArchive::clear_anchored_range() {
  if (_impl_.anchored_range_ != nullptr) _impl_.anchored_range_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
TargetHintArchive::TargetHintArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TP.TargetHintArchive)
}
TargetHintArchive::TargetHintArchive(const TargetHintArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TargetHintArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.frame_origin_){nullptr}
    , decltype(_impl_.frame_size_){nullptr}
    , decltype(_impl_.range_){nullptr}
    , decltype(_impl_.anchored_range_){nullptr}
    , decltype(_impl_.next_widow_pulls_down_from_char_index_){}
    , decltype(_impl_.column_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_frame_origin()) {
    _this->_impl_.frame_origin_ = new ::TSP::Point(*from._impl_.frame_origin_);
  }
  if (from._internal_has_frame_size()) {
    _this->_impl_.frame_size_ = new ::TSP::Size(*from._impl_.frame_size_);
  }
  if (from._internal_has_range()) {
    _this->_impl_.range_ = new ::TSP::Range(*from._impl_.range_);
  }
  if (from._internal_has_anchored_range()) {
    _this->_impl_.anchored_range_ = new ::TSP::Range(*from._impl_.anchored_range_);
  }
  ::memcpy(&_impl_.next_widow_pulls_down_from_char_index_, &from._impl_.next_widow_pulls_down_from_char_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.column_count_) -
    reinterpret_cast<char*>(&_impl_.next_widow_pulls_down_from_char_index_)) + sizeof(_impl_.column_count_));
  // @@protoc_insertion_point(copy_constructor:TP.TargetHintArchive)
}

inline void TargetHintArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.frame_origin_){nullptr}
    , decltype(_impl_.frame_size_){nullptr}
    , decltype(_impl_.range_){nullptr}
    , decltype(_impl_.anchored_range_){nullptr}
    , decltype(_impl_.next_widow_pulls_down_from_char_index_){0}
    , decltype(_impl_.column_count_){0}
  };
}

TargetHintArchive::~TargetHintArchive() {
  // @@protoc_insertion_point(destructor:TP.TargetHintArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TargetHintArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.frame_origin_;
  if (this != internal_default_instance()) delete _impl_.frame_size_;
  if (this != internal_default_instance()) delete _impl_.range_;
  if (this != internal_default_instance()) delete _impl_.anchored_range_;
}

void TargetHintArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TargetHintArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.TargetHintArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.frame_origin_ != nullptr);
      _impl_.frame_origin_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.frame_size_ != nullptr);
      _impl_.frame_size_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.range_ != nullptr);
      _impl_.range_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.anchored_range_ != nullptr);
      _impl_.anchored_range_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.next_widow_pulls_down_from_char_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.column_count_) -
        reinterpret_cast<char*>(&_impl_.next_widow_pulls_down_from_char_index_)) + sizeof(_impl_.column_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TargetHintArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Point frame_origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Size frame_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Range range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 next_widow_pulls_down_from_char_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_next_widow_pulls_down_from_char_index(&has_bits);
          _impl_.next_widow_pulls_down_from_char_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Range anchored_range = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_anchored_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 column_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_column_count(&has_bits);
          _impl_.column_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TargetHintArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.TargetHintArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Point frame_origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::frame_origin(this),
        _Internal::frame_origin(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Size frame_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::frame_size(this),
        _Internal::frame_size(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Range range = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::range(this),
        _Internal::range(this).GetCachedSize(), target, stream);
  }

  // optional int32 next_widow_pulls_down_from_char_index = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_next_widow_pulls_down_from_char_index(), target);
  }

  // optional .TSP.Range anchored_range = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::anchored_range(this),
        _Internal::anchored_range(this).GetCachedSize(), target, stream);
  }

  // optional int32 column_count = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_column_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.TargetHintArchive)
  return target;
}

size_t TargetHintArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.TargetHintArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .TSP.Point frame_origin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.frame_origin_);
    }

    // optional .TSP.Size frame_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.frame_size_);
    }

    // optional .TSP.Range range = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.range_);
    }

    // optional .TSP.Range anchored_range = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.anchored_range_);
    }

    // optional int32 next_widow_pulls_down_from_char_index = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_next_widow_pulls_down_from_char_index());
    }

    // optional int32 column_count = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_column_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TargetHintArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TargetHintArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TargetHintArchive::GetClassData() const { return &_class_data_; }


void TargetHintArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TargetHintArchive*>(&to_msg);
  auto& from = static_cast<const TargetHintArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TP.TargetHintArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_frame_origin()->::TSP::Point::MergeFrom(
          from._internal_frame_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_frame_size()->::TSP::Size::MergeFrom(
          from._internal_frame_size());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_range()->::TSP::Range::MergeFrom(
          from._internal_range());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_anchored_range()->::TSP::Range::MergeFrom(
          from._internal_anchored_range());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.next_widow_pulls_down_from_char_index_ = from._impl_.next_widow_pulls_down_from_char_index_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.column_count_ = from._impl_.column_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TargetHintArchive::CopyFrom(const TargetHintArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.TargetHintArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetHintArchive::IsInitialized() const {
  if (_internal_has_frame_origin()) {
    if (!_impl_.frame_origin_->IsInitialized()) return false;
  }
  if (_internal_has_frame_size()) {
    if (!_impl_.frame_size_->IsInitialized()) return false;
  }
  if (_internal_has_range()) {
    if (!_impl_.range_->IsInitialized()) return false;
  }
  if (_internal_has_anchored_range()) {
    if (!_impl_.anchored_range_->IsInitialized()) return false;
  }
  return true;
}

void TargetHintArchive::InternalSwap(TargetHintArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TargetHintArchive, _impl_.column_count_)
      + sizeof(TargetHintArchive::_impl_.column_count_)
      - PROTOBUF_FIELD_OFFSET(TargetHintArchive, _impl_.frame_origin_)>(
          reinterpret_cast<char*>(&_impl_.frame_origin_),
          reinterpret_cast<char*>(&other->_impl_.frame_origin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetHintArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[11]);
}

// ===================================================================

class PageHintArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PageHintArchive>()._impl_._has_bits_);
  static void set_has_page_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Range& footnote_auto_number_range(const PageHintArchive* msg);
  static void set_has_footnote_auto_number_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Range& footnote_layout_range(const PageHintArchive* msg);
  static void set_has_footnote_layout_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& first_child_hint(const PageHintArchive* msg);
  static void set_has_first_child_hint(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& last_child_hint(const PageHintArchive* msg);
  static void set_has_last_child_hint(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TP::TopicNumberHintsArchive& topic_numbers(const PageHintArchive* msg);
  static void set_has_topic_numbers(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_version_number(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_platform_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::TSP::Range&
PageHintArchive::_Internal::footnote_auto_number_range(const PageHintArchive* msg) {
  return *msg->_impl_.footnote_auto_number_range_;
}
const ::TSP::Range&
PageHintArchive::_Internal::footnote_layout_range(const PageHintArchive* msg) {
  return *msg->_impl_.footnote_layout_range_;
}
const ::TSP::Reference&
PageHintArchive::_Internal::first_child_hint(const PageHintArchive* msg) {
  return *msg->_impl_.first_child_hint_;
}
const ::TSP::Reference&
PageHintArchive::_Internal::last_child_hint(const PageHintArchive* msg) {
  return *msg->_impl_.last_child_hint_;
}
const ::TP::TopicNumberHintsArchive&
PageHintArchive::_Internal::topic_numbers(const PageHintArchive* msg) {
  return *msg->_impl_.topic_numbers_;
}
void PageHintArchive::clear_footnote_auto_number_range() {
  if (_impl_.footnote_auto_number_range_ != nullptr) _impl_.footnote_auto_number_range_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PageHintArchive::clear_footnote_layout_range() {
  if (_impl_.footnote_layout_range_ != nullptr) _impl_.footnote_layout_range_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PageHintArchive::clear_first_child_hint() {
  if (_impl_.first_child_hint_ != nullptr) _impl_.first_child_hint_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void PageHintArchive::clear_last_child_hint() {
  if (_impl_.last_child_hint_ != nullptr) _impl_.last_child_hint_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
PageHintArchive::PageHintArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TP.PageHintArchive)
}
PageHintArchive::PageHintArchive(const PageHintArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PageHintArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_hints_){from._impl_.target_hints_}
    , decltype(_impl_.anchored_attachments_map_){from._impl_.anchored_attachments_map_}
    , decltype(_impl_.footnote_auto_number_range_){nullptr}
    , decltype(_impl_.footnote_layout_range_){nullptr}
    , decltype(_impl_.first_child_hint_){nullptr}
    , decltype(_impl_.last_child_hint_){nullptr}
    , decltype(_impl_.topic_numbers_){nullptr}
    , decltype(_impl_.page_kind_){}
    , decltype(_impl_.version_number_){}
    , decltype(_impl_.platform_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_footnote_auto_number_range()) {
    _this->_impl_.footnote_auto_number_range_ = new ::TSP::Range(*from._impl_.footnote_auto_number_range_);
  }
  if (from._internal_has_footnote_layout_range()) {
    _this->_impl_.footnote_layout_range_ = new ::TSP::Range(*from._impl_.footnote_layout_range_);
  }
  if (from._internal_has_first_child_hint()) {
    _this->_impl_.first_child_hint_ = new ::TSP::Reference(*from._impl_.first_child_hint_);
  }
  if (from._internal_has_last_child_hint()) {
    _this->_impl_.last_child_hint_ = new ::TSP::Reference(*from._impl_.last_child_hint_);
  }
  if (from._internal_has_topic_numbers()) {
    _this->_impl_.topic_numbers_ = new ::TP::TopicNumberHintsArchive(*from._impl_.topic_numbers_);
  }
  ::memcpy(&_impl_.page_kind_, &from._impl_.page_kind_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.platform_id_) -
    reinterpret_cast<char*>(&_impl_.page_kind_)) + sizeof(_impl_.platform_id_));
  // @@protoc_insertion_point(copy_constructor:TP.PageHintArchive)
}

inline void PageHintArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_hints_){arena}
    , decltype(_impl_.anchored_attachments_map_){arena}
    , decltype(_impl_.footnote_auto_number_range_){nullptr}
    , decltype(_impl_.footnote_layout_range_){nullptr}
    , decltype(_impl_.first_child_hint_){nullptr}
    , decltype(_impl_.last_child_hint_){nullptr}
    , decltype(_impl_.topic_numbers_){nullptr}
    , decltype(_impl_.page_kind_){0}
    , decltype(_impl_.version_number_){0u}
    , decltype(_impl_.platform_id_){0u}
  };
}

PageHintArchive::~PageHintArchive() {
  // @@protoc_insertion_point(destructor:TP.PageHintArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PageHintArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.target_hints_.~RepeatedPtrField();
  _impl_.anchored_attachments_map_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.footnote_auto_number_range_;
  if (this != internal_default_instance()) delete _impl_.footnote_layout_range_;
  if (this != internal_default_instance()) delete _impl_.first_child_hint_;
  if (this != internal_default_instance()) delete _impl_.last_child_hint_;
  if (this != internal_default_instance()) delete _impl_.topic_numbers_;
}

void PageHintArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PageHintArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.PageHintArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_hints_.Clear();
  _impl_.anchored_attachments_map_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.footnote_auto_number_range_ != nullptr);
      _impl_.footnote_auto_number_range_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.footnote_layout_range_ != nullptr);
      _impl_.footnote_layout_range_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.first_child_hint_ != nullptr);
      _impl_.first_child_hint_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.last_child_hint_ != nullptr);
      _impl_.last_child_hint_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.topic_numbers_ != nullptr);
      _impl_.topic_numbers_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.page_kind_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.platform_id_) -
        reinterpret_cast<char*>(&_impl_.page_kind_)) + sizeof(_impl_.platform_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PageHintArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TP.PageHintArchive.PageKind page_kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TP::PageHintArchive_PageKind_IsValid(val))) {
            _internal_set_page_kind(static_cast<::TP::PageHintArchive_PageKind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .TP.TargetHintArchive target_hints = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_target_hints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Range footnote_auto_number_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_footnote_auto_number_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Range footnote_layout_range = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_footnote_layout_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference first_child_hint = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_child_hint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference last_child_hint = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_child_hint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TP.AnchorPosArchive anchored_attachments_map = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_anchored_attachments_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TP.TopicNumberHintsArchive topic_numbers = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic_numbers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 version_number = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_version_number(&has_bits);
          _impl_.version_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 platform_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_platform_id(&has_bits);
          _impl_.platform_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PageHintArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.PageHintArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TP.PageHintArchive.PageKind page_kind = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_page_kind(), target);
  }

  // repeated .TP.TargetHintArchive target_hints = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_target_hints_size()); i < n; i++) {
    const auto& repfield = this->_internal_target_hints(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Range footnote_auto_number_range = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::footnote_auto_number_range(this),
        _Internal::footnote_auto_number_range(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Range footnote_layout_range = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::footnote_layout_range(this),
        _Internal::footnote_layout_range(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference first_child_hint = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::first_child_hint(this),
        _Internal::first_child_hint(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference last_child_hint = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::last_child_hint(this),
        _Internal::last_child_hint(this).GetCachedSize(), target, stream);
  }

  // repeated .TP.AnchorPosArchive anchored_attachments_map = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_anchored_attachments_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_anchored_attachments_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TP.TopicNumberHintsArchive topic_numbers = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::topic_numbers(this),
        _Internal::topic_numbers(this).GetCachedSize(), target, stream);
  }

  // optional uint32 version_number = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_version_number(), target);
  }

  // optional uint32 platform_id = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_platform_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.PageHintArchive)
  return target;
}

size_t PageHintArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.PageHintArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TP.TargetHintArchive target_hints = 2;
  total_size += 1UL * this->_internal_target_hints_size();
  for (const auto& msg : this->_impl_.target_hints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TP.AnchorPosArchive anchored_attachments_map = 8;
  total_size += 1UL * this->_internal_anchored_attachments_map_size();
  for (const auto& msg : this->_impl_.anchored_attachments_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.Range footnote_auto_number_range = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.footnote_auto_number_range_);
    }

    // optional .TSP.Range footnote_layout_range = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.footnote_layout_range_);
    }

    // optional .TSP.Reference first_child_hint = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.first_child_hint_);
    }

    // optional .TSP.Reference last_child_hint = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.last_child_hint_);
    }

    // optional .TP.TopicNumberHintsArchive topic_numbers = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.topic_numbers_);
    }

    // optional .TP.PageHintArchive.PageKind page_kind = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_page_kind());
    }

    // optional uint32 version_number = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version_number());
    }

    // optional uint32 platform_id = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_platform_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PageHintArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PageHintArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PageHintArchive::GetClassData() const { return &_class_data_; }


void PageHintArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PageHintArchive*>(&to_msg);
  auto& from = static_cast<const PageHintArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TP.PageHintArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.target_hints_.MergeFrom(from._impl_.target_hints_);
  _this->_impl_.anchored_attachments_map_.MergeFrom(from._impl_.anchored_attachments_map_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_footnote_auto_number_range()->::TSP::Range::MergeFrom(
          from._internal_footnote_auto_number_range());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_footnote_layout_range()->::TSP::Range::MergeFrom(
          from._internal_footnote_layout_range());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_first_child_hint()->::TSP::Reference::MergeFrom(
          from._internal_first_child_hint());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_last_child_hint()->::TSP::Reference::MergeFrom(
          from._internal_last_child_hint());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_topic_numbers()->::TP::TopicNumberHintsArchive::MergeFrom(
          from._internal_topic_numbers());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.page_kind_ = from._impl_.page_kind_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.version_number_ = from._impl_.version_number_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.platform_id_ = from._impl_.platform_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PageHintArchive::CopyFrom(const PageHintArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.PageHintArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageHintArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.target_hints_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.anchored_attachments_map_))
    return false;
  if (_internal_has_footnote_auto_number_range()) {
    if (!_impl_.footnote_auto_number_range_->IsInitialized()) return false;
  }
  if (_internal_has_footnote_layout_range()) {
    if (!_impl_.footnote_layout_range_->IsInitialized()) return false;
  }
  if (_internal_has_first_child_hint()) {
    if (!_impl_.first_child_hint_->IsInitialized()) return false;
  }
  if (_internal_has_last_child_hint()) {
    if (!_impl_.last_child_hint_->IsInitialized()) return false;
  }
  if (_internal_has_topic_numbers()) {
    if (!_impl_.topic_numbers_->IsInitialized()) return false;
  }
  return true;
}

void PageHintArchive::InternalSwap(PageHintArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.target_hints_.InternalSwap(&other->_impl_.target_hints_);
  _impl_.anchored_attachments_map_.InternalSwap(&other->_impl_.anchored_attachments_map_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PageHintArchive, _impl_.platform_id_)
      + sizeof(PageHintArchive::_impl_.platform_id_)
      - PROTOBUF_FIELD_OFFSET(PageHintArchive, _impl_.footnote_auto_number_range_)>(
          reinterpret_cast<char*>(&_impl_.footnote_auto_number_range_),
          reinterpret_cast<char*>(&other->_impl_.footnote_auto_number_range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PageHintArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[12]);
}

// ===================================================================

class SectionHintArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SectionHintArchive>()._impl_._has_bits_);
  static void set_has_start_page_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SectionHintArchive::SectionHintArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TP.SectionHintArchive)
}
SectionHintArchive::SectionHintArchive(const SectionHintArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SectionHintArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.page_hints_){from._impl_.page_hints_}
    , decltype(_impl_.start_page_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.start_page_index_ = from._impl_.start_page_index_;
  // @@protoc_insertion_point(copy_constructor:TP.SectionHintArchive)
}

inline void SectionHintArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.page_hints_){arena}
    , decltype(_impl_.start_page_index_){0u}
  };
}

SectionHintArchive::~SectionHintArchive() {
  // @@protoc_insertion_point(destructor:TP.SectionHintArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SectionHintArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.page_hints_.~RepeatedPtrField();
}

void SectionHintArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SectionHintArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.SectionHintArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.page_hints_.Clear();
  _impl_.start_page_index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SectionHintArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TP.PageHintArchive page_hints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_page_hints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 start_page_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_start_page_index(&has_bits);
          _impl_.start_page_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SectionHintArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.SectionHintArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TP.PageHintArchive page_hints = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_page_hints_size()); i < n; i++) {
    const auto& repfield = this->_internal_page_hints(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 start_page_index = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_start_page_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.SectionHintArchive)
  return target;
}

size_t SectionHintArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.SectionHintArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TP.PageHintArchive page_hints = 1;
  total_size += 1UL * this->_internal_page_hints_size();
  for (const auto& msg : this->_impl_.page_hints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 start_page_index = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_start_page_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SectionHintArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SectionHintArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SectionHintArchive::GetClassData() const { return &_class_data_; }


void SectionHintArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SectionHintArchive*>(&to_msg);
  auto& from = static_cast<const SectionHintArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TP.SectionHintArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.page_hints_.MergeFrom(from._impl_.page_hints_);
  if (from._internal_has_start_page_index()) {
    _this->_internal_set_start_page_index(from._internal_start_page_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SectionHintArchive::CopyFrom(const SectionHintArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.SectionHintArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionHintArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.page_hints_))
    return false;
  return true;
}

void SectionHintArchive::InternalSwap(SectionHintArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.page_hints_.InternalSwap(&other->_impl_.page_hints_);
  swap(_impl_.start_page_index_, other->_impl_.start_page_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SectionHintArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[13]);
}

// ===================================================================

class TextboxHintArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TextboxHintArchive>()._impl_._has_bits_);
  static const ::TSP::Range& range(const TextboxHintArchive* msg);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Size& size(const TextboxHintArchive* msg);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Range&
TextboxHintArchive::_Internal::range(const TextboxHintArchive* msg) {
  return *msg->_impl_.range_;
}
const ::TSP::Size&
TextboxHintArchive::_Internal::size(const TextboxHintArchive* msg) {
  return *msg->_impl_.size_;
}
void TextboxHintArchive::clear_range() {
  if (_impl_.range_ != nullptr) _impl_.range_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TextboxHintArchive::clear_size() {
  if (_impl_.size_ != nullptr) _impl_.size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TextboxHintArchive::TextboxHintArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TP.TextboxHintArchive)
}
TextboxHintArchive::TextboxHintArchive(const TextboxHintArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TextboxHintArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_){nullptr}
    , decltype(_impl_.size_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_range()) {
    _this->_impl_.range_ = new ::TSP::Range(*from._impl_.range_);
  }
  if (from._internal_has_size()) {
    _this->_impl_.size_ = new ::TSP::Size(*from._impl_.size_);
  }
  // @@protoc_insertion_point(copy_constructor:TP.TextboxHintArchive)
}

inline void TextboxHintArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_){nullptr}
    , decltype(_impl_.size_){nullptr}
  };
}

TextboxHintArchive::~TextboxHintArchive() {
  // @@protoc_insertion_point(destructor:TP.TextboxHintArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TextboxHintArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.range_;
  if (this != internal_default_instance()) delete _impl_.size_;
}

void TextboxHintArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TextboxHintArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.TextboxHintArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.range_ != nullptr);
      _impl_.range_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.size_ != nullptr);
      _impl_.size_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextboxHintArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Range range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Size size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TextboxHintArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.TextboxHintArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Range range = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::range(this),
        _Internal::range(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Size size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::size(this),
        _Internal::size(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.TextboxHintArchive)
  return target;
}

size_t TextboxHintArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TP.TextboxHintArchive)
  size_t total_size = 0;

  if (_internal_has_range()) {
    // required .TSP.Range range = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.range_);
  }

  if (_internal_has_size()) {
    // required .TSP.Size size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.size_);
  }

  return total_size;
}
size_t TextboxHintArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.TextboxHintArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.Range range = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.range_);

    // required .TSP.Size size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.size_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextboxHintArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TextboxHintArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextboxHintArchive::GetClassData() const { return &_class_data_; }


void TextboxHintArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TextboxHintArchive*>(&to_msg);
  auto& from = static_cast<const TextboxHintArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TP.TextboxHintArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_range()->::TSP::Range::MergeFrom(
          from._internal_range());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_size()->::TSP::Size::MergeFrom(
          from._internal_size());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextboxHintArchive::CopyFrom(const TextboxHintArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.TextboxHintArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextboxHintArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_range()) {
    if (!_impl_.range_->IsInitialized()) return false;
  }
  if (_internal_has_size()) {
    if (!_impl_.size_->IsInitialized()) return false;
  }
  return true;
}

void TextboxHintArchive::InternalSwap(TextboxHintArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TextboxHintArchive, _impl_.size_)
      + sizeof(TextboxHintArchive::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(TextboxHintArchive, _impl_.range_)>(
          reinterpret_cast<char*>(&_impl_.range_),
          reinterpret_cast<char*>(&other->_impl_.range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TextboxHintArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[14]);
}

// ===================================================================

class TopicNumberEntryArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TopicNumberEntryArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& list_style(const TopicNumberEntryArchive* msg);
  static void set_has_list_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
TopicNumberEntryArchive::_Internal::list_style(const TopicNumberEntryArchive* msg) {
  return *msg->_impl_.list_style_;
}
void TopicNumberEntryArchive::clear_list_style() {
  if (_impl_.list_style_ != nullptr) _impl_.list_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TopicNumberEntryArchive::TopicNumberEntryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TP.TopicNumberEntryArchive)
}
TopicNumberEntryArchive::TopicNumberEntryArchive(const TopicNumberEntryArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TopicNumberEntryArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.topic_number_){from._impl_.topic_number_}
    , decltype(_impl_.character_index_){from._impl_.character_index_}
    , decltype(_impl_.list_style_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_list_style()) {
    _this->_impl_.list_style_ = new ::TSP::Reference(*from._impl_.list_style_);
  }
  // @@protoc_insertion_point(copy_constructor:TP.TopicNumberEntryArchive)
}

inline void TopicNumberEntryArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.topic_number_){arena}
    , decltype(_impl_.character_index_){arena}
    , decltype(_impl_.list_style_){nullptr}
  };
}

TopicNumberEntryArchive::~TopicNumberEntryArchive() {
  // @@protoc_insertion_point(destructor:TP.TopicNumberEntryArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TopicNumberEntryArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.topic_number_.~RepeatedField();
  _impl_.character_index_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.list_style_;
}

void TopicNumberEntryArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TopicNumberEntryArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.TopicNumberEntryArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.topic_number_.Clear();
  _impl_.character_index_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.list_style_ != nullptr);
    _impl_.list_style_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopicNumberEntryArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference list_style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 topic_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_topic_number(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_topic_number(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 character_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_character_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_character_index(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TopicNumberEntryArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.TopicNumberEntryArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference list_style = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::list_style(this),
        _Internal::list_style(this).GetCachedSize(), target, stream);
  }

  // repeated uint32 topic_number = 2;
  for (int i = 0, n = this->_internal_topic_number_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_topic_number(i), target);
  }

  // repeated uint32 character_index = 3;
  for (int i = 0, n = this->_internal_character_index_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_character_index(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.TopicNumberEntryArchive)
  return target;
}

size_t TopicNumberEntryArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.TopicNumberEntryArchive)
  size_t total_size = 0;

  // required .TSP.Reference list_style = 1;
  if (_internal_has_list_style()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.list_style_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 topic_number = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.topic_number_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_topic_number_size());
    total_size += data_size;
  }

  // repeated uint32 character_index = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.character_index_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_character_index_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TopicNumberEntryArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TopicNumberEntryArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TopicNumberEntryArchive::GetClassData() const { return &_class_data_; }


void TopicNumberEntryArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TopicNumberEntryArchive*>(&to_msg);
  auto& from = static_cast<const TopicNumberEntryArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TP.TopicNumberEntryArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.topic_number_.MergeFrom(from._impl_.topic_number_);
  _this->_impl_.character_index_.MergeFrom(from._impl_.character_index_);
  if (from._internal_has_list_style()) {
    _this->_internal_mutable_list_style()->::TSP::Reference::MergeFrom(
        from._internal_list_style());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TopicNumberEntryArchive::CopyFrom(const TopicNumberEntryArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.TopicNumberEntryArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicNumberEntryArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_list_style()) {
    if (!_impl_.list_style_->IsInitialized()) return false;
  }
  return true;
}

void TopicNumberEntryArchive::InternalSwap(TopicNumberEntryArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.topic_number_.InternalSwap(&other->_impl_.topic_number_);
  _impl_.character_index_.InternalSwap(&other->_impl_.character_index_);
  swap(_impl_.list_style_, other->_impl_.list_style_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopicNumberEntryArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[15]);
}

// ===================================================================

class TopicNumberHintsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TopicNumberHintsArchive>()._impl_._has_bits_);
  static void set_has_charindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_valid_through_char_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TopicNumberHintsArchive::TopicNumberHintsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TP.TopicNumberHintsArchive)
}
TopicNumberHintsArchive::TopicNumberHintsArchive(const TopicNumberHintsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TopicNumberHintsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.topic_numbers_map_){from._impl_.topic_numbers_map_}
    , decltype(_impl_.charindex_){}
    , decltype(_impl_.valid_through_char_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.charindex_, &from._impl_.charindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.valid_through_char_index_) -
    reinterpret_cast<char*>(&_impl_.charindex_)) + sizeof(_impl_.valid_through_char_index_));
  // @@protoc_insertion_point(copy_constructor:TP.TopicNumberHintsArchive)
}

inline void TopicNumberHintsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.topic_numbers_map_){arena}
    , decltype(_impl_.charindex_){0u}
    , decltype(_impl_.valid_through_char_index_){0u}
  };
}

TopicNumberHintsArchive::~TopicNumberHintsArchive() {
  // @@protoc_insertion_point(destructor:TP.TopicNumberHintsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TopicNumberHintsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.topic_numbers_map_.~RepeatedPtrField();
}

void TopicNumberHintsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TopicNumberHintsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.TopicNumberHintsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.topic_numbers_map_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.charindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.valid_through_char_index_) -
        reinterpret_cast<char*>(&_impl_.charindex_)) + sizeof(_impl_.valid_through_char_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopicNumberHintsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 charIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_charindex(&has_bits);
          _impl_.charindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TP.TopicNumberEntryArchive topic_numbers_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_topic_numbers_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 valid_through_char_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_valid_through_char_index(&has_bits);
          _impl_.valid_through_char_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TopicNumberHintsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.TopicNumberHintsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 charIndex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_charindex(), target);
  }

  // repeated .TP.TopicNumberEntryArchive topic_numbers_map = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_topic_numbers_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_topic_numbers_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 valid_through_char_index = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_valid_through_char_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.TopicNumberHintsArchive)
  return target;
}

size_t TopicNumberHintsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.TopicNumberHintsArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TP.TopicNumberEntryArchive topic_numbers_map = 2;
  total_size += 1UL * this->_internal_topic_numbers_map_size();
  for (const auto& msg : this->_impl_.topic_numbers_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 charIndex = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_charindex());
    }

    // optional uint32 valid_through_char_index = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_valid_through_char_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TopicNumberHintsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TopicNumberHintsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TopicNumberHintsArchive::GetClassData() const { return &_class_data_; }


void TopicNumberHintsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TopicNumberHintsArchive*>(&to_msg);
  auto& from = static_cast<const TopicNumberHintsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TP.TopicNumberHintsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.topic_numbers_map_.MergeFrom(from._impl_.topic_numbers_map_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.charindex_ = from._impl_.charindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.valid_through_char_index_ = from._impl_.valid_through_char_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TopicNumberHintsArchive::CopyFrom(const TopicNumberHintsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.TopicNumberHintsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicNumberHintsArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.topic_numbers_map_))
    return false;
  return true;
}

void TopicNumberHintsArchive::InternalSwap(TopicNumberHintsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.topic_numbers_map_.InternalSwap(&other->_impl_.topic_numbers_map_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TopicNumberHintsArchive, _impl_.valid_through_char_index_)
      + sizeof(TopicNumberHintsArchive::_impl_.valid_through_char_index_)
      - PROTOBUF_FIELD_OFFSET(TopicNumberHintsArchive, _impl_.charindex_)>(
          reinterpret_cast<char*>(&_impl_.charindex_),
          reinterpret_cast<char*>(&other->_impl_.charindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TopicNumberHintsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[16]);
}

// ===================================================================

class LayoutStateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<LayoutStateArchive>()._impl_._has_bits_);
  static void set_has_section_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_section_page_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_document_page_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_page_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

LayoutStateArchive::LayoutStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TP.LayoutStateArchive)
}
LayoutStateArchive::LayoutStateArchive(const LayoutStateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LayoutStateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.section_hints_){from._impl_.section_hints_}
    , decltype(_impl_.section_index_){}
    , decltype(_impl_.section_page_index_){}
    , decltype(_impl_.document_page_index_){}
    , decltype(_impl_.last_page_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.section_index_, &from._impl_.section_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_page_count_) -
    reinterpret_cast<char*>(&_impl_.section_index_)) + sizeof(_impl_.last_page_count_));
  // @@protoc_insertion_point(copy_constructor:TP.LayoutStateArchive)
}

inline void LayoutStateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.section_hints_){arena}
    , decltype(_impl_.section_index_){0u}
    , decltype(_impl_.section_page_index_){0u}
    , decltype(_impl_.document_page_index_){0u}
    , decltype(_impl_.last_page_count_){0u}
  };
}

LayoutStateArchive::~LayoutStateArchive() {
  // @@protoc_insertion_point(destructor:TP.LayoutStateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LayoutStateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.section_hints_.~RepeatedPtrField();
}

void LayoutStateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LayoutStateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.LayoutStateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.section_hints_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.section_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.last_page_count_) -
        reinterpret_cast<char*>(&_impl_.section_index_)) + sizeof(_impl_.last_page_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LayoutStateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 section_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_section_index(&has_bits);
          _impl_.section_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 section_page_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_section_page_index(&has_bits);
          _impl_.section_page_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 document_page_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_document_page_index(&has_bits);
          _impl_.document_page_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_page_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_last_page_count(&has_bits);
          _impl_.last_page_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TP.SectionHintArchive section_hints = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_section_hints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LayoutStateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.LayoutStateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 section_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_section_index(), target);
  }

  // optional uint32 section_page_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_section_page_index(), target);
  }

  // optional uint32 document_page_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_document_page_index(), target);
  }

  // optional uint32 last_page_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_last_page_count(), target);
  }

  // repeated .TP.SectionHintArchive section_hints = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_section_hints_size()); i < n; i++) {
    const auto& repfield = this->_internal_section_hints(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.LayoutStateArchive)
  return target;
}

size_t LayoutStateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.LayoutStateArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TP.SectionHintArchive section_hints = 5;
  total_size += 1UL * this->_internal_section_hints_size();
  for (const auto& msg : this->_impl_.section_hints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 section_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_section_index());
    }

    // optional uint32 section_page_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_section_page_index());
    }

    // optional uint32 document_page_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_document_page_index());
    }

    // optional uint32 last_page_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_last_page_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LayoutStateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LayoutStateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LayoutStateArchive::GetClassData() const { return &_class_data_; }


void LayoutStateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LayoutStateArchive*>(&to_msg);
  auto& from = static_cast<const LayoutStateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TP.LayoutStateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.section_hints_.MergeFrom(from._impl_.section_hints_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.section_index_ = from._impl_.section_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.section_page_index_ = from._impl_.section_page_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.document_page_index_ = from._impl_.document_page_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.last_page_count_ = from._impl_.last_page_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LayoutStateArchive::CopyFrom(const LayoutStateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.LayoutStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayoutStateArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.section_hints_))
    return false;
  return true;
}

void LayoutStateArchive::InternalSwap(LayoutStateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.section_hints_.InternalSwap(&other->_impl_.section_hints_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LayoutStateArchive, _impl_.last_page_count_)
      + sizeof(LayoutStateArchive::_impl_.last_page_count_)
      - PROTOBUF_FIELD_OFFSET(LayoutStateArchive, _impl_.section_index_)>(
          reinterpret_cast<char*>(&_impl_.section_index_),
          reinterpret_cast<char*>(&other->_impl_.section_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LayoutStateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[17]);
}

// ===================================================================

class CanvasSelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CanvasSelectionArchive>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Range& range(const CanvasSelectionArchive* msg);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_style_insertion_behavior(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_caret_affinity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& container(const CanvasSelectionArchive* msg);
  static void set_has_container(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001d) ^ 0x0000001d) != 0;
  }
};

const ::TSP::Range&
CanvasSelectionArchive::_Internal::range(const CanvasSelectionArchive* msg) {
  return *msg->_impl_.range_;
}
const ::TSP::Reference&
CanvasSelectionArchive::_Internal::container(const CanvasSelectionArchive* msg) {
  return *msg->_impl_.container_;
}
void CanvasSelectionArchive::clear_range() {
  if (_impl_.range_ != nullptr) _impl_.range_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CanvasSelectionArchive::clear_infos() {
  _impl_.infos_.Clear();
}
void CanvasSelectionArchive::clear_excluded_infos() {
  _impl_.excluded_infos_.Clear();
}
void CanvasSelectionArchive::clear_additional_infos() {
  _impl_.additional_infos_.Clear();
}
void CanvasSelectionArchive::clear_container() {
  if (_impl_.container_ != nullptr) _impl_.container_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CanvasSelectionArchive::CanvasSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TP.CanvasSelectionArchive)
}
CanvasSelectionArchive::CanvasSelectionArchive(const CanvasSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CanvasSelectionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.infos_){from._impl_.infos_}
    , decltype(_impl_.excluded_infos_){from._impl_.excluded_infos_}
    , decltype(_impl_.additional_infos_){from._impl_.additional_infos_}
    , decltype(_impl_.range_){nullptr}
    , decltype(_impl_.container_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.style_insertion_behavior_){}
    , decltype(_impl_.caret_affinity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_range()) {
    _this->_impl_.range_ = new ::TSP::Range(*from._impl_.range_);
  }
  if (from._internal_has_container()) {
    _this->_impl_.container_ = new ::TSP::Reference(*from._impl_.container_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.caret_affinity_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.caret_affinity_));
  // @@protoc_insertion_point(copy_constructor:TP.CanvasSelectionArchive)
}

inline void CanvasSelectionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.infos_){arena}
    , decltype(_impl_.excluded_infos_){arena}
    , decltype(_impl_.additional_infos_){arena}
    , decltype(_impl_.range_){nullptr}
    , decltype(_impl_.container_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.style_insertion_behavior_){0}
    , decltype(_impl_.caret_affinity_){0}
  };
}

CanvasSelectionArchive::~CanvasSelectionArchive() {
  // @@protoc_insertion_point(destructor:TP.CanvasSelectionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CanvasSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.infos_.~RepeatedPtrField();
  _impl_.excluded_infos_.~RepeatedPtrField();
  _impl_.additional_infos_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.range_;
  if (this != internal_default_instance()) delete _impl_.container_;
}

void CanvasSelectionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CanvasSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.CanvasSelectionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.infos_.Clear();
  _impl_.excluded_infos_.Clear();
  _impl_.additional_infos_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.range_ != nullptr);
      _impl_.range_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.container_ != nullptr);
      _impl_.container_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.caret_affinity_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.caret_affinity_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CanvasSelectionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.SelectionType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::SelectionType_IsValid(val))) {
            _internal_set_type(static_cast<::TSWP::SelectionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Range range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSWP.StyleInsertionBehavior style_insertion_behavior = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::StyleInsertionBehavior_IsValid(val))) {
            _internal_set_style_insertion_behavior(static_cast<::TSWP::StyleInsertionBehavior>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .TSWP.CaretAffinity caret_affinity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::CaretAffinity_IsValid(val))) {
            _internal_set_caret_affinity(static_cast<::TSWP::CaretAffinity>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference infos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference excluded_infos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_excluded_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference additional_infos = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference container = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_container(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CanvasSelectionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.CanvasSelectionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSWP.SelectionType type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required .TSP.Range range = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::range(this),
        _Internal::range(this).GetCachedSize(), target, stream);
  }

  // required .TSWP.StyleInsertionBehavior style_insertion_behavior = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_style_insertion_behavior(), target);
  }

  // required .TSWP.CaretAffinity caret_affinity = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_caret_affinity(), target);
  }

  // repeated .TSP.Reference infos = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference excluded_infos = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_excluded_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_excluded_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference additional_infos = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_additional_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_additional_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference container = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::container(this),
        _Internal::container(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.CanvasSelectionArchive)
  return target;
}

size_t CanvasSelectionArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TP.CanvasSelectionArchive)
  size_t total_size = 0;

  if (_internal_has_range()) {
    // required .TSP.Range range = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.range_);
  }

  if (_internal_has_type()) {
    // required .TSWP.SelectionType type = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (_internal_has_style_insertion_behavior()) {
    // required .TSWP.StyleInsertionBehavior style_insertion_behavior = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_style_insertion_behavior());
  }

  if (_internal_has_caret_affinity()) {
    // required .TSWP.CaretAffinity caret_affinity = 4;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_caret_affinity());
  }

  return total_size;
}
size_t CanvasSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.CanvasSelectionArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001d) ^ 0x0000001d) == 0) {  // All required fields are present.
    // required .TSP.Range range = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.range_);

    // required .TSWP.SelectionType type = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());

    // required .TSWP.StyleInsertionBehavior style_insertion_behavior = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_style_insertion_behavior());

    // required .TSWP.CaretAffinity caret_affinity = 4;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_caret_affinity());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference infos = 5;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->_impl_.infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference excluded_infos = 6;
  total_size += 1UL * this->_internal_excluded_infos_size();
  for (const auto& msg : this->_impl_.excluded_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference additional_infos = 7;
  total_size += 1UL * this->_internal_additional_infos_size();
  for (const auto& msg : this->_impl_.additional_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference container = 8;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.container_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CanvasSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CanvasSelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CanvasSelectionArchive::GetClassData() const { return &_class_data_; }


void CanvasSelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CanvasSelectionArchive*>(&to_msg);
  auto& from = static_cast<const CanvasSelectionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TP.CanvasSelectionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.infos_.MergeFrom(from._impl_.infos_);
  _this->_impl_.excluded_infos_.MergeFrom(from._impl_.excluded_infos_);
  _this->_impl_.additional_infos_.MergeFrom(from._impl_.additional_infos_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_range()->::TSP::Range::MergeFrom(
          from._internal_range());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_container()->::TSP::Reference::MergeFrom(
          from._internal_container());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.style_insertion_behavior_ = from._impl_.style_insertion_behavior_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.caret_affinity_ = from._impl_.caret_affinity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CanvasSelectionArchive::CopyFrom(const CanvasSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.CanvasSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanvasSelectionArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.infos_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.excluded_infos_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.additional_infos_))
    return false;
  if (_internal_has_range()) {
    if (!_impl_.range_->IsInitialized()) return false;
  }
  if (_internal_has_container()) {
    if (!_impl_.container_->IsInitialized()) return false;
  }
  return true;
}

void CanvasSelectionArchive::InternalSwap(CanvasSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.infos_.InternalSwap(&other->_impl_.infos_);
  _impl_.excluded_infos_.InternalSwap(&other->_impl_.excluded_infos_);
  _impl_.additional_infos_.InternalSwap(&other->_impl_.additional_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CanvasSelectionArchive, _impl_.caret_affinity_)
      + sizeof(CanvasSelectionArchive::_impl_.caret_affinity_)
      - PROTOBUF_FIELD_OFFSET(CanvasSelectionArchive, _impl_.range_)>(
          reinterpret_cast<char*>(&_impl_.range_),
          reinterpret_cast<char*>(&other->_impl_.range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CanvasSelectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[18]);
}

// ===================================================================

class ViewStateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewStateArchive>()._impl_._has_bits_);
  static void set_has_obsolete_view_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Point& visible_rect_origin(const ViewStateArchive* msg);
  static void set_has_visible_rect_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_obsolete_landscape(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::Reference& selection(const ViewStateArchive* msg);
  static void set_has_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& selection_model(const ViewStateArchive* msg);
  static void set_has_selection_model(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_master_drawables_selectable(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Size& visible_rect_size(const ViewStateArchive* msg);
  static void set_has_visible_rect_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ruler_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_layout_borders_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_word_count_hud_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_shows_comments(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_shows_page_navigator(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_view_scale_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_view_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSP::Point& window_frame_origin(const ViewStateArchive* msg);
  static void set_has_window_frame_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Size& window_frame_size(const ViewStateArchive* msg);
  static void set_has_window_frame_size(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_selected_inspector_switch_segment_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inspector_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

const ::TSP::Point&
ViewStateArchive::_Internal::visible_rect_origin(const ViewStateArchive* msg) {
  return *msg->_impl_.visible_rect_origin_;
}
const ::TSP::Reference&
ViewStateArchive::_Internal::selection(const ViewStateArchive* msg) {
  return *msg->_impl_.selection_;
}
const ::TSP::Reference&
ViewStateArchive::_Internal::selection_model(const ViewStateArchive* msg) {
  return *msg->_impl_.selection_model_;
}
const ::TSP::Size&
ViewStateArchive::_Internal::visible_rect_size(const ViewStateArchive* msg) {
  return *msg->_impl_.visible_rect_size_;
}
const ::TSP::Point&
ViewStateArchive::_Internal::window_frame_origin(const ViewStateArchive* msg) {
  return *msg->_impl_.window_frame_origin_;
}
const ::TSP::Size&
ViewStateArchive::_Internal::window_frame_size(const ViewStateArchive* msg) {
  return *msg->_impl_.window_frame_size_;
}
void ViewStateArchive::clear_visible_rect_origin() {
  if (_impl_.visible_rect_origin_ != nullptr) _impl_.visible_rect_origin_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ViewStateArchive::clear_selection() {
  if (_impl_.selection_ != nullptr) _impl_.selection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ViewStateArchive::clear_selection_model() {
  if (_impl_.selection_model_ != nullptr) _impl_.selection_model_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ViewStateArchive::clear_visible_rect_size() {
  if (_impl_.visible_rect_size_ != nullptr) _impl_.visible_rect_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ViewStateArchive::clear_chart_ui_state() {
  _impl_.chart_ui_state_.Clear();
}
void ViewStateArchive::clear_window_frame_origin() {
  if (_impl_.window_frame_origin_ != nullptr) _impl_.window_frame_origin_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ViewStateArchive::clear_window_frame_size() {
  if (_impl_.window_frame_size_ != nullptr) _impl_.window_frame_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
ViewStateArchive::ViewStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TP.ViewStateArchive)
}
ViewStateArchive::ViewStateArchive(const ViewStateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewStateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chart_ui_state_){from._impl_.chart_ui_state_}
    , decltype(_impl_.selected_inspector_switch_segment_identifier_){}
    , decltype(_impl_.visible_rect_origin_){nullptr}
    , decltype(_impl_.selection_){nullptr}
    , decltype(_impl_.selection_model_){nullptr}
    , decltype(_impl_.visible_rect_size_){nullptr}
    , decltype(_impl_.window_frame_origin_){nullptr}
    , decltype(_impl_.window_frame_size_){nullptr}
    , decltype(_impl_.obsolete_view_scale_){}
    , decltype(_impl_.obsolete_landscape_){}
    , decltype(_impl_.master_drawables_selectable_){}
    , decltype(_impl_.layout_borders_visible_){}
    , decltype(_impl_.word_count_hud_visible_){}
    , decltype(_impl_.view_scale_mode_){}
    , decltype(_impl_.shows_page_navigator_){}
    , decltype(_impl_.inspector_hidden_){}
    , decltype(_impl_.ruler_visible_){}
    , decltype(_impl_.shows_comments_){}
    , decltype(_impl_.view_scale_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.selected_inspector_switch_segment_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selected_inspector_switch_segment_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_selected_inspector_switch_segment_identifier()) {
    _this->_impl_.selected_inspector_switch_segment_identifier_.Set(from._internal_selected_inspector_switch_segment_identifier(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_visible_rect_origin()) {
    _this->_impl_.visible_rect_origin_ = new ::TSP::Point(*from._impl_.visible_rect_origin_);
  }
  if (from._internal_has_selection()) {
    _this->_impl_.selection_ = new ::TSP::Reference(*from._impl_.selection_);
  }
  if (from._internal_has_selection_model()) {
    _this->_impl_.selection_model_ = new ::TSP::Reference(*from._impl_.selection_model_);
  }
  if (from._internal_has_visible_rect_size()) {
    _this->_impl_.visible_rect_size_ = new ::TSP::Size(*from._impl_.visible_rect_size_);
  }
  if (from._internal_has_window_frame_origin()) {
    _this->_impl_.window_frame_origin_ = new ::TSP::Point(*from._impl_.window_frame_origin_);
  }
  if (from._internal_has_window_frame_size()) {
    _this->_impl_.window_frame_size_ = new ::TSP::Size(*from._impl_.window_frame_size_);
  }
  ::memcpy(&_impl_.obsolete_view_scale_, &from._impl_.obsolete_view_scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.view_scale_) -
    reinterpret_cast<char*>(&_impl_.obsolete_view_scale_)) + sizeof(_impl_.view_scale_));
  // @@protoc_insertion_point(copy_constructor:TP.ViewStateArchive)
}

inline void ViewStateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chart_ui_state_){arena}
    , decltype(_impl_.selected_inspector_switch_segment_identifier_){}
    , decltype(_impl_.visible_rect_origin_){nullptr}
    , decltype(_impl_.selection_){nullptr}
    , decltype(_impl_.selection_model_){nullptr}
    , decltype(_impl_.visible_rect_size_){nullptr}
    , decltype(_impl_.window_frame_origin_){nullptr}
    , decltype(_impl_.window_frame_size_){nullptr}
    , decltype(_impl_.obsolete_view_scale_){0}
    , decltype(_impl_.obsolete_landscape_){false}
    , decltype(_impl_.master_drawables_selectable_){false}
    , decltype(_impl_.layout_borders_visible_){false}
    , decltype(_impl_.word_count_hud_visible_){false}
    , decltype(_impl_.view_scale_mode_){0}
    , decltype(_impl_.shows_page_navigator_){false}
    , decltype(_impl_.inspector_hidden_){false}
    , decltype(_impl_.ruler_visible_){true}
    , decltype(_impl_.shows_comments_){true}
    , decltype(_impl_.view_scale_){1.25f}
  };
  _impl_.selected_inspector_switch_segment_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selected_inspector_switch_segment_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ViewStateArchive::~ViewStateArchive() {
  // @@protoc_insertion_point(destructor:TP.ViewStateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewStateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chart_ui_state_.~RepeatedPtrField();
  _impl_.selected_inspector_switch_segment_identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.visible_rect_origin_;
  if (this != internal_default_instance()) delete _impl_.selection_;
  if (this != internal_default_instance()) delete _impl_.selection_model_;
  if (this != internal_default_instance()) delete _impl_.visible_rect_size_;
  if (this != internal_default_instance()) delete _impl_.window_frame_origin_;
  if (this != internal_default_instance()) delete _impl_.window_frame_size_;
}

void ViewStateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewStateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.ViewStateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chart_ui_state_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.selected_inspector_switch_segment_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.visible_rect_origin_ != nullptr);
      _impl_.visible_rect_origin_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.selection_ != nullptr);
      _impl_.selection_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.selection_model_ != nullptr);
      _impl_.selection_model_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.visible_rect_size_ != nullptr);
      _impl_.visible_rect_size_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.window_frame_origin_ != nullptr);
      _impl_.window_frame_origin_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.window_frame_size_ != nullptr);
      _impl_.window_frame_size_->Clear();
    }
  }
  _impl_.obsolete_view_scale_ = 0;
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.obsolete_landscape_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.inspector_hidden_) -
        reinterpret_cast<char*>(&_impl_.obsolete_landscape_)) + sizeof(_impl_.inspector_hidden_));
    _impl_.ruler_visible_ = true;
  }
  if (cached_has_bits & 0x00030000u) {
    _impl_.shows_comments_ = true;
    _impl_.view_scale_ = 1.25f;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewStateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float OBSOLETE_view_scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_obsolete_view_scale(&has_bits);
          _impl_.obsolete_view_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Point visible_rect_origin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_visible_rect_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool OBSOLETE_landscape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_obsolete_landscape(&has_bits);
          _impl_.obsolete_landscape_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference selection = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference selection_model = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool master_drawables_selectable = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_master_drawables_selectable(&has_bits);
          _impl_.master_drawables_selectable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Size visible_rect_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_visible_rect_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCH.ChartUIState chart_ui_state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chart_ui_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool ruler_visible = 9 [default = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_ruler_visible(&has_bits);
          _impl_.ruler_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool layout_borders_visible = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_layout_borders_visible(&has_bits);
          _impl_.layout_borders_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool word_count_hud_visible = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_word_count_hud_visible(&has_bits);
          _impl_.word_count_hud_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool shows_comments = 12 [default = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_shows_comments(&has_bits);
          _impl_.shows_comments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool shows_page_navigator = 13 [default = false];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_shows_page_navigator(&has_bits);
          _impl_.shows_page_navigator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TP.ViewScaleMode view_scale_mode = 14 [default = ViewScaleMode_UserDefined];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TP::ViewScaleMode_IsValid(val))) {
            _internal_set_view_scale_mode(static_cast<::TP::ViewScaleMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional float view_scale = 15 [default = 1.25];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_view_scale(&has_bits);
          _impl_.view_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Point window_frame_origin = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_window_frame_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Size window_frame_size = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_window_frame_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string selected_inspector_switch_segment_identifier = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_selected_inspector_switch_segment_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TP.ViewStateArchive.selected_inspector_switch_segment_identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool inspector_hidden = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_inspector_hidden(&has_bits);
          _impl_.inspector_hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ViewStateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.ViewStateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float OBSOLETE_view_scale = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_obsolete_view_scale(), target);
  }

  // optional .TSP.Point visible_rect_origin = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::visible_rect_origin(this),
        _Internal::visible_rect_origin(this).GetCachedSize(), target, stream);
  }

  // optional bool OBSOLETE_landscape = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_obsolete_landscape(), target);
  }

  // optional .TSP.Reference selection = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::selection(this),
        _Internal::selection(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference selection_model = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::selection_model(this),
        _Internal::selection_model(this).GetCachedSize(), target, stream);
  }

  // optional bool master_drawables_selectable = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_master_drawables_selectable(), target);
  }

  // optional .TSP.Size visible_rect_size = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::visible_rect_size(this),
        _Internal::visible_rect_size(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCH.ChartUIState chart_ui_state = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chart_ui_state_size()); i < n; i++) {
    const auto& repfield = this->_internal_chart_ui_state(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool ruler_visible = 9 [default = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_ruler_visible(), target);
  }

  // optional bool layout_borders_visible = 10 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_layout_borders_visible(), target);
  }

  // optional bool word_count_hud_visible = 11 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_word_count_hud_visible(), target);
  }

  // optional bool shows_comments = 12 [default = true];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_shows_comments(), target);
  }

  // optional bool shows_page_navigator = 13 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_shows_page_navigator(), target);
  }

  // optional .TP.ViewScaleMode view_scale_mode = 14 [default = ViewScaleMode_UserDefined];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_view_scale_mode(), target);
  }

  // optional float view_scale = 15 [default = 1.25];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_view_scale(), target);
  }

  // optional .TSP.Point window_frame_origin = 16;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::window_frame_origin(this),
        _Internal::window_frame_origin(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Size window_frame_size = 17;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::window_frame_size(this),
        _Internal::window_frame_size(this).GetCachedSize(), target, stream);
  }

  // optional string selected_inspector_switch_segment_identifier = 18;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_selected_inspector_switch_segment_identifier().data(), static_cast<int>(this->_internal_selected_inspector_switch_segment_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.ViewStateArchive.selected_inspector_switch_segment_identifier");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_selected_inspector_switch_segment_identifier(), target);
  }

  // optional bool inspector_hidden = 19;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_inspector_hidden(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.ViewStateArchive)
  return target;
}

size_t ViewStateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.ViewStateArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.ChartUIState chart_ui_state = 8;
  total_size += 1UL * this->_internal_chart_ui_state_size();
  for (const auto& msg : this->_impl_.chart_ui_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string selected_inspector_switch_segment_identifier = 18;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_selected_inspector_switch_segment_identifier());
    }

    // optional .TSP.Point visible_rect_origin = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.visible_rect_origin_);
    }

    // optional .TSP.Reference selection = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.selection_);
    }

    // optional .TSP.Reference selection_model = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.selection_model_);
    }

    // optional .TSP.Size visible_rect_size = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.visible_rect_size_);
    }

    // optional .TSP.Point window_frame_origin = 16;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.window_frame_origin_);
    }

    // optional .TSP.Size window_frame_size = 17;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.window_frame_size_);
    }

    // optional float OBSOLETE_view_scale = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool OBSOLETE_landscape = 3;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool master_drawables_selectable = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool layout_borders_visible = 10 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool word_count_hud_visible = 11 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional .TP.ViewScaleMode view_scale_mode = 14 [default = ViewScaleMode_UserDefined];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_view_scale_mode());
    }

    // optional bool shows_page_navigator = 13 [default = false];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool inspector_hidden = 19;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool ruler_visible = 9 [default = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional bool shows_comments = 12 [default = true];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional float view_scale = 15 [default = 1.25];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewStateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewStateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewStateArchive::GetClassData() const { return &_class_data_; }


void ViewStateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewStateArchive*>(&to_msg);
  auto& from = static_cast<const ViewStateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TP.ViewStateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chart_ui_state_.MergeFrom(from._impl_.chart_ui_state_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_selected_inspector_switch_segment_identifier(from._internal_selected_inspector_switch_segment_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_visible_rect_origin()->::TSP::Point::MergeFrom(
          from._internal_visible_rect_origin());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_selection()->::TSP::Reference::MergeFrom(
          from._internal_selection());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_selection_model()->::TSP::Reference::MergeFrom(
          from._internal_selection_model());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_visible_rect_size()->::TSP::Size::MergeFrom(
          from._internal_visible_rect_size());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_window_frame_origin()->::TSP::Point::MergeFrom(
          from._internal_window_frame_origin());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_window_frame_size()->::TSP::Size::MergeFrom(
          from._internal_window_frame_size());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.obsolete_view_scale_ = from._impl_.obsolete_view_scale_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.obsolete_landscape_ = from._impl_.obsolete_landscape_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.master_drawables_selectable_ = from._impl_.master_drawables_selectable_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.layout_borders_visible_ = from._impl_.layout_borders_visible_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.word_count_hud_visible_ = from._impl_.word_count_hud_visible_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.view_scale_mode_ = from._impl_.view_scale_mode_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.shows_page_navigator_ = from._impl_.shows_page_navigator_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.inspector_hidden_ = from._impl_.inspector_hidden_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.ruler_visible_ = from._impl_.ruler_visible_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.shows_comments_ = from._impl_.shows_comments_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.view_scale_ = from._impl_.view_scale_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewStateArchive::CopyFrom(const ViewStateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.ViewStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewStateArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.chart_ui_state_))
    return false;
  if (_internal_has_visible_rect_origin()) {
    if (!_impl_.visible_rect_origin_->IsInitialized()) return false;
  }
  if (_internal_has_selection()) {
    if (!_impl_.selection_->IsInitialized()) return false;
  }
  if (_internal_has_selection_model()) {
    if (!_impl_.selection_model_->IsInitialized()) return false;
  }
  if (_internal_has_visible_rect_size()) {
    if (!_impl_.visible_rect_size_->IsInitialized()) return false;
  }
  if (_internal_has_window_frame_origin()) {
    if (!_impl_.window_frame_origin_->IsInitialized()) return false;
  }
  if (_internal_has_window_frame_size()) {
    if (!_impl_.window_frame_size_->IsInitialized()) return false;
  }
  return true;
}

void ViewStateArchive::InternalSwap(ViewStateArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.chart_ui_state_.InternalSwap(&other->_impl_.chart_ui_state_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.selected_inspector_switch_segment_identifier_, lhs_arena,
      &other->_impl_.selected_inspector_switch_segment_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewStateArchive, _impl_.inspector_hidden_)
      + sizeof(ViewStateArchive::_impl_.inspector_hidden_)
      - PROTOBUF_FIELD_OFFSET(ViewStateArchive, _impl_.visible_rect_origin_)>(
          reinterpret_cast<char*>(&_impl_.visible_rect_origin_),
          reinterpret_cast<char*>(&other->_impl_.visible_rect_origin_));
  swap(_impl_.ruler_visible_, other->_impl_.ruler_visible_);
  swap(_impl_.shows_comments_, other->_impl_.shows_comments_);
  swap(_impl_.view_scale_, other->_impl_.view_scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewStateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[19]);
}

// ===================================================================

class UIStateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UIStateArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& layout_state(const UIStateArchive* msg);
  static void set_has_layout_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& view_state(const UIStateArchive* msg);
  static void set_has_view_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
UIStateArchive::_Internal::layout_state(const UIStateArchive* msg) {
  return *msg->_impl_.layout_state_;
}
const ::TSP::Reference&
UIStateArchive::_Internal::view_state(const UIStateArchive* msg) {
  return *msg->_impl_.view_state_;
}
void UIStateArchive::clear_layout_state() {
  if (_impl_.layout_state_ != nullptr) _impl_.layout_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void UIStateArchive::clear_view_state() {
  if (_impl_.view_state_ != nullptr) _impl_.view_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
UIStateArchive::UIStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TP.UIStateArchive)
}
UIStateArchive::UIStateArchive(const UIStateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UIStateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.layout_state_){nullptr}
    , decltype(_impl_.view_state_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_layout_state()) {
    _this->_impl_.layout_state_ = new ::TSP::Reference(*from._impl_.layout_state_);
  }
  if (from._internal_has_view_state()) {
    _this->_impl_.view_state_ = new ::TSP::Reference(*from._impl_.view_state_);
  }
  // @@protoc_insertion_point(copy_constructor:TP.UIStateArchive)
}

inline void UIStateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.layout_state_){nullptr}
    , decltype(_impl_.view_state_){nullptr}
  };
}

UIStateArchive::~UIStateArchive() {
  // @@protoc_insertion_point(destructor:TP.UIStateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UIStateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.layout_state_;
  if (this != internal_default_instance()) delete _impl_.view_state_;
}

void UIStateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UIStateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.UIStateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.layout_state_ != nullptr);
      _impl_.layout_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.view_state_ != nullptr);
      _impl_.view_state_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UIStateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference layout_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_layout_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference view_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_view_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UIStateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.UIStateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference layout_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::layout_state(this),
        _Internal::layout_state(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference view_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::view_state(this),
        _Internal::view_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.UIStateArchive)
  return target;
}

size_t UIStateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.UIStateArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference layout_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.layout_state_);
    }

    // optional .TSP.Reference view_state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.view_state_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UIStateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UIStateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UIStateArchive::GetClassData() const { return &_class_data_; }


void UIStateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UIStateArchive*>(&to_msg);
  auto& from = static_cast<const UIStateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TP.UIStateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_layout_state()->::TSP::Reference::MergeFrom(
          from._internal_layout_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_view_state()->::TSP::Reference::MergeFrom(
          from._internal_view_state());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UIStateArchive::CopyFrom(const UIStateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.UIStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIStateArchive::IsInitialized() const {
  if (_internal_has_layout_state()) {
    if (!_impl_.layout_state_->IsInitialized()) return false;
  }
  if (_internal_has_view_state()) {
    if (!_impl_.view_state_->IsInitialized()) return false;
  }
  return true;
}

void UIStateArchive::InternalSwap(UIStateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UIStateArchive, _impl_.view_state_)
      + sizeof(UIStateArchive::_impl_.view_state_)
      - PROTOBUF_FIELD_OFFSET(UIStateArchive, _impl_.layout_state_)>(
          reinterpret_cast<char*>(&_impl_.layout_state_),
          reinterpret_cast<char*>(&other->_impl_.layout_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UIStateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[20]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TP
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TP::DocumentArchive*
Arena::CreateMaybeMessage< ::TP::DocumentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::DocumentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::ThemeArchive*
Arena::CreateMaybeMessage< ::TP::ThemeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::ThemeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::SettingsArchive*
Arena::CreateMaybeMessage< ::TP::SettingsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::SettingsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::PlaceholderArchive*
Arena::CreateMaybeMessage< ::TP::PlaceholderArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::PlaceholderArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::FloatingDrawablesArchive_DrawableEntry*
Arena::CreateMaybeMessage< ::TP::FloatingDrawablesArchive_DrawableEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::FloatingDrawablesArchive_DrawableEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::FloatingDrawablesArchive_PageGroup*
Arena::CreateMaybeMessage< ::TP::FloatingDrawablesArchive_PageGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::FloatingDrawablesArchive_PageGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::FloatingDrawablesArchive*
Arena::CreateMaybeMessage< ::TP::FloatingDrawablesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::FloatingDrawablesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::DrawablesZOrderArchive*
Arena::CreateMaybeMessage< ::TP::DrawablesZOrderArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::DrawablesZOrderArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::PageMasterArchive*
Arena::CreateMaybeMessage< ::TP::PageMasterArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::PageMasterArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::SectionArchive*
Arena::CreateMaybeMessage< ::TP::SectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::SectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::AnchorPosArchive*
Arena::CreateMaybeMessage< ::TP::AnchorPosArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::AnchorPosArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::TargetHintArchive*
Arena::CreateMaybeMessage< ::TP::TargetHintArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::TargetHintArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::PageHintArchive*
Arena::CreateMaybeMessage< ::TP::PageHintArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::PageHintArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::SectionHintArchive*
Arena::CreateMaybeMessage< ::TP::SectionHintArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::SectionHintArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::TextboxHintArchive*
Arena::CreateMaybeMessage< ::TP::TextboxHintArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::TextboxHintArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::TopicNumberEntryArchive*
Arena::CreateMaybeMessage< ::TP::TopicNumberEntryArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::TopicNumberEntryArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::TopicNumberHintsArchive*
Arena::CreateMaybeMessage< ::TP::TopicNumberHintsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::TopicNumberHintsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::LayoutStateArchive*
Arena::CreateMaybeMessage< ::TP::LayoutStateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::LayoutStateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::CanvasSelectionArchive*
Arena::CreateMaybeMessage< ::TP::CanvasSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::CanvasSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::ViewStateArchive*
Arena::CreateMaybeMessage< ::TP::ViewStateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::ViewStateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::UIStateArchive*
Arena::CreateMaybeMessage< ::TP::UIStateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::UIStateArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
