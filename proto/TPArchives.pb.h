// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TPArchives.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TPArchives_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TPArchives_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSDArchives.pb.h"
#include "TSKArchives.pb.h"
#include "TSPMessages.pb.h"
#include "TSWPArchives.pb.h"
#include "TSSArchives.pb.h"
#include "TSAArchives.pb.h"
#include "TSCHArchives.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TPArchives_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TPArchives_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TPArchives_2eproto;
namespace TP {
class AnchorPosArchive;
struct AnchorPosArchiveDefaultTypeInternal;
extern AnchorPosArchiveDefaultTypeInternal _AnchorPosArchive_default_instance_;
class CanvasSelectionArchive;
struct CanvasSelectionArchiveDefaultTypeInternal;
extern CanvasSelectionArchiveDefaultTypeInternal _CanvasSelectionArchive_default_instance_;
class DocumentArchive;
struct DocumentArchiveDefaultTypeInternal;
extern DocumentArchiveDefaultTypeInternal _DocumentArchive_default_instance_;
class DrawablesZOrderArchive;
struct DrawablesZOrderArchiveDefaultTypeInternal;
extern DrawablesZOrderArchiveDefaultTypeInternal _DrawablesZOrderArchive_default_instance_;
class FloatingDrawablesArchive;
struct FloatingDrawablesArchiveDefaultTypeInternal;
extern FloatingDrawablesArchiveDefaultTypeInternal _FloatingDrawablesArchive_default_instance_;
class FloatingDrawablesArchive_DrawableEntry;
struct FloatingDrawablesArchive_DrawableEntryDefaultTypeInternal;
extern FloatingDrawablesArchive_DrawableEntryDefaultTypeInternal _FloatingDrawablesArchive_DrawableEntry_default_instance_;
class FloatingDrawablesArchive_PageGroup;
struct FloatingDrawablesArchive_PageGroupDefaultTypeInternal;
extern FloatingDrawablesArchive_PageGroupDefaultTypeInternal _FloatingDrawablesArchive_PageGroup_default_instance_;
class LayoutStateArchive;
struct LayoutStateArchiveDefaultTypeInternal;
extern LayoutStateArchiveDefaultTypeInternal _LayoutStateArchive_default_instance_;
class PageHintArchive;
struct PageHintArchiveDefaultTypeInternal;
extern PageHintArchiveDefaultTypeInternal _PageHintArchive_default_instance_;
class PageMasterArchive;
struct PageMasterArchiveDefaultTypeInternal;
extern PageMasterArchiveDefaultTypeInternal _PageMasterArchive_default_instance_;
class PlaceholderArchive;
struct PlaceholderArchiveDefaultTypeInternal;
extern PlaceholderArchiveDefaultTypeInternal _PlaceholderArchive_default_instance_;
class SectionArchive;
struct SectionArchiveDefaultTypeInternal;
extern SectionArchiveDefaultTypeInternal _SectionArchive_default_instance_;
class SectionHintArchive;
struct SectionHintArchiveDefaultTypeInternal;
extern SectionHintArchiveDefaultTypeInternal _SectionHintArchive_default_instance_;
class SettingsArchive;
struct SettingsArchiveDefaultTypeInternal;
extern SettingsArchiveDefaultTypeInternal _SettingsArchive_default_instance_;
class TargetHintArchive;
struct TargetHintArchiveDefaultTypeInternal;
extern TargetHintArchiveDefaultTypeInternal _TargetHintArchive_default_instance_;
class TextboxHintArchive;
struct TextboxHintArchiveDefaultTypeInternal;
extern TextboxHintArchiveDefaultTypeInternal _TextboxHintArchive_default_instance_;
class ThemeArchive;
struct ThemeArchiveDefaultTypeInternal;
extern ThemeArchiveDefaultTypeInternal _ThemeArchive_default_instance_;
class TopicNumberEntryArchive;
struct TopicNumberEntryArchiveDefaultTypeInternal;
extern TopicNumberEntryArchiveDefaultTypeInternal _TopicNumberEntryArchive_default_instance_;
class TopicNumberHintsArchive;
struct TopicNumberHintsArchiveDefaultTypeInternal;
extern TopicNumberHintsArchiveDefaultTypeInternal _TopicNumberHintsArchive_default_instance_;
class UIStateArchive;
struct UIStateArchiveDefaultTypeInternal;
extern UIStateArchiveDefaultTypeInternal _UIStateArchive_default_instance_;
class ViewStateArchive;
struct ViewStateArchiveDefaultTypeInternal;
extern ViewStateArchiveDefaultTypeInternal _ViewStateArchive_default_instance_;
}  // namespace TP
PROTOBUF_NAMESPACE_OPEN
template<> ::TP::AnchorPosArchive* Arena::CreateMaybeMessage<::TP::AnchorPosArchive>(Arena*);
template<> ::TP::CanvasSelectionArchive* Arena::CreateMaybeMessage<::TP::CanvasSelectionArchive>(Arena*);
template<> ::TP::DocumentArchive* Arena::CreateMaybeMessage<::TP::DocumentArchive>(Arena*);
template<> ::TP::DrawablesZOrderArchive* Arena::CreateMaybeMessage<::TP::DrawablesZOrderArchive>(Arena*);
template<> ::TP::FloatingDrawablesArchive* Arena::CreateMaybeMessage<::TP::FloatingDrawablesArchive>(Arena*);
template<> ::TP::FloatingDrawablesArchive_DrawableEntry* Arena::CreateMaybeMessage<::TP::FloatingDrawablesArchive_DrawableEntry>(Arena*);
template<> ::TP::FloatingDrawablesArchive_PageGroup* Arena::CreateMaybeMessage<::TP::FloatingDrawablesArchive_PageGroup>(Arena*);
template<> ::TP::LayoutStateArchive* Arena::CreateMaybeMessage<::TP::LayoutStateArchive>(Arena*);
template<> ::TP::PageHintArchive* Arena::CreateMaybeMessage<::TP::PageHintArchive>(Arena*);
template<> ::TP::PageMasterArchive* Arena::CreateMaybeMessage<::TP::PageMasterArchive>(Arena*);
template<> ::TP::PlaceholderArchive* Arena::CreateMaybeMessage<::TP::PlaceholderArchive>(Arena*);
template<> ::TP::SectionArchive* Arena::CreateMaybeMessage<::TP::SectionArchive>(Arena*);
template<> ::TP::SectionHintArchive* Arena::CreateMaybeMessage<::TP::SectionHintArchive>(Arena*);
template<> ::TP::SettingsArchive* Arena::CreateMaybeMessage<::TP::SettingsArchive>(Arena*);
template<> ::TP::TargetHintArchive* Arena::CreateMaybeMessage<::TP::TargetHintArchive>(Arena*);
template<> ::TP::TextboxHintArchive* Arena::CreateMaybeMessage<::TP::TextboxHintArchive>(Arena*);
template<> ::TP::ThemeArchive* Arena::CreateMaybeMessage<::TP::ThemeArchive>(Arena*);
template<> ::TP::TopicNumberEntryArchive* Arena::CreateMaybeMessage<::TP::TopicNumberEntryArchive>(Arena*);
template<> ::TP::TopicNumberHintsArchive* Arena::CreateMaybeMessage<::TP::TopicNumberHintsArchive>(Arena*);
template<> ::TP::UIStateArchive* Arena::CreateMaybeMessage<::TP::UIStateArchive>(Arena*);
template<> ::TP::ViewStateArchive* Arena::CreateMaybeMessage<::TP::ViewStateArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TP {

enum SettingsArchive_FootnoteKind : int {
  SettingsArchive_FootnoteKind_kFootnoteKindFootnotes = 0,
  SettingsArchive_FootnoteKind_kFootnoteKindDocumentEndnotes = 1,
  SettingsArchive_FootnoteKind_kFootnoteKindSectionEndnotes = 2
};
bool SettingsArchive_FootnoteKind_IsValid(int value);
constexpr SettingsArchive_FootnoteKind SettingsArchive_FootnoteKind_FootnoteKind_MIN = SettingsArchive_FootnoteKind_kFootnoteKindFootnotes;
constexpr SettingsArchive_FootnoteKind SettingsArchive_FootnoteKind_FootnoteKind_MAX = SettingsArchive_FootnoteKind_kFootnoteKindSectionEndnotes;
constexpr int SettingsArchive_FootnoteKind_FootnoteKind_ARRAYSIZE = SettingsArchive_FootnoteKind_FootnoteKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SettingsArchive_FootnoteKind_descriptor();
template<typename T>
inline const std::string& SettingsArchive_FootnoteKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SettingsArchive_FootnoteKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SettingsArchive_FootnoteKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SettingsArchive_FootnoteKind_descriptor(), enum_t_value);
}
inline bool SettingsArchive_FootnoteKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SettingsArchive_FootnoteKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SettingsArchive_FootnoteKind>(
    SettingsArchive_FootnoteKind_descriptor(), name, value);
}
enum SettingsArchive_FootnoteFormat : int {
  SettingsArchive_FootnoteFormat_kFootnoteFormatNumeric = 0,
  SettingsArchive_FootnoteFormat_kFootnoteFormatRoman = 1,
  SettingsArchive_FootnoteFormat_kFootnoteFormatSymbolic = 2,
  SettingsArchive_FootnoteFormat_kFootnoteFormatJapaneseNumeric = 3,
  SettingsArchive_FootnoteFormat_kFootnoteFormatJapaneseIdeographic = 4
};
bool SettingsArchive_FootnoteFormat_IsValid(int value);
constexpr SettingsArchive_FootnoteFormat SettingsArchive_FootnoteFormat_FootnoteFormat_MIN = SettingsArchive_FootnoteFormat_kFootnoteFormatNumeric;
constexpr SettingsArchive_FootnoteFormat SettingsArchive_FootnoteFormat_FootnoteFormat_MAX = SettingsArchive_FootnoteFormat_kFootnoteFormatJapaneseIdeographic;
constexpr int SettingsArchive_FootnoteFormat_FootnoteFormat_ARRAYSIZE = SettingsArchive_FootnoteFormat_FootnoteFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SettingsArchive_FootnoteFormat_descriptor();
template<typename T>
inline const std::string& SettingsArchive_FootnoteFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SettingsArchive_FootnoteFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SettingsArchive_FootnoteFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SettingsArchive_FootnoteFormat_descriptor(), enum_t_value);
}
inline bool SettingsArchive_FootnoteFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SettingsArchive_FootnoteFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SettingsArchive_FootnoteFormat>(
    SettingsArchive_FootnoteFormat_descriptor(), name, value);
}
enum SettingsArchive_FootnoteNumbering : int {
  SettingsArchive_FootnoteNumbering_kFootnoteNumberingContinuous = 0,
  SettingsArchive_FootnoteNumbering_kFootnoteNumberingRestartEachPage = 1,
  SettingsArchive_FootnoteNumbering_kFootnoteNumberingRestartEachSection = 2
};
bool SettingsArchive_FootnoteNumbering_IsValid(int value);
constexpr SettingsArchive_FootnoteNumbering SettingsArchive_FootnoteNumbering_FootnoteNumbering_MIN = SettingsArchive_FootnoteNumbering_kFootnoteNumberingContinuous;
constexpr SettingsArchive_FootnoteNumbering SettingsArchive_FootnoteNumbering_FootnoteNumbering_MAX = SettingsArchive_FootnoteNumbering_kFootnoteNumberingRestartEachSection;
constexpr int SettingsArchive_FootnoteNumbering_FootnoteNumbering_ARRAYSIZE = SettingsArchive_FootnoteNumbering_FootnoteNumbering_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SettingsArchive_FootnoteNumbering_descriptor();
template<typename T>
inline const std::string& SettingsArchive_FootnoteNumbering_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SettingsArchive_FootnoteNumbering>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SettingsArchive_FootnoteNumbering_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SettingsArchive_FootnoteNumbering_descriptor(), enum_t_value);
}
inline bool SettingsArchive_FootnoteNumbering_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SettingsArchive_FootnoteNumbering* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SettingsArchive_FootnoteNumbering>(
    SettingsArchive_FootnoteNumbering_descriptor(), name, value);
}
enum PageHintArchive_PageKind : int {
  PageHintArchive_PageKind_kPageKindNone = 0,
  PageHintArchive_PageKind_kPageKindText = 1,
  PageHintArchive_PageKind_kPageKindFiller = 2,
  PageHintArchive_PageKind_kPageKindOrphan = 3,
  PageHintArchive_PageKind_kPageKindEndnote = 4,
  PageHintArchive_PageKind_kPageKindDirty = 5,
  PageHintArchive_PageKind_kTPPageKindPageLayout = 6
};
bool PageHintArchive_PageKind_IsValid(int value);
constexpr PageHintArchive_PageKind PageHintArchive_PageKind_PageKind_MIN = PageHintArchive_PageKind_kPageKindNone;
constexpr PageHintArchive_PageKind PageHintArchive_PageKind_PageKind_MAX = PageHintArchive_PageKind_kTPPageKindPageLayout;
constexpr int PageHintArchive_PageKind_PageKind_ARRAYSIZE = PageHintArchive_PageKind_PageKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PageHintArchive_PageKind_descriptor();
template<typename T>
inline const std::string& PageHintArchive_PageKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PageHintArchive_PageKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PageHintArchive_PageKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PageHintArchive_PageKind_descriptor(), enum_t_value);
}
inline bool PageHintArchive_PageKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PageHintArchive_PageKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PageHintArchive_PageKind>(
    PageHintArchive_PageKind_descriptor(), name, value);
}
enum ViewScaleMode : int {
  ViewScaleMode_UserDefined = 0,
  ViewScaleMode_FitWidth = 1,
  ViewScaleMode_FirPage = 2
};
bool ViewScaleMode_IsValid(int value);
constexpr ViewScaleMode ViewScaleMode_MIN = ViewScaleMode_UserDefined;
constexpr ViewScaleMode ViewScaleMode_MAX = ViewScaleMode_FirPage;
constexpr int ViewScaleMode_ARRAYSIZE = ViewScaleMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ViewScaleMode_descriptor();
template<typename T>
inline const std::string& ViewScaleMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ViewScaleMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ViewScaleMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ViewScaleMode_descriptor(), enum_t_value);
}
inline bool ViewScaleMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ViewScaleMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ViewScaleMode>(
    ViewScaleMode_descriptor(), name, value);
}
// ===================================================================

class DocumentArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.DocumentArchive) */ {
 public:
  inline DocumentArchive() : DocumentArchive(nullptr) {}
  ~DocumentArchive() override;
  explicit PROTOBUF_CONSTEXPR DocumentArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DocumentArchive(const DocumentArchive& from);
  DocumentArchive(DocumentArchive&& from) noexcept
    : DocumentArchive() {
    *this = ::std::move(from);
  }

  inline DocumentArchive& operator=(const DocumentArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DocumentArchive& operator=(DocumentArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DocumentArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DocumentArchive* internal_default_instance() {
    return reinterpret_cast<const DocumentArchive*>(
               &_DocumentArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DocumentArchive& a, DocumentArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DocumentArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DocumentArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DocumentArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DocumentArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DocumentArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DocumentArchive& from) {
    DocumentArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocumentArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.DocumentArchive";
  }
  protected:
  explicit DocumentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCitationRecordsFieldNumber = 13,
    kTocStylesFieldNumber = 14,
    kChangeSessionsFieldNumber = 16,
    kPrinterIdFieldNumber = 43,
    kPaperIdFieldNumber = 44,
    kStylesheetFieldNumber = 2,
    kFloatingDrawablesFieldNumber = 3,
    kBodyStorageFieldNumber = 4,
    kSectionFieldNumber = 5,
    kThemeFieldNumber = 6,
    kSettingsFieldNumber = 7,
    kDeprecatedLayoutStateFieldNumber = 11,
    kDeprecatedViewStateFieldNumber = 12,
    kSuperFieldNumber = 15,
    kDrawablesZorderFieldNumber = 20,
    kTablesCustomFormatListFieldNumber = 41,
    kPageWidthFieldNumber = 30,
    kPageHeightFieldNumber = 31,
    kLeftMarginFieldNumber = 32,
    kRightMarginFieldNumber = 33,
    kTopMarginFieldNumber = 34,
    kBottomMarginFieldNumber = 35,
    kHeaderMarginFieldNumber = 36,
    kUsesSingleHeaderFooterFieldNumber = 21,
    kLayoutBodyVerticallyFieldNumber = 39,
    kChangeTrackingEnabledFieldNumber = 40,
    kChangeTrackingPausedFieldNumber = 45,
    kFooterMarginFieldNumber = 37,
    kPageScaleFieldNumber = 38,
    kOrientationFieldNumber = 42,
  };
  // repeated .TSP.Reference citation_records = 13;
  int citation_records_size() const;
  private:
  int _internal_citation_records_size() const;
  public:
  void clear_citation_records();
  ::TSP::Reference* mutable_citation_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_citation_records();
  private:
  const ::TSP::Reference& _internal_citation_records(int index) const;
  ::TSP::Reference* _internal_add_citation_records();
  public:
  const ::TSP::Reference& citation_records(int index) const;
  ::TSP::Reference* add_citation_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      citation_records() const;

  // repeated .TSP.Reference toc_styles = 14;
  int toc_styles_size() const;
  private:
  int _internal_toc_styles_size() const;
  public:
  void clear_toc_styles();
  ::TSP::Reference* mutable_toc_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_toc_styles();
  private:
  const ::TSP::Reference& _internal_toc_styles(int index) const;
  ::TSP::Reference* _internal_add_toc_styles();
  public:
  const ::TSP::Reference& toc_styles(int index) const;
  ::TSP::Reference* add_toc_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      toc_styles() const;

  // repeated .TSP.Reference change_sessions = 16;
  int change_sessions_size() const;
  private:
  int _internal_change_sessions_size() const;
  public:
  void clear_change_sessions();
  ::TSP::Reference* mutable_change_sessions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_change_sessions();
  private:
  const ::TSP::Reference& _internal_change_sessions(int index) const;
  ::TSP::Reference* _internal_add_change_sessions();
  public:
  const ::TSP::Reference& change_sessions(int index) const;
  ::TSP::Reference* add_change_sessions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      change_sessions() const;

  // optional string printer_id = 43;
  bool has_printer_id() const;
  private:
  bool _internal_has_printer_id() const;
  public:
  void clear_printer_id();
  const std::string& printer_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_printer_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_printer_id();
  PROTOBUF_NODISCARD std::string* release_printer_id();
  void set_allocated_printer_id(std::string* printer_id);
  private:
  const std::string& _internal_printer_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_printer_id(const std::string& value);
  std::string* _internal_mutable_printer_id();
  public:

  // optional string paper_id = 44;
  bool has_paper_id() const;
  private:
  bool _internal_has_paper_id() const;
  public:
  void clear_paper_id();
  const std::string& paper_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_paper_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_paper_id();
  PROTOBUF_NODISCARD std::string* release_paper_id();
  void set_allocated_paper_id(std::string* paper_id);
  private:
  const std::string& _internal_paper_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_paper_id(const std::string& value);
  std::string* _internal_mutable_paper_id();
  public:

  // optional .TSP.Reference stylesheet = 2;
  bool has_stylesheet() const;
  private:
  bool _internal_has_stylesheet() const;
  public:
  void clear_stylesheet();
  const ::TSP::Reference& stylesheet() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_stylesheet();
  ::TSP::Reference* mutable_stylesheet();
  void set_allocated_stylesheet(::TSP::Reference* stylesheet);
  private:
  const ::TSP::Reference& _internal_stylesheet() const;
  ::TSP::Reference* _internal_mutable_stylesheet();
  public:
  void unsafe_arena_set_allocated_stylesheet(
      ::TSP::Reference* stylesheet);
  ::TSP::Reference* unsafe_arena_release_stylesheet();

  // optional .TSP.Reference floating_drawables = 3;
  bool has_floating_drawables() const;
  private:
  bool _internal_has_floating_drawables() const;
  public:
  void clear_floating_drawables();
  const ::TSP::Reference& floating_drawables() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_floating_drawables();
  ::TSP::Reference* mutable_floating_drawables();
  void set_allocated_floating_drawables(::TSP::Reference* floating_drawables);
  private:
  const ::TSP::Reference& _internal_floating_drawables() const;
  ::TSP::Reference* _internal_mutable_floating_drawables();
  public:
  void unsafe_arena_set_allocated_floating_drawables(
      ::TSP::Reference* floating_drawables);
  ::TSP::Reference* unsafe_arena_release_floating_drawables();

  // optional .TSP.Reference body_storage = 4;
  bool has_body_storage() const;
  private:
  bool _internal_has_body_storage() const;
  public:
  void clear_body_storage();
  const ::TSP::Reference& body_storage() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_body_storage();
  ::TSP::Reference* mutable_body_storage();
  void set_allocated_body_storage(::TSP::Reference* body_storage);
  private:
  const ::TSP::Reference& _internal_body_storage() const;
  ::TSP::Reference* _internal_mutable_body_storage();
  public:
  void unsafe_arena_set_allocated_body_storage(
      ::TSP::Reference* body_storage);
  ::TSP::Reference* unsafe_arena_release_body_storage();

  // optional .TSP.Reference section = 5;
  bool has_section() const;
  private:
  bool _internal_has_section() const;
  public:
  void clear_section();
  const ::TSP::Reference& section() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_section();
  ::TSP::Reference* mutable_section();
  void set_allocated_section(::TSP::Reference* section);
  private:
  const ::TSP::Reference& _internal_section() const;
  ::TSP::Reference* _internal_mutable_section();
  public:
  void unsafe_arena_set_allocated_section(
      ::TSP::Reference* section);
  ::TSP::Reference* unsafe_arena_release_section();

  // optional .TSP.Reference theme = 6;
  bool has_theme() const;
  private:
  bool _internal_has_theme() const;
  public:
  void clear_theme();
  const ::TSP::Reference& theme() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_theme();
  ::TSP::Reference* mutable_theme();
  void set_allocated_theme(::TSP::Reference* theme);
  private:
  const ::TSP::Reference& _internal_theme() const;
  ::TSP::Reference* _internal_mutable_theme();
  public:
  void unsafe_arena_set_allocated_theme(
      ::TSP::Reference* theme);
  ::TSP::Reference* unsafe_arena_release_theme();

  // optional .TSP.Reference settings = 7;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::TSP::Reference& settings() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_settings();
  ::TSP::Reference* mutable_settings();
  void set_allocated_settings(::TSP::Reference* settings);
  private:
  const ::TSP::Reference& _internal_settings() const;
  ::TSP::Reference* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::TSP::Reference* settings);
  ::TSP::Reference* unsafe_arena_release_settings();

  // optional .TSP.Reference deprecated_layout_state = 11;
  bool has_deprecated_layout_state() const;
  private:
  bool _internal_has_deprecated_layout_state() const;
  public:
  void clear_deprecated_layout_state();
  const ::TSP::Reference& deprecated_layout_state() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_deprecated_layout_state();
  ::TSP::Reference* mutable_deprecated_layout_state();
  void set_allocated_deprecated_layout_state(::TSP::Reference* deprecated_layout_state);
  private:
  const ::TSP::Reference& _internal_deprecated_layout_state() const;
  ::TSP::Reference* _internal_mutable_deprecated_layout_state();
  public:
  void unsafe_arena_set_allocated_deprecated_layout_state(
      ::TSP::Reference* deprecated_layout_state);
  ::TSP::Reference* unsafe_arena_release_deprecated_layout_state();

  // optional .TSP.Reference deprecated_view_state = 12;
  bool has_deprecated_view_state() const;
  private:
  bool _internal_has_deprecated_view_state() const;
  public:
  void clear_deprecated_view_state();
  const ::TSP::Reference& deprecated_view_state() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_deprecated_view_state();
  ::TSP::Reference* mutable_deprecated_view_state();
  void set_allocated_deprecated_view_state(::TSP::Reference* deprecated_view_state);
  private:
  const ::TSP::Reference& _internal_deprecated_view_state() const;
  ::TSP::Reference* _internal_mutable_deprecated_view_state();
  public:
  void unsafe_arena_set_allocated_deprecated_view_state(
      ::TSP::Reference* deprecated_view_state);
  ::TSP::Reference* unsafe_arena_release_deprecated_view_state();

  // required .TSA.DocumentArchive super = 15;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSA::DocumentArchive& super() const;
  PROTOBUF_NODISCARD ::TSA::DocumentArchive* release_super();
  ::TSA::DocumentArchive* mutable_super();
  void set_allocated_super(::TSA::DocumentArchive* super);
  private:
  const ::TSA::DocumentArchive& _internal_super() const;
  ::TSA::DocumentArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSA::DocumentArchive* super);
  ::TSA::DocumentArchive* unsafe_arena_release_super();

  // optional .TSP.Reference drawables_zorder = 20;
  bool has_drawables_zorder() const;
  private:
  bool _internal_has_drawables_zorder() const;
  public:
  void clear_drawables_zorder();
  const ::TSP::Reference& drawables_zorder() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_drawables_zorder();
  ::TSP::Reference* mutable_drawables_zorder();
  void set_allocated_drawables_zorder(::TSP::Reference* drawables_zorder);
  private:
  const ::TSP::Reference& _internal_drawables_zorder() const;
  ::TSP::Reference* _internal_mutable_drawables_zorder();
  public:
  void unsafe_arena_set_allocated_drawables_zorder(
      ::TSP::Reference* drawables_zorder);
  ::TSP::Reference* unsafe_arena_release_drawables_zorder();

  // optional .TSP.Reference tables_custom_format_list = 41;
  bool has_tables_custom_format_list() const;
  private:
  bool _internal_has_tables_custom_format_list() const;
  public:
  void clear_tables_custom_format_list();
  const ::TSP::Reference& tables_custom_format_list() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_tables_custom_format_list();
  ::TSP::Reference* mutable_tables_custom_format_list();
  void set_allocated_tables_custom_format_list(::TSP::Reference* tables_custom_format_list);
  private:
  const ::TSP::Reference& _internal_tables_custom_format_list() const;
  ::TSP::Reference* _internal_mutable_tables_custom_format_list();
  public:
  void unsafe_arena_set_allocated_tables_custom_format_list(
      ::TSP::Reference* tables_custom_format_list);
  ::TSP::Reference* unsafe_arena_release_tables_custom_format_list();

  // optional float page_width = 30;
  bool has_page_width() const;
  private:
  bool _internal_has_page_width() const;
  public:
  void clear_page_width();
  float page_width() const;
  void set_page_width(float value);
  private:
  float _internal_page_width() const;
  void _internal_set_page_width(float value);
  public:

  // optional float page_height = 31;
  bool has_page_height() const;
  private:
  bool _internal_has_page_height() const;
  public:
  void clear_page_height();
  float page_height() const;
  void set_page_height(float value);
  private:
  float _internal_page_height() const;
  void _internal_set_page_height(float value);
  public:

  // optional float left_margin = 32;
  bool has_left_margin() const;
  private:
  bool _internal_has_left_margin() const;
  public:
  void clear_left_margin();
  float left_margin() const;
  void set_left_margin(float value);
  private:
  float _internal_left_margin() const;
  void _internal_set_left_margin(float value);
  public:

  // optional float right_margin = 33;
  bool has_right_margin() const;
  private:
  bool _internal_has_right_margin() const;
  public:
  void clear_right_margin();
  float right_margin() const;
  void set_right_margin(float value);
  private:
  float _internal_right_margin() const;
  void _internal_set_right_margin(float value);
  public:

  // optional float top_margin = 34;
  bool has_top_margin() const;
  private:
  bool _internal_has_top_margin() const;
  public:
  void clear_top_margin();
  float top_margin() const;
  void set_top_margin(float value);
  private:
  float _internal_top_margin() const;
  void _internal_set_top_margin(float value);
  public:

  // optional float bottom_margin = 35;
  bool has_bottom_margin() const;
  private:
  bool _internal_has_bottom_margin() const;
  public:
  void clear_bottom_margin();
  float bottom_margin() const;
  void set_bottom_margin(float value);
  private:
  float _internal_bottom_margin() const;
  void _internal_set_bottom_margin(float value);
  public:

  // optional float header_margin = 36;
  bool has_header_margin() const;
  private:
  bool _internal_has_header_margin() const;
  public:
  void clear_header_margin();
  float header_margin() const;
  void set_header_margin(float value);
  private:
  float _internal_header_margin() const;
  void _internal_set_header_margin(float value);
  public:

  // optional bool uses_single_header_footer = 21;
  bool has_uses_single_header_footer() const;
  private:
  bool _internal_has_uses_single_header_footer() const;
  public:
  void clear_uses_single_header_footer();
  bool uses_single_header_footer() const;
  void set_uses_single_header_footer(bool value);
  private:
  bool _internal_uses_single_header_footer() const;
  void _internal_set_uses_single_header_footer(bool value);
  public:

  // optional bool layout_body_vertically = 39;
  bool has_layout_body_vertically() const;
  private:
  bool _internal_has_layout_body_vertically() const;
  public:
  void clear_layout_body_vertically();
  bool layout_body_vertically() const;
  void set_layout_body_vertically(bool value);
  private:
  bool _internal_layout_body_vertically() const;
  void _internal_set_layout_body_vertically(bool value);
  public:

  // optional bool change_tracking_enabled = 40;
  bool has_change_tracking_enabled() const;
  private:
  bool _internal_has_change_tracking_enabled() const;
  public:
  void clear_change_tracking_enabled();
  bool change_tracking_enabled() const;
  void set_change_tracking_enabled(bool value);
  private:
  bool _internal_change_tracking_enabled() const;
  void _internal_set_change_tracking_enabled(bool value);
  public:

  // optional bool change_tracking_paused = 45;
  bool has_change_tracking_paused() const;
  private:
  bool _internal_has_change_tracking_paused() const;
  public:
  void clear_change_tracking_paused();
  bool change_tracking_paused() const;
  void set_change_tracking_paused(bool value);
  private:
  bool _internal_change_tracking_paused() const;
  void _internal_set_change_tracking_paused(bool value);
  public:

  // optional float footer_margin = 37;
  bool has_footer_margin() const;
  private:
  bool _internal_has_footer_margin() const;
  public:
  void clear_footer_margin();
  float footer_margin() const;
  void set_footer_margin(float value);
  private:
  float _internal_footer_margin() const;
  void _internal_set_footer_margin(float value);
  public:

  // optional float page_scale = 38;
  bool has_page_scale() const;
  private:
  bool _internal_has_page_scale() const;
  public:
  void clear_page_scale();
  float page_scale() const;
  void set_page_scale(float value);
  private:
  float _internal_page_scale() const;
  void _internal_set_page_scale(float value);
  public:

  // optional uint32 orientation = 42 [default = 0];
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  uint32_t orientation() const;
  void set_orientation(uint32_t value);
  private:
  uint32_t _internal_orientation() const;
  void _internal_set_orientation(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TP.DocumentArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > citation_records_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > toc_styles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > change_sessions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr printer_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paper_id_;
    ::TSP::Reference* stylesheet_;
    ::TSP::Reference* floating_drawables_;
    ::TSP::Reference* body_storage_;
    ::TSP::Reference* section_;
    ::TSP::Reference* theme_;
    ::TSP::Reference* settings_;
    ::TSP::Reference* deprecated_layout_state_;
    ::TSP::Reference* deprecated_view_state_;
    ::TSA::DocumentArchive* super_;
    ::TSP::Reference* drawables_zorder_;
    ::TSP::Reference* tables_custom_format_list_;
    float page_width_;
    float page_height_;
    float left_margin_;
    float right_margin_;
    float top_margin_;
    float bottom_margin_;
    float header_margin_;
    bool uses_single_header_footer_;
    bool layout_body_vertically_;
    bool change_tracking_enabled_;
    bool change_tracking_paused_;
    float footer_margin_;
    float page_scale_;
    uint32_t orientation_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class ThemeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.ThemeArchive) */ {
 public:
  inline ThemeArchive() : ThemeArchive(nullptr) {}
  ~ThemeArchive() override;
  explicit PROTOBUF_CONSTEXPR ThemeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThemeArchive(const ThemeArchive& from);
  ThemeArchive(ThemeArchive&& from) noexcept
    : ThemeArchive() {
    *this = ::std::move(from);
  }

  inline ThemeArchive& operator=(const ThemeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThemeArchive& operator=(ThemeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThemeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThemeArchive* internal_default_instance() {
    return reinterpret_cast<const ThemeArchive*>(
               &_ThemeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ThemeArchive& a, ThemeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ThemeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThemeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThemeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ThemeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ThemeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ThemeArchive& from) {
    ThemeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThemeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.ThemeArchive";
  }
  protected:
  explicit ThemeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSS.ThemeArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::ThemeArchive& super() const;
  PROTOBUF_NODISCARD ::TSS::ThemeArchive* release_super();
  ::TSS::ThemeArchive* mutable_super();
  void set_allocated_super(::TSS::ThemeArchive* super);
  private:
  const ::TSS::ThemeArchive& _internal_super() const;
  ::TSS::ThemeArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::ThemeArchive* super);
  ::TSS::ThemeArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TP.ThemeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSS::ThemeArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class SettingsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.SettingsArchive) */ {
 public:
  inline SettingsArchive() : SettingsArchive(nullptr) {}
  ~SettingsArchive() override;
  explicit PROTOBUF_CONSTEXPR SettingsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SettingsArchive(const SettingsArchive& from);
  SettingsArchive(SettingsArchive&& from) noexcept
    : SettingsArchive() {
    *this = ::std::move(from);
  }

  inline SettingsArchive& operator=(const SettingsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SettingsArchive& operator=(SettingsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SettingsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SettingsArchive* internal_default_instance() {
    return reinterpret_cast<const SettingsArchive*>(
               &_SettingsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SettingsArchive& a, SettingsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SettingsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SettingsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SettingsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SettingsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SettingsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SettingsArchive& from) {
    SettingsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettingsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.SettingsArchive";
  }
  protected:
  explicit SettingsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SettingsArchive_FootnoteKind FootnoteKind;
  static constexpr FootnoteKind kFootnoteKindFootnotes =
    SettingsArchive_FootnoteKind_kFootnoteKindFootnotes;
  static constexpr FootnoteKind kFootnoteKindDocumentEndnotes =
    SettingsArchive_FootnoteKind_kFootnoteKindDocumentEndnotes;
  static constexpr FootnoteKind kFootnoteKindSectionEndnotes =
    SettingsArchive_FootnoteKind_kFootnoteKindSectionEndnotes;
  static inline bool FootnoteKind_IsValid(int value) {
    return SettingsArchive_FootnoteKind_IsValid(value);
  }
  static constexpr FootnoteKind FootnoteKind_MIN =
    SettingsArchive_FootnoteKind_FootnoteKind_MIN;
  static constexpr FootnoteKind FootnoteKind_MAX =
    SettingsArchive_FootnoteKind_FootnoteKind_MAX;
  static constexpr int FootnoteKind_ARRAYSIZE =
    SettingsArchive_FootnoteKind_FootnoteKind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FootnoteKind_descriptor() {
    return SettingsArchive_FootnoteKind_descriptor();
  }
  template<typename T>
  static inline const std::string& FootnoteKind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FootnoteKind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FootnoteKind_Name.");
    return SettingsArchive_FootnoteKind_Name(enum_t_value);
  }
  static inline bool FootnoteKind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FootnoteKind* value) {
    return SettingsArchive_FootnoteKind_Parse(name, value);
  }

  typedef SettingsArchive_FootnoteFormat FootnoteFormat;
  static constexpr FootnoteFormat kFootnoteFormatNumeric =
    SettingsArchive_FootnoteFormat_kFootnoteFormatNumeric;
  static constexpr FootnoteFormat kFootnoteFormatRoman =
    SettingsArchive_FootnoteFormat_kFootnoteFormatRoman;
  static constexpr FootnoteFormat kFootnoteFormatSymbolic =
    SettingsArchive_FootnoteFormat_kFootnoteFormatSymbolic;
  static constexpr FootnoteFormat kFootnoteFormatJapaneseNumeric =
    SettingsArchive_FootnoteFormat_kFootnoteFormatJapaneseNumeric;
  static constexpr FootnoteFormat kFootnoteFormatJapaneseIdeographic =
    SettingsArchive_FootnoteFormat_kFootnoteFormatJapaneseIdeographic;
  static inline bool FootnoteFormat_IsValid(int value) {
    return SettingsArchive_FootnoteFormat_IsValid(value);
  }
  static constexpr FootnoteFormat FootnoteFormat_MIN =
    SettingsArchive_FootnoteFormat_FootnoteFormat_MIN;
  static constexpr FootnoteFormat FootnoteFormat_MAX =
    SettingsArchive_FootnoteFormat_FootnoteFormat_MAX;
  static constexpr int FootnoteFormat_ARRAYSIZE =
    SettingsArchive_FootnoteFormat_FootnoteFormat_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FootnoteFormat_descriptor() {
    return SettingsArchive_FootnoteFormat_descriptor();
  }
  template<typename T>
  static inline const std::string& FootnoteFormat_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FootnoteFormat>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FootnoteFormat_Name.");
    return SettingsArchive_FootnoteFormat_Name(enum_t_value);
  }
  static inline bool FootnoteFormat_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FootnoteFormat* value) {
    return SettingsArchive_FootnoteFormat_Parse(name, value);
  }

  typedef SettingsArchive_FootnoteNumbering FootnoteNumbering;
  static constexpr FootnoteNumbering kFootnoteNumberingContinuous =
    SettingsArchive_FootnoteNumbering_kFootnoteNumberingContinuous;
  static constexpr FootnoteNumbering kFootnoteNumberingRestartEachPage =
    SettingsArchive_FootnoteNumbering_kFootnoteNumberingRestartEachPage;
  static constexpr FootnoteNumbering kFootnoteNumberingRestartEachSection =
    SettingsArchive_FootnoteNumbering_kFootnoteNumberingRestartEachSection;
  static inline bool FootnoteNumbering_IsValid(int value) {
    return SettingsArchive_FootnoteNumbering_IsValid(value);
  }
  static constexpr FootnoteNumbering FootnoteNumbering_MIN =
    SettingsArchive_FootnoteNumbering_FootnoteNumbering_MIN;
  static constexpr FootnoteNumbering FootnoteNumbering_MAX =
    SettingsArchive_FootnoteNumbering_FootnoteNumbering_MAX;
  static constexpr int FootnoteNumbering_ARRAYSIZE =
    SettingsArchive_FootnoteNumbering_FootnoteNumbering_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FootnoteNumbering_descriptor() {
    return SettingsArchive_FootnoteNumbering_descriptor();
  }
  template<typename T>
  static inline const std::string& FootnoteNumbering_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FootnoteNumbering>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FootnoteNumbering_Name.");
    return SettingsArchive_FootnoteNumbering_Name(enum_t_value);
  }
  static inline bool FootnoteNumbering_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FootnoteNumbering* value) {
    return SettingsArchive_FootnoteNumbering_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDecimalTabFieldNumber = 20,
    kLanguageFieldNumber = 21,
    kHyphenationLanguageFieldNumber = 22,
    kCreationLocaleFieldNumber = 23,
    kLastLocaleFieldNumber = 24,
    kOrigTemplateFieldNumber = 25,
    kCreationDateFieldNumber = 26,
    kBibliographyFormatFieldNumber = 27,
    kPlaceholderAuthoringFieldNumber = 7,
    kHyphenationFieldNumber = 9,
    kUseLigaturesFieldNumber = 10,
    kTocLinksEnabledFieldNumber = 11,
    kCtBubblesVisibilityFieldNumber = 14,
    kDocumentIsRtlFieldNumber = 18,
    kSectionAuthoringFieldNumber = 40,
    kFootnoteKindFieldNumber = 30,
    kFootnoteFormatFieldNumber = 31,
    kFootnoteNumberingFieldNumber = 32,
    kFootnoteGapFieldNumber = 33,
    kShowCtDeletionsFieldNumber = 13,
    kChangeBarsVisibleFieldNumber = 15,
    kFormatChangesVisibleFieldNumber = 16,
    kAnnotationsVisibleFieldNumber = 17,
    kBodyFieldNumber = 1,
    kHeadersFieldNumber = 2,
    kFootersFieldNumber = 3,
    kPreviewFieldNumber = 4,
    kCopyMoviesFieldNumber = 5,
    kCopyAssetsFieldNumber = 6,
    kLinksEnabledFieldNumber = 8,
    kShowCtMarkupFieldNumber = 12,
  };
  // optional string decimal_tab = 20;
  bool has_decimal_tab() const;
  private:
  bool _internal_has_decimal_tab() const;
  public:
  void clear_decimal_tab();
  const std::string& decimal_tab() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_decimal_tab(ArgT0&& arg0, ArgT... args);
  std::string* mutable_decimal_tab();
  PROTOBUF_NODISCARD std::string* release_decimal_tab();
  void set_allocated_decimal_tab(std::string* decimal_tab);
  private:
  const std::string& _internal_decimal_tab() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_decimal_tab(const std::string& value);
  std::string* _internal_mutable_decimal_tab();
  public:

  // optional string language = 21;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // optional string hyphenation_language = 22;
  bool has_hyphenation_language() const;
  private:
  bool _internal_has_hyphenation_language() const;
  public:
  void clear_hyphenation_language();
  const std::string& hyphenation_language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hyphenation_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hyphenation_language();
  PROTOBUF_NODISCARD std::string* release_hyphenation_language();
  void set_allocated_hyphenation_language(std::string* hyphenation_language);
  private:
  const std::string& _internal_hyphenation_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hyphenation_language(const std::string& value);
  std::string* _internal_mutable_hyphenation_language();
  public:

  // optional string creation_locale = 23;
  bool has_creation_locale() const;
  private:
  bool _internal_has_creation_locale() const;
  public:
  void clear_creation_locale();
  const std::string& creation_locale() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creation_locale(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creation_locale();
  PROTOBUF_NODISCARD std::string* release_creation_locale();
  void set_allocated_creation_locale(std::string* creation_locale);
  private:
  const std::string& _internal_creation_locale() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creation_locale(const std::string& value);
  std::string* _internal_mutable_creation_locale();
  public:

  // optional string last_locale = 24;
  bool has_last_locale() const;
  private:
  bool _internal_has_last_locale() const;
  public:
  void clear_last_locale();
  const std::string& last_locale() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_locale(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_locale();
  PROTOBUF_NODISCARD std::string* release_last_locale();
  void set_allocated_last_locale(std::string* last_locale);
  private:
  const std::string& _internal_last_locale() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_locale(const std::string& value);
  std::string* _internal_mutable_last_locale();
  public:

  // optional string orig_template = 25;
  bool has_orig_template() const;
  private:
  bool _internal_has_orig_template() const;
  public:
  void clear_orig_template();
  const std::string& orig_template() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_orig_template(ArgT0&& arg0, ArgT... args);
  std::string* mutable_orig_template();
  PROTOBUF_NODISCARD std::string* release_orig_template();
  void set_allocated_orig_template(std::string* orig_template);
  private:
  const std::string& _internal_orig_template() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_orig_template(const std::string& value);
  std::string* _internal_mutable_orig_template();
  public:

  // optional string creation_date = 26;
  bool has_creation_date() const;
  private:
  bool _internal_has_creation_date() const;
  public:
  void clear_creation_date();
  const std::string& creation_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creation_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creation_date();
  PROTOBUF_NODISCARD std::string* release_creation_date();
  void set_allocated_creation_date(std::string* creation_date);
  private:
  const std::string& _internal_creation_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creation_date(const std::string& value);
  std::string* _internal_mutable_creation_date();
  public:

  // optional string bibliography_format = 27;
  bool has_bibliography_format() const;
  private:
  bool _internal_has_bibliography_format() const;
  public:
  void clear_bibliography_format();
  const std::string& bibliography_format() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bibliography_format(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bibliography_format();
  PROTOBUF_NODISCARD std::string* release_bibliography_format();
  void set_allocated_bibliography_format(std::string* bibliography_format);
  private:
  const std::string& _internal_bibliography_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bibliography_format(const std::string& value);
  std::string* _internal_mutable_bibliography_format();
  public:

  // optional bool placeholder_authoring = 7 [default = false];
  bool has_placeholder_authoring() const;
  private:
  bool _internal_has_placeholder_authoring() const;
  public:
  void clear_placeholder_authoring();
  bool placeholder_authoring() const;
  void set_placeholder_authoring(bool value);
  private:
  bool _internal_placeholder_authoring() const;
  void _internal_set_placeholder_authoring(bool value);
  public:

  // optional bool hyphenation = 9 [default = false];
  bool has_hyphenation() const;
  private:
  bool _internal_has_hyphenation() const;
  public:
  void clear_hyphenation();
  bool hyphenation() const;
  void set_hyphenation(bool value);
  private:
  bool _internal_hyphenation() const;
  void _internal_set_hyphenation(bool value);
  public:

  // optional bool use_ligatures = 10 [default = false];
  bool has_use_ligatures() const;
  private:
  bool _internal_has_use_ligatures() const;
  public:
  void clear_use_ligatures();
  bool use_ligatures() const;
  void set_use_ligatures(bool value);
  private:
  bool _internal_use_ligatures() const;
  void _internal_set_use_ligatures(bool value);
  public:

  // optional bool toc_links_enabled = 11 [default = false];
  bool has_toc_links_enabled() const;
  private:
  bool _internal_has_toc_links_enabled() const;
  public:
  void clear_toc_links_enabled();
  bool toc_links_enabled() const;
  void set_toc_links_enabled(bool value);
  private:
  bool _internal_toc_links_enabled() const;
  void _internal_set_toc_links_enabled(bool value);
  public:

  // optional int32 ct_bubbles_visibility = 14;
  bool has_ct_bubbles_visibility() const;
  private:
  bool _internal_has_ct_bubbles_visibility() const;
  public:
  void clear_ct_bubbles_visibility();
  int32_t ct_bubbles_visibility() const;
  void set_ct_bubbles_visibility(int32_t value);
  private:
  int32_t _internal_ct_bubbles_visibility() const;
  void _internal_set_ct_bubbles_visibility(int32_t value);
  public:

  // optional bool document_is_rtl = 18 [default = false];
  bool has_document_is_rtl() const;
  private:
  bool _internal_has_document_is_rtl() const;
  public:
  void clear_document_is_rtl();
  bool document_is_rtl() const;
  void set_document_is_rtl(bool value);
  private:
  bool _internal_document_is_rtl() const;
  void _internal_set_document_is_rtl(bool value);
  public:

  // optional bool section_authoring = 40 [default = false];
  bool has_section_authoring() const;
  private:
  bool _internal_has_section_authoring() const;
  public:
  void clear_section_authoring();
  bool section_authoring() const;
  void set_section_authoring(bool value);
  private:
  bool _internal_section_authoring() const;
  void _internal_set_section_authoring(bool value);
  public:

  // optional .TP.SettingsArchive.FootnoteKind footnote_kind = 30;
  bool has_footnote_kind() const;
  private:
  bool _internal_has_footnote_kind() const;
  public:
  void clear_footnote_kind();
  ::TP::SettingsArchive_FootnoteKind footnote_kind() const;
  void set_footnote_kind(::TP::SettingsArchive_FootnoteKind value);
  private:
  ::TP::SettingsArchive_FootnoteKind _internal_footnote_kind() const;
  void _internal_set_footnote_kind(::TP::SettingsArchive_FootnoteKind value);
  public:

  // optional .TP.SettingsArchive.FootnoteFormat footnote_format = 31;
  bool has_footnote_format() const;
  private:
  bool _internal_has_footnote_format() const;
  public:
  void clear_footnote_format();
  ::TP::SettingsArchive_FootnoteFormat footnote_format() const;
  void set_footnote_format(::TP::SettingsArchive_FootnoteFormat value);
  private:
  ::TP::SettingsArchive_FootnoteFormat _internal_footnote_format() const;
  void _internal_set_footnote_format(::TP::SettingsArchive_FootnoteFormat value);
  public:

  // optional .TP.SettingsArchive.FootnoteNumbering footnote_numbering = 32;
  bool has_footnote_numbering() const;
  private:
  bool _internal_has_footnote_numbering() const;
  public:
  void clear_footnote_numbering();
  ::TP::SettingsArchive_FootnoteNumbering footnote_numbering() const;
  void set_footnote_numbering(::TP::SettingsArchive_FootnoteNumbering value);
  private:
  ::TP::SettingsArchive_FootnoteNumbering _internal_footnote_numbering() const;
  void _internal_set_footnote_numbering(::TP::SettingsArchive_FootnoteNumbering value);
  public:

  // optional int32 footnote_gap = 33;
  bool has_footnote_gap() const;
  private:
  bool _internal_has_footnote_gap() const;
  public:
  void clear_footnote_gap();
  int32_t footnote_gap() const;
  void set_footnote_gap(int32_t value);
  private:
  int32_t _internal_footnote_gap() const;
  void _internal_set_footnote_gap(int32_t value);
  public:

  // optional bool show_ct_deletions = 13 [default = true];
  bool has_show_ct_deletions() const;
  private:
  bool _internal_has_show_ct_deletions() const;
  public:
  void clear_show_ct_deletions();
  bool show_ct_deletions() const;
  void set_show_ct_deletions(bool value);
  private:
  bool _internal_show_ct_deletions() const;
  void _internal_set_show_ct_deletions(bool value);
  public:

  // optional bool change_bars_visible = 15 [default = true];
  bool has_change_bars_visible() const;
  private:
  bool _internal_has_change_bars_visible() const;
  public:
  void clear_change_bars_visible();
  bool change_bars_visible() const;
  void set_change_bars_visible(bool value);
  private:
  bool _internal_change_bars_visible() const;
  void _internal_set_change_bars_visible(bool value);
  public:

  // optional bool format_changes_visible = 16 [default = true];
  bool has_format_changes_visible() const;
  private:
  bool _internal_has_format_changes_visible() const;
  public:
  void clear_format_changes_visible();
  bool format_changes_visible() const;
  void set_format_changes_visible(bool value);
  private:
  bool _internal_format_changes_visible() const;
  void _internal_set_format_changes_visible(bool value);
  public:

  // optional bool annotations_visible = 17 [default = true];
  bool has_annotations_visible() const;
  private:
  bool _internal_has_annotations_visible() const;
  public:
  void clear_annotations_visible();
  bool annotations_visible() const;
  void set_annotations_visible(bool value);
  private:
  bool _internal_annotations_visible() const;
  void _internal_set_annotations_visible(bool value);
  public:

  // optional bool body = 1 [default = true];
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  bool body() const;
  void set_body(bool value);
  private:
  bool _internal_body() const;
  void _internal_set_body(bool value);
  public:

  // optional bool headers = 2 [default = true];
  bool has_headers() const;
  private:
  bool _internal_has_headers() const;
  public:
  void clear_headers();
  bool headers() const;
  void set_headers(bool value);
  private:
  bool _internal_headers() const;
  void _internal_set_headers(bool value);
  public:

  // optional bool footers = 3 [default = true];
  bool has_footers() const;
  private:
  bool _internal_has_footers() const;
  public:
  void clear_footers();
  bool footers() const;
  void set_footers(bool value);
  private:
  bool _internal_footers() const;
  void _internal_set_footers(bool value);
  public:

  // optional bool preview = 4 [default = true];
  bool has_preview() const;
  private:
  bool _internal_has_preview() const;
  public:
  void clear_preview();
  bool preview() const;
  void set_preview(bool value);
  private:
  bool _internal_preview() const;
  void _internal_set_preview(bool value);
  public:

  // optional bool copy_movies = 5 [default = true];
  bool has_copy_movies() const;
  private:
  bool _internal_has_copy_movies() const;
  public:
  void clear_copy_movies();
  bool copy_movies() const;
  void set_copy_movies(bool value);
  private:
  bool _internal_copy_movies() const;
  void _internal_set_copy_movies(bool value);
  public:

  // optional bool copy_assets = 6 [default = true];
  bool has_copy_assets() const;
  private:
  bool _internal_has_copy_assets() const;
  public:
  void clear_copy_assets();
  bool copy_assets() const;
  void set_copy_assets(bool value);
  private:
  bool _internal_copy_assets() const;
  void _internal_set_copy_assets(bool value);
  public:

  // optional bool links_enabled = 8 [default = true];
  bool has_links_enabled() const;
  private:
  bool _internal_has_links_enabled() const;
  public:
  void clear_links_enabled();
  bool links_enabled() const;
  void set_links_enabled(bool value);
  private:
  bool _internal_links_enabled() const;
  void _internal_set_links_enabled(bool value);
  public:

  // optional bool show_ct_markup = 12 [default = true];
  bool has_show_ct_markup() const;
  private:
  bool _internal_has_show_ct_markup() const;
  public:
  void clear_show_ct_markup();
  bool show_ct_markup() const;
  void set_show_ct_markup(bool value);
  private:
  bool _internal_show_ct_markup() const;
  void _internal_set_show_ct_markup(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TP.SettingsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr decimal_tab_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hyphenation_language_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creation_locale_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_locale_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orig_template_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creation_date_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bibliography_format_;
    bool placeholder_authoring_;
    bool hyphenation_;
    bool use_ligatures_;
    bool toc_links_enabled_;
    int32_t ct_bubbles_visibility_;
    bool document_is_rtl_;
    bool section_authoring_;
    int footnote_kind_;
    int footnote_format_;
    int footnote_numbering_;
    int32_t footnote_gap_;
    bool show_ct_deletions_;
    bool change_bars_visible_;
    bool format_changes_visible_;
    bool annotations_visible_;
    bool body_;
    bool headers_;
    bool footers_;
    bool preview_;
    bool copy_movies_;
    bool copy_assets_;
    bool links_enabled_;
    bool show_ct_markup_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class PlaceholderArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.PlaceholderArchive) */ {
 public:
  inline PlaceholderArchive() : PlaceholderArchive(nullptr) {}
  ~PlaceholderArchive() override;
  explicit PROTOBUF_CONSTEXPR PlaceholderArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlaceholderArchive(const PlaceholderArchive& from);
  PlaceholderArchive(PlaceholderArchive&& from) noexcept
    : PlaceholderArchive() {
    *this = ::std::move(from);
  }

  inline PlaceholderArchive& operator=(const PlaceholderArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceholderArchive& operator=(PlaceholderArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlaceholderArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaceholderArchive* internal_default_instance() {
    return reinterpret_cast<const PlaceholderArchive*>(
               &_PlaceholderArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PlaceholderArchive& a, PlaceholderArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceholderArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaceholderArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlaceholderArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlaceholderArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlaceholderArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlaceholderArchive& from) {
    PlaceholderArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceholderArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.PlaceholderArchive";
  }
  protected:
  explicit PlaceholderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSWP.ShapeInfoArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::ShapeInfoArchive& super() const;
  PROTOBUF_NODISCARD ::TSWP::ShapeInfoArchive* release_super();
  ::TSWP::ShapeInfoArchive* mutable_super();
  void set_allocated_super(::TSWP::ShapeInfoArchive* super);
  private:
  const ::TSWP::ShapeInfoArchive& _internal_super() const;
  ::TSWP::ShapeInfoArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::ShapeInfoArchive* super);
  ::TSWP::ShapeInfoArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TP.PlaceholderArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSWP::ShapeInfoArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class FloatingDrawablesArchive_DrawableEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.FloatingDrawablesArchive.DrawableEntry) */ {
 public:
  inline FloatingDrawablesArchive_DrawableEntry() : FloatingDrawablesArchive_DrawableEntry(nullptr) {}
  ~FloatingDrawablesArchive_DrawableEntry() override;
  explicit PROTOBUF_CONSTEXPR FloatingDrawablesArchive_DrawableEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FloatingDrawablesArchive_DrawableEntry(const FloatingDrawablesArchive_DrawableEntry& from);
  FloatingDrawablesArchive_DrawableEntry(FloatingDrawablesArchive_DrawableEntry&& from) noexcept
    : FloatingDrawablesArchive_DrawableEntry() {
    *this = ::std::move(from);
  }

  inline FloatingDrawablesArchive_DrawableEntry& operator=(const FloatingDrawablesArchive_DrawableEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatingDrawablesArchive_DrawableEntry& operator=(FloatingDrawablesArchive_DrawableEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FloatingDrawablesArchive_DrawableEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatingDrawablesArchive_DrawableEntry* internal_default_instance() {
    return reinterpret_cast<const FloatingDrawablesArchive_DrawableEntry*>(
               &_FloatingDrawablesArchive_DrawableEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FloatingDrawablesArchive_DrawableEntry& a, FloatingDrawablesArchive_DrawableEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatingDrawablesArchive_DrawableEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatingDrawablesArchive_DrawableEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FloatingDrawablesArchive_DrawableEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FloatingDrawablesArchive_DrawableEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FloatingDrawablesArchive_DrawableEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FloatingDrawablesArchive_DrawableEntry& from) {
    FloatingDrawablesArchive_DrawableEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatingDrawablesArchive_DrawableEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.FloatingDrawablesArchive.DrawableEntry";
  }
  protected:
  explicit FloatingDrawablesArchive_DrawableEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawableFieldNumber = 1,
  };
  // optional .TSP.Reference drawable = 1;
  bool has_drawable() const;
  private:
  bool _internal_has_drawable() const;
  public:
  void clear_drawable();
  const ::TSP::Reference& drawable() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_drawable();
  ::TSP::Reference* mutable_drawable();
  void set_allocated_drawable(::TSP::Reference* drawable);
  private:
  const ::TSP::Reference& _internal_drawable() const;
  ::TSP::Reference* _internal_mutable_drawable();
  public:
  void unsafe_arena_set_allocated_drawable(
      ::TSP::Reference* drawable);
  ::TSP::Reference* unsafe_arena_release_drawable();

  // @@protoc_insertion_point(class_scope:TP.FloatingDrawablesArchive.DrawableEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* drawable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class FloatingDrawablesArchive_PageGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.FloatingDrawablesArchive.PageGroup) */ {
 public:
  inline FloatingDrawablesArchive_PageGroup() : FloatingDrawablesArchive_PageGroup(nullptr) {}
  ~FloatingDrawablesArchive_PageGroup() override;
  explicit PROTOBUF_CONSTEXPR FloatingDrawablesArchive_PageGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FloatingDrawablesArchive_PageGroup(const FloatingDrawablesArchive_PageGroup& from);
  FloatingDrawablesArchive_PageGroup(FloatingDrawablesArchive_PageGroup&& from) noexcept
    : FloatingDrawablesArchive_PageGroup() {
    *this = ::std::move(from);
  }

  inline FloatingDrawablesArchive_PageGroup& operator=(const FloatingDrawablesArchive_PageGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatingDrawablesArchive_PageGroup& operator=(FloatingDrawablesArchive_PageGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FloatingDrawablesArchive_PageGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatingDrawablesArchive_PageGroup* internal_default_instance() {
    return reinterpret_cast<const FloatingDrawablesArchive_PageGroup*>(
               &_FloatingDrawablesArchive_PageGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FloatingDrawablesArchive_PageGroup& a, FloatingDrawablesArchive_PageGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatingDrawablesArchive_PageGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatingDrawablesArchive_PageGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FloatingDrawablesArchive_PageGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FloatingDrawablesArchive_PageGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FloatingDrawablesArchive_PageGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FloatingDrawablesArchive_PageGroup& from) {
    FloatingDrawablesArchive_PageGroup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatingDrawablesArchive_PageGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.FloatingDrawablesArchive.PageGroup";
  }
  protected:
  explicit FloatingDrawablesArchive_PageGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBackgroundDrawablesFieldNumber = 2,
    kForegroundDrawablesFieldNumber = 3,
    kDrawablesFieldNumber = 4,
    kPageIndexFieldNumber = 1,
  };
  // repeated .TP.FloatingDrawablesArchive.DrawableEntry background_drawables = 2;
  int background_drawables_size() const;
  private:
  int _internal_background_drawables_size() const;
  public:
  void clear_background_drawables();
  ::TP::FloatingDrawablesArchive_DrawableEntry* mutable_background_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >*
      mutable_background_drawables();
  private:
  const ::TP::FloatingDrawablesArchive_DrawableEntry& _internal_background_drawables(int index) const;
  ::TP::FloatingDrawablesArchive_DrawableEntry* _internal_add_background_drawables();
  public:
  const ::TP::FloatingDrawablesArchive_DrawableEntry& background_drawables(int index) const;
  ::TP::FloatingDrawablesArchive_DrawableEntry* add_background_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >&
      background_drawables() const;

  // repeated .TP.FloatingDrawablesArchive.DrawableEntry foreground_drawables = 3;
  int foreground_drawables_size() const;
  private:
  int _internal_foreground_drawables_size() const;
  public:
  void clear_foreground_drawables();
  ::TP::FloatingDrawablesArchive_DrawableEntry* mutable_foreground_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >*
      mutable_foreground_drawables();
  private:
  const ::TP::FloatingDrawablesArchive_DrawableEntry& _internal_foreground_drawables(int index) const;
  ::TP::FloatingDrawablesArchive_DrawableEntry* _internal_add_foreground_drawables();
  public:
  const ::TP::FloatingDrawablesArchive_DrawableEntry& foreground_drawables(int index) const;
  ::TP::FloatingDrawablesArchive_DrawableEntry* add_foreground_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >&
      foreground_drawables() const;

  // repeated .TP.FloatingDrawablesArchive.DrawableEntry drawables = 4;
  int drawables_size() const;
  private:
  int _internal_drawables_size() const;
  public:
  void clear_drawables();
  ::TP::FloatingDrawablesArchive_DrawableEntry* mutable_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >*
      mutable_drawables();
  private:
  const ::TP::FloatingDrawablesArchive_DrawableEntry& _internal_drawables(int index) const;
  ::TP::FloatingDrawablesArchive_DrawableEntry* _internal_add_drawables();
  public:
  const ::TP::FloatingDrawablesArchive_DrawableEntry& drawables(int index) const;
  ::TP::FloatingDrawablesArchive_DrawableEntry* add_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >&
      drawables() const;

  // required uint32 page_index = 1;
  bool has_page_index() const;
  private:
  bool _internal_has_page_index() const;
  public:
  void clear_page_index();
  uint32_t page_index() const;
  void set_page_index(uint32_t value);
  private:
  uint32_t _internal_page_index() const;
  void _internal_set_page_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TP.FloatingDrawablesArchive.PageGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry > background_drawables_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry > foreground_drawables_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry > drawables_;
    uint32_t page_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class FloatingDrawablesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.FloatingDrawablesArchive) */ {
 public:
  inline FloatingDrawablesArchive() : FloatingDrawablesArchive(nullptr) {}
  ~FloatingDrawablesArchive() override;
  explicit PROTOBUF_CONSTEXPR FloatingDrawablesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FloatingDrawablesArchive(const FloatingDrawablesArchive& from);
  FloatingDrawablesArchive(FloatingDrawablesArchive&& from) noexcept
    : FloatingDrawablesArchive() {
    *this = ::std::move(from);
  }

  inline FloatingDrawablesArchive& operator=(const FloatingDrawablesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatingDrawablesArchive& operator=(FloatingDrawablesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FloatingDrawablesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatingDrawablesArchive* internal_default_instance() {
    return reinterpret_cast<const FloatingDrawablesArchive*>(
               &_FloatingDrawablesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FloatingDrawablesArchive& a, FloatingDrawablesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatingDrawablesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatingDrawablesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FloatingDrawablesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FloatingDrawablesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FloatingDrawablesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FloatingDrawablesArchive& from) {
    FloatingDrawablesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatingDrawablesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.FloatingDrawablesArchive";
  }
  protected:
  explicit FloatingDrawablesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FloatingDrawablesArchive_DrawableEntry DrawableEntry;
  typedef FloatingDrawablesArchive_PageGroup PageGroup;

  // accessors -------------------------------------------------------

  enum : int {
    kPageGroupsFieldNumber = 1,
  };
  // repeated .TP.FloatingDrawablesArchive.PageGroup page_groups = 1;
  int page_groups_size() const;
  private:
  int _internal_page_groups_size() const;
  public:
  void clear_page_groups();
  ::TP::FloatingDrawablesArchive_PageGroup* mutable_page_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_PageGroup >*
      mutable_page_groups();
  private:
  const ::TP::FloatingDrawablesArchive_PageGroup& _internal_page_groups(int index) const;
  ::TP::FloatingDrawablesArchive_PageGroup* _internal_add_page_groups();
  public:
  const ::TP::FloatingDrawablesArchive_PageGroup& page_groups(int index) const;
  ::TP::FloatingDrawablesArchive_PageGroup* add_page_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_PageGroup >&
      page_groups() const;

  // @@protoc_insertion_point(class_scope:TP.FloatingDrawablesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_PageGroup > page_groups_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class DrawablesZOrderArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.DrawablesZOrderArchive) */ {
 public:
  inline DrawablesZOrderArchive() : DrawablesZOrderArchive(nullptr) {}
  ~DrawablesZOrderArchive() override;
  explicit PROTOBUF_CONSTEXPR DrawablesZOrderArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrawablesZOrderArchive(const DrawablesZOrderArchive& from);
  DrawablesZOrderArchive(DrawablesZOrderArchive&& from) noexcept
    : DrawablesZOrderArchive() {
    *this = ::std::move(from);
  }

  inline DrawablesZOrderArchive& operator=(const DrawablesZOrderArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawablesZOrderArchive& operator=(DrawablesZOrderArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrawablesZOrderArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrawablesZOrderArchive* internal_default_instance() {
    return reinterpret_cast<const DrawablesZOrderArchive*>(
               &_DrawablesZOrderArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DrawablesZOrderArchive& a, DrawablesZOrderArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawablesZOrderArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawablesZOrderArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DrawablesZOrderArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DrawablesZOrderArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DrawablesZOrderArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DrawablesZOrderArchive& from) {
    DrawablesZOrderArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawablesZOrderArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.DrawablesZOrderArchive";
  }
  protected:
  explicit DrawablesZOrderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawablesFieldNumber = 1,
  };
  // repeated .TSP.Reference drawables = 1;
  int drawables_size() const;
  private:
  int _internal_drawables_size() const;
  public:
  void clear_drawables();
  ::TSP::Reference* mutable_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_drawables();
  private:
  const ::TSP::Reference& _internal_drawables(int index) const;
  ::TSP::Reference* _internal_add_drawables();
  public:
  const ::TSP::Reference& drawables(int index) const;
  ::TSP::Reference* add_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      drawables() const;

  // @@protoc_insertion_point(class_scope:TP.DrawablesZOrderArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > drawables_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class PageMasterArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.PageMasterArchive) */ {
 public:
  inline PageMasterArchive() : PageMasterArchive(nullptr) {}
  ~PageMasterArchive() override;
  explicit PROTOBUF_CONSTEXPR PageMasterArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PageMasterArchive(const PageMasterArchive& from);
  PageMasterArchive(PageMasterArchive&& from) noexcept
    : PageMasterArchive() {
    *this = ::std::move(from);
  }

  inline PageMasterArchive& operator=(const PageMasterArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageMasterArchive& operator=(PageMasterArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PageMasterArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PageMasterArchive* internal_default_instance() {
    return reinterpret_cast<const PageMasterArchive*>(
               &_PageMasterArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PageMasterArchive& a, PageMasterArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PageMasterArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PageMasterArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PageMasterArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PageMasterArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PageMasterArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PageMasterArchive& from) {
    PageMasterArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PageMasterArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.PageMasterArchive";
  }
  protected:
  explicit PageMasterArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 1,
    kFootersFieldNumber = 2,
    kMasterDrawablesFieldNumber = 3,
  };
  // repeated .TSP.Reference headers = 1;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  ::TSP::Reference* mutable_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_headers();
  private:
  const ::TSP::Reference& _internal_headers(int index) const;
  ::TSP::Reference* _internal_add_headers();
  public:
  const ::TSP::Reference& headers(int index) const;
  ::TSP::Reference* add_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      headers() const;

  // repeated .TSP.Reference footers = 2;
  int footers_size() const;
  private:
  int _internal_footers_size() const;
  public:
  void clear_footers();
  ::TSP::Reference* mutable_footers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_footers();
  private:
  const ::TSP::Reference& _internal_footers(int index) const;
  ::TSP::Reference* _internal_add_footers();
  public:
  const ::TSP::Reference& footers(int index) const;
  ::TSP::Reference* add_footers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      footers() const;

  // repeated .TSP.Reference master_drawables = 3;
  int master_drawables_size() const;
  private:
  int _internal_master_drawables_size() const;
  public:
  void clear_master_drawables();
  ::TSP::Reference* mutable_master_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_master_drawables();
  private:
  const ::TSP::Reference& _internal_master_drawables(int index) const;
  ::TSP::Reference* _internal_add_master_drawables();
  public:
  const ::TSP::Reference& master_drawables(int index) const;
  ::TSP::Reference* add_master_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      master_drawables() const;

  // @@protoc_insertion_point(class_scope:TP.PageMasterArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > headers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > footers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > master_drawables_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class SectionArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.SectionArchive) */ {
 public:
  inline SectionArchive() : SectionArchive(nullptr) {}
  ~SectionArchive() override;
  explicit PROTOBUF_CONSTEXPR SectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SectionArchive(const SectionArchive& from);
  SectionArchive(SectionArchive&& from) noexcept
    : SectionArchive() {
    *this = ::std::move(from);
  }

  inline SectionArchive& operator=(const SectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SectionArchive& operator=(SectionArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SectionArchive* internal_default_instance() {
    return reinterpret_cast<const SectionArchive*>(
               &_SectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SectionArchive& a, SectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SectionArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SectionArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SectionArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SectionArchive& from) {
    SectionArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SectionArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.SectionArchive";
  }
  protected:
  explicit SectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOBSOLETEHeadersFieldNumber = 3,
    kOBSOLETEFootersFieldNumber = 4,
    kOBSOLETEMasterDrawablesFieldNumber = 14,
    kNameFieldNumber = 26,
    kFirstPageMasterFieldNumber = 23,
    kEvenPageMasterFieldNumber = 24,
    kOddPageMasterFieldNumber = 25,
    kOBSOLETELeftMarginFieldNumber = 5,
    kOBSOLETERightMarginFieldNumber = 6,
    kOBSOLETETopMarginFieldNumber = 7,
    kOBSOLETEBottomMarginFieldNumber = 8,
    kOBSOLETEShowsHeaderFieldNumber = 1,
    kOBSOLETEShowsFooterFieldNumber = 2,
    kOBSOLETELandscapeModeFieldNumber = 13,
    kInheritPreviousHeaderFooterFieldNumber = 17,
    kOBSOLETEHeaderPaddingFieldNumber = 9,
    kOBSOLETEFooterPaddingFieldNumber = 10,
    kOBSOLETEPaperWidthFieldNumber = 11,
    kOBSOLETEPaperHeightFieldNumber = 12,
    kOBSOLETEHeaderMarginFieldNumber = 15,
    kOBSOLETEFooterMarginFieldNumber = 16,
    kSectionStartKindFieldNumber = 20,
    kSectionPageNumberKindFieldNumber = 21,
    kPageMasterFirstPageDifferentFieldNumber = 18,
    kPageMasterEvenOddPagesDifferentFieldNumber = 19,
    kPageMasterFirstPageHidesHeaderFooterFieldNumber = 28,
    kSectionPageNumberStartFieldNumber = 22,
  };
  // repeated .TSP.Reference OBSOLETE_headers = 3;
  int obsolete_headers_size() const;
  private:
  int _internal_obsolete_headers_size() const;
  public:
  void clear_obsolete_headers();
  ::TSP::Reference* mutable_obsolete_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_obsolete_headers();
  private:
  const ::TSP::Reference& _internal_obsolete_headers(int index) const;
  ::TSP::Reference* _internal_add_obsolete_headers();
  public:
  const ::TSP::Reference& obsolete_headers(int index) const;
  ::TSP::Reference* add_obsolete_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      obsolete_headers() const;

  // repeated .TSP.Reference OBSOLETE_footers = 4;
  int obsolete_footers_size() const;
  private:
  int _internal_obsolete_footers_size() const;
  public:
  void clear_obsolete_footers();
  ::TSP::Reference* mutable_obsolete_footers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_obsolete_footers();
  private:
  const ::TSP::Reference& _internal_obsolete_footers(int index) const;
  ::TSP::Reference* _internal_add_obsolete_footers();
  public:
  const ::TSP::Reference& obsolete_footers(int index) const;
  ::TSP::Reference* add_obsolete_footers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      obsolete_footers() const;

  // repeated .TSP.Reference OBSOLETE_master_drawables = 14;
  int obsolete_master_drawables_size() const;
  private:
  int _internal_obsolete_master_drawables_size() const;
  public:
  void clear_obsolete_master_drawables();
  ::TSP::Reference* mutable_obsolete_master_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_obsolete_master_drawables();
  private:
  const ::TSP::Reference& _internal_obsolete_master_drawables(int index) const;
  ::TSP::Reference* _internal_add_obsolete_master_drawables();
  public:
  const ::TSP::Reference& obsolete_master_drawables(int index) const;
  ::TSP::Reference* add_obsolete_master_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      obsolete_master_drawables() const;

  // optional string name = 26;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .TSP.Reference first_page_master = 23;
  bool has_first_page_master() const;
  private:
  bool _internal_has_first_page_master() const;
  public:
  void clear_first_page_master();
  const ::TSP::Reference& first_page_master() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_first_page_master();
  ::TSP::Reference* mutable_first_page_master();
  void set_allocated_first_page_master(::TSP::Reference* first_page_master);
  private:
  const ::TSP::Reference& _internal_first_page_master() const;
  ::TSP::Reference* _internal_mutable_first_page_master();
  public:
  void unsafe_arena_set_allocated_first_page_master(
      ::TSP::Reference* first_page_master);
  ::TSP::Reference* unsafe_arena_release_first_page_master();

  // optional .TSP.Reference even_page_master = 24;
  bool has_even_page_master() const;
  private:
  bool _internal_has_even_page_master() const;
  public:
  void clear_even_page_master();
  const ::TSP::Reference& even_page_master() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_even_page_master();
  ::TSP::Reference* mutable_even_page_master();
  void set_allocated_even_page_master(::TSP::Reference* even_page_master);
  private:
  const ::TSP::Reference& _internal_even_page_master() const;
  ::TSP::Reference* _internal_mutable_even_page_master();
  public:
  void unsafe_arena_set_allocated_even_page_master(
      ::TSP::Reference* even_page_master);
  ::TSP::Reference* unsafe_arena_release_even_page_master();

  // optional .TSP.Reference odd_page_master = 25;
  bool has_odd_page_master() const;
  private:
  bool _internal_has_odd_page_master() const;
  public:
  void clear_odd_page_master();
  const ::TSP::Reference& odd_page_master() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_odd_page_master();
  ::TSP::Reference* mutable_odd_page_master();
  void set_allocated_odd_page_master(::TSP::Reference* odd_page_master);
  private:
  const ::TSP::Reference& _internal_odd_page_master() const;
  ::TSP::Reference* _internal_mutable_odd_page_master();
  public:
  void unsafe_arena_set_allocated_odd_page_master(
      ::TSP::Reference* odd_page_master);
  ::TSP::Reference* unsafe_arena_release_odd_page_master();

  // optional float OBSOLETE_left_margin = 5;
  bool has_obsolete_left_margin() const;
  private:
  bool _internal_has_obsolete_left_margin() const;
  public:
  void clear_obsolete_left_margin();
  float obsolete_left_margin() const;
  void set_obsolete_left_margin(float value);
  private:
  float _internal_obsolete_left_margin() const;
  void _internal_set_obsolete_left_margin(float value);
  public:

  // optional float OBSOLETE_right_margin = 6;
  bool has_obsolete_right_margin() const;
  private:
  bool _internal_has_obsolete_right_margin() const;
  public:
  void clear_obsolete_right_margin();
  float obsolete_right_margin() const;
  void set_obsolete_right_margin(float value);
  private:
  float _internal_obsolete_right_margin() const;
  void _internal_set_obsolete_right_margin(float value);
  public:

  // optional float OBSOLETE_top_margin = 7;
  bool has_obsolete_top_margin() const;
  private:
  bool _internal_has_obsolete_top_margin() const;
  public:
  void clear_obsolete_top_margin();
  float obsolete_top_margin() const;
  void set_obsolete_top_margin(float value);
  private:
  float _internal_obsolete_top_margin() const;
  void _internal_set_obsolete_top_margin(float value);
  public:

  // optional float OBSOLETE_bottom_margin = 8;
  bool has_obsolete_bottom_margin() const;
  private:
  bool _internal_has_obsolete_bottom_margin() const;
  public:
  void clear_obsolete_bottom_margin();
  float obsolete_bottom_margin() const;
  void set_obsolete_bottom_margin(float value);
  private:
  float _internal_obsolete_bottom_margin() const;
  void _internal_set_obsolete_bottom_margin(float value);
  public:

  // optional bool OBSOLETE_shows_header = 1;
  bool has_obsolete_shows_header() const;
  private:
  bool _internal_has_obsolete_shows_header() const;
  public:
  void clear_obsolete_shows_header();
  bool obsolete_shows_header() const;
  void set_obsolete_shows_header(bool value);
  private:
  bool _internal_obsolete_shows_header() const;
  void _internal_set_obsolete_shows_header(bool value);
  public:

  // optional bool OBSOLETE_shows_footer = 2;
  bool has_obsolete_shows_footer() const;
  private:
  bool _internal_has_obsolete_shows_footer() const;
  public:
  void clear_obsolete_shows_footer();
  bool obsolete_shows_footer() const;
  void set_obsolete_shows_footer(bool value);
  private:
  bool _internal_obsolete_shows_footer() const;
  void _internal_set_obsolete_shows_footer(bool value);
  public:

  // optional bool OBSOLETE_landscape_mode = 13;
  bool has_obsolete_landscape_mode() const;
  private:
  bool _internal_has_obsolete_landscape_mode() const;
  public:
  void clear_obsolete_landscape_mode();
  bool obsolete_landscape_mode() const;
  void set_obsolete_landscape_mode(bool value);
  private:
  bool _internal_obsolete_landscape_mode() const;
  void _internal_set_obsolete_landscape_mode(bool value);
  public:

  // optional bool inherit_previous_header_footer = 17;
  bool has_inherit_previous_header_footer() const;
  private:
  bool _internal_has_inherit_previous_header_footer() const;
  public:
  void clear_inherit_previous_header_footer();
  bool inherit_previous_header_footer() const;
  void set_inherit_previous_header_footer(bool value);
  private:
  bool _internal_inherit_previous_header_footer() const;
  void _internal_set_inherit_previous_header_footer(bool value);
  public:

  // optional float OBSOLETE_header_padding = 9;
  bool has_obsolete_header_padding() const;
  private:
  bool _internal_has_obsolete_header_padding() const;
  public:
  void clear_obsolete_header_padding();
  float obsolete_header_padding() const;
  void set_obsolete_header_padding(float value);
  private:
  float _internal_obsolete_header_padding() const;
  void _internal_set_obsolete_header_padding(float value);
  public:

  // optional float OBSOLETE_footer_padding = 10;
  bool has_obsolete_footer_padding() const;
  private:
  bool _internal_has_obsolete_footer_padding() const;
  public:
  void clear_obsolete_footer_padding();
  float obsolete_footer_padding() const;
  void set_obsolete_footer_padding(float value);
  private:
  float _internal_obsolete_footer_padding() const;
  void _internal_set_obsolete_footer_padding(float value);
  public:

  // optional float OBSOLETE_paper_width = 11;
  bool has_obsolete_paper_width() const;
  private:
  bool _internal_has_obsolete_paper_width() const;
  public:
  void clear_obsolete_paper_width();
  float obsolete_paper_width() const;
  void set_obsolete_paper_width(float value);
  private:
  float _internal_obsolete_paper_width() const;
  void _internal_set_obsolete_paper_width(float value);
  public:

  // optional float OBSOLETE_paper_height = 12;
  bool has_obsolete_paper_height() const;
  private:
  bool _internal_has_obsolete_paper_height() const;
  public:
  void clear_obsolete_paper_height();
  float obsolete_paper_height() const;
  void set_obsolete_paper_height(float value);
  private:
  float _internal_obsolete_paper_height() const;
  void _internal_set_obsolete_paper_height(float value);
  public:

  // optional float OBSOLETE_header_margin = 15;
  bool has_obsolete_header_margin() const;
  private:
  bool _internal_has_obsolete_header_margin() const;
  public:
  void clear_obsolete_header_margin();
  float obsolete_header_margin() const;
  void set_obsolete_header_margin(float value);
  private:
  float _internal_obsolete_header_margin() const;
  void _internal_set_obsolete_header_margin(float value);
  public:

  // optional float OBSOLETE_footer_margin = 16;
  bool has_obsolete_footer_margin() const;
  private:
  bool _internal_has_obsolete_footer_margin() const;
  public:
  void clear_obsolete_footer_margin();
  float obsolete_footer_margin() const;
  void set_obsolete_footer_margin(float value);
  private:
  float _internal_obsolete_footer_margin() const;
  void _internal_set_obsolete_footer_margin(float value);
  public:

  // optional uint32 section_start_kind = 20;
  bool has_section_start_kind() const;
  private:
  bool _internal_has_section_start_kind() const;
  public:
  void clear_section_start_kind();
  uint32_t section_start_kind() const;
  void set_section_start_kind(uint32_t value);
  private:
  uint32_t _internal_section_start_kind() const;
  void _internal_set_section_start_kind(uint32_t value);
  public:

  // optional uint32 section_page_number_kind = 21;
  bool has_section_page_number_kind() const;
  private:
  bool _internal_has_section_page_number_kind() const;
  public:
  void clear_section_page_number_kind();
  uint32_t section_page_number_kind() const;
  void set_section_page_number_kind(uint32_t value);
  private:
  uint32_t _internal_section_page_number_kind() const;
  void _internal_set_section_page_number_kind(uint32_t value);
  public:

  // optional bool page_master_first_page_different = 18;
  bool has_page_master_first_page_different() const;
  private:
  bool _internal_has_page_master_first_page_different() const;
  public:
  void clear_page_master_first_page_different();
  bool page_master_first_page_different() const;
  void set_page_master_first_page_different(bool value);
  private:
  bool _internal_page_master_first_page_different() const;
  void _internal_set_page_master_first_page_different(bool value);
  public:

  // optional bool page_master_even_odd_pages_different = 19;
  bool has_page_master_even_odd_pages_different() const;
  private:
  bool _internal_has_page_master_even_odd_pages_different() const;
  public:
  void clear_page_master_even_odd_pages_different();
  bool page_master_even_odd_pages_different() const;
  void set_page_master_even_odd_pages_different(bool value);
  private:
  bool _internal_page_master_even_odd_pages_different() const;
  void _internal_set_page_master_even_odd_pages_different(bool value);
  public:

  // optional bool page_master_first_page_hides_header_footer = 28;
  bool has_page_master_first_page_hides_header_footer() const;
  private:
  bool _internal_has_page_master_first_page_hides_header_footer() const;
  public:
  void clear_page_master_first_page_hides_header_footer();
  bool page_master_first_page_hides_header_footer() const;
  void set_page_master_first_page_hides_header_footer(bool value);
  private:
  bool _internal_page_master_first_page_hides_header_footer() const;
  void _internal_set_page_master_first_page_hides_header_footer(bool value);
  public:

  // optional uint32 section_page_number_start = 22;
  bool has_section_page_number_start() const;
  private:
  bool _internal_has_section_page_number_start() const;
  public:
  void clear_section_page_number_start();
  uint32_t section_page_number_start() const;
  void set_section_page_number_start(uint32_t value);
  private:
  uint32_t _internal_section_page_number_start() const;
  void _internal_set_section_page_number_start(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TP.SectionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > obsolete_headers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > obsolete_footers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > obsolete_master_drawables_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::TSP::Reference* first_page_master_;
    ::TSP::Reference* even_page_master_;
    ::TSP::Reference* odd_page_master_;
    float obsolete_left_margin_;
    float obsolete_right_margin_;
    float obsolete_top_margin_;
    float obsolete_bottom_margin_;
    bool obsolete_shows_header_;
    bool obsolete_shows_footer_;
    bool obsolete_landscape_mode_;
    bool inherit_previous_header_footer_;
    float obsolete_header_padding_;
    float obsolete_footer_padding_;
    float obsolete_paper_width_;
    float obsolete_paper_height_;
    float obsolete_header_margin_;
    float obsolete_footer_margin_;
    uint32_t section_start_kind_;
    uint32_t section_page_number_kind_;
    bool page_master_first_page_different_;
    bool page_master_even_odd_pages_different_;
    bool page_master_first_page_hides_header_footer_;
    uint32_t section_page_number_start_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class AnchorPosArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.AnchorPosArchive) */ {
 public:
  inline AnchorPosArchive() : AnchorPosArchive(nullptr) {}
  ~AnchorPosArchive() override;
  explicit PROTOBUF_CONSTEXPR AnchorPosArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnchorPosArchive(const AnchorPosArchive& from);
  AnchorPosArchive(AnchorPosArchive&& from) noexcept
    : AnchorPosArchive() {
    *this = ::std::move(from);
  }

  inline AnchorPosArchive& operator=(const AnchorPosArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnchorPosArchive& operator=(AnchorPosArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnchorPosArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnchorPosArchive* internal_default_instance() {
    return reinterpret_cast<const AnchorPosArchive*>(
               &_AnchorPosArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AnchorPosArchive& a, AnchorPosArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(AnchorPosArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnchorPosArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnchorPosArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnchorPosArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnchorPosArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AnchorPosArchive& from) {
    AnchorPosArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnchorPosArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.AnchorPosArchive";
  }
  protected:
  explicit AnchorPosArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachmentFieldNumber = 1,
    kPositionFieldNumber = 2,
  };
  // optional .TSP.Reference attachment = 1;
  bool has_attachment() const;
  private:
  bool _internal_has_attachment() const;
  public:
  void clear_attachment();
  const ::TSP::Reference& attachment() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_attachment();
  ::TSP::Reference* mutable_attachment();
  void set_allocated_attachment(::TSP::Reference* attachment);
  private:
  const ::TSP::Reference& _internal_attachment() const;
  ::TSP::Reference* _internal_mutable_attachment();
  public:
  void unsafe_arena_set_allocated_attachment(
      ::TSP::Reference* attachment);
  ::TSP::Reference* unsafe_arena_release_attachment();

  // optional .TSP.Point position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::TSP::Point& position() const;
  PROTOBUF_NODISCARD ::TSP::Point* release_position();
  ::TSP::Point* mutable_position();
  void set_allocated_position(::TSP::Point* position);
  private:
  const ::TSP::Point& _internal_position() const;
  ::TSP::Point* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::TSP::Point* position);
  ::TSP::Point* unsafe_arena_release_position();

  // @@protoc_insertion_point(class_scope:TP.AnchorPosArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* attachment_;
    ::TSP::Point* position_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class TargetHintArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.TargetHintArchive) */ {
 public:
  inline TargetHintArchive() : TargetHintArchive(nullptr) {}
  ~TargetHintArchive() override;
  explicit PROTOBUF_CONSTEXPR TargetHintArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TargetHintArchive(const TargetHintArchive& from);
  TargetHintArchive(TargetHintArchive&& from) noexcept
    : TargetHintArchive() {
    *this = ::std::move(from);
  }

  inline TargetHintArchive& operator=(const TargetHintArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetHintArchive& operator=(TargetHintArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TargetHintArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TargetHintArchive* internal_default_instance() {
    return reinterpret_cast<const TargetHintArchive*>(
               &_TargetHintArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TargetHintArchive& a, TargetHintArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TargetHintArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TargetHintArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TargetHintArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TargetHintArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TargetHintArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TargetHintArchive& from) {
    TargetHintArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetHintArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.TargetHintArchive";
  }
  protected:
  explicit TargetHintArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameOriginFieldNumber = 1,
    kFrameSizeFieldNumber = 2,
    kRangeFieldNumber = 3,
    kAnchoredRangeFieldNumber = 5,
    kNextWidowPullsDownFromCharIndexFieldNumber = 4,
    kColumnCountFieldNumber = 6,
  };
  // optional .TSP.Point frame_origin = 1;
  bool has_frame_origin() const;
  private:
  bool _internal_has_frame_origin() const;
  public:
  void clear_frame_origin();
  const ::TSP::Point& frame_origin() const;
  PROTOBUF_NODISCARD ::TSP::Point* release_frame_origin();
  ::TSP::Point* mutable_frame_origin();
  void set_allocated_frame_origin(::TSP::Point* frame_origin);
  private:
  const ::TSP::Point& _internal_frame_origin() const;
  ::TSP::Point* _internal_mutable_frame_origin();
  public:
  void unsafe_arena_set_allocated_frame_origin(
      ::TSP::Point* frame_origin);
  ::TSP::Point* unsafe_arena_release_frame_origin();

  // optional .TSP.Size frame_size = 2;
  bool has_frame_size() const;
  private:
  bool _internal_has_frame_size() const;
  public:
  void clear_frame_size();
  const ::TSP::Size& frame_size() const;
  PROTOBUF_NODISCARD ::TSP::Size* release_frame_size();
  ::TSP::Size* mutable_frame_size();
  void set_allocated_frame_size(::TSP::Size* frame_size);
  private:
  const ::TSP::Size& _internal_frame_size() const;
  ::TSP::Size* _internal_mutable_frame_size();
  public:
  void unsafe_arena_set_allocated_frame_size(
      ::TSP::Size* frame_size);
  ::TSP::Size* unsafe_arena_release_frame_size();

  // optional .TSP.Range range = 3;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::TSP::Range& range() const;
  PROTOBUF_NODISCARD ::TSP::Range* release_range();
  ::TSP::Range* mutable_range();
  void set_allocated_range(::TSP::Range* range);
  private:
  const ::TSP::Range& _internal_range() const;
  ::TSP::Range* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::TSP::Range* range);
  ::TSP::Range* unsafe_arena_release_range();

  // optional .TSP.Range anchored_range = 5;
  bool has_anchored_range() const;
  private:
  bool _internal_has_anchored_range() const;
  public:
  void clear_anchored_range();
  const ::TSP::Range& anchored_range() const;
  PROTOBUF_NODISCARD ::TSP::Range* release_anchored_range();
  ::TSP::Range* mutable_anchored_range();
  void set_allocated_anchored_range(::TSP::Range* anchored_range);
  private:
  const ::TSP::Range& _internal_anchored_range() const;
  ::TSP::Range* _internal_mutable_anchored_range();
  public:
  void unsafe_arena_set_allocated_anchored_range(
      ::TSP::Range* anchored_range);
  ::TSP::Range* unsafe_arena_release_anchored_range();

  // optional int32 next_widow_pulls_down_from_char_index = 4;
  bool has_next_widow_pulls_down_from_char_index() const;
  private:
  bool _internal_has_next_widow_pulls_down_from_char_index() const;
  public:
  void clear_next_widow_pulls_down_from_char_index();
  int32_t next_widow_pulls_down_from_char_index() const;
  void set_next_widow_pulls_down_from_char_index(int32_t value);
  private:
  int32_t _internal_next_widow_pulls_down_from_char_index() const;
  void _internal_set_next_widow_pulls_down_from_char_index(int32_t value);
  public:

  // optional int32 column_count = 6;
  bool has_column_count() const;
  private:
  bool _internal_has_column_count() const;
  public:
  void clear_column_count();
  int32_t column_count() const;
  void set_column_count(int32_t value);
  private:
  int32_t _internal_column_count() const;
  void _internal_set_column_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TP.TargetHintArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Point* frame_origin_;
    ::TSP::Size* frame_size_;
    ::TSP::Range* range_;
    ::TSP::Range* anchored_range_;
    int32_t next_widow_pulls_down_from_char_index_;
    int32_t column_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class PageHintArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.PageHintArchive) */ {
 public:
  inline PageHintArchive() : PageHintArchive(nullptr) {}
  ~PageHintArchive() override;
  explicit PROTOBUF_CONSTEXPR PageHintArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PageHintArchive(const PageHintArchive& from);
  PageHintArchive(PageHintArchive&& from) noexcept
    : PageHintArchive() {
    *this = ::std::move(from);
  }

  inline PageHintArchive& operator=(const PageHintArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageHintArchive& operator=(PageHintArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PageHintArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PageHintArchive* internal_default_instance() {
    return reinterpret_cast<const PageHintArchive*>(
               &_PageHintArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PageHintArchive& a, PageHintArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PageHintArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PageHintArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PageHintArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PageHintArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PageHintArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PageHintArchive& from) {
    PageHintArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PageHintArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.PageHintArchive";
  }
  protected:
  explicit PageHintArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PageHintArchive_PageKind PageKind;
  static constexpr PageKind kPageKindNone =
    PageHintArchive_PageKind_kPageKindNone;
  static constexpr PageKind kPageKindText =
    PageHintArchive_PageKind_kPageKindText;
  static constexpr PageKind kPageKindFiller =
    PageHintArchive_PageKind_kPageKindFiller;
  static constexpr PageKind kPageKindOrphan =
    PageHintArchive_PageKind_kPageKindOrphan;
  static constexpr PageKind kPageKindEndnote =
    PageHintArchive_PageKind_kPageKindEndnote;
  static constexpr PageKind kPageKindDirty =
    PageHintArchive_PageKind_kPageKindDirty;
  static constexpr PageKind kTPPageKindPageLayout =
    PageHintArchive_PageKind_kTPPageKindPageLayout;
  static inline bool PageKind_IsValid(int value) {
    return PageHintArchive_PageKind_IsValid(value);
  }
  static constexpr PageKind PageKind_MIN =
    PageHintArchive_PageKind_PageKind_MIN;
  static constexpr PageKind PageKind_MAX =
    PageHintArchive_PageKind_PageKind_MAX;
  static constexpr int PageKind_ARRAYSIZE =
    PageHintArchive_PageKind_PageKind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PageKind_descriptor() {
    return PageHintArchive_PageKind_descriptor();
  }
  template<typename T>
  static inline const std::string& PageKind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PageKind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PageKind_Name.");
    return PageHintArchive_PageKind_Name(enum_t_value);
  }
  static inline bool PageKind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PageKind* value) {
    return PageHintArchive_PageKind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTargetHintsFieldNumber = 2,
    kAnchoredAttachmentsMapFieldNumber = 8,
    kFootnoteAutoNumberRangeFieldNumber = 3,
    kFootnoteLayoutRangeFieldNumber = 4,
    kFirstChildHintFieldNumber = 6,
    kLastChildHintFieldNumber = 7,
    kTopicNumbersFieldNumber = 9,
    kPageKindFieldNumber = 1,
    kVersionNumberFieldNumber = 10,
    kPlatformIdFieldNumber = 11,
  };
  // repeated .TP.TargetHintArchive target_hints = 2;
  int target_hints_size() const;
  private:
  int _internal_target_hints_size() const;
  public:
  void clear_target_hints();
  ::TP::TargetHintArchive* mutable_target_hints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::TargetHintArchive >*
      mutable_target_hints();
  private:
  const ::TP::TargetHintArchive& _internal_target_hints(int index) const;
  ::TP::TargetHintArchive* _internal_add_target_hints();
  public:
  const ::TP::TargetHintArchive& target_hints(int index) const;
  ::TP::TargetHintArchive* add_target_hints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::TargetHintArchive >&
      target_hints() const;

  // repeated .TP.AnchorPosArchive anchored_attachments_map = 8;
  int anchored_attachments_map_size() const;
  private:
  int _internal_anchored_attachments_map_size() const;
  public:
  void clear_anchored_attachments_map();
  ::TP::AnchorPosArchive* mutable_anchored_attachments_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::AnchorPosArchive >*
      mutable_anchored_attachments_map();
  private:
  const ::TP::AnchorPosArchive& _internal_anchored_attachments_map(int index) const;
  ::TP::AnchorPosArchive* _internal_add_anchored_attachments_map();
  public:
  const ::TP::AnchorPosArchive& anchored_attachments_map(int index) const;
  ::TP::AnchorPosArchive* add_anchored_attachments_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::AnchorPosArchive >&
      anchored_attachments_map() const;

  // optional .TSP.Range footnote_auto_number_range = 3;
  bool has_footnote_auto_number_range() const;
  private:
  bool _internal_has_footnote_auto_number_range() const;
  public:
  void clear_footnote_auto_number_range();
  const ::TSP::Range& footnote_auto_number_range() const;
  PROTOBUF_NODISCARD ::TSP::Range* release_footnote_auto_number_range();
  ::TSP::Range* mutable_footnote_auto_number_range();
  void set_allocated_footnote_auto_number_range(::TSP::Range* footnote_auto_number_range);
  private:
  const ::TSP::Range& _internal_footnote_auto_number_range() const;
  ::TSP::Range* _internal_mutable_footnote_auto_number_range();
  public:
  void unsafe_arena_set_allocated_footnote_auto_number_range(
      ::TSP::Range* footnote_auto_number_range);
  ::TSP::Range* unsafe_arena_release_footnote_auto_number_range();

  // optional .TSP.Range footnote_layout_range = 4;
  bool has_footnote_layout_range() const;
  private:
  bool _internal_has_footnote_layout_range() const;
  public:
  void clear_footnote_layout_range();
  const ::TSP::Range& footnote_layout_range() const;
  PROTOBUF_NODISCARD ::TSP::Range* release_footnote_layout_range();
  ::TSP::Range* mutable_footnote_layout_range();
  void set_allocated_footnote_layout_range(::TSP::Range* footnote_layout_range);
  private:
  const ::TSP::Range& _internal_footnote_layout_range() const;
  ::TSP::Range* _internal_mutable_footnote_layout_range();
  public:
  void unsafe_arena_set_allocated_footnote_layout_range(
      ::TSP::Range* footnote_layout_range);
  ::TSP::Range* unsafe_arena_release_footnote_layout_range();

  // optional .TSP.Reference first_child_hint = 6;
  bool has_first_child_hint() const;
  private:
  bool _internal_has_first_child_hint() const;
  public:
  void clear_first_child_hint();
  const ::TSP::Reference& first_child_hint() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_first_child_hint();
  ::TSP::Reference* mutable_first_child_hint();
  void set_allocated_first_child_hint(::TSP::Reference* first_child_hint);
  private:
  const ::TSP::Reference& _internal_first_child_hint() const;
  ::TSP::Reference* _internal_mutable_first_child_hint();
  public:
  void unsafe_arena_set_allocated_first_child_hint(
      ::TSP::Reference* first_child_hint);
  ::TSP::Reference* unsafe_arena_release_first_child_hint();

  // optional .TSP.Reference last_child_hint = 7;
  bool has_last_child_hint() const;
  private:
  bool _internal_has_last_child_hint() const;
  public:
  void clear_last_child_hint();
  const ::TSP::Reference& last_child_hint() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_last_child_hint();
  ::TSP::Reference* mutable_last_child_hint();
  void set_allocated_last_child_hint(::TSP::Reference* last_child_hint);
  private:
  const ::TSP::Reference& _internal_last_child_hint() const;
  ::TSP::Reference* _internal_mutable_last_child_hint();
  public:
  void unsafe_arena_set_allocated_last_child_hint(
      ::TSP::Reference* last_child_hint);
  ::TSP::Reference* unsafe_arena_release_last_child_hint();

  // optional .TP.TopicNumberHintsArchive topic_numbers = 9;
  bool has_topic_numbers() const;
  private:
  bool _internal_has_topic_numbers() const;
  public:
  void clear_topic_numbers();
  const ::TP::TopicNumberHintsArchive& topic_numbers() const;
  PROTOBUF_NODISCARD ::TP::TopicNumberHintsArchive* release_topic_numbers();
  ::TP::TopicNumberHintsArchive* mutable_topic_numbers();
  void set_allocated_topic_numbers(::TP::TopicNumberHintsArchive* topic_numbers);
  private:
  const ::TP::TopicNumberHintsArchive& _internal_topic_numbers() const;
  ::TP::TopicNumberHintsArchive* _internal_mutable_topic_numbers();
  public:
  void unsafe_arena_set_allocated_topic_numbers(
      ::TP::TopicNumberHintsArchive* topic_numbers);
  ::TP::TopicNumberHintsArchive* unsafe_arena_release_topic_numbers();

  // optional .TP.PageHintArchive.PageKind page_kind = 1;
  bool has_page_kind() const;
  private:
  bool _internal_has_page_kind() const;
  public:
  void clear_page_kind();
  ::TP::PageHintArchive_PageKind page_kind() const;
  void set_page_kind(::TP::PageHintArchive_PageKind value);
  private:
  ::TP::PageHintArchive_PageKind _internal_page_kind() const;
  void _internal_set_page_kind(::TP::PageHintArchive_PageKind value);
  public:

  // optional uint32 version_number = 10;
  bool has_version_number() const;
  private:
  bool _internal_has_version_number() const;
  public:
  void clear_version_number();
  uint32_t version_number() const;
  void set_version_number(uint32_t value);
  private:
  uint32_t _internal_version_number() const;
  void _internal_set_version_number(uint32_t value);
  public:

  // optional uint32 platform_id = 11;
  bool has_platform_id() const;
  private:
  bool _internal_has_platform_id() const;
  public:
  void clear_platform_id();
  uint32_t platform_id() const;
  void set_platform_id(uint32_t value);
  private:
  uint32_t _internal_platform_id() const;
  void _internal_set_platform_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TP.PageHintArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::TargetHintArchive > target_hints_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::AnchorPosArchive > anchored_attachments_map_;
    ::TSP::Range* footnote_auto_number_range_;
    ::TSP::Range* footnote_layout_range_;
    ::TSP::Reference* first_child_hint_;
    ::TSP::Reference* last_child_hint_;
    ::TP::TopicNumberHintsArchive* topic_numbers_;
    int page_kind_;
    uint32_t version_number_;
    uint32_t platform_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class SectionHintArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.SectionHintArchive) */ {
 public:
  inline SectionHintArchive() : SectionHintArchive(nullptr) {}
  ~SectionHintArchive() override;
  explicit PROTOBUF_CONSTEXPR SectionHintArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SectionHintArchive(const SectionHintArchive& from);
  SectionHintArchive(SectionHintArchive&& from) noexcept
    : SectionHintArchive() {
    *this = ::std::move(from);
  }

  inline SectionHintArchive& operator=(const SectionHintArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SectionHintArchive& operator=(SectionHintArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SectionHintArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SectionHintArchive* internal_default_instance() {
    return reinterpret_cast<const SectionHintArchive*>(
               &_SectionHintArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SectionHintArchive& a, SectionHintArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SectionHintArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SectionHintArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SectionHintArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SectionHintArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SectionHintArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SectionHintArchive& from) {
    SectionHintArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SectionHintArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.SectionHintArchive";
  }
  protected:
  explicit SectionHintArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageHintsFieldNumber = 1,
    kStartPageIndexFieldNumber = 2,
  };
  // repeated .TP.PageHintArchive page_hints = 1;
  int page_hints_size() const;
  private:
  int _internal_page_hints_size() const;
  public:
  void clear_page_hints();
  ::TP::PageHintArchive* mutable_page_hints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::PageHintArchive >*
      mutable_page_hints();
  private:
  const ::TP::PageHintArchive& _internal_page_hints(int index) const;
  ::TP::PageHintArchive* _internal_add_page_hints();
  public:
  const ::TP::PageHintArchive& page_hints(int index) const;
  ::TP::PageHintArchive* add_page_hints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::PageHintArchive >&
      page_hints() const;

  // optional uint32 start_page_index = 2;
  bool has_start_page_index() const;
  private:
  bool _internal_has_start_page_index() const;
  public:
  void clear_start_page_index();
  uint32_t start_page_index() const;
  void set_start_page_index(uint32_t value);
  private:
  uint32_t _internal_start_page_index() const;
  void _internal_set_start_page_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TP.SectionHintArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::PageHintArchive > page_hints_;
    uint32_t start_page_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class TextboxHintArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.TextboxHintArchive) */ {
 public:
  inline TextboxHintArchive() : TextboxHintArchive(nullptr) {}
  ~TextboxHintArchive() override;
  explicit PROTOBUF_CONSTEXPR TextboxHintArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextboxHintArchive(const TextboxHintArchive& from);
  TextboxHintArchive(TextboxHintArchive&& from) noexcept
    : TextboxHintArchive() {
    *this = ::std::move(from);
  }

  inline TextboxHintArchive& operator=(const TextboxHintArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextboxHintArchive& operator=(TextboxHintArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextboxHintArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextboxHintArchive* internal_default_instance() {
    return reinterpret_cast<const TextboxHintArchive*>(
               &_TextboxHintArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TextboxHintArchive& a, TextboxHintArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TextboxHintArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextboxHintArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextboxHintArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TextboxHintArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TextboxHintArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TextboxHintArchive& from) {
    TextboxHintArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextboxHintArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.TextboxHintArchive";
  }
  protected:
  explicit TextboxHintArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // required .TSP.Range range = 1;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::TSP::Range& range() const;
  PROTOBUF_NODISCARD ::TSP::Range* release_range();
  ::TSP::Range* mutable_range();
  void set_allocated_range(::TSP::Range* range);
  private:
  const ::TSP::Range& _internal_range() const;
  ::TSP::Range* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::TSP::Range* range);
  ::TSP::Range* unsafe_arena_release_range();

  // required .TSP.Size size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::TSP::Size& size() const;
  PROTOBUF_NODISCARD ::TSP::Size* release_size();
  ::TSP::Size* mutable_size();
  void set_allocated_size(::TSP::Size* size);
  private:
  const ::TSP::Size& _internal_size() const;
  ::TSP::Size* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::TSP::Size* size);
  ::TSP::Size* unsafe_arena_release_size();

  // @@protoc_insertion_point(class_scope:TP.TextboxHintArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Range* range_;
    ::TSP::Size* size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class TopicNumberEntryArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.TopicNumberEntryArchive) */ {
 public:
  inline TopicNumberEntryArchive() : TopicNumberEntryArchive(nullptr) {}
  ~TopicNumberEntryArchive() override;
  explicit PROTOBUF_CONSTEXPR TopicNumberEntryArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopicNumberEntryArchive(const TopicNumberEntryArchive& from);
  TopicNumberEntryArchive(TopicNumberEntryArchive&& from) noexcept
    : TopicNumberEntryArchive() {
    *this = ::std::move(from);
  }

  inline TopicNumberEntryArchive& operator=(const TopicNumberEntryArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicNumberEntryArchive& operator=(TopicNumberEntryArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopicNumberEntryArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopicNumberEntryArchive* internal_default_instance() {
    return reinterpret_cast<const TopicNumberEntryArchive*>(
               &_TopicNumberEntryArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(TopicNumberEntryArchive& a, TopicNumberEntryArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicNumberEntryArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicNumberEntryArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopicNumberEntryArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopicNumberEntryArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TopicNumberEntryArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TopicNumberEntryArchive& from) {
    TopicNumberEntryArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicNumberEntryArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.TopicNumberEntryArchive";
  }
  protected:
  explicit TopicNumberEntryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicNumberFieldNumber = 2,
    kCharacterIndexFieldNumber = 3,
    kListStyleFieldNumber = 1,
  };
  // repeated uint32 topic_number = 2;
  int topic_number_size() const;
  private:
  int _internal_topic_number_size() const;
  public:
  void clear_topic_number();
  private:
  uint32_t _internal_topic_number(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_topic_number() const;
  void _internal_add_topic_number(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_topic_number();
  public:
  uint32_t topic_number(int index) const;
  void set_topic_number(int index, uint32_t value);
  void add_topic_number(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      topic_number() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_topic_number();

  // repeated uint32 character_index = 3;
  int character_index_size() const;
  private:
  int _internal_character_index_size() const;
  public:
  void clear_character_index();
  private:
  uint32_t _internal_character_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_character_index() const;
  void _internal_add_character_index(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_character_index();
  public:
  uint32_t character_index(int index) const;
  void set_character_index(int index, uint32_t value);
  void add_character_index(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      character_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_character_index();

  // required .TSP.Reference list_style = 1;
  bool has_list_style() const;
  private:
  bool _internal_has_list_style() const;
  public:
  void clear_list_style();
  const ::TSP::Reference& list_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_list_style();
  ::TSP::Reference* mutable_list_style();
  void set_allocated_list_style(::TSP::Reference* list_style);
  private:
  const ::TSP::Reference& _internal_list_style() const;
  ::TSP::Reference* _internal_mutable_list_style();
  public:
  void unsafe_arena_set_allocated_list_style(
      ::TSP::Reference* list_style);
  ::TSP::Reference* unsafe_arena_release_list_style();

  // @@protoc_insertion_point(class_scope:TP.TopicNumberEntryArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > topic_number_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > character_index_;
    ::TSP::Reference* list_style_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class TopicNumberHintsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.TopicNumberHintsArchive) */ {
 public:
  inline TopicNumberHintsArchive() : TopicNumberHintsArchive(nullptr) {}
  ~TopicNumberHintsArchive() override;
  explicit PROTOBUF_CONSTEXPR TopicNumberHintsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopicNumberHintsArchive(const TopicNumberHintsArchive& from);
  TopicNumberHintsArchive(TopicNumberHintsArchive&& from) noexcept
    : TopicNumberHintsArchive() {
    *this = ::std::move(from);
  }

  inline TopicNumberHintsArchive& operator=(const TopicNumberHintsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicNumberHintsArchive& operator=(TopicNumberHintsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopicNumberHintsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopicNumberHintsArchive* internal_default_instance() {
    return reinterpret_cast<const TopicNumberHintsArchive*>(
               &_TopicNumberHintsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TopicNumberHintsArchive& a, TopicNumberHintsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicNumberHintsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicNumberHintsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopicNumberHintsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopicNumberHintsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TopicNumberHintsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TopicNumberHintsArchive& from) {
    TopicNumberHintsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicNumberHintsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.TopicNumberHintsArchive";
  }
  protected:
  explicit TopicNumberHintsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicNumbersMapFieldNumber = 2,
    kCharIndexFieldNumber = 1,
    kValidThroughCharIndexFieldNumber = 3,
  };
  // repeated .TP.TopicNumberEntryArchive topic_numbers_map = 2;
  int topic_numbers_map_size() const;
  private:
  int _internal_topic_numbers_map_size() const;
  public:
  void clear_topic_numbers_map();
  ::TP::TopicNumberEntryArchive* mutable_topic_numbers_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::TopicNumberEntryArchive >*
      mutable_topic_numbers_map();
  private:
  const ::TP::TopicNumberEntryArchive& _internal_topic_numbers_map(int index) const;
  ::TP::TopicNumberEntryArchive* _internal_add_topic_numbers_map();
  public:
  const ::TP::TopicNumberEntryArchive& topic_numbers_map(int index) const;
  ::TP::TopicNumberEntryArchive* add_topic_numbers_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::TopicNumberEntryArchive >&
      topic_numbers_map() const;

  // optional uint32 charIndex = 1;
  bool has_charindex() const;
  private:
  bool _internal_has_charindex() const;
  public:
  void clear_charindex();
  uint32_t charindex() const;
  void set_charindex(uint32_t value);
  private:
  uint32_t _internal_charindex() const;
  void _internal_set_charindex(uint32_t value);
  public:

  // optional uint32 valid_through_char_index = 3;
  bool has_valid_through_char_index() const;
  private:
  bool _internal_has_valid_through_char_index() const;
  public:
  void clear_valid_through_char_index();
  uint32_t valid_through_char_index() const;
  void set_valid_through_char_index(uint32_t value);
  private:
  uint32_t _internal_valid_through_char_index() const;
  void _internal_set_valid_through_char_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TP.TopicNumberHintsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::TopicNumberEntryArchive > topic_numbers_map_;
    uint32_t charindex_;
    uint32_t valid_through_char_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class LayoutStateArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.LayoutStateArchive) */ {
 public:
  inline LayoutStateArchive() : LayoutStateArchive(nullptr) {}
  ~LayoutStateArchive() override;
  explicit PROTOBUF_CONSTEXPR LayoutStateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayoutStateArchive(const LayoutStateArchive& from);
  LayoutStateArchive(LayoutStateArchive&& from) noexcept
    : LayoutStateArchive() {
    *this = ::std::move(from);
  }

  inline LayoutStateArchive& operator=(const LayoutStateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayoutStateArchive& operator=(LayoutStateArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LayoutStateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayoutStateArchive* internal_default_instance() {
    return reinterpret_cast<const LayoutStateArchive*>(
               &_LayoutStateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(LayoutStateArchive& a, LayoutStateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(LayoutStateArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayoutStateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayoutStateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayoutStateArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LayoutStateArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LayoutStateArchive& from) {
    LayoutStateArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayoutStateArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.LayoutStateArchive";
  }
  protected:
  explicit LayoutStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSectionHintsFieldNumber = 5,
    kSectionIndexFieldNumber = 1,
    kSectionPageIndexFieldNumber = 2,
    kDocumentPageIndexFieldNumber = 3,
    kLastPageCountFieldNumber = 4,
  };
  // repeated .TP.SectionHintArchive section_hints = 5;
  int section_hints_size() const;
  private:
  int _internal_section_hints_size() const;
  public:
  void clear_section_hints();
  ::TP::SectionHintArchive* mutable_section_hints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::SectionHintArchive >*
      mutable_section_hints();
  private:
  const ::TP::SectionHintArchive& _internal_section_hints(int index) const;
  ::TP::SectionHintArchive* _internal_add_section_hints();
  public:
  const ::TP::SectionHintArchive& section_hints(int index) const;
  ::TP::SectionHintArchive* add_section_hints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::SectionHintArchive >&
      section_hints() const;

  // optional uint32 section_index = 1;
  bool has_section_index() const;
  private:
  bool _internal_has_section_index() const;
  public:
  void clear_section_index();
  uint32_t section_index() const;
  void set_section_index(uint32_t value);
  private:
  uint32_t _internal_section_index() const;
  void _internal_set_section_index(uint32_t value);
  public:

  // optional uint32 section_page_index = 2;
  bool has_section_page_index() const;
  private:
  bool _internal_has_section_page_index() const;
  public:
  void clear_section_page_index();
  uint32_t section_page_index() const;
  void set_section_page_index(uint32_t value);
  private:
  uint32_t _internal_section_page_index() const;
  void _internal_set_section_page_index(uint32_t value);
  public:

  // optional uint32 document_page_index = 3;
  bool has_document_page_index() const;
  private:
  bool _internal_has_document_page_index() const;
  public:
  void clear_document_page_index();
  uint32_t document_page_index() const;
  void set_document_page_index(uint32_t value);
  private:
  uint32_t _internal_document_page_index() const;
  void _internal_set_document_page_index(uint32_t value);
  public:

  // optional uint32 last_page_count = 4;
  bool has_last_page_count() const;
  private:
  bool _internal_has_last_page_count() const;
  public:
  void clear_last_page_count();
  uint32_t last_page_count() const;
  void set_last_page_count(uint32_t value);
  private:
  uint32_t _internal_last_page_count() const;
  void _internal_set_last_page_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TP.LayoutStateArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::SectionHintArchive > section_hints_;
    uint32_t section_index_;
    uint32_t section_page_index_;
    uint32_t document_page_index_;
    uint32_t last_page_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class CanvasSelectionArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.CanvasSelectionArchive) */ {
 public:
  inline CanvasSelectionArchive() : CanvasSelectionArchive(nullptr) {}
  ~CanvasSelectionArchive() override;
  explicit PROTOBUF_CONSTEXPR CanvasSelectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CanvasSelectionArchive(const CanvasSelectionArchive& from);
  CanvasSelectionArchive(CanvasSelectionArchive&& from) noexcept
    : CanvasSelectionArchive() {
    *this = ::std::move(from);
  }

  inline CanvasSelectionArchive& operator=(const CanvasSelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanvasSelectionArchive& operator=(CanvasSelectionArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CanvasSelectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CanvasSelectionArchive* internal_default_instance() {
    return reinterpret_cast<const CanvasSelectionArchive*>(
               &_CanvasSelectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CanvasSelectionArchive& a, CanvasSelectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CanvasSelectionArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CanvasSelectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CanvasSelectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CanvasSelectionArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CanvasSelectionArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CanvasSelectionArchive& from) {
    CanvasSelectionArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CanvasSelectionArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.CanvasSelectionArchive";
  }
  protected:
  explicit CanvasSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 5,
    kExcludedInfosFieldNumber = 6,
    kAdditionalInfosFieldNumber = 7,
    kRangeFieldNumber = 2,
    kContainerFieldNumber = 8,
    kTypeFieldNumber = 1,
    kStyleInsertionBehaviorFieldNumber = 3,
    kCaretAffinityFieldNumber = 4,
  };
  // repeated .TSP.Reference infos = 5;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::TSP::Reference* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_infos();
  private:
  const ::TSP::Reference& _internal_infos(int index) const;
  ::TSP::Reference* _internal_add_infos();
  public:
  const ::TSP::Reference& infos(int index) const;
  ::TSP::Reference* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      infos() const;

  // repeated .TSP.Reference excluded_infos = 6;
  int excluded_infos_size() const;
  private:
  int _internal_excluded_infos_size() const;
  public:
  void clear_excluded_infos();
  ::TSP::Reference* mutable_excluded_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_excluded_infos();
  private:
  const ::TSP::Reference& _internal_excluded_infos(int index) const;
  ::TSP::Reference* _internal_add_excluded_infos();
  public:
  const ::TSP::Reference& excluded_infos(int index) const;
  ::TSP::Reference* add_excluded_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      excluded_infos() const;

  // repeated .TSP.Reference additional_infos = 7;
  int additional_infos_size() const;
  private:
  int _internal_additional_infos_size() const;
  public:
  void clear_additional_infos();
  ::TSP::Reference* mutable_additional_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_additional_infos();
  private:
  const ::TSP::Reference& _internal_additional_infos(int index) const;
  ::TSP::Reference* _internal_add_additional_infos();
  public:
  const ::TSP::Reference& additional_infos(int index) const;
  ::TSP::Reference* add_additional_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      additional_infos() const;

  // required .TSP.Range range = 2;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::TSP::Range& range() const;
  PROTOBUF_NODISCARD ::TSP::Range* release_range();
  ::TSP::Range* mutable_range();
  void set_allocated_range(::TSP::Range* range);
  private:
  const ::TSP::Range& _internal_range() const;
  ::TSP::Range* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::TSP::Range* range);
  ::TSP::Range* unsafe_arena_release_range();

  // optional .TSP.Reference container = 8;
  bool has_container() const;
  private:
  bool _internal_has_container() const;
  public:
  void clear_container();
  const ::TSP::Reference& container() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_container();
  ::TSP::Reference* mutable_container();
  void set_allocated_container(::TSP::Reference* container);
  private:
  const ::TSP::Reference& _internal_container() const;
  ::TSP::Reference* _internal_mutable_container();
  public:
  void unsafe_arena_set_allocated_container(
      ::TSP::Reference* container);
  ::TSP::Reference* unsafe_arena_release_container();

  // required .TSWP.SelectionType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::TSWP::SelectionType type() const;
  void set_type(::TSWP::SelectionType value);
  private:
  ::TSWP::SelectionType _internal_type() const;
  void _internal_set_type(::TSWP::SelectionType value);
  public:

  // required .TSWP.StyleInsertionBehavior style_insertion_behavior = 3;
  bool has_style_insertion_behavior() const;
  private:
  bool _internal_has_style_insertion_behavior() const;
  public:
  void clear_style_insertion_behavior();
  ::TSWP::StyleInsertionBehavior style_insertion_behavior() const;
  void set_style_insertion_behavior(::TSWP::StyleInsertionBehavior value);
  private:
  ::TSWP::StyleInsertionBehavior _internal_style_insertion_behavior() const;
  void _internal_set_style_insertion_behavior(::TSWP::StyleInsertionBehavior value);
  public:

  // required .TSWP.CaretAffinity caret_affinity = 4;
  bool has_caret_affinity() const;
  private:
  bool _internal_has_caret_affinity() const;
  public:
  void clear_caret_affinity();
  ::TSWP::CaretAffinity caret_affinity() const;
  void set_caret_affinity(::TSWP::CaretAffinity value);
  private:
  ::TSWP::CaretAffinity _internal_caret_affinity() const;
  void _internal_set_caret_affinity(::TSWP::CaretAffinity value);
  public:

  // @@protoc_insertion_point(class_scope:TP.CanvasSelectionArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > infos_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > excluded_infos_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > additional_infos_;
    ::TSP::Range* range_;
    ::TSP::Reference* container_;
    int type_;
    int style_insertion_behavior_;
    int caret_affinity_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class ViewStateArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.ViewStateArchive) */ {
 public:
  inline ViewStateArchive() : ViewStateArchive(nullptr) {}
  ~ViewStateArchive() override;
  explicit PROTOBUF_CONSTEXPR ViewStateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewStateArchive(const ViewStateArchive& from);
  ViewStateArchive(ViewStateArchive&& from) noexcept
    : ViewStateArchive() {
    *this = ::std::move(from);
  }

  inline ViewStateArchive& operator=(const ViewStateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewStateArchive& operator=(ViewStateArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewStateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewStateArchive* internal_default_instance() {
    return reinterpret_cast<const ViewStateArchive*>(
               &_ViewStateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ViewStateArchive& a, ViewStateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewStateArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewStateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewStateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewStateArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewStateArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewStateArchive& from) {
    ViewStateArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewStateArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.ViewStateArchive";
  }
  protected:
  explicit ViewStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChartUiStateFieldNumber = 8,
    kSelectedInspectorSwitchSegmentIdentifierFieldNumber = 18,
    kVisibleRectOriginFieldNumber = 2,
    kSelectionFieldNumber = 4,
    kSelectionModelFieldNumber = 5,
    kVisibleRectSizeFieldNumber = 7,
    kWindowFrameOriginFieldNumber = 16,
    kWindowFrameSizeFieldNumber = 17,
    kOBSOLETEViewScaleFieldNumber = 1,
    kOBSOLETELandscapeFieldNumber = 3,
    kMasterDrawablesSelectableFieldNumber = 6,
    kLayoutBordersVisibleFieldNumber = 10,
    kWordCountHudVisibleFieldNumber = 11,
    kViewScaleModeFieldNumber = 14,
    kShowsPageNavigatorFieldNumber = 13,
    kInspectorHiddenFieldNumber = 19,
    kRulerVisibleFieldNumber = 9,
    kShowsCommentsFieldNumber = 12,
    kViewScaleFieldNumber = 15,
  };
  // repeated .TSCH.ChartUIState chart_ui_state = 8;
  int chart_ui_state_size() const;
  private:
  int _internal_chart_ui_state_size() const;
  public:
  void clear_chart_ui_state();
  ::TSCH::ChartUIState* mutable_chart_ui_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartUIState >*
      mutable_chart_ui_state();
  private:
  const ::TSCH::ChartUIState& _internal_chart_ui_state(int index) const;
  ::TSCH::ChartUIState* _internal_add_chart_ui_state();
  public:
  const ::TSCH::ChartUIState& chart_ui_state(int index) const;
  ::TSCH::ChartUIState* add_chart_ui_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartUIState >&
      chart_ui_state() const;

  // optional string selected_inspector_switch_segment_identifier = 18;
  bool has_selected_inspector_switch_segment_identifier() const;
  private:
  bool _internal_has_selected_inspector_switch_segment_identifier() const;
  public:
  void clear_selected_inspector_switch_segment_identifier();
  const std::string& selected_inspector_switch_segment_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_selected_inspector_switch_segment_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_selected_inspector_switch_segment_identifier();
  PROTOBUF_NODISCARD std::string* release_selected_inspector_switch_segment_identifier();
  void set_allocated_selected_inspector_switch_segment_identifier(std::string* selected_inspector_switch_segment_identifier);
  private:
  const std::string& _internal_selected_inspector_switch_segment_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_selected_inspector_switch_segment_identifier(const std::string& value);
  std::string* _internal_mutable_selected_inspector_switch_segment_identifier();
  public:

  // optional .TSP.Point visible_rect_origin = 2;
  bool has_visible_rect_origin() const;
  private:
  bool _internal_has_visible_rect_origin() const;
  public:
  void clear_visible_rect_origin();
  const ::TSP::Point& visible_rect_origin() const;
  PROTOBUF_NODISCARD ::TSP::Point* release_visible_rect_origin();
  ::TSP::Point* mutable_visible_rect_origin();
  void set_allocated_visible_rect_origin(::TSP::Point* visible_rect_origin);
  private:
  const ::TSP::Point& _internal_visible_rect_origin() const;
  ::TSP::Point* _internal_mutable_visible_rect_origin();
  public:
  void unsafe_arena_set_allocated_visible_rect_origin(
      ::TSP::Point* visible_rect_origin);
  ::TSP::Point* unsafe_arena_release_visible_rect_origin();

  // optional .TSP.Reference selection = 4;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::TSP::Reference& selection() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_selection();
  ::TSP::Reference* mutable_selection();
  void set_allocated_selection(::TSP::Reference* selection);
  private:
  const ::TSP::Reference& _internal_selection() const;
  ::TSP::Reference* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::TSP::Reference* selection);
  ::TSP::Reference* unsafe_arena_release_selection();

  // optional .TSP.Reference selection_model = 5;
  bool has_selection_model() const;
  private:
  bool _internal_has_selection_model() const;
  public:
  void clear_selection_model();
  const ::TSP::Reference& selection_model() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_selection_model();
  ::TSP::Reference* mutable_selection_model();
  void set_allocated_selection_model(::TSP::Reference* selection_model);
  private:
  const ::TSP::Reference& _internal_selection_model() const;
  ::TSP::Reference* _internal_mutable_selection_model();
  public:
  void unsafe_arena_set_allocated_selection_model(
      ::TSP::Reference* selection_model);
  ::TSP::Reference* unsafe_arena_release_selection_model();

  // optional .TSP.Size visible_rect_size = 7;
  bool has_visible_rect_size() const;
  private:
  bool _internal_has_visible_rect_size() const;
  public:
  void clear_visible_rect_size();
  const ::TSP::Size& visible_rect_size() const;
  PROTOBUF_NODISCARD ::TSP::Size* release_visible_rect_size();
  ::TSP::Size* mutable_visible_rect_size();
  void set_allocated_visible_rect_size(::TSP::Size* visible_rect_size);
  private:
  const ::TSP::Size& _internal_visible_rect_size() const;
  ::TSP::Size* _internal_mutable_visible_rect_size();
  public:
  void unsafe_arena_set_allocated_visible_rect_size(
      ::TSP::Size* visible_rect_size);
  ::TSP::Size* unsafe_arena_release_visible_rect_size();

  // optional .TSP.Point window_frame_origin = 16;
  bool has_window_frame_origin() const;
  private:
  bool _internal_has_window_frame_origin() const;
  public:
  void clear_window_frame_origin();
  const ::TSP::Point& window_frame_origin() const;
  PROTOBUF_NODISCARD ::TSP::Point* release_window_frame_origin();
  ::TSP::Point* mutable_window_frame_origin();
  void set_allocated_window_frame_origin(::TSP::Point* window_frame_origin);
  private:
  const ::TSP::Point& _internal_window_frame_origin() const;
  ::TSP::Point* _internal_mutable_window_frame_origin();
  public:
  void unsafe_arena_set_allocated_window_frame_origin(
      ::TSP::Point* window_frame_origin);
  ::TSP::Point* unsafe_arena_release_window_frame_origin();

  // optional .TSP.Size window_frame_size = 17;
  bool has_window_frame_size() const;
  private:
  bool _internal_has_window_frame_size() const;
  public:
  void clear_window_frame_size();
  const ::TSP::Size& window_frame_size() const;
  PROTOBUF_NODISCARD ::TSP::Size* release_window_frame_size();
  ::TSP::Size* mutable_window_frame_size();
  void set_allocated_window_frame_size(::TSP::Size* window_frame_size);
  private:
  const ::TSP::Size& _internal_window_frame_size() const;
  ::TSP::Size* _internal_mutable_window_frame_size();
  public:
  void unsafe_arena_set_allocated_window_frame_size(
      ::TSP::Size* window_frame_size);
  ::TSP::Size* unsafe_arena_release_window_frame_size();

  // optional float OBSOLETE_view_scale = 1;
  bool has_obsolete_view_scale() const;
  private:
  bool _internal_has_obsolete_view_scale() const;
  public:
  void clear_obsolete_view_scale();
  float obsolete_view_scale() const;
  void set_obsolete_view_scale(float value);
  private:
  float _internal_obsolete_view_scale() const;
  void _internal_set_obsolete_view_scale(float value);
  public:

  // optional bool OBSOLETE_landscape = 3;
  bool has_obsolete_landscape() const;
  private:
  bool _internal_has_obsolete_landscape() const;
  public:
  void clear_obsolete_landscape();
  bool obsolete_landscape() const;
  void set_obsolete_landscape(bool value);
  private:
  bool _internal_obsolete_landscape() const;
  void _internal_set_obsolete_landscape(bool value);
  public:

  // optional bool master_drawables_selectable = 6;
  bool has_master_drawables_selectable() const;
  private:
  bool _internal_has_master_drawables_selectable() const;
  public:
  void clear_master_drawables_selectable();
  bool master_drawables_selectable() const;
  void set_master_drawables_selectable(bool value);
  private:
  bool _internal_master_drawables_selectable() const;
  void _internal_set_master_drawables_selectable(bool value);
  public:

  // optional bool layout_borders_visible = 10 [default = false];
  bool has_layout_borders_visible() const;
  private:
  bool _internal_has_layout_borders_visible() const;
  public:
  void clear_layout_borders_visible();
  bool layout_borders_visible() const;
  void set_layout_borders_visible(bool value);
  private:
  bool _internal_layout_borders_visible() const;
  void _internal_set_layout_borders_visible(bool value);
  public:

  // optional bool word_count_hud_visible = 11 [default = false];
  bool has_word_count_hud_visible() const;
  private:
  bool _internal_has_word_count_hud_visible() const;
  public:
  void clear_word_count_hud_visible();
  bool word_count_hud_visible() const;
  void set_word_count_hud_visible(bool value);
  private:
  bool _internal_word_count_hud_visible() const;
  void _internal_set_word_count_hud_visible(bool value);
  public:

  // optional .TP.ViewScaleMode view_scale_mode = 14 [default = ViewScaleMode_UserDefined];
  bool has_view_scale_mode() const;
  private:
  bool _internal_has_view_scale_mode() const;
  public:
  void clear_view_scale_mode();
  ::TP::ViewScaleMode view_scale_mode() const;
  void set_view_scale_mode(::TP::ViewScaleMode value);
  private:
  ::TP::ViewScaleMode _internal_view_scale_mode() const;
  void _internal_set_view_scale_mode(::TP::ViewScaleMode value);
  public:

  // optional bool shows_page_navigator = 13 [default = false];
  bool has_shows_page_navigator() const;
  private:
  bool _internal_has_shows_page_navigator() const;
  public:
  void clear_shows_page_navigator();
  bool shows_page_navigator() const;
  void set_shows_page_navigator(bool value);
  private:
  bool _internal_shows_page_navigator() const;
  void _internal_set_shows_page_navigator(bool value);
  public:

  // optional bool inspector_hidden = 19;
  bool has_inspector_hidden() const;
  private:
  bool _internal_has_inspector_hidden() const;
  public:
  void clear_inspector_hidden();
  bool inspector_hidden() const;
  void set_inspector_hidden(bool value);
  private:
  bool _internal_inspector_hidden() const;
  void _internal_set_inspector_hidden(bool value);
  public:

  // optional bool ruler_visible = 9 [default = true];
  bool has_ruler_visible() const;
  private:
  bool _internal_has_ruler_visible() const;
  public:
  void clear_ruler_visible();
  bool ruler_visible() const;
  void set_ruler_visible(bool value);
  private:
  bool _internal_ruler_visible() const;
  void _internal_set_ruler_visible(bool value);
  public:

  // optional bool shows_comments = 12 [default = true];
  bool has_shows_comments() const;
  private:
  bool _internal_has_shows_comments() const;
  public:
  void clear_shows_comments();
  bool shows_comments() const;
  void set_shows_comments(bool value);
  private:
  bool _internal_shows_comments() const;
  void _internal_set_shows_comments(bool value);
  public:

  // optional float view_scale = 15 [default = 1.25];
  bool has_view_scale() const;
  private:
  bool _internal_has_view_scale() const;
  public:
  void clear_view_scale();
  float view_scale() const;
  void set_view_scale(float value);
  private:
  float _internal_view_scale() const;
  void _internal_set_view_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:TP.ViewStateArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartUIState > chart_ui_state_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selected_inspector_switch_segment_identifier_;
    ::TSP::Point* visible_rect_origin_;
    ::TSP::Reference* selection_;
    ::TSP::Reference* selection_model_;
    ::TSP::Size* visible_rect_size_;
    ::TSP::Point* window_frame_origin_;
    ::TSP::Size* window_frame_size_;
    float obsolete_view_scale_;
    bool obsolete_landscape_;
    bool master_drawables_selectable_;
    bool layout_borders_visible_;
    bool word_count_hud_visible_;
    int view_scale_mode_;
    bool shows_page_navigator_;
    bool inspector_hidden_;
    bool ruler_visible_;
    bool shows_comments_;
    float view_scale_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class UIStateArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.UIStateArchive) */ {
 public:
  inline UIStateArchive() : UIStateArchive(nullptr) {}
  ~UIStateArchive() override;
  explicit PROTOBUF_CONSTEXPR UIStateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UIStateArchive(const UIStateArchive& from);
  UIStateArchive(UIStateArchive&& from) noexcept
    : UIStateArchive() {
    *this = ::std::move(from);
  }

  inline UIStateArchive& operator=(const UIStateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UIStateArchive& operator=(UIStateArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UIStateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UIStateArchive* internal_default_instance() {
    return reinterpret_cast<const UIStateArchive*>(
               &_UIStateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(UIStateArchive& a, UIStateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UIStateArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UIStateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UIStateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UIStateArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UIStateArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UIStateArchive& from) {
    UIStateArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UIStateArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.UIStateArchive";
  }
  protected:
  explicit UIStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayoutStateFieldNumber = 1,
    kViewStateFieldNumber = 2,
  };
  // optional .TSP.Reference layout_state = 1;
  bool has_layout_state() const;
  private:
  bool _internal_has_layout_state() const;
  public:
  void clear_layout_state();
  const ::TSP::Reference& layout_state() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_layout_state();
  ::TSP::Reference* mutable_layout_state();
  void set_allocated_layout_state(::TSP::Reference* layout_state);
  private:
  const ::TSP::Reference& _internal_layout_state() const;
  ::TSP::Reference* _internal_mutable_layout_state();
  public:
  void unsafe_arena_set_allocated_layout_state(
      ::TSP::Reference* layout_state);
  ::TSP::Reference* unsafe_arena_release_layout_state();

  // optional .TSP.Reference view_state = 2;
  bool has_view_state() const;
  private:
  bool _internal_has_view_state() const;
  public:
  void clear_view_state();
  const ::TSP::Reference& view_state() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_view_state();
  ::TSP::Reference* mutable_view_state();
  void set_allocated_view_state(::TSP::Reference* view_state);
  private:
  const ::TSP::Reference& _internal_view_state() const;
  ::TSP::Reference* _internal_mutable_view_state();
  public:
  void unsafe_arena_set_allocated_view_state(
      ::TSP::Reference* view_state);
  ::TSP::Reference* unsafe_arena_release_view_state();

  // @@protoc_insertion_point(class_scope:TP.UIStateArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* layout_state_;
    ::TSP::Reference* view_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TPArchives_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DocumentArchive

// required .TSA.DocumentArchive super = 15;
inline bool DocumentArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSA::DocumentArchive& DocumentArchive::_internal_super() const {
  const ::TSA::DocumentArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSA::DocumentArchive&>(
      ::TSA::_DocumentArchive_default_instance_);
}
inline const ::TSA::DocumentArchive& DocumentArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.super)
  return _internal_super();
}
inline void DocumentArchive::unsafe_arena_set_allocated_super(
    ::TSA::DocumentArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.DocumentArchive.super)
}
inline ::TSA::DocumentArchive* DocumentArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TSA::DocumentArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSA::DocumentArchive* DocumentArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.DocumentArchive.super)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TSA::DocumentArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSA::DocumentArchive* DocumentArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSA::DocumentArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSA::DocumentArchive* DocumentArchive::mutable_super() {
  ::TSA::DocumentArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.super)
  return _msg;
}
inline void DocumentArchive::set_allocated_super(::TSA::DocumentArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentArchive.super)
}

// optional .TSP.Reference stylesheet = 2;
inline bool DocumentArchive::_internal_has_stylesheet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stylesheet_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_stylesheet() const {
  return _internal_has_stylesheet();
}
inline const ::TSP::Reference& DocumentArchive::_internal_stylesheet() const {
  const ::TSP::Reference* p = _impl_.stylesheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::stylesheet() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.stylesheet)
  return _internal_stylesheet();
}
inline void DocumentArchive::unsafe_arena_set_allocated_stylesheet(
    ::TSP::Reference* stylesheet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stylesheet_);
  }
  _impl_.stylesheet_ = stylesheet;
  if (stylesheet) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.DocumentArchive.stylesheet)
}
inline ::TSP::Reference* DocumentArchive::release_stylesheet() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.stylesheet_;
  _impl_.stylesheet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_stylesheet() {
  // @@protoc_insertion_point(field_release:TP.DocumentArchive.stylesheet)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.stylesheet_;
  _impl_.stylesheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_stylesheet() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.stylesheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.stylesheet_ = p;
  }
  return _impl_.stylesheet_;
}
inline ::TSP::Reference* DocumentArchive::mutable_stylesheet() {
  ::TSP::Reference* _msg = _internal_mutable_stylesheet();
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.stylesheet)
  return _msg;
}
inline void DocumentArchive::set_allocated_stylesheet(::TSP::Reference* stylesheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stylesheet_);
  }
  if (stylesheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stylesheet));
    if (message_arena != submessage_arena) {
      stylesheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stylesheet, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.stylesheet_ = stylesheet;
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentArchive.stylesheet)
}

// optional .TSP.Reference floating_drawables = 3;
inline bool DocumentArchive::_internal_has_floating_drawables() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.floating_drawables_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_floating_drawables() const {
  return _internal_has_floating_drawables();
}
inline const ::TSP::Reference& DocumentArchive::_internal_floating_drawables() const {
  const ::TSP::Reference* p = _impl_.floating_drawables_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::floating_drawables() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.floating_drawables)
  return _internal_floating_drawables();
}
inline void DocumentArchive::unsafe_arena_set_allocated_floating_drawables(
    ::TSP::Reference* floating_drawables) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.floating_drawables_);
  }
  _impl_.floating_drawables_ = floating_drawables;
  if (floating_drawables) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.DocumentArchive.floating_drawables)
}
inline ::TSP::Reference* DocumentArchive::release_floating_drawables() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.floating_drawables_;
  _impl_.floating_drawables_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_floating_drawables() {
  // @@protoc_insertion_point(field_release:TP.DocumentArchive.floating_drawables)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.floating_drawables_;
  _impl_.floating_drawables_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_floating_drawables() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.floating_drawables_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.floating_drawables_ = p;
  }
  return _impl_.floating_drawables_;
}
inline ::TSP::Reference* DocumentArchive::mutable_floating_drawables() {
  ::TSP::Reference* _msg = _internal_mutable_floating_drawables();
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.floating_drawables)
  return _msg;
}
inline void DocumentArchive::set_allocated_floating_drawables(::TSP::Reference* floating_drawables) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.floating_drawables_);
  }
  if (floating_drawables) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(floating_drawables));
    if (message_arena != submessage_arena) {
      floating_drawables = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, floating_drawables, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.floating_drawables_ = floating_drawables;
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentArchive.floating_drawables)
}

// optional .TSP.Reference body_storage = 4;
inline bool DocumentArchive::_internal_has_body_storage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.body_storage_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_body_storage() const {
  return _internal_has_body_storage();
}
inline const ::TSP::Reference& DocumentArchive::_internal_body_storage() const {
  const ::TSP::Reference* p = _impl_.body_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::body_storage() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.body_storage)
  return _internal_body_storage();
}
inline void DocumentArchive::unsafe_arena_set_allocated_body_storage(
    ::TSP::Reference* body_storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_storage_);
  }
  _impl_.body_storage_ = body_storage;
  if (body_storage) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.DocumentArchive.body_storage)
}
inline ::TSP::Reference* DocumentArchive::release_body_storage() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.body_storage_;
  _impl_.body_storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_body_storage() {
  // @@protoc_insertion_point(field_release:TP.DocumentArchive.body_storage)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.body_storage_;
  _impl_.body_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_body_storage() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.body_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.body_storage_ = p;
  }
  return _impl_.body_storage_;
}
inline ::TSP::Reference* DocumentArchive::mutable_body_storage() {
  ::TSP::Reference* _msg = _internal_mutable_body_storage();
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.body_storage)
  return _msg;
}
inline void DocumentArchive::set_allocated_body_storage(::TSP::Reference* body_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_storage_);
  }
  if (body_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_storage));
    if (message_arena != submessage_arena) {
      body_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body_storage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.body_storage_ = body_storage;
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentArchive.body_storage)
}

// optional .TSP.Reference section = 5;
inline bool DocumentArchive::_internal_has_section() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.section_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_section() const {
  return _internal_has_section();
}
inline const ::TSP::Reference& DocumentArchive::_internal_section() const {
  const ::TSP::Reference* p = _impl_.section_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::section() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.section)
  return _internal_section();
}
inline void DocumentArchive::unsafe_arena_set_allocated_section(
    ::TSP::Reference* section) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.section_);
  }
  _impl_.section_ = section;
  if (section) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.DocumentArchive.section)
}
inline ::TSP::Reference* DocumentArchive::release_section() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.section_;
  _impl_.section_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_section() {
  // @@protoc_insertion_point(field_release:TP.DocumentArchive.section)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.section_;
  _impl_.section_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_section() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.section_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.section_ = p;
  }
  return _impl_.section_;
}
inline ::TSP::Reference* DocumentArchive::mutable_section() {
  ::TSP::Reference* _msg = _internal_mutable_section();
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.section)
  return _msg;
}
inline void DocumentArchive::set_allocated_section(::TSP::Reference* section) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.section_);
  }
  if (section) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(section));
    if (message_arena != submessage_arena) {
      section = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, section, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.section_ = section;
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentArchive.section)
}

// optional .TSP.Reference theme = 6;
inline bool DocumentArchive::_internal_has_theme() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.theme_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_theme() const {
  return _internal_has_theme();
}
inline const ::TSP::Reference& DocumentArchive::_internal_theme() const {
  const ::TSP::Reference* p = _impl_.theme_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::theme() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.theme)
  return _internal_theme();
}
inline void DocumentArchive::unsafe_arena_set_allocated_theme(
    ::TSP::Reference* theme) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.theme_);
  }
  _impl_.theme_ = theme;
  if (theme) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.DocumentArchive.theme)
}
inline ::TSP::Reference* DocumentArchive::release_theme() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.theme_;
  _impl_.theme_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_theme() {
  // @@protoc_insertion_point(field_release:TP.DocumentArchive.theme)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.theme_;
  _impl_.theme_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_theme() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.theme_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.theme_ = p;
  }
  return _impl_.theme_;
}
inline ::TSP::Reference* DocumentArchive::mutable_theme() {
  ::TSP::Reference* _msg = _internal_mutable_theme();
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.theme)
  return _msg;
}
inline void DocumentArchive::set_allocated_theme(::TSP::Reference* theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.theme_);
  }
  if (theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme));
    if (message_arena != submessage_arena) {
      theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, theme, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.theme_ = theme;
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentArchive.theme)
}

// optional .TSP.Reference settings = 7;
inline bool DocumentArchive::_internal_has_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.settings_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_settings() const {
  return _internal_has_settings();
}
inline const ::TSP::Reference& DocumentArchive::_internal_settings() const {
  const ::TSP::Reference* p = _impl_.settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::settings() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.settings)
  return _internal_settings();
}
inline void DocumentArchive::unsafe_arena_set_allocated_settings(
    ::TSP::Reference* settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.settings_);
  }
  _impl_.settings_ = settings;
  if (settings) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.DocumentArchive.settings)
}
inline ::TSP::Reference* DocumentArchive::release_settings() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = _impl_.settings_;
  _impl_.settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:TP.DocumentArchive.settings)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = _impl_.settings_;
  _impl_.settings_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_settings() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.settings_ = p;
  }
  return _impl_.settings_;
}
inline ::TSP::Reference* DocumentArchive::mutable_settings() {
  ::TSP::Reference* _msg = _internal_mutable_settings();
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.settings)
  return _msg;
}
inline void DocumentArchive::set_allocated_settings(::TSP::Reference* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.settings_);
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings));
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentArchive.settings)
}

// optional .TSP.Reference deprecated_layout_state = 11;
inline bool DocumentArchive::_internal_has_deprecated_layout_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.deprecated_layout_state_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_deprecated_layout_state() const {
  return _internal_has_deprecated_layout_state();
}
inline const ::TSP::Reference& DocumentArchive::_internal_deprecated_layout_state() const {
  const ::TSP::Reference* p = _impl_.deprecated_layout_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::deprecated_layout_state() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.deprecated_layout_state)
  return _internal_deprecated_layout_state();
}
inline void DocumentArchive::unsafe_arena_set_allocated_deprecated_layout_state(
    ::TSP::Reference* deprecated_layout_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deprecated_layout_state_);
  }
  _impl_.deprecated_layout_state_ = deprecated_layout_state;
  if (deprecated_layout_state) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.DocumentArchive.deprecated_layout_state)
}
inline ::TSP::Reference* DocumentArchive::release_deprecated_layout_state() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = _impl_.deprecated_layout_state_;
  _impl_.deprecated_layout_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_deprecated_layout_state() {
  // @@protoc_insertion_point(field_release:TP.DocumentArchive.deprecated_layout_state)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = _impl_.deprecated_layout_state_;
  _impl_.deprecated_layout_state_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_deprecated_layout_state() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.deprecated_layout_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.deprecated_layout_state_ = p;
  }
  return _impl_.deprecated_layout_state_;
}
inline ::TSP::Reference* DocumentArchive::mutable_deprecated_layout_state() {
  ::TSP::Reference* _msg = _internal_mutable_deprecated_layout_state();
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.deprecated_layout_state)
  return _msg;
}
inline void DocumentArchive::set_allocated_deprecated_layout_state(::TSP::Reference* deprecated_layout_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deprecated_layout_state_);
  }
  if (deprecated_layout_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_layout_state));
    if (message_arena != submessage_arena) {
      deprecated_layout_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_layout_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.deprecated_layout_state_ = deprecated_layout_state;
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentArchive.deprecated_layout_state)
}

// optional .TSP.Reference deprecated_view_state = 12;
inline bool DocumentArchive::_internal_has_deprecated_view_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.deprecated_view_state_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_deprecated_view_state() const {
  return _internal_has_deprecated_view_state();
}
inline const ::TSP::Reference& DocumentArchive::_internal_deprecated_view_state() const {
  const ::TSP::Reference* p = _impl_.deprecated_view_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::deprecated_view_state() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.deprecated_view_state)
  return _internal_deprecated_view_state();
}
inline void DocumentArchive::unsafe_arena_set_allocated_deprecated_view_state(
    ::TSP::Reference* deprecated_view_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deprecated_view_state_);
  }
  _impl_.deprecated_view_state_ = deprecated_view_state;
  if (deprecated_view_state) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.DocumentArchive.deprecated_view_state)
}
inline ::TSP::Reference* DocumentArchive::release_deprecated_view_state() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = _impl_.deprecated_view_state_;
  _impl_.deprecated_view_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_deprecated_view_state() {
  // @@protoc_insertion_point(field_release:TP.DocumentArchive.deprecated_view_state)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = _impl_.deprecated_view_state_;
  _impl_.deprecated_view_state_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_deprecated_view_state() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.deprecated_view_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.deprecated_view_state_ = p;
  }
  return _impl_.deprecated_view_state_;
}
inline ::TSP::Reference* DocumentArchive::mutable_deprecated_view_state() {
  ::TSP::Reference* _msg = _internal_mutable_deprecated_view_state();
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.deprecated_view_state)
  return _msg;
}
inline void DocumentArchive::set_allocated_deprecated_view_state(::TSP::Reference* deprecated_view_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deprecated_view_state_);
  }
  if (deprecated_view_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_view_state));
    if (message_arena != submessage_arena) {
      deprecated_view_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_view_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.deprecated_view_state_ = deprecated_view_state;
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentArchive.deprecated_view_state)
}

// repeated .TSP.Reference citation_records = 13;
inline int DocumentArchive::_internal_citation_records_size() const {
  return _impl_.citation_records_.size();
}
inline int DocumentArchive::citation_records_size() const {
  return _internal_citation_records_size();
}
inline ::TSP::Reference* DocumentArchive::mutable_citation_records(int index) {
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.citation_records)
  return _impl_.citation_records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
DocumentArchive::mutable_citation_records() {
  // @@protoc_insertion_point(field_mutable_list:TP.DocumentArchive.citation_records)
  return &_impl_.citation_records_;
}
inline const ::TSP::Reference& DocumentArchive::_internal_citation_records(int index) const {
  return _impl_.citation_records_.Get(index);
}
inline const ::TSP::Reference& DocumentArchive::citation_records(int index) const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.citation_records)
  return _internal_citation_records(index);
}
inline ::TSP::Reference* DocumentArchive::_internal_add_citation_records() {
  return _impl_.citation_records_.Add();
}
inline ::TSP::Reference* DocumentArchive::add_citation_records() {
  ::TSP::Reference* _add = _internal_add_citation_records();
  // @@protoc_insertion_point(field_add:TP.DocumentArchive.citation_records)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
DocumentArchive::citation_records() const {
  // @@protoc_insertion_point(field_list:TP.DocumentArchive.citation_records)
  return _impl_.citation_records_;
}

// repeated .TSP.Reference toc_styles = 14;
inline int DocumentArchive::_internal_toc_styles_size() const {
  return _impl_.toc_styles_.size();
}
inline int DocumentArchive::toc_styles_size() const {
  return _internal_toc_styles_size();
}
inline ::TSP::Reference* DocumentArchive::mutable_toc_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.toc_styles)
  return _impl_.toc_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
DocumentArchive::mutable_toc_styles() {
  // @@protoc_insertion_point(field_mutable_list:TP.DocumentArchive.toc_styles)
  return &_impl_.toc_styles_;
}
inline const ::TSP::Reference& DocumentArchive::_internal_toc_styles(int index) const {
  return _impl_.toc_styles_.Get(index);
}
inline const ::TSP::Reference& DocumentArchive::toc_styles(int index) const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.toc_styles)
  return _internal_toc_styles(index);
}
inline ::TSP::Reference* DocumentArchive::_internal_add_toc_styles() {
  return _impl_.toc_styles_.Add();
}
inline ::TSP::Reference* DocumentArchive::add_toc_styles() {
  ::TSP::Reference* _add = _internal_add_toc_styles();
  // @@protoc_insertion_point(field_add:TP.DocumentArchive.toc_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
DocumentArchive::toc_styles() const {
  // @@protoc_insertion_point(field_list:TP.DocumentArchive.toc_styles)
  return _impl_.toc_styles_;
}

// repeated .TSP.Reference change_sessions = 16;
inline int DocumentArchive::_internal_change_sessions_size() const {
  return _impl_.change_sessions_.size();
}
inline int DocumentArchive::change_sessions_size() const {
  return _internal_change_sessions_size();
}
inline ::TSP::Reference* DocumentArchive::mutable_change_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.change_sessions)
  return _impl_.change_sessions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
DocumentArchive::mutable_change_sessions() {
  // @@protoc_insertion_point(field_mutable_list:TP.DocumentArchive.change_sessions)
  return &_impl_.change_sessions_;
}
inline const ::TSP::Reference& DocumentArchive::_internal_change_sessions(int index) const {
  return _impl_.change_sessions_.Get(index);
}
inline const ::TSP::Reference& DocumentArchive::change_sessions(int index) const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.change_sessions)
  return _internal_change_sessions(index);
}
inline ::TSP::Reference* DocumentArchive::_internal_add_change_sessions() {
  return _impl_.change_sessions_.Add();
}
inline ::TSP::Reference* DocumentArchive::add_change_sessions() {
  ::TSP::Reference* _add = _internal_add_change_sessions();
  // @@protoc_insertion_point(field_add:TP.DocumentArchive.change_sessions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
DocumentArchive::change_sessions() const {
  // @@protoc_insertion_point(field_list:TP.DocumentArchive.change_sessions)
  return _impl_.change_sessions_;
}

// optional .TSP.Reference drawables_zorder = 20;
inline bool DocumentArchive::_internal_has_drawables_zorder() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.drawables_zorder_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_drawables_zorder() const {
  return _internal_has_drawables_zorder();
}
inline const ::TSP::Reference& DocumentArchive::_internal_drawables_zorder() const {
  const ::TSP::Reference* p = _impl_.drawables_zorder_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::drawables_zorder() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.drawables_zorder)
  return _internal_drawables_zorder();
}
inline void DocumentArchive::unsafe_arena_set_allocated_drawables_zorder(
    ::TSP::Reference* drawables_zorder) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drawables_zorder_);
  }
  _impl_.drawables_zorder_ = drawables_zorder;
  if (drawables_zorder) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.DocumentArchive.drawables_zorder)
}
inline ::TSP::Reference* DocumentArchive::release_drawables_zorder() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::TSP::Reference* temp = _impl_.drawables_zorder_;
  _impl_.drawables_zorder_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_drawables_zorder() {
  // @@protoc_insertion_point(field_release:TP.DocumentArchive.drawables_zorder)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::TSP::Reference* temp = _impl_.drawables_zorder_;
  _impl_.drawables_zorder_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_drawables_zorder() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.drawables_zorder_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.drawables_zorder_ = p;
  }
  return _impl_.drawables_zorder_;
}
inline ::TSP::Reference* DocumentArchive::mutable_drawables_zorder() {
  ::TSP::Reference* _msg = _internal_mutable_drawables_zorder();
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.drawables_zorder)
  return _msg;
}
inline void DocumentArchive::set_allocated_drawables_zorder(::TSP::Reference* drawables_zorder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drawables_zorder_);
  }
  if (drawables_zorder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawables_zorder));
    if (message_arena != submessage_arena) {
      drawables_zorder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drawables_zorder, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.drawables_zorder_ = drawables_zorder;
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentArchive.drawables_zorder)
}

// optional bool uses_single_header_footer = 21;
inline bool DocumentArchive::_internal_has_uses_single_header_footer() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool DocumentArchive::has_uses_single_header_footer() const {
  return _internal_has_uses_single_header_footer();
}
inline void DocumentArchive::clear_uses_single_header_footer() {
  _impl_.uses_single_header_footer_ = false;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline bool DocumentArchive::_internal_uses_single_header_footer() const {
  return _impl_.uses_single_header_footer_;
}
inline bool DocumentArchive::uses_single_header_footer() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.uses_single_header_footer)
  return _internal_uses_single_header_footer();
}
inline void DocumentArchive::_internal_set_uses_single_header_footer(bool value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.uses_single_header_footer_ = value;
}
inline void DocumentArchive::set_uses_single_header_footer(bool value) {
  _internal_set_uses_single_header_footer(value);
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.uses_single_header_footer)
}

// optional float page_width = 30;
inline bool DocumentArchive::_internal_has_page_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool DocumentArchive::has_page_width() const {
  return _internal_has_page_width();
}
inline void DocumentArchive::clear_page_width() {
  _impl_.page_width_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float DocumentArchive::_internal_page_width() const {
  return _impl_.page_width_;
}
inline float DocumentArchive::page_width() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.page_width)
  return _internal_page_width();
}
inline void DocumentArchive::_internal_set_page_width(float value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.page_width_ = value;
}
inline void DocumentArchive::set_page_width(float value) {
  _internal_set_page_width(value);
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.page_width)
}

// optional float page_height = 31;
inline bool DocumentArchive::_internal_has_page_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool DocumentArchive::has_page_height() const {
  return _internal_has_page_height();
}
inline void DocumentArchive::clear_page_height() {
  _impl_.page_height_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float DocumentArchive::_internal_page_height() const {
  return _impl_.page_height_;
}
inline float DocumentArchive::page_height() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.page_height)
  return _internal_page_height();
}
inline void DocumentArchive::_internal_set_page_height(float value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.page_height_ = value;
}
inline void DocumentArchive::set_page_height(float value) {
  _internal_set_page_height(value);
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.page_height)
}

// optional float left_margin = 32;
inline bool DocumentArchive::_internal_has_left_margin() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool DocumentArchive::has_left_margin() const {
  return _internal_has_left_margin();
}
inline void DocumentArchive::clear_left_margin() {
  _impl_.left_margin_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline float DocumentArchive::_internal_left_margin() const {
  return _impl_.left_margin_;
}
inline float DocumentArchive::left_margin() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.left_margin)
  return _internal_left_margin();
}
inline void DocumentArchive::_internal_set_left_margin(float value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.left_margin_ = value;
}
inline void DocumentArchive::set_left_margin(float value) {
  _internal_set_left_margin(value);
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.left_margin)
}

// optional float right_margin = 33;
inline bool DocumentArchive::_internal_has_right_margin() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool DocumentArchive::has_right_margin() const {
  return _internal_has_right_margin();
}
inline void DocumentArchive::clear_right_margin() {
  _impl_.right_margin_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline float DocumentArchive::_internal_right_margin() const {
  return _impl_.right_margin_;
}
inline float DocumentArchive::right_margin() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.right_margin)
  return _internal_right_margin();
}
inline void DocumentArchive::_internal_set_right_margin(float value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.right_margin_ = value;
}
inline void DocumentArchive::set_right_margin(float value) {
  _internal_set_right_margin(value);
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.right_margin)
}

// optional float top_margin = 34;
inline bool DocumentArchive::_internal_has_top_margin() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool DocumentArchive::has_top_margin() const {
  return _internal_has_top_margin();
}
inline void DocumentArchive::clear_top_margin() {
  _impl_.top_margin_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline float DocumentArchive::_internal_top_margin() const {
  return _impl_.top_margin_;
}
inline float DocumentArchive::top_margin() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.top_margin)
  return _internal_top_margin();
}
inline void DocumentArchive::_internal_set_top_margin(float value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.top_margin_ = value;
}
inline void DocumentArchive::set_top_margin(float value) {
  _internal_set_top_margin(value);
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.top_margin)
}

// optional float bottom_margin = 35;
inline bool DocumentArchive::_internal_has_bottom_margin() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool DocumentArchive::has_bottom_margin() const {
  return _internal_has_bottom_margin();
}
inline void DocumentArchive::clear_bottom_margin() {
  _impl_.bottom_margin_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline float DocumentArchive::_internal_bottom_margin() const {
  return _impl_.bottom_margin_;
}
inline float DocumentArchive::bottom_margin() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.bottom_margin)
  return _internal_bottom_margin();
}
inline void DocumentArchive::_internal_set_bottom_margin(float value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.bottom_margin_ = value;
}
inline void DocumentArchive::set_bottom_margin(float value) {
  _internal_set_bottom_margin(value);
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.bottom_margin)
}

// optional float header_margin = 36;
inline bool DocumentArchive::_internal_has_header_margin() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool DocumentArchive::has_header_margin() const {
  return _internal_has_header_margin();
}
inline void DocumentArchive::clear_header_margin() {
  _impl_.header_margin_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline float DocumentArchive::_internal_header_margin() const {
  return _impl_.header_margin_;
}
inline float DocumentArchive::header_margin() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.header_margin)
  return _internal_header_margin();
}
inline void DocumentArchive::_internal_set_header_margin(float value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.header_margin_ = value;
}
inline void DocumentArchive::set_header_margin(float value) {
  _internal_set_header_margin(value);
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.header_margin)
}

// optional float footer_margin = 37;
inline bool DocumentArchive::_internal_has_footer_margin() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool DocumentArchive::has_footer_margin() const {
  return _internal_has_footer_margin();
}
inline void DocumentArchive::clear_footer_margin() {
  _impl_.footer_margin_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline float DocumentArchive::_internal_footer_margin() const {
  return _impl_.footer_margin_;
}
inline float DocumentArchive::footer_margin() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.footer_margin)
  return _internal_footer_margin();
}
inline void DocumentArchive::_internal_set_footer_margin(float value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.footer_margin_ = value;
}
inline void DocumentArchive::set_footer_margin(float value) {
  _internal_set_footer_margin(value);
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.footer_margin)
}

// optional float page_scale = 38;
inline bool DocumentArchive::_internal_has_page_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool DocumentArchive::has_page_scale() const {
  return _internal_has_page_scale();
}
inline void DocumentArchive::clear_page_scale() {
  _impl_.page_scale_ = 0;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline float DocumentArchive::_internal_page_scale() const {
  return _impl_.page_scale_;
}
inline float DocumentArchive::page_scale() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.page_scale)
  return _internal_page_scale();
}
inline void DocumentArchive::_internal_set_page_scale(float value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.page_scale_ = value;
}
inline void DocumentArchive::set_page_scale(float value) {
  _internal_set_page_scale(value);
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.page_scale)
}

// optional bool layout_body_vertically = 39;
inline bool DocumentArchive::_internal_has_layout_body_vertically() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool DocumentArchive::has_layout_body_vertically() const {
  return _internal_has_layout_body_vertically();
}
inline void DocumentArchive::clear_layout_body_vertically() {
  _impl_.layout_body_vertically_ = false;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline bool DocumentArchive::_internal_layout_body_vertically() const {
  return _impl_.layout_body_vertically_;
}
inline bool DocumentArchive::layout_body_vertically() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.layout_body_vertically)
  return _internal_layout_body_vertically();
}
inline void DocumentArchive::_internal_set_layout_body_vertically(bool value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.layout_body_vertically_ = value;
}
inline void DocumentArchive::set_layout_body_vertically(bool value) {
  _internal_set_layout_body_vertically(value);
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.layout_body_vertically)
}

// optional bool change_tracking_enabled = 40;
inline bool DocumentArchive::_internal_has_change_tracking_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool DocumentArchive::has_change_tracking_enabled() const {
  return _internal_has_change_tracking_enabled();
}
inline void DocumentArchive::clear_change_tracking_enabled() {
  _impl_.change_tracking_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline bool DocumentArchive::_internal_change_tracking_enabled() const {
  return _impl_.change_tracking_enabled_;
}
inline bool DocumentArchive::change_tracking_enabled() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.change_tracking_enabled)
  return _internal_change_tracking_enabled();
}
inline void DocumentArchive::_internal_set_change_tracking_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.change_tracking_enabled_ = value;
}
inline void DocumentArchive::set_change_tracking_enabled(bool value) {
  _internal_set_change_tracking_enabled(value);
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.change_tracking_enabled)
}

// optional .TSP.Reference tables_custom_format_list = 41;
inline bool DocumentArchive::_internal_has_tables_custom_format_list() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tables_custom_format_list_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_tables_custom_format_list() const {
  return _internal_has_tables_custom_format_list();
}
inline const ::TSP::Reference& DocumentArchive::_internal_tables_custom_format_list() const {
  const ::TSP::Reference* p = _impl_.tables_custom_format_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::tables_custom_format_list() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.tables_custom_format_list)
  return _internal_tables_custom_format_list();
}
inline void DocumentArchive::unsafe_arena_set_allocated_tables_custom_format_list(
    ::TSP::Reference* tables_custom_format_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tables_custom_format_list_);
  }
  _impl_.tables_custom_format_list_ = tables_custom_format_list;
  if (tables_custom_format_list) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.DocumentArchive.tables_custom_format_list)
}
inline ::TSP::Reference* DocumentArchive::release_tables_custom_format_list() {
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::TSP::Reference* temp = _impl_.tables_custom_format_list_;
  _impl_.tables_custom_format_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_tables_custom_format_list() {
  // @@protoc_insertion_point(field_release:TP.DocumentArchive.tables_custom_format_list)
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::TSP::Reference* temp = _impl_.tables_custom_format_list_;
  _impl_.tables_custom_format_list_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_tables_custom_format_list() {
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.tables_custom_format_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.tables_custom_format_list_ = p;
  }
  return _impl_.tables_custom_format_list_;
}
inline ::TSP::Reference* DocumentArchive::mutable_tables_custom_format_list() {
  ::TSP::Reference* _msg = _internal_mutable_tables_custom_format_list();
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.tables_custom_format_list)
  return _msg;
}
inline void DocumentArchive::set_allocated_tables_custom_format_list(::TSP::Reference* tables_custom_format_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tables_custom_format_list_);
  }
  if (tables_custom_format_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tables_custom_format_list));
    if (message_arena != submessage_arena) {
      tables_custom_format_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tables_custom_format_list, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.tables_custom_format_list_ = tables_custom_format_list;
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentArchive.tables_custom_format_list)
}

// optional uint32 orientation = 42 [default = 0];
inline bool DocumentArchive::_internal_has_orientation() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool DocumentArchive::has_orientation() const {
  return _internal_has_orientation();
}
inline void DocumentArchive::clear_orientation() {
  _impl_.orientation_ = 0u;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline uint32_t DocumentArchive::_internal_orientation() const {
  return _impl_.orientation_;
}
inline uint32_t DocumentArchive::orientation() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.orientation)
  return _internal_orientation();
}
inline void DocumentArchive::_internal_set_orientation(uint32_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.orientation_ = value;
}
inline void DocumentArchive::set_orientation(uint32_t value) {
  _internal_set_orientation(value);
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.orientation)
}

// optional string printer_id = 43;
inline bool DocumentArchive::_internal_has_printer_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DocumentArchive::has_printer_id() const {
  return _internal_has_printer_id();
}
inline void DocumentArchive::clear_printer_id() {
  _impl_.printer_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DocumentArchive::printer_id() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.printer_id)
  return _internal_printer_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DocumentArchive::set_printer_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.printer_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.printer_id)
}
inline std::string* DocumentArchive::mutable_printer_id() {
  std::string* _s = _internal_mutable_printer_id();
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.printer_id)
  return _s;
}
inline const std::string& DocumentArchive::_internal_printer_id() const {
  return _impl_.printer_id_.Get();
}
inline void DocumentArchive::_internal_set_printer_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.printer_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DocumentArchive::_internal_mutable_printer_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.printer_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DocumentArchive::release_printer_id() {
  // @@protoc_insertion_point(field_release:TP.DocumentArchive.printer_id)
  if (!_internal_has_printer_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.printer_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.printer_id_.IsDefault()) {
    _impl_.printer_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DocumentArchive::set_allocated_printer_id(std::string* printer_id) {
  if (printer_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.printer_id_.SetAllocated(printer_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.printer_id_.IsDefault()) {
    _impl_.printer_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentArchive.printer_id)
}

// optional string paper_id = 44;
inline bool DocumentArchive::_internal_has_paper_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DocumentArchive::has_paper_id() const {
  return _internal_has_paper_id();
}
inline void DocumentArchive::clear_paper_id() {
  _impl_.paper_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DocumentArchive::paper_id() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.paper_id)
  return _internal_paper_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DocumentArchive::set_paper_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.paper_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.paper_id)
}
inline std::string* DocumentArchive::mutable_paper_id() {
  std::string* _s = _internal_mutable_paper_id();
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.paper_id)
  return _s;
}
inline const std::string& DocumentArchive::_internal_paper_id() const {
  return _impl_.paper_id_.Get();
}
inline void DocumentArchive::_internal_set_paper_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.paper_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DocumentArchive::_internal_mutable_paper_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.paper_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DocumentArchive::release_paper_id() {
  // @@protoc_insertion_point(field_release:TP.DocumentArchive.paper_id)
  if (!_internal_has_paper_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.paper_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.paper_id_.IsDefault()) {
    _impl_.paper_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DocumentArchive::set_allocated_paper_id(std::string* paper_id) {
  if (paper_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.paper_id_.SetAllocated(paper_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.paper_id_.IsDefault()) {
    _impl_.paper_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentArchive.paper_id)
}

// optional bool change_tracking_paused = 45;
inline bool DocumentArchive::_internal_has_change_tracking_paused() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool DocumentArchive::has_change_tracking_paused() const {
  return _internal_has_change_tracking_paused();
}
inline void DocumentArchive::clear_change_tracking_paused() {
  _impl_.change_tracking_paused_ = false;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline bool DocumentArchive::_internal_change_tracking_paused() const {
  return _impl_.change_tracking_paused_;
}
inline bool DocumentArchive::change_tracking_paused() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.change_tracking_paused)
  return _internal_change_tracking_paused();
}
inline void DocumentArchive::_internal_set_change_tracking_paused(bool value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.change_tracking_paused_ = value;
}
inline void DocumentArchive::set_change_tracking_paused(bool value) {
  _internal_set_change_tracking_paused(value);
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.change_tracking_paused)
}

// -------------------------------------------------------------------

// ThemeArchive

// required .TSS.ThemeArchive super = 1;
inline bool ThemeArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool ThemeArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::ThemeArchive& ThemeArchive::_internal_super() const {
  const ::TSS::ThemeArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::ThemeArchive&>(
      ::TSS::_ThemeArchive_default_instance_);
}
inline const ::TSS::ThemeArchive& ThemeArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.ThemeArchive.super)
  return _internal_super();
}
inline void ThemeArchive::unsafe_arena_set_allocated_super(
    ::TSS::ThemeArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.ThemeArchive.super)
}
inline ::TSS::ThemeArchive* ThemeArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSS::ThemeArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSS::ThemeArchive* ThemeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.ThemeArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSS::ThemeArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSS::ThemeArchive* ThemeArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::ThemeArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSS::ThemeArchive* ThemeArchive::mutable_super() {
  ::TSS::ThemeArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TP.ThemeArchive.super)
  return _msg;
}
inline void ThemeArchive::set_allocated_super(::TSS::ThemeArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.ThemeArchive.super)
}

// -------------------------------------------------------------------

// SettingsArchive

// optional bool body = 1 [default = true];
inline bool SettingsArchive::_internal_has_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool SettingsArchive::has_body() const {
  return _internal_has_body();
}
inline void SettingsArchive::clear_body() {
  _impl_.body_ = true;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline bool SettingsArchive::_internal_body() const {
  return _impl_.body_;
}
inline bool SettingsArchive::body() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.body)
  return _internal_body();
}
inline void SettingsArchive::_internal_set_body(bool value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.body_ = value;
}
inline void SettingsArchive::set_body(bool value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.body)
}

// optional bool headers = 2 [default = true];
inline bool SettingsArchive::_internal_has_headers() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool SettingsArchive::has_headers() const {
  return _internal_has_headers();
}
inline void SettingsArchive::clear_headers() {
  _impl_.headers_ = true;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline bool SettingsArchive::_internal_headers() const {
  return _impl_.headers_;
}
inline bool SettingsArchive::headers() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.headers)
  return _internal_headers();
}
inline void SettingsArchive::_internal_set_headers(bool value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.headers_ = value;
}
inline void SettingsArchive::set_headers(bool value) {
  _internal_set_headers(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.headers)
}

// optional bool footers = 3 [default = true];
inline bool SettingsArchive::_internal_has_footers() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool SettingsArchive::has_footers() const {
  return _internal_has_footers();
}
inline void SettingsArchive::clear_footers() {
  _impl_.footers_ = true;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline bool SettingsArchive::_internal_footers() const {
  return _impl_.footers_;
}
inline bool SettingsArchive::footers() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.footers)
  return _internal_footers();
}
inline void SettingsArchive::_internal_set_footers(bool value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.footers_ = value;
}
inline void SettingsArchive::set_footers(bool value) {
  _internal_set_footers(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.footers)
}

// optional bool preview = 4 [default = true];
inline bool SettingsArchive::_internal_has_preview() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool SettingsArchive::has_preview() const {
  return _internal_has_preview();
}
inline void SettingsArchive::clear_preview() {
  _impl_.preview_ = true;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline bool SettingsArchive::_internal_preview() const {
  return _impl_.preview_;
}
inline bool SettingsArchive::preview() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.preview)
  return _internal_preview();
}
inline void SettingsArchive::_internal_set_preview(bool value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.preview_ = value;
}
inline void SettingsArchive::set_preview(bool value) {
  _internal_set_preview(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.preview)
}

// optional bool copy_movies = 5 [default = true];
inline bool SettingsArchive::_internal_has_copy_movies() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool SettingsArchive::has_copy_movies() const {
  return _internal_has_copy_movies();
}
inline void SettingsArchive::clear_copy_movies() {
  _impl_.copy_movies_ = true;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline bool SettingsArchive::_internal_copy_movies() const {
  return _impl_.copy_movies_;
}
inline bool SettingsArchive::copy_movies() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.copy_movies)
  return _internal_copy_movies();
}
inline void SettingsArchive::_internal_set_copy_movies(bool value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.copy_movies_ = value;
}
inline void SettingsArchive::set_copy_movies(bool value) {
  _internal_set_copy_movies(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.copy_movies)
}

// optional bool copy_assets = 6 [default = true];
inline bool SettingsArchive::_internal_has_copy_assets() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool SettingsArchive::has_copy_assets() const {
  return _internal_has_copy_assets();
}
inline void SettingsArchive::clear_copy_assets() {
  _impl_.copy_assets_ = true;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline bool SettingsArchive::_internal_copy_assets() const {
  return _impl_.copy_assets_;
}
inline bool SettingsArchive::copy_assets() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.copy_assets)
  return _internal_copy_assets();
}
inline void SettingsArchive::_internal_set_copy_assets(bool value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.copy_assets_ = value;
}
inline void SettingsArchive::set_copy_assets(bool value) {
  _internal_set_copy_assets(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.copy_assets)
}

// optional bool placeholder_authoring = 7 [default = false];
inline bool SettingsArchive::_internal_has_placeholder_authoring() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SettingsArchive::has_placeholder_authoring() const {
  return _internal_has_placeholder_authoring();
}
inline void SettingsArchive::clear_placeholder_authoring() {
  _impl_.placeholder_authoring_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool SettingsArchive::_internal_placeholder_authoring() const {
  return _impl_.placeholder_authoring_;
}
inline bool SettingsArchive::placeholder_authoring() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.placeholder_authoring)
  return _internal_placeholder_authoring();
}
inline void SettingsArchive::_internal_set_placeholder_authoring(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.placeholder_authoring_ = value;
}
inline void SettingsArchive::set_placeholder_authoring(bool value) {
  _internal_set_placeholder_authoring(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.placeholder_authoring)
}

// optional bool links_enabled = 8 [default = true];
inline bool SettingsArchive::_internal_has_links_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool SettingsArchive::has_links_enabled() const {
  return _internal_has_links_enabled();
}
inline void SettingsArchive::clear_links_enabled() {
  _impl_.links_enabled_ = true;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline bool SettingsArchive::_internal_links_enabled() const {
  return _impl_.links_enabled_;
}
inline bool SettingsArchive::links_enabled() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.links_enabled)
  return _internal_links_enabled();
}
inline void SettingsArchive::_internal_set_links_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.links_enabled_ = value;
}
inline void SettingsArchive::set_links_enabled(bool value) {
  _internal_set_links_enabled(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.links_enabled)
}

// optional bool hyphenation = 9 [default = false];
inline bool SettingsArchive::_internal_has_hyphenation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SettingsArchive::has_hyphenation() const {
  return _internal_has_hyphenation();
}
inline void SettingsArchive::clear_hyphenation() {
  _impl_.hyphenation_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool SettingsArchive::_internal_hyphenation() const {
  return _impl_.hyphenation_;
}
inline bool SettingsArchive::hyphenation() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.hyphenation)
  return _internal_hyphenation();
}
inline void SettingsArchive::_internal_set_hyphenation(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.hyphenation_ = value;
}
inline void SettingsArchive::set_hyphenation(bool value) {
  _internal_set_hyphenation(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.hyphenation)
}

// optional bool use_ligatures = 10 [default = false];
inline bool SettingsArchive::_internal_has_use_ligatures() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SettingsArchive::has_use_ligatures() const {
  return _internal_has_use_ligatures();
}
inline void SettingsArchive::clear_use_ligatures() {
  _impl_.use_ligatures_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool SettingsArchive::_internal_use_ligatures() const {
  return _impl_.use_ligatures_;
}
inline bool SettingsArchive::use_ligatures() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.use_ligatures)
  return _internal_use_ligatures();
}
inline void SettingsArchive::_internal_set_use_ligatures(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.use_ligatures_ = value;
}
inline void SettingsArchive::set_use_ligatures(bool value) {
  _internal_set_use_ligatures(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.use_ligatures)
}

// optional bool toc_links_enabled = 11 [default = false];
inline bool SettingsArchive::_internal_has_toc_links_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SettingsArchive::has_toc_links_enabled() const {
  return _internal_has_toc_links_enabled();
}
inline void SettingsArchive::clear_toc_links_enabled() {
  _impl_.toc_links_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool SettingsArchive::_internal_toc_links_enabled() const {
  return _impl_.toc_links_enabled_;
}
inline bool SettingsArchive::toc_links_enabled() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.toc_links_enabled)
  return _internal_toc_links_enabled();
}
inline void SettingsArchive::_internal_set_toc_links_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.toc_links_enabled_ = value;
}
inline void SettingsArchive::set_toc_links_enabled(bool value) {
  _internal_set_toc_links_enabled(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.toc_links_enabled)
}

// optional bool show_ct_markup = 12 [default = true];
inline bool SettingsArchive::_internal_has_show_ct_markup() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool SettingsArchive::has_show_ct_markup() const {
  return _internal_has_show_ct_markup();
}
inline void SettingsArchive::clear_show_ct_markup() {
  _impl_.show_ct_markup_ = true;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline bool SettingsArchive::_internal_show_ct_markup() const {
  return _impl_.show_ct_markup_;
}
inline bool SettingsArchive::show_ct_markup() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.show_ct_markup)
  return _internal_show_ct_markup();
}
inline void SettingsArchive::_internal_set_show_ct_markup(bool value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.show_ct_markup_ = value;
}
inline void SettingsArchive::set_show_ct_markup(bool value) {
  _internal_set_show_ct_markup(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.show_ct_markup)
}

// optional bool show_ct_deletions = 13 [default = true];
inline bool SettingsArchive::_internal_has_show_ct_deletions() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool SettingsArchive::has_show_ct_deletions() const {
  return _internal_has_show_ct_deletions();
}
inline void SettingsArchive::clear_show_ct_deletions() {
  _impl_.show_ct_deletions_ = true;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline bool SettingsArchive::_internal_show_ct_deletions() const {
  return _impl_.show_ct_deletions_;
}
inline bool SettingsArchive::show_ct_deletions() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.show_ct_deletions)
  return _internal_show_ct_deletions();
}
inline void SettingsArchive::_internal_set_show_ct_deletions(bool value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.show_ct_deletions_ = value;
}
inline void SettingsArchive::set_show_ct_deletions(bool value) {
  _internal_set_show_ct_deletions(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.show_ct_deletions)
}

// optional int32 ct_bubbles_visibility = 14;
inline bool SettingsArchive::_internal_has_ct_bubbles_visibility() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SettingsArchive::has_ct_bubbles_visibility() const {
  return _internal_has_ct_bubbles_visibility();
}
inline void SettingsArchive::clear_ct_bubbles_visibility() {
  _impl_.ct_bubbles_visibility_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t SettingsArchive::_internal_ct_bubbles_visibility() const {
  return _impl_.ct_bubbles_visibility_;
}
inline int32_t SettingsArchive::ct_bubbles_visibility() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.ct_bubbles_visibility)
  return _internal_ct_bubbles_visibility();
}
inline void SettingsArchive::_internal_set_ct_bubbles_visibility(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.ct_bubbles_visibility_ = value;
}
inline void SettingsArchive::set_ct_bubbles_visibility(int32_t value) {
  _internal_set_ct_bubbles_visibility(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.ct_bubbles_visibility)
}

// optional bool change_bars_visible = 15 [default = true];
inline bool SettingsArchive::_internal_has_change_bars_visible() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool SettingsArchive::has_change_bars_visible() const {
  return _internal_has_change_bars_visible();
}
inline void SettingsArchive::clear_change_bars_visible() {
  _impl_.change_bars_visible_ = true;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline bool SettingsArchive::_internal_change_bars_visible() const {
  return _impl_.change_bars_visible_;
}
inline bool SettingsArchive::change_bars_visible() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.change_bars_visible)
  return _internal_change_bars_visible();
}
inline void SettingsArchive::_internal_set_change_bars_visible(bool value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.change_bars_visible_ = value;
}
inline void SettingsArchive::set_change_bars_visible(bool value) {
  _internal_set_change_bars_visible(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.change_bars_visible)
}

// optional bool format_changes_visible = 16 [default = true];
inline bool SettingsArchive::_internal_has_format_changes_visible() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool SettingsArchive::has_format_changes_visible() const {
  return _internal_has_format_changes_visible();
}
inline void SettingsArchive::clear_format_changes_visible() {
  _impl_.format_changes_visible_ = true;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline bool SettingsArchive::_internal_format_changes_visible() const {
  return _impl_.format_changes_visible_;
}
inline bool SettingsArchive::format_changes_visible() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.format_changes_visible)
  return _internal_format_changes_visible();
}
inline void SettingsArchive::_internal_set_format_changes_visible(bool value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.format_changes_visible_ = value;
}
inline void SettingsArchive::set_format_changes_visible(bool value) {
  _internal_set_format_changes_visible(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.format_changes_visible)
}

// optional bool annotations_visible = 17 [default = true];
inline bool SettingsArchive::_internal_has_annotations_visible() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool SettingsArchive::has_annotations_visible() const {
  return _internal_has_annotations_visible();
}
inline void SettingsArchive::clear_annotations_visible() {
  _impl_.annotations_visible_ = true;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline bool SettingsArchive::_internal_annotations_visible() const {
  return _impl_.annotations_visible_;
}
inline bool SettingsArchive::annotations_visible() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.annotations_visible)
  return _internal_annotations_visible();
}
inline void SettingsArchive::_internal_set_annotations_visible(bool value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.annotations_visible_ = value;
}
inline void SettingsArchive::set_annotations_visible(bool value) {
  _internal_set_annotations_visible(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.annotations_visible)
}

// optional bool document_is_rtl = 18 [default = false];
inline bool SettingsArchive::_internal_has_document_is_rtl() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SettingsArchive::has_document_is_rtl() const {
  return _internal_has_document_is_rtl();
}
inline void SettingsArchive::clear_document_is_rtl() {
  _impl_.document_is_rtl_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool SettingsArchive::_internal_document_is_rtl() const {
  return _impl_.document_is_rtl_;
}
inline bool SettingsArchive::document_is_rtl() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.document_is_rtl)
  return _internal_document_is_rtl();
}
inline void SettingsArchive::_internal_set_document_is_rtl(bool value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.document_is_rtl_ = value;
}
inline void SettingsArchive::set_document_is_rtl(bool value) {
  _internal_set_document_is_rtl(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.document_is_rtl)
}

// optional string decimal_tab = 20;
inline bool SettingsArchive::_internal_has_decimal_tab() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SettingsArchive::has_decimal_tab() const {
  return _internal_has_decimal_tab();
}
inline void SettingsArchive::clear_decimal_tab() {
  _impl_.decimal_tab_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SettingsArchive::decimal_tab() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.decimal_tab)
  return _internal_decimal_tab();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SettingsArchive::set_decimal_tab(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.decimal_tab_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.decimal_tab)
}
inline std::string* SettingsArchive::mutable_decimal_tab() {
  std::string* _s = _internal_mutable_decimal_tab();
  // @@protoc_insertion_point(field_mutable:TP.SettingsArchive.decimal_tab)
  return _s;
}
inline const std::string& SettingsArchive::_internal_decimal_tab() const {
  return _impl_.decimal_tab_.Get();
}
inline void SettingsArchive::_internal_set_decimal_tab(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.decimal_tab_.Set(value, GetArenaForAllocation());
}
inline std::string* SettingsArchive::_internal_mutable_decimal_tab() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.decimal_tab_.Mutable(GetArenaForAllocation());
}
inline std::string* SettingsArchive::release_decimal_tab() {
  // @@protoc_insertion_point(field_release:TP.SettingsArchive.decimal_tab)
  if (!_internal_has_decimal_tab()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.decimal_tab_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.decimal_tab_.IsDefault()) {
    _impl_.decimal_tab_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SettingsArchive::set_allocated_decimal_tab(std::string* decimal_tab) {
  if (decimal_tab != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.decimal_tab_.SetAllocated(decimal_tab, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.decimal_tab_.IsDefault()) {
    _impl_.decimal_tab_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TP.SettingsArchive.decimal_tab)
}

// optional string language = 21;
inline bool SettingsArchive::_internal_has_language() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SettingsArchive::has_language() const {
  return _internal_has_language();
}
inline void SettingsArchive::clear_language() {
  _impl_.language_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SettingsArchive::language() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SettingsArchive::set_language(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.language_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.language)
}
inline std::string* SettingsArchive::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:TP.SettingsArchive.language)
  return _s;
}
inline const std::string& SettingsArchive::_internal_language() const {
  return _impl_.language_.Get();
}
inline void SettingsArchive::_internal_set_language(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.language_.Set(value, GetArenaForAllocation());
}
inline std::string* SettingsArchive::_internal_mutable_language() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.language_.Mutable(GetArenaForAllocation());
}
inline std::string* SettingsArchive::release_language() {
  // @@protoc_insertion_point(field_release:TP.SettingsArchive.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.language_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_.IsDefault()) {
    _impl_.language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SettingsArchive::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.language_.SetAllocated(language, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_.IsDefault()) {
    _impl_.language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TP.SettingsArchive.language)
}

// optional string hyphenation_language = 22;
inline bool SettingsArchive::_internal_has_hyphenation_language() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SettingsArchive::has_hyphenation_language() const {
  return _internal_has_hyphenation_language();
}
inline void SettingsArchive::clear_hyphenation_language() {
  _impl_.hyphenation_language_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SettingsArchive::hyphenation_language() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.hyphenation_language)
  return _internal_hyphenation_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SettingsArchive::set_hyphenation_language(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.hyphenation_language_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.hyphenation_language)
}
inline std::string* SettingsArchive::mutable_hyphenation_language() {
  std::string* _s = _internal_mutable_hyphenation_language();
  // @@protoc_insertion_point(field_mutable:TP.SettingsArchive.hyphenation_language)
  return _s;
}
inline const std::string& SettingsArchive::_internal_hyphenation_language() const {
  return _impl_.hyphenation_language_.Get();
}
inline void SettingsArchive::_internal_set_hyphenation_language(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.hyphenation_language_.Set(value, GetArenaForAllocation());
}
inline std::string* SettingsArchive::_internal_mutable_hyphenation_language() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.hyphenation_language_.Mutable(GetArenaForAllocation());
}
inline std::string* SettingsArchive::release_hyphenation_language() {
  // @@protoc_insertion_point(field_release:TP.SettingsArchive.hyphenation_language)
  if (!_internal_has_hyphenation_language()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.hyphenation_language_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hyphenation_language_.IsDefault()) {
    _impl_.hyphenation_language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SettingsArchive::set_allocated_hyphenation_language(std::string* hyphenation_language) {
  if (hyphenation_language != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.hyphenation_language_.SetAllocated(hyphenation_language, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hyphenation_language_.IsDefault()) {
    _impl_.hyphenation_language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TP.SettingsArchive.hyphenation_language)
}

// optional string creation_locale = 23;
inline bool SettingsArchive::_internal_has_creation_locale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SettingsArchive::has_creation_locale() const {
  return _internal_has_creation_locale();
}
inline void SettingsArchive::clear_creation_locale() {
  _impl_.creation_locale_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SettingsArchive::creation_locale() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.creation_locale)
  return _internal_creation_locale();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SettingsArchive::set_creation_locale(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.creation_locale_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.creation_locale)
}
inline std::string* SettingsArchive::mutable_creation_locale() {
  std::string* _s = _internal_mutable_creation_locale();
  // @@protoc_insertion_point(field_mutable:TP.SettingsArchive.creation_locale)
  return _s;
}
inline const std::string& SettingsArchive::_internal_creation_locale() const {
  return _impl_.creation_locale_.Get();
}
inline void SettingsArchive::_internal_set_creation_locale(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.creation_locale_.Set(value, GetArenaForAllocation());
}
inline std::string* SettingsArchive::_internal_mutable_creation_locale() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.creation_locale_.Mutable(GetArenaForAllocation());
}
inline std::string* SettingsArchive::release_creation_locale() {
  // @@protoc_insertion_point(field_release:TP.SettingsArchive.creation_locale)
  if (!_internal_has_creation_locale()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.creation_locale_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creation_locale_.IsDefault()) {
    _impl_.creation_locale_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SettingsArchive::set_allocated_creation_locale(std::string* creation_locale) {
  if (creation_locale != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.creation_locale_.SetAllocated(creation_locale, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creation_locale_.IsDefault()) {
    _impl_.creation_locale_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TP.SettingsArchive.creation_locale)
}

// optional string last_locale = 24;
inline bool SettingsArchive::_internal_has_last_locale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SettingsArchive::has_last_locale() const {
  return _internal_has_last_locale();
}
inline void SettingsArchive::clear_last_locale() {
  _impl_.last_locale_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SettingsArchive::last_locale() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.last_locale)
  return _internal_last_locale();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SettingsArchive::set_last_locale(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.last_locale_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.last_locale)
}
inline std::string* SettingsArchive::mutable_last_locale() {
  std::string* _s = _internal_mutable_last_locale();
  // @@protoc_insertion_point(field_mutable:TP.SettingsArchive.last_locale)
  return _s;
}
inline const std::string& SettingsArchive::_internal_last_locale() const {
  return _impl_.last_locale_.Get();
}
inline void SettingsArchive::_internal_set_last_locale(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.last_locale_.Set(value, GetArenaForAllocation());
}
inline std::string* SettingsArchive::_internal_mutable_last_locale() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.last_locale_.Mutable(GetArenaForAllocation());
}
inline std::string* SettingsArchive::release_last_locale() {
  // @@protoc_insertion_point(field_release:TP.SettingsArchive.last_locale)
  if (!_internal_has_last_locale()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.last_locale_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.last_locale_.IsDefault()) {
    _impl_.last_locale_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SettingsArchive::set_allocated_last_locale(std::string* last_locale) {
  if (last_locale != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.last_locale_.SetAllocated(last_locale, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.last_locale_.IsDefault()) {
    _impl_.last_locale_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TP.SettingsArchive.last_locale)
}

// optional string orig_template = 25;
inline bool SettingsArchive::_internal_has_orig_template() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SettingsArchive::has_orig_template() const {
  return _internal_has_orig_template();
}
inline void SettingsArchive::clear_orig_template() {
  _impl_.orig_template_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& SettingsArchive::orig_template() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.orig_template)
  return _internal_orig_template();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SettingsArchive::set_orig_template(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.orig_template_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.orig_template)
}
inline std::string* SettingsArchive::mutable_orig_template() {
  std::string* _s = _internal_mutable_orig_template();
  // @@protoc_insertion_point(field_mutable:TP.SettingsArchive.orig_template)
  return _s;
}
inline const std::string& SettingsArchive::_internal_orig_template() const {
  return _impl_.orig_template_.Get();
}
inline void SettingsArchive::_internal_set_orig_template(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.orig_template_.Set(value, GetArenaForAllocation());
}
inline std::string* SettingsArchive::_internal_mutable_orig_template() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.orig_template_.Mutable(GetArenaForAllocation());
}
inline std::string* SettingsArchive::release_orig_template() {
  // @@protoc_insertion_point(field_release:TP.SettingsArchive.orig_template)
  if (!_internal_has_orig_template()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.orig_template_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.orig_template_.IsDefault()) {
    _impl_.orig_template_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SettingsArchive::set_allocated_orig_template(std::string* orig_template) {
  if (orig_template != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.orig_template_.SetAllocated(orig_template, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.orig_template_.IsDefault()) {
    _impl_.orig_template_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TP.SettingsArchive.orig_template)
}

// optional string creation_date = 26;
inline bool SettingsArchive::_internal_has_creation_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SettingsArchive::has_creation_date() const {
  return _internal_has_creation_date();
}
inline void SettingsArchive::clear_creation_date() {
  _impl_.creation_date_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& SettingsArchive::creation_date() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.creation_date)
  return _internal_creation_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SettingsArchive::set_creation_date(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.creation_date_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.creation_date)
}
inline std::string* SettingsArchive::mutable_creation_date() {
  std::string* _s = _internal_mutable_creation_date();
  // @@protoc_insertion_point(field_mutable:TP.SettingsArchive.creation_date)
  return _s;
}
inline const std::string& SettingsArchive::_internal_creation_date() const {
  return _impl_.creation_date_.Get();
}
inline void SettingsArchive::_internal_set_creation_date(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.creation_date_.Set(value, GetArenaForAllocation());
}
inline std::string* SettingsArchive::_internal_mutable_creation_date() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.creation_date_.Mutable(GetArenaForAllocation());
}
inline std::string* SettingsArchive::release_creation_date() {
  // @@protoc_insertion_point(field_release:TP.SettingsArchive.creation_date)
  if (!_internal_has_creation_date()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.creation_date_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creation_date_.IsDefault()) {
    _impl_.creation_date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SettingsArchive::set_allocated_creation_date(std::string* creation_date) {
  if (creation_date != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.creation_date_.SetAllocated(creation_date, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creation_date_.IsDefault()) {
    _impl_.creation_date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TP.SettingsArchive.creation_date)
}

// optional string bibliography_format = 27;
inline bool SettingsArchive::_internal_has_bibliography_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SettingsArchive::has_bibliography_format() const {
  return _internal_has_bibliography_format();
}
inline void SettingsArchive::clear_bibliography_format() {
  _impl_.bibliography_format_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& SettingsArchive::bibliography_format() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.bibliography_format)
  return _internal_bibliography_format();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SettingsArchive::set_bibliography_format(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000080u;
 _impl_.bibliography_format_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.bibliography_format)
}
inline std::string* SettingsArchive::mutable_bibliography_format() {
  std::string* _s = _internal_mutable_bibliography_format();
  // @@protoc_insertion_point(field_mutable:TP.SettingsArchive.bibliography_format)
  return _s;
}
inline const std::string& SettingsArchive::_internal_bibliography_format() const {
  return _impl_.bibliography_format_.Get();
}
inline void SettingsArchive::_internal_set_bibliography_format(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.bibliography_format_.Set(value, GetArenaForAllocation());
}
inline std::string* SettingsArchive::_internal_mutable_bibliography_format() {
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.bibliography_format_.Mutable(GetArenaForAllocation());
}
inline std::string* SettingsArchive::release_bibliography_format() {
  // @@protoc_insertion_point(field_release:TP.SettingsArchive.bibliography_format)
  if (!_internal_has_bibliography_format()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* p = _impl_.bibliography_format_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bibliography_format_.IsDefault()) {
    _impl_.bibliography_format_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SettingsArchive::set_allocated_bibliography_format(std::string* bibliography_format) {
  if (bibliography_format != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.bibliography_format_.SetAllocated(bibliography_format, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bibliography_format_.IsDefault()) {
    _impl_.bibliography_format_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TP.SettingsArchive.bibliography_format)
}

// optional .TP.SettingsArchive.FootnoteKind footnote_kind = 30;
inline bool SettingsArchive::_internal_has_footnote_kind() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool SettingsArchive::has_footnote_kind() const {
  return _internal_has_footnote_kind();
}
inline void SettingsArchive::clear_footnote_kind() {
  _impl_.footnote_kind_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::TP::SettingsArchive_FootnoteKind SettingsArchive::_internal_footnote_kind() const {
  return static_cast< ::TP::SettingsArchive_FootnoteKind >(_impl_.footnote_kind_);
}
inline ::TP::SettingsArchive_FootnoteKind SettingsArchive::footnote_kind() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.footnote_kind)
  return _internal_footnote_kind();
}
inline void SettingsArchive::_internal_set_footnote_kind(::TP::SettingsArchive_FootnoteKind value) {
  assert(::TP::SettingsArchive_FootnoteKind_IsValid(value));
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.footnote_kind_ = value;
}
inline void SettingsArchive::set_footnote_kind(::TP::SettingsArchive_FootnoteKind value) {
  _internal_set_footnote_kind(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.footnote_kind)
}

// optional .TP.SettingsArchive.FootnoteFormat footnote_format = 31;
inline bool SettingsArchive::_internal_has_footnote_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool SettingsArchive::has_footnote_format() const {
  return _internal_has_footnote_format();
}
inline void SettingsArchive::clear_footnote_format() {
  _impl_.footnote_format_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::TP::SettingsArchive_FootnoteFormat SettingsArchive::_internal_footnote_format() const {
  return static_cast< ::TP::SettingsArchive_FootnoteFormat >(_impl_.footnote_format_);
}
inline ::TP::SettingsArchive_FootnoteFormat SettingsArchive::footnote_format() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.footnote_format)
  return _internal_footnote_format();
}
inline void SettingsArchive::_internal_set_footnote_format(::TP::SettingsArchive_FootnoteFormat value) {
  assert(::TP::SettingsArchive_FootnoteFormat_IsValid(value));
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.footnote_format_ = value;
}
inline void SettingsArchive::set_footnote_format(::TP::SettingsArchive_FootnoteFormat value) {
  _internal_set_footnote_format(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.footnote_format)
}

// optional .TP.SettingsArchive.FootnoteNumbering footnote_numbering = 32;
inline bool SettingsArchive::_internal_has_footnote_numbering() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool SettingsArchive::has_footnote_numbering() const {
  return _internal_has_footnote_numbering();
}
inline void SettingsArchive::clear_footnote_numbering() {
  _impl_.footnote_numbering_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::TP::SettingsArchive_FootnoteNumbering SettingsArchive::_internal_footnote_numbering() const {
  return static_cast< ::TP::SettingsArchive_FootnoteNumbering >(_impl_.footnote_numbering_);
}
inline ::TP::SettingsArchive_FootnoteNumbering SettingsArchive::footnote_numbering() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.footnote_numbering)
  return _internal_footnote_numbering();
}
inline void SettingsArchive::_internal_set_footnote_numbering(::TP::SettingsArchive_FootnoteNumbering value) {
  assert(::TP::SettingsArchive_FootnoteNumbering_IsValid(value));
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.footnote_numbering_ = value;
}
inline void SettingsArchive::set_footnote_numbering(::TP::SettingsArchive_FootnoteNumbering value) {
  _internal_set_footnote_numbering(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.footnote_numbering)
}

// optional int32 footnote_gap = 33;
inline bool SettingsArchive::_internal_has_footnote_gap() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool SettingsArchive::has_footnote_gap() const {
  return _internal_has_footnote_gap();
}
inline void SettingsArchive::clear_footnote_gap() {
  _impl_.footnote_gap_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline int32_t SettingsArchive::_internal_footnote_gap() const {
  return _impl_.footnote_gap_;
}
inline int32_t SettingsArchive::footnote_gap() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.footnote_gap)
  return _internal_footnote_gap();
}
inline void SettingsArchive::_internal_set_footnote_gap(int32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.footnote_gap_ = value;
}
inline void SettingsArchive::set_footnote_gap(int32_t value) {
  _internal_set_footnote_gap(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.footnote_gap)
}

// optional bool section_authoring = 40 [default = false];
inline bool SettingsArchive::_internal_has_section_authoring() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool SettingsArchive::has_section_authoring() const {
  return _internal_has_section_authoring();
}
inline void SettingsArchive::clear_section_authoring() {
  _impl_.section_authoring_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool SettingsArchive::_internal_section_authoring() const {
  return _impl_.section_authoring_;
}
inline bool SettingsArchive::section_authoring() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.section_authoring)
  return _internal_section_authoring();
}
inline void SettingsArchive::_internal_set_section_authoring(bool value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.section_authoring_ = value;
}
inline void SettingsArchive::set_section_authoring(bool value) {
  _internal_set_section_authoring(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.section_authoring)
}

// -------------------------------------------------------------------

// PlaceholderArchive

// required .TSWP.ShapeInfoArchive super = 1;
inline bool PlaceholderArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool PlaceholderArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSWP::ShapeInfoArchive& PlaceholderArchive::_internal_super() const {
  const ::TSWP::ShapeInfoArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ShapeInfoArchive&>(
      ::TSWP::_ShapeInfoArchive_default_instance_);
}
inline const ::TSWP::ShapeInfoArchive& PlaceholderArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.PlaceholderArchive.super)
  return _internal_super();
}
inline void PlaceholderArchive::unsafe_arena_set_allocated_super(
    ::TSWP::ShapeInfoArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.PlaceholderArchive.super)
}
inline ::TSWP::ShapeInfoArchive* PlaceholderArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSWP::ShapeInfoArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::ShapeInfoArchive* PlaceholderArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.PlaceholderArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSWP::ShapeInfoArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSWP::ShapeInfoArchive* PlaceholderArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ShapeInfoArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSWP::ShapeInfoArchive* PlaceholderArchive::mutable_super() {
  ::TSWP::ShapeInfoArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TP.PlaceholderArchive.super)
  return _msg;
}
inline void PlaceholderArchive::set_allocated_super(::TSWP::ShapeInfoArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.PlaceholderArchive.super)
}

// -------------------------------------------------------------------

// FloatingDrawablesArchive_DrawableEntry

// optional .TSP.Reference drawable = 1;
inline bool FloatingDrawablesArchive_DrawableEntry::_internal_has_drawable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.drawable_ != nullptr);
  return value;
}
inline bool FloatingDrawablesArchive_DrawableEntry::has_drawable() const {
  return _internal_has_drawable();
}
inline const ::TSP::Reference& FloatingDrawablesArchive_DrawableEntry::_internal_drawable() const {
  const ::TSP::Reference* p = _impl_.drawable_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& FloatingDrawablesArchive_DrawableEntry::drawable() const {
  // @@protoc_insertion_point(field_get:TP.FloatingDrawablesArchive.DrawableEntry.drawable)
  return _internal_drawable();
}
inline void FloatingDrawablesArchive_DrawableEntry::unsafe_arena_set_allocated_drawable(
    ::TSP::Reference* drawable) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drawable_);
  }
  _impl_.drawable_ = drawable;
  if (drawable) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.FloatingDrawablesArchive.DrawableEntry.drawable)
}
inline ::TSP::Reference* FloatingDrawablesArchive_DrawableEntry::release_drawable() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.drawable_;
  _impl_.drawable_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* FloatingDrawablesArchive_DrawableEntry::unsafe_arena_release_drawable() {
  // @@protoc_insertion_point(field_release:TP.FloatingDrawablesArchive.DrawableEntry.drawable)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.drawable_;
  _impl_.drawable_ = nullptr;
  return temp;
}
inline ::TSP::Reference* FloatingDrawablesArchive_DrawableEntry::_internal_mutable_drawable() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.drawable_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.drawable_ = p;
  }
  return _impl_.drawable_;
}
inline ::TSP::Reference* FloatingDrawablesArchive_DrawableEntry::mutable_drawable() {
  ::TSP::Reference* _msg = _internal_mutable_drawable();
  // @@protoc_insertion_point(field_mutable:TP.FloatingDrawablesArchive.DrawableEntry.drawable)
  return _msg;
}
inline void FloatingDrawablesArchive_DrawableEntry::set_allocated_drawable(::TSP::Reference* drawable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drawable_);
  }
  if (drawable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable));
    if (message_arena != submessage_arena) {
      drawable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drawable, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.drawable_ = drawable;
  // @@protoc_insertion_point(field_set_allocated:TP.FloatingDrawablesArchive.DrawableEntry.drawable)
}

// -------------------------------------------------------------------

// FloatingDrawablesArchive_PageGroup

// required uint32 page_index = 1;
inline bool FloatingDrawablesArchive_PageGroup::_internal_has_page_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FloatingDrawablesArchive_PageGroup::has_page_index() const {
  return _internal_has_page_index();
}
inline void FloatingDrawablesArchive_PageGroup::clear_page_index() {
  _impl_.page_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t FloatingDrawablesArchive_PageGroup::_internal_page_index() const {
  return _impl_.page_index_;
}
inline uint32_t FloatingDrawablesArchive_PageGroup::page_index() const {
  // @@protoc_insertion_point(field_get:TP.FloatingDrawablesArchive.PageGroup.page_index)
  return _internal_page_index();
}
inline void FloatingDrawablesArchive_PageGroup::_internal_set_page_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.page_index_ = value;
}
inline void FloatingDrawablesArchive_PageGroup::set_page_index(uint32_t value) {
  _internal_set_page_index(value);
  // @@protoc_insertion_point(field_set:TP.FloatingDrawablesArchive.PageGroup.page_index)
}

// repeated .TP.FloatingDrawablesArchive.DrawableEntry background_drawables = 2;
inline int FloatingDrawablesArchive_PageGroup::_internal_background_drawables_size() const {
  return _impl_.background_drawables_.size();
}
inline int FloatingDrawablesArchive_PageGroup::background_drawables_size() const {
  return _internal_background_drawables_size();
}
inline void FloatingDrawablesArchive_PageGroup::clear_background_drawables() {
  _impl_.background_drawables_.Clear();
}
inline ::TP::FloatingDrawablesArchive_DrawableEntry* FloatingDrawablesArchive_PageGroup::mutable_background_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TP.FloatingDrawablesArchive.PageGroup.background_drawables)
  return _impl_.background_drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >*
FloatingDrawablesArchive_PageGroup::mutable_background_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TP.FloatingDrawablesArchive.PageGroup.background_drawables)
  return &_impl_.background_drawables_;
}
inline const ::TP::FloatingDrawablesArchive_DrawableEntry& FloatingDrawablesArchive_PageGroup::_internal_background_drawables(int index) const {
  return _impl_.background_drawables_.Get(index);
}
inline const ::TP::FloatingDrawablesArchive_DrawableEntry& FloatingDrawablesArchive_PageGroup::background_drawables(int index) const {
  // @@protoc_insertion_point(field_get:TP.FloatingDrawablesArchive.PageGroup.background_drawables)
  return _internal_background_drawables(index);
}
inline ::TP::FloatingDrawablesArchive_DrawableEntry* FloatingDrawablesArchive_PageGroup::_internal_add_background_drawables() {
  return _impl_.background_drawables_.Add();
}
inline ::TP::FloatingDrawablesArchive_DrawableEntry* FloatingDrawablesArchive_PageGroup::add_background_drawables() {
  ::TP::FloatingDrawablesArchive_DrawableEntry* _add = _internal_add_background_drawables();
  // @@protoc_insertion_point(field_add:TP.FloatingDrawablesArchive.PageGroup.background_drawables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >&
FloatingDrawablesArchive_PageGroup::background_drawables() const {
  // @@protoc_insertion_point(field_list:TP.FloatingDrawablesArchive.PageGroup.background_drawables)
  return _impl_.background_drawables_;
}

// repeated .TP.FloatingDrawablesArchive.DrawableEntry foreground_drawables = 3;
inline int FloatingDrawablesArchive_PageGroup::_internal_foreground_drawables_size() const {
  return _impl_.foreground_drawables_.size();
}
inline int FloatingDrawablesArchive_PageGroup::foreground_drawables_size() const {
  return _internal_foreground_drawables_size();
}
inline void FloatingDrawablesArchive_PageGroup::clear_foreground_drawables() {
  _impl_.foreground_drawables_.Clear();
}
inline ::TP::FloatingDrawablesArchive_DrawableEntry* FloatingDrawablesArchive_PageGroup::mutable_foreground_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TP.FloatingDrawablesArchive.PageGroup.foreground_drawables)
  return _impl_.foreground_drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >*
FloatingDrawablesArchive_PageGroup::mutable_foreground_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TP.FloatingDrawablesArchive.PageGroup.foreground_drawables)
  return &_impl_.foreground_drawables_;
}
inline const ::TP::FloatingDrawablesArchive_DrawableEntry& FloatingDrawablesArchive_PageGroup::_internal_foreground_drawables(int index) const {
  return _impl_.foreground_drawables_.Get(index);
}
inline const ::TP::FloatingDrawablesArchive_DrawableEntry& FloatingDrawablesArchive_PageGroup::foreground_drawables(int index) const {
  // @@protoc_insertion_point(field_get:TP.FloatingDrawablesArchive.PageGroup.foreground_drawables)
  return _internal_foreground_drawables(index);
}
inline ::TP::FloatingDrawablesArchive_DrawableEntry* FloatingDrawablesArchive_PageGroup::_internal_add_foreground_drawables() {
  return _impl_.foreground_drawables_.Add();
}
inline ::TP::FloatingDrawablesArchive_DrawableEntry* FloatingDrawablesArchive_PageGroup::add_foreground_drawables() {
  ::TP::FloatingDrawablesArchive_DrawableEntry* _add = _internal_add_foreground_drawables();
  // @@protoc_insertion_point(field_add:TP.FloatingDrawablesArchive.PageGroup.foreground_drawables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >&
FloatingDrawablesArchive_PageGroup::foreground_drawables() const {
  // @@protoc_insertion_point(field_list:TP.FloatingDrawablesArchive.PageGroup.foreground_drawables)
  return _impl_.foreground_drawables_;
}

// repeated .TP.FloatingDrawablesArchive.DrawableEntry drawables = 4;
inline int FloatingDrawablesArchive_PageGroup::_internal_drawables_size() const {
  return _impl_.drawables_.size();
}
inline int FloatingDrawablesArchive_PageGroup::drawables_size() const {
  return _internal_drawables_size();
}
inline void FloatingDrawablesArchive_PageGroup::clear_drawables() {
  _impl_.drawables_.Clear();
}
inline ::TP::FloatingDrawablesArchive_DrawableEntry* FloatingDrawablesArchive_PageGroup::mutable_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TP.FloatingDrawablesArchive.PageGroup.drawables)
  return _impl_.drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >*
FloatingDrawablesArchive_PageGroup::mutable_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TP.FloatingDrawablesArchive.PageGroup.drawables)
  return &_impl_.drawables_;
}
inline const ::TP::FloatingDrawablesArchive_DrawableEntry& FloatingDrawablesArchive_PageGroup::_internal_drawables(int index) const {
  return _impl_.drawables_.Get(index);
}
inline const ::TP::FloatingDrawablesArchive_DrawableEntry& FloatingDrawablesArchive_PageGroup::drawables(int index) const {
  // @@protoc_insertion_point(field_get:TP.FloatingDrawablesArchive.PageGroup.drawables)
  return _internal_drawables(index);
}
inline ::TP::FloatingDrawablesArchive_DrawableEntry* FloatingDrawablesArchive_PageGroup::_internal_add_drawables() {
  return _impl_.drawables_.Add();
}
inline ::TP::FloatingDrawablesArchive_DrawableEntry* FloatingDrawablesArchive_PageGroup::add_drawables() {
  ::TP::FloatingDrawablesArchive_DrawableEntry* _add = _internal_add_drawables();
  // @@protoc_insertion_point(field_add:TP.FloatingDrawablesArchive.PageGroup.drawables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >&
FloatingDrawablesArchive_PageGroup::drawables() const {
  // @@protoc_insertion_point(field_list:TP.FloatingDrawablesArchive.PageGroup.drawables)
  return _impl_.drawables_;
}

// -------------------------------------------------------------------

// FloatingDrawablesArchive

// repeated .TP.FloatingDrawablesArchive.PageGroup page_groups = 1;
inline int FloatingDrawablesArchive::_internal_page_groups_size() const {
  return _impl_.page_groups_.size();
}
inline int FloatingDrawablesArchive::page_groups_size() const {
  return _internal_page_groups_size();
}
inline void FloatingDrawablesArchive::clear_page_groups() {
  _impl_.page_groups_.Clear();
}
inline ::TP::FloatingDrawablesArchive_PageGroup* FloatingDrawablesArchive::mutable_page_groups(int index) {
  // @@protoc_insertion_point(field_mutable:TP.FloatingDrawablesArchive.page_groups)
  return _impl_.page_groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_PageGroup >*
FloatingDrawablesArchive::mutable_page_groups() {
  // @@protoc_insertion_point(field_mutable_list:TP.FloatingDrawablesArchive.page_groups)
  return &_impl_.page_groups_;
}
inline const ::TP::FloatingDrawablesArchive_PageGroup& FloatingDrawablesArchive::_internal_page_groups(int index) const {
  return _impl_.page_groups_.Get(index);
}
inline const ::TP::FloatingDrawablesArchive_PageGroup& FloatingDrawablesArchive::page_groups(int index) const {
  // @@protoc_insertion_point(field_get:TP.FloatingDrawablesArchive.page_groups)
  return _internal_page_groups(index);
}
inline ::TP::FloatingDrawablesArchive_PageGroup* FloatingDrawablesArchive::_internal_add_page_groups() {
  return _impl_.page_groups_.Add();
}
inline ::TP::FloatingDrawablesArchive_PageGroup* FloatingDrawablesArchive::add_page_groups() {
  ::TP::FloatingDrawablesArchive_PageGroup* _add = _internal_add_page_groups();
  // @@protoc_insertion_point(field_add:TP.FloatingDrawablesArchive.page_groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_PageGroup >&
FloatingDrawablesArchive::page_groups() const {
  // @@protoc_insertion_point(field_list:TP.FloatingDrawablesArchive.page_groups)
  return _impl_.page_groups_;
}

// -------------------------------------------------------------------

// DrawablesZOrderArchive

// repeated .TSP.Reference drawables = 1;
inline int DrawablesZOrderArchive::_internal_drawables_size() const {
  return _impl_.drawables_.size();
}
inline int DrawablesZOrderArchive::drawables_size() const {
  return _internal_drawables_size();
}
inline ::TSP::Reference* DrawablesZOrderArchive::mutable_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TP.DrawablesZOrderArchive.drawables)
  return _impl_.drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
DrawablesZOrderArchive::mutable_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TP.DrawablesZOrderArchive.drawables)
  return &_impl_.drawables_;
}
inline const ::TSP::Reference& DrawablesZOrderArchive::_internal_drawables(int index) const {
  return _impl_.drawables_.Get(index);
}
inline const ::TSP::Reference& DrawablesZOrderArchive::drawables(int index) const {
  // @@protoc_insertion_point(field_get:TP.DrawablesZOrderArchive.drawables)
  return _internal_drawables(index);
}
inline ::TSP::Reference* DrawablesZOrderArchive::_internal_add_drawables() {
  return _impl_.drawables_.Add();
}
inline ::TSP::Reference* DrawablesZOrderArchive::add_drawables() {
  ::TSP::Reference* _add = _internal_add_drawables();
  // @@protoc_insertion_point(field_add:TP.DrawablesZOrderArchive.drawables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
DrawablesZOrderArchive::drawables() const {
  // @@protoc_insertion_point(field_list:TP.DrawablesZOrderArchive.drawables)
  return _impl_.drawables_;
}

// -------------------------------------------------------------------

// PageMasterArchive

// repeated .TSP.Reference headers = 1;
inline int PageMasterArchive::_internal_headers_size() const {
  return _impl_.headers_.size();
}
inline int PageMasterArchive::headers_size() const {
  return _internal_headers_size();
}
inline ::TSP::Reference* PageMasterArchive::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:TP.PageMasterArchive.headers)
  return _impl_.headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
PageMasterArchive::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:TP.PageMasterArchive.headers)
  return &_impl_.headers_;
}
inline const ::TSP::Reference& PageMasterArchive::_internal_headers(int index) const {
  return _impl_.headers_.Get(index);
}
inline const ::TSP::Reference& PageMasterArchive::headers(int index) const {
  // @@protoc_insertion_point(field_get:TP.PageMasterArchive.headers)
  return _internal_headers(index);
}
inline ::TSP::Reference* PageMasterArchive::_internal_add_headers() {
  return _impl_.headers_.Add();
}
inline ::TSP::Reference* PageMasterArchive::add_headers() {
  ::TSP::Reference* _add = _internal_add_headers();
  // @@protoc_insertion_point(field_add:TP.PageMasterArchive.headers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
PageMasterArchive::headers() const {
  // @@protoc_insertion_point(field_list:TP.PageMasterArchive.headers)
  return _impl_.headers_;
}

// repeated .TSP.Reference footers = 2;
inline int PageMasterArchive::_internal_footers_size() const {
  return _impl_.footers_.size();
}
inline int PageMasterArchive::footers_size() const {
  return _internal_footers_size();
}
inline ::TSP::Reference* PageMasterArchive::mutable_footers(int index) {
  // @@protoc_insertion_point(field_mutable:TP.PageMasterArchive.footers)
  return _impl_.footers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
PageMasterArchive::mutable_footers() {
  // @@protoc_insertion_point(field_mutable_list:TP.PageMasterArchive.footers)
  return &_impl_.footers_;
}
inline const ::TSP::Reference& PageMasterArchive::_internal_footers(int index) const {
  return _impl_.footers_.Get(index);
}
inline const ::TSP::Reference& PageMasterArchive::footers(int index) const {
  // @@protoc_insertion_point(field_get:TP.PageMasterArchive.footers)
  return _internal_footers(index);
}
inline ::TSP::Reference* PageMasterArchive::_internal_add_footers() {
  return _impl_.footers_.Add();
}
inline ::TSP::Reference* PageMasterArchive::add_footers() {
  ::TSP::Reference* _add = _internal_add_footers();
  // @@protoc_insertion_point(field_add:TP.PageMasterArchive.footers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
PageMasterArchive::footers() const {
  // @@protoc_insertion_point(field_list:TP.PageMasterArchive.footers)
  return _impl_.footers_;
}

// repeated .TSP.Reference master_drawables = 3;
inline int PageMasterArchive::_internal_master_drawables_size() const {
  return _impl_.master_drawables_.size();
}
inline int PageMasterArchive::master_drawables_size() const {
  return _internal_master_drawables_size();
}
inline ::TSP::Reference* PageMasterArchive::mutable_master_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TP.PageMasterArchive.master_drawables)
  return _impl_.master_drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
PageMasterArchive::mutable_master_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TP.PageMasterArchive.master_drawables)
  return &_impl_.master_drawables_;
}
inline const ::TSP::Reference& PageMasterArchive::_internal_master_drawables(int index) const {
  return _impl_.master_drawables_.Get(index);
}
inline const ::TSP::Reference& PageMasterArchive::master_drawables(int index) const {
  // @@protoc_insertion_point(field_get:TP.PageMasterArchive.master_drawables)
  return _internal_master_drawables(index);
}
inline ::TSP::Reference* PageMasterArchive::_internal_add_master_drawables() {
  return _impl_.master_drawables_.Add();
}
inline ::TSP::Reference* PageMasterArchive::add_master_drawables() {
  ::TSP::Reference* _add = _internal_add_master_drawables();
  // @@protoc_insertion_point(field_add:TP.PageMasterArchive.master_drawables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
PageMasterArchive::master_drawables() const {
  // @@protoc_insertion_point(field_list:TP.PageMasterArchive.master_drawables)
  return _impl_.master_drawables_;
}

// -------------------------------------------------------------------

// SectionArchive

// optional bool OBSOLETE_shows_header = 1;
inline bool SectionArchive::_internal_has_obsolete_shows_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SectionArchive::has_obsolete_shows_header() const {
  return _internal_has_obsolete_shows_header();
}
inline void SectionArchive::clear_obsolete_shows_header() {
  _impl_.obsolete_shows_header_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool SectionArchive::_internal_obsolete_shows_header() const {
  return _impl_.obsolete_shows_header_;
}
inline bool SectionArchive::obsolete_shows_header() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_shows_header)
  return _internal_obsolete_shows_header();
}
inline void SectionArchive::_internal_set_obsolete_shows_header(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.obsolete_shows_header_ = value;
}
inline void SectionArchive::set_obsolete_shows_header(bool value) {
  _internal_set_obsolete_shows_header(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.OBSOLETE_shows_header)
}

// optional bool OBSOLETE_shows_footer = 2;
inline bool SectionArchive::_internal_has_obsolete_shows_footer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SectionArchive::has_obsolete_shows_footer() const {
  return _internal_has_obsolete_shows_footer();
}
inline void SectionArchive::clear_obsolete_shows_footer() {
  _impl_.obsolete_shows_footer_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool SectionArchive::_internal_obsolete_shows_footer() const {
  return _impl_.obsolete_shows_footer_;
}
inline bool SectionArchive::obsolete_shows_footer() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_shows_footer)
  return _internal_obsolete_shows_footer();
}
inline void SectionArchive::_internal_set_obsolete_shows_footer(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.obsolete_shows_footer_ = value;
}
inline void SectionArchive::set_obsolete_shows_footer(bool value) {
  _internal_set_obsolete_shows_footer(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.OBSOLETE_shows_footer)
}

// repeated .TSP.Reference OBSOLETE_headers = 3;
inline int SectionArchive::_internal_obsolete_headers_size() const {
  return _impl_.obsolete_headers_.size();
}
inline int SectionArchive::obsolete_headers_size() const {
  return _internal_obsolete_headers_size();
}
inline ::TSP::Reference* SectionArchive::mutable_obsolete_headers(int index) {
  // @@protoc_insertion_point(field_mutable:TP.SectionArchive.OBSOLETE_headers)
  return _impl_.obsolete_headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SectionArchive::mutable_obsolete_headers() {
  // @@protoc_insertion_point(field_mutable_list:TP.SectionArchive.OBSOLETE_headers)
  return &_impl_.obsolete_headers_;
}
inline const ::TSP::Reference& SectionArchive::_internal_obsolete_headers(int index) const {
  return _impl_.obsolete_headers_.Get(index);
}
inline const ::TSP::Reference& SectionArchive::obsolete_headers(int index) const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_headers)
  return _internal_obsolete_headers(index);
}
inline ::TSP::Reference* SectionArchive::_internal_add_obsolete_headers() {
  return _impl_.obsolete_headers_.Add();
}
inline ::TSP::Reference* SectionArchive::add_obsolete_headers() {
  ::TSP::Reference* _add = _internal_add_obsolete_headers();
  // @@protoc_insertion_point(field_add:TP.SectionArchive.OBSOLETE_headers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SectionArchive::obsolete_headers() const {
  // @@protoc_insertion_point(field_list:TP.SectionArchive.OBSOLETE_headers)
  return _impl_.obsolete_headers_;
}

// repeated .TSP.Reference OBSOLETE_footers = 4;
inline int SectionArchive::_internal_obsolete_footers_size() const {
  return _impl_.obsolete_footers_.size();
}
inline int SectionArchive::obsolete_footers_size() const {
  return _internal_obsolete_footers_size();
}
inline ::TSP::Reference* SectionArchive::mutable_obsolete_footers(int index) {
  // @@protoc_insertion_point(field_mutable:TP.SectionArchive.OBSOLETE_footers)
  return _impl_.obsolete_footers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SectionArchive::mutable_obsolete_footers() {
  // @@protoc_insertion_point(field_mutable_list:TP.SectionArchive.OBSOLETE_footers)
  return &_impl_.obsolete_footers_;
}
inline const ::TSP::Reference& SectionArchive::_internal_obsolete_footers(int index) const {
  return _impl_.obsolete_footers_.Get(index);
}
inline const ::TSP::Reference& SectionArchive::obsolete_footers(int index) const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_footers)
  return _internal_obsolete_footers(index);
}
inline ::TSP::Reference* SectionArchive::_internal_add_obsolete_footers() {
  return _impl_.obsolete_footers_.Add();
}
inline ::TSP::Reference* SectionArchive::add_obsolete_footers() {
  ::TSP::Reference* _add = _internal_add_obsolete_footers();
  // @@protoc_insertion_point(field_add:TP.SectionArchive.OBSOLETE_footers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SectionArchive::obsolete_footers() const {
  // @@protoc_insertion_point(field_list:TP.SectionArchive.OBSOLETE_footers)
  return _impl_.obsolete_footers_;
}

// optional float OBSOLETE_left_margin = 5;
inline bool SectionArchive::_internal_has_obsolete_left_margin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SectionArchive::has_obsolete_left_margin() const {
  return _internal_has_obsolete_left_margin();
}
inline void SectionArchive::clear_obsolete_left_margin() {
  _impl_.obsolete_left_margin_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float SectionArchive::_internal_obsolete_left_margin() const {
  return _impl_.obsolete_left_margin_;
}
inline float SectionArchive::obsolete_left_margin() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_left_margin)
  return _internal_obsolete_left_margin();
}
inline void SectionArchive::_internal_set_obsolete_left_margin(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.obsolete_left_margin_ = value;
}
inline void SectionArchive::set_obsolete_left_margin(float value) {
  _internal_set_obsolete_left_margin(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.OBSOLETE_left_margin)
}

// optional float OBSOLETE_right_margin = 6;
inline bool SectionArchive::_internal_has_obsolete_right_margin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SectionArchive::has_obsolete_right_margin() const {
  return _internal_has_obsolete_right_margin();
}
inline void SectionArchive::clear_obsolete_right_margin() {
  _impl_.obsolete_right_margin_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float SectionArchive::_internal_obsolete_right_margin() const {
  return _impl_.obsolete_right_margin_;
}
inline float SectionArchive::obsolete_right_margin() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_right_margin)
  return _internal_obsolete_right_margin();
}
inline void SectionArchive::_internal_set_obsolete_right_margin(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.obsolete_right_margin_ = value;
}
inline void SectionArchive::set_obsolete_right_margin(float value) {
  _internal_set_obsolete_right_margin(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.OBSOLETE_right_margin)
}

// optional float OBSOLETE_top_margin = 7;
inline bool SectionArchive::_internal_has_obsolete_top_margin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SectionArchive::has_obsolete_top_margin() const {
  return _internal_has_obsolete_top_margin();
}
inline void SectionArchive::clear_obsolete_top_margin() {
  _impl_.obsolete_top_margin_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float SectionArchive::_internal_obsolete_top_margin() const {
  return _impl_.obsolete_top_margin_;
}
inline float SectionArchive::obsolete_top_margin() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_top_margin)
  return _internal_obsolete_top_margin();
}
inline void SectionArchive::_internal_set_obsolete_top_margin(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.obsolete_top_margin_ = value;
}
inline void SectionArchive::set_obsolete_top_margin(float value) {
  _internal_set_obsolete_top_margin(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.OBSOLETE_top_margin)
}

// optional float OBSOLETE_bottom_margin = 8;
inline bool SectionArchive::_internal_has_obsolete_bottom_margin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SectionArchive::has_obsolete_bottom_margin() const {
  return _internal_has_obsolete_bottom_margin();
}
inline void SectionArchive::clear_obsolete_bottom_margin() {
  _impl_.obsolete_bottom_margin_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float SectionArchive::_internal_obsolete_bottom_margin() const {
  return _impl_.obsolete_bottom_margin_;
}
inline float SectionArchive::obsolete_bottom_margin() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_bottom_margin)
  return _internal_obsolete_bottom_margin();
}
inline void SectionArchive::_internal_set_obsolete_bottom_margin(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.obsolete_bottom_margin_ = value;
}
inline void SectionArchive::set_obsolete_bottom_margin(float value) {
  _internal_set_obsolete_bottom_margin(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.OBSOLETE_bottom_margin)
}

// optional float OBSOLETE_header_padding = 9;
inline bool SectionArchive::_internal_has_obsolete_header_padding() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SectionArchive::has_obsolete_header_padding() const {
  return _internal_has_obsolete_header_padding();
}
inline void SectionArchive::clear_obsolete_header_padding() {
  _impl_.obsolete_header_padding_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float SectionArchive::_internal_obsolete_header_padding() const {
  return _impl_.obsolete_header_padding_;
}
inline float SectionArchive::obsolete_header_padding() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_header_padding)
  return _internal_obsolete_header_padding();
}
inline void SectionArchive::_internal_set_obsolete_header_padding(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.obsolete_header_padding_ = value;
}
inline void SectionArchive::set_obsolete_header_padding(float value) {
  _internal_set_obsolete_header_padding(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.OBSOLETE_header_padding)
}

// optional float OBSOLETE_footer_padding = 10;
inline bool SectionArchive::_internal_has_obsolete_footer_padding() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SectionArchive::has_obsolete_footer_padding() const {
  return _internal_has_obsolete_footer_padding();
}
inline void SectionArchive::clear_obsolete_footer_padding() {
  _impl_.obsolete_footer_padding_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float SectionArchive::_internal_obsolete_footer_padding() const {
  return _impl_.obsolete_footer_padding_;
}
inline float SectionArchive::obsolete_footer_padding() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_footer_padding)
  return _internal_obsolete_footer_padding();
}
inline void SectionArchive::_internal_set_obsolete_footer_padding(float value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.obsolete_footer_padding_ = value;
}
inline void SectionArchive::set_obsolete_footer_padding(float value) {
  _internal_set_obsolete_footer_padding(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.OBSOLETE_footer_padding)
}

// optional float OBSOLETE_paper_width = 11;
inline bool SectionArchive::_internal_has_obsolete_paper_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool SectionArchive::has_obsolete_paper_width() const {
  return _internal_has_obsolete_paper_width();
}
inline void SectionArchive::clear_obsolete_paper_width() {
  _impl_.obsolete_paper_width_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float SectionArchive::_internal_obsolete_paper_width() const {
  return _impl_.obsolete_paper_width_;
}
inline float SectionArchive::obsolete_paper_width() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_paper_width)
  return _internal_obsolete_paper_width();
}
inline void SectionArchive::_internal_set_obsolete_paper_width(float value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.obsolete_paper_width_ = value;
}
inline void SectionArchive::set_obsolete_paper_width(float value) {
  _internal_set_obsolete_paper_width(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.OBSOLETE_paper_width)
}

// optional float OBSOLETE_paper_height = 12;
inline bool SectionArchive::_internal_has_obsolete_paper_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool SectionArchive::has_obsolete_paper_height() const {
  return _internal_has_obsolete_paper_height();
}
inline void SectionArchive::clear_obsolete_paper_height() {
  _impl_.obsolete_paper_height_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline float SectionArchive::_internal_obsolete_paper_height() const {
  return _impl_.obsolete_paper_height_;
}
inline float SectionArchive::obsolete_paper_height() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_paper_height)
  return _internal_obsolete_paper_height();
}
inline void SectionArchive::_internal_set_obsolete_paper_height(float value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.obsolete_paper_height_ = value;
}
inline void SectionArchive::set_obsolete_paper_height(float value) {
  _internal_set_obsolete_paper_height(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.OBSOLETE_paper_height)
}

// optional bool OBSOLETE_landscape_mode = 13;
inline bool SectionArchive::_internal_has_obsolete_landscape_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SectionArchive::has_obsolete_landscape_mode() const {
  return _internal_has_obsolete_landscape_mode();
}
inline void SectionArchive::clear_obsolete_landscape_mode() {
  _impl_.obsolete_landscape_mode_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool SectionArchive::_internal_obsolete_landscape_mode() const {
  return _impl_.obsolete_landscape_mode_;
}
inline bool SectionArchive::obsolete_landscape_mode() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_landscape_mode)
  return _internal_obsolete_landscape_mode();
}
inline void SectionArchive::_internal_set_obsolete_landscape_mode(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.obsolete_landscape_mode_ = value;
}
inline void SectionArchive::set_obsolete_landscape_mode(bool value) {
  _internal_set_obsolete_landscape_mode(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.OBSOLETE_landscape_mode)
}

// repeated .TSP.Reference OBSOLETE_master_drawables = 14;
inline int SectionArchive::_internal_obsolete_master_drawables_size() const {
  return _impl_.obsolete_master_drawables_.size();
}
inline int SectionArchive::obsolete_master_drawables_size() const {
  return _internal_obsolete_master_drawables_size();
}
inline ::TSP::Reference* SectionArchive::mutable_obsolete_master_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TP.SectionArchive.OBSOLETE_master_drawables)
  return _impl_.obsolete_master_drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SectionArchive::mutable_obsolete_master_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TP.SectionArchive.OBSOLETE_master_drawables)
  return &_impl_.obsolete_master_drawables_;
}
inline const ::TSP::Reference& SectionArchive::_internal_obsolete_master_drawables(int index) const {
  return _impl_.obsolete_master_drawables_.Get(index);
}
inline const ::TSP::Reference& SectionArchive::obsolete_master_drawables(int index) const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_master_drawables)
  return _internal_obsolete_master_drawables(index);
}
inline ::TSP::Reference* SectionArchive::_internal_add_obsolete_master_drawables() {
  return _impl_.obsolete_master_drawables_.Add();
}
inline ::TSP::Reference* SectionArchive::add_obsolete_master_drawables() {
  ::TSP::Reference* _add = _internal_add_obsolete_master_drawables();
  // @@protoc_insertion_point(field_add:TP.SectionArchive.OBSOLETE_master_drawables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SectionArchive::obsolete_master_drawables() const {
  // @@protoc_insertion_point(field_list:TP.SectionArchive.OBSOLETE_master_drawables)
  return _impl_.obsolete_master_drawables_;
}

// optional float OBSOLETE_header_margin = 15;
inline bool SectionArchive::_internal_has_obsolete_header_margin() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool SectionArchive::has_obsolete_header_margin() const {
  return _internal_has_obsolete_header_margin();
}
inline void SectionArchive::clear_obsolete_header_margin() {
  _impl_.obsolete_header_margin_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline float SectionArchive::_internal_obsolete_header_margin() const {
  return _impl_.obsolete_header_margin_;
}
inline float SectionArchive::obsolete_header_margin() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_header_margin)
  return _internal_obsolete_header_margin();
}
inline void SectionArchive::_internal_set_obsolete_header_margin(float value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.obsolete_header_margin_ = value;
}
inline void SectionArchive::set_obsolete_header_margin(float value) {
  _internal_set_obsolete_header_margin(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.OBSOLETE_header_margin)
}

// optional float OBSOLETE_footer_margin = 16;
inline bool SectionArchive::_internal_has_obsolete_footer_margin() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool SectionArchive::has_obsolete_footer_margin() const {
  return _internal_has_obsolete_footer_margin();
}
inline void SectionArchive::clear_obsolete_footer_margin() {
  _impl_.obsolete_footer_margin_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline float SectionArchive::_internal_obsolete_footer_margin() const {
  return _impl_.obsolete_footer_margin_;
}
inline float SectionArchive::obsolete_footer_margin() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_footer_margin)
  return _internal_obsolete_footer_margin();
}
inline void SectionArchive::_internal_set_obsolete_footer_margin(float value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.obsolete_footer_margin_ = value;
}
inline void SectionArchive::set_obsolete_footer_margin(float value) {
  _internal_set_obsolete_footer_margin(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.OBSOLETE_footer_margin)
}

// optional bool inherit_previous_header_footer = 17;
inline bool SectionArchive::_internal_has_inherit_previous_header_footer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SectionArchive::has_inherit_previous_header_footer() const {
  return _internal_has_inherit_previous_header_footer();
}
inline void SectionArchive::clear_inherit_previous_header_footer() {
  _impl_.inherit_previous_header_footer_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool SectionArchive::_internal_inherit_previous_header_footer() const {
  return _impl_.inherit_previous_header_footer_;
}
inline bool SectionArchive::inherit_previous_header_footer() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.inherit_previous_header_footer)
  return _internal_inherit_previous_header_footer();
}
inline void SectionArchive::_internal_set_inherit_previous_header_footer(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.inherit_previous_header_footer_ = value;
}
inline void SectionArchive::set_inherit_previous_header_footer(bool value) {
  _internal_set_inherit_previous_header_footer(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.inherit_previous_header_footer)
}

// optional bool page_master_first_page_different = 18;
inline bool SectionArchive::_internal_has_page_master_first_page_different() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool SectionArchive::has_page_master_first_page_different() const {
  return _internal_has_page_master_first_page_different();
}
inline void SectionArchive::clear_page_master_first_page_different() {
  _impl_.page_master_first_page_different_ = false;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline bool SectionArchive::_internal_page_master_first_page_different() const {
  return _impl_.page_master_first_page_different_;
}
inline bool SectionArchive::page_master_first_page_different() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.page_master_first_page_different)
  return _internal_page_master_first_page_different();
}
inline void SectionArchive::_internal_set_page_master_first_page_different(bool value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.page_master_first_page_different_ = value;
}
inline void SectionArchive::set_page_master_first_page_different(bool value) {
  _internal_set_page_master_first_page_different(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.page_master_first_page_different)
}

// optional bool page_master_even_odd_pages_different = 19;
inline bool SectionArchive::_internal_has_page_master_even_odd_pages_different() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool SectionArchive::has_page_master_even_odd_pages_different() const {
  return _internal_has_page_master_even_odd_pages_different();
}
inline void SectionArchive::clear_page_master_even_odd_pages_different() {
  _impl_.page_master_even_odd_pages_different_ = false;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline bool SectionArchive::_internal_page_master_even_odd_pages_different() const {
  return _impl_.page_master_even_odd_pages_different_;
}
inline bool SectionArchive::page_master_even_odd_pages_different() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.page_master_even_odd_pages_different)
  return _internal_page_master_even_odd_pages_different();
}
inline void SectionArchive::_internal_set_page_master_even_odd_pages_different(bool value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.page_master_even_odd_pages_different_ = value;
}
inline void SectionArchive::set_page_master_even_odd_pages_different(bool value) {
  _internal_set_page_master_even_odd_pages_different(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.page_master_even_odd_pages_different)
}

// optional uint32 section_start_kind = 20;
inline bool SectionArchive::_internal_has_section_start_kind() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool SectionArchive::has_section_start_kind() const {
  return _internal_has_section_start_kind();
}
inline void SectionArchive::clear_section_start_kind() {
  _impl_.section_start_kind_ = 0u;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline uint32_t SectionArchive::_internal_section_start_kind() const {
  return _impl_.section_start_kind_;
}
inline uint32_t SectionArchive::section_start_kind() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.section_start_kind)
  return _internal_section_start_kind();
}
inline void SectionArchive::_internal_set_section_start_kind(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.section_start_kind_ = value;
}
inline void SectionArchive::set_section_start_kind(uint32_t value) {
  _internal_set_section_start_kind(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.section_start_kind)
}

// optional uint32 section_page_number_kind = 21;
inline bool SectionArchive::_internal_has_section_page_number_kind() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool SectionArchive::has_section_page_number_kind() const {
  return _internal_has_section_page_number_kind();
}
inline void SectionArchive::clear_section_page_number_kind() {
  _impl_.section_page_number_kind_ = 0u;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline uint32_t SectionArchive::_internal_section_page_number_kind() const {
  return _impl_.section_page_number_kind_;
}
inline uint32_t SectionArchive::section_page_number_kind() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.section_page_number_kind)
  return _internal_section_page_number_kind();
}
inline void SectionArchive::_internal_set_section_page_number_kind(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.section_page_number_kind_ = value;
}
inline void SectionArchive::set_section_page_number_kind(uint32_t value) {
  _internal_set_section_page_number_kind(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.section_page_number_kind)
}

// optional uint32 section_page_number_start = 22;
inline bool SectionArchive::_internal_has_section_page_number_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool SectionArchive::has_section_page_number_start() const {
  return _internal_has_section_page_number_start();
}
inline void SectionArchive::clear_section_page_number_start() {
  _impl_.section_page_number_start_ = 0u;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline uint32_t SectionArchive::_internal_section_page_number_start() const {
  return _impl_.section_page_number_start_;
}
inline uint32_t SectionArchive::section_page_number_start() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.section_page_number_start)
  return _internal_section_page_number_start();
}
inline void SectionArchive::_internal_set_section_page_number_start(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.section_page_number_start_ = value;
}
inline void SectionArchive::set_section_page_number_start(uint32_t value) {
  _internal_set_section_page_number_start(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.section_page_number_start)
}

// optional .TSP.Reference first_page_master = 23;
inline bool SectionArchive::_internal_has_first_page_master() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.first_page_master_ != nullptr);
  return value;
}
inline bool SectionArchive::has_first_page_master() const {
  return _internal_has_first_page_master();
}
inline const ::TSP::Reference& SectionArchive::_internal_first_page_master() const {
  const ::TSP::Reference* p = _impl_.first_page_master_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SectionArchive::first_page_master() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.first_page_master)
  return _internal_first_page_master();
}
inline void SectionArchive::unsafe_arena_set_allocated_first_page_master(
    ::TSP::Reference* first_page_master) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.first_page_master_);
  }
  _impl_.first_page_master_ = first_page_master;
  if (first_page_master) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.SectionArchive.first_page_master)
}
inline ::TSP::Reference* SectionArchive::release_first_page_master() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.first_page_master_;
  _impl_.first_page_master_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SectionArchive::unsafe_arena_release_first_page_master() {
  // @@protoc_insertion_point(field_release:TP.SectionArchive.first_page_master)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.first_page_master_;
  _impl_.first_page_master_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SectionArchive::_internal_mutable_first_page_master() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.first_page_master_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.first_page_master_ = p;
  }
  return _impl_.first_page_master_;
}
inline ::TSP::Reference* SectionArchive::mutable_first_page_master() {
  ::TSP::Reference* _msg = _internal_mutable_first_page_master();
  // @@protoc_insertion_point(field_mutable:TP.SectionArchive.first_page_master)
  return _msg;
}
inline void SectionArchive::set_allocated_first_page_master(::TSP::Reference* first_page_master) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.first_page_master_);
  }
  if (first_page_master) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(first_page_master));
    if (message_arena != submessage_arena) {
      first_page_master = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, first_page_master, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.first_page_master_ = first_page_master;
  // @@protoc_insertion_point(field_set_allocated:TP.SectionArchive.first_page_master)
}

// optional .TSP.Reference even_page_master = 24;
inline bool SectionArchive::_internal_has_even_page_master() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.even_page_master_ != nullptr);
  return value;
}
inline bool SectionArchive::has_even_page_master() const {
  return _internal_has_even_page_master();
}
inline const ::TSP::Reference& SectionArchive::_internal_even_page_master() const {
  const ::TSP::Reference* p = _impl_.even_page_master_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SectionArchive::even_page_master() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.even_page_master)
  return _internal_even_page_master();
}
inline void SectionArchive::unsafe_arena_set_allocated_even_page_master(
    ::TSP::Reference* even_page_master) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.even_page_master_);
  }
  _impl_.even_page_master_ = even_page_master;
  if (even_page_master) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.SectionArchive.even_page_master)
}
inline ::TSP::Reference* SectionArchive::release_even_page_master() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.even_page_master_;
  _impl_.even_page_master_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SectionArchive::unsafe_arena_release_even_page_master() {
  // @@protoc_insertion_point(field_release:TP.SectionArchive.even_page_master)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.even_page_master_;
  _impl_.even_page_master_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SectionArchive::_internal_mutable_even_page_master() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.even_page_master_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.even_page_master_ = p;
  }
  return _impl_.even_page_master_;
}
inline ::TSP::Reference* SectionArchive::mutable_even_page_master() {
  ::TSP::Reference* _msg = _internal_mutable_even_page_master();
  // @@protoc_insertion_point(field_mutable:TP.SectionArchive.even_page_master)
  return _msg;
}
inline void SectionArchive::set_allocated_even_page_master(::TSP::Reference* even_page_master) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.even_page_master_);
  }
  if (even_page_master) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(even_page_master));
    if (message_arena != submessage_arena) {
      even_page_master = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, even_page_master, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.even_page_master_ = even_page_master;
  // @@protoc_insertion_point(field_set_allocated:TP.SectionArchive.even_page_master)
}

// optional .TSP.Reference odd_page_master = 25;
inline bool SectionArchive::_internal_has_odd_page_master() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.odd_page_master_ != nullptr);
  return value;
}
inline bool SectionArchive::has_odd_page_master() const {
  return _internal_has_odd_page_master();
}
inline const ::TSP::Reference& SectionArchive::_internal_odd_page_master() const {
  const ::TSP::Reference* p = _impl_.odd_page_master_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SectionArchive::odd_page_master() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.odd_page_master)
  return _internal_odd_page_master();
}
inline void SectionArchive::unsafe_arena_set_allocated_odd_page_master(
    ::TSP::Reference* odd_page_master) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.odd_page_master_);
  }
  _impl_.odd_page_master_ = odd_page_master;
  if (odd_page_master) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.SectionArchive.odd_page_master)
}
inline ::TSP::Reference* SectionArchive::release_odd_page_master() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.odd_page_master_;
  _impl_.odd_page_master_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SectionArchive::unsafe_arena_release_odd_page_master() {
  // @@protoc_insertion_point(field_release:TP.SectionArchive.odd_page_master)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.odd_page_master_;
  _impl_.odd_page_master_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SectionArchive::_internal_mutable_odd_page_master() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.odd_page_master_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.odd_page_master_ = p;
  }
  return _impl_.odd_page_master_;
}
inline ::TSP::Reference* SectionArchive::mutable_odd_page_master() {
  ::TSP::Reference* _msg = _internal_mutable_odd_page_master();
  // @@protoc_insertion_point(field_mutable:TP.SectionArchive.odd_page_master)
  return _msg;
}
inline void SectionArchive::set_allocated_odd_page_master(::TSP::Reference* odd_page_master) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.odd_page_master_);
  }
  if (odd_page_master) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(odd_page_master));
    if (message_arena != submessage_arena) {
      odd_page_master = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, odd_page_master, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.odd_page_master_ = odd_page_master;
  // @@protoc_insertion_point(field_set_allocated:TP.SectionArchive.odd_page_master)
}

// optional string name = 26;
inline bool SectionArchive::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SectionArchive::has_name() const {
  return _internal_has_name();
}
inline void SectionArchive::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SectionArchive::name() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SectionArchive::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TP.SectionArchive.name)
}
inline std::string* SectionArchive::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TP.SectionArchive.name)
  return _s;
}
inline const std::string& SectionArchive::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SectionArchive::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SectionArchive::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SectionArchive::release_name() {
  // @@protoc_insertion_point(field_release:TP.SectionArchive.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SectionArchive::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TP.SectionArchive.name)
}

// optional bool page_master_first_page_hides_header_footer = 28;
inline bool SectionArchive::_internal_has_page_master_first_page_hides_header_footer() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool SectionArchive::has_page_master_first_page_hides_header_footer() const {
  return _internal_has_page_master_first_page_hides_header_footer();
}
inline void SectionArchive::clear_page_master_first_page_hides_header_footer() {
  _impl_.page_master_first_page_hides_header_footer_ = false;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline bool SectionArchive::_internal_page_master_first_page_hides_header_footer() const {
  return _impl_.page_master_first_page_hides_header_footer_;
}
inline bool SectionArchive::page_master_first_page_hides_header_footer() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.page_master_first_page_hides_header_footer)
  return _internal_page_master_first_page_hides_header_footer();
}
inline void SectionArchive::_internal_set_page_master_first_page_hides_header_footer(bool value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.page_master_first_page_hides_header_footer_ = value;
}
inline void SectionArchive::set_page_master_first_page_hides_header_footer(bool value) {
  _internal_set_page_master_first_page_hides_header_footer(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.page_master_first_page_hides_header_footer)
}

// -------------------------------------------------------------------

// AnchorPosArchive

// optional .TSP.Reference attachment = 1;
inline bool AnchorPosArchive::_internal_has_attachment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.attachment_ != nullptr);
  return value;
}
inline bool AnchorPosArchive::has_attachment() const {
  return _internal_has_attachment();
}
inline const ::TSP::Reference& AnchorPosArchive::_internal_attachment() const {
  const ::TSP::Reference* p = _impl_.attachment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& AnchorPosArchive::attachment() const {
  // @@protoc_insertion_point(field_get:TP.AnchorPosArchive.attachment)
  return _internal_attachment();
}
inline void AnchorPosArchive::unsafe_arena_set_allocated_attachment(
    ::TSP::Reference* attachment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attachment_);
  }
  _impl_.attachment_ = attachment;
  if (attachment) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.AnchorPosArchive.attachment)
}
inline ::TSP::Reference* AnchorPosArchive::release_attachment() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.attachment_;
  _impl_.attachment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* AnchorPosArchive::unsafe_arena_release_attachment() {
  // @@protoc_insertion_point(field_release:TP.AnchorPosArchive.attachment)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.attachment_;
  _impl_.attachment_ = nullptr;
  return temp;
}
inline ::TSP::Reference* AnchorPosArchive::_internal_mutable_attachment() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.attachment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.attachment_ = p;
  }
  return _impl_.attachment_;
}
inline ::TSP::Reference* AnchorPosArchive::mutable_attachment() {
  ::TSP::Reference* _msg = _internal_mutable_attachment();
  // @@protoc_insertion_point(field_mutable:TP.AnchorPosArchive.attachment)
  return _msg;
}
inline void AnchorPosArchive::set_allocated_attachment(::TSP::Reference* attachment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attachment_);
  }
  if (attachment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attachment));
    if (message_arena != submessage_arena) {
      attachment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attachment, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attachment_ = attachment;
  // @@protoc_insertion_point(field_set_allocated:TP.AnchorPosArchive.attachment)
}

// optional .TSP.Point position = 2;
inline bool AnchorPosArchive::_internal_has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline bool AnchorPosArchive::has_position() const {
  return _internal_has_position();
}
inline const ::TSP::Point& AnchorPosArchive::_internal_position() const {
  const ::TSP::Point* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& AnchorPosArchive::position() const {
  // @@protoc_insertion_point(field_get:TP.AnchorPosArchive.position)
  return _internal_position();
}
inline void AnchorPosArchive::unsafe_arena_set_allocated_position(
    ::TSP::Point* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.AnchorPosArchive.position)
}
inline ::TSP::Point* AnchorPosArchive::release_position() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Point* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Point* AnchorPosArchive::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:TP.AnchorPosArchive.position)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Point* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::TSP::Point* AnchorPosArchive::_internal_mutable_position() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::TSP::Point* AnchorPosArchive::mutable_position() {
  ::TSP::Point* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:TP.AnchorPosArchive.position)
  return _msg;
}
inline void AnchorPosArchive::set_allocated_position(::TSP::Point* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:TP.AnchorPosArchive.position)
}

// -------------------------------------------------------------------

// TargetHintArchive

// optional .TSP.Point frame_origin = 1;
inline bool TargetHintArchive::_internal_has_frame_origin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.frame_origin_ != nullptr);
  return value;
}
inline bool TargetHintArchive::has_frame_origin() const {
  return _internal_has_frame_origin();
}
inline const ::TSP::Point& TargetHintArchive::_internal_frame_origin() const {
  const ::TSP::Point* p = _impl_.frame_origin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& TargetHintArchive::frame_origin() const {
  // @@protoc_insertion_point(field_get:TP.TargetHintArchive.frame_origin)
  return _internal_frame_origin();
}
inline void TargetHintArchive::unsafe_arena_set_allocated_frame_origin(
    ::TSP::Point* frame_origin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.frame_origin_);
  }
  _impl_.frame_origin_ = frame_origin;
  if (frame_origin) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.TargetHintArchive.frame_origin)
}
inline ::TSP::Point* TargetHintArchive::release_frame_origin() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Point* temp = _impl_.frame_origin_;
  _impl_.frame_origin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Point* TargetHintArchive::unsafe_arena_release_frame_origin() {
  // @@protoc_insertion_point(field_release:TP.TargetHintArchive.frame_origin)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Point* temp = _impl_.frame_origin_;
  _impl_.frame_origin_ = nullptr;
  return temp;
}
inline ::TSP::Point* TargetHintArchive::_internal_mutable_frame_origin() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.frame_origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArenaForAllocation());
    _impl_.frame_origin_ = p;
  }
  return _impl_.frame_origin_;
}
inline ::TSP::Point* TargetHintArchive::mutable_frame_origin() {
  ::TSP::Point* _msg = _internal_mutable_frame_origin();
  // @@protoc_insertion_point(field_mutable:TP.TargetHintArchive.frame_origin)
  return _msg;
}
inline void TargetHintArchive::set_allocated_frame_origin(::TSP::Point* frame_origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.frame_origin_);
  }
  if (frame_origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_origin));
    if (message_arena != submessage_arena) {
      frame_origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame_origin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.frame_origin_ = frame_origin;
  // @@protoc_insertion_point(field_set_allocated:TP.TargetHintArchive.frame_origin)
}

// optional .TSP.Size frame_size = 2;
inline bool TargetHintArchive::_internal_has_frame_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.frame_size_ != nullptr);
  return value;
}
inline bool TargetHintArchive::has_frame_size() const {
  return _internal_has_frame_size();
}
inline const ::TSP::Size& TargetHintArchive::_internal_frame_size() const {
  const ::TSP::Size* p = _impl_.frame_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& TargetHintArchive::frame_size() const {
  // @@protoc_insertion_point(field_get:TP.TargetHintArchive.frame_size)
  return _internal_frame_size();
}
inline void TargetHintArchive::unsafe_arena_set_allocated_frame_size(
    ::TSP::Size* frame_size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.frame_size_);
  }
  _impl_.frame_size_ = frame_size;
  if (frame_size) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.TargetHintArchive.frame_size)
}
inline ::TSP::Size* TargetHintArchive::release_frame_size() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Size* temp = _impl_.frame_size_;
  _impl_.frame_size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Size* TargetHintArchive::unsafe_arena_release_frame_size() {
  // @@protoc_insertion_point(field_release:TP.TargetHintArchive.frame_size)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Size* temp = _impl_.frame_size_;
  _impl_.frame_size_ = nullptr;
  return temp;
}
inline ::TSP::Size* TargetHintArchive::_internal_mutable_frame_size() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.frame_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArenaForAllocation());
    _impl_.frame_size_ = p;
  }
  return _impl_.frame_size_;
}
inline ::TSP::Size* TargetHintArchive::mutable_frame_size() {
  ::TSP::Size* _msg = _internal_mutable_frame_size();
  // @@protoc_insertion_point(field_mutable:TP.TargetHintArchive.frame_size)
  return _msg;
}
inline void TargetHintArchive::set_allocated_frame_size(::TSP::Size* frame_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.frame_size_);
  }
  if (frame_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_size));
    if (message_arena != submessage_arena) {
      frame_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame_size, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.frame_size_ = frame_size;
  // @@protoc_insertion_point(field_set_allocated:TP.TargetHintArchive.frame_size)
}

// optional .TSP.Range range = 3;
inline bool TargetHintArchive::_internal_has_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.range_ != nullptr);
  return value;
}
inline bool TargetHintArchive::has_range() const {
  return _internal_has_range();
}
inline const ::TSP::Range& TargetHintArchive::_internal_range() const {
  const ::TSP::Range* p = _impl_.range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Range&>(
      ::TSP::_Range_default_instance_);
}
inline const ::TSP::Range& TargetHintArchive::range() const {
  // @@protoc_insertion_point(field_get:TP.TargetHintArchive.range)
  return _internal_range();
}
inline void TargetHintArchive::unsafe_arena_set_allocated_range(
    ::TSP::Range* range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.range_);
  }
  _impl_.range_ = range;
  if (range) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.TargetHintArchive.range)
}
inline ::TSP::Range* TargetHintArchive::release_range() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Range* temp = _impl_.range_;
  _impl_.range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Range* TargetHintArchive::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_release:TP.TargetHintArchive.range)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Range* temp = _impl_.range_;
  _impl_.range_ = nullptr;
  return temp;
}
inline ::TSP::Range* TargetHintArchive::_internal_mutable_range() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Range>(GetArenaForAllocation());
    _impl_.range_ = p;
  }
  return _impl_.range_;
}
inline ::TSP::Range* TargetHintArchive::mutable_range() {
  ::TSP::Range* _msg = _internal_mutable_range();
  // @@protoc_insertion_point(field_mutable:TP.TargetHintArchive.range)
  return _msg;
}
inline void TargetHintArchive::set_allocated_range(::TSP::Range* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.range_);
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range));
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.range_ = range;
  // @@protoc_insertion_point(field_set_allocated:TP.TargetHintArchive.range)
}

// optional int32 next_widow_pulls_down_from_char_index = 4;
inline bool TargetHintArchive::_internal_has_next_widow_pulls_down_from_char_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TargetHintArchive::has_next_widow_pulls_down_from_char_index() const {
  return _internal_has_next_widow_pulls_down_from_char_index();
}
inline void TargetHintArchive::clear_next_widow_pulls_down_from_char_index() {
  _impl_.next_widow_pulls_down_from_char_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t TargetHintArchive::_internal_next_widow_pulls_down_from_char_index() const {
  return _impl_.next_widow_pulls_down_from_char_index_;
}
inline int32_t TargetHintArchive::next_widow_pulls_down_from_char_index() const {
  // @@protoc_insertion_point(field_get:TP.TargetHintArchive.next_widow_pulls_down_from_char_index)
  return _internal_next_widow_pulls_down_from_char_index();
}
inline void TargetHintArchive::_internal_set_next_widow_pulls_down_from_char_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.next_widow_pulls_down_from_char_index_ = value;
}
inline void TargetHintArchive::set_next_widow_pulls_down_from_char_index(int32_t value) {
  _internal_set_next_widow_pulls_down_from_char_index(value);
  // @@protoc_insertion_point(field_set:TP.TargetHintArchive.next_widow_pulls_down_from_char_index)
}

// optional .TSP.Range anchored_range = 5;
inline bool TargetHintArchive::_internal_has_anchored_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.anchored_range_ != nullptr);
  return value;
}
inline bool TargetHintArchive::has_anchored_range() const {
  return _internal_has_anchored_range();
}
inline const ::TSP::Range& TargetHintArchive::_internal_anchored_range() const {
  const ::TSP::Range* p = _impl_.anchored_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Range&>(
      ::TSP::_Range_default_instance_);
}
inline const ::TSP::Range& TargetHintArchive::anchored_range() const {
  // @@protoc_insertion_point(field_get:TP.TargetHintArchive.anchored_range)
  return _internal_anchored_range();
}
inline void TargetHintArchive::unsafe_arena_set_allocated_anchored_range(
    ::TSP::Range* anchored_range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anchored_range_);
  }
  _impl_.anchored_range_ = anchored_range;
  if (anchored_range) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.TargetHintArchive.anchored_range)
}
inline ::TSP::Range* TargetHintArchive::release_anchored_range() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Range* temp = _impl_.anchored_range_;
  _impl_.anchored_range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Range* TargetHintArchive::unsafe_arena_release_anchored_range() {
  // @@protoc_insertion_point(field_release:TP.TargetHintArchive.anchored_range)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Range* temp = _impl_.anchored_range_;
  _impl_.anchored_range_ = nullptr;
  return temp;
}
inline ::TSP::Range* TargetHintArchive::_internal_mutable_anchored_range() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.anchored_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Range>(GetArenaForAllocation());
    _impl_.anchored_range_ = p;
  }
  return _impl_.anchored_range_;
}
inline ::TSP::Range* TargetHintArchive::mutable_anchored_range() {
  ::TSP::Range* _msg = _internal_mutable_anchored_range();
  // @@protoc_insertion_point(field_mutable:TP.TargetHintArchive.anchored_range)
  return _msg;
}
inline void TargetHintArchive::set_allocated_anchored_range(::TSP::Range* anchored_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anchored_range_);
  }
  if (anchored_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchored_range));
    if (message_arena != submessage_arena) {
      anchored_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anchored_range, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.anchored_range_ = anchored_range;
  // @@protoc_insertion_point(field_set_allocated:TP.TargetHintArchive.anchored_range)
}

// optional int32 column_count = 6;
inline bool TargetHintArchive::_internal_has_column_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TargetHintArchive::has_column_count() const {
  return _internal_has_column_count();
}
inline void TargetHintArchive::clear_column_count() {
  _impl_.column_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t TargetHintArchive::_internal_column_count() const {
  return _impl_.column_count_;
}
inline int32_t TargetHintArchive::column_count() const {
  // @@protoc_insertion_point(field_get:TP.TargetHintArchive.column_count)
  return _internal_column_count();
}
inline void TargetHintArchive::_internal_set_column_count(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.column_count_ = value;
}
inline void TargetHintArchive::set_column_count(int32_t value) {
  _internal_set_column_count(value);
  // @@protoc_insertion_point(field_set:TP.TargetHintArchive.column_count)
}

// -------------------------------------------------------------------

// PageHintArchive

// optional .TP.PageHintArchive.PageKind page_kind = 1;
inline bool PageHintArchive::_internal_has_page_kind() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PageHintArchive::has_page_kind() const {
  return _internal_has_page_kind();
}
inline void PageHintArchive::clear_page_kind() {
  _impl_.page_kind_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::TP::PageHintArchive_PageKind PageHintArchive::_internal_page_kind() const {
  return static_cast< ::TP::PageHintArchive_PageKind >(_impl_.page_kind_);
}
inline ::TP::PageHintArchive_PageKind PageHintArchive::page_kind() const {
  // @@protoc_insertion_point(field_get:TP.PageHintArchive.page_kind)
  return _internal_page_kind();
}
inline void PageHintArchive::_internal_set_page_kind(::TP::PageHintArchive_PageKind value) {
  assert(::TP::PageHintArchive_PageKind_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.page_kind_ = value;
}
inline void PageHintArchive::set_page_kind(::TP::PageHintArchive_PageKind value) {
  _internal_set_page_kind(value);
  // @@protoc_insertion_point(field_set:TP.PageHintArchive.page_kind)
}

// repeated .TP.TargetHintArchive target_hints = 2;
inline int PageHintArchive::_internal_target_hints_size() const {
  return _impl_.target_hints_.size();
}
inline int PageHintArchive::target_hints_size() const {
  return _internal_target_hints_size();
}
inline void PageHintArchive::clear_target_hints() {
  _impl_.target_hints_.Clear();
}
inline ::TP::TargetHintArchive* PageHintArchive::mutable_target_hints(int index) {
  // @@protoc_insertion_point(field_mutable:TP.PageHintArchive.target_hints)
  return _impl_.target_hints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::TargetHintArchive >*
PageHintArchive::mutable_target_hints() {
  // @@protoc_insertion_point(field_mutable_list:TP.PageHintArchive.target_hints)
  return &_impl_.target_hints_;
}
inline const ::TP::TargetHintArchive& PageHintArchive::_internal_target_hints(int index) const {
  return _impl_.target_hints_.Get(index);
}
inline const ::TP::TargetHintArchive& PageHintArchive::target_hints(int index) const {
  // @@protoc_insertion_point(field_get:TP.PageHintArchive.target_hints)
  return _internal_target_hints(index);
}
inline ::TP::TargetHintArchive* PageHintArchive::_internal_add_target_hints() {
  return _impl_.target_hints_.Add();
}
inline ::TP::TargetHintArchive* PageHintArchive::add_target_hints() {
  ::TP::TargetHintArchive* _add = _internal_add_target_hints();
  // @@protoc_insertion_point(field_add:TP.PageHintArchive.target_hints)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::TargetHintArchive >&
PageHintArchive::target_hints() const {
  // @@protoc_insertion_point(field_list:TP.PageHintArchive.target_hints)
  return _impl_.target_hints_;
}

// optional .TSP.Range footnote_auto_number_range = 3;
inline bool PageHintArchive::_internal_has_footnote_auto_number_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.footnote_auto_number_range_ != nullptr);
  return value;
}
inline bool PageHintArchive::has_footnote_auto_number_range() const {
  return _internal_has_footnote_auto_number_range();
}
inline const ::TSP::Range& PageHintArchive::_internal_footnote_auto_number_range() const {
  const ::TSP::Range* p = _impl_.footnote_auto_number_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Range&>(
      ::TSP::_Range_default_instance_);
}
inline const ::TSP::Range& PageHintArchive::footnote_auto_number_range() const {
  // @@protoc_insertion_point(field_get:TP.PageHintArchive.footnote_auto_number_range)
  return _internal_footnote_auto_number_range();
}
inline void PageHintArchive::unsafe_arena_set_allocated_footnote_auto_number_range(
    ::TSP::Range* footnote_auto_number_range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.footnote_auto_number_range_);
  }
  _impl_.footnote_auto_number_range_ = footnote_auto_number_range;
  if (footnote_auto_number_range) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.PageHintArchive.footnote_auto_number_range)
}
inline ::TSP::Range* PageHintArchive::release_footnote_auto_number_range() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Range* temp = _impl_.footnote_auto_number_range_;
  _impl_.footnote_auto_number_range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Range* PageHintArchive::unsafe_arena_release_footnote_auto_number_range() {
  // @@protoc_insertion_point(field_release:TP.PageHintArchive.footnote_auto_number_range)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Range* temp = _impl_.footnote_auto_number_range_;
  _impl_.footnote_auto_number_range_ = nullptr;
  return temp;
}
inline ::TSP::Range* PageHintArchive::_internal_mutable_footnote_auto_number_range() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.footnote_auto_number_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Range>(GetArenaForAllocation());
    _impl_.footnote_auto_number_range_ = p;
  }
  return _impl_.footnote_auto_number_range_;
}
inline ::TSP::Range* PageHintArchive::mutable_footnote_auto_number_range() {
  ::TSP::Range* _msg = _internal_mutable_footnote_auto_number_range();
  // @@protoc_insertion_point(field_mutable:TP.PageHintArchive.footnote_auto_number_range)
  return _msg;
}
inline void PageHintArchive::set_allocated_footnote_auto_number_range(::TSP::Range* footnote_auto_number_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.footnote_auto_number_range_);
  }
  if (footnote_auto_number_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footnote_auto_number_range));
    if (message_arena != submessage_arena) {
      footnote_auto_number_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, footnote_auto_number_range, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.footnote_auto_number_range_ = footnote_auto_number_range;
  // @@protoc_insertion_point(field_set_allocated:TP.PageHintArchive.footnote_auto_number_range)
}

// optional .TSP.Range footnote_layout_range = 4;
inline bool PageHintArchive::_internal_has_footnote_layout_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.footnote_layout_range_ != nullptr);
  return value;
}
inline bool PageHintArchive::has_footnote_layout_range() const {
  return _internal_has_footnote_layout_range();
}
inline const ::TSP::Range& PageHintArchive::_internal_footnote_layout_range() const {
  const ::TSP::Range* p = _impl_.footnote_layout_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Range&>(
      ::TSP::_Range_default_instance_);
}
inline const ::TSP::Range& PageHintArchive::footnote_layout_range() const {
  // @@protoc_insertion_point(field_get:TP.PageHintArchive.footnote_layout_range)
  return _internal_footnote_layout_range();
}
inline void PageHintArchive::unsafe_arena_set_allocated_footnote_layout_range(
    ::TSP::Range* footnote_layout_range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.footnote_layout_range_);
  }
  _impl_.footnote_layout_range_ = footnote_layout_range;
  if (footnote_layout_range) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.PageHintArchive.footnote_layout_range)
}
inline ::TSP::Range* PageHintArchive::release_footnote_layout_range() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Range* temp = _impl_.footnote_layout_range_;
  _impl_.footnote_layout_range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Range* PageHintArchive::unsafe_arena_release_footnote_layout_range() {
  // @@protoc_insertion_point(field_release:TP.PageHintArchive.footnote_layout_range)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Range* temp = _impl_.footnote_layout_range_;
  _impl_.footnote_layout_range_ = nullptr;
  return temp;
}
inline ::TSP::Range* PageHintArchive::_internal_mutable_footnote_layout_range() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.footnote_layout_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Range>(GetArenaForAllocation());
    _impl_.footnote_layout_range_ = p;
  }
  return _impl_.footnote_layout_range_;
}
inline ::TSP::Range* PageHintArchive::mutable_footnote_layout_range() {
  ::TSP::Range* _msg = _internal_mutable_footnote_layout_range();
  // @@protoc_insertion_point(field_mutable:TP.PageHintArchive.footnote_layout_range)
  return _msg;
}
inline void PageHintArchive::set_allocated_footnote_layout_range(::TSP::Range* footnote_layout_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.footnote_layout_range_);
  }
  if (footnote_layout_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footnote_layout_range));
    if (message_arena != submessage_arena) {
      footnote_layout_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, footnote_layout_range, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.footnote_layout_range_ = footnote_layout_range;
  // @@protoc_insertion_point(field_set_allocated:TP.PageHintArchive.footnote_layout_range)
}

// optional .TSP.Reference first_child_hint = 6;
inline bool PageHintArchive::_internal_has_first_child_hint() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.first_child_hint_ != nullptr);
  return value;
}
inline bool PageHintArchive::has_first_child_hint() const {
  return _internal_has_first_child_hint();
}
inline const ::TSP::Reference& PageHintArchive::_internal_first_child_hint() const {
  const ::TSP::Reference* p = _impl_.first_child_hint_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PageHintArchive::first_child_hint() const {
  // @@protoc_insertion_point(field_get:TP.PageHintArchive.first_child_hint)
  return _internal_first_child_hint();
}
inline void PageHintArchive::unsafe_arena_set_allocated_first_child_hint(
    ::TSP::Reference* first_child_hint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.first_child_hint_);
  }
  _impl_.first_child_hint_ = first_child_hint;
  if (first_child_hint) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.PageHintArchive.first_child_hint)
}
inline ::TSP::Reference* PageHintArchive::release_first_child_hint() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.first_child_hint_;
  _impl_.first_child_hint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* PageHintArchive::unsafe_arena_release_first_child_hint() {
  // @@protoc_insertion_point(field_release:TP.PageHintArchive.first_child_hint)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.first_child_hint_;
  _impl_.first_child_hint_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PageHintArchive::_internal_mutable_first_child_hint() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.first_child_hint_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.first_child_hint_ = p;
  }
  return _impl_.first_child_hint_;
}
inline ::TSP::Reference* PageHintArchive::mutable_first_child_hint() {
  ::TSP::Reference* _msg = _internal_mutable_first_child_hint();
  // @@protoc_insertion_point(field_mutable:TP.PageHintArchive.first_child_hint)
  return _msg;
}
inline void PageHintArchive::set_allocated_first_child_hint(::TSP::Reference* first_child_hint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.first_child_hint_);
  }
  if (first_child_hint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(first_child_hint));
    if (message_arena != submessage_arena) {
      first_child_hint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, first_child_hint, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.first_child_hint_ = first_child_hint;
  // @@protoc_insertion_point(field_set_allocated:TP.PageHintArchive.first_child_hint)
}

// optional .TSP.Reference last_child_hint = 7;
inline bool PageHintArchive::_internal_has_last_child_hint() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_child_hint_ != nullptr);
  return value;
}
inline bool PageHintArchive::has_last_child_hint() const {
  return _internal_has_last_child_hint();
}
inline const ::TSP::Reference& PageHintArchive::_internal_last_child_hint() const {
  const ::TSP::Reference* p = _impl_.last_child_hint_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PageHintArchive::last_child_hint() const {
  // @@protoc_insertion_point(field_get:TP.PageHintArchive.last_child_hint)
  return _internal_last_child_hint();
}
inline void PageHintArchive::unsafe_arena_set_allocated_last_child_hint(
    ::TSP::Reference* last_child_hint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_child_hint_);
  }
  _impl_.last_child_hint_ = last_child_hint;
  if (last_child_hint) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.PageHintArchive.last_child_hint)
}
inline ::TSP::Reference* PageHintArchive::release_last_child_hint() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.last_child_hint_;
  _impl_.last_child_hint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* PageHintArchive::unsafe_arena_release_last_child_hint() {
  // @@protoc_insertion_point(field_release:TP.PageHintArchive.last_child_hint)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.last_child_hint_;
  _impl_.last_child_hint_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PageHintArchive::_internal_mutable_last_child_hint() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.last_child_hint_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.last_child_hint_ = p;
  }
  return _impl_.last_child_hint_;
}
inline ::TSP::Reference* PageHintArchive::mutable_last_child_hint() {
  ::TSP::Reference* _msg = _internal_mutable_last_child_hint();
  // @@protoc_insertion_point(field_mutable:TP.PageHintArchive.last_child_hint)
  return _msg;
}
inline void PageHintArchive::set_allocated_last_child_hint(::TSP::Reference* last_child_hint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_child_hint_);
  }
  if (last_child_hint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_child_hint));
    if (message_arena != submessage_arena) {
      last_child_hint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_child_hint, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.last_child_hint_ = last_child_hint;
  // @@protoc_insertion_point(field_set_allocated:TP.PageHintArchive.last_child_hint)
}

// repeated .TP.AnchorPosArchive anchored_attachments_map = 8;
inline int PageHintArchive::_internal_anchored_attachments_map_size() const {
  return _impl_.anchored_attachments_map_.size();
}
inline int PageHintArchive::anchored_attachments_map_size() const {
  return _internal_anchored_attachments_map_size();
}
inline void PageHintArchive::clear_anchored_attachments_map() {
  _impl_.anchored_attachments_map_.Clear();
}
inline ::TP::AnchorPosArchive* PageHintArchive::mutable_anchored_attachments_map(int index) {
  // @@protoc_insertion_point(field_mutable:TP.PageHintArchive.anchored_attachments_map)
  return _impl_.anchored_attachments_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::AnchorPosArchive >*
PageHintArchive::mutable_anchored_attachments_map() {
  // @@protoc_insertion_point(field_mutable_list:TP.PageHintArchive.anchored_attachments_map)
  return &_impl_.anchored_attachments_map_;
}
inline const ::TP::AnchorPosArchive& PageHintArchive::_internal_anchored_attachments_map(int index) const {
  return _impl_.anchored_attachments_map_.Get(index);
}
inline const ::TP::AnchorPosArchive& PageHintArchive::anchored_attachments_map(int index) const {
  // @@protoc_insertion_point(field_get:TP.PageHintArchive.anchored_attachments_map)
  return _internal_anchored_attachments_map(index);
}
inline ::TP::AnchorPosArchive* PageHintArchive::_internal_add_anchored_attachments_map() {
  return _impl_.anchored_attachments_map_.Add();
}
inline ::TP::AnchorPosArchive* PageHintArchive::add_anchored_attachments_map() {
  ::TP::AnchorPosArchive* _add = _internal_add_anchored_attachments_map();
  // @@protoc_insertion_point(field_add:TP.PageHintArchive.anchored_attachments_map)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::AnchorPosArchive >&
PageHintArchive::anchored_attachments_map() const {
  // @@protoc_insertion_point(field_list:TP.PageHintArchive.anchored_attachments_map)
  return _impl_.anchored_attachments_map_;
}

// optional .TP.TopicNumberHintsArchive topic_numbers = 9;
inline bool PageHintArchive::_internal_has_topic_numbers() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.topic_numbers_ != nullptr);
  return value;
}
inline bool PageHintArchive::has_topic_numbers() const {
  return _internal_has_topic_numbers();
}
inline void PageHintArchive::clear_topic_numbers() {
  if (_impl_.topic_numbers_ != nullptr) _impl_.topic_numbers_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::TP::TopicNumberHintsArchive& PageHintArchive::_internal_topic_numbers() const {
  const ::TP::TopicNumberHintsArchive* p = _impl_.topic_numbers_;
  return p != nullptr ? *p : reinterpret_cast<const ::TP::TopicNumberHintsArchive&>(
      ::TP::_TopicNumberHintsArchive_default_instance_);
}
inline const ::TP::TopicNumberHintsArchive& PageHintArchive::topic_numbers() const {
  // @@protoc_insertion_point(field_get:TP.PageHintArchive.topic_numbers)
  return _internal_topic_numbers();
}
inline void PageHintArchive::unsafe_arena_set_allocated_topic_numbers(
    ::TP::TopicNumberHintsArchive* topic_numbers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topic_numbers_);
  }
  _impl_.topic_numbers_ = topic_numbers;
  if (topic_numbers) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.PageHintArchive.topic_numbers)
}
inline ::TP::TopicNumberHintsArchive* PageHintArchive::release_topic_numbers() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TP::TopicNumberHintsArchive* temp = _impl_.topic_numbers_;
  _impl_.topic_numbers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TP::TopicNumberHintsArchive* PageHintArchive::unsafe_arena_release_topic_numbers() {
  // @@protoc_insertion_point(field_release:TP.PageHintArchive.topic_numbers)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TP::TopicNumberHintsArchive* temp = _impl_.topic_numbers_;
  _impl_.topic_numbers_ = nullptr;
  return temp;
}
inline ::TP::TopicNumberHintsArchive* PageHintArchive::_internal_mutable_topic_numbers() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.topic_numbers_ == nullptr) {
    auto* p = CreateMaybeMessage<::TP::TopicNumberHintsArchive>(GetArenaForAllocation());
    _impl_.topic_numbers_ = p;
  }
  return _impl_.topic_numbers_;
}
inline ::TP::TopicNumberHintsArchive* PageHintArchive::mutable_topic_numbers() {
  ::TP::TopicNumberHintsArchive* _msg = _internal_mutable_topic_numbers();
  // @@protoc_insertion_point(field_mutable:TP.PageHintArchive.topic_numbers)
  return _msg;
}
inline void PageHintArchive::set_allocated_topic_numbers(::TP::TopicNumberHintsArchive* topic_numbers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.topic_numbers_;
  }
  if (topic_numbers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(topic_numbers);
    if (message_arena != submessage_arena) {
      topic_numbers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topic_numbers, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.topic_numbers_ = topic_numbers;
  // @@protoc_insertion_point(field_set_allocated:TP.PageHintArchive.topic_numbers)
}

// optional uint32 version_number = 10;
inline bool PageHintArchive::_internal_has_version_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PageHintArchive::has_version_number() const {
  return _internal_has_version_number();
}
inline void PageHintArchive::clear_version_number() {
  _impl_.version_number_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t PageHintArchive::_internal_version_number() const {
  return _impl_.version_number_;
}
inline uint32_t PageHintArchive::version_number() const {
  // @@protoc_insertion_point(field_get:TP.PageHintArchive.version_number)
  return _internal_version_number();
}
inline void PageHintArchive::_internal_set_version_number(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.version_number_ = value;
}
inline void PageHintArchive::set_version_number(uint32_t value) {
  _internal_set_version_number(value);
  // @@protoc_insertion_point(field_set:TP.PageHintArchive.version_number)
}

// optional uint32 platform_id = 11;
inline bool PageHintArchive::_internal_has_platform_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PageHintArchive::has_platform_id() const {
  return _internal_has_platform_id();
}
inline void PageHintArchive::clear_platform_id() {
  _impl_.platform_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t PageHintArchive::_internal_platform_id() const {
  return _impl_.platform_id_;
}
inline uint32_t PageHintArchive::platform_id() const {
  // @@protoc_insertion_point(field_get:TP.PageHintArchive.platform_id)
  return _internal_platform_id();
}
inline void PageHintArchive::_internal_set_platform_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.platform_id_ = value;
}
inline void PageHintArchive::set_platform_id(uint32_t value) {
  _internal_set_platform_id(value);
  // @@protoc_insertion_point(field_set:TP.PageHintArchive.platform_id)
}

// -------------------------------------------------------------------

// SectionHintArchive

// repeated .TP.PageHintArchive page_hints = 1;
inline int SectionHintArchive::_internal_page_hints_size() const {
  return _impl_.page_hints_.size();
}
inline int SectionHintArchive::page_hints_size() const {
  return _internal_page_hints_size();
}
inline void SectionHintArchive::clear_page_hints() {
  _impl_.page_hints_.Clear();
}
inline ::TP::PageHintArchive* SectionHintArchive::mutable_page_hints(int index) {
  // @@protoc_insertion_point(field_mutable:TP.SectionHintArchive.page_hints)
  return _impl_.page_hints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::PageHintArchive >*
SectionHintArchive::mutable_page_hints() {
  // @@protoc_insertion_point(field_mutable_list:TP.SectionHintArchive.page_hints)
  return &_impl_.page_hints_;
}
inline const ::TP::PageHintArchive& SectionHintArchive::_internal_page_hints(int index) const {
  return _impl_.page_hints_.Get(index);
}
inline const ::TP::PageHintArchive& SectionHintArchive::page_hints(int index) const {
  // @@protoc_insertion_point(field_get:TP.SectionHintArchive.page_hints)
  return _internal_page_hints(index);
}
inline ::TP::PageHintArchive* SectionHintArchive::_internal_add_page_hints() {
  return _impl_.page_hints_.Add();
}
inline ::TP::PageHintArchive* SectionHintArchive::add_page_hints() {
  ::TP::PageHintArchive* _add = _internal_add_page_hints();
  // @@protoc_insertion_point(field_add:TP.SectionHintArchive.page_hints)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::PageHintArchive >&
SectionHintArchive::page_hints() const {
  // @@protoc_insertion_point(field_list:TP.SectionHintArchive.page_hints)
  return _impl_.page_hints_;
}

// optional uint32 start_page_index = 2;
inline bool SectionHintArchive::_internal_has_start_page_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SectionHintArchive::has_start_page_index() const {
  return _internal_has_start_page_index();
}
inline void SectionHintArchive::clear_start_page_index() {
  _impl_.start_page_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t SectionHintArchive::_internal_start_page_index() const {
  return _impl_.start_page_index_;
}
inline uint32_t SectionHintArchive::start_page_index() const {
  // @@protoc_insertion_point(field_get:TP.SectionHintArchive.start_page_index)
  return _internal_start_page_index();
}
inline void SectionHintArchive::_internal_set_start_page_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.start_page_index_ = value;
}
inline void SectionHintArchive::set_start_page_index(uint32_t value) {
  _internal_set_start_page_index(value);
  // @@protoc_insertion_point(field_set:TP.SectionHintArchive.start_page_index)
}

// -------------------------------------------------------------------

// TextboxHintArchive

// required .TSP.Range range = 1;
inline bool TextboxHintArchive::_internal_has_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.range_ != nullptr);
  return value;
}
inline bool TextboxHintArchive::has_range() const {
  return _internal_has_range();
}
inline const ::TSP::Range& TextboxHintArchive::_internal_range() const {
  const ::TSP::Range* p = _impl_.range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Range&>(
      ::TSP::_Range_default_instance_);
}
inline const ::TSP::Range& TextboxHintArchive::range() const {
  // @@protoc_insertion_point(field_get:TP.TextboxHintArchive.range)
  return _internal_range();
}
inline void TextboxHintArchive::unsafe_arena_set_allocated_range(
    ::TSP::Range* range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.range_);
  }
  _impl_.range_ = range;
  if (range) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.TextboxHintArchive.range)
}
inline ::TSP::Range* TextboxHintArchive::release_range() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Range* temp = _impl_.range_;
  _impl_.range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Range* TextboxHintArchive::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_release:TP.TextboxHintArchive.range)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Range* temp = _impl_.range_;
  _impl_.range_ = nullptr;
  return temp;
}
inline ::TSP::Range* TextboxHintArchive::_internal_mutable_range() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Range>(GetArenaForAllocation());
    _impl_.range_ = p;
  }
  return _impl_.range_;
}
inline ::TSP::Range* TextboxHintArchive::mutable_range() {
  ::TSP::Range* _msg = _internal_mutable_range();
  // @@protoc_insertion_point(field_mutable:TP.TextboxHintArchive.range)
  return _msg;
}
inline void TextboxHintArchive::set_allocated_range(::TSP::Range* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.range_);
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range));
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.range_ = range;
  // @@protoc_insertion_point(field_set_allocated:TP.TextboxHintArchive.range)
}

// required .TSP.Size size = 2;
inline bool TextboxHintArchive::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.size_ != nullptr);
  return value;
}
inline bool TextboxHintArchive::has_size() const {
  return _internal_has_size();
}
inline const ::TSP::Size& TextboxHintArchive::_internal_size() const {
  const ::TSP::Size* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& TextboxHintArchive::size() const {
  // @@protoc_insertion_point(field_get:TP.TextboxHintArchive.size)
  return _internal_size();
}
inline void TextboxHintArchive::unsafe_arena_set_allocated_size(
    ::TSP::Size* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = size;
  if (size) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.TextboxHintArchive.size)
}
inline ::TSP::Size* TextboxHintArchive::release_size() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Size* temp = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Size* TextboxHintArchive::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:TP.TextboxHintArchive.size)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Size* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::TSP::Size* TextboxHintArchive::_internal_mutable_size() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArenaForAllocation());
    _impl_.size_ = p;
  }
  return _impl_.size_;
}
inline ::TSP::Size* TextboxHintArchive::mutable_size() {
  ::TSP::Size* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:TP.TextboxHintArchive.size)
  return _msg;
}
inline void TextboxHintArchive::set_allocated_size(::TSP::Size* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size));
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.size_ = size;
  // @@protoc_insertion_point(field_set_allocated:TP.TextboxHintArchive.size)
}

// -------------------------------------------------------------------

// TopicNumberEntryArchive

// required .TSP.Reference list_style = 1;
inline bool TopicNumberEntryArchive::_internal_has_list_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.list_style_ != nullptr);
  return value;
}
inline bool TopicNumberEntryArchive::has_list_style() const {
  return _internal_has_list_style();
}
inline const ::TSP::Reference& TopicNumberEntryArchive::_internal_list_style() const {
  const ::TSP::Reference* p = _impl_.list_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TopicNumberEntryArchive::list_style() const {
  // @@protoc_insertion_point(field_get:TP.TopicNumberEntryArchive.list_style)
  return _internal_list_style();
}
inline void TopicNumberEntryArchive::unsafe_arena_set_allocated_list_style(
    ::TSP::Reference* list_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.list_style_);
  }
  _impl_.list_style_ = list_style;
  if (list_style) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.TopicNumberEntryArchive.list_style)
}
inline ::TSP::Reference* TopicNumberEntryArchive::release_list_style() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.list_style_;
  _impl_.list_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* TopicNumberEntryArchive::unsafe_arena_release_list_style() {
  // @@protoc_insertion_point(field_release:TP.TopicNumberEntryArchive.list_style)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.list_style_;
  _impl_.list_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TopicNumberEntryArchive::_internal_mutable_list_style() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.list_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.list_style_ = p;
  }
  return _impl_.list_style_;
}
inline ::TSP::Reference* TopicNumberEntryArchive::mutable_list_style() {
  ::TSP::Reference* _msg = _internal_mutable_list_style();
  // @@protoc_insertion_point(field_mutable:TP.TopicNumberEntryArchive.list_style)
  return _msg;
}
inline void TopicNumberEntryArchive::set_allocated_list_style(::TSP::Reference* list_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.list_style_);
  }
  if (list_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(list_style));
    if (message_arena != submessage_arena) {
      list_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.list_style_ = list_style;
  // @@protoc_insertion_point(field_set_allocated:TP.TopicNumberEntryArchive.list_style)
}

// repeated uint32 topic_number = 2;
inline int TopicNumberEntryArchive::_internal_topic_number_size() const {
  return _impl_.topic_number_.size();
}
inline int TopicNumberEntryArchive::topic_number_size() const {
  return _internal_topic_number_size();
}
inline void TopicNumberEntryArchive::clear_topic_number() {
  _impl_.topic_number_.Clear();
}
inline uint32_t TopicNumberEntryArchive::_internal_topic_number(int index) const {
  return _impl_.topic_number_.Get(index);
}
inline uint32_t TopicNumberEntryArchive::topic_number(int index) const {
  // @@protoc_insertion_point(field_get:TP.TopicNumberEntryArchive.topic_number)
  return _internal_topic_number(index);
}
inline void TopicNumberEntryArchive::set_topic_number(int index, uint32_t value) {
  _impl_.topic_number_.Set(index, value);
  // @@protoc_insertion_point(field_set:TP.TopicNumberEntryArchive.topic_number)
}
inline void TopicNumberEntryArchive::_internal_add_topic_number(uint32_t value) {
  _impl_.topic_number_.Add(value);
}
inline void TopicNumberEntryArchive::add_topic_number(uint32_t value) {
  _internal_add_topic_number(value);
  // @@protoc_insertion_point(field_add:TP.TopicNumberEntryArchive.topic_number)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TopicNumberEntryArchive::_internal_topic_number() const {
  return _impl_.topic_number_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TopicNumberEntryArchive::topic_number() const {
  // @@protoc_insertion_point(field_list:TP.TopicNumberEntryArchive.topic_number)
  return _internal_topic_number();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TopicNumberEntryArchive::_internal_mutable_topic_number() {
  return &_impl_.topic_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TopicNumberEntryArchive::mutable_topic_number() {
  // @@protoc_insertion_point(field_mutable_list:TP.TopicNumberEntryArchive.topic_number)
  return _internal_mutable_topic_number();
}

// repeated uint32 character_index = 3;
inline int TopicNumberEntryArchive::_internal_character_index_size() const {
  return _impl_.character_index_.size();
}
inline int TopicNumberEntryArchive::character_index_size() const {
  return _internal_character_index_size();
}
inline void TopicNumberEntryArchive::clear_character_index() {
  _impl_.character_index_.Clear();
}
inline uint32_t TopicNumberEntryArchive::_internal_character_index(int index) const {
  return _impl_.character_index_.Get(index);
}
inline uint32_t TopicNumberEntryArchive::character_index(int index) const {
  // @@protoc_insertion_point(field_get:TP.TopicNumberEntryArchive.character_index)
  return _internal_character_index(index);
}
inline void TopicNumberEntryArchive::set_character_index(int index, uint32_t value) {
  _impl_.character_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:TP.TopicNumberEntryArchive.character_index)
}
inline void TopicNumberEntryArchive::_internal_add_character_index(uint32_t value) {
  _impl_.character_index_.Add(value);
}
inline void TopicNumberEntryArchive::add_character_index(uint32_t value) {
  _internal_add_character_index(value);
  // @@protoc_insertion_point(field_add:TP.TopicNumberEntryArchive.character_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TopicNumberEntryArchive::_internal_character_index() const {
  return _impl_.character_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TopicNumberEntryArchive::character_index() const {
  // @@protoc_insertion_point(field_list:TP.TopicNumberEntryArchive.character_index)
  return _internal_character_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TopicNumberEntryArchive::_internal_mutable_character_index() {
  return &_impl_.character_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TopicNumberEntryArchive::mutable_character_index() {
  // @@protoc_insertion_point(field_mutable_list:TP.TopicNumberEntryArchive.character_index)
  return _internal_mutable_character_index();
}

// -------------------------------------------------------------------

// TopicNumberHintsArchive

// optional uint32 charIndex = 1;
inline bool TopicNumberHintsArchive::_internal_has_charindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TopicNumberHintsArchive::has_charindex() const {
  return _internal_has_charindex();
}
inline void TopicNumberHintsArchive::clear_charindex() {
  _impl_.charindex_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t TopicNumberHintsArchive::_internal_charindex() const {
  return _impl_.charindex_;
}
inline uint32_t TopicNumberHintsArchive::charindex() const {
  // @@protoc_insertion_point(field_get:TP.TopicNumberHintsArchive.charIndex)
  return _internal_charindex();
}
inline void TopicNumberHintsArchive::_internal_set_charindex(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.charindex_ = value;
}
inline void TopicNumberHintsArchive::set_charindex(uint32_t value) {
  _internal_set_charindex(value);
  // @@protoc_insertion_point(field_set:TP.TopicNumberHintsArchive.charIndex)
}

// repeated .TP.TopicNumberEntryArchive topic_numbers_map = 2;
inline int TopicNumberHintsArchive::_internal_topic_numbers_map_size() const {
  return _impl_.topic_numbers_map_.size();
}
inline int TopicNumberHintsArchive::topic_numbers_map_size() const {
  return _internal_topic_numbers_map_size();
}
inline void TopicNumberHintsArchive::clear_topic_numbers_map() {
  _impl_.topic_numbers_map_.Clear();
}
inline ::TP::TopicNumberEntryArchive* TopicNumberHintsArchive::mutable_topic_numbers_map(int index) {
  // @@protoc_insertion_point(field_mutable:TP.TopicNumberHintsArchive.topic_numbers_map)
  return _impl_.topic_numbers_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::TopicNumberEntryArchive >*
TopicNumberHintsArchive::mutable_topic_numbers_map() {
  // @@protoc_insertion_point(field_mutable_list:TP.TopicNumberHintsArchive.topic_numbers_map)
  return &_impl_.topic_numbers_map_;
}
inline const ::TP::TopicNumberEntryArchive& TopicNumberHintsArchive::_internal_topic_numbers_map(int index) const {
  return _impl_.topic_numbers_map_.Get(index);
}
inline const ::TP::TopicNumberEntryArchive& TopicNumberHintsArchive::topic_numbers_map(int index) const {
  // @@protoc_insertion_point(field_get:TP.TopicNumberHintsArchive.topic_numbers_map)
  return _internal_topic_numbers_map(index);
}
inline ::TP::TopicNumberEntryArchive* TopicNumberHintsArchive::_internal_add_topic_numbers_map() {
  return _impl_.topic_numbers_map_.Add();
}
inline ::TP::TopicNumberEntryArchive* TopicNumberHintsArchive::add_topic_numbers_map() {
  ::TP::TopicNumberEntryArchive* _add = _internal_add_topic_numbers_map();
  // @@protoc_insertion_point(field_add:TP.TopicNumberHintsArchive.topic_numbers_map)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::TopicNumberEntryArchive >&
TopicNumberHintsArchive::topic_numbers_map() const {
  // @@protoc_insertion_point(field_list:TP.TopicNumberHintsArchive.topic_numbers_map)
  return _impl_.topic_numbers_map_;
}

// optional uint32 valid_through_char_index = 3;
inline bool TopicNumberHintsArchive::_internal_has_valid_through_char_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TopicNumberHintsArchive::has_valid_through_char_index() const {
  return _internal_has_valid_through_char_index();
}
inline void TopicNumberHintsArchive::clear_valid_through_char_index() {
  _impl_.valid_through_char_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t TopicNumberHintsArchive::_internal_valid_through_char_index() const {
  return _impl_.valid_through_char_index_;
}
inline uint32_t TopicNumberHintsArchive::valid_through_char_index() const {
  // @@protoc_insertion_point(field_get:TP.TopicNumberHintsArchive.valid_through_char_index)
  return _internal_valid_through_char_index();
}
inline void TopicNumberHintsArchive::_internal_set_valid_through_char_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.valid_through_char_index_ = value;
}
inline void TopicNumberHintsArchive::set_valid_through_char_index(uint32_t value) {
  _internal_set_valid_through_char_index(value);
  // @@protoc_insertion_point(field_set:TP.TopicNumberHintsArchive.valid_through_char_index)
}

// -------------------------------------------------------------------

// LayoutStateArchive

// optional uint32 section_index = 1;
inline bool LayoutStateArchive::_internal_has_section_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LayoutStateArchive::has_section_index() const {
  return _internal_has_section_index();
}
inline void LayoutStateArchive::clear_section_index() {
  _impl_.section_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t LayoutStateArchive::_internal_section_index() const {
  return _impl_.section_index_;
}
inline uint32_t LayoutStateArchive::section_index() const {
  // @@protoc_insertion_point(field_get:TP.LayoutStateArchive.section_index)
  return _internal_section_index();
}
inline void LayoutStateArchive::_internal_set_section_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.section_index_ = value;
}
inline void LayoutStateArchive::set_section_index(uint32_t value) {
  _internal_set_section_index(value);
  // @@protoc_insertion_point(field_set:TP.LayoutStateArchive.section_index)
}

// optional uint32 section_page_index = 2;
inline bool LayoutStateArchive::_internal_has_section_page_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LayoutStateArchive::has_section_page_index() const {
  return _internal_has_section_page_index();
}
inline void LayoutStateArchive::clear_section_page_index() {
  _impl_.section_page_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t LayoutStateArchive::_internal_section_page_index() const {
  return _impl_.section_page_index_;
}
inline uint32_t LayoutStateArchive::section_page_index() const {
  // @@protoc_insertion_point(field_get:TP.LayoutStateArchive.section_page_index)
  return _internal_section_page_index();
}
inline void LayoutStateArchive::_internal_set_section_page_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.section_page_index_ = value;
}
inline void LayoutStateArchive::set_section_page_index(uint32_t value) {
  _internal_set_section_page_index(value);
  // @@protoc_insertion_point(field_set:TP.LayoutStateArchive.section_page_index)
}

// optional uint32 document_page_index = 3;
inline bool LayoutStateArchive::_internal_has_document_page_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LayoutStateArchive::has_document_page_index() const {
  return _internal_has_document_page_index();
}
inline void LayoutStateArchive::clear_document_page_index() {
  _impl_.document_page_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t LayoutStateArchive::_internal_document_page_index() const {
  return _impl_.document_page_index_;
}
inline uint32_t LayoutStateArchive::document_page_index() const {
  // @@protoc_insertion_point(field_get:TP.LayoutStateArchive.document_page_index)
  return _internal_document_page_index();
}
inline void LayoutStateArchive::_internal_set_document_page_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.document_page_index_ = value;
}
inline void LayoutStateArchive::set_document_page_index(uint32_t value) {
  _internal_set_document_page_index(value);
  // @@protoc_insertion_point(field_set:TP.LayoutStateArchive.document_page_index)
}

// optional uint32 last_page_count = 4;
inline bool LayoutStateArchive::_internal_has_last_page_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LayoutStateArchive::has_last_page_count() const {
  return _internal_has_last_page_count();
}
inline void LayoutStateArchive::clear_last_page_count() {
  _impl_.last_page_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t LayoutStateArchive::_internal_last_page_count() const {
  return _impl_.last_page_count_;
}
inline uint32_t LayoutStateArchive::last_page_count() const {
  // @@protoc_insertion_point(field_get:TP.LayoutStateArchive.last_page_count)
  return _internal_last_page_count();
}
inline void LayoutStateArchive::_internal_set_last_page_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.last_page_count_ = value;
}
inline void LayoutStateArchive::set_last_page_count(uint32_t value) {
  _internal_set_last_page_count(value);
  // @@protoc_insertion_point(field_set:TP.LayoutStateArchive.last_page_count)
}

// repeated .TP.SectionHintArchive section_hints = 5;
inline int LayoutStateArchive::_internal_section_hints_size() const {
  return _impl_.section_hints_.size();
}
inline int LayoutStateArchive::section_hints_size() const {
  return _internal_section_hints_size();
}
inline void LayoutStateArchive::clear_section_hints() {
  _impl_.section_hints_.Clear();
}
inline ::TP::SectionHintArchive* LayoutStateArchive::mutable_section_hints(int index) {
  // @@protoc_insertion_point(field_mutable:TP.LayoutStateArchive.section_hints)
  return _impl_.section_hints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::SectionHintArchive >*
LayoutStateArchive::mutable_section_hints() {
  // @@protoc_insertion_point(field_mutable_list:TP.LayoutStateArchive.section_hints)
  return &_impl_.section_hints_;
}
inline const ::TP::SectionHintArchive& LayoutStateArchive::_internal_section_hints(int index) const {
  return _impl_.section_hints_.Get(index);
}
inline const ::TP::SectionHintArchive& LayoutStateArchive::section_hints(int index) const {
  // @@protoc_insertion_point(field_get:TP.LayoutStateArchive.section_hints)
  return _internal_section_hints(index);
}
inline ::TP::SectionHintArchive* LayoutStateArchive::_internal_add_section_hints() {
  return _impl_.section_hints_.Add();
}
inline ::TP::SectionHintArchive* LayoutStateArchive::add_section_hints() {
  ::TP::SectionHintArchive* _add = _internal_add_section_hints();
  // @@protoc_insertion_point(field_add:TP.LayoutStateArchive.section_hints)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::SectionHintArchive >&
LayoutStateArchive::section_hints() const {
  // @@protoc_insertion_point(field_list:TP.LayoutStateArchive.section_hints)
  return _impl_.section_hints_;
}

// -------------------------------------------------------------------

// CanvasSelectionArchive

// required .TSWP.SelectionType type = 1;
inline bool CanvasSelectionArchive::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CanvasSelectionArchive::has_type() const {
  return _internal_has_type();
}
inline void CanvasSelectionArchive::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::TSWP::SelectionType CanvasSelectionArchive::_internal_type() const {
  return static_cast< ::TSWP::SelectionType >(_impl_.type_);
}
inline ::TSWP::SelectionType CanvasSelectionArchive::type() const {
  // @@protoc_insertion_point(field_get:TP.CanvasSelectionArchive.type)
  return _internal_type();
}
inline void CanvasSelectionArchive::_internal_set_type(::TSWP::SelectionType value) {
  assert(::TSWP::SelectionType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.type_ = value;
}
inline void CanvasSelectionArchive::set_type(::TSWP::SelectionType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TP.CanvasSelectionArchive.type)
}

// required .TSP.Range range = 2;
inline bool CanvasSelectionArchive::_internal_has_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.range_ != nullptr);
  return value;
}
inline bool CanvasSelectionArchive::has_range() const {
  return _internal_has_range();
}
inline const ::TSP::Range& CanvasSelectionArchive::_internal_range() const {
  const ::TSP::Range* p = _impl_.range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Range&>(
      ::TSP::_Range_default_instance_);
}
inline const ::TSP::Range& CanvasSelectionArchive::range() const {
  // @@protoc_insertion_point(field_get:TP.CanvasSelectionArchive.range)
  return _internal_range();
}
inline void CanvasSelectionArchive::unsafe_arena_set_allocated_range(
    ::TSP::Range* range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.range_);
  }
  _impl_.range_ = range;
  if (range) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.CanvasSelectionArchive.range)
}
inline ::TSP::Range* CanvasSelectionArchive::release_range() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Range* temp = _impl_.range_;
  _impl_.range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Range* CanvasSelectionArchive::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_release:TP.CanvasSelectionArchive.range)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Range* temp = _impl_.range_;
  _impl_.range_ = nullptr;
  return temp;
}
inline ::TSP::Range* CanvasSelectionArchive::_internal_mutable_range() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Range>(GetArenaForAllocation());
    _impl_.range_ = p;
  }
  return _impl_.range_;
}
inline ::TSP::Range* CanvasSelectionArchive::mutable_range() {
  ::TSP::Range* _msg = _internal_mutable_range();
  // @@protoc_insertion_point(field_mutable:TP.CanvasSelectionArchive.range)
  return _msg;
}
inline void CanvasSelectionArchive::set_allocated_range(::TSP::Range* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.range_);
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range));
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.range_ = range;
  // @@protoc_insertion_point(field_set_allocated:TP.CanvasSelectionArchive.range)
}

// required .TSWP.StyleInsertionBehavior style_insertion_behavior = 3;
inline bool CanvasSelectionArchive::_internal_has_style_insertion_behavior() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CanvasSelectionArchive::has_style_insertion_behavior() const {
  return _internal_has_style_insertion_behavior();
}
inline void CanvasSelectionArchive::clear_style_insertion_behavior() {
  _impl_.style_insertion_behavior_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::TSWP::StyleInsertionBehavior CanvasSelectionArchive::_internal_style_insertion_behavior() const {
  return static_cast< ::TSWP::StyleInsertionBehavior >(_impl_.style_insertion_behavior_);
}
inline ::TSWP::StyleInsertionBehavior CanvasSelectionArchive::style_insertion_behavior() const {
  // @@protoc_insertion_point(field_get:TP.CanvasSelectionArchive.style_insertion_behavior)
  return _internal_style_insertion_behavior();
}
inline void CanvasSelectionArchive::_internal_set_style_insertion_behavior(::TSWP::StyleInsertionBehavior value) {
  assert(::TSWP::StyleInsertionBehavior_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.style_insertion_behavior_ = value;
}
inline void CanvasSelectionArchive::set_style_insertion_behavior(::TSWP::StyleInsertionBehavior value) {
  _internal_set_style_insertion_behavior(value);
  // @@protoc_insertion_point(field_set:TP.CanvasSelectionArchive.style_insertion_behavior)
}

// required .TSWP.CaretAffinity caret_affinity = 4;
inline bool CanvasSelectionArchive::_internal_has_caret_affinity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CanvasSelectionArchive::has_caret_affinity() const {
  return _internal_has_caret_affinity();
}
inline void CanvasSelectionArchive::clear_caret_affinity() {
  _impl_.caret_affinity_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::TSWP::CaretAffinity CanvasSelectionArchive::_internal_caret_affinity() const {
  return static_cast< ::TSWP::CaretAffinity >(_impl_.caret_affinity_);
}
inline ::TSWP::CaretAffinity CanvasSelectionArchive::caret_affinity() const {
  // @@protoc_insertion_point(field_get:TP.CanvasSelectionArchive.caret_affinity)
  return _internal_caret_affinity();
}
inline void CanvasSelectionArchive::_internal_set_caret_affinity(::TSWP::CaretAffinity value) {
  assert(::TSWP::CaretAffinity_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.caret_affinity_ = value;
}
inline void CanvasSelectionArchive::set_caret_affinity(::TSWP::CaretAffinity value) {
  _internal_set_caret_affinity(value);
  // @@protoc_insertion_point(field_set:TP.CanvasSelectionArchive.caret_affinity)
}

// repeated .TSP.Reference infos = 5;
inline int CanvasSelectionArchive::_internal_infos_size() const {
  return _impl_.infos_.size();
}
inline int CanvasSelectionArchive::infos_size() const {
  return _internal_infos_size();
}
inline ::TSP::Reference* CanvasSelectionArchive::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:TP.CanvasSelectionArchive.infos)
  return _impl_.infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CanvasSelectionArchive::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:TP.CanvasSelectionArchive.infos)
  return &_impl_.infos_;
}
inline const ::TSP::Reference& CanvasSelectionArchive::_internal_infos(int index) const {
  return _impl_.infos_.Get(index);
}
inline const ::TSP::Reference& CanvasSelectionArchive::infos(int index) const {
  // @@protoc_insertion_point(field_get:TP.CanvasSelectionArchive.infos)
  return _internal_infos(index);
}
inline ::TSP::Reference* CanvasSelectionArchive::_internal_add_infos() {
  return _impl_.infos_.Add();
}
inline ::TSP::Reference* CanvasSelectionArchive::add_infos() {
  ::TSP::Reference* _add = _internal_add_infos();
  // @@protoc_insertion_point(field_add:TP.CanvasSelectionArchive.infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CanvasSelectionArchive::infos() const {
  // @@protoc_insertion_point(field_list:TP.CanvasSelectionArchive.infos)
  return _impl_.infos_;
}

// repeated .TSP.Reference excluded_infos = 6;
inline int CanvasSelectionArchive::_internal_excluded_infos_size() const {
  return _impl_.excluded_infos_.size();
}
inline int CanvasSelectionArchive::excluded_infos_size() const {
  return _internal_excluded_infos_size();
}
inline ::TSP::Reference* CanvasSelectionArchive::mutable_excluded_infos(int index) {
  // @@protoc_insertion_point(field_mutable:TP.CanvasSelectionArchive.excluded_infos)
  return _impl_.excluded_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CanvasSelectionArchive::mutable_excluded_infos() {
  // @@protoc_insertion_point(field_mutable_list:TP.CanvasSelectionArchive.excluded_infos)
  return &_impl_.excluded_infos_;
}
inline const ::TSP::Reference& CanvasSelectionArchive::_internal_excluded_infos(int index) const {
  return _impl_.excluded_infos_.Get(index);
}
inline const ::TSP::Reference& CanvasSelectionArchive::excluded_infos(int index) const {
  // @@protoc_insertion_point(field_get:TP.CanvasSelectionArchive.excluded_infos)
  return _internal_excluded_infos(index);
}
inline ::TSP::Reference* CanvasSelectionArchive::_internal_add_excluded_infos() {
  return _impl_.excluded_infos_.Add();
}
inline ::TSP::Reference* CanvasSelectionArchive::add_excluded_infos() {
  ::TSP::Reference* _add = _internal_add_excluded_infos();
  // @@protoc_insertion_point(field_add:TP.CanvasSelectionArchive.excluded_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CanvasSelectionArchive::excluded_infos() const {
  // @@protoc_insertion_point(field_list:TP.CanvasSelectionArchive.excluded_infos)
  return _impl_.excluded_infos_;
}

// repeated .TSP.Reference additional_infos = 7;
inline int CanvasSelectionArchive::_internal_additional_infos_size() const {
  return _impl_.additional_infos_.size();
}
inline int CanvasSelectionArchive::additional_infos_size() const {
  return _internal_additional_infos_size();
}
inline ::TSP::Reference* CanvasSelectionArchive::mutable_additional_infos(int index) {
  // @@protoc_insertion_point(field_mutable:TP.CanvasSelectionArchive.additional_infos)
  return _impl_.additional_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CanvasSelectionArchive::mutable_additional_infos() {
  // @@protoc_insertion_point(field_mutable_list:TP.CanvasSelectionArchive.additional_infos)
  return &_impl_.additional_infos_;
}
inline const ::TSP::Reference& CanvasSelectionArchive::_internal_additional_infos(int index) const {
  return _impl_.additional_infos_.Get(index);
}
inline const ::TSP::Reference& CanvasSelectionArchive::additional_infos(int index) const {
  // @@protoc_insertion_point(field_get:TP.CanvasSelectionArchive.additional_infos)
  return _internal_additional_infos(index);
}
inline ::TSP::Reference* CanvasSelectionArchive::_internal_add_additional_infos() {
  return _impl_.additional_infos_.Add();
}
inline ::TSP::Reference* CanvasSelectionArchive::add_additional_infos() {
  ::TSP::Reference* _add = _internal_add_additional_infos();
  // @@protoc_insertion_point(field_add:TP.CanvasSelectionArchive.additional_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CanvasSelectionArchive::additional_infos() const {
  // @@protoc_insertion_point(field_list:TP.CanvasSelectionArchive.additional_infos)
  return _impl_.additional_infos_;
}

// optional .TSP.Reference container = 8;
inline bool CanvasSelectionArchive::_internal_has_container() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.container_ != nullptr);
  return value;
}
inline bool CanvasSelectionArchive::has_container() const {
  return _internal_has_container();
}
inline const ::TSP::Reference& CanvasSelectionArchive::_internal_container() const {
  const ::TSP::Reference* p = _impl_.container_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CanvasSelectionArchive::container() const {
  // @@protoc_insertion_point(field_get:TP.CanvasSelectionArchive.container)
  return _internal_container();
}
inline void CanvasSelectionArchive::unsafe_arena_set_allocated_container(
    ::TSP::Reference* container) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.container_);
  }
  _impl_.container_ = container;
  if (container) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.CanvasSelectionArchive.container)
}
inline ::TSP::Reference* CanvasSelectionArchive::release_container() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.container_;
  _impl_.container_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CanvasSelectionArchive::unsafe_arena_release_container() {
  // @@protoc_insertion_point(field_release:TP.CanvasSelectionArchive.container)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.container_;
  _impl_.container_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CanvasSelectionArchive::_internal_mutable_container() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.container_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.container_ = p;
  }
  return _impl_.container_;
}
inline ::TSP::Reference* CanvasSelectionArchive::mutable_container() {
  ::TSP::Reference* _msg = _internal_mutable_container();
  // @@protoc_insertion_point(field_mutable:TP.CanvasSelectionArchive.container)
  return _msg;
}
inline void CanvasSelectionArchive::set_allocated_container(::TSP::Reference* container) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.container_);
  }
  if (container) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(container));
    if (message_arena != submessage_arena) {
      container = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, container, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.container_ = container;
  // @@protoc_insertion_point(field_set_allocated:TP.CanvasSelectionArchive.container)
}

// -------------------------------------------------------------------

// ViewStateArchive

// optional float OBSOLETE_view_scale = 1;
inline bool ViewStateArchive::_internal_has_obsolete_view_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ViewStateArchive::has_obsolete_view_scale() const {
  return _internal_has_obsolete_view_scale();
}
inline void ViewStateArchive::clear_obsolete_view_scale() {
  _impl_.obsolete_view_scale_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float ViewStateArchive::_internal_obsolete_view_scale() const {
  return _impl_.obsolete_view_scale_;
}
inline float ViewStateArchive::obsolete_view_scale() const {
  // @@protoc_insertion_point(field_get:TP.ViewStateArchive.OBSOLETE_view_scale)
  return _internal_obsolete_view_scale();
}
inline void ViewStateArchive::_internal_set_obsolete_view_scale(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.obsolete_view_scale_ = value;
}
inline void ViewStateArchive::set_obsolete_view_scale(float value) {
  _internal_set_obsolete_view_scale(value);
  // @@protoc_insertion_point(field_set:TP.ViewStateArchive.OBSOLETE_view_scale)
}

// optional .TSP.Point visible_rect_origin = 2;
inline bool ViewStateArchive::_internal_has_visible_rect_origin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.visible_rect_origin_ != nullptr);
  return value;
}
inline bool ViewStateArchive::has_visible_rect_origin() const {
  return _internal_has_visible_rect_origin();
}
inline const ::TSP::Point& ViewStateArchive::_internal_visible_rect_origin() const {
  const ::TSP::Point* p = _impl_.visible_rect_origin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& ViewStateArchive::visible_rect_origin() const {
  // @@protoc_insertion_point(field_get:TP.ViewStateArchive.visible_rect_origin)
  return _internal_visible_rect_origin();
}
inline void ViewStateArchive::unsafe_arena_set_allocated_visible_rect_origin(
    ::TSP::Point* visible_rect_origin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.visible_rect_origin_);
  }
  _impl_.visible_rect_origin_ = visible_rect_origin;
  if (visible_rect_origin) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.ViewStateArchive.visible_rect_origin)
}
inline ::TSP::Point* ViewStateArchive::release_visible_rect_origin() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Point* temp = _impl_.visible_rect_origin_;
  _impl_.visible_rect_origin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Point* ViewStateArchive::unsafe_arena_release_visible_rect_origin() {
  // @@protoc_insertion_point(field_release:TP.ViewStateArchive.visible_rect_origin)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Point* temp = _impl_.visible_rect_origin_;
  _impl_.visible_rect_origin_ = nullptr;
  return temp;
}
inline ::TSP::Point* ViewStateArchive::_internal_mutable_visible_rect_origin() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.visible_rect_origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArenaForAllocation());
    _impl_.visible_rect_origin_ = p;
  }
  return _impl_.visible_rect_origin_;
}
inline ::TSP::Point* ViewStateArchive::mutable_visible_rect_origin() {
  ::TSP::Point* _msg = _internal_mutable_visible_rect_origin();
  // @@protoc_insertion_point(field_mutable:TP.ViewStateArchive.visible_rect_origin)
  return _msg;
}
inline void ViewStateArchive::set_allocated_visible_rect_origin(::TSP::Point* visible_rect_origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.visible_rect_origin_);
  }
  if (visible_rect_origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(visible_rect_origin));
    if (message_arena != submessage_arena) {
      visible_rect_origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visible_rect_origin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.visible_rect_origin_ = visible_rect_origin;
  // @@protoc_insertion_point(field_set_allocated:TP.ViewStateArchive.visible_rect_origin)
}

// optional bool OBSOLETE_landscape = 3;
inline bool ViewStateArchive::_internal_has_obsolete_landscape() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ViewStateArchive::has_obsolete_landscape() const {
  return _internal_has_obsolete_landscape();
}
inline void ViewStateArchive::clear_obsolete_landscape() {
  _impl_.obsolete_landscape_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool ViewStateArchive::_internal_obsolete_landscape() const {
  return _impl_.obsolete_landscape_;
}
inline bool ViewStateArchive::obsolete_landscape() const {
  // @@protoc_insertion_point(field_get:TP.ViewStateArchive.OBSOLETE_landscape)
  return _internal_obsolete_landscape();
}
inline void ViewStateArchive::_internal_set_obsolete_landscape(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.obsolete_landscape_ = value;
}
inline void ViewStateArchive::set_obsolete_landscape(bool value) {
  _internal_set_obsolete_landscape(value);
  // @@protoc_insertion_point(field_set:TP.ViewStateArchive.OBSOLETE_landscape)
}

// optional .TSP.Reference selection = 4;
inline bool ViewStateArchive::_internal_has_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.selection_ != nullptr);
  return value;
}
inline bool ViewStateArchive::has_selection() const {
  return _internal_has_selection();
}
inline const ::TSP::Reference& ViewStateArchive::_internal_selection() const {
  const ::TSP::Reference* p = _impl_.selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ViewStateArchive::selection() const {
  // @@protoc_insertion_point(field_get:TP.ViewStateArchive.selection)
  return _internal_selection();
}
inline void ViewStateArchive::unsafe_arena_set_allocated_selection(
    ::TSP::Reference* selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  _impl_.selection_ = selection;
  if (selection) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.ViewStateArchive.selection)
}
inline ::TSP::Reference* ViewStateArchive::release_selection() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ViewStateArchive::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:TP.ViewStateArchive.selection)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ViewStateArchive::_internal_mutable_selection() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.selection_ = p;
  }
  return _impl_.selection_;
}
inline ::TSP::Reference* ViewStateArchive::mutable_selection() {
  ::TSP::Reference* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:TP.ViewStateArchive.selection)
  return _msg;
}
inline void ViewStateArchive::set_allocated_selection(::TSP::Reference* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection));
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:TP.ViewStateArchive.selection)
}

// optional .TSP.Reference selection_model = 5;
inline bool ViewStateArchive::_internal_has_selection_model() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.selection_model_ != nullptr);
  return value;
}
inline bool ViewStateArchive::has_selection_model() const {
  return _internal_has_selection_model();
}
inline const ::TSP::Reference& ViewStateArchive::_internal_selection_model() const {
  const ::TSP::Reference* p = _impl_.selection_model_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ViewStateArchive::selection_model() const {
  // @@protoc_insertion_point(field_get:TP.ViewStateArchive.selection_model)
  return _internal_selection_model();
}
inline void ViewStateArchive::unsafe_arena_set_allocated_selection_model(
    ::TSP::Reference* selection_model) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_model_);
  }
  _impl_.selection_model_ = selection_model;
  if (selection_model) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.ViewStateArchive.selection_model)
}
inline ::TSP::Reference* ViewStateArchive::release_selection_model() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.selection_model_;
  _impl_.selection_model_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ViewStateArchive::unsafe_arena_release_selection_model() {
  // @@protoc_insertion_point(field_release:TP.ViewStateArchive.selection_model)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.selection_model_;
  _impl_.selection_model_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ViewStateArchive::_internal_mutable_selection_model() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.selection_model_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.selection_model_ = p;
  }
  return _impl_.selection_model_;
}
inline ::TSP::Reference* ViewStateArchive::mutable_selection_model() {
  ::TSP::Reference* _msg = _internal_mutable_selection_model();
  // @@protoc_insertion_point(field_mutable:TP.ViewStateArchive.selection_model)
  return _msg;
}
inline void ViewStateArchive::set_allocated_selection_model(::TSP::Reference* selection_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_model_);
  }
  if (selection_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_model));
    if (message_arena != submessage_arena) {
      selection_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection_model, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.selection_model_ = selection_model;
  // @@protoc_insertion_point(field_set_allocated:TP.ViewStateArchive.selection_model)
}

// optional bool master_drawables_selectable = 6;
inline bool ViewStateArchive::_internal_has_master_drawables_selectable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ViewStateArchive::has_master_drawables_selectable() const {
  return _internal_has_master_drawables_selectable();
}
inline void ViewStateArchive::clear_master_drawables_selectable() {
  _impl_.master_drawables_selectable_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool ViewStateArchive::_internal_master_drawables_selectable() const {
  return _impl_.master_drawables_selectable_;
}
inline bool ViewStateArchive::master_drawables_selectable() const {
  // @@protoc_insertion_point(field_get:TP.ViewStateArchive.master_drawables_selectable)
  return _internal_master_drawables_selectable();
}
inline void ViewStateArchive::_internal_set_master_drawables_selectable(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.master_drawables_selectable_ = value;
}
inline void ViewStateArchive::set_master_drawables_selectable(bool value) {
  _internal_set_master_drawables_selectable(value);
  // @@protoc_insertion_point(field_set:TP.ViewStateArchive.master_drawables_selectable)
}

// optional .TSP.Size visible_rect_size = 7;
inline bool ViewStateArchive::_internal_has_visible_rect_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.visible_rect_size_ != nullptr);
  return value;
}
inline bool ViewStateArchive::has_visible_rect_size() const {
  return _internal_has_visible_rect_size();
}
inline const ::TSP::Size& ViewStateArchive::_internal_visible_rect_size() const {
  const ::TSP::Size* p = _impl_.visible_rect_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& ViewStateArchive::visible_rect_size() const {
  // @@protoc_insertion_point(field_get:TP.ViewStateArchive.visible_rect_size)
  return _internal_visible_rect_size();
}
inline void ViewStateArchive::unsafe_arena_set_allocated_visible_rect_size(
    ::TSP::Size* visible_rect_size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.visible_rect_size_);
  }
  _impl_.visible_rect_size_ = visible_rect_size;
  if (visible_rect_size) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.ViewStateArchive.visible_rect_size)
}
inline ::TSP::Size* ViewStateArchive::release_visible_rect_size() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Size* temp = _impl_.visible_rect_size_;
  _impl_.visible_rect_size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Size* ViewStateArchive::unsafe_arena_release_visible_rect_size() {
  // @@protoc_insertion_point(field_release:TP.ViewStateArchive.visible_rect_size)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Size* temp = _impl_.visible_rect_size_;
  _impl_.visible_rect_size_ = nullptr;
  return temp;
}
inline ::TSP::Size* ViewStateArchive::_internal_mutable_visible_rect_size() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.visible_rect_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArenaForAllocation());
    _impl_.visible_rect_size_ = p;
  }
  return _impl_.visible_rect_size_;
}
inline ::TSP::Size* ViewStateArchive::mutable_visible_rect_size() {
  ::TSP::Size* _msg = _internal_mutable_visible_rect_size();
  // @@protoc_insertion_point(field_mutable:TP.ViewStateArchive.visible_rect_size)
  return _msg;
}
inline void ViewStateArchive::set_allocated_visible_rect_size(::TSP::Size* visible_rect_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.visible_rect_size_);
  }
  if (visible_rect_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(visible_rect_size));
    if (message_arena != submessage_arena) {
      visible_rect_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visible_rect_size, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.visible_rect_size_ = visible_rect_size;
  // @@protoc_insertion_point(field_set_allocated:TP.ViewStateArchive.visible_rect_size)
}

// repeated .TSCH.ChartUIState chart_ui_state = 8;
inline int ViewStateArchive::_internal_chart_ui_state_size() const {
  return _impl_.chart_ui_state_.size();
}
inline int ViewStateArchive::chart_ui_state_size() const {
  return _internal_chart_ui_state_size();
}
inline ::TSCH::ChartUIState* ViewStateArchive::mutable_chart_ui_state(int index) {
  // @@protoc_insertion_point(field_mutable:TP.ViewStateArchive.chart_ui_state)
  return _impl_.chart_ui_state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartUIState >*
ViewStateArchive::mutable_chart_ui_state() {
  // @@protoc_insertion_point(field_mutable_list:TP.ViewStateArchive.chart_ui_state)
  return &_impl_.chart_ui_state_;
}
inline const ::TSCH::ChartUIState& ViewStateArchive::_internal_chart_ui_state(int index) const {
  return _impl_.chart_ui_state_.Get(index);
}
inline const ::TSCH::ChartUIState& ViewStateArchive::chart_ui_state(int index) const {
  // @@protoc_insertion_point(field_get:TP.ViewStateArchive.chart_ui_state)
  return _internal_chart_ui_state(index);
}
inline ::TSCH::ChartUIState* ViewStateArchive::_internal_add_chart_ui_state() {
  return _impl_.chart_ui_state_.Add();
}
inline ::TSCH::ChartUIState* ViewStateArchive::add_chart_ui_state() {
  ::TSCH::ChartUIState* _add = _internal_add_chart_ui_state();
  // @@protoc_insertion_point(field_add:TP.ViewStateArchive.chart_ui_state)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartUIState >&
ViewStateArchive::chart_ui_state() const {
  // @@protoc_insertion_point(field_list:TP.ViewStateArchive.chart_ui_state)
  return _impl_.chart_ui_state_;
}

// optional bool ruler_visible = 9 [default = true];
inline bool ViewStateArchive::_internal_has_ruler_visible() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ViewStateArchive::has_ruler_visible() const {
  return _internal_has_ruler_visible();
}
inline void ViewStateArchive::clear_ruler_visible() {
  _impl_.ruler_visible_ = true;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool ViewStateArchive::_internal_ruler_visible() const {
  return _impl_.ruler_visible_;
}
inline bool ViewStateArchive::ruler_visible() const {
  // @@protoc_insertion_point(field_get:TP.ViewStateArchive.ruler_visible)
  return _internal_ruler_visible();
}
inline void ViewStateArchive::_internal_set_ruler_visible(bool value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.ruler_visible_ = value;
}
inline void ViewStateArchive::set_ruler_visible(bool value) {
  _internal_set_ruler_visible(value);
  // @@protoc_insertion_point(field_set:TP.ViewStateArchive.ruler_visible)
}

// optional bool layout_borders_visible = 10 [default = false];
inline bool ViewStateArchive::_internal_has_layout_borders_visible() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ViewStateArchive::has_layout_borders_visible() const {
  return _internal_has_layout_borders_visible();
}
inline void ViewStateArchive::clear_layout_borders_visible() {
  _impl_.layout_borders_visible_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool ViewStateArchive::_internal_layout_borders_visible() const {
  return _impl_.layout_borders_visible_;
}
inline bool ViewStateArchive::layout_borders_visible() const {
  // @@protoc_insertion_point(field_get:TP.ViewStateArchive.layout_borders_visible)
  return _internal_layout_borders_visible();
}
inline void ViewStateArchive::_internal_set_layout_borders_visible(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.layout_borders_visible_ = value;
}
inline void ViewStateArchive::set_layout_borders_visible(bool value) {
  _internal_set_layout_borders_visible(value);
  // @@protoc_insertion_point(field_set:TP.ViewStateArchive.layout_borders_visible)
}

// optional bool word_count_hud_visible = 11 [default = false];
inline bool ViewStateArchive::_internal_has_word_count_hud_visible() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ViewStateArchive::has_word_count_hud_visible() const {
  return _internal_has_word_count_hud_visible();
}
inline void ViewStateArchive::clear_word_count_hud_visible() {
  _impl_.word_count_hud_visible_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool ViewStateArchive::_internal_word_count_hud_visible() const {
  return _impl_.word_count_hud_visible_;
}
inline bool ViewStateArchive::word_count_hud_visible() const {
  // @@protoc_insertion_point(field_get:TP.ViewStateArchive.word_count_hud_visible)
  return _internal_word_count_hud_visible();
}
inline void ViewStateArchive::_internal_set_word_count_hud_visible(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.word_count_hud_visible_ = value;
}
inline void ViewStateArchive::set_word_count_hud_visible(bool value) {
  _internal_set_word_count_hud_visible(value);
  // @@protoc_insertion_point(field_set:TP.ViewStateArchive.word_count_hud_visible)
}

// optional bool shows_comments = 12 [default = true];
inline bool ViewStateArchive::_internal_has_shows_comments() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ViewStateArchive::has_shows_comments() const {
  return _internal_has_shows_comments();
}
inline void ViewStateArchive::clear_shows_comments() {
  _impl_.shows_comments_ = true;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline bool ViewStateArchive::_internal_shows_comments() const {
  return _impl_.shows_comments_;
}
inline bool ViewStateArchive::shows_comments() const {
  // @@protoc_insertion_point(field_get:TP.ViewStateArchive.shows_comments)
  return _internal_shows_comments();
}
inline void ViewStateArchive::_internal_set_shows_comments(bool value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.shows_comments_ = value;
}
inline void ViewStateArchive::set_shows_comments(bool value) {
  _internal_set_shows_comments(value);
  // @@protoc_insertion_point(field_set:TP.ViewStateArchive.shows_comments)
}

// optional bool shows_page_navigator = 13 [default = false];
inline bool ViewStateArchive::_internal_has_shows_page_navigator() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ViewStateArchive::has_shows_page_navigator() const {
  return _internal_has_shows_page_navigator();
}
inline void ViewStateArchive::clear_shows_page_navigator() {
  _impl_.shows_page_navigator_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool ViewStateArchive::_internal_shows_page_navigator() const {
  return _impl_.shows_page_navigator_;
}
inline bool ViewStateArchive::shows_page_navigator() const {
  // @@protoc_insertion_point(field_get:TP.ViewStateArchive.shows_page_navigator)
  return _internal_shows_page_navigator();
}
inline void ViewStateArchive::_internal_set_shows_page_navigator(bool value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.shows_page_navigator_ = value;
}
inline void ViewStateArchive::set_shows_page_navigator(bool value) {
  _internal_set_shows_page_navigator(value);
  // @@protoc_insertion_point(field_set:TP.ViewStateArchive.shows_page_navigator)
}

// optional .TP.ViewScaleMode view_scale_mode = 14 [default = ViewScaleMode_UserDefined];
inline bool ViewStateArchive::_internal_has_view_scale_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ViewStateArchive::has_view_scale_mode() const {
  return _internal_has_view_scale_mode();
}
inline void ViewStateArchive::clear_view_scale_mode() {
  _impl_.view_scale_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::TP::ViewScaleMode ViewStateArchive::_internal_view_scale_mode() const {
  return static_cast< ::TP::ViewScaleMode >(_impl_.view_scale_mode_);
}
inline ::TP::ViewScaleMode ViewStateArchive::view_scale_mode() const {
  // @@protoc_insertion_point(field_get:TP.ViewStateArchive.view_scale_mode)
  return _internal_view_scale_mode();
}
inline void ViewStateArchive::_internal_set_view_scale_mode(::TP::ViewScaleMode value) {
  assert(::TP::ViewScaleMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.view_scale_mode_ = value;
}
inline void ViewStateArchive::set_view_scale_mode(::TP::ViewScaleMode value) {
  _internal_set_view_scale_mode(value);
  // @@protoc_insertion_point(field_set:TP.ViewStateArchive.view_scale_mode)
}

// optional float view_scale = 15 [default = 1.25];
inline bool ViewStateArchive::_internal_has_view_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ViewStateArchive::has_view_scale() const {
  return _internal_has_view_scale();
}
inline void ViewStateArchive::clear_view_scale() {
  _impl_.view_scale_ = 1.25f;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline float ViewStateArchive::_internal_view_scale() const {
  return _impl_.view_scale_;
}
inline float ViewStateArchive::view_scale() const {
  // @@protoc_insertion_point(field_get:TP.ViewStateArchive.view_scale)
  return _internal_view_scale();
}
inline void ViewStateArchive::_internal_set_view_scale(float value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.view_scale_ = value;
}
inline void ViewStateArchive::set_view_scale(float value) {
  _internal_set_view_scale(value);
  // @@protoc_insertion_point(field_set:TP.ViewStateArchive.view_scale)
}

// optional .TSP.Point window_frame_origin = 16;
inline bool ViewStateArchive::_internal_has_window_frame_origin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.window_frame_origin_ != nullptr);
  return value;
}
inline bool ViewStateArchive::has_window_frame_origin() const {
  return _internal_has_window_frame_origin();
}
inline const ::TSP::Point& ViewStateArchive::_internal_window_frame_origin() const {
  const ::TSP::Point* p = _impl_.window_frame_origin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& ViewStateArchive::window_frame_origin() const {
  // @@protoc_insertion_point(field_get:TP.ViewStateArchive.window_frame_origin)
  return _internal_window_frame_origin();
}
inline void ViewStateArchive::unsafe_arena_set_allocated_window_frame_origin(
    ::TSP::Point* window_frame_origin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.window_frame_origin_);
  }
  _impl_.window_frame_origin_ = window_frame_origin;
  if (window_frame_origin) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.ViewStateArchive.window_frame_origin)
}
inline ::TSP::Point* ViewStateArchive::release_window_frame_origin() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Point* temp = _impl_.window_frame_origin_;
  _impl_.window_frame_origin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Point* ViewStateArchive::unsafe_arena_release_window_frame_origin() {
  // @@protoc_insertion_point(field_release:TP.ViewStateArchive.window_frame_origin)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Point* temp = _impl_.window_frame_origin_;
  _impl_.window_frame_origin_ = nullptr;
  return temp;
}
inline ::TSP::Point* ViewStateArchive::_internal_mutable_window_frame_origin() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.window_frame_origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArenaForAllocation());
    _impl_.window_frame_origin_ = p;
  }
  return _impl_.window_frame_origin_;
}
inline ::TSP::Point* ViewStateArchive::mutable_window_frame_origin() {
  ::TSP::Point* _msg = _internal_mutable_window_frame_origin();
  // @@protoc_insertion_point(field_mutable:TP.ViewStateArchive.window_frame_origin)
  return _msg;
}
inline void ViewStateArchive::set_allocated_window_frame_origin(::TSP::Point* window_frame_origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.window_frame_origin_);
  }
  if (window_frame_origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(window_frame_origin));
    if (message_arena != submessage_arena) {
      window_frame_origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_frame_origin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.window_frame_origin_ = window_frame_origin;
  // @@protoc_insertion_point(field_set_allocated:TP.ViewStateArchive.window_frame_origin)
}

// optional .TSP.Size window_frame_size = 17;
inline bool ViewStateArchive::_internal_has_window_frame_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.window_frame_size_ != nullptr);
  return value;
}
inline bool ViewStateArchive::has_window_frame_size() const {
  return _internal_has_window_frame_size();
}
inline const ::TSP::Size& ViewStateArchive::_internal_window_frame_size() const {
  const ::TSP::Size* p = _impl_.window_frame_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& ViewStateArchive::window_frame_size() const {
  // @@protoc_insertion_point(field_get:TP.ViewStateArchive.window_frame_size)
  return _internal_window_frame_size();
}
inline void ViewStateArchive::unsafe_arena_set_allocated_window_frame_size(
    ::TSP::Size* window_frame_size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.window_frame_size_);
  }
  _impl_.window_frame_size_ = window_frame_size;
  if (window_frame_size) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.ViewStateArchive.window_frame_size)
}
inline ::TSP::Size* ViewStateArchive::release_window_frame_size() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Size* temp = _impl_.window_frame_size_;
  _impl_.window_frame_size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Size* ViewStateArchive::unsafe_arena_release_window_frame_size() {
  // @@protoc_insertion_point(field_release:TP.ViewStateArchive.window_frame_size)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Size* temp = _impl_.window_frame_size_;
  _impl_.window_frame_size_ = nullptr;
  return temp;
}
inline ::TSP::Size* ViewStateArchive::_internal_mutable_window_frame_size() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.window_frame_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArenaForAllocation());
    _impl_.window_frame_size_ = p;
  }
  return _impl_.window_frame_size_;
}
inline ::TSP::Size* ViewStateArchive::mutable_window_frame_size() {
  ::TSP::Size* _msg = _internal_mutable_window_frame_size();
  // @@protoc_insertion_point(field_mutable:TP.ViewStateArchive.window_frame_size)
  return _msg;
}
inline void ViewStateArchive::set_allocated_window_frame_size(::TSP::Size* window_frame_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.window_frame_size_);
  }
  if (window_frame_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(window_frame_size));
    if (message_arena != submessage_arena) {
      window_frame_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_frame_size, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.window_frame_size_ = window_frame_size;
  // @@protoc_insertion_point(field_set_allocated:TP.ViewStateArchive.window_frame_size)
}

// optional string selected_inspector_switch_segment_identifier = 18;
inline bool ViewStateArchive::_internal_has_selected_inspector_switch_segment_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ViewStateArchive::has_selected_inspector_switch_segment_identifier() const {
  return _internal_has_selected_inspector_switch_segment_identifier();
}
inline void ViewStateArchive::clear_selected_inspector_switch_segment_identifier() {
  _impl_.selected_inspector_switch_segment_identifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ViewStateArchive::selected_inspector_switch_segment_identifier() const {
  // @@protoc_insertion_point(field_get:TP.ViewStateArchive.selected_inspector_switch_segment_identifier)
  return _internal_selected_inspector_switch_segment_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ViewStateArchive::set_selected_inspector_switch_segment_identifier(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.selected_inspector_switch_segment_identifier_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TP.ViewStateArchive.selected_inspector_switch_segment_identifier)
}
inline std::string* ViewStateArchive::mutable_selected_inspector_switch_segment_identifier() {
  std::string* _s = _internal_mutable_selected_inspector_switch_segment_identifier();
  // @@protoc_insertion_point(field_mutable:TP.ViewStateArchive.selected_inspector_switch_segment_identifier)
  return _s;
}
inline const std::string& ViewStateArchive::_internal_selected_inspector_switch_segment_identifier() const {
  return _impl_.selected_inspector_switch_segment_identifier_.Get();
}
inline void ViewStateArchive::_internal_set_selected_inspector_switch_segment_identifier(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.selected_inspector_switch_segment_identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* ViewStateArchive::_internal_mutable_selected_inspector_switch_segment_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.selected_inspector_switch_segment_identifier_.Mutable(GetArenaForAllocation());
}
inline std::string* ViewStateArchive::release_selected_inspector_switch_segment_identifier() {
  // @@protoc_insertion_point(field_release:TP.ViewStateArchive.selected_inspector_switch_segment_identifier)
  if (!_internal_has_selected_inspector_switch_segment_identifier()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.selected_inspector_switch_segment_identifier_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.selected_inspector_switch_segment_identifier_.IsDefault()) {
    _impl_.selected_inspector_switch_segment_identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ViewStateArchive::set_allocated_selected_inspector_switch_segment_identifier(std::string* selected_inspector_switch_segment_identifier) {
  if (selected_inspector_switch_segment_identifier != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.selected_inspector_switch_segment_identifier_.SetAllocated(selected_inspector_switch_segment_identifier, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.selected_inspector_switch_segment_identifier_.IsDefault()) {
    _impl_.selected_inspector_switch_segment_identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TP.ViewStateArchive.selected_inspector_switch_segment_identifier)
}

// optional bool inspector_hidden = 19;
inline bool ViewStateArchive::_internal_has_inspector_hidden() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ViewStateArchive::has_inspector_hidden() const {
  return _internal_has_inspector_hidden();
}
inline void ViewStateArchive::clear_inspector_hidden() {
  _impl_.inspector_hidden_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool ViewStateArchive::_internal_inspector_hidden() const {
  return _impl_.inspector_hidden_;
}
inline bool ViewStateArchive::inspector_hidden() const {
  // @@protoc_insertion_point(field_get:TP.ViewStateArchive.inspector_hidden)
  return _internal_inspector_hidden();
}
inline void ViewStateArchive::_internal_set_inspector_hidden(bool value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.inspector_hidden_ = value;
}
inline void ViewStateArchive::set_inspector_hidden(bool value) {
  _internal_set_inspector_hidden(value);
  // @@protoc_insertion_point(field_set:TP.ViewStateArchive.inspector_hidden)
}

// -------------------------------------------------------------------

// UIStateArchive

// optional .TSP.Reference layout_state = 1;
inline bool UIStateArchive::_internal_has_layout_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.layout_state_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_layout_state() const {
  return _internal_has_layout_state();
}
inline const ::TSP::Reference& UIStateArchive::_internal_layout_state() const {
  const ::TSP::Reference* p = _impl_.layout_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UIStateArchive::layout_state() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.layout_state)
  return _internal_layout_state();
}
inline void UIStateArchive::unsafe_arena_set_allocated_layout_state(
    ::TSP::Reference* layout_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.layout_state_);
  }
  _impl_.layout_state_ = layout_state;
  if (layout_state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.UIStateArchive.layout_state)
}
inline ::TSP::Reference* UIStateArchive::release_layout_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.layout_state_;
  _impl_.layout_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* UIStateArchive::unsafe_arena_release_layout_state() {
  // @@protoc_insertion_point(field_release:TP.UIStateArchive.layout_state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.layout_state_;
  _impl_.layout_state_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UIStateArchive::_internal_mutable_layout_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.layout_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.layout_state_ = p;
  }
  return _impl_.layout_state_;
}
inline ::TSP::Reference* UIStateArchive::mutable_layout_state() {
  ::TSP::Reference* _msg = _internal_mutable_layout_state();
  // @@protoc_insertion_point(field_mutable:TP.UIStateArchive.layout_state)
  return _msg;
}
inline void UIStateArchive::set_allocated_layout_state(::TSP::Reference* layout_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.layout_state_);
  }
  if (layout_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(layout_state));
    if (message_arena != submessage_arena) {
      layout_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layout_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.layout_state_ = layout_state;
  // @@protoc_insertion_point(field_set_allocated:TP.UIStateArchive.layout_state)
}

// optional .TSP.Reference view_state = 2;
inline bool UIStateArchive::_internal_has_view_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.view_state_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_view_state() const {
  return _internal_has_view_state();
}
inline const ::TSP::Reference& UIStateArchive::_internal_view_state() const {
  const ::TSP::Reference* p = _impl_.view_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UIStateArchive::view_state() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.view_state)
  return _internal_view_state();
}
inline void UIStateArchive::unsafe_arena_set_allocated_view_state(
    ::TSP::Reference* view_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.view_state_);
  }
  _impl_.view_state_ = view_state;
  if (view_state) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.UIStateArchive.view_state)
}
inline ::TSP::Reference* UIStateArchive::release_view_state() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.view_state_;
  _impl_.view_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* UIStateArchive::unsafe_arena_release_view_state() {
  // @@protoc_insertion_point(field_release:TP.UIStateArchive.view_state)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.view_state_;
  _impl_.view_state_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UIStateArchive::_internal_mutable_view_state() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.view_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.view_state_ = p;
  }
  return _impl_.view_state_;
}
inline ::TSP::Reference* UIStateArchive::mutable_view_state() {
  ::TSP::Reference* _msg = _internal_mutable_view_state();
  // @@protoc_insertion_point(field_mutable:TP.UIStateArchive.view_state)
  return _msg;
}
inline void UIStateArchive::set_allocated_view_state(::TSP::Reference* view_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.view_state_);
  }
  if (view_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(view_state));
    if (message_arena != submessage_arena) {
      view_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, view_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.view_state_ = view_state;
  // @@protoc_insertion_point(field_set_allocated:TP.UIStateArchive.view_state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TP

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TP::SettingsArchive_FootnoteKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TP::SettingsArchive_FootnoteKind>() {
  return ::TP::SettingsArchive_FootnoteKind_descriptor();
}
template <> struct is_proto_enum< ::TP::SettingsArchive_FootnoteFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TP::SettingsArchive_FootnoteFormat>() {
  return ::TP::SettingsArchive_FootnoteFormat_descriptor();
}
template <> struct is_proto_enum< ::TP::SettingsArchive_FootnoteNumbering> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TP::SettingsArchive_FootnoteNumbering>() {
  return ::TP::SettingsArchive_FootnoteNumbering_descriptor();
}
template <> struct is_proto_enum< ::TP::PageHintArchive_PageKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TP::PageHintArchive_PageKind>() {
  return ::TP::PageHintArchive_PageKind_descriptor();
}
template <> struct is_proto_enum< ::TP::ViewScaleMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TP::ViewScaleMode>() {
  return ::TP::ViewScaleMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TPArchives_2eproto
