// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSAArchives.proto

#include "TSAArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace TSA {
PROTOBUF_CONSTEXPR DocumentArchive::DocumentArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.text_preset_display_items_)*/{}
  , /*decltype(_impl_.creation_language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.template_identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.calculation_engine_)*/nullptr
  , /*decltype(_impl_.view_state_)*/nullptr
  , /*decltype(_impl_.function_browser_state_)*/nullptr
  , /*decltype(_impl_.tables_custom_format_list_)*/nullptr
  , /*decltype(_impl_.needs_movie_compatibility_upgrade_)*/false} {}
struct DocumentArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocumentArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocumentArchiveDefaultTypeInternal() {}
  union {
    DocumentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocumentArchiveDefaultTypeInternal _DocumentArchive_default_instance_;
PROTOBUF_CONSTEXPR FunctionBrowserStateArchive::FunctionBrowserStateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.recent_functions_)*/{}
  , /*decltype(_impl_.back_functions_)*/{}
  , /*decltype(_impl_.forward_functions_)*/{}
  , /*decltype(_impl_.current_function_)*/0u} {}
struct FunctionBrowserStateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FunctionBrowserStateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FunctionBrowserStateArchiveDefaultTypeInternal() {}
  union {
    FunctionBrowserStateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FunctionBrowserStateArchiveDefaultTypeInternal _FunctionBrowserStateArchive_default_instance_;
PROTOBUF_CONSTEXPR TestDocumentArchive::TestDocumentArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct TestDocumentArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestDocumentArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestDocumentArchiveDefaultTypeInternal() {}
  union {
    TestDocumentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestDocumentArchiveDefaultTypeInternal _TestDocumentArchive_default_instance_;
PROTOBUF_CONSTEXPR PropagatePresetCommandArchive::PropagatePresetCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct PropagatePresetCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PropagatePresetCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PropagatePresetCommandArchiveDefaultTypeInternal() {}
  union {
    PropagatePresetCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PropagatePresetCommandArchiveDefaultTypeInternal _PropagatePresetCommandArchive_default_instance_;
}  // namespace TSA
static ::_pb::Metadata file_level_metadata_TSAArchives_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_TSAArchives_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_TSAArchives_2eproto = nullptr;

const uint32_t TableStruct_TSAArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TSA::DocumentArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSA::DocumentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSA::DocumentArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSA::DocumentArchive, _impl_.text_preset_display_items_),
  PROTOBUF_FIELD_OFFSET(::TSA::DocumentArchive, _impl_.creation_language_),
  PROTOBUF_FIELD_OFFSET(::TSA::DocumentArchive, _impl_.calculation_engine_),
  PROTOBUF_FIELD_OFFSET(::TSA::DocumentArchive, _impl_.view_state_),
  PROTOBUF_FIELD_OFFSET(::TSA::DocumentArchive, _impl_.function_browser_state_),
  PROTOBUF_FIELD_OFFSET(::TSA::DocumentArchive, _impl_.tables_custom_format_list_),
  PROTOBUF_FIELD_OFFSET(::TSA::DocumentArchive, _impl_.needs_movie_compatibility_upgrade_),
  PROTOBUF_FIELD_OFFSET(::TSA::DocumentArchive, _impl_.template_identifier_),
  2,
  ~0u,
  0,
  3,
  4,
  5,
  6,
  7,
  1,
  PROTOBUF_FIELD_OFFSET(::TSA::FunctionBrowserStateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSA::FunctionBrowserStateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSA::FunctionBrowserStateArchive, _impl_.recent_functions_),
  PROTOBUF_FIELD_OFFSET(::TSA::FunctionBrowserStateArchive, _impl_.back_functions_),
  PROTOBUF_FIELD_OFFSET(::TSA::FunctionBrowserStateArchive, _impl_.forward_functions_),
  PROTOBUF_FIELD_OFFSET(::TSA::FunctionBrowserStateArchive, _impl_.current_function_),
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TSA::TestDocumentArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSA::TestDocumentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSA::TestDocumentArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSA::TestDocumentArchive, _impl_.value_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSA::PropagatePresetCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSA::PropagatePresetCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSA::PropagatePresetCommandArchive, _impl_.super_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, -1, sizeof(::TSA::DocumentArchive)},
  { 24, 34, -1, sizeof(::TSA::FunctionBrowserStateArchive)},
  { 38, 46, -1, sizeof(::TSA::TestDocumentArchive)},
  { 48, 55, -1, sizeof(::TSA::PropagatePresetCommandArchive)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::TSA::_DocumentArchive_default_instance_._instance,
  &::TSA::_FunctionBrowserStateArchive_default_instance_._instance,
  &::TSA::_TestDocumentArchive_default_instance_._instance,
  &::TSA::_PropagatePresetCommandArchive_default_instance_._instance,
};

const char descriptor_table_protodef_TSAArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021TSAArchives.proto\022\003TSA\032\021TSKArchives.pr"
  "oto\032\021TSPMessages.proto\032\022TSWPArchives.pro"
  "to\032\021TSSArchives.proto\"\223\003\n\017DocumentArchiv"
  "e\022#\n\005super\030\001 \002(\0132\024.TSK.DocumentArchive\022E"
  "\n\031text_preset_display_items\030\002 \003(\0132\".TSWP"
  ".TextPresetDisplayItemArchive\022\031\n\021creatio"
  "n_language\030\003 \001(\t\022*\n\022calculation_engine\030\004"
  " \001(\0132\016.TSP.Reference\022\"\n\nview_state\030\005 \001(\013"
  "2\016.TSP.Reference\022.\n\026function_browser_sta"
  "te\030\006 \001(\0132\016.TSP.Reference\0221\n\031tables_custo"
  "m_format_list\030\007 \001(\0132\016.TSP.Reference\022)\n!n"
  "eeds_movie_compatibility_upgrade\030\010 \001(\010\022\033"
  "\n\023template_identifier\030\t \001(\t\"\204\001\n\033Function"
  "BrowserStateArchive\022\030\n\020recent_functions\030"
  "\001 \003(\r\022\026\n\016back_functions\030\002 \003(\r\022\031\n\021forward"
  "_functions\030\003 \003(\r\022\030\n\020current_function\030\004 \001"
  "(\r\"I\n\023TestDocumentArchive\022#\n\005super\030\001 \002(\013"
  "2\024.TSA.DocumentArchive\022\r\n\005value\030\002 \001(\t\"C\n"
  "\035PropagatePresetCommandArchive\022\"\n\005super\030"
  "\001 \002(\0132\023.TSK.CommandArchive"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_TSAArchives_2eproto_deps[4] = {
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
  &::descriptor_table_TSWPArchives_2eproto,
};
static ::_pbi::once_flag descriptor_table_TSAArchives_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TSAArchives_2eproto = {
    false, false, 786, descriptor_table_protodef_TSAArchives_2eproto,
    "TSAArchives.proto",
    &descriptor_table_TSAArchives_2eproto_once, descriptor_table_TSAArchives_2eproto_deps, 4, 4,
    schemas, file_default_instances, TableStruct_TSAArchives_2eproto::offsets,
    file_level_metadata_TSAArchives_2eproto, file_level_enum_descriptors_TSAArchives_2eproto,
    file_level_service_descriptors_TSAArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TSAArchives_2eproto_getter() {
  return &descriptor_table_TSAArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TSAArchives_2eproto(&descriptor_table_TSAArchives_2eproto);
namespace TSA {

// ===================================================================

class DocumentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentArchive>()._impl_._has_bits_);
  static const ::TSK::DocumentArchive& super(const DocumentArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_creation_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& calculation_engine(const DocumentArchive* msg);
  static void set_has_calculation_engine(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& view_state(const DocumentArchive* msg);
  static void set_has_view_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& function_browser_state(const DocumentArchive* msg);
  static void set_has_function_browser_state(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& tables_custom_format_list(const DocumentArchive* msg);
  static void set_has_tables_custom_format_list(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_needs_movie_compatibility_upgrade(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_template_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::TSK::DocumentArchive&
DocumentArchive::_Internal::super(const DocumentArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::calculation_engine(const DocumentArchive* msg) {
  return *msg->_impl_.calculation_engine_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::view_state(const DocumentArchive* msg) {
  return *msg->_impl_.view_state_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::function_browser_state(const DocumentArchive* msg) {
  return *msg->_impl_.function_browser_state_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::tables_custom_format_list(const DocumentArchive* msg) {
  return *msg->_impl_.tables_custom_format_list_;
}
void DocumentArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void DocumentArchive::clear_text_preset_display_items() {
  _impl_.text_preset_display_items_.Clear();
}
void DocumentArchive::clear_calculation_engine() {
  if (_impl_.calculation_engine_ != nullptr) _impl_.calculation_engine_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void DocumentArchive::clear_view_state() {
  if (_impl_.view_state_ != nullptr) _impl_.view_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void DocumentArchive::clear_function_browser_state() {
  if (_impl_.function_browser_state_ != nullptr) _impl_.function_browser_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void DocumentArchive::clear_tables_custom_format_list() {
  if (_impl_.tables_custom_format_list_ != nullptr) _impl_.tables_custom_format_list_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
DocumentArchive::DocumentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSA.DocumentArchive)
}
DocumentArchive::DocumentArchive(const DocumentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DocumentArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_preset_display_items_){from._impl_.text_preset_display_items_}
    , decltype(_impl_.creation_language_){}
    , decltype(_impl_.template_identifier_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.calculation_engine_){nullptr}
    , decltype(_impl_.view_state_){nullptr}
    , decltype(_impl_.function_browser_state_){nullptr}
    , decltype(_impl_.tables_custom_format_list_){nullptr}
    , decltype(_impl_.needs_movie_compatibility_upgrade_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.creation_language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creation_language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_creation_language()) {
    _this->_impl_.creation_language_.Set(from._internal_creation_language(), 
      _this->GetArenaForAllocation());
  }
  _impl_.template_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.template_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_template_identifier()) {
    _this->_impl_.template_identifier_.Set(from._internal_template_identifier(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::DocumentArchive(*from._impl_.super_);
  }
  if (from._internal_has_calculation_engine()) {
    _this->_impl_.calculation_engine_ = new ::TSP::Reference(*from._impl_.calculation_engine_);
  }
  if (from._internal_has_view_state()) {
    _this->_impl_.view_state_ = new ::TSP::Reference(*from._impl_.view_state_);
  }
  if (from._internal_has_function_browser_state()) {
    _this->_impl_.function_browser_state_ = new ::TSP::Reference(*from._impl_.function_browser_state_);
  }
  if (from._internal_has_tables_custom_format_list()) {
    _this->_impl_.tables_custom_format_list_ = new ::TSP::Reference(*from._impl_.tables_custom_format_list_);
  }
  _this->_impl_.needs_movie_compatibility_upgrade_ = from._impl_.needs_movie_compatibility_upgrade_;
  // @@protoc_insertion_point(copy_constructor:TSA.DocumentArchive)
}

inline void DocumentArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_preset_display_items_){arena}
    , decltype(_impl_.creation_language_){}
    , decltype(_impl_.template_identifier_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.calculation_engine_){nullptr}
    , decltype(_impl_.view_state_){nullptr}
    , decltype(_impl_.function_browser_state_){nullptr}
    , decltype(_impl_.tables_custom_format_list_){nullptr}
    , decltype(_impl_.needs_movie_compatibility_upgrade_){false}
  };
  _impl_.creation_language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creation_language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.template_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.template_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DocumentArchive::~DocumentArchive() {
  // @@protoc_insertion_point(destructor:TSA.DocumentArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DocumentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_preset_display_items_.~RepeatedPtrField();
  _impl_.creation_language_.Destroy();
  _impl_.template_identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.calculation_engine_;
  if (this != internal_default_instance()) delete _impl_.view_state_;
  if (this != internal_default_instance()) delete _impl_.function_browser_state_;
  if (this != internal_default_instance()) delete _impl_.tables_custom_format_list_;
}

void DocumentArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DocumentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSA.DocumentArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_preset_display_items_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.creation_language_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.template_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.calculation_engine_ != nullptr);
      _impl_.calculation_engine_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.view_state_ != nullptr);
      _impl_.view_state_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.function_browser_state_ != nullptr);
      _impl_.function_browser_state_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.tables_custom_format_list_ != nullptr);
      _impl_.tables_custom_format_list_->Clear();
    }
  }
  _impl_.needs_movie_compatibility_upgrade_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.DocumentArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSWP.TextPresetDisplayItemArchive text_preset_display_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_text_preset_display_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string creation_language = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_creation_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSA.DocumentArchive.creation_language");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference calculation_engine = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_calculation_engine(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference view_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_view_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference function_browser_state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_function_browser_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference tables_custom_format_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tables_custom_format_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool needs_movie_compatibility_upgrade = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_needs_movie_compatibility_upgrade(&has_bits);
          _impl_.needs_movie_compatibility_upgrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string template_identifier = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_template_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSA.DocumentArchive.template_identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DocumentArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSA.DocumentArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.DocumentArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSWP.TextPresetDisplayItemArchive text_preset_display_items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_text_preset_display_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_text_preset_display_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string creation_language = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_creation_language().data(), static_cast<int>(this->_internal_creation_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSA.DocumentArchive.creation_language");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_creation_language(), target);
  }

  // optional .TSP.Reference calculation_engine = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::calculation_engine(this),
        _Internal::calculation_engine(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference view_state = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::view_state(this),
        _Internal::view_state(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference function_browser_state = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::function_browser_state(this),
        _Internal::function_browser_state(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference tables_custom_format_list = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::tables_custom_format_list(this),
        _Internal::tables_custom_format_list(this).GetCachedSize(), target, stream);
  }

  // optional bool needs_movie_compatibility_upgrade = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_needs_movie_compatibility_upgrade(), target);
  }

  // optional string template_identifier = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_template_identifier().data(), static_cast<int>(this->_internal_template_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSA.DocumentArchive.template_identifier");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_template_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSA.DocumentArchive)
  return target;
}

size_t DocumentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSA.DocumentArchive)
  size_t total_size = 0;

  // required .TSK.DocumentArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSWP.TextPresetDisplayItemArchive text_preset_display_items = 2;
  total_size += 1UL * this->_internal_text_preset_display_items_size();
  for (const auto& msg : this->_impl_.text_preset_display_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string creation_language = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_creation_language());
    }

    // optional string template_identifier = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_template_identifier());
    }

  }
  if (cached_has_bits & 0x000000f8u) {
    // optional .TSP.Reference calculation_engine = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.calculation_engine_);
    }

    // optional .TSP.Reference view_state = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.view_state_);
    }

    // optional .TSP.Reference function_browser_state = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.function_browser_state_);
    }

    // optional .TSP.Reference tables_custom_format_list = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tables_custom_format_list_);
    }

    // optional bool needs_movie_compatibility_upgrade = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DocumentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentArchive::GetClassData() const { return &_class_data_; }


void DocumentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DocumentArchive*>(&to_msg);
  auto& from = static_cast<const DocumentArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSA.DocumentArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.text_preset_display_items_.MergeFrom(from._impl_.text_preset_display_items_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_creation_language(from._internal_creation_language());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_template_identifier(from._internal_template_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_super()->::TSK::DocumentArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_calculation_engine()->::TSP::Reference::MergeFrom(
          from._internal_calculation_engine());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_view_state()->::TSP::Reference::MergeFrom(
          from._internal_view_state());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_function_browser_state()->::TSP::Reference::MergeFrom(
          from._internal_function_browser_state());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_tables_custom_format_list()->::TSP::Reference::MergeFrom(
          from._internal_tables_custom_format_list());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.needs_movie_compatibility_upgrade_ = from._impl_.needs_movie_compatibility_upgrade_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentArchive::CopyFrom(const DocumentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSA.DocumentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.text_preset_display_items_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_calculation_engine()) {
    if (!_impl_.calculation_engine_->IsInitialized()) return false;
  }
  if (_internal_has_view_state()) {
    if (!_impl_.view_state_->IsInitialized()) return false;
  }
  if (_internal_has_function_browser_state()) {
    if (!_impl_.function_browser_state_->IsInitialized()) return false;
  }
  if (_internal_has_tables_custom_format_list()) {
    if (!_impl_.tables_custom_format_list_->IsInitialized()) return false;
  }
  return true;
}

void DocumentArchive::InternalSwap(DocumentArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.text_preset_display_items_.InternalSwap(&other->_impl_.text_preset_display_items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.creation_language_, lhs_arena,
      &other->_impl_.creation_language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.template_identifier_, lhs_arena,
      &other->_impl_.template_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentArchive, _impl_.needs_movie_compatibility_upgrade_)
      + sizeof(DocumentArchive::_impl_.needs_movie_compatibility_upgrade_)
      - PROTOBUF_FIELD_OFFSET(DocumentArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSAArchives_2eproto_getter, &descriptor_table_TSAArchives_2eproto_once,
      file_level_metadata_TSAArchives_2eproto[0]);
}

// ===================================================================

class FunctionBrowserStateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionBrowserStateArchive>()._impl_._has_bits_);
  static void set_has_current_function(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FunctionBrowserStateArchive::FunctionBrowserStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSA.FunctionBrowserStateArchive)
}
FunctionBrowserStateArchive::FunctionBrowserStateArchive(const FunctionBrowserStateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FunctionBrowserStateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.recent_functions_){from._impl_.recent_functions_}
    , decltype(_impl_.back_functions_){from._impl_.back_functions_}
    , decltype(_impl_.forward_functions_){from._impl_.forward_functions_}
    , decltype(_impl_.current_function_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.current_function_ = from._impl_.current_function_;
  // @@protoc_insertion_point(copy_constructor:TSA.FunctionBrowserStateArchive)
}

inline void FunctionBrowserStateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.recent_functions_){arena}
    , decltype(_impl_.back_functions_){arena}
    , decltype(_impl_.forward_functions_){arena}
    , decltype(_impl_.current_function_){0u}
  };
}

FunctionBrowserStateArchive::~FunctionBrowserStateArchive() {
  // @@protoc_insertion_point(destructor:TSA.FunctionBrowserStateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FunctionBrowserStateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.recent_functions_.~RepeatedField();
  _impl_.back_functions_.~RepeatedField();
  _impl_.forward_functions_.~RepeatedField();
}

void FunctionBrowserStateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FunctionBrowserStateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSA.FunctionBrowserStateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.recent_functions_.Clear();
  _impl_.back_functions_.Clear();
  _impl_.forward_functions_.Clear();
  _impl_.current_function_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionBrowserStateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 recent_functions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_recent_functions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_recent_functions(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 back_functions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_back_functions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_back_functions(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 forward_functions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_forward_functions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_forward_functions(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 current_function = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_current_function(&has_bits);
          _impl_.current_function_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionBrowserStateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSA.FunctionBrowserStateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 recent_functions = 1;
  for (int i = 0, n = this->_internal_recent_functions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_recent_functions(i), target);
  }

  // repeated uint32 back_functions = 2;
  for (int i = 0, n = this->_internal_back_functions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_back_functions(i), target);
  }

  // repeated uint32 forward_functions = 3;
  for (int i = 0, n = this->_internal_forward_functions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_forward_functions(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 current_function = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_current_function(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSA.FunctionBrowserStateArchive)
  return target;
}

size_t FunctionBrowserStateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSA.FunctionBrowserStateArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 recent_functions = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.recent_functions_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_recent_functions_size());
    total_size += data_size;
  }

  // repeated uint32 back_functions = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.back_functions_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_back_functions_size());
    total_size += data_size;
  }

  // repeated uint32 forward_functions = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.forward_functions_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_forward_functions_size());
    total_size += data_size;
  }

  // optional uint32 current_function = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_current_function());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionBrowserStateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FunctionBrowserStateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionBrowserStateArchive::GetClassData() const { return &_class_data_; }


void FunctionBrowserStateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FunctionBrowserStateArchive*>(&to_msg);
  auto& from = static_cast<const FunctionBrowserStateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSA.FunctionBrowserStateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.recent_functions_.MergeFrom(from._impl_.recent_functions_);
  _this->_impl_.back_functions_.MergeFrom(from._impl_.back_functions_);
  _this->_impl_.forward_functions_.MergeFrom(from._impl_.forward_functions_);
  if (from._internal_has_current_function()) {
    _this->_internal_set_current_function(from._internal_current_function());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionBrowserStateArchive::CopyFrom(const FunctionBrowserStateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSA.FunctionBrowserStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionBrowserStateArchive::IsInitialized() const {
  return true;
}

void FunctionBrowserStateArchive::InternalSwap(FunctionBrowserStateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.recent_functions_.InternalSwap(&other->_impl_.recent_functions_);
  _impl_.back_functions_.InternalSwap(&other->_impl_.back_functions_);
  _impl_.forward_functions_.InternalSwap(&other->_impl_.forward_functions_);
  swap(_impl_.current_function_, other->_impl_.current_function_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionBrowserStateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSAArchives_2eproto_getter, &descriptor_table_TSAArchives_2eproto_once,
      file_level_metadata_TSAArchives_2eproto[1]);
}

// ===================================================================

class TestDocumentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TestDocumentArchive>()._impl_._has_bits_);
  static const ::TSA::DocumentArchive& super(const TestDocumentArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSA::DocumentArchive&
TestDocumentArchive::_Internal::super(const TestDocumentArchive* msg) {
  return *msg->_impl_.super_;
}
TestDocumentArchive::TestDocumentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSA.TestDocumentArchive)
}
TestDocumentArchive::TestDocumentArchive(const TestDocumentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestDocumentArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSA::DocumentArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSA.TestDocumentArchive)
}

inline void TestDocumentArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.super_){nullptr}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestDocumentArchive::~TestDocumentArchive() {
  // @@protoc_insertion_point(destructor:TSA.TestDocumentArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestDocumentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void TestDocumentArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestDocumentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSA.TestDocumentArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestDocumentArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSA.DocumentArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSA.TestDocumentArchive.value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestDocumentArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSA.TestDocumentArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSA.DocumentArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSA.TestDocumentArchive.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSA.TestDocumentArchive)
  return target;
}

size_t TestDocumentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSA.TestDocumentArchive)
  size_t total_size = 0;

  // required .TSA.DocumentArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string value = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestDocumentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestDocumentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestDocumentArchive::GetClassData() const { return &_class_data_; }


void TestDocumentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestDocumentArchive*>(&to_msg);
  auto& from = static_cast<const TestDocumentArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSA.TestDocumentArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSA::DocumentArchive::MergeFrom(
          from._internal_super());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestDocumentArchive::CopyFrom(const TestDocumentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSA.TestDocumentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestDocumentArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void TestDocumentArchive::InternalSwap(TestDocumentArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestDocumentArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSAArchives_2eproto_getter, &descriptor_table_TSAArchives_2eproto_once,
      file_level_metadata_TSAArchives_2eproto[2]);
}

// ===================================================================

class PropagatePresetCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PropagatePresetCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const PropagatePresetCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
PropagatePresetCommandArchive::_Internal::super(const PropagatePresetCommandArchive* msg) {
  return *msg->_impl_.super_;
}
void PropagatePresetCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PropagatePresetCommandArchive::PropagatePresetCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSA.PropagatePresetCommandArchive)
}
PropagatePresetCommandArchive::PropagatePresetCommandArchive(const PropagatePresetCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PropagatePresetCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSA.PropagatePresetCommandArchive)
}

inline void PropagatePresetCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

PropagatePresetCommandArchive::~PropagatePresetCommandArchive() {
  // @@protoc_insertion_point(destructor:TSA.PropagatePresetCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PropagatePresetCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void PropagatePresetCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PropagatePresetCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSA.PropagatePresetCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropagatePresetCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PropagatePresetCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSA.PropagatePresetCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSA.PropagatePresetCommandArchive)
  return target;
}

size_t PropagatePresetCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSA.PropagatePresetCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PropagatePresetCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PropagatePresetCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PropagatePresetCommandArchive::GetClassData() const { return &_class_data_; }


void PropagatePresetCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PropagatePresetCommandArchive*>(&to_msg);
  auto& from = static_cast<const PropagatePresetCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSA.PropagatePresetCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PropagatePresetCommandArchive::CopyFrom(const PropagatePresetCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSA.PropagatePresetCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropagatePresetCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void PropagatePresetCommandArchive::InternalSwap(PropagatePresetCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PropagatePresetCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSAArchives_2eproto_getter, &descriptor_table_TSAArchives_2eproto_once,
      file_level_metadata_TSAArchives_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TSA
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSA::DocumentArchive*
Arena::CreateMaybeMessage< ::TSA::DocumentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSA::DocumentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSA::FunctionBrowserStateArchive*
Arena::CreateMaybeMessage< ::TSA::FunctionBrowserStateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSA::FunctionBrowserStateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSA::TestDocumentArchive*
Arena::CreateMaybeMessage< ::TSA::TestDocumentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSA::TestDocumentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSA::PropagatePresetCommandArchive*
Arena::CreateMaybeMessage< ::TSA::PropagatePresetCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSA::PropagatePresetCommandArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
