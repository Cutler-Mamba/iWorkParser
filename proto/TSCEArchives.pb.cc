// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCEArchives.proto

#include "TSCEArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace TSCE {
PROTOBUF_CONSTEXPR CFUUIDArchive::CFUUIDArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uuid_bytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uuid_w0_)*/0u
  , /*decltype(_impl_.uuid_w1_)*/0u
  , /*decltype(_impl_.uuid_w2_)*/0u
  , /*decltype(_impl_.uuid_w3_)*/0u} {}
struct CFUUIDArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CFUUIDArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CFUUIDArchiveDefaultTypeInternal() {}
  union {
    CFUUIDArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CFUUIDArchiveDefaultTypeInternal _CFUUIDArchive_default_instance_;
PROTOBUF_CONSTEXPR CellReferenceArchive::CellReferenceArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.table_id_)*/nullptr
  , /*decltype(_impl_.column_)*/0u
  , /*decltype(_impl_.row_)*/0u} {}
struct CellReferenceArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellReferenceArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellReferenceArchiveDefaultTypeInternal() {}
  union {
    CellReferenceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellReferenceArchiveDefaultTypeInternal _CellReferenceArchive_default_instance_;
PROTOBUF_CONSTEXPR InternalCellReferenceArchive::InternalCellReferenceArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.coordinate_)*/nullptr
  , /*decltype(_impl_.owner_id_)*/0u} {}
struct InternalCellReferenceArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InternalCellReferenceArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InternalCellReferenceArchiveDefaultTypeInternal() {}
  union {
    InternalCellReferenceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InternalCellReferenceArchiveDefaultTypeInternal _InternalCellReferenceArchive_default_instance_;
PROTOBUF_CONSTEXPR RangeReferenceArchive::RangeReferenceArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.table_id_)*/nullptr
  , /*decltype(_impl_.top_left_column_)*/0u
  , /*decltype(_impl_.top_left_row_)*/0u
  , /*decltype(_impl_.bottom_right_column_)*/0u
  , /*decltype(_impl_.bottom_right_row_)*/0u} {}
struct RangeReferenceArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RangeReferenceArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RangeReferenceArchiveDefaultTypeInternal() {}
  union {
    RangeReferenceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RangeReferenceArchiveDefaultTypeInternal _RangeReferenceArchive_default_instance_;
PROTOBUF_CONSTEXPR InternalRangeReferenceArchive::InternalRangeReferenceArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.range_)*/nullptr
  , /*decltype(_impl_.owner_id_)*/0u} {}
struct InternalRangeReferenceArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InternalRangeReferenceArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InternalRangeReferenceArchiveDefaultTypeInternal() {}
  union {
    InternalRangeReferenceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InternalRangeReferenceArchiveDefaultTypeInternal _InternalRangeReferenceArchive_default_instance_;
PROTOBUF_CONSTEXPR ReferenceArchive::ReferenceArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cell_reference_)*/nullptr
  , /*decltype(_impl_.range_reference_)*/nullptr
  , /*decltype(_impl_.reference_type_)*/1} {}
struct ReferenceArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReferenceArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReferenceArchiveDefaultTypeInternal() {}
  union {
    ReferenceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReferenceArchiveDefaultTypeInternal _ReferenceArchive_default_instance_;
PROTOBUF_CONSTEXPR EdgeArchive::EdgeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.owner_id_)*/nullptr
  , /*decltype(_impl_.column_)*/0u
  , /*decltype(_impl_.row_)*/0u
  , /*decltype(_impl_.is_precedent_)*/false} {}
struct EdgeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdgeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdgeArchiveDefaultTypeInternal() {}
  union {
    EdgeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdgeArchiveDefaultTypeInternal _EdgeArchive_default_instance_;
PROTOBUF_CONSTEXPR EdgesArchive::EdgesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.packed_edge_without_owner_)*/{}
  , /*decltype(_impl_.packed_edge_with_owner_)*/{}
  , /*decltype(_impl_.owner_id_for_edge_)*/{}
  , /*decltype(_impl_.internal_owner_id_for_edge_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EdgesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdgesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdgesArchiveDefaultTypeInternal() {}
  union {
    EdgesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdgesArchiveDefaultTypeInternal _EdgesArchive_default_instance_;
PROTOBUF_CONSTEXPR CellRecordArchive::CellRecordArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.edge_)*/{}
  , /*decltype(_impl_.edges_)*/nullptr
  , /*decltype(_impl_.column_)*/0u
  , /*decltype(_impl_.row_)*/0u
  , /*decltype(_impl_.dirty_self_plus_precedents_count_)*/0u
  , /*decltype(_impl_.is_in_a_cycle_)*/false
  , /*decltype(_impl_.has_calculated_precedents_)*/false
  , /*decltype(_impl_.calculate_precedents_on_next_recalc_)*/false
  , /*decltype(_impl_.translate_for_excel_import_on_next_recalc_)*/false
  , /*decltype(_impl_.contains_a_formula_)*/true} {}
struct CellRecordArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellRecordArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellRecordArchiveDefaultTypeInternal() {}
  union {
    CellRecordArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellRecordArchiveDefaultTypeInternal _CellRecordArchive_default_instance_;
PROTOBUF_CONSTEXPR CellDependenciesArchive::CellDependenciesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cell_record_)*/{}
  , /*decltype(_impl_.num_dirty_cells_)*/0u} {}
struct CellDependenciesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellDependenciesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellDependenciesArchiveDefaultTypeInternal() {}
  union {
    CellDependenciesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellDependenciesArchiveDefaultTypeInternal _CellDependenciesArchive_default_instance_;
PROTOBUF_CONSTEXPR VolatileDependenciesArchive::VolatileDependenciesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.volatile_time_cell_column_)*/{}
  , /*decltype(_impl_.volatile_time_cell_row_)*/{}
  , /*decltype(_impl_.volatile_random_cell_column_)*/{}
  , /*decltype(_impl_.volatile_random_cell_row_)*/{}
  , /*decltype(_impl_.volatile_location_cell_column_)*/{}
  , /*decltype(_impl_.volatile_location_cell_row_)*/{}
  , /*decltype(_impl_.volatile_compass_cell_column_)*/{}
  , /*decltype(_impl_.volatile_compass_cell_row_)*/{}
  , /*decltype(_impl_.calculated_dependency_cell_column_)*/{}
  , /*decltype(_impl_.calculated_dependency_cell_row_)*/{}
  , /*decltype(_impl_.volatile_geometry_cell_)*/{}
  , /*decltype(_impl_.volatile_geometry_cell_reference_)*/{}
  , /*decltype(_impl_.volatile_locale_cell_column_)*/{}
  , /*decltype(_impl_.volatile_locale_cell_row_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VolatileDependenciesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VolatileDependenciesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VolatileDependenciesArchiveDefaultTypeInternal() {}
  union {
    VolatileDependenciesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VolatileDependenciesArchiveDefaultTypeInternal _VolatileDependenciesArchive_default_instance_;
PROTOBUF_CONSTEXPR RangeBackDependencyArchive::RangeBackDependencyArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.range_reference_)*/nullptr
  , /*decltype(_impl_.internal_range_reference_)*/nullptr
  , /*decltype(_impl_.cell_coord_row_)*/0u
  , /*decltype(_impl_.cell_coord_column_)*/0u} {}
struct RangeBackDependencyArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RangeBackDependencyArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RangeBackDependencyArchiveDefaultTypeInternal() {}
  union {
    RangeBackDependencyArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RangeBackDependencyArchiveDefaultTypeInternal _RangeBackDependencyArchive_default_instance_;
PROTOBUF_CONSTEXPR RTreeInternalNodeContentsArchive::RTreeInternalNodeContentsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.min_)*/{}
  , /*decltype(_impl_.max_)*/{}
  , /*decltype(_impl_.child_)*/nullptr} {}
struct RTreeInternalNodeContentsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RTreeInternalNodeContentsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RTreeInternalNodeContentsArchiveDefaultTypeInternal() {}
  union {
    RTreeInternalNodeContentsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RTreeInternalNodeContentsArchiveDefaultTypeInternal _RTreeInternalNodeContentsArchive_default_instance_;
PROTOBUF_CONSTEXPR RTreeLeafNodeContentsArchive::RTreeLeafNodeContentsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.min_)*/{}
  , /*decltype(_impl_.max_)*/{}
  , /*decltype(_impl_.cell_reference_)*/nullptr} {}
struct RTreeLeafNodeContentsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RTreeLeafNodeContentsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RTreeLeafNodeContentsArchiveDefaultTypeInternal() {}
  union {
    RTreeLeafNodeContentsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RTreeLeafNodeContentsArchiveDefaultTypeInternal _RTreeLeafNodeContentsArchive_default_instance_;
PROTOBUF_CONSTEXPR RTreeNodeArchive::RTreeNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.internal_node_contents_)*/{}
  , /*decltype(_impl_.leaf_node_contents_)*/{}
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.count_)*/0u} {}
struct RTreeNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RTreeNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RTreeNodeArchiveDefaultTypeInternal() {}
  union {
    RTreeNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RTreeNodeArchiveDefaultTypeInternal _RTreeNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR RTreeArchive::RTreeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.root_)*/nullptr
  , /*decltype(_impl_.data_file_id_)*/0u
  , /*decltype(_impl_.data_size_)*/0u
  , /*decltype(_impl_.data_num_dims_)*/0u
  , /*decltype(_impl_.data_elem_size_)*/0u
  , /*decltype(_impl_.data_elem_real_size_)*/0u
  , /*decltype(_impl_.data_max_nodes_)*/0u
  , /*decltype(_impl_.data_min_nodes_)*/0u} {}
struct RTreeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RTreeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RTreeArchiveDefaultTypeInternal() {}
  union {
    RTreeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RTreeArchiveDefaultTypeInternal _RTreeArchive_default_instance_;
PROTOBUF_CONSTEXPR RangeDependenciesArchive::RangeDependenciesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.back_dependency_)*/{}
  , /*decltype(_impl_.r_tree_)*/nullptr} {}
struct RangeDependenciesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RangeDependenciesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RangeDependenciesArchiveDefaultTypeInternal() {}
  union {
    RangeDependenciesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RangeDependenciesArchiveDefaultTypeInternal _RangeDependenciesArchive_default_instance_;
PROTOBUF_CONSTEXPR SpanningDependenciesArchive_ReferringColumnToLocalCells::SpanningDependenciesArchive_ReferringColumnToLocalCells(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cell_coordinate_)*/{}
  , /*decltype(_impl_.column_)*/0u
  , /*decltype(_impl_.range_context_)*/0} {}
struct SpanningDependenciesArchive_ReferringColumnToLocalCellsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpanningDependenciesArchive_ReferringColumnToLocalCellsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpanningDependenciesArchive_ReferringColumnToLocalCellsDefaultTypeInternal() {}
  union {
    SpanningDependenciesArchive_ReferringColumnToLocalCells _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpanningDependenciesArchive_ReferringColumnToLocalCellsDefaultTypeInternal _SpanningDependenciesArchive_ReferringColumnToLocalCells_default_instance_;
PROTOBUF_CONSTEXPR SpanningDependenciesArchive_ReferringColumnToRemoteCells::SpanningDependenciesArchive_ReferringColumnToRemoteCells(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.internal_cell_reference_)*/{}
  , /*decltype(_impl_.column_)*/0u
  , /*decltype(_impl_.range_context_)*/0} {}
struct SpanningDependenciesArchive_ReferringColumnToRemoteCellsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpanningDependenciesArchive_ReferringColumnToRemoteCellsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpanningDependenciesArchive_ReferringColumnToRemoteCellsDefaultTypeInternal() {}
  union {
    SpanningDependenciesArchive_ReferringColumnToRemoteCells _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpanningDependenciesArchive_ReferringColumnToRemoteCellsDefaultTypeInternal _SpanningDependenciesArchive_ReferringColumnToRemoteCells_default_instance_;
PROTOBUF_CONSTEXPR SpanningDependenciesArchive::SpanningDependenciesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.column_)*/{}
  , /*decltype(_impl_.range_context_)*/{}
  , /*decltype(_impl_.cell_)*/{}
  , /*decltype(_impl_.referring_column_to_local_cells_)*/{}
  , /*decltype(_impl_.referring_column_to_remote_cells_)*/{}
  , /*decltype(_impl_.total_range_for_deleted_table_)*/nullptr
  , /*decltype(_impl_.body_range_for_deleted_table_)*/nullptr} {}
struct SpanningDependenciesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpanningDependenciesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpanningDependenciesArchiveDefaultTypeInternal() {}
  union {
    SpanningDependenciesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpanningDependenciesArchiveDefaultTypeInternal _SpanningDependenciesArchive_default_instance_;
PROTOBUF_CONSTEXPR WholeOwnerDependenciesArchive::WholeOwnerDependenciesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dependent_cell_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WholeOwnerDependenciesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WholeOwnerDependenciesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WholeOwnerDependenciesArchiveDefaultTypeInternal() {}
  union {
    WholeOwnerDependenciesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WholeOwnerDependenciesArchiveDefaultTypeInternal _WholeOwnerDependenciesArchive_default_instance_;
PROTOBUF_CONSTEXPR FormulaOwnerInfoArchive::FormulaOwnerInfoArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.formula_owner_id_)*/nullptr
  , /*decltype(_impl_.cell_dependencies_)*/nullptr
  , /*decltype(_impl_.range_dependencies_)*/nullptr
  , /*decltype(_impl_.volatile_dependencies_)*/nullptr
  , /*decltype(_impl_.spanning_column_dependencies_)*/nullptr
  , /*decltype(_impl_.spanning_row_dependencies_)*/nullptr
  , /*decltype(_impl_.formula_owner_)*/nullptr
  , /*decltype(_impl_.whole_owner_dependencies_)*/nullptr} {}
struct FormulaOwnerInfoArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormulaOwnerInfoArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormulaOwnerInfoArchiveDefaultTypeInternal() {}
  union {
    FormulaOwnerInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormulaOwnerInfoArchiveDefaultTypeInternal _FormulaOwnerInfoArchive_default_instance_;
PROTOBUF_CONSTEXPR OwnerIDMapArchive_OwnerIDMapArchiveEntry::OwnerIDMapArchive_OwnerIDMapArchiveEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.owner_id_)*/nullptr
  , /*decltype(_impl_.internal_owner_id_)*/0u} {}
struct OwnerIDMapArchive_OwnerIDMapArchiveEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OwnerIDMapArchive_OwnerIDMapArchiveEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OwnerIDMapArchive_OwnerIDMapArchiveEntryDefaultTypeInternal() {}
  union {
    OwnerIDMapArchive_OwnerIDMapArchiveEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OwnerIDMapArchive_OwnerIDMapArchiveEntryDefaultTypeInternal _OwnerIDMapArchive_OwnerIDMapArchiveEntry_default_instance_;
PROTOBUF_CONSTEXPR OwnerIDMapArchive::OwnerIDMapArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.map_entry_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OwnerIDMapArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OwnerIDMapArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OwnerIDMapArchiveDefaultTypeInternal() {}
  union {
    OwnerIDMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OwnerIDMapArchiveDefaultTypeInternal _OwnerIDMapArchive_default_instance_;
PROTOBUF_CONSTEXPR DependencyTrackerArchive::DependencyTrackerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.formula_owner_info_)*/{}
  , /*decltype(_impl_.dirty_leaf_)*/{}
  , /*decltype(_impl_.internal_dirty_leaf_)*/{}
  , /*decltype(_impl_.owner_id_map_)*/nullptr} {}
struct DependencyTrackerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DependencyTrackerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DependencyTrackerArchiveDefaultTypeInternal() {}
  union {
    DependencyTrackerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DependencyTrackerArchiveDefaultTypeInternal _DependencyTrackerArchive_default_instance_;
PROTOBUF_CONSTEXPR NameTrackedReferencePair::NameTrackedReferencePair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tracked_reference_)*/nullptr
  , /*decltype(_impl_.tracked_reference_id_)*/0u} {}
struct NameTrackedReferencePairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NameTrackedReferencePairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NameTrackedReferencePairDefaultTypeInternal() {}
  union {
    NameTrackedReferencePair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NameTrackedReferencePairDefaultTypeInternal _NameTrackedReferencePair_default_instance_;
PROTOBUF_CONSTEXPR NamesByTrackedReferenceArchive::NamesByTrackedReferenceArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_tracked_reference_pair_)*/{}
  , /*decltype(_impl_.table_id_)*/nullptr} {}
struct NamesByTrackedReferenceArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NamesByTrackedReferenceArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NamesByTrackedReferenceArchiveDefaultTypeInternal() {}
  union {
    NamesByTrackedReferenceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NamesByTrackedReferenceArchiveDefaultTypeInternal _NamesByTrackedReferenceArchive_default_instance_;
PROTOBUF_CONSTEXPR NamedReferenceManagerArchive::NamedReferenceManagerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.names_by_tracked_reference_by_table_)*/{}
  , /*decltype(_impl_.reference_tracker_)*/nullptr} {}
struct NamedReferenceManagerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NamedReferenceManagerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NamedReferenceManagerArchiveDefaultTypeInternal() {}
  union {
    NamedReferenceManagerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NamedReferenceManagerArchiveDefaultTypeInternal _NamedReferenceManagerArchive_default_instance_;
PROTOBUF_CONSTEXPR CalculationEngineArchive::CalculationEngineArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.saved_locale_identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dependency_tracker_)*/nullptr
  , /*decltype(_impl_.named_reference_manager_)*/nullptr
  , /*decltype(_impl_.base_date_1904_)*/false
  , /*decltype(_impl_.excel_import_date_mode_)*/1} {}
struct CalculationEngineArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CalculationEngineArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CalculationEngineArchiveDefaultTypeInternal() {}
  union {
    CalculationEngineArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CalculationEngineArchiveDefaultTypeInternal _CalculationEngineArchive_default_instance_;
PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.row_handle_)*/0u
  , /*decltype(_impl_.column_handle_)*/0u
  , /*decltype(_impl_.row_is_sticky_)*/0u
  , /*decltype(_impl_.column_is_sticky_)*/0u} {}
struct ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ast_reference_whitespace_after_sheet_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ast_reference_whitespace_before_table_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ast_reference_whitespace_after_table_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ast_reference_whitespace_before_cell_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.table_id_)*/nullptr
  , /*decltype(_impl_.row_handle_)*/0u
  , /*decltype(_impl_.column_handle_)*/0u
  , /*decltype(_impl_.row_is_sticky_)*/0u
  , /*decltype(_impl_.column_is_sticky_)*/0u} {}
struct ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTColumnCoordinateArchive::ASTNodeArrayArchive_ASTColumnCoordinateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.column_)*/0
  , /*decltype(_impl_.absolute_)*/false} {}
struct ASTNodeArrayArchive_ASTColumnCoordinateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTColumnCoordinateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTColumnCoordinateArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTColumnCoordinateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ASTNodeArrayArchive_ASTColumnCoordinateArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTColumnCoordinateArchive_default_instance_;
PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTRowCoordinateArchive::ASTNodeArrayArchive_ASTRowCoordinateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.row_)*/0
  , /*decltype(_impl_.absolute_)*/false} {}
struct ASTNodeArrayArchive_ASTRowCoordinateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTRowCoordinateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTRowCoordinateArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTRowCoordinateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ASTNodeArrayArchive_ASTRowCoordinateArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTRowCoordinateArchive_default_instance_;
PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ast_reference_whitespace_after_sheet_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ast_reference_whitespace_before_table_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ast_reference_whitespace_after_table_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ast_reference_whitespace_before_cell_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.table_id_)*/nullptr} {}
struct ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive_default_instance_;
PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTNodeArchive::ASTNodeArrayArchive_ASTNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ast_string_node_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ast_unknown_function_node_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ast_date_node_date_time_format_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ast_whitespace_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ast_thunk_node_array_)*/nullptr
  , /*decltype(_impl_.ast_local_cell_reference_node_reference_)*/nullptr
  , /*decltype(_impl_.ast_cross_table_cell_reference_node_reference_)*/nullptr
  , /*decltype(_impl_.ast_column_)*/nullptr
  , /*decltype(_impl_.ast_row_)*/nullptr
  , /*decltype(_impl_.ast_cross_table_reference_extra_info_)*/nullptr
  , /*decltype(_impl_.ast_function_node_index_)*/0u
  , /*decltype(_impl_.ast_function_node_numargs_)*/0u
  , /*decltype(_impl_.ast_number_node_number_)*/0
  , /*decltype(_impl_.ast_date_node_datenum_)*/0
  , /*decltype(_impl_.ast_duration_node_unitnum_)*/0
  , /*decltype(_impl_.ast_duration_node_unit_)*/0
  , /*decltype(_impl_.ast_token_node_boolean_)*/false
  , /*decltype(_impl_.ast_array_node_numcol_)*/0u
  , /*decltype(_impl_.ast_array_node_numrow_)*/0u
  , /*decltype(_impl_.ast_list_node_numargs_)*/0u
  , /*decltype(_impl_.ast_unknown_function_node_numargs_)*/0u
  , /*decltype(_impl_.ast_boolean_node_boolean_)*/false
  , /*decltype(_impl_.ast_date_node_suppress_date_format_)*/false
  , /*decltype(_impl_.ast_date_node_suppress_time_format_)*/false
  , /*decltype(_impl_.ast_duration_node_use_automatic_units_)*/false
  , /*decltype(_impl_.ast_duration_node_style_)*/0u
  , /*decltype(_impl_.ast_duration_node_duration_unit_largest_)*/0u
  , /*decltype(_impl_.ast_duration_node_duration_unit_smallest_)*/0u
  , /*decltype(_impl_.ast_node_type_)*/1} {}
struct ASTNodeArrayArchive_ASTNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTNodeArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ASTNodeArrayArchive_ASTNodeArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR ASTNodeArrayArchive::ASTNodeArrayArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ast_node_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ASTNodeArrayArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ASTNodeArrayArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ASTNodeArrayArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ASTNodeArrayArchiveDefaultTypeInternal _ASTNodeArrayArchive_default_instance_;
PROTOBUF_CONSTEXPR FormulaTranslationFlagsArchive::FormulaTranslationFlagsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.excel_import_translation_)*/false
  , /*decltype(_impl_.number_to_date_coercion_removal_translation_)*/false} {}
struct FormulaTranslationFlagsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormulaTranslationFlagsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormulaTranslationFlagsArchiveDefaultTypeInternal() {}
  union {
    FormulaTranslationFlagsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormulaTranslationFlagsArchiveDefaultTypeInternal _FormulaTranslationFlagsArchive_default_instance_;
PROTOBUF_CONSTEXPR FormulaArchive::FormulaArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ast_node_array_)*/nullptr
  , /*decltype(_impl_.translation_flags_)*/nullptr
  , /*decltype(_impl_.host_column_)*/0u
  , /*decltype(_impl_.host_row_)*/0u
  , /*decltype(_impl_.host_column_is_negative_)*/false
  , /*decltype(_impl_.host_row_is_negative_)*/false} {}
struct FormulaArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormulaArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormulaArchiveDefaultTypeInternal() {}
  union {
    FormulaArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormulaArchiveDefaultTypeInternal _FormulaArchive_default_instance_;
PROTOBUF_CONSTEXPR FormatStructArchive::FormatStructArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.currency_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.date_time_format_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.format_type_)*/0u
  , /*decltype(_impl_.decimal_places_)*/0u
  , /*decltype(_impl_.negative_style_)*/0u
  , /*decltype(_impl_.duration_style_)*/0u
  , /*decltype(_impl_.base_)*/0u
  , /*decltype(_impl_.show_thousands_separator_)*/false
  , /*decltype(_impl_.use_accounting_style_)*/false
  , /*decltype(_impl_.base_use_minus_sign_)*/false
  , /*decltype(_impl_.suppress_date_format_)*/false
  , /*decltype(_impl_.base_places_)*/0u
  , /*decltype(_impl_.fraction_accuracy_)*/0u
  , /*decltype(_impl_.suppress_time_format_)*/false
  , /*decltype(_impl_.duration_unit_largest_)*/0u
  , /*decltype(_impl_.duration_unit_smallest_)*/0u} {}
struct FormatStructArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormatStructArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormatStructArchiveDefaultTypeInternal() {}
  union {
    FormatStructArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormatStructArchiveDefaultTypeInternal _FormatStructArchive_default_instance_;
PROTOBUF_CONSTEXPR RangeCoordinateArchive::RangeCoordinateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.top_left_column_)*/0u
  , /*decltype(_impl_.top_left_row_)*/0u
  , /*decltype(_impl_.bottom_right_column_)*/0u
  , /*decltype(_impl_.bottom_right_row_)*/0u} {}
struct RangeCoordinateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RangeCoordinateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RangeCoordinateArchiveDefaultTypeInternal() {}
  union {
    RangeCoordinateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RangeCoordinateArchiveDefaultTypeInternal _RangeCoordinateArchive_default_instance_;
PROTOBUF_CONSTEXPR TectonicShiftArchive::TectonicShiftArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.range_for_shift_)*/nullptr
  , /*decltype(_impl_.range_for_deletion_)*/nullptr
  , /*decltype(_impl_.inserted_range_)*/nullptr
  , /*decltype(_impl_.table_range_)*/nullptr
  , /*decltype(_impl_.table_id_)*/nullptr
  , /*decltype(_impl_.grid_coordinate_offset_x_)*/0u
  , /*decltype(_impl_.grid_coordinate_offset_y_)*/0u
  , /*decltype(_impl_.grid_coordinate_offset_x_is_negative_)*/false
  , /*decltype(_impl_.grid_coordinate_offset_y_is_negative_)*/false
  , /*decltype(_impl_.apply_to_absolute_)*/false
  , /*decltype(_impl_.inserting_after_)*/false
  , /*decltype(_impl_.ignore_sticky_bits_)*/false} {}
struct TectonicShiftArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TectonicShiftArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TectonicShiftArchiveDefaultTypeInternal() {}
  union {
    TectonicShiftArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TectonicShiftArchiveDefaultTypeInternal _TectonicShiftArchive_default_instance_;
PROTOBUF_CONSTEXPR RewriteSortMappingArchive::RewriteSortMappingArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.table_id_)*/nullptr
  , /*decltype(_impl_.shuffle_mapping_)*/nullptr
  , /*decltype(_impl_.explode_ranges_)*/false} {}
struct RewriteSortMappingArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RewriteSortMappingArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RewriteSortMappingArchiveDefaultTypeInternal() {}
  union {
    RewriteSortMappingArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RewriteSortMappingArchiveDefaultTypeInternal _RewriteSortMappingArchive_default_instance_;
PROTOBUF_CONSTEXPR RangeMovedInfoArchive::RangeMovedInfoArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.table_id_)*/nullptr
  , /*decltype(_impl_.from_range_)*/nullptr
  , /*decltype(_impl_.to_range_)*/nullptr
  , /*decltype(_impl_.from_range_reference_)*/nullptr
  , /*decltype(_impl_.to_range_reference_)*/nullptr} {}
struct RangeMovedInfoArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RangeMovedInfoArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RangeMovedInfoArchiveDefaultTypeInternal() {}
  union {
    RangeMovedInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RangeMovedInfoArchiveDefaultTypeInternal _RangeMovedInfoArchive_default_instance_;
PROTOBUF_CONSTEXPR TableResizedInfoArchive::TableResizedInfoArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.table_id_)*/nullptr
  , /*decltype(_impl_.new_table_size_)*/nullptr
  , /*decltype(_impl_.old_table_size_)*/nullptr} {}
struct TableResizedInfoArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableResizedInfoArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableResizedInfoArchiveDefaultTypeInternal() {}
  union {
    TableResizedInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableResizedInfoArchiveDefaultTypeInternal _TableResizedInfoArchive_default_instance_;
PROTOBUF_CONSTEXPR CellMergeInfoArchive::CellMergeInfoArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.table_id_)*/nullptr
  , /*decltype(_impl_.merged_range_)*/nullptr} {}
struct CellMergeInfoArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellMergeInfoArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellMergeInfoArchiveDefaultTypeInternal() {}
  union {
    CellMergeInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellMergeInfoArchiveDefaultTypeInternal _CellMergeInfoArchive_default_instance_;
PROTOBUF_CONSTEXPR FormulaRewriteSpecArchive::FormulaRewriteSpecArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tectonic_shift_)*/nullptr
  , /*decltype(_impl_.sort_mapping_)*/nullptr
  , /*decltype(_impl_.range_moved_info_)*/nullptr
  , /*decltype(_impl_.deleted_owner_id_)*/nullptr
  , /*decltype(_impl_.table_resized_info_)*/nullptr
  , /*decltype(_impl_.cell_merge_info_)*/nullptr
  , /*decltype(_impl_.rewrite_type_)*/1} {}
struct FormulaRewriteSpecArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormulaRewriteSpecArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormulaRewriteSpecArchiveDefaultTypeInternal() {}
  union {
    FormulaRewriteSpecArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormulaRewriteSpecArchiveDefaultTypeInternal _FormulaRewriteSpecArchive_default_instance_;
PROTOBUF_CONSTEXPR CellCoordinateFormulaPairArchive::CellCoordinateFormulaPairArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.formula_)*/nullptr
  , /*decltype(_impl_.column_)*/0u
  , /*decltype(_impl_.row_)*/0u} {}
struct CellCoordinateFormulaPairArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellCoordinateFormulaPairArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellCoordinateFormulaPairArchiveDefaultTypeInternal() {}
  union {
    CellCoordinateFormulaPairArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellCoordinateFormulaPairArchiveDefaultTypeInternal _CellCoordinateFormulaPairArchive_default_instance_;
PROTOBUF_CONSTEXPR CellCoordinateArchive::CellCoordinateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.packeddata_)*/0u
  , /*decltype(_impl_.column_)*/0u
  , /*decltype(_impl_.row_)*/0u} {}
struct CellCoordinateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellCoordinateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellCoordinateArchiveDefaultTypeInternal() {}
  union {
    CellCoordinateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellCoordinateArchiveDefaultTypeInternal _CellCoordinateArchive_default_instance_;
PROTOBUF_CONSTEXPR CellCoordinateVectorArchive::CellCoordinateVectorArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cell_coordinate_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CellCoordinateVectorArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellCoordinateVectorArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellCoordinateVectorArchiveDefaultTypeInternal() {}
  union {
    CellCoordinateVectorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellCoordinateVectorArchiveDefaultTypeInternal _CellCoordinateVectorArchive_default_instance_;
PROTOBUF_CONSTEXPR CellCoordinateObjectPairArchive::CellCoordinateObjectPairArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cell_coordinate_)*/nullptr
  , /*decltype(_impl_.object_)*/nullptr} {}
struct CellCoordinateObjectPairArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellCoordinateObjectPairArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellCoordinateObjectPairArchiveDefaultTypeInternal() {}
  union {
    CellCoordinateObjectPairArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellCoordinateObjectPairArchiveDefaultTypeInternal _CellCoordinateObjectPairArchive_default_instance_;
PROTOBUF_CONSTEXPR CellCoordinateObjectMapArchive::CellCoordinateObjectMapArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cell_coordinate_object_pair_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CellCoordinateObjectMapArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellCoordinateObjectMapArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellCoordinateObjectMapArchiveDefaultTypeInternal() {}
  union {
    CellCoordinateObjectMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellCoordinateObjectMapArchiveDefaultTypeInternal _CellCoordinateObjectMapArchive_default_instance_;
PROTOBUF_CONSTEXPR OwnerFormulaMapArchive::OwnerFormulaMapArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.coordinate_formula_pair_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OwnerFormulaMapArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OwnerFormulaMapArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OwnerFormulaMapArchiveDefaultTypeInternal() {}
  union {
    OwnerFormulaMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OwnerFormulaMapArchiveDefaultTypeInternal _OwnerFormulaMapArchive_default_instance_;
PROTOBUF_CONSTEXPR FormulaRewriteCommandArchive::FormulaRewriteCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.table_rewrite_command_)*/nullptr
  , /*decltype(_impl_.super_)*/nullptr} {}
struct FormulaRewriteCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormulaRewriteCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormulaRewriteCommandArchiveDefaultTypeInternal() {}
  union {
    FormulaRewriteCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormulaRewriteCommandArchiveDefaultTypeInternal _FormulaRewriteCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR NumberTrackedReferencePairArchive::NumberTrackedReferencePairArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tracked_reference_)*/nullptr
  , /*decltype(_impl_.number_)*/0u} {}
struct NumberTrackedReferencePairArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NumberTrackedReferencePairArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NumberTrackedReferencePairArchiveDefaultTypeInternal() {}
  union {
    NumberTrackedReferencePairArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NumberTrackedReferencePairArchiveDefaultTypeInternal _NumberTrackedReferencePairArchive_default_instance_;
PROTOBUF_CONSTEXPR NumberToTrackedReferenceMapArchive::NumberToTrackedReferenceMapArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.number_tracked_reference_pair_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NumberToTrackedReferenceMapArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NumberToTrackedReferenceMapArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NumberToTrackedReferenceMapArchiveDefaultTypeInternal() {}
  union {
    NumberToTrackedReferenceMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NumberToTrackedReferenceMapArchiveDefaultTypeInternal _NumberToTrackedReferenceMapArchive_default_instance_;
PROTOBUF_CONSTEXPR TrackedReferencesRewriteCommandArchive::TrackedReferencesRewriteCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.references_in_reference_tracker_)*/nullptr
  , /*decltype(_impl_.original_tracked_reference_copies_)*/nullptr
  , /*decltype(_impl_.rewrite_spec_)*/nullptr
  , /*decltype(_impl_.reference_tracker_)*/nullptr
  , /*decltype(_impl_.super_)*/nullptr} {}
struct TrackedReferencesRewriteCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackedReferencesRewriteCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackedReferencesRewriteCommandArchiveDefaultTypeInternal() {}
  union {
    TrackedReferencesRewriteCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackedReferencesRewriteCommandArchiveDefaultTypeInternal _TrackedReferencesRewriteCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR TrackedReferenceArchive::TrackedReferenceArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ast_)*/nullptr
  , /*decltype(_impl_.formula_id_)*/0u} {}
struct TrackedReferenceArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackedReferenceArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackedReferenceArchiveDefaultTypeInternal() {}
  union {
    TrackedReferenceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackedReferenceArchiveDefaultTypeInternal _TrackedReferenceArchive_default_instance_;
PROTOBUF_CONSTEXPR ReferenceTrackerArchive::ReferenceTrackerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tracked_reference_)*/{}
  , /*decltype(_impl_.contained_tracked_reference_)*/{}
  , /*decltype(_impl_.uuid_)*/nullptr} {}
struct ReferenceTrackerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReferenceTrackerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReferenceTrackerArchiveDefaultTypeInternal() {}
  union {
    ReferenceTrackerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReferenceTrackerArchiveDefaultTypeInternal _ReferenceTrackerArchive_default_instance_;
PROTOBUF_CONSTEXPR BooleanCellValueArchive::BooleanCellValueArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/false} {}
struct BooleanCellValueArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BooleanCellValueArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BooleanCellValueArchiveDefaultTypeInternal() {}
  union {
    BooleanCellValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BooleanCellValueArchiveDefaultTypeInternal _BooleanCellValueArchive_default_instance_;
PROTOBUF_CONSTEXPR DateCellValueArchive::DateCellValueArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.format_)*/nullptr
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.format_is_implicit_)*/true} {}
struct DateCellValueArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DateCellValueArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DateCellValueArchiveDefaultTypeInternal() {}
  union {
    DateCellValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DateCellValueArchiveDefaultTypeInternal _DateCellValueArchive_default_instance_;
PROTOBUF_CONSTEXPR NumberCellValueArchive::NumberCellValueArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.format_)*/nullptr
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.unit_)*/0
  , /*decltype(_impl_.format_is_implicit_)*/true} {}
struct NumberCellValueArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NumberCellValueArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NumberCellValueArchiveDefaultTypeInternal() {}
  union {
    NumberCellValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NumberCellValueArchiveDefaultTypeInternal _NumberCellValueArchive_default_instance_;
PROTOBUF_CONSTEXPR StringCellValueArchive::StringCellValueArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.format_)*/nullptr
  , /*decltype(_impl_.format_is_implicit_)*/true} {}
struct StringCellValueArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringCellValueArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringCellValueArchiveDefaultTypeInternal() {}
  union {
    StringCellValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringCellValueArchiveDefaultTypeInternal _StringCellValueArchive_default_instance_;
PROTOBUF_CONSTEXPR CellValueArchive::CellValueArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.boolean_value_)*/nullptr
  , /*decltype(_impl_.date_value_)*/nullptr
  , /*decltype(_impl_.number_value_)*/nullptr
  , /*decltype(_impl_.string_value_)*/nullptr
  , /*decltype(_impl_.cell_value_type_)*/1} {}
struct CellValueArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellValueArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellValueArchiveDefaultTypeInternal() {}
  union {
    CellValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellValueArchiveDefaultTypeInternal _CellValueArchive_default_instance_;
}  // namespace TSCE
static ::_pb::Metadata file_level_metadata_TSCEArchives_2eproto[63];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_TSCEArchives_2eproto[6];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_TSCEArchives_2eproto = nullptr;

const uint32_t TableStruct_TSCEArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TSCE::CFUUIDArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CFUUIDArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CFUUIDArchive, _impl_.uuid_bytes_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CFUUIDArchive, _impl_.uuid_w0_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CFUUIDArchive, _impl_.uuid_w1_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CFUUIDArchive, _impl_.uuid_w2_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CFUUIDArchive, _impl_.uuid_w3_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCE::CellReferenceArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellReferenceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellReferenceArchive, _impl_.column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellReferenceArchive, _impl_.row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellReferenceArchive, _impl_.table_id_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalCellReferenceArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalCellReferenceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalCellReferenceArchive, _impl_.coordinate_),
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalCellReferenceArchive, _impl_.owner_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeReferenceArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeReferenceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeReferenceArchive, _impl_.table_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeReferenceArchive, _impl_.top_left_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeReferenceArchive, _impl_.top_left_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeReferenceArchive, _impl_.bottom_right_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeReferenceArchive, _impl_.bottom_right_row_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalRangeReferenceArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalRangeReferenceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalRangeReferenceArchive, _impl_.owner_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalRangeReferenceArchive, _impl_.range_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferenceArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferenceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferenceArchive, _impl_.reference_type_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferenceArchive, _impl_.cell_reference_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferenceArchive, _impl_.range_reference_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgeArchive, _impl_.column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgeArchive, _impl_.row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgeArchive, _impl_.is_precedent_),
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgeArchive, _impl_.owner_id_),
  1,
  2,
  3,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgesArchive, _impl_.packed_edge_without_owner_),
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgesArchive, _impl_.packed_edge_with_owner_),
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgesArchive, _impl_.owner_id_for_edge_),
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgesArchive, _impl_.internal_owner_id_for_edge_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, _impl_.column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, _impl_.row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, _impl_.dirty_self_plus_precedents_count_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, _impl_.is_in_a_cycle_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, _impl_.edge_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, _impl_.contains_a_formula_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, _impl_.has_calculated_precedents_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, _impl_.calculate_precedents_on_next_recalc_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, _impl_.translate_for_excel_import_on_next_recalc_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, _impl_.edges_),
  1,
  2,
  3,
  4,
  ~0u,
  8,
  5,
  6,
  7,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::CellDependenciesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellDependenciesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellDependenciesArchive, _impl_.cell_record_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellDependenciesArchive, _impl_.num_dirty_cells_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.volatile_time_cell_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.volatile_time_cell_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.volatile_random_cell_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.volatile_random_cell_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.volatile_locale_cell_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.volatile_locale_cell_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.volatile_location_cell_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.volatile_location_cell_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.volatile_compass_cell_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.volatile_compass_cell_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.calculated_dependency_cell_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.calculated_dependency_cell_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.volatile_geometry_cell_reference_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.volatile_geometry_cell_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeBackDependencyArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeBackDependencyArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeBackDependencyArchive, _impl_.cell_coord_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeBackDependencyArchive, _impl_.cell_coord_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeBackDependencyArchive, _impl_.range_reference_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeBackDependencyArchive, _impl_.internal_range_reference_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeInternalNodeContentsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeInternalNodeContentsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeInternalNodeContentsArchive, _impl_.min_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeInternalNodeContentsArchive, _impl_.max_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeInternalNodeContentsArchive, _impl_.child_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeLeafNodeContentsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeLeafNodeContentsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeLeafNodeContentsArchive, _impl_.min_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeLeafNodeContentsArchive, _impl_.max_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeLeafNodeContentsArchive, _impl_.cell_reference_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeNodeArchive, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeNodeArchive, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeNodeArchive, _impl_.internal_node_contents_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeNodeArchive, _impl_.leaf_node_contents_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeArchive, _impl_.data_file_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeArchive, _impl_.data_size_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeArchive, _impl_.data_num_dims_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeArchive, _impl_.data_elem_size_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeArchive, _impl_.data_elem_real_size_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeArchive, _impl_.data_max_nodes_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeArchive, _impl_.data_min_nodes_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeArchive, _impl_.root_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeDependenciesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeDependenciesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeDependenciesArchive, _impl_.r_tree_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeDependenciesArchive, _impl_.back_dependency_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells, _impl_.column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells, _impl_.range_context_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells, _impl_.cell_coordinate_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells, _impl_.column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells, _impl_.range_context_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells, _impl_.internal_cell_reference_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive, _impl_.column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive, _impl_.range_context_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive, _impl_.cell_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive, _impl_.total_range_for_deleted_table_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive, _impl_.body_range_for_deleted_table_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive, _impl_.referring_column_to_local_cells_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive, _impl_.referring_column_to_remote_cells_),
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::WholeOwnerDependenciesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::WholeOwnerDependenciesArchive, _impl_.dependent_cell_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, _impl_.formula_owner_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, _impl_.cell_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, _impl_.range_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, _impl_.volatile_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, _impl_.spanning_column_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, _impl_.spanning_row_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, _impl_.whole_owner_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, _impl_.formula_owner_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  6,
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry, _impl_.internal_owner_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry, _impl_.owner_id_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerIDMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerIDMapArchive, _impl_.map_entry_),
  PROTOBUF_FIELD_OFFSET(::TSCE::DependencyTrackerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::DependencyTrackerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::DependencyTrackerArchive, _impl_.formula_owner_info_),
  PROTOBUF_FIELD_OFFSET(::TSCE::DependencyTrackerArchive, _impl_.dirty_leaf_),
  PROTOBUF_FIELD_OFFSET(::TSCE::DependencyTrackerArchive, _impl_.internal_dirty_leaf_),
  PROTOBUF_FIELD_OFFSET(::TSCE::DependencyTrackerArchive, _impl_.owner_id_map_),
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::NameTrackedReferencePair, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NameTrackedReferencePair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::NameTrackedReferencePair, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NameTrackedReferencePair, _impl_.tracked_reference_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NameTrackedReferencePair, _impl_.tracked_reference_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCE::NamesByTrackedReferenceArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NamesByTrackedReferenceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::NamesByTrackedReferenceArchive, _impl_.table_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NamesByTrackedReferenceArchive, _impl_.name_tracked_reference_pair_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::NamedReferenceManagerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NamedReferenceManagerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::NamedReferenceManagerArchive, _impl_.reference_tracker_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NamedReferenceManagerArchive, _impl_.names_by_tracked_reference_by_table_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, _impl_.base_date_1904_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, _impl_.dependency_tracker_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, _impl_.named_reference_manager_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, _impl_.excel_import_date_mode_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, _impl_.saved_locale_identifier_),
  3,
  1,
  2,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive, _impl_.row_handle_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive, _impl_.column_handle_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive, _impl_.row_is_sticky_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive, _impl_.column_is_sticky_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, _impl_.row_handle_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, _impl_.column_handle_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, _impl_.row_is_sticky_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, _impl_.column_is_sticky_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, _impl_.table_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, _impl_.ast_reference_whitespace_after_sheet_name_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, _impl_.ast_reference_whitespace_before_table_name_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, _impl_.ast_reference_whitespace_after_table_name_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, _impl_.ast_reference_whitespace_before_cell_address_),
  5,
  6,
  7,
  8,
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive, _impl_.column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive, _impl_.absolute_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive, _impl_.row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive, _impl_.absolute_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive, _impl_.table_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive, _impl_.ast_reference_whitespace_after_sheet_name_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive, _impl_.ast_reference_whitespace_before_table_name_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive, _impl_.ast_reference_whitespace_after_table_name_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive, _impl_.ast_reference_whitespace_before_cell_address_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_node_type_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_function_node_index_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_function_node_numargs_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_number_node_number_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_boolean_node_boolean_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_string_node_string_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_date_node_datenum_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_date_node_suppress_date_format_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_date_node_suppress_time_format_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_date_node_date_time_format_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_duration_node_unitnum_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_duration_node_unit_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_duration_node_style_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_duration_node_duration_unit_largest_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_duration_node_duration_unit_smallest_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_duration_node_use_automatic_units_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_token_node_boolean_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_array_node_numcol_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_array_node_numrow_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_list_node_numargs_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_thunk_node_array_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_local_cell_reference_node_reference_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_cross_table_cell_reference_node_reference_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_unknown_function_node_string_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_unknown_function_node_numargs_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_whitespace_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_cross_table_reference_extra_info_),
  28,
  10,
  11,
  12,
  21,
  0,
  13,
  22,
  23,
  2,
  14,
  15,
  25,
  26,
  27,
  24,
  16,
  17,
  18,
  19,
  4,
  5,
  6,
  1,
  20,
  3,
  7,
  8,
  9,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive, _impl_.ast_node_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaTranslationFlagsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaTranslationFlagsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaTranslationFlagsArchive, _impl_.excel_import_translation_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaTranslationFlagsArchive, _impl_.number_to_date_coercion_removal_translation_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaArchive, _impl_.ast_node_array_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaArchive, _impl_.host_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaArchive, _impl_.host_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaArchive, _impl_.host_column_is_negative_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaArchive, _impl_.host_row_is_negative_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaArchive, _impl_.translation_flags_),
  0,
  2,
  3,
  4,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.format_type_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.decimal_places_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.currency_code_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.negative_style_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.show_thousands_separator_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.use_accounting_style_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.duration_style_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.base_places_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.base_use_minus_sign_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.fraction_accuracy_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.suppress_date_format_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.suppress_time_format_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.date_time_format_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.duration_unit_largest_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.duration_unit_smallest_),
  2,
  3,
  0,
  4,
  7,
  8,
  5,
  6,
  11,
  9,
  12,
  10,
  13,
  1,
  14,
  15,
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeCoordinateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeCoordinateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeCoordinateArchive, _impl_.top_left_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeCoordinateArchive, _impl_.top_left_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeCoordinateArchive, _impl_.bottom_right_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeCoordinateArchive, _impl_.bottom_right_row_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::TectonicShiftArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TectonicShiftArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::TectonicShiftArchive, _impl_.grid_coordinate_offset_x_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TectonicShiftArchive, _impl_.grid_coordinate_offset_y_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TectonicShiftArchive, _impl_.grid_coordinate_offset_x_is_negative_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TectonicShiftArchive, _impl_.grid_coordinate_offset_y_is_negative_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TectonicShiftArchive, _impl_.range_for_shift_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TectonicShiftArchive, _impl_.range_for_deletion_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TectonicShiftArchive, _impl_.inserted_range_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TectonicShiftArchive, _impl_.apply_to_absolute_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TectonicShiftArchive, _impl_.inserting_after_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TectonicShiftArchive, _impl_.ignore_sticky_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TectonicShiftArchive, _impl_.table_range_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TectonicShiftArchive, _impl_.table_id_),
  5,
  6,
  7,
  8,
  0,
  1,
  2,
  9,
  10,
  11,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteSortMappingArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteSortMappingArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteSortMappingArchive, _impl_.table_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteSortMappingArchive, _impl_.shuffle_mapping_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteSortMappingArchive, _impl_.explode_ranges_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeMovedInfoArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeMovedInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeMovedInfoArchive, _impl_.table_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeMovedInfoArchive, _impl_.from_range_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeMovedInfoArchive, _impl_.to_range_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeMovedInfoArchive, _impl_.from_range_reference_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeMovedInfoArchive, _impl_.to_range_reference_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCE::TableResizedInfoArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TableResizedInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::TableResizedInfoArchive, _impl_.table_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TableResizedInfoArchive, _impl_.new_table_size_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TableResizedInfoArchive, _impl_.old_table_size_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCE::CellMergeInfoArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellMergeInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellMergeInfoArchive, _impl_.table_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellMergeInfoArchive, _impl_.merged_range_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteSpecArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteSpecArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteSpecArchive, _impl_.rewrite_type_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteSpecArchive, _impl_.tectonic_shift_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteSpecArchive, _impl_.sort_mapping_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteSpecArchive, _impl_.range_moved_info_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteSpecArchive, _impl_.deleted_owner_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteSpecArchive, _impl_.table_resized_info_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteSpecArchive, _impl_.cell_merge_info_),
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateFormulaPairArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateFormulaPairArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateFormulaPairArchive, _impl_.column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateFormulaPairArchive, _impl_.row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateFormulaPairArchive, _impl_.formula_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateArchive, _impl_.packeddata_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateArchive, _impl_.column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateArchive, _impl_.row_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateVectorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateVectorArchive, _impl_.cell_coordinate_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateObjectPairArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateObjectPairArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateObjectPairArchive, _impl_.cell_coordinate_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateObjectPairArchive, _impl_.object_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateObjectMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateObjectMapArchive, _impl_.cell_coordinate_object_pair_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerFormulaMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerFormulaMapArchive, _impl_.coordinate_formula_pair_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteCommandArchive, _impl_.table_rewrite_command_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteCommandArchive, _impl_.super_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberTrackedReferencePairArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberTrackedReferencePairArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberTrackedReferencePairArchive, _impl_.number_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberTrackedReferencePairArchive, _impl_.tracked_reference_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberToTrackedReferenceMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberToTrackedReferenceMapArchive, _impl_.number_tracked_reference_pair_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferencesRewriteCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferencesRewriteCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferencesRewriteCommandArchive, _impl_.references_in_reference_tracker_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferencesRewriteCommandArchive, _impl_.original_tracked_reference_copies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferencesRewriteCommandArchive, _impl_.rewrite_spec_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferencesRewriteCommandArchive, _impl_.reference_tracker_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferencesRewriteCommandArchive, _impl_.super_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferenceArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferenceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferenceArchive, _impl_.ast_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferenceArchive, _impl_.formula_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferenceTrackerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferenceTrackerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferenceTrackerArchive, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferenceTrackerArchive, _impl_.tracked_reference_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferenceTrackerArchive, _impl_.contained_tracked_reference_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::BooleanCellValueArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::BooleanCellValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::BooleanCellValueArchive, _impl_.value_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::DateCellValueArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::DateCellValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::DateCellValueArchive, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::TSCE::DateCellValueArchive, _impl_.format_),
  PROTOBUF_FIELD_OFFSET(::TSCE::DateCellValueArchive, _impl_.format_is_implicit_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberCellValueArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberCellValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberCellValueArchive, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberCellValueArchive, _impl_.unit_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberCellValueArchive, _impl_.format_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberCellValueArchive, _impl_.format_is_implicit_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::StringCellValueArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::StringCellValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::StringCellValueArchive, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::TSCE::StringCellValueArchive, _impl_.format_),
  PROTOBUF_FIELD_OFFSET(::TSCE::StringCellValueArchive, _impl_.format_is_implicit_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCE::CellValueArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellValueArchive, _impl_.cell_value_type_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellValueArchive, _impl_.boolean_value_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellValueArchive, _impl_.date_value_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellValueArchive, _impl_.number_value_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellValueArchive, _impl_.string_value_),
  4,
  0,
  1,
  2,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::TSCE::CFUUIDArchive)},
  { 16, 25, -1, sizeof(::TSCE::CellReferenceArchive)},
  { 28, 36, -1, sizeof(::TSCE::InternalCellReferenceArchive)},
  { 38, 49, -1, sizeof(::TSCE::RangeReferenceArchive)},
  { 54, 62, -1, sizeof(::TSCE::InternalRangeReferenceArchive)},
  { 64, 73, -1, sizeof(::TSCE::ReferenceArchive)},
  { 76, 86, -1, sizeof(::TSCE::EdgeArchive)},
  { 90, -1, -1, sizeof(::TSCE::EdgesArchive)},
  { 100, 116, -1, sizeof(::TSCE::CellRecordArchive)},
  { 126, 134, -1, sizeof(::TSCE::CellDependenciesArchive)},
  { 136, -1, -1, sizeof(::TSCE::VolatileDependenciesArchive)},
  { 156, 166, -1, sizeof(::TSCE::RangeBackDependencyArchive)},
  { 170, 179, -1, sizeof(::TSCE::RTreeInternalNodeContentsArchive)},
  { 182, 191, -1, sizeof(::TSCE::RTreeLeafNodeContentsArchive)},
  { 194, 204, -1, sizeof(::TSCE::RTreeNodeArchive)},
  { 208, 222, -1, sizeof(::TSCE::RTreeArchive)},
  { 230, 238, -1, sizeof(::TSCE::RangeDependenciesArchive)},
  { 240, 249, -1, sizeof(::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells)},
  { 252, 261, -1, sizeof(::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells)},
  { 264, 277, -1, sizeof(::TSCE::SpanningDependenciesArchive)},
  { 284, -1, -1, sizeof(::TSCE::WholeOwnerDependenciesArchive)},
  { 291, 305, -1, sizeof(::TSCE::FormulaOwnerInfoArchive)},
  { 313, 321, -1, sizeof(::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry)},
  { 323, -1, -1, sizeof(::TSCE::OwnerIDMapArchive)},
  { 330, 340, -1, sizeof(::TSCE::DependencyTrackerArchive)},
  { 344, 353, -1, sizeof(::TSCE::NameTrackedReferencePair)},
  { 356, 364, -1, sizeof(::TSCE::NamesByTrackedReferenceArchive)},
  { 366, 374, -1, sizeof(::TSCE::NamedReferenceManagerArchive)},
  { 376, 387, -1, sizeof(::TSCE::CalculationEngineArchive)},
  { 392, 402, -1, sizeof(::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive)},
  { 406, 421, -1, sizeof(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive)},
  { 430, 438, -1, sizeof(::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive)},
  { 440, 448, -1, sizeof(::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive)},
  { 450, 461, -1, sizeof(::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive)},
  { 466, 501, -1, sizeof(::TSCE::ASTNodeArrayArchive_ASTNodeArchive)},
  { 530, -1, -1, sizeof(::TSCE::ASTNodeArrayArchive)},
  { 537, 545, -1, sizeof(::TSCE::FormulaTranslationFlagsArchive)},
  { 547, 559, -1, sizeof(::TSCE::FormulaArchive)},
  { 565, 587, -1, sizeof(::TSCE::FormatStructArchive)},
  { 603, 613, -1, sizeof(::TSCE::RangeCoordinateArchive)},
  { 617, 635, -1, sizeof(::TSCE::TectonicShiftArchive)},
  { 647, 656, -1, sizeof(::TSCE::RewriteSortMappingArchive)},
  { 659, 670, -1, sizeof(::TSCE::RangeMovedInfoArchive)},
  { 675, 684, -1, sizeof(::TSCE::TableResizedInfoArchive)},
  { 687, 695, -1, sizeof(::TSCE::CellMergeInfoArchive)},
  { 697, 710, -1, sizeof(::TSCE::FormulaRewriteSpecArchive)},
  { 717, 726, -1, sizeof(::TSCE::CellCoordinateFormulaPairArchive)},
  { 729, 738, -1, sizeof(::TSCE::CellCoordinateArchive)},
  { 741, -1, -1, sizeof(::TSCE::CellCoordinateVectorArchive)},
  { 748, 756, -1, sizeof(::TSCE::CellCoordinateObjectPairArchive)},
  { 758, -1, -1, sizeof(::TSCE::CellCoordinateObjectMapArchive)},
  { 765, -1, -1, sizeof(::TSCE::OwnerFormulaMapArchive)},
  { 772, 780, -1, sizeof(::TSCE::FormulaRewriteCommandArchive)},
  { 782, 790, -1, sizeof(::TSCE::NumberTrackedReferencePairArchive)},
  { 792, -1, -1, sizeof(::TSCE::NumberToTrackedReferenceMapArchive)},
  { 799, 810, -1, sizeof(::TSCE::TrackedReferencesRewriteCommandArchive)},
  { 815, 823, -1, sizeof(::TSCE::TrackedReferenceArchive)},
  { 825, 834, -1, sizeof(::TSCE::ReferenceTrackerArchive)},
  { 837, 844, -1, sizeof(::TSCE::BooleanCellValueArchive)},
  { 845, 854, -1, sizeof(::TSCE::DateCellValueArchive)},
  { 857, 867, -1, sizeof(::TSCE::NumberCellValueArchive)},
  { 871, 880, -1, sizeof(::TSCE::StringCellValueArchive)},
  { 883, 894, -1, sizeof(::TSCE::CellValueArchive)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::TSCE::_CFUUIDArchive_default_instance_._instance,
  &::TSCE::_CellReferenceArchive_default_instance_._instance,
  &::TSCE::_InternalCellReferenceArchive_default_instance_._instance,
  &::TSCE::_RangeReferenceArchive_default_instance_._instance,
  &::TSCE::_InternalRangeReferenceArchive_default_instance_._instance,
  &::TSCE::_ReferenceArchive_default_instance_._instance,
  &::TSCE::_EdgeArchive_default_instance_._instance,
  &::TSCE::_EdgesArchive_default_instance_._instance,
  &::TSCE::_CellRecordArchive_default_instance_._instance,
  &::TSCE::_CellDependenciesArchive_default_instance_._instance,
  &::TSCE::_VolatileDependenciesArchive_default_instance_._instance,
  &::TSCE::_RangeBackDependencyArchive_default_instance_._instance,
  &::TSCE::_RTreeInternalNodeContentsArchive_default_instance_._instance,
  &::TSCE::_RTreeLeafNodeContentsArchive_default_instance_._instance,
  &::TSCE::_RTreeNodeArchive_default_instance_._instance,
  &::TSCE::_RTreeArchive_default_instance_._instance,
  &::TSCE::_RangeDependenciesArchive_default_instance_._instance,
  &::TSCE::_SpanningDependenciesArchive_ReferringColumnToLocalCells_default_instance_._instance,
  &::TSCE::_SpanningDependenciesArchive_ReferringColumnToRemoteCells_default_instance_._instance,
  &::TSCE::_SpanningDependenciesArchive_default_instance_._instance,
  &::TSCE::_WholeOwnerDependenciesArchive_default_instance_._instance,
  &::TSCE::_FormulaOwnerInfoArchive_default_instance_._instance,
  &::TSCE::_OwnerIDMapArchive_OwnerIDMapArchiveEntry_default_instance_._instance,
  &::TSCE::_OwnerIDMapArchive_default_instance_._instance,
  &::TSCE::_DependencyTrackerArchive_default_instance_._instance,
  &::TSCE::_NameTrackedReferencePair_default_instance_._instance,
  &::TSCE::_NamesByTrackedReferenceArchive_default_instance_._instance,
  &::TSCE::_NamedReferenceManagerArchive_default_instance_._instance,
  &::TSCE::_CalculationEngineArchive_default_instance_._instance,
  &::TSCE::_ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive_default_instance_._instance,
  &::TSCE::_ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive_default_instance_._instance,
  &::TSCE::_ASTNodeArrayArchive_ASTColumnCoordinateArchive_default_instance_._instance,
  &::TSCE::_ASTNodeArrayArchive_ASTRowCoordinateArchive_default_instance_._instance,
  &::TSCE::_ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive_default_instance_._instance,
  &::TSCE::_ASTNodeArrayArchive_ASTNodeArchive_default_instance_._instance,
  &::TSCE::_ASTNodeArrayArchive_default_instance_._instance,
  &::TSCE::_FormulaTranslationFlagsArchive_default_instance_._instance,
  &::TSCE::_FormulaArchive_default_instance_._instance,
  &::TSCE::_FormatStructArchive_default_instance_._instance,
  &::TSCE::_RangeCoordinateArchive_default_instance_._instance,
  &::TSCE::_TectonicShiftArchive_default_instance_._instance,
  &::TSCE::_RewriteSortMappingArchive_default_instance_._instance,
  &::TSCE::_RangeMovedInfoArchive_default_instance_._instance,
  &::TSCE::_TableResizedInfoArchive_default_instance_._instance,
  &::TSCE::_CellMergeInfoArchive_default_instance_._instance,
  &::TSCE::_FormulaRewriteSpecArchive_default_instance_._instance,
  &::TSCE::_CellCoordinateFormulaPairArchive_default_instance_._instance,
  &::TSCE::_CellCoordinateArchive_default_instance_._instance,
  &::TSCE::_CellCoordinateVectorArchive_default_instance_._instance,
  &::TSCE::_CellCoordinateObjectPairArchive_default_instance_._instance,
  &::TSCE::_CellCoordinateObjectMapArchive_default_instance_._instance,
  &::TSCE::_OwnerFormulaMapArchive_default_instance_._instance,
  &::TSCE::_FormulaRewriteCommandArchive_default_instance_._instance,
  &::TSCE::_NumberTrackedReferencePairArchive_default_instance_._instance,
  &::TSCE::_NumberToTrackedReferenceMapArchive_default_instance_._instance,
  &::TSCE::_TrackedReferencesRewriteCommandArchive_default_instance_._instance,
  &::TSCE::_TrackedReferenceArchive_default_instance_._instance,
  &::TSCE::_ReferenceTrackerArchive_default_instance_._instance,
  &::TSCE::_BooleanCellValueArchive_default_instance_._instance,
  &::TSCE::_DateCellValueArchive_default_instance_._instance,
  &::TSCE::_NumberCellValueArchive_default_instance_._instance,
  &::TSCE::_StringCellValueArchive_default_instance_._instance,
  &::TSCE::_CellValueArchive_default_instance_._instance,
};

const char descriptor_table_protodef_TSCEArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022TSCEArchives.proto\022\004TSCE\032\021TSPMessages."
  "proto\032\021TSKArchives.proto\"g\n\rCFUUIDArchiv"
  "e\022\022\n\nuuid_bytes\030\001 \001(\014\022\017\n\007uuid_w0\030\002 \001(\r\022\017"
  "\n\007uuid_w1\030\003 \001(\r\022\017\n\007uuid_w2\030\004 \001(\r\022\017\n\007uuid"
  "_w3\030\005 \001(\r\"Z\n\024CellReferenceArchive\022\016\n\006col"
  "umn\030\001 \002(\r\022\013\n\003row\030\002 \002(\r\022%\n\010table_id\030\003 \002(\013"
  "2\023.TSCE.CFUUIDArchive\"a\n\034InternalCellRef"
  "erenceArchive\022/\n\ncoordinate\030\001 \002(\0132\033.TSCE"
  ".CellCoordinateArchive\022\020\n\010owner_id\030\002 \002(\r"
  "\"\244\001\n\025RangeReferenceArchive\022%\n\010table_id\030\001"
  " \002(\0132\023.TSCE.CFUUIDArchive\022\027\n\017top_left_co"
  "lumn\030\002 \002(\r\022\024\n\014top_left_row\030\003 \002(\r\022\033\n\023bott"
  "om_right_column\030\004 \002(\r\022\030\n\020bottom_right_ro"
  "w\030\005 \002(\r\"^\n\035InternalRangeReferenceArchive"
  "\022\020\n\010owner_id\030\001 \002(\r\022+\n\005range\030\002 \002(\0132\034.TSCE"
  ".RangeCoordinateArchive\"\211\002\n\020ReferenceArc"
  "hive\022<\n\016reference_type\030\001 \002(\0162$.TSCE.Refe"
  "renceArchive.ReferenceType\0222\n\016cell_refer"
  "ence\030\002 \001(\0132\032.TSCE.CellReferenceArchive\0224"
  "\n\017range_reference\030\003 \001(\0132\033.TSCE.RangeRefe"
  "renceArchive\"M\n\rReferenceType\022\022\n\016CELL_RE"
  "FERENCE\020\001\022\023\n\017RANGE_REFERENCE\020\002\022\023\n\017NAME_D"
  "EPENDENCY\020\003\"g\n\013EdgeArchive\022\016\n\006column\030\001 \002"
  "(\r\022\013\n\003row\030\002 \002(\r\022\024\n\014is_precedent\030\003 \002(\010\022%\n"
  "\010owner_id\030\004 \001(\0132\023.TSCE.CFUUIDArchive\"\245\001\n"
  "\014EdgesArchive\022!\n\031packed_edge_without_own"
  "er\030\t \003(\r\022\036\n\026packed_edge_with_owner\030\n \003(\r"
  "\022.\n\021owner_id_for_edge\030\013 \003(\0132\023.TSCE.CFUUI"
  "DArchive\022\"\n\032internal_owner_id_for_edge\030\014"
  " \003(\r\"\201\003\n\021CellRecordArchive\022\016\n\006column\030\001 \002"
  "(\r\022\013\n\003row\030\002 \002(\r\022+\n dirty_self_plus_prece"
  "dents_count\030\003 \001(\r:\0010\022\034\n\ris_in_a_cycle\030\004 "
  "\001(\010:\005false\022#\n\004edge\030\005 \003(\0132\021.TSCE.EdgeArch"
  "iveB\002\030\001\022 \n\022contains_a_formula\030\006 \001(\010:\004tru"
  "e\022(\n\031has_calculated_precedents\030\007 \001(\010:\005fa"
  "lse\0226\n#calculate_precedents_on_next_reca"
  "lc\030\010 \001(\010:\005falseB\002\030\001\0228\n)translate_for_exc"
  "el_import_on_next_recalc\030\n \001(\010:\005false\022!\n"
  "\005edges\030\t \001(\0132\022.TSCE.EdgesArchive\"`\n\027Cell"
  "DependenciesArchive\022,\n\013cell_record\030\001 \003(\013"
  "2\027.TSCE.CellRecordArchive\022\027\n\017num_dirty_c"
  "ells\030\002 \001(\r\"\330\004\n\033VolatileDependenciesArchi"
  "ve\022!\n\031volatile_time_cell_column\030\001 \003(\r\022\036\n"
  "\026volatile_time_cell_row\030\002 \003(\r\022#\n\033volatil"
  "e_random_cell_column\030\003 \003(\r\022 \n\030volatile_r"
  "andom_cell_row\030\004 \003(\r\022#\n\033volatile_locale_"
  "cell_column\030\017 \003(\r\022 \n\030volatile_locale_cel"
  "l_row\030\020 \003(\r\022%\n\035volatile_location_cell_co"
  "lumn\030\005 \003(\r\022\"\n\032volatile_location_cell_row"
  "\030\006 \003(\r\022$\n\034volatile_compass_cell_column\030\007"
  " \003(\r\022!\n\031volatile_compass_cell_row\030\010 \003(\r\022"
  ")\n!calculated_dependency_cell_column\030\t \003"
  "(\r\022&\n\036calculated_dependency_cell_row\030\n \003"
  "(\r\022D\n volatile_geometry_cell_reference\030\r"
  " \003(\0132\032.TSCE.CellReferenceArchive\022;\n\026vola"
  "tile_geometry_cell\030\013 \003(\0132\033.TSCE.CellCoor"
  "dinateArchive\"\314\001\n\032RangeBackDependencyArc"
  "hive\022\026\n\016cell_coord_row\030\001 \002(\r\022\031\n\021cell_coo"
  "rd_column\030\002 \002(\r\0224\n\017range_reference\030\003 \001(\013"
  "2\033.TSCE.RangeReferenceArchive\022E\n\030interna"
  "l_range_reference\030\004 \001(\0132#.TSCE.InternalR"
  "angeReferenceArchive\"c\n RTreeInternalNod"
  "eContentsArchive\022\013\n\003min\030\001 \003(\r\022\013\n\003max\030\002 \003"
  "(\r\022%\n\005child\030\003 \002(\0132\026.TSCE.RTreeNodeArchiv"
  "e\"l\n\034RTreeLeafNodeContentsArchive\022\013\n\003min"
  "\030\001 \003(\r\022\013\n\003max\030\002 \003(\r\0222\n\016cell_reference\030\003 "
  "\002(\0132\032.TSCE.CellReferenceArchive\"\270\001\n\020RTre"
  "eNodeArchive\022\r\n\005level\030\001 \002(\r\022\r\n\005count\030\002 \002"
  "(\r\022F\n\026internal_node_contents\030\003 \003(\0132&.TSC"
  "E.RTreeInternalNodeContentsArchive\022>\n\022le"
  "af_node_contents\030\004 \003(\0132\".TSCE.RTreeLeafN"
  "odeContentsArchive\"\331\001\n\014RTreeArchive\022\024\n\014d"
  "ata_file_id\030\001 \002(\r\022\021\n\tdata_size\030\002 \002(\r\022\025\n\r"
  "data_num_dims\030\003 \002(\r\022\026\n\016data_elem_size\030\004 "
  "\002(\r\022\033\n\023data_elem_real_size\030\005 \002(\r\022\026\n\016data"
  "_max_nodes\030\006 \002(\r\022\026\n\016data_min_nodes\030\007 \002(\r"
  "\022$\n\004root\030\010 \002(\0132\026.TSCE.RTreeNodeArchive\"y"
  "\n\030RangeDependenciesArchive\022\"\n\006r_tree\030\001 \001"
  "(\0132\022.TSCE.RTreeArchive\0229\n\017back_dependenc"
  "y\030\002 \003(\0132 .TSCE.RangeBackDependencyArchiv"
  "e\"\225\007\n\033SpanningDependenciesArchive\022\016\n\006col"
  "umn\030\001 \003(\r\022E\n\rrange_context\030\002 \003(\0162..TSCE."
  "SpanningDependenciesArchive.RangeContext"
  "\022(\n\004cell\030\003 \003(\0132\032.TSCE.CellReferenceArchi"
  "ve\022C\n\035total_range_for_deleted_table\030\004 \001("
  "\0132\034.TSCE.RangeCoordinateArchive\022B\n\034body_"
  "range_for_deleted_table\030\005 \001(\0132\034.TSCE.Ran"
  "geCoordinateArchive\022f\n\037referring_column_"
  "to_local_cells\030\006 \003(\0132=.TSCE.SpanningDepe"
  "ndenciesArchive.ReferringColumnToLocalCe"
  "lls\022h\n referring_column_to_remote_cells\030"
  "\007 \003(\0132>.TSCE.SpanningDependenciesArchive"
  ".ReferringColumnToRemoteCells\032\252\001\n\033Referr"
  "ingColumnToLocalCells\022\016\n\006column\030\001 \002(\r\022E\n"
  "\rrange_context\030\002 \002(\0162..TSCE.SpanningDepe"
  "ndenciesArchive.RangeContext\0224\n\017cell_coo"
  "rdinate\030\003 \003(\0132\033.TSCE.CellCoordinateArchi"
  "ve\032\272\001\n\034ReferringColumnToRemoteCells\022\016\n\006c"
  "olumn\030\001 \002(\r\022E\n\rrange_context\030\002 \002(\0162..TSC"
  "E.SpanningDependenciesArchive.RangeConte"
  "xt\022C\n\027internal_cell_reference\030\003 \003(\0132\".TS"
  "CE.InternalCellReferenceArchive\"0\n\014Range"
  "Context\022\013\n\007DEFAULT\020\000\022\023\n\017INCLUDE_HEADERS\020"
  "\001\"[\n\035WholeOwnerDependenciesArchive\022:\n\016de"
  "pendent_cell\030\001 \003(\0132\".TSCE.InternalCellRe"
  "ferenceArchive\"\375\003\n\027FormulaOwnerInfoArchi"
  "ve\022-\n\020formula_owner_id\030\001 \002(\0132\023.TSCE.CFUU"
  "IDArchive\0228\n\021cell_dependencies\030\002 \001(\0132\035.T"
  "SCE.CellDependenciesArchive\022:\n\022range_dep"
  "endencies\030\003 \001(\0132\036.TSCE.RangeDependencies"
  "Archive\022@\n\025volatile_dependencies\030\004 \001(\0132!"
  ".TSCE.VolatileDependenciesArchive\022G\n\034spa"
  "nning_column_dependencies\030\005 \001(\0132!.TSCE.S"
  "panningDependenciesArchive\022D\n\031spanning_r"
  "ow_dependencies\030\006 \001(\0132!.TSCE.SpanningDep"
  "endenciesArchive\022E\n\030whole_owner_dependen"
  "cies\030\010 \001(\0132#.TSCE.WholeOwnerDependencies"
  "Archive\022%\n\rformula_owner\030\007 \001(\0132\016.TSP.Ref"
  "erence\"\262\001\n\021OwnerIDMapArchive\022A\n\tmap_entr"
  "y\030\001 \003(\0132..TSCE.OwnerIDMapArchive.OwnerID"
  "MapArchiveEntry\032Z\n\026OwnerIDMapArchiveEntr"
  "y\022\031\n\021internal_owner_id\030\001 \002(\r\022%\n\010owner_id"
  "\030\002 \002(\0132\023.TSCE.CFUUIDArchive\"\365\001\n\030Dependen"
  "cyTrackerArchive\0229\n\022formula_owner_info\030\001"
  " \003(\0132\035.TSCE.FormulaOwnerInfoArchive\022.\n\nd"
  "irty_leaf\030\002 \003(\0132\032.TSCE.CellReferenceArch"
  "ive\022\?\n\023internal_dirty_leaf\030\004 \003(\0132\".TSCE."
  "InternalCellReferenceArchive\022-\n\014owner_id"
  "_map\030\003 \001(\0132\027.TSCE.OwnerIDMapArchive\"q\n\030N"
  "ameTrackedReferencePair\022\014\n\004name\030\001 \002(\t\022)\n"
  "\021tracked_reference\030\002 \001(\0132\016.TSP.Reference"
  "\022\034\n\024tracked_reference_id\030\003 \001(\r\"\214\001\n\036Names"
  "ByTrackedReferenceArchive\022%\n\010table_id\030\001 "
  "\002(\0132\023.TSCE.CFUUIDArchive\022C\n\033name_tracked"
  "_reference_pair\030\002 \003(\0132\036.TSCE.NameTracked"
  "ReferencePair\"\240\001\n\034NamedReferenceManagerA"
  "rchive\022)\n\021reference_tracker\030\001 \002(\0132\016.TSP."
  "Reference\022U\n#names_by_tracked_reference_"
  "by_table\030\002 \003(\0132$.TSCE.NamesByTrackedRefe"
  "renceArchiveB\002\030\001\"\205\003\n\030CalculationEngineAr"
  "chive\022\026\n\016base_date_1904\030\001 \001(\010\022:\n\022depende"
  "ncy_tracker\030\002 \002(\0132\036.TSCE.DependencyTrack"
  "erArchive\022/\n\027named_reference_manager\030\003 \001"
  "(\0132\016.TSP.Reference\022b\n\026excel_import_date_"
  "mode\030\004 \001(\01622.TSCE.CalculationEngineArchi"
  "ve.ExcelImportDateMode:\016DATE_MODE_1900\022\037"
  "\n\027saved_locale_identifier\030\005 \001(\t\"_\n\023Excel"
  "ImportDateMode\022\022\n\016DATE_MODE_1900\020\001\022\031\n\025DA"
  "TE_MODE_1900_LEGACY\020\002\022\031\n\025DATE_MODE_1904_"
  "LEGACY\020\003\"\256\031\n\023ASTNodeArrayArchive\022:\n\010AST_"
  "node\030\001 \003(\0132(.TSCE.ASTNodeArrayArchive.AS"
  "TNodeArchive\032~\n ASTLocalCellReferenceNod"
  "eArchive\022\022\n\nrow_handle\030\001 \002(\r\022\025\n\rcolumn_h"
  "andle\030\002 \002(\r\022\025\n\rrow_is_sticky\030\003 \002(\r\022\030\n\020co"
  "lumn_is_sticky\030\004 \002(\r\032\372\002\n%ASTCrossTableCe"
  "llReferenceNodeArchive\022\022\n\nrow_handle\030\001 \002"
  "(\r\022\025\n\rcolumn_handle\030\002 \002(\r\022\025\n\rrow_is_stic"
  "ky\030\003 \002(\r\022\030\n\020column_is_sticky\030\004 \002(\r\022%\n\010ta"
  "ble_id\030\005 \002(\0132\023.TSCE.CFUUIDArchive\0221\n)AST"
  "_reference_whitespace_after_sheet_name\030\006"
  " \001(\t\0222\n*AST_reference_whitespace_before_"
  "table_name\030\007 \001(\t\0221\n)AST_reference_whites"
  "pace_after_table_name\030\010 \001(\t\0224\n,AST_refer"
  "ence_whitespace_before_cell_address\030\t \001("
  "\t\032E\n\032ASTColumnCoordinateArchive\022\016\n\006colum"
  "n\030\001 \002(\021\022\027\n\010absolute\030\002 \001(\010:\005false\032\?\n\027ASTR"
  "owCoordinateArchive\022\013\n\003row\030\001 \002(\021\022\027\n\010abso"
  "lute\030\002 \001(\010:\005false\032\237\002\n&ASTCrossTableRefer"
  "enceExtraInfoArchive\022%\n\010table_id\030\001 \002(\0132\023"
  ".TSCE.CFUUIDArchive\0221\n)AST_reference_whi"
  "tespace_after_sheet_name\030\002 \001(\t\0222\n*AST_re"
  "ference_whitespace_before_table_name\030\003 \001"
  "(\t\0221\n)AST_reference_whitespace_after_tab"
  "le_name\030\004 \001(\t\0224\n,AST_reference_whitespac"
  "e_before_cell_address\030\005 \001(\t\032\217\013\n\016ASTNodeA"
  "rchive\022<\n\rAST_node_type\030\001 \002(\0162%.TSCE.AST"
  "NodeArrayArchive.ASTNodeType\022\037\n\027AST_func"
  "tion_node_index\030\002 \001(\r\022!\n\031AST_function_no"
  "de_numArgs\030\003 \001(\r\022\036\n\026AST_number_node_numb"
  "er\030\004 \001(\001\022 \n\030AST_boolean_node_boolean\030\005 \001"
  "(\010\022\036\n\026AST_string_node_string\030\006 \001(\t\022\035\n\025AS"
  "T_date_node_dateNum\030\007 \001(\001\022*\n\"AST_date_no"
  "de_suppress_date_format\030\023 \001(\010\022*\n\"AST_dat"
  "e_node_suppress_time_format\030\024 \001(\010\022&\n\036AST"
  "_date_node_date_time_format\030\025 \001(\t\022!\n\031AST"
  "_duration_node_unitNum\030\010 \001(\001\022\036\n\026AST_dura"
  "tion_node_unit\030\t \001(\005\022\037\n\027AST_duration_nod"
  "e_style\030\026 \001(\r\022/\n\'AST_duration_node_durat"
  "ion_unit_largest\030\027 \001(\r\0220\n(AST_duration_n"
  "ode_duration_unit_smallest\030\030 \001(\r\022-\n%AST_"
  "duration_node_use_automatic_units\030\035 \001(\010\022"
  "\036\n\026AST_token_node_boolean\030\n \001(\010\022\035\n\025AST_a"
  "rray_node_numCol\030\013 \001(\r\022\035\n\025AST_array_node"
  "_numRow\030\014 \001(\r\022\035\n\025AST_list_node_numArgs\030\r"
  " \001(\r\0227\n\024AST_thunk_node_array\030\016 \001(\0132\031.TSC"
  "E.ASTNodeArrayArchive\022k\n\'AST_local_cell_"
  "reference_node_reference\030\017 \001(\0132:.TSCE.AS"
  "TNodeArrayArchive.ASTLocalCellReferenceN"
  "odeArchive\022v\n-AST_cross_table_cell_refer"
  "ence_node_reference\030\020 \001(\0132\?.TSCE.ASTNode"
  "ArrayArchive.ASTCrossTableCellReferenceN"
  "odeArchive\022(\n AST_unknown_function_node_"
  "string\030\021 \001(\t\022)\n!AST_unknown_function_nod"
  "e_numArgs\030\022 \001(\r\022\026\n\016AST_whitespace\030\031 \001(\t\022"
  "H\n\nAST_column\030\032 \001(\01324.TSCE.ASTNodeArrayA"
  "rchive.ASTColumnCoordinateArchive\022B\n\007AST"
  "_row\030\033 \001(\01321.TSCE.ASTNodeArrayArchive.AS"
  "TRowCoordinateArchive\022n\n$AST_cross_table"
  "_reference_extra_info\030\034 \001(\0132@.TSCE.ASTNo"
  "deArrayArchive.ASTCrossTableReferenceExt"
  "raInfoArchive\"\241\006\n\013ASTNodeType\022\021\n\rADDITIO"
  "N_NODE\020\001\022\024\n\020SUBTRACTION_NODE\020\002\022\027\n\023MULTIP"
  "LICATION_NODE\020\003\022\021\n\rDIVISION_NODE\020\004\022\016\n\nPO"
  "WER_NODE\020\005\022\026\n\022CONCATENATION_NODE\020\006\022\025\n\021GR"
  "EATER_THAN_NODE\020\007\022!\n\035GREATER_THAN_OR_EQU"
  "AL_TO_NODE\020\010\022\022\n\016LESS_THAN_NODE\020\t\022\036\n\032LESS"
  "_THAN_OR_EQUAL_TO_NODE\020\n\022\021\n\rEQUAL_TO_NOD"
  "E\020\013\022\025\n\021NOT_EQUAL_TO_NODE\020\014\022\021\n\rNEGATION_N"
  "ODE\020\r\022\022\n\016PLUS_SIGN_NODE\020\016\022\020\n\014PERCENT_NOD"
  "E\020\017\022\021\n\rFUNCTION_NODE\020\020\022\017\n\013NUMBER_NODE\020\021\022"
  "\020\n\014BOOLEAN_NODE\020\022\022\017\n\013STRING_NODE\020\023\022\r\n\tDA"
  "TE_NODE\020\024\022\021\n\rDURATION_NODE\020\025\022\027\n\023EMPTY_AR"
  "GUMENT_NODE\020\026\022\016\n\nTOKEN_NODE\020\027\022\016\n\nARRAY_N"
  "ODE\020\030\022\r\n\tLIST_NODE\020\031\022\016\n\nTHUNK_NODE\020\032\022\035\n\031"
  "LOCAL_CELL_REFERENCE_NODE\020\033\022#\n\037CROSS_TAB"
  "LE_CELL_REFERENCE_NODE\020\034\022\016\n\nCOLON_NODE\020\035"
  "\022\030\n\024REFERENCE_ERROR_NODE\020\036\022\031\n\025UNKNOWN_FU"
  "NCTION_NODE\020\037\022\032\n\026APPEND_WHITESPACE_NODE\020"
  " \022\033\n\027PREPEND_WHITESPACE_NODE\020!\022\024\n\020BEGIN_"
  "THUNK_NODE\020\"\022\022\n\016END_THUNK_NODE\020#\022\027\n\023CELL"
  "_REFERENCE_NODE\020$\"\205\001\n\036FormulaTranslation"
  "FlagsArchive\022\'\n\030excel_import_translation"
  "\030\001 \001(\010:\005false\022:\n+number_to_date_coercion"
  "_removal_translation\030\002 \001(\010:\005false\"\370\001\n\016Fo"
  "rmulaArchive\0221\n\016AST_node_array\030\001 \002(\0132\031.T"
  "SCE.ASTNodeArrayArchive\022\023\n\013host_column\030\002"
  " \001(\r\022\020\n\010host_row\030\003 \001(\r\022&\n\027host_column_is"
  "_negative\030\004 \001(\010:\005false\022#\n\024host_row_is_ne"
  "gative\030\005 \001(\010:\005false\022\?\n\021translation_flags"
  "\030\006 \001(\0132$.TSCE.FormulaTranslationFlagsArc"
  "hive\"\271\003\n\023FormatStructArchive\022\023\n\013format_t"
  "ype\030\001 \002(\r\022\026\n\016decimal_places\030\002 \001(\r\022\025\n\rcur"
  "rency_code\030\003 \001(\t\022\026\n\016negative_style\030\004 \001(\r"
  "\022 \n\030show_thousands_separator\030\005 \001(\010\022\034\n\024us"
  "e_accounting_style\030\006 \001(\010\022\026\n\016duration_sty"
  "le\030\007 \001(\r\022\014\n\004base\030\010 \001(\r\022\023\n\013base_places\030\t "
  "\001(\r\022\033\n\023base_use_minus_sign\030\n \001(\010\022\031\n\021frac"
  "tion_accuracy\030\013 \001(\r\022\034\n\024suppress_date_for"
  "mat\030\014 \001(\010\022\034\n\024suppress_time_format\030\r \001(\010\022"
  "\030\n\020date_time_format\030\016 \001(\t\022\035\n\025duration_un"
  "it_largest\030\017 \001(\r\022\036\n\026duration_unit_smalle"
  "st\030\020 \001(\r\"~\n\026RangeCoordinateArchive\022\027\n\017to"
  "p_left_column\030\001 \002(\r\022\024\n\014top_left_row\030\002 \002("
  "\r\022\033\n\023bottom_right_column\030\003 \002(\r\022\030\n\020bottom"
  "_right_row\030\004 \002(\r\"\207\004\n\024TectonicShiftArchiv"
  "e\022 \n\030grid_coordinate_offset_x\030\001 \002(\r\022 \n\030g"
  "rid_coordinate_offset_y\030\002 \002(\r\022,\n$grid_co"
  "ordinate_offset_x_is_negative\030\003 \002(\010\022,\n$g"
  "rid_coordinate_offset_y_is_negative\030\004 \002("
  "\010\0225\n\017range_for_shift\030\005 \001(\0132\034.TSCE.RangeC"
  "oordinateArchive\0228\n\022range_for_deletion\030\006"
  " \001(\0132\034.TSCE.RangeCoordinateArchive\0224\n\016in"
  "serted_range\030\007 \001(\0132\034.TSCE.RangeCoordinat"
  "eArchive\022\031\n\021apply_to_absolute\030\010 \002(\010\022\027\n\017i"
  "nserting_after\030\t \002(\010\022\032\n\022ignore_sticky_bi"
  "ts\030\n \002(\010\0221\n\013table_range\030\013 \001(\0132\034.TSCE.Ran"
  "geCoordinateArchive\022%\n\010table_id\030\014 \001(\0132\023."
  "TSCE.CFUUIDArchive\"\217\001\n\031RewriteSortMappin"
  "gArchive\022%\n\010table_id\030\001 \002(\0132\023.TSCE.CFUUID"
  "Archive\0223\n\017shuffle_mapping\030\002 \002(\0132\032.TSK.S"
  "huffleMappingArchive\022\026\n\016explode_ranges\030\003"
  " \002(\010\"\224\002\n\025RangeMovedInfoArchive\022%\n\010table_"
  "id\030\001 \001(\0132\023.TSCE.CFUUIDArchive\0220\n\nfrom_ra"
  "nge\030\002 \001(\0132\034.TSCE.RangeCoordinateArchive\022"
  ".\n\010to_range\030\003 \001(\0132\034.TSCE.RangeCoordinate"
  "Archive\0229\n\024from_range_reference\030\004 \001(\0132\033."
  "TSCE.RangeReferenceArchive\0227\n\022to_range_r"
  "eference\030\005 \001(\0132\033.TSCE.RangeReferenceArch"
  "ive\"\254\001\n\027TableResizedInfoArchive\022%\n\010table"
  "_id\030\001 \002(\0132\023.TSCE.CFUUIDArchive\0224\n\016new_ta"
  "ble_size\030\002 \002(\0132\034.TSCE.RangeCoordinateArc"
  "hive\0224\n\016old_table_size\030\003 \001(\0132\034.TSCE.Rang"
  "eCoordinateArchive\"q\n\024CellMergeInfoArchi"
  "ve\022%\n\010table_id\030\001 \002(\0132\023.TSCE.CFUUIDArchiv"
  "e\0222\n\014merged_range\030\002 \002(\0132\034.TSCE.RangeCoor"
  "dinateArchive\"\244\004\n\031FormulaRewriteSpecArch"
  "ive\022A\n\014rewrite_type\030\001 \002(\0162+.TSCE.Formula"
  "RewriteSpecArchive.RewriteType\0222\n\016tecton"
  "ic_shift\030\002 \001(\0132\032.TSCE.TectonicShiftArchi"
  "ve\0225\n\014sort_mapping\030\003 \001(\0132\037.TSCE.RewriteS"
  "ortMappingArchive\0225\n\020range_moved_info\030\004 "
  "\001(\0132\033.TSCE.RangeMovedInfoArchive\022-\n\020dele"
  "ted_owner_id\030\005 \001(\0132\023.TSCE.CFUUIDArchive\022"
  "9\n\022table_resized_info\030\006 \001(\0132\035.TSCE.Table"
  "ResizedInfoArchive\0223\n\017cell_merge_info\030\007 "
  "\001(\0132\032.TSCE.CellMergeInfoArchive\"\202\001\n\013Rewr"
  "iteType\022\022\n\016TECTONIC_SHIFT\020\001\022\033\n\027REMAP_WIT"
  "H_SORT_MAPPING\020\002\022\016\n\nMOVE_RANGE\020\003\022\020\n\014DELE"
  "TE_OWNER\020\004\022\020\n\014TABLE_RESIZE\020\005\022\016\n\nCELL_MER"
  "GE\020\006\"f\n CellCoordinateFormulaPairArchive"
  "\022\016\n\006column\030\001 \002(\r\022\013\n\003row\030\002 \002(\r\022%\n\007formula"
  "\030\003 \001(\0132\024.TSCE.FormulaArchive\"H\n\025CellCoor"
  "dinateArchive\022\022\n\npackedData\030\001 \001(\007\022\016\n\006col"
  "umn\030\002 \001(\r\022\013\n\003row\030\003 \001(\r\"S\n\033CellCoordinate"
  "VectorArchive\0224\n\017cell_coordinate\030\001 \003(\0132\033"
  ".TSCE.CellCoordinateArchive\"w\n\037CellCoord"
  "inateObjectPairArchive\0224\n\017cell_coordinat"
  "e\030\001 \002(\0132\033.TSCE.CellCoordinateArchive\022\036\n\006"
  "object\030\002 \002(\0132\016.TSP.Reference\"l\n\036CellCoor"
  "dinateObjectMapArchive\022J\n\033cell_coordinat"
  "e_object_pair\030\001 \003(\0132%.TSCE.CellCoordinat"
  "eObjectPairArchive\"a\n\026OwnerFormulaMapArc"
  "hive\022G\n\027coordinate_formula_pair\030\001 \003(\0132&."
  "TSCE.CellCoordinateFormulaPairArchive\"q\n"
  "\034FormulaRewriteCommandArchive\022-\n\025table_r"
  "ewrite_command\030\001 \001(\0132\016.TSP.Reference\022\"\n\005"
  "super\030\002 \001(\0132\023.TSK.CommandArchive\"^\n!Numb"
  "erTrackedReferencePairArchive\022\016\n\006number\030"
  "\001 \002(\r\022)\n\021tracked_reference\030\002 \001(\0132\016.TSP.R"
  "eference\"t\n\"NumberToTrackedReferenceMapA"
  "rchive\022N\n\035number_tracked_reference_pair\030"
  "\001 \003(\0132\'.TSCE.NumberTrackedReferencePairA"
  "rchive\"\336\002\n&TrackedReferencesRewriteComma"
  "ndArchive\022U\n\037references_in_reference_tra"
  "cker\030\001 \001(\0132(.TSCE.NumberToTrackedReferen"
  "ceMapArchiveB\002\030\001\022W\n!original_tracked_ref"
  "erence_copies\030\002 \001(\0132(.TSCE.NumberToTrack"
  "edReferenceMapArchiveB\002\030\001\0225\n\014rewrite_spe"
  "c\030\003 \001(\0132\037.TSCE.FormulaRewriteSpecArchive"
  "\022)\n\021reference_tracker\030\004 \002(\0132\016.TSP.Refere"
  "nce\022\"\n\005super\030\005 \002(\0132\023.TSK.CommandArchive\""
  "U\n\027TrackedReferenceArchive\022&\n\003ast\030\001 \002(\0132"
  "\031.TSCE.ASTNodeArrayArchive\022\022\n\nformula_id"
  "\030\002 \002(\r\"\257\001\n\027ReferenceTrackerArchive\022!\n\004uu"
  "id\030\001 \002(\0132\023.TSCE.CFUUIDArchive\022-\n\021tracked"
  "_reference\030\002 \003(\0132\016.TSP.ReferenceB\002\030\001\022B\n\033"
  "contained_tracked_reference\030\003 \003(\0132\035.TSCE"
  ".TrackedReferenceArchive\"(\n\027BooleanCellV"
  "alueArchive\022\r\n\005value\030\001 \002(\010\"q\n\024DateCellVa"
  "lueArchive\022\r\n\005value\030\001 \002(\001\022(\n\006format\030\002 \002("
  "\0132\030.TSK.FormatStructArchive\022 \n\022format_is"
  "_implicit\030\003 \001(\010:\004true\"\201\001\n\026NumberCellValu"
  "eArchive\022\r\n\005value\030\001 \002(\001\022\014\n\004unit\030\002 \002(\005\022(\n"
  "\006format\030\003 \002(\0132\030.TSK.FormatStructArchive\022"
  " \n\022format_is_implicit\030\004 \001(\010:\004true\"s\n\026Str"
  "ingCellValueArchive\022\r\n\005value\030\001 \002(\t\022(\n\006fo"
  "rmat\030\002 \002(\0132\030.TSK.FormatStructArchive\022 \n\022"
  "format_is_implicit\030\003 \001(\010:\004true\"\201\003\n\020CellV"
  "alueArchive\022=\n\017cell_value_type\030\001 \002(\0162$.T"
  "SCE.CellValueArchive.CellValueType\0224\n\rbo"
  "olean_value\030\002 \001(\0132\035.TSCE.BooleanCellValu"
  "eArchive\022.\n\ndate_value\030\003 \001(\0132\032.TSCE.Date"
  "CellValueArchive\0222\n\014number_value\030\004 \001(\0132\034"
  ".TSCE.NumberCellValueArchive\0222\n\014string_v"
  "alue\030\005 \001(\0132\034.TSCE.StringCellValueArchive"
  "\"`\n\rCellValueType\022\014\n\010NIL_TYPE\020\001\022\020\n\014BOOLE"
  "AN_TYPE\020\002\022\r\n\tDATE_TYPE\020\003\022\017\n\013NUMBER_TYPE\020"
  "\004\022\017\n\013STRING_TYPE\020\005"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_TSCEArchives_2eproto_deps[2] = {
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
};
static ::_pbi::once_flag descriptor_table_TSCEArchives_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TSCEArchives_2eproto = {
    false, false, 14298, descriptor_table_protodef_TSCEArchives_2eproto,
    "TSCEArchives.proto",
    &descriptor_table_TSCEArchives_2eproto_once, descriptor_table_TSCEArchives_2eproto_deps, 2, 63,
    schemas, file_default_instances, TableStruct_TSCEArchives_2eproto::offsets,
    file_level_metadata_TSCEArchives_2eproto, file_level_enum_descriptors_TSCEArchives_2eproto,
    file_level_service_descriptors_TSCEArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TSCEArchives_2eproto_getter() {
  return &descriptor_table_TSCEArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TSCEArchives_2eproto(&descriptor_table_TSCEArchives_2eproto);
namespace TSCE {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReferenceArchive_ReferenceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCEArchives_2eproto);
  return file_level_enum_descriptors_TSCEArchives_2eproto[0];
}
bool ReferenceArchive_ReferenceType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ReferenceArchive_ReferenceType ReferenceArchive::CELL_REFERENCE;
constexpr ReferenceArchive_ReferenceType ReferenceArchive::RANGE_REFERENCE;
constexpr ReferenceArchive_ReferenceType ReferenceArchive::NAME_DEPENDENCY;
constexpr ReferenceArchive_ReferenceType ReferenceArchive::ReferenceType_MIN;
constexpr ReferenceArchive_ReferenceType ReferenceArchive::ReferenceType_MAX;
constexpr int ReferenceArchive::ReferenceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpanningDependenciesArchive_RangeContext_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCEArchives_2eproto);
  return file_level_enum_descriptors_TSCEArchives_2eproto[1];
}
bool SpanningDependenciesArchive_RangeContext_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive::DEFAULT;
constexpr SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive::INCLUDE_HEADERS;
constexpr SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive::RangeContext_MIN;
constexpr SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive::RangeContext_MAX;
constexpr int SpanningDependenciesArchive::RangeContext_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CalculationEngineArchive_ExcelImportDateMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCEArchives_2eproto);
  return file_level_enum_descriptors_TSCEArchives_2eproto[2];
}
bool CalculationEngineArchive_ExcelImportDateMode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CalculationEngineArchive_ExcelImportDateMode CalculationEngineArchive::DATE_MODE_1900;
constexpr CalculationEngineArchive_ExcelImportDateMode CalculationEngineArchive::DATE_MODE_1900_LEGACY;
constexpr CalculationEngineArchive_ExcelImportDateMode CalculationEngineArchive::DATE_MODE_1904_LEGACY;
constexpr CalculationEngineArchive_ExcelImportDateMode CalculationEngineArchive::ExcelImportDateMode_MIN;
constexpr CalculationEngineArchive_ExcelImportDateMode CalculationEngineArchive::ExcelImportDateMode_MAX;
constexpr int CalculationEngineArchive::ExcelImportDateMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ASTNodeArrayArchive_ASTNodeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCEArchives_2eproto);
  return file_level_enum_descriptors_TSCEArchives_2eproto[3];
}
bool ASTNodeArrayArchive_ASTNodeType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::ADDITION_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::SUBTRACTION_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::MULTIPLICATION_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::DIVISION_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::POWER_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::CONCATENATION_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::GREATER_THAN_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::GREATER_THAN_OR_EQUAL_TO_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::LESS_THAN_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::LESS_THAN_OR_EQUAL_TO_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::EQUAL_TO_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::NOT_EQUAL_TO_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::NEGATION_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::PLUS_SIGN_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::PERCENT_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::FUNCTION_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::NUMBER_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::BOOLEAN_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::STRING_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::DATE_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::DURATION_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::EMPTY_ARGUMENT_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::TOKEN_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::ARRAY_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::LIST_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::THUNK_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::LOCAL_CELL_REFERENCE_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::CROSS_TABLE_CELL_REFERENCE_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::COLON_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::REFERENCE_ERROR_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::UNKNOWN_FUNCTION_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::APPEND_WHITESPACE_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::PREPEND_WHITESPACE_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::BEGIN_THUNK_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::END_THUNK_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::CELL_REFERENCE_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::ASTNodeType_MIN;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::ASTNodeType_MAX;
constexpr int ASTNodeArrayArchive::ASTNodeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FormulaRewriteSpecArchive_RewriteType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCEArchives_2eproto);
  return file_level_enum_descriptors_TSCEArchives_2eproto[4];
}
bool FormulaRewriteSpecArchive_RewriteType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::TECTONIC_SHIFT;
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::REMAP_WITH_SORT_MAPPING;
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::MOVE_RANGE;
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::DELETE_OWNER;
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::TABLE_RESIZE;
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::CELL_MERGE;
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::RewriteType_MIN;
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::RewriteType_MAX;
constexpr int FormulaRewriteSpecArchive::RewriteType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CellValueArchive_CellValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCEArchives_2eproto);
  return file_level_enum_descriptors_TSCEArchives_2eproto[5];
}
bool CellValueArchive_CellValueType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CellValueArchive_CellValueType CellValueArchive::NIL_TYPE;
constexpr CellValueArchive_CellValueType CellValueArchive::BOOLEAN_TYPE;
constexpr CellValueArchive_CellValueType CellValueArchive::DATE_TYPE;
constexpr CellValueArchive_CellValueType CellValueArchive::NUMBER_TYPE;
constexpr CellValueArchive_CellValueType CellValueArchive::STRING_TYPE;
constexpr CellValueArchive_CellValueType CellValueArchive::CellValueType_MIN;
constexpr CellValueArchive_CellValueType CellValueArchive::CellValueType_MAX;
constexpr int CellValueArchive::CellValueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class CFUUIDArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CFUUIDArchive>()._impl_._has_bits_);
  static void set_has_uuid_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uuid_w0(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uuid_w1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uuid_w2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uuid_w3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CFUUIDArchive::CFUUIDArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CFUUIDArchive)
}
CFUUIDArchive::CFUUIDArchive(const CFUUIDArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CFUUIDArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uuid_bytes_){}
    , decltype(_impl_.uuid_w0_){}
    , decltype(_impl_.uuid_w1_){}
    , decltype(_impl_.uuid_w2_){}
    , decltype(_impl_.uuid_w3_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uuid_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uuid_bytes()) {
    _this->_impl_.uuid_bytes_.Set(from._internal_uuid_bytes(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.uuid_w0_, &from._impl_.uuid_w0_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.uuid_w3_) -
    reinterpret_cast<char*>(&_impl_.uuid_w0_)) + sizeof(_impl_.uuid_w3_));
  // @@protoc_insertion_point(copy_constructor:TSCE.CFUUIDArchive)
}

inline void CFUUIDArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uuid_bytes_){}
    , decltype(_impl_.uuid_w0_){0u}
    , decltype(_impl_.uuid_w1_){0u}
    , decltype(_impl_.uuid_w2_){0u}
    , decltype(_impl_.uuid_w3_){0u}
  };
  _impl_.uuid_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CFUUIDArchive::~CFUUIDArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CFUUIDArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CFUUIDArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uuid_bytes_.Destroy();
}

void CFUUIDArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CFUUIDArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CFUUIDArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.uuid_bytes_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.uuid_w0_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.uuid_w3_) -
        reinterpret_cast<char*>(&_impl_.uuid_w0_)) + sizeof(_impl_.uuid_w3_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CFUUIDArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes uuid_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uuid_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 uuid_w0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_uuid_w0(&has_bits);
          _impl_.uuid_w0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 uuid_w1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_uuid_w1(&has_bits);
          _impl_.uuid_w1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 uuid_w2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_uuid_w2(&has_bits);
          _impl_.uuid_w2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 uuid_w3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_uuid_w3(&has_bits);
          _impl_.uuid_w3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CFUUIDArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CFUUIDArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes uuid_bytes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_uuid_bytes(), target);
  }

  // optional uint32 uuid_w0 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uuid_w0(), target);
  }

  // optional uint32 uuid_w1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uuid_w1(), target);
  }

  // optional uint32 uuid_w2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uuid_w2(), target);
  }

  // optional uint32 uuid_w3 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_uuid_w3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CFUUIDArchive)
  return target;
}

size_t CFUUIDArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CFUUIDArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes uuid_bytes = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_uuid_bytes());
    }

    // optional uint32 uuid_w0 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uuid_w0());
    }

    // optional uint32 uuid_w1 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uuid_w1());
    }

    // optional uint32 uuid_w2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uuid_w2());
    }

    // optional uint32 uuid_w3 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uuid_w3());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CFUUIDArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CFUUIDArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CFUUIDArchive::GetClassData() const { return &_class_data_; }


void CFUUIDArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CFUUIDArchive*>(&to_msg);
  auto& from = static_cast<const CFUUIDArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CFUUIDArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_uuid_bytes(from._internal_uuid_bytes());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.uuid_w0_ = from._impl_.uuid_w0_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.uuid_w1_ = from._impl_.uuid_w1_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.uuid_w2_ = from._impl_.uuid_w2_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.uuid_w3_ = from._impl_.uuid_w3_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CFUUIDArchive::CopyFrom(const CFUUIDArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CFUUIDArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFUUIDArchive::IsInitialized() const {
  return true;
}

void CFUUIDArchive::InternalSwap(CFUUIDArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_bytes_, lhs_arena,
      &other->_impl_.uuid_bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CFUUIDArchive, _impl_.uuid_w3_)
      + sizeof(CFUUIDArchive::_impl_.uuid_w3_)
      - PROTOBUF_FIELD_OFFSET(CFUUIDArchive, _impl_.uuid_w0_)>(
          reinterpret_cast<char*>(&_impl_.uuid_w0_),
          reinterpret_cast<char*>(&other->_impl_.uuid_w0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CFUUIDArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[0]);
}

// ===================================================================

class CellReferenceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellReferenceArchive>()._impl_._has_bits_);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::CFUUIDArchive& table_id(const CellReferenceArchive* msg);
  static void set_has_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSCE::CFUUIDArchive&
CellReferenceArchive::_Internal::table_id(const CellReferenceArchive* msg) {
  return *msg->_impl_.table_id_;
}
CellReferenceArchive::CellReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellReferenceArchive)
}
CellReferenceArchive::CellReferenceArchive(const CellReferenceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellReferenceArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_id_){nullptr}
    , decltype(_impl_.column_){}
    , decltype(_impl_.row_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_id()) {
    _this->_impl_.table_id_ = new ::TSCE::CFUUIDArchive(*from._impl_.table_id_);
  }
  ::memcpy(&_impl_.column_, &from._impl_.column_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.row_) -
    reinterpret_cast<char*>(&_impl_.column_)) + sizeof(_impl_.row_));
  // @@protoc_insertion_point(copy_constructor:TSCE.CellReferenceArchive)
}

inline void CellReferenceArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_id_){nullptr}
    , decltype(_impl_.column_){0u}
    , decltype(_impl_.row_){0u}
  };
}

CellReferenceArchive::~CellReferenceArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellReferenceArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellReferenceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.table_id_;
}

void CellReferenceArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellReferenceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellReferenceArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.table_id_ != nullptr);
    _impl_.table_id_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.row_) -
        reinterpret_cast<char*>(&_impl_.column_)) + sizeof(_impl_.row_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellReferenceArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_column(&has_bits);
          _impl_.column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_row(&has_bits);
          _impl_.row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.CFUUIDArchive table_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellReferenceArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellReferenceArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 column = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_column(), target);
  }

  // required uint32 row = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_row(), target);
  }

  // required .TSCE.CFUUIDArchive table_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::table_id(this),
        _Internal::table_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellReferenceArchive)
  return target;
}

size_t CellReferenceArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.CellReferenceArchive)
  size_t total_size = 0;

  if (_internal_has_table_id()) {
    // required .TSCE.CFUUIDArchive table_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_id_);
  }

  if (_internal_has_column()) {
    // required uint32 column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());
  }

  if (_internal_has_row()) {
    // required uint32 row = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row());
  }

  return total_size;
}
size_t CellReferenceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellReferenceArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSCE.CFUUIDArchive table_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_id_);

    // required uint32 column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());

    // required uint32 row = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellReferenceArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellReferenceArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellReferenceArchive::GetClassData() const { return &_class_data_; }


void CellReferenceArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellReferenceArchive*>(&to_msg);
  auto& from = static_cast<const CellReferenceArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellReferenceArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_table_id()->::TSCE::CFUUIDArchive::MergeFrom(
          from._internal_table_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.column_ = from._impl_.column_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.row_ = from._impl_.row_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellReferenceArchive::CopyFrom(const CellReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellReferenceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CellReferenceArchive::InternalSwap(CellReferenceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellReferenceArchive, _impl_.row_)
      + sizeof(CellReferenceArchive::_impl_.row_)
      - PROTOBUF_FIELD_OFFSET(CellReferenceArchive, _impl_.table_id_)>(
          reinterpret_cast<char*>(&_impl_.table_id_),
          reinterpret_cast<char*>(&other->_impl_.table_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellReferenceArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[1]);
}

// ===================================================================

class InternalCellReferenceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<InternalCellReferenceArchive>()._impl_._has_bits_);
  static const ::TSCE::CellCoordinateArchive& coordinate(const InternalCellReferenceArchive* msg);
  static void set_has_coordinate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::CellCoordinateArchive&
InternalCellReferenceArchive::_Internal::coordinate(const InternalCellReferenceArchive* msg) {
  return *msg->_impl_.coordinate_;
}
InternalCellReferenceArchive::InternalCellReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.InternalCellReferenceArchive)
}
InternalCellReferenceArchive::InternalCellReferenceArchive(const InternalCellReferenceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InternalCellReferenceArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.coordinate_){nullptr}
    , decltype(_impl_.owner_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_coordinate()) {
    _this->_impl_.coordinate_ = new ::TSCE::CellCoordinateArchive(*from._impl_.coordinate_);
  }
  _this->_impl_.owner_id_ = from._impl_.owner_id_;
  // @@protoc_insertion_point(copy_constructor:TSCE.InternalCellReferenceArchive)
}

inline void InternalCellReferenceArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.coordinate_){nullptr}
    , decltype(_impl_.owner_id_){0u}
  };
}

InternalCellReferenceArchive::~InternalCellReferenceArchive() {
  // @@protoc_insertion_point(destructor:TSCE.InternalCellReferenceArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InternalCellReferenceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.coordinate_;
}

void InternalCellReferenceArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InternalCellReferenceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.InternalCellReferenceArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.coordinate_ != nullptr);
    _impl_.coordinate_->Clear();
  }
  _impl_.owner_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InternalCellReferenceArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CellCoordinateArchive coordinate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coordinate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 owner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_owner_id(&has_bits);
          _impl_.owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InternalCellReferenceArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.InternalCellReferenceArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.CellCoordinateArchive coordinate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::coordinate(this),
        _Internal::coordinate(this).GetCachedSize(), target, stream);
  }

  // required uint32 owner_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_owner_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.InternalCellReferenceArchive)
  return target;
}

size_t InternalCellReferenceArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.InternalCellReferenceArchive)
  size_t total_size = 0;

  if (_internal_has_coordinate()) {
    // required .TSCE.CellCoordinateArchive coordinate = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coordinate_);
  }

  if (_internal_has_owner_id()) {
    // required uint32 owner_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_id());
  }

  return total_size;
}
size_t InternalCellReferenceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.InternalCellReferenceArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.CellCoordinateArchive coordinate = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coordinate_);

    // required uint32 owner_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InternalCellReferenceArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InternalCellReferenceArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InternalCellReferenceArchive::GetClassData() const { return &_class_data_; }


void InternalCellReferenceArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InternalCellReferenceArchive*>(&to_msg);
  auto& from = static_cast<const InternalCellReferenceArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.InternalCellReferenceArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_coordinate()->::TSCE::CellCoordinateArchive::MergeFrom(
          from._internal_coordinate());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.owner_id_ = from._impl_.owner_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InternalCellReferenceArchive::CopyFrom(const InternalCellReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.InternalCellReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalCellReferenceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void InternalCellReferenceArchive::InternalSwap(InternalCellReferenceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InternalCellReferenceArchive, _impl_.owner_id_)
      + sizeof(InternalCellReferenceArchive::_impl_.owner_id_)
      - PROTOBUF_FIELD_OFFSET(InternalCellReferenceArchive, _impl_.coordinate_)>(
          reinterpret_cast<char*>(&_impl_.coordinate_),
          reinterpret_cast<char*>(&other->_impl_.coordinate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InternalCellReferenceArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[2]);
}

// ===================================================================

class RangeReferenceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RangeReferenceArchive>()._impl_._has_bits_);
  static const ::TSCE::CFUUIDArchive& table_id(const RangeReferenceArchive* msg);
  static void set_has_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top_left_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_top_left_row(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bottom_right_column(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bottom_right_row(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TSCE::CFUUIDArchive&
RangeReferenceArchive::_Internal::table_id(const RangeReferenceArchive* msg) {
  return *msg->_impl_.table_id_;
}
RangeReferenceArchive::RangeReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RangeReferenceArchive)
}
RangeReferenceArchive::RangeReferenceArchive(const RangeReferenceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RangeReferenceArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_id_){nullptr}
    , decltype(_impl_.top_left_column_){}
    , decltype(_impl_.top_left_row_){}
    , decltype(_impl_.bottom_right_column_){}
    , decltype(_impl_.bottom_right_row_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_id()) {
    _this->_impl_.table_id_ = new ::TSCE::CFUUIDArchive(*from._impl_.table_id_);
  }
  ::memcpy(&_impl_.top_left_column_, &from._impl_.top_left_column_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bottom_right_row_) -
    reinterpret_cast<char*>(&_impl_.top_left_column_)) + sizeof(_impl_.bottom_right_row_));
  // @@protoc_insertion_point(copy_constructor:TSCE.RangeReferenceArchive)
}

inline void RangeReferenceArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_id_){nullptr}
    , decltype(_impl_.top_left_column_){0u}
    , decltype(_impl_.top_left_row_){0u}
    , decltype(_impl_.bottom_right_column_){0u}
    , decltype(_impl_.bottom_right_row_){0u}
  };
}

RangeReferenceArchive::~RangeReferenceArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RangeReferenceArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RangeReferenceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.table_id_;
}

void RangeReferenceArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RangeReferenceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RangeReferenceArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.table_id_ != nullptr);
    _impl_.table_id_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.top_left_column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bottom_right_row_) -
        reinterpret_cast<char*>(&_impl_.top_left_column_)) + sizeof(_impl_.bottom_right_row_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeReferenceArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CFUUIDArchive table_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 top_left_column = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_top_left_column(&has_bits);
          _impl_.top_left_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 top_left_row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_top_left_row(&has_bits);
          _impl_.top_left_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 bottom_right_column = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_bottom_right_column(&has_bits);
          _impl_.bottom_right_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 bottom_right_row = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_bottom_right_row(&has_bits);
          _impl_.bottom_right_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RangeReferenceArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RangeReferenceArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.CFUUIDArchive table_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::table_id(this),
        _Internal::table_id(this).GetCachedSize(), target, stream);
  }

  // required uint32 top_left_column = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_top_left_column(), target);
  }

  // required uint32 top_left_row = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_top_left_row(), target);
  }

  // required uint32 bottom_right_column = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bottom_right_column(), target);
  }

  // required uint32 bottom_right_row = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_bottom_right_row(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RangeReferenceArchive)
  return target;
}

size_t RangeReferenceArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.RangeReferenceArchive)
  size_t total_size = 0;

  if (_internal_has_table_id()) {
    // required .TSCE.CFUUIDArchive table_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_id_);
  }

  if (_internal_has_top_left_column()) {
    // required uint32 top_left_column = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_top_left_column());
  }

  if (_internal_has_top_left_row()) {
    // required uint32 top_left_row = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_top_left_row());
  }

  if (_internal_has_bottom_right_column()) {
    // required uint32 bottom_right_column = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bottom_right_column());
  }

  if (_internal_has_bottom_right_row()) {
    // required uint32 bottom_right_row = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bottom_right_row());
  }

  return total_size;
}
size_t RangeReferenceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RangeReferenceArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .TSCE.CFUUIDArchive table_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_id_);

    // required uint32 top_left_column = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_top_left_column());

    // required uint32 top_left_row = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_top_left_row());

    // required uint32 bottom_right_column = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bottom_right_column());

    // required uint32 bottom_right_row = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bottom_right_row());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RangeReferenceArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RangeReferenceArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RangeReferenceArchive::GetClassData() const { return &_class_data_; }


void RangeReferenceArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RangeReferenceArchive*>(&to_msg);
  auto& from = static_cast<const RangeReferenceArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RangeReferenceArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_table_id()->::TSCE::CFUUIDArchive::MergeFrom(
          from._internal_table_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.top_left_column_ = from._impl_.top_left_column_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.top_left_row_ = from._impl_.top_left_row_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.bottom_right_column_ = from._impl_.bottom_right_column_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.bottom_right_row_ = from._impl_.bottom_right_row_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RangeReferenceArchive::CopyFrom(const RangeReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RangeReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeReferenceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RangeReferenceArchive::InternalSwap(RangeReferenceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RangeReferenceArchive, _impl_.bottom_right_row_)
      + sizeof(RangeReferenceArchive::_impl_.bottom_right_row_)
      - PROTOBUF_FIELD_OFFSET(RangeReferenceArchive, _impl_.table_id_)>(
          reinterpret_cast<char*>(&_impl_.table_id_),
          reinterpret_cast<char*>(&other->_impl_.table_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeReferenceArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[3]);
}

// ===================================================================

class InternalRangeReferenceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<InternalRangeReferenceArchive>()._impl_._has_bits_);
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::RangeCoordinateArchive& range(const InternalRangeReferenceArchive* msg);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::RangeCoordinateArchive&
InternalRangeReferenceArchive::_Internal::range(const InternalRangeReferenceArchive* msg) {
  return *msg->_impl_.range_;
}
InternalRangeReferenceArchive::InternalRangeReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.InternalRangeReferenceArchive)
}
InternalRangeReferenceArchive::InternalRangeReferenceArchive(const InternalRangeReferenceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InternalRangeReferenceArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_){nullptr}
    , decltype(_impl_.owner_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_range()) {
    _this->_impl_.range_ = new ::TSCE::RangeCoordinateArchive(*from._impl_.range_);
  }
  _this->_impl_.owner_id_ = from._impl_.owner_id_;
  // @@protoc_insertion_point(copy_constructor:TSCE.InternalRangeReferenceArchive)
}

inline void InternalRangeReferenceArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_){nullptr}
    , decltype(_impl_.owner_id_){0u}
  };
}

InternalRangeReferenceArchive::~InternalRangeReferenceArchive() {
  // @@protoc_insertion_point(destructor:TSCE.InternalRangeReferenceArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InternalRangeReferenceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.range_;
}

void InternalRangeReferenceArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InternalRangeReferenceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.InternalRangeReferenceArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.range_ != nullptr);
    _impl_.range_->Clear();
  }
  _impl_.owner_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InternalRangeReferenceArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_owner_id(&has_bits);
          _impl_.owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.RangeCoordinateArchive range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InternalRangeReferenceArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.InternalRangeReferenceArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 owner_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_owner_id(), target);
  }

  // required .TSCE.RangeCoordinateArchive range = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::range(this),
        _Internal::range(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.InternalRangeReferenceArchive)
  return target;
}

size_t InternalRangeReferenceArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.InternalRangeReferenceArchive)
  size_t total_size = 0;

  if (_internal_has_range()) {
    // required .TSCE.RangeCoordinateArchive range = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.range_);
  }

  if (_internal_has_owner_id()) {
    // required uint32 owner_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_id());
  }

  return total_size;
}
size_t InternalRangeReferenceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.InternalRangeReferenceArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.RangeCoordinateArchive range = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.range_);

    // required uint32 owner_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InternalRangeReferenceArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InternalRangeReferenceArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InternalRangeReferenceArchive::GetClassData() const { return &_class_data_; }


void InternalRangeReferenceArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InternalRangeReferenceArchive*>(&to_msg);
  auto& from = static_cast<const InternalRangeReferenceArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.InternalRangeReferenceArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_range()->::TSCE::RangeCoordinateArchive::MergeFrom(
          from._internal_range());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.owner_id_ = from._impl_.owner_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InternalRangeReferenceArchive::CopyFrom(const InternalRangeReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.InternalRangeReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalRangeReferenceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_range()) {
    if (!_impl_.range_->IsInitialized()) return false;
  }
  return true;
}

void InternalRangeReferenceArchive::InternalSwap(InternalRangeReferenceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InternalRangeReferenceArchive, _impl_.owner_id_)
      + sizeof(InternalRangeReferenceArchive::_impl_.owner_id_)
      - PROTOBUF_FIELD_OFFSET(InternalRangeReferenceArchive, _impl_.range_)>(
          reinterpret_cast<char*>(&_impl_.range_),
          reinterpret_cast<char*>(&other->_impl_.range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InternalRangeReferenceArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[4]);
}

// ===================================================================

class ReferenceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferenceArchive>()._impl_._has_bits_);
  static void set_has_reference_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::CellReferenceArchive& cell_reference(const ReferenceArchive* msg);
  static void set_has_cell_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::RangeReferenceArchive& range_reference(const ReferenceArchive* msg);
  static void set_has_range_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::TSCE::CellReferenceArchive&
ReferenceArchive::_Internal::cell_reference(const ReferenceArchive* msg) {
  return *msg->_impl_.cell_reference_;
}
const ::TSCE::RangeReferenceArchive&
ReferenceArchive::_Internal::range_reference(const ReferenceArchive* msg) {
  return *msg->_impl_.range_reference_;
}
ReferenceArchive::ReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ReferenceArchive)
}
ReferenceArchive::ReferenceArchive(const ReferenceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReferenceArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_reference_){nullptr}
    , decltype(_impl_.range_reference_){nullptr}
    , decltype(_impl_.reference_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell_reference()) {
    _this->_impl_.cell_reference_ = new ::TSCE::CellReferenceArchive(*from._impl_.cell_reference_);
  }
  if (from._internal_has_range_reference()) {
    _this->_impl_.range_reference_ = new ::TSCE::RangeReferenceArchive(*from._impl_.range_reference_);
  }
  _this->_impl_.reference_type_ = from._impl_.reference_type_;
  // @@protoc_insertion_point(copy_constructor:TSCE.ReferenceArchive)
}

inline void ReferenceArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_reference_){nullptr}
    , decltype(_impl_.range_reference_){nullptr}
    , decltype(_impl_.reference_type_){1}
  };
}

ReferenceArchive::~ReferenceArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ReferenceArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReferenceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cell_reference_;
  if (this != internal_default_instance()) delete _impl_.range_reference_;
}

void ReferenceArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReferenceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ReferenceArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.cell_reference_ != nullptr);
      _impl_.cell_reference_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.range_reference_ != nullptr);
      _impl_.range_reference_->Clear();
    }
    _impl_.reference_type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.ReferenceArchive.ReferenceType reference_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCE::ReferenceArchive_ReferenceType_IsValid(val))) {
            _internal_set_reference_type(static_cast<::TSCE::ReferenceArchive_ReferenceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellReferenceArchive cell_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RangeReferenceArchive range_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_range_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReferenceArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ReferenceArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.ReferenceArchive.ReferenceType reference_type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reference_type(), target);
  }

  // optional .TSCE.CellReferenceArchive cell_reference = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cell_reference(this),
        _Internal::cell_reference(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.RangeReferenceArchive range_reference = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::range_reference(this),
        _Internal::range_reference(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ReferenceArchive)
  return target;
}

size_t ReferenceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ReferenceArchive)
  size_t total_size = 0;

  // required .TSCE.ReferenceArchive.ReferenceType reference_type = 1;
  if (_internal_has_reference_type()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_reference_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSCE.CellReferenceArchive cell_reference = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_reference_);
    }

    // optional .TSCE.RangeReferenceArchive range_reference = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.range_reference_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReferenceArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReferenceArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReferenceArchive::GetClassData() const { return &_class_data_; }


void ReferenceArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReferenceArchive*>(&to_msg);
  auto& from = static_cast<const ReferenceArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ReferenceArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_cell_reference()->::TSCE::CellReferenceArchive::MergeFrom(
          from._internal_cell_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_range_reference()->::TSCE::RangeReferenceArchive::MergeFrom(
          from._internal_range_reference());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.reference_type_ = from._impl_.reference_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReferenceArchive::CopyFrom(const ReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_cell_reference()) {
    if (!_impl_.cell_reference_->IsInitialized()) return false;
  }
  if (_internal_has_range_reference()) {
    if (!_impl_.range_reference_->IsInitialized()) return false;
  }
  return true;
}

void ReferenceArchive::InternalSwap(ReferenceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReferenceArchive, _impl_.range_reference_)
      + sizeof(ReferenceArchive::_impl_.range_reference_)
      - PROTOBUF_FIELD_OFFSET(ReferenceArchive, _impl_.cell_reference_)>(
          reinterpret_cast<char*>(&_impl_.cell_reference_),
          reinterpret_cast<char*>(&other->_impl_.cell_reference_));
  swap(_impl_.reference_type_, other->_impl_.reference_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[5]);
}

// ===================================================================

class EdgeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<EdgeArchive>()._impl_._has_bits_);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_precedent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::CFUUIDArchive& owner_id(const EdgeArchive* msg);
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000e) ^ 0x0000000e) != 0;
  }
};

const ::TSCE::CFUUIDArchive&
EdgeArchive::_Internal::owner_id(const EdgeArchive* msg) {
  return *msg->_impl_.owner_id_;
}
EdgeArchive::EdgeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.EdgeArchive)
}
EdgeArchive::EdgeArchive(const EdgeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EdgeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.owner_id_){nullptr}
    , decltype(_impl_.column_){}
    , decltype(_impl_.row_){}
    , decltype(_impl_.is_precedent_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_id()) {
    _this->_impl_.owner_id_ = new ::TSCE::CFUUIDArchive(*from._impl_.owner_id_);
  }
  ::memcpy(&_impl_.column_, &from._impl_.column_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_precedent_) -
    reinterpret_cast<char*>(&_impl_.column_)) + sizeof(_impl_.is_precedent_));
  // @@protoc_insertion_point(copy_constructor:TSCE.EdgeArchive)
}

inline void EdgeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.owner_id_){nullptr}
    , decltype(_impl_.column_){0u}
    , decltype(_impl_.row_){0u}
    , decltype(_impl_.is_precedent_){false}
  };
}

EdgeArchive::~EdgeArchive() {
  // @@protoc_insertion_point(destructor:TSCE.EdgeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EdgeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.owner_id_;
}

void EdgeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EdgeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.EdgeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.owner_id_ != nullptr);
    _impl_.owner_id_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_precedent_) -
        reinterpret_cast<char*>(&_impl_.column_)) + sizeof(_impl_.is_precedent_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdgeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_column(&has_bits);
          _impl_.column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_row(&has_bits);
          _impl_.row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool is_precedent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_precedent(&has_bits);
          _impl_.is_precedent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CFUUIDArchive owner_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EdgeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.EdgeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 column = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_column(), target);
  }

  // required uint32 row = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_row(), target);
  }

  // required bool is_precedent = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_precedent(), target);
  }

  // optional .TSCE.CFUUIDArchive owner_id = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::owner_id(this),
        _Internal::owner_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.EdgeArchive)
  return target;
}

size_t EdgeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.EdgeArchive)
  size_t total_size = 0;

  if (_internal_has_column()) {
    // required uint32 column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());
  }

  if (_internal_has_row()) {
    // required uint32 row = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row());
  }

  if (_internal_has_is_precedent()) {
    // required bool is_precedent = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t EdgeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.EdgeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required uint32 column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());

    // required uint32 row = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row());

    // required bool is_precedent = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSCE.CFUUIDArchive owner_id = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.owner_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EdgeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EdgeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EdgeArchive::GetClassData() const { return &_class_data_; }


void EdgeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EdgeArchive*>(&to_msg);
  auto& from = static_cast<const EdgeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.EdgeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_owner_id()->::TSCE::CFUUIDArchive::MergeFrom(
          from._internal_owner_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.column_ = from._impl_.column_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.row_ = from._impl_.row_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.is_precedent_ = from._impl_.is_precedent_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EdgeArchive::CopyFrom(const EdgeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.EdgeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void EdgeArchive::InternalSwap(EdgeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EdgeArchive, _impl_.is_precedent_)
      + sizeof(EdgeArchive::_impl_.is_precedent_)
      - PROTOBUF_FIELD_OFFSET(EdgeArchive, _impl_.owner_id_)>(
          reinterpret_cast<char*>(&_impl_.owner_id_),
          reinterpret_cast<char*>(&other->_impl_.owner_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EdgeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[6]);
}

// ===================================================================

class EdgesArchive::_Internal {
 public:
};

EdgesArchive::EdgesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.EdgesArchive)
}
EdgesArchive::EdgesArchive(const EdgesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EdgesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.packed_edge_without_owner_){from._impl_.packed_edge_without_owner_}
    , decltype(_impl_.packed_edge_with_owner_){from._impl_.packed_edge_with_owner_}
    , decltype(_impl_.owner_id_for_edge_){from._impl_.owner_id_for_edge_}
    , decltype(_impl_.internal_owner_id_for_edge_){from._impl_.internal_owner_id_for_edge_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.EdgesArchive)
}

inline void EdgesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.packed_edge_without_owner_){arena}
    , decltype(_impl_.packed_edge_with_owner_){arena}
    , decltype(_impl_.owner_id_for_edge_){arena}
    , decltype(_impl_.internal_owner_id_for_edge_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EdgesArchive::~EdgesArchive() {
  // @@protoc_insertion_point(destructor:TSCE.EdgesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EdgesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.packed_edge_without_owner_.~RepeatedField();
  _impl_.packed_edge_with_owner_.~RepeatedField();
  _impl_.owner_id_for_edge_.~RepeatedPtrField();
  _impl_.internal_owner_id_for_edge_.~RepeatedField();
}

void EdgesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EdgesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.EdgesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.packed_edge_without_owner_.Clear();
  _impl_.packed_edge_with_owner_.Clear();
  _impl_.owner_id_for_edge_.Clear();
  _impl_.internal_owner_id_for_edge_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdgesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 packed_edge_without_owner = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_packed_edge_without_owner(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_packed_edge_without_owner(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 packed_edge_with_owner = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_packed_edge_with_owner(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<uint8_t>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_packed_edge_with_owner(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.CFUUIDArchive owner_id_for_edge = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_owner_id_for_edge(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 internal_owner_id_for_edge = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_internal_owner_id_for_edge(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<96>(ptr));
        } else if (static_cast<uint8_t>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_internal_owner_id_for_edge(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EdgesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.EdgesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 packed_edge_without_owner = 9;
  for (int i = 0, n = this->_internal_packed_edge_without_owner_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_packed_edge_without_owner(i), target);
  }

  // repeated uint32 packed_edge_with_owner = 10;
  for (int i = 0, n = this->_internal_packed_edge_with_owner_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_packed_edge_with_owner(i), target);
  }

  // repeated .TSCE.CFUUIDArchive owner_id_for_edge = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_owner_id_for_edge_size()); i < n; i++) {
    const auto& repfield = this->_internal_owner_id_for_edge(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 internal_owner_id_for_edge = 12;
  for (int i = 0, n = this->_internal_internal_owner_id_for_edge_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_internal_owner_id_for_edge(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.EdgesArchive)
  return target;
}

size_t EdgesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.EdgesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 packed_edge_without_owner = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.packed_edge_without_owner_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_packed_edge_without_owner_size());
    total_size += data_size;
  }

  // repeated uint32 packed_edge_with_owner = 10;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.packed_edge_with_owner_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_packed_edge_with_owner_size());
    total_size += data_size;
  }

  // repeated .TSCE.CFUUIDArchive owner_id_for_edge = 11;
  total_size += 1UL * this->_internal_owner_id_for_edge_size();
  for (const auto& msg : this->_impl_.owner_id_for_edge_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 internal_owner_id_for_edge = 12;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.internal_owner_id_for_edge_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_internal_owner_id_for_edge_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EdgesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EdgesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EdgesArchive::GetClassData() const { return &_class_data_; }


void EdgesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EdgesArchive*>(&to_msg);
  auto& from = static_cast<const EdgesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.EdgesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.packed_edge_without_owner_.MergeFrom(from._impl_.packed_edge_without_owner_);
  _this->_impl_.packed_edge_with_owner_.MergeFrom(from._impl_.packed_edge_with_owner_);
  _this->_impl_.owner_id_for_edge_.MergeFrom(from._impl_.owner_id_for_edge_);
  _this->_impl_.internal_owner_id_for_edge_.MergeFrom(from._impl_.internal_owner_id_for_edge_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EdgesArchive::CopyFrom(const EdgesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.EdgesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgesArchive::IsInitialized() const {
  return true;
}

void EdgesArchive::InternalSwap(EdgesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.packed_edge_without_owner_.InternalSwap(&other->_impl_.packed_edge_without_owner_);
  _impl_.packed_edge_with_owner_.InternalSwap(&other->_impl_.packed_edge_with_owner_);
  _impl_.owner_id_for_edge_.InternalSwap(&other->_impl_.owner_id_for_edge_);
  _impl_.internal_owner_id_for_edge_.InternalSwap(&other->_impl_.internal_owner_id_for_edge_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EdgesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[7]);
}

// ===================================================================

class CellRecordArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellRecordArchive>()._impl_._has_bits_);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dirty_self_plus_precedents_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_in_a_cycle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_contains_a_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_has_calculated_precedents(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_calculate_precedents_on_next_recalc(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_translate_for_excel_import_on_next_recalc(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSCE::EdgesArchive& edges(const CellRecordArchive* msg);
  static void set_has_edges(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::TSCE::EdgesArchive&
CellRecordArchive::_Internal::edges(const CellRecordArchive* msg) {
  return *msg->_impl_.edges_;
}
CellRecordArchive::CellRecordArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellRecordArchive)
}
CellRecordArchive::CellRecordArchive(const CellRecordArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellRecordArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.edge_){from._impl_.edge_}
    , decltype(_impl_.edges_){nullptr}
    , decltype(_impl_.column_){}
    , decltype(_impl_.row_){}
    , decltype(_impl_.dirty_self_plus_precedents_count_){}
    , decltype(_impl_.is_in_a_cycle_){}
    , decltype(_impl_.has_calculated_precedents_){}
    , decltype(_impl_.calculate_precedents_on_next_recalc_){}
    , decltype(_impl_.translate_for_excel_import_on_next_recalc_){}
    , decltype(_impl_.contains_a_formula_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_edges()) {
    _this->_impl_.edges_ = new ::TSCE::EdgesArchive(*from._impl_.edges_);
  }
  ::memcpy(&_impl_.column_, &from._impl_.column_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.contains_a_formula_) -
    reinterpret_cast<char*>(&_impl_.column_)) + sizeof(_impl_.contains_a_formula_));
  // @@protoc_insertion_point(copy_constructor:TSCE.CellRecordArchive)
}

inline void CellRecordArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.edge_){arena}
    , decltype(_impl_.edges_){nullptr}
    , decltype(_impl_.column_){0u}
    , decltype(_impl_.row_){0u}
    , decltype(_impl_.dirty_self_plus_precedents_count_){0u}
    , decltype(_impl_.is_in_a_cycle_){false}
    , decltype(_impl_.has_calculated_precedents_){false}
    , decltype(_impl_.calculate_precedents_on_next_recalc_){false}
    , decltype(_impl_.translate_for_excel_import_on_next_recalc_){false}
    , decltype(_impl_.contains_a_formula_){true}
  };
}

CellRecordArchive::~CellRecordArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellRecordArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellRecordArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.edge_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.edges_;
}

void CellRecordArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellRecordArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellRecordArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.edge_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.edges_ != nullptr);
    _impl_.edges_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.translate_for_excel_import_on_next_recalc_) -
        reinterpret_cast<char*>(&_impl_.column_)) + sizeof(_impl_.translate_for_excel_import_on_next_recalc_));
  }
  _impl_.contains_a_formula_ = true;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellRecordArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_column(&has_bits);
          _impl_.column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_row(&has_bits);
          _impl_.row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 dirty_self_plus_precedents_count = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_dirty_self_plus_precedents_count(&has_bits);
          _impl_.dirty_self_plus_precedents_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_in_a_cycle = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_in_a_cycle(&has_bits);
          _impl_.is_in_a_cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.EdgeArchive edge = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edge(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool contains_a_formula = 6 [default = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_contains_a_formula(&has_bits);
          _impl_.contains_a_formula_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_calculated_precedents = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_has_calculated_precedents(&has_bits);
          _impl_.has_calculated_precedents_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool calculate_precedents_on_next_recalc = 8 [default = false, deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_calculate_precedents_on_next_recalc(&has_bits);
          _impl_.calculate_precedents_on_next_recalc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.EdgesArchive edges = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_edges(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool translate_for_excel_import_on_next_recalc = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_translate_for_excel_import_on_next_recalc(&has_bits);
          _impl_.translate_for_excel_import_on_next_recalc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellRecordArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellRecordArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 column = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_column(), target);
  }

  // required uint32 row = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_row(), target);
  }

  // optional uint32 dirty_self_plus_precedents_count = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_dirty_self_plus_precedents_count(), target);
  }

  // optional bool is_in_a_cycle = 4 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_in_a_cycle(), target);
  }

  // repeated .TSCE.EdgeArchive edge = 5 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_edge_size()); i < n; i++) {
    const auto& repfield = this->_internal_edge(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool contains_a_formula = 6 [default = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_contains_a_formula(), target);
  }

  // optional bool has_calculated_precedents = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_has_calculated_precedents(), target);
  }

  // optional bool calculate_precedents_on_next_recalc = 8 [default = false, deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_calculate_precedents_on_next_recalc(), target);
  }

  // optional .TSCE.EdgesArchive edges = 9;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::edges(this),
        _Internal::edges(this).GetCachedSize(), target, stream);
  }

  // optional bool translate_for_excel_import_on_next_recalc = 10 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_translate_for_excel_import_on_next_recalc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellRecordArchive)
  return target;
}

size_t CellRecordArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.CellRecordArchive)
  size_t total_size = 0;

  if (_internal_has_column()) {
    // required uint32 column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());
  }

  if (_internal_has_row()) {
    // required uint32 row = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row());
  }

  return total_size;
}
size_t CellRecordArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellRecordArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());

    // required uint32 row = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.EdgeArchive edge = 5 [deprecated = true];
  total_size += 1UL * this->_internal_edge_size();
  for (const auto& msg : this->_impl_.edge_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSCE.EdgesArchive edges = 9;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.edges_);
  }

  if (cached_has_bits & 0x000000f8u) {
    // optional uint32 dirty_self_plus_precedents_count = 3 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dirty_self_plus_precedents_count());
    }

    // optional bool is_in_a_cycle = 4 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool has_calculated_precedents = 7 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool calculate_precedents_on_next_recalc = 8 [default = false, deprecated = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool translate_for_excel_import_on_next_recalc = 10 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool contains_a_formula = 6 [default = true];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellRecordArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellRecordArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellRecordArchive::GetClassData() const { return &_class_data_; }


void CellRecordArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellRecordArchive*>(&to_msg);
  auto& from = static_cast<const CellRecordArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellRecordArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.edge_.MergeFrom(from._impl_.edge_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_edges()->::TSCE::EdgesArchive::MergeFrom(
          from._internal_edges());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.column_ = from._impl_.column_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.row_ = from._impl_.row_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.dirty_self_plus_precedents_count_ = from._impl_.dirty_self_plus_precedents_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_in_a_cycle_ = from._impl_.is_in_a_cycle_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.has_calculated_precedents_ = from._impl_.has_calculated_precedents_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.calculate_precedents_on_next_recalc_ = from._impl_.calculate_precedents_on_next_recalc_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.translate_for_excel_import_on_next_recalc_ = from._impl_.translate_for_excel_import_on_next_recalc_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_contains_a_formula(from._internal_contains_a_formula());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellRecordArchive::CopyFrom(const CellRecordArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellRecordArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellRecordArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.edge_))
    return false;
  return true;
}

void CellRecordArchive::InternalSwap(CellRecordArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.edge_.InternalSwap(&other->_impl_.edge_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellRecordArchive, _impl_.translate_for_excel_import_on_next_recalc_)
      + sizeof(CellRecordArchive::_impl_.translate_for_excel_import_on_next_recalc_)
      - PROTOBUF_FIELD_OFFSET(CellRecordArchive, _impl_.edges_)>(
          reinterpret_cast<char*>(&_impl_.edges_),
          reinterpret_cast<char*>(&other->_impl_.edges_));
  swap(_impl_.contains_a_formula_, other->_impl_.contains_a_formula_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellRecordArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[8]);
}

// ===================================================================

class CellDependenciesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellDependenciesArchive>()._impl_._has_bits_);
  static void set_has_num_dirty_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CellDependenciesArchive::CellDependenciesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellDependenciesArchive)
}
CellDependenciesArchive::CellDependenciesArchive(const CellDependenciesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellDependenciesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_record_){from._impl_.cell_record_}
    , decltype(_impl_.num_dirty_cells_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.num_dirty_cells_ = from._impl_.num_dirty_cells_;
  // @@protoc_insertion_point(copy_constructor:TSCE.CellDependenciesArchive)
}

inline void CellDependenciesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_record_){arena}
    , decltype(_impl_.num_dirty_cells_){0u}
  };
}

CellDependenciesArchive::~CellDependenciesArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellDependenciesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellDependenciesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cell_record_.~RepeatedPtrField();
}

void CellDependenciesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellDependenciesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellDependenciesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cell_record_.Clear();
  _impl_.num_dirty_cells_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellDependenciesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.CellRecordArchive cell_record = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_record(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_dirty_cells = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_dirty_cells(&has_bits);
          _impl_.num_dirty_cells_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellDependenciesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellDependenciesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.CellRecordArchive cell_record = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cell_record_size()); i < n; i++) {
    const auto& repfield = this->_internal_cell_record(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 num_dirty_cells = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_dirty_cells(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellDependenciesArchive)
  return target;
}

size_t CellDependenciesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellDependenciesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.CellRecordArchive cell_record = 1;
  total_size += 1UL * this->_internal_cell_record_size();
  for (const auto& msg : this->_impl_.cell_record_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 num_dirty_cells = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_dirty_cells());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellDependenciesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellDependenciesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellDependenciesArchive::GetClassData() const { return &_class_data_; }


void CellDependenciesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellDependenciesArchive*>(&to_msg);
  auto& from = static_cast<const CellDependenciesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellDependenciesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cell_record_.MergeFrom(from._impl_.cell_record_);
  if (from._internal_has_num_dirty_cells()) {
    _this->_internal_set_num_dirty_cells(from._internal_num_dirty_cells());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellDependenciesArchive::CopyFrom(const CellDependenciesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellDependenciesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellDependenciesArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.cell_record_))
    return false;
  return true;
}

void CellDependenciesArchive::InternalSwap(CellDependenciesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.cell_record_.InternalSwap(&other->_impl_.cell_record_);
  swap(_impl_.num_dirty_cells_, other->_impl_.num_dirty_cells_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellDependenciesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[9]);
}

// ===================================================================

class VolatileDependenciesArchive::_Internal {
 public:
};

VolatileDependenciesArchive::VolatileDependenciesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.VolatileDependenciesArchive)
}
VolatileDependenciesArchive::VolatileDependenciesArchive(const VolatileDependenciesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VolatileDependenciesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.volatile_time_cell_column_){from._impl_.volatile_time_cell_column_}
    , decltype(_impl_.volatile_time_cell_row_){from._impl_.volatile_time_cell_row_}
    , decltype(_impl_.volatile_random_cell_column_){from._impl_.volatile_random_cell_column_}
    , decltype(_impl_.volatile_random_cell_row_){from._impl_.volatile_random_cell_row_}
    , decltype(_impl_.volatile_location_cell_column_){from._impl_.volatile_location_cell_column_}
    , decltype(_impl_.volatile_location_cell_row_){from._impl_.volatile_location_cell_row_}
    , decltype(_impl_.volatile_compass_cell_column_){from._impl_.volatile_compass_cell_column_}
    , decltype(_impl_.volatile_compass_cell_row_){from._impl_.volatile_compass_cell_row_}
    , decltype(_impl_.calculated_dependency_cell_column_){from._impl_.calculated_dependency_cell_column_}
    , decltype(_impl_.calculated_dependency_cell_row_){from._impl_.calculated_dependency_cell_row_}
    , decltype(_impl_.volatile_geometry_cell_){from._impl_.volatile_geometry_cell_}
    , decltype(_impl_.volatile_geometry_cell_reference_){from._impl_.volatile_geometry_cell_reference_}
    , decltype(_impl_.volatile_locale_cell_column_){from._impl_.volatile_locale_cell_column_}
    , decltype(_impl_.volatile_locale_cell_row_){from._impl_.volatile_locale_cell_row_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.VolatileDependenciesArchive)
}

inline void VolatileDependenciesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.volatile_time_cell_column_){arena}
    , decltype(_impl_.volatile_time_cell_row_){arena}
    , decltype(_impl_.volatile_random_cell_column_){arena}
    , decltype(_impl_.volatile_random_cell_row_){arena}
    , decltype(_impl_.volatile_location_cell_column_){arena}
    , decltype(_impl_.volatile_location_cell_row_){arena}
    , decltype(_impl_.volatile_compass_cell_column_){arena}
    , decltype(_impl_.volatile_compass_cell_row_){arena}
    , decltype(_impl_.calculated_dependency_cell_column_){arena}
    , decltype(_impl_.calculated_dependency_cell_row_){arena}
    , decltype(_impl_.volatile_geometry_cell_){arena}
    , decltype(_impl_.volatile_geometry_cell_reference_){arena}
    , decltype(_impl_.volatile_locale_cell_column_){arena}
    , decltype(_impl_.volatile_locale_cell_row_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VolatileDependenciesArchive::~VolatileDependenciesArchive() {
  // @@protoc_insertion_point(destructor:TSCE.VolatileDependenciesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VolatileDependenciesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.volatile_time_cell_column_.~RepeatedField();
  _impl_.volatile_time_cell_row_.~RepeatedField();
  _impl_.volatile_random_cell_column_.~RepeatedField();
  _impl_.volatile_random_cell_row_.~RepeatedField();
  _impl_.volatile_location_cell_column_.~RepeatedField();
  _impl_.volatile_location_cell_row_.~RepeatedField();
  _impl_.volatile_compass_cell_column_.~RepeatedField();
  _impl_.volatile_compass_cell_row_.~RepeatedField();
  _impl_.calculated_dependency_cell_column_.~RepeatedField();
  _impl_.calculated_dependency_cell_row_.~RepeatedField();
  _impl_.volatile_geometry_cell_.~RepeatedPtrField();
  _impl_.volatile_geometry_cell_reference_.~RepeatedPtrField();
  _impl_.volatile_locale_cell_column_.~RepeatedField();
  _impl_.volatile_locale_cell_row_.~RepeatedField();
}

void VolatileDependenciesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VolatileDependenciesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.VolatileDependenciesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.volatile_time_cell_column_.Clear();
  _impl_.volatile_time_cell_row_.Clear();
  _impl_.volatile_random_cell_column_.Clear();
  _impl_.volatile_random_cell_row_.Clear();
  _impl_.volatile_location_cell_column_.Clear();
  _impl_.volatile_location_cell_row_.Clear();
  _impl_.volatile_compass_cell_column_.Clear();
  _impl_.volatile_compass_cell_row_.Clear();
  _impl_.calculated_dependency_cell_column_.Clear();
  _impl_.calculated_dependency_cell_row_.Clear();
  _impl_.volatile_geometry_cell_.Clear();
  _impl_.volatile_geometry_cell_reference_.Clear();
  _impl_.volatile_locale_cell_column_.Clear();
  _impl_.volatile_locale_cell_row_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VolatileDependenciesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 volatile_time_cell_column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_volatile_time_cell_column(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_time_cell_column(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 volatile_time_cell_row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_volatile_time_cell_row(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_time_cell_row(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 volatile_random_cell_column = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_volatile_random_cell_column(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_random_cell_column(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 volatile_random_cell_row = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_volatile_random_cell_row(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_random_cell_row(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 volatile_location_cell_column = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_volatile_location_cell_column(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_location_cell_column(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 volatile_location_cell_row = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_volatile_location_cell_row(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_location_cell_row(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 volatile_compass_cell_column = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_volatile_compass_cell_column(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_compass_cell_column(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 volatile_compass_cell_row = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_volatile_compass_cell_row(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_compass_cell_row(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 calculated_dependency_cell_column = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_calculated_dependency_cell_column(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_calculated_dependency_cell_column(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 calculated_dependency_cell_row = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_calculated_dependency_cell_row(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<uint8_t>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_calculated_dependency_cell_row(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.CellCoordinateArchive volatile_geometry_cell = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_volatile_geometry_cell(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.CellReferenceArchive volatile_geometry_cell_reference = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_volatile_geometry_cell_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 volatile_locale_cell_column = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_volatile_locale_cell_column(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<120>(ptr));
        } else if (static_cast<uint8_t>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_locale_cell_column(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 volatile_locale_cell_row = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_volatile_locale_cell_row(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<128>(ptr));
        } else if (static_cast<uint8_t>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_locale_cell_row(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VolatileDependenciesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.VolatileDependenciesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 volatile_time_cell_column = 1;
  for (int i = 0, n = this->_internal_volatile_time_cell_column_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_volatile_time_cell_column(i), target);
  }

  // repeated uint32 volatile_time_cell_row = 2;
  for (int i = 0, n = this->_internal_volatile_time_cell_row_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_volatile_time_cell_row(i), target);
  }

  // repeated uint32 volatile_random_cell_column = 3;
  for (int i = 0, n = this->_internal_volatile_random_cell_column_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_volatile_random_cell_column(i), target);
  }

  // repeated uint32 volatile_random_cell_row = 4;
  for (int i = 0, n = this->_internal_volatile_random_cell_row_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_volatile_random_cell_row(i), target);
  }

  // repeated uint32 volatile_location_cell_column = 5;
  for (int i = 0, n = this->_internal_volatile_location_cell_column_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_volatile_location_cell_column(i), target);
  }

  // repeated uint32 volatile_location_cell_row = 6;
  for (int i = 0, n = this->_internal_volatile_location_cell_row_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_volatile_location_cell_row(i), target);
  }

  // repeated uint32 volatile_compass_cell_column = 7;
  for (int i = 0, n = this->_internal_volatile_compass_cell_column_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_volatile_compass_cell_column(i), target);
  }

  // repeated uint32 volatile_compass_cell_row = 8;
  for (int i = 0, n = this->_internal_volatile_compass_cell_row_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_volatile_compass_cell_row(i), target);
  }

  // repeated uint32 calculated_dependency_cell_column = 9;
  for (int i = 0, n = this->_internal_calculated_dependency_cell_column_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_calculated_dependency_cell_column(i), target);
  }

  // repeated uint32 calculated_dependency_cell_row = 10;
  for (int i = 0, n = this->_internal_calculated_dependency_cell_row_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_calculated_dependency_cell_row(i), target);
  }

  // repeated .TSCE.CellCoordinateArchive volatile_geometry_cell = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_volatile_geometry_cell_size()); i < n; i++) {
    const auto& repfield = this->_internal_volatile_geometry_cell(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCE.CellReferenceArchive volatile_geometry_cell_reference = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_volatile_geometry_cell_reference_size()); i < n; i++) {
    const auto& repfield = this->_internal_volatile_geometry_cell_reference(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 volatile_locale_cell_column = 15;
  for (int i = 0, n = this->_internal_volatile_locale_cell_column_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_volatile_locale_cell_column(i), target);
  }

  // repeated uint32 volatile_locale_cell_row = 16;
  for (int i = 0, n = this->_internal_volatile_locale_cell_row_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_volatile_locale_cell_row(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.VolatileDependenciesArchive)
  return target;
}

size_t VolatileDependenciesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.VolatileDependenciesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 volatile_time_cell_column = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.volatile_time_cell_column_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_volatile_time_cell_column_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_time_cell_row = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.volatile_time_cell_row_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_volatile_time_cell_row_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_random_cell_column = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.volatile_random_cell_column_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_volatile_random_cell_column_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_random_cell_row = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.volatile_random_cell_row_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_volatile_random_cell_row_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_location_cell_column = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.volatile_location_cell_column_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_volatile_location_cell_column_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_location_cell_row = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.volatile_location_cell_row_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_volatile_location_cell_row_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_compass_cell_column = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.volatile_compass_cell_column_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_volatile_compass_cell_column_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_compass_cell_row = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.volatile_compass_cell_row_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_volatile_compass_cell_row_size());
    total_size += data_size;
  }

  // repeated uint32 calculated_dependency_cell_column = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.calculated_dependency_cell_column_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_calculated_dependency_cell_column_size());
    total_size += data_size;
  }

  // repeated uint32 calculated_dependency_cell_row = 10;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.calculated_dependency_cell_row_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_calculated_dependency_cell_row_size());
    total_size += data_size;
  }

  // repeated .TSCE.CellCoordinateArchive volatile_geometry_cell = 11;
  total_size += 1UL * this->_internal_volatile_geometry_cell_size();
  for (const auto& msg : this->_impl_.volatile_geometry_cell_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.CellReferenceArchive volatile_geometry_cell_reference = 13;
  total_size += 1UL * this->_internal_volatile_geometry_cell_reference_size();
  for (const auto& msg : this->_impl_.volatile_geometry_cell_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 volatile_locale_cell_column = 15;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.volatile_locale_cell_column_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_volatile_locale_cell_column_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_locale_cell_row = 16;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.volatile_locale_cell_row_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_volatile_locale_cell_row_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VolatileDependenciesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VolatileDependenciesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VolatileDependenciesArchive::GetClassData() const { return &_class_data_; }


void VolatileDependenciesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VolatileDependenciesArchive*>(&to_msg);
  auto& from = static_cast<const VolatileDependenciesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.VolatileDependenciesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.volatile_time_cell_column_.MergeFrom(from._impl_.volatile_time_cell_column_);
  _this->_impl_.volatile_time_cell_row_.MergeFrom(from._impl_.volatile_time_cell_row_);
  _this->_impl_.volatile_random_cell_column_.MergeFrom(from._impl_.volatile_random_cell_column_);
  _this->_impl_.volatile_random_cell_row_.MergeFrom(from._impl_.volatile_random_cell_row_);
  _this->_impl_.volatile_location_cell_column_.MergeFrom(from._impl_.volatile_location_cell_column_);
  _this->_impl_.volatile_location_cell_row_.MergeFrom(from._impl_.volatile_location_cell_row_);
  _this->_impl_.volatile_compass_cell_column_.MergeFrom(from._impl_.volatile_compass_cell_column_);
  _this->_impl_.volatile_compass_cell_row_.MergeFrom(from._impl_.volatile_compass_cell_row_);
  _this->_impl_.calculated_dependency_cell_column_.MergeFrom(from._impl_.calculated_dependency_cell_column_);
  _this->_impl_.calculated_dependency_cell_row_.MergeFrom(from._impl_.calculated_dependency_cell_row_);
  _this->_impl_.volatile_geometry_cell_.MergeFrom(from._impl_.volatile_geometry_cell_);
  _this->_impl_.volatile_geometry_cell_reference_.MergeFrom(from._impl_.volatile_geometry_cell_reference_);
  _this->_impl_.volatile_locale_cell_column_.MergeFrom(from._impl_.volatile_locale_cell_column_);
  _this->_impl_.volatile_locale_cell_row_.MergeFrom(from._impl_.volatile_locale_cell_row_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VolatileDependenciesArchive::CopyFrom(const VolatileDependenciesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.VolatileDependenciesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolatileDependenciesArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.volatile_geometry_cell_reference_))
    return false;
  return true;
}

void VolatileDependenciesArchive::InternalSwap(VolatileDependenciesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.volatile_time_cell_column_.InternalSwap(&other->_impl_.volatile_time_cell_column_);
  _impl_.volatile_time_cell_row_.InternalSwap(&other->_impl_.volatile_time_cell_row_);
  _impl_.volatile_random_cell_column_.InternalSwap(&other->_impl_.volatile_random_cell_column_);
  _impl_.volatile_random_cell_row_.InternalSwap(&other->_impl_.volatile_random_cell_row_);
  _impl_.volatile_location_cell_column_.InternalSwap(&other->_impl_.volatile_location_cell_column_);
  _impl_.volatile_location_cell_row_.InternalSwap(&other->_impl_.volatile_location_cell_row_);
  _impl_.volatile_compass_cell_column_.InternalSwap(&other->_impl_.volatile_compass_cell_column_);
  _impl_.volatile_compass_cell_row_.InternalSwap(&other->_impl_.volatile_compass_cell_row_);
  _impl_.calculated_dependency_cell_column_.InternalSwap(&other->_impl_.calculated_dependency_cell_column_);
  _impl_.calculated_dependency_cell_row_.InternalSwap(&other->_impl_.calculated_dependency_cell_row_);
  _impl_.volatile_geometry_cell_.InternalSwap(&other->_impl_.volatile_geometry_cell_);
  _impl_.volatile_geometry_cell_reference_.InternalSwap(&other->_impl_.volatile_geometry_cell_reference_);
  _impl_.volatile_locale_cell_column_.InternalSwap(&other->_impl_.volatile_locale_cell_column_);
  _impl_.volatile_locale_cell_row_.InternalSwap(&other->_impl_.volatile_locale_cell_row_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VolatileDependenciesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[10]);
}

// ===================================================================

class RangeBackDependencyArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RangeBackDependencyArchive>()._impl_._has_bits_);
  static void set_has_cell_coord_row(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cell_coord_column(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::RangeReferenceArchive& range_reference(const RangeBackDependencyArchive* msg);
  static void set_has_range_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::InternalRangeReferenceArchive& internal_range_reference(const RangeBackDependencyArchive* msg);
  static void set_has_internal_range_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000c) ^ 0x0000000c) != 0;
  }
};

const ::TSCE::RangeReferenceArchive&
RangeBackDependencyArchive::_Internal::range_reference(const RangeBackDependencyArchive* msg) {
  return *msg->_impl_.range_reference_;
}
const ::TSCE::InternalRangeReferenceArchive&
RangeBackDependencyArchive::_Internal::internal_range_reference(const RangeBackDependencyArchive* msg) {
  return *msg->_impl_.internal_range_reference_;
}
RangeBackDependencyArchive::RangeBackDependencyArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RangeBackDependencyArchive)
}
RangeBackDependencyArchive::RangeBackDependencyArchive(const RangeBackDependencyArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RangeBackDependencyArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_reference_){nullptr}
    , decltype(_impl_.internal_range_reference_){nullptr}
    , decltype(_impl_.cell_coord_row_){}
    , decltype(_impl_.cell_coord_column_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_range_reference()) {
    _this->_impl_.range_reference_ = new ::TSCE::RangeReferenceArchive(*from._impl_.range_reference_);
  }
  if (from._internal_has_internal_range_reference()) {
    _this->_impl_.internal_range_reference_ = new ::TSCE::InternalRangeReferenceArchive(*from._impl_.internal_range_reference_);
  }
  ::memcpy(&_impl_.cell_coord_row_, &from._impl_.cell_coord_row_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cell_coord_column_) -
    reinterpret_cast<char*>(&_impl_.cell_coord_row_)) + sizeof(_impl_.cell_coord_column_));
  // @@protoc_insertion_point(copy_constructor:TSCE.RangeBackDependencyArchive)
}

inline void RangeBackDependencyArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_reference_){nullptr}
    , decltype(_impl_.internal_range_reference_){nullptr}
    , decltype(_impl_.cell_coord_row_){0u}
    , decltype(_impl_.cell_coord_column_){0u}
  };
}

RangeBackDependencyArchive::~RangeBackDependencyArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RangeBackDependencyArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RangeBackDependencyArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.range_reference_;
  if (this != internal_default_instance()) delete _impl_.internal_range_reference_;
}

void RangeBackDependencyArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RangeBackDependencyArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RangeBackDependencyArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.range_reference_ != nullptr);
      _impl_.range_reference_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.internal_range_reference_ != nullptr);
      _impl_.internal_range_reference_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.cell_coord_row_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cell_coord_column_) -
        reinterpret_cast<char*>(&_impl_.cell_coord_row_)) + sizeof(_impl_.cell_coord_column_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeBackDependencyArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 cell_coord_row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cell_coord_row(&has_bits);
          _impl_.cell_coord_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 cell_coord_column = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_cell_coord_column(&has_bits);
          _impl_.cell_coord_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RangeReferenceArchive range_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_range_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.InternalRangeReferenceArchive internal_range_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_internal_range_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RangeBackDependencyArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RangeBackDependencyArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 cell_coord_row = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cell_coord_row(), target);
  }

  // required uint32 cell_coord_column = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cell_coord_column(), target);
  }

  // optional .TSCE.RangeReferenceArchive range_reference = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::range_reference(this),
        _Internal::range_reference(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.InternalRangeReferenceArchive internal_range_reference = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::internal_range_reference(this),
        _Internal::internal_range_reference(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RangeBackDependencyArchive)
  return target;
}

size_t RangeBackDependencyArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.RangeBackDependencyArchive)
  size_t total_size = 0;

  if (_internal_has_cell_coord_row()) {
    // required uint32 cell_coord_row = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cell_coord_row());
  }

  if (_internal_has_cell_coord_column()) {
    // required uint32 cell_coord_column = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cell_coord_column());
  }

  return total_size;
}
size_t RangeBackDependencyArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RangeBackDependencyArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required uint32 cell_coord_row = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cell_coord_row());

    // required uint32 cell_coord_column = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cell_coord_column());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSCE.RangeReferenceArchive range_reference = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.range_reference_);
    }

    // optional .TSCE.InternalRangeReferenceArchive internal_range_reference = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.internal_range_reference_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RangeBackDependencyArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RangeBackDependencyArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RangeBackDependencyArchive::GetClassData() const { return &_class_data_; }


void RangeBackDependencyArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RangeBackDependencyArchive*>(&to_msg);
  auto& from = static_cast<const RangeBackDependencyArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RangeBackDependencyArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_range_reference()->::TSCE::RangeReferenceArchive::MergeFrom(
          from._internal_range_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_internal_range_reference()->::TSCE::InternalRangeReferenceArchive::MergeFrom(
          from._internal_internal_range_reference());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.cell_coord_row_ = from._impl_.cell_coord_row_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.cell_coord_column_ = from._impl_.cell_coord_column_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RangeBackDependencyArchive::CopyFrom(const RangeBackDependencyArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RangeBackDependencyArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeBackDependencyArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_range_reference()) {
    if (!_impl_.range_reference_->IsInitialized()) return false;
  }
  if (_internal_has_internal_range_reference()) {
    if (!_impl_.internal_range_reference_->IsInitialized()) return false;
  }
  return true;
}

void RangeBackDependencyArchive::InternalSwap(RangeBackDependencyArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RangeBackDependencyArchive, _impl_.cell_coord_column_)
      + sizeof(RangeBackDependencyArchive::_impl_.cell_coord_column_)
      - PROTOBUF_FIELD_OFFSET(RangeBackDependencyArchive, _impl_.range_reference_)>(
          reinterpret_cast<char*>(&_impl_.range_reference_),
          reinterpret_cast<char*>(&other->_impl_.range_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeBackDependencyArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[11]);
}

// ===================================================================

class RTreeInternalNodeContentsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RTreeInternalNodeContentsArchive>()._impl_._has_bits_);
  static const ::TSCE::RTreeNodeArchive& child(const RTreeInternalNodeContentsArchive* msg);
  static void set_has_child(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCE::RTreeNodeArchive&
RTreeInternalNodeContentsArchive::_Internal::child(const RTreeInternalNodeContentsArchive* msg) {
  return *msg->_impl_.child_;
}
RTreeInternalNodeContentsArchive::RTreeInternalNodeContentsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RTreeInternalNodeContentsArchive)
}
RTreeInternalNodeContentsArchive::RTreeInternalNodeContentsArchive(const RTreeInternalNodeContentsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RTreeInternalNodeContentsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_){from._impl_.min_}
    , decltype(_impl_.max_){from._impl_.max_}
    , decltype(_impl_.child_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    _this->_impl_.child_ = new ::TSCE::RTreeNodeArchive(*from._impl_.child_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.RTreeInternalNodeContentsArchive)
}

inline void RTreeInternalNodeContentsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_){arena}
    , decltype(_impl_.max_){arena}
    , decltype(_impl_.child_){nullptr}
  };
}

RTreeInternalNodeContentsArchive::~RTreeInternalNodeContentsArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RTreeInternalNodeContentsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RTreeInternalNodeContentsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.min_.~RepeatedField();
  _impl_.max_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.child_;
}

void RTreeInternalNodeContentsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RTreeInternalNodeContentsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RTreeInternalNodeContentsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.min_.Clear();
  _impl_.max_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.child_ != nullptr);
    _impl_.child_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RTreeInternalNodeContentsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_min(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_min(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_max(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.RTreeNodeArchive child = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RTreeInternalNodeContentsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RTreeInternalNodeContentsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 min = 1;
  for (int i = 0, n = this->_internal_min_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_min(i), target);
  }

  // repeated uint32 max = 2;
  for (int i = 0, n = this->_internal_max_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.RTreeNodeArchive child = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::child(this),
        _Internal::child(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RTreeInternalNodeContentsArchive)
  return target;
}

size_t RTreeInternalNodeContentsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RTreeInternalNodeContentsArchive)
  size_t total_size = 0;

  // required .TSCE.RTreeNodeArchive child = 3;
  if (_internal_has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.child_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 min = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.min_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_min_size());
    total_size += data_size;
  }

  // repeated uint32 max = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.max_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_max_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RTreeInternalNodeContentsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RTreeInternalNodeContentsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RTreeInternalNodeContentsArchive::GetClassData() const { return &_class_data_; }


void RTreeInternalNodeContentsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RTreeInternalNodeContentsArchive*>(&to_msg);
  auto& from = static_cast<const RTreeInternalNodeContentsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RTreeInternalNodeContentsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.min_.MergeFrom(from._impl_.min_);
  _this->_impl_.max_.MergeFrom(from._impl_.max_);
  if (from._internal_has_child()) {
    _this->_internal_mutable_child()->::TSCE::RTreeNodeArchive::MergeFrom(
        from._internal_child());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RTreeInternalNodeContentsArchive::CopyFrom(const RTreeInternalNodeContentsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RTreeInternalNodeContentsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTreeInternalNodeContentsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_child()) {
    if (!_impl_.child_->IsInitialized()) return false;
  }
  return true;
}

void RTreeInternalNodeContentsArchive::InternalSwap(RTreeInternalNodeContentsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.min_.InternalSwap(&other->_impl_.min_);
  _impl_.max_.InternalSwap(&other->_impl_.max_);
  swap(_impl_.child_, other->_impl_.child_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RTreeInternalNodeContentsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[12]);
}

// ===================================================================

class RTreeLeafNodeContentsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RTreeLeafNodeContentsArchive>()._impl_._has_bits_);
  static const ::TSCE::CellReferenceArchive& cell_reference(const RTreeLeafNodeContentsArchive* msg);
  static void set_has_cell_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCE::CellReferenceArchive&
RTreeLeafNodeContentsArchive::_Internal::cell_reference(const RTreeLeafNodeContentsArchive* msg) {
  return *msg->_impl_.cell_reference_;
}
RTreeLeafNodeContentsArchive::RTreeLeafNodeContentsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RTreeLeafNodeContentsArchive)
}
RTreeLeafNodeContentsArchive::RTreeLeafNodeContentsArchive(const RTreeLeafNodeContentsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RTreeLeafNodeContentsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_){from._impl_.min_}
    , decltype(_impl_.max_){from._impl_.max_}
    , decltype(_impl_.cell_reference_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell_reference()) {
    _this->_impl_.cell_reference_ = new ::TSCE::CellReferenceArchive(*from._impl_.cell_reference_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.RTreeLeafNodeContentsArchive)
}

inline void RTreeLeafNodeContentsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_){arena}
    , decltype(_impl_.max_){arena}
    , decltype(_impl_.cell_reference_){nullptr}
  };
}

RTreeLeafNodeContentsArchive::~RTreeLeafNodeContentsArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RTreeLeafNodeContentsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RTreeLeafNodeContentsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.min_.~RepeatedField();
  _impl_.max_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.cell_reference_;
}

void RTreeLeafNodeContentsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RTreeLeafNodeContentsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RTreeLeafNodeContentsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.min_.Clear();
  _impl_.max_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.cell_reference_ != nullptr);
    _impl_.cell_reference_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RTreeLeafNodeContentsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_min(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_min(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_max(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.CellReferenceArchive cell_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RTreeLeafNodeContentsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RTreeLeafNodeContentsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 min = 1;
  for (int i = 0, n = this->_internal_min_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_min(i), target);
  }

  // repeated uint32 max = 2;
  for (int i = 0, n = this->_internal_max_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.CellReferenceArchive cell_reference = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::cell_reference(this),
        _Internal::cell_reference(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RTreeLeafNodeContentsArchive)
  return target;
}

size_t RTreeLeafNodeContentsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RTreeLeafNodeContentsArchive)
  size_t total_size = 0;

  // required .TSCE.CellReferenceArchive cell_reference = 3;
  if (_internal_has_cell_reference()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_reference_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 min = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.min_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_min_size());
    total_size += data_size;
  }

  // repeated uint32 max = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.max_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_max_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RTreeLeafNodeContentsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RTreeLeafNodeContentsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RTreeLeafNodeContentsArchive::GetClassData() const { return &_class_data_; }


void RTreeLeafNodeContentsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RTreeLeafNodeContentsArchive*>(&to_msg);
  auto& from = static_cast<const RTreeLeafNodeContentsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RTreeLeafNodeContentsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.min_.MergeFrom(from._impl_.min_);
  _this->_impl_.max_.MergeFrom(from._impl_.max_);
  if (from._internal_has_cell_reference()) {
    _this->_internal_mutable_cell_reference()->::TSCE::CellReferenceArchive::MergeFrom(
        from._internal_cell_reference());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RTreeLeafNodeContentsArchive::CopyFrom(const RTreeLeafNodeContentsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RTreeLeafNodeContentsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTreeLeafNodeContentsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_cell_reference()) {
    if (!_impl_.cell_reference_->IsInitialized()) return false;
  }
  return true;
}

void RTreeLeafNodeContentsArchive::InternalSwap(RTreeLeafNodeContentsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.min_.InternalSwap(&other->_impl_.min_);
  _impl_.max_.InternalSwap(&other->_impl_.max_);
  swap(_impl_.cell_reference_, other->_impl_.cell_reference_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RTreeLeafNodeContentsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[13]);
}

// ===================================================================

class RTreeNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RTreeNodeArchive>()._impl_._has_bits_);
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

RTreeNodeArchive::RTreeNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RTreeNodeArchive)
}
RTreeNodeArchive::RTreeNodeArchive(const RTreeNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RTreeNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.internal_node_contents_){from._impl_.internal_node_contents_}
    , decltype(_impl_.leaf_node_contents_){from._impl_.leaf_node_contents_}
    , decltype(_impl_.level_){}
    , decltype(_impl_.count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.level_, &from._impl_.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:TSCE.RTreeNodeArchive)
}

inline void RTreeNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.internal_node_contents_){arena}
    , decltype(_impl_.leaf_node_contents_){arena}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.count_){0u}
  };
}

RTreeNodeArchive::~RTreeNodeArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RTreeNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RTreeNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.internal_node_contents_.~RepeatedPtrField();
  _impl_.leaf_node_contents_.~RepeatedPtrField();
}

void RTreeNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RTreeNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RTreeNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.internal_node_contents_.Clear();
  _impl_.leaf_node_contents_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.count_) -
        reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RTreeNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_level(&has_bits);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.RTreeInternalNodeContentsArchive internal_node_contents = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_internal_node_contents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.RTreeLeafNodeContentsArchive leaf_node_contents = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leaf_node_contents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RTreeNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RTreeNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_level(), target);
  }

  // required uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .TSCE.RTreeInternalNodeContentsArchive internal_node_contents = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_internal_node_contents_size()); i < n; i++) {
    const auto& repfield = this->_internal_internal_node_contents(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCE.RTreeLeafNodeContentsArchive leaf_node_contents = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_leaf_node_contents_size()); i < n; i++) {
    const auto& repfield = this->_internal_leaf_node_contents(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RTreeNodeArchive)
  return target;
}

size_t RTreeNodeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.RTreeNodeArchive)
  size_t total_size = 0;

  if (_internal_has_level()) {
    // required uint32 level = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  if (_internal_has_count()) {
    // required uint32 count = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return total_size;
}
size_t RTreeNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RTreeNodeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 level = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());

    // required uint32 count = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.RTreeInternalNodeContentsArchive internal_node_contents = 3;
  total_size += 1UL * this->_internal_internal_node_contents_size();
  for (const auto& msg : this->_impl_.internal_node_contents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.RTreeLeafNodeContentsArchive leaf_node_contents = 4;
  total_size += 1UL * this->_internal_leaf_node_contents_size();
  for (const auto& msg : this->_impl_.leaf_node_contents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RTreeNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RTreeNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RTreeNodeArchive::GetClassData() const { return &_class_data_; }


void RTreeNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RTreeNodeArchive*>(&to_msg);
  auto& from = static_cast<const RTreeNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RTreeNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.internal_node_contents_.MergeFrom(from._impl_.internal_node_contents_);
  _this->_impl_.leaf_node_contents_.MergeFrom(from._impl_.leaf_node_contents_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.count_ = from._impl_.count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RTreeNodeArchive::CopyFrom(const RTreeNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RTreeNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTreeNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.internal_node_contents_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.leaf_node_contents_))
    return false;
  return true;
}

void RTreeNodeArchive::InternalSwap(RTreeNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.internal_node_contents_.InternalSwap(&other->_impl_.internal_node_contents_);
  _impl_.leaf_node_contents_.InternalSwap(&other->_impl_.leaf_node_contents_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RTreeNodeArchive, _impl_.count_)
      + sizeof(RTreeNodeArchive::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(RTreeNodeArchive, _impl_.level_)>(
          reinterpret_cast<char*>(&_impl_.level_),
          reinterpret_cast<char*>(&other->_impl_.level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RTreeNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[14]);
}

// ===================================================================

class RTreeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RTreeArchive>()._impl_._has_bits_);
  static void set_has_data_file_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data_num_dims(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_data_elem_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_data_elem_real_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_data_max_nodes(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_data_min_nodes(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSCE::RTreeNodeArchive& root(const RTreeArchive* msg);
  static void set_has_root(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ff) ^ 0x000000ff) != 0;
  }
};

const ::TSCE::RTreeNodeArchive&
RTreeArchive::_Internal::root(const RTreeArchive* msg) {
  return *msg->_impl_.root_;
}
RTreeArchive::RTreeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RTreeArchive)
}
RTreeArchive::RTreeArchive(const RTreeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RTreeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.root_){nullptr}
    , decltype(_impl_.data_file_id_){}
    , decltype(_impl_.data_size_){}
    , decltype(_impl_.data_num_dims_){}
    , decltype(_impl_.data_elem_size_){}
    , decltype(_impl_.data_elem_real_size_){}
    , decltype(_impl_.data_max_nodes_){}
    , decltype(_impl_.data_min_nodes_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_root()) {
    _this->_impl_.root_ = new ::TSCE::RTreeNodeArchive(*from._impl_.root_);
  }
  ::memcpy(&_impl_.data_file_id_, &from._impl_.data_file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.data_min_nodes_) -
    reinterpret_cast<char*>(&_impl_.data_file_id_)) + sizeof(_impl_.data_min_nodes_));
  // @@protoc_insertion_point(copy_constructor:TSCE.RTreeArchive)
}

inline void RTreeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.root_){nullptr}
    , decltype(_impl_.data_file_id_){0u}
    , decltype(_impl_.data_size_){0u}
    , decltype(_impl_.data_num_dims_){0u}
    , decltype(_impl_.data_elem_size_){0u}
    , decltype(_impl_.data_elem_real_size_){0u}
    , decltype(_impl_.data_max_nodes_){0u}
    , decltype(_impl_.data_min_nodes_){0u}
  };
}

RTreeArchive::~RTreeArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RTreeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RTreeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.root_;
}

void RTreeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RTreeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RTreeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.root_ != nullptr);
    _impl_.root_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.data_file_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.data_min_nodes_) -
        reinterpret_cast<char*>(&_impl_.data_file_id_)) + sizeof(_impl_.data_min_nodes_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RTreeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 data_file_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_data_file_id(&has_bits);
          _impl_.data_file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 data_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_data_size(&has_bits);
          _impl_.data_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 data_num_dims = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_data_num_dims(&has_bits);
          _impl_.data_num_dims_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 data_elem_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_data_elem_size(&has_bits);
          _impl_.data_elem_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 data_elem_real_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_data_elem_real_size(&has_bits);
          _impl_.data_elem_real_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 data_max_nodes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_data_max_nodes(&has_bits);
          _impl_.data_max_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 data_min_nodes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_data_min_nodes(&has_bits);
          _impl_.data_min_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.RTreeNodeArchive root = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_root(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RTreeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RTreeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 data_file_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_data_file_id(), target);
  }

  // required uint32 data_size = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_data_size(), target);
  }

  // required uint32 data_num_dims = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_data_num_dims(), target);
  }

  // required uint32 data_elem_size = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_data_elem_size(), target);
  }

  // required uint32 data_elem_real_size = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_data_elem_real_size(), target);
  }

  // required uint32 data_max_nodes = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_data_max_nodes(), target);
  }

  // required uint32 data_min_nodes = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_data_min_nodes(), target);
  }

  // required .TSCE.RTreeNodeArchive root = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::root(this),
        _Internal::root(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RTreeArchive)
  return target;
}

size_t RTreeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.RTreeArchive)
  size_t total_size = 0;

  if (_internal_has_root()) {
    // required .TSCE.RTreeNodeArchive root = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.root_);
  }

  if (_internal_has_data_file_id()) {
    // required uint32 data_file_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_file_id());
  }

  if (_internal_has_data_size()) {
    // required uint32 data_size = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_size());
  }

  if (_internal_has_data_num_dims()) {
    // required uint32 data_num_dims = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_num_dims());
  }

  if (_internal_has_data_elem_size()) {
    // required uint32 data_elem_size = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_elem_size());
  }

  if (_internal_has_data_elem_real_size()) {
    // required uint32 data_elem_real_size = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_elem_real_size());
  }

  if (_internal_has_data_max_nodes()) {
    // required uint32 data_max_nodes = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_max_nodes());
  }

  if (_internal_has_data_min_nodes()) {
    // required uint32 data_min_nodes = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_min_nodes());
  }

  return total_size;
}
size_t RTreeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RTreeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required .TSCE.RTreeNodeArchive root = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.root_);

    // required uint32 data_file_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_file_id());

    // required uint32 data_size = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_size());

    // required uint32 data_num_dims = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_num_dims());

    // required uint32 data_elem_size = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_elem_size());

    // required uint32 data_elem_real_size = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_elem_real_size());

    // required uint32 data_max_nodes = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_max_nodes());

    // required uint32 data_min_nodes = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_min_nodes());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RTreeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RTreeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RTreeArchive::GetClassData() const { return &_class_data_; }


void RTreeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RTreeArchive*>(&to_msg);
  auto& from = static_cast<const RTreeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RTreeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_root()->::TSCE::RTreeNodeArchive::MergeFrom(
          from._internal_root());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.data_file_id_ = from._impl_.data_file_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.data_size_ = from._impl_.data_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.data_num_dims_ = from._impl_.data_num_dims_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.data_elem_size_ = from._impl_.data_elem_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.data_elem_real_size_ = from._impl_.data_elem_real_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.data_max_nodes_ = from._impl_.data_max_nodes_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.data_min_nodes_ = from._impl_.data_min_nodes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RTreeArchive::CopyFrom(const RTreeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RTreeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTreeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_root()) {
    if (!_impl_.root_->IsInitialized()) return false;
  }
  return true;
}

void RTreeArchive::InternalSwap(RTreeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RTreeArchive, _impl_.data_min_nodes_)
      + sizeof(RTreeArchive::_impl_.data_min_nodes_)
      - PROTOBUF_FIELD_OFFSET(RTreeArchive, _impl_.root_)>(
          reinterpret_cast<char*>(&_impl_.root_),
          reinterpret_cast<char*>(&other->_impl_.root_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RTreeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[15]);
}

// ===================================================================

class RangeDependenciesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RangeDependenciesArchive>()._impl_._has_bits_);
  static const ::TSCE::RTreeArchive& r_tree(const RangeDependenciesArchive* msg);
  static void set_has_r_tree(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSCE::RTreeArchive&
RangeDependenciesArchive::_Internal::r_tree(const RangeDependenciesArchive* msg) {
  return *msg->_impl_.r_tree_;
}
RangeDependenciesArchive::RangeDependenciesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RangeDependenciesArchive)
}
RangeDependenciesArchive::RangeDependenciesArchive(const RangeDependenciesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RangeDependenciesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.back_dependency_){from._impl_.back_dependency_}
    , decltype(_impl_.r_tree_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_r_tree()) {
    _this->_impl_.r_tree_ = new ::TSCE::RTreeArchive(*from._impl_.r_tree_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.RangeDependenciesArchive)
}

inline void RangeDependenciesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.back_dependency_){arena}
    , decltype(_impl_.r_tree_){nullptr}
  };
}

RangeDependenciesArchive::~RangeDependenciesArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RangeDependenciesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RangeDependenciesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.back_dependency_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.r_tree_;
}

void RangeDependenciesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RangeDependenciesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RangeDependenciesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.back_dependency_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.r_tree_ != nullptr);
    _impl_.r_tree_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeDependenciesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCE.RTreeArchive r_tree = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_r_tree(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.RangeBackDependencyArchive back_dependency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_back_dependency(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RangeDependenciesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RangeDependenciesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCE.RTreeArchive r_tree = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::r_tree(this),
        _Internal::r_tree(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCE.RangeBackDependencyArchive back_dependency = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_back_dependency_size()); i < n; i++) {
    const auto& repfield = this->_internal_back_dependency(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RangeDependenciesArchive)
  return target;
}

size_t RangeDependenciesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RangeDependenciesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.RangeBackDependencyArchive back_dependency = 2;
  total_size += 1UL * this->_internal_back_dependency_size();
  for (const auto& msg : this->_impl_.back_dependency_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSCE.RTreeArchive r_tree = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.r_tree_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RangeDependenciesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RangeDependenciesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RangeDependenciesArchive::GetClassData() const { return &_class_data_; }


void RangeDependenciesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RangeDependenciesArchive*>(&to_msg);
  auto& from = static_cast<const RangeDependenciesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RangeDependenciesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.back_dependency_.MergeFrom(from._impl_.back_dependency_);
  if (from._internal_has_r_tree()) {
    _this->_internal_mutable_r_tree()->::TSCE::RTreeArchive::MergeFrom(
        from._internal_r_tree());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RangeDependenciesArchive::CopyFrom(const RangeDependenciesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RangeDependenciesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeDependenciesArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.back_dependency_))
    return false;
  if (_internal_has_r_tree()) {
    if (!_impl_.r_tree_->IsInitialized()) return false;
  }
  return true;
}

void RangeDependenciesArchive::InternalSwap(RangeDependenciesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.back_dependency_.InternalSwap(&other->_impl_.back_dependency_);
  swap(_impl_.r_tree_, other->_impl_.r_tree_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeDependenciesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[16]);
}

// ===================================================================

class SpanningDependenciesArchive_ReferringColumnToLocalCells::_Internal {
 public:
  using HasBits = decltype(std::declval<SpanningDependenciesArchive_ReferringColumnToLocalCells>()._impl_._has_bits_);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_range_context(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SpanningDependenciesArchive_ReferringColumnToLocalCells::SpanningDependenciesArchive_ReferringColumnToLocalCells(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
}
SpanningDependenciesArchive_ReferringColumnToLocalCells::SpanningDependenciesArchive_ReferringColumnToLocalCells(const SpanningDependenciesArchive_ReferringColumnToLocalCells& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpanningDependenciesArchive_ReferringColumnToLocalCells* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_coordinate_){from._impl_.cell_coordinate_}
    , decltype(_impl_.column_){}
    , decltype(_impl_.range_context_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.column_, &from._impl_.column_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.range_context_) -
    reinterpret_cast<char*>(&_impl_.column_)) + sizeof(_impl_.range_context_));
  // @@protoc_insertion_point(copy_constructor:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
}

inline void SpanningDependenciesArchive_ReferringColumnToLocalCells::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_coordinate_){arena}
    , decltype(_impl_.column_){0u}
    , decltype(_impl_.range_context_){0}
  };
}

SpanningDependenciesArchive_ReferringColumnToLocalCells::~SpanningDependenciesArchive_ReferringColumnToLocalCells() {
  // @@protoc_insertion_point(destructor:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpanningDependenciesArchive_ReferringColumnToLocalCells::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cell_coordinate_.~RepeatedPtrField();
}

void SpanningDependenciesArchive_ReferringColumnToLocalCells::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpanningDependenciesArchive_ReferringColumnToLocalCells::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cell_coordinate_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.range_context_) -
        reinterpret_cast<char*>(&_impl_.column_)) + sizeof(_impl_.range_context_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpanningDependenciesArchive_ReferringColumnToLocalCells::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_column(&has_bits);
          _impl_.column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCE::SpanningDependenciesArchive_RangeContext_IsValid(val))) {
            _internal_set_range_context(static_cast<::TSCE::SpanningDependenciesArchive_RangeContext>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.CellCoordinateArchive cell_coordinate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_coordinate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpanningDependenciesArchive_ReferringColumnToLocalCells::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 column = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_column(), target);
  }

  // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_range_context(), target);
  }

  // repeated .TSCE.CellCoordinateArchive cell_coordinate = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cell_coordinate_size()); i < n; i++) {
    const auto& repfield = this->_internal_cell_coordinate(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
  return target;
}

size_t SpanningDependenciesArchive_ReferringColumnToLocalCells::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
  size_t total_size = 0;

  if (_internal_has_column()) {
    // required uint32 column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());
  }

  if (_internal_has_range_context()) {
    // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_range_context());
  }

  return total_size;
}
size_t SpanningDependenciesArchive_ReferringColumnToLocalCells::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());

    // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_range_context());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.CellCoordinateArchive cell_coordinate = 3;
  total_size += 1UL * this->_internal_cell_coordinate_size();
  for (const auto& msg : this->_impl_.cell_coordinate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpanningDependenciesArchive_ReferringColumnToLocalCells::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpanningDependenciesArchive_ReferringColumnToLocalCells::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpanningDependenciesArchive_ReferringColumnToLocalCells::GetClassData() const { return &_class_data_; }


void SpanningDependenciesArchive_ReferringColumnToLocalCells::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpanningDependenciesArchive_ReferringColumnToLocalCells*>(&to_msg);
  auto& from = static_cast<const SpanningDependenciesArchive_ReferringColumnToLocalCells&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cell_coordinate_.MergeFrom(from._impl_.cell_coordinate_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.column_ = from._impl_.column_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.range_context_ = from._impl_.range_context_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpanningDependenciesArchive_ReferringColumnToLocalCells::CopyFrom(const SpanningDependenciesArchive_ReferringColumnToLocalCells& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanningDependenciesArchive_ReferringColumnToLocalCells::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SpanningDependenciesArchive_ReferringColumnToLocalCells::InternalSwap(SpanningDependenciesArchive_ReferringColumnToLocalCells* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.cell_coordinate_.InternalSwap(&other->_impl_.cell_coordinate_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpanningDependenciesArchive_ReferringColumnToLocalCells, _impl_.range_context_)
      + sizeof(SpanningDependenciesArchive_ReferringColumnToLocalCells::_impl_.range_context_)
      - PROTOBUF_FIELD_OFFSET(SpanningDependenciesArchive_ReferringColumnToLocalCells, _impl_.column_)>(
          reinterpret_cast<char*>(&_impl_.column_),
          reinterpret_cast<char*>(&other->_impl_.column_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpanningDependenciesArchive_ReferringColumnToLocalCells::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[17]);
}

// ===================================================================

class SpanningDependenciesArchive_ReferringColumnToRemoteCells::_Internal {
 public:
  using HasBits = decltype(std::declval<SpanningDependenciesArchive_ReferringColumnToRemoteCells>()._impl_._has_bits_);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_range_context(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SpanningDependenciesArchive_ReferringColumnToRemoteCells::SpanningDependenciesArchive_ReferringColumnToRemoteCells(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
}
SpanningDependenciesArchive_ReferringColumnToRemoteCells::SpanningDependenciesArchive_ReferringColumnToRemoteCells(const SpanningDependenciesArchive_ReferringColumnToRemoteCells& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpanningDependenciesArchive_ReferringColumnToRemoteCells* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.internal_cell_reference_){from._impl_.internal_cell_reference_}
    , decltype(_impl_.column_){}
    , decltype(_impl_.range_context_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.column_, &from._impl_.column_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.range_context_) -
    reinterpret_cast<char*>(&_impl_.column_)) + sizeof(_impl_.range_context_));
  // @@protoc_insertion_point(copy_constructor:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
}

inline void SpanningDependenciesArchive_ReferringColumnToRemoteCells::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.internal_cell_reference_){arena}
    , decltype(_impl_.column_){0u}
    , decltype(_impl_.range_context_){0}
  };
}

SpanningDependenciesArchive_ReferringColumnToRemoteCells::~SpanningDependenciesArchive_ReferringColumnToRemoteCells() {
  // @@protoc_insertion_point(destructor:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpanningDependenciesArchive_ReferringColumnToRemoteCells::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.internal_cell_reference_.~RepeatedPtrField();
}

void SpanningDependenciesArchive_ReferringColumnToRemoteCells::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpanningDependenciesArchive_ReferringColumnToRemoteCells::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.internal_cell_reference_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.range_context_) -
        reinterpret_cast<char*>(&_impl_.column_)) + sizeof(_impl_.range_context_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpanningDependenciesArchive_ReferringColumnToRemoteCells::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_column(&has_bits);
          _impl_.column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCE::SpanningDependenciesArchive_RangeContext_IsValid(val))) {
            _internal_set_range_context(static_cast<::TSCE::SpanningDependenciesArchive_RangeContext>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.InternalCellReferenceArchive internal_cell_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_internal_cell_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpanningDependenciesArchive_ReferringColumnToRemoteCells::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 column = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_column(), target);
  }

  // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_range_context(), target);
  }

  // repeated .TSCE.InternalCellReferenceArchive internal_cell_reference = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_internal_cell_reference_size()); i < n; i++) {
    const auto& repfield = this->_internal_internal_cell_reference(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
  return target;
}

size_t SpanningDependenciesArchive_ReferringColumnToRemoteCells::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
  size_t total_size = 0;

  if (_internal_has_column()) {
    // required uint32 column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());
  }

  if (_internal_has_range_context()) {
    // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_range_context());
  }

  return total_size;
}
size_t SpanningDependenciesArchive_ReferringColumnToRemoteCells::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());

    // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_range_context());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.InternalCellReferenceArchive internal_cell_reference = 3;
  total_size += 1UL * this->_internal_internal_cell_reference_size();
  for (const auto& msg : this->_impl_.internal_cell_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpanningDependenciesArchive_ReferringColumnToRemoteCells::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpanningDependenciesArchive_ReferringColumnToRemoteCells::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpanningDependenciesArchive_ReferringColumnToRemoteCells::GetClassData() const { return &_class_data_; }


void SpanningDependenciesArchive_ReferringColumnToRemoteCells::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpanningDependenciesArchive_ReferringColumnToRemoteCells*>(&to_msg);
  auto& from = static_cast<const SpanningDependenciesArchive_ReferringColumnToRemoteCells&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.internal_cell_reference_.MergeFrom(from._impl_.internal_cell_reference_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.column_ = from._impl_.column_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.range_context_ = from._impl_.range_context_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpanningDependenciesArchive_ReferringColumnToRemoteCells::CopyFrom(const SpanningDependenciesArchive_ReferringColumnToRemoteCells& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanningDependenciesArchive_ReferringColumnToRemoteCells::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.internal_cell_reference_))
    return false;
  return true;
}

void SpanningDependenciesArchive_ReferringColumnToRemoteCells::InternalSwap(SpanningDependenciesArchive_ReferringColumnToRemoteCells* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.internal_cell_reference_.InternalSwap(&other->_impl_.internal_cell_reference_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpanningDependenciesArchive_ReferringColumnToRemoteCells, _impl_.range_context_)
      + sizeof(SpanningDependenciesArchive_ReferringColumnToRemoteCells::_impl_.range_context_)
      - PROTOBUF_FIELD_OFFSET(SpanningDependenciesArchive_ReferringColumnToRemoteCells, _impl_.column_)>(
          reinterpret_cast<char*>(&_impl_.column_),
          reinterpret_cast<char*>(&other->_impl_.column_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpanningDependenciesArchive_ReferringColumnToRemoteCells::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[18]);
}

// ===================================================================

class SpanningDependenciesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpanningDependenciesArchive>()._impl_._has_bits_);
  static const ::TSCE::RangeCoordinateArchive& total_range_for_deleted_table(const SpanningDependenciesArchive* msg);
  static void set_has_total_range_for_deleted_table(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::RangeCoordinateArchive& body_range_for_deleted_table(const SpanningDependenciesArchive* msg);
  static void set_has_body_range_for_deleted_table(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSCE::RangeCoordinateArchive&
SpanningDependenciesArchive::_Internal::total_range_for_deleted_table(const SpanningDependenciesArchive* msg) {
  return *msg->_impl_.total_range_for_deleted_table_;
}
const ::TSCE::RangeCoordinateArchive&
SpanningDependenciesArchive::_Internal::body_range_for_deleted_table(const SpanningDependenciesArchive* msg) {
  return *msg->_impl_.body_range_for_deleted_table_;
}
SpanningDependenciesArchive::SpanningDependenciesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.SpanningDependenciesArchive)
}
SpanningDependenciesArchive::SpanningDependenciesArchive(const SpanningDependenciesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpanningDependenciesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_){from._impl_.column_}
    , decltype(_impl_.range_context_){from._impl_.range_context_}
    , decltype(_impl_.cell_){from._impl_.cell_}
    , decltype(_impl_.referring_column_to_local_cells_){from._impl_.referring_column_to_local_cells_}
    , decltype(_impl_.referring_column_to_remote_cells_){from._impl_.referring_column_to_remote_cells_}
    , decltype(_impl_.total_range_for_deleted_table_){nullptr}
    , decltype(_impl_.body_range_for_deleted_table_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_total_range_for_deleted_table()) {
    _this->_impl_.total_range_for_deleted_table_ = new ::TSCE::RangeCoordinateArchive(*from._impl_.total_range_for_deleted_table_);
  }
  if (from._internal_has_body_range_for_deleted_table()) {
    _this->_impl_.body_range_for_deleted_table_ = new ::TSCE::RangeCoordinateArchive(*from._impl_.body_range_for_deleted_table_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.SpanningDependenciesArchive)
}

inline void SpanningDependenciesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_){arena}
    , decltype(_impl_.range_context_){arena}
    , decltype(_impl_.cell_){arena}
    , decltype(_impl_.referring_column_to_local_cells_){arena}
    , decltype(_impl_.referring_column_to_remote_cells_){arena}
    , decltype(_impl_.total_range_for_deleted_table_){nullptr}
    , decltype(_impl_.body_range_for_deleted_table_){nullptr}
  };
}

SpanningDependenciesArchive::~SpanningDependenciesArchive() {
  // @@protoc_insertion_point(destructor:TSCE.SpanningDependenciesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpanningDependenciesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_.~RepeatedField();
  _impl_.range_context_.~RepeatedField();
  _impl_.cell_.~RepeatedPtrField();
  _impl_.referring_column_to_local_cells_.~RepeatedPtrField();
  _impl_.referring_column_to_remote_cells_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.total_range_for_deleted_table_;
  if (this != internal_default_instance()) delete _impl_.body_range_for_deleted_table_;
}

void SpanningDependenciesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpanningDependenciesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.SpanningDependenciesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_.Clear();
  _impl_.range_context_.Clear();
  _impl_.cell_.Clear();
  _impl_.referring_column_to_local_cells_.Clear();
  _impl_.referring_column_to_remote_cells_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.total_range_for_deleted_table_ != nullptr);
      _impl_.total_range_for_deleted_table_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.body_range_for_deleted_table_ != nullptr);
      _impl_.body_range_for_deleted_table_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpanningDependenciesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_column(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_column(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::TSCE::SpanningDependenciesArchive_RangeContext_IsValid(val))) {
              _internal_add_range_context(static_cast<::TSCE::SpanningDependenciesArchive_RangeContext>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_range_context(), ptr, ctx, ::TSCE::SpanningDependenciesArchive_RangeContext_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.CellReferenceArchive cell = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RangeCoordinateArchive total_range_for_deleted_table = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_range_for_deleted_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RangeCoordinateArchive body_range_for_deleted_table = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_body_range_for_deleted_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells referring_column_to_local_cells = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_referring_column_to_local_cells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells referring_column_to_remote_cells = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_referring_column_to_remote_cells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpanningDependenciesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.SpanningDependenciesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 column = 1;
  for (int i = 0, n = this->_internal_column_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_column(i), target);
  }

  // repeated .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
  for (int i = 0, n = this->_internal_range_context_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_range_context(i), target);
  }

  // repeated .TSCE.CellReferenceArchive cell = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cell_size()); i < n; i++) {
    const auto& repfield = this->_internal_cell(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCE.RangeCoordinateArchive total_range_for_deleted_table = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::total_range_for_deleted_table(this),
        _Internal::total_range_for_deleted_table(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.RangeCoordinateArchive body_range_for_deleted_table = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::body_range_for_deleted_table(this),
        _Internal::body_range_for_deleted_table(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells referring_column_to_local_cells = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_referring_column_to_local_cells_size()); i < n; i++) {
    const auto& repfield = this->_internal_referring_column_to_local_cells(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells referring_column_to_remote_cells = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_referring_column_to_remote_cells_size()); i < n; i++) {
    const auto& repfield = this->_internal_referring_column_to_remote_cells(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.SpanningDependenciesArchive)
  return target;
}

size_t SpanningDependenciesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.SpanningDependenciesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 column = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.column_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_column_size());
    total_size += data_size;
  }

  // repeated .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_range_context_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_range_context(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .TSCE.CellReferenceArchive cell = 3;
  total_size += 1UL * this->_internal_cell_size();
  for (const auto& msg : this->_impl_.cell_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells referring_column_to_local_cells = 6;
  total_size += 1UL * this->_internal_referring_column_to_local_cells_size();
  for (const auto& msg : this->_impl_.referring_column_to_local_cells_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells referring_column_to_remote_cells = 7;
  total_size += 1UL * this->_internal_referring_column_to_remote_cells_size();
  for (const auto& msg : this->_impl_.referring_column_to_remote_cells_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSCE.RangeCoordinateArchive total_range_for_deleted_table = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.total_range_for_deleted_table_);
    }

    // optional .TSCE.RangeCoordinateArchive body_range_for_deleted_table = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.body_range_for_deleted_table_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpanningDependenciesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpanningDependenciesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpanningDependenciesArchive::GetClassData() const { return &_class_data_; }


void SpanningDependenciesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpanningDependenciesArchive*>(&to_msg);
  auto& from = static_cast<const SpanningDependenciesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.SpanningDependenciesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.column_.MergeFrom(from._impl_.column_);
  _this->_impl_.range_context_.MergeFrom(from._impl_.range_context_);
  _this->_impl_.cell_.MergeFrom(from._impl_.cell_);
  _this->_impl_.referring_column_to_local_cells_.MergeFrom(from._impl_.referring_column_to_local_cells_);
  _this->_impl_.referring_column_to_remote_cells_.MergeFrom(from._impl_.referring_column_to_remote_cells_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_total_range_for_deleted_table()->::TSCE::RangeCoordinateArchive::MergeFrom(
          from._internal_total_range_for_deleted_table());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_body_range_for_deleted_table()->::TSCE::RangeCoordinateArchive::MergeFrom(
          from._internal_body_range_for_deleted_table());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpanningDependenciesArchive::CopyFrom(const SpanningDependenciesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.SpanningDependenciesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanningDependenciesArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.cell_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.referring_column_to_local_cells_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.referring_column_to_remote_cells_))
    return false;
  if (_internal_has_total_range_for_deleted_table()) {
    if (!_impl_.total_range_for_deleted_table_->IsInitialized()) return false;
  }
  if (_internal_has_body_range_for_deleted_table()) {
    if (!_impl_.body_range_for_deleted_table_->IsInitialized()) return false;
  }
  return true;
}

void SpanningDependenciesArchive::InternalSwap(SpanningDependenciesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.column_.InternalSwap(&other->_impl_.column_);
  _impl_.range_context_.InternalSwap(&other->_impl_.range_context_);
  _impl_.cell_.InternalSwap(&other->_impl_.cell_);
  _impl_.referring_column_to_local_cells_.InternalSwap(&other->_impl_.referring_column_to_local_cells_);
  _impl_.referring_column_to_remote_cells_.InternalSwap(&other->_impl_.referring_column_to_remote_cells_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpanningDependenciesArchive, _impl_.body_range_for_deleted_table_)
      + sizeof(SpanningDependenciesArchive::_impl_.body_range_for_deleted_table_)
      - PROTOBUF_FIELD_OFFSET(SpanningDependenciesArchive, _impl_.total_range_for_deleted_table_)>(
          reinterpret_cast<char*>(&_impl_.total_range_for_deleted_table_),
          reinterpret_cast<char*>(&other->_impl_.total_range_for_deleted_table_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpanningDependenciesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[19]);
}

// ===================================================================

class WholeOwnerDependenciesArchive::_Internal {
 public:
};

WholeOwnerDependenciesArchive::WholeOwnerDependenciesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.WholeOwnerDependenciesArchive)
}
WholeOwnerDependenciesArchive::WholeOwnerDependenciesArchive(const WholeOwnerDependenciesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WholeOwnerDependenciesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dependent_cell_){from._impl_.dependent_cell_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.WholeOwnerDependenciesArchive)
}

inline void WholeOwnerDependenciesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dependent_cell_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WholeOwnerDependenciesArchive::~WholeOwnerDependenciesArchive() {
  // @@protoc_insertion_point(destructor:TSCE.WholeOwnerDependenciesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WholeOwnerDependenciesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dependent_cell_.~RepeatedPtrField();
}

void WholeOwnerDependenciesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WholeOwnerDependenciesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.WholeOwnerDependenciesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dependent_cell_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WholeOwnerDependenciesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.InternalCellReferenceArchive dependent_cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dependent_cell(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WholeOwnerDependenciesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.WholeOwnerDependenciesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.InternalCellReferenceArchive dependent_cell = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dependent_cell_size()); i < n; i++) {
    const auto& repfield = this->_internal_dependent_cell(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.WholeOwnerDependenciesArchive)
  return target;
}

size_t WholeOwnerDependenciesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.WholeOwnerDependenciesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.InternalCellReferenceArchive dependent_cell = 1;
  total_size += 1UL * this->_internal_dependent_cell_size();
  for (const auto& msg : this->_impl_.dependent_cell_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WholeOwnerDependenciesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WholeOwnerDependenciesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WholeOwnerDependenciesArchive::GetClassData() const { return &_class_data_; }


void WholeOwnerDependenciesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WholeOwnerDependenciesArchive*>(&to_msg);
  auto& from = static_cast<const WholeOwnerDependenciesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.WholeOwnerDependenciesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dependent_cell_.MergeFrom(from._impl_.dependent_cell_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WholeOwnerDependenciesArchive::CopyFrom(const WholeOwnerDependenciesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.WholeOwnerDependenciesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WholeOwnerDependenciesArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.dependent_cell_))
    return false;
  return true;
}

void WholeOwnerDependenciesArchive::InternalSwap(WholeOwnerDependenciesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dependent_cell_.InternalSwap(&other->_impl_.dependent_cell_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WholeOwnerDependenciesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[20]);
}

// ===================================================================

class FormulaOwnerInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaOwnerInfoArchive>()._impl_._has_bits_);
  static const ::TSCE::CFUUIDArchive& formula_owner_id(const FormulaOwnerInfoArchive* msg);
  static void set_has_formula_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::CellDependenciesArchive& cell_dependencies(const FormulaOwnerInfoArchive* msg);
  static void set_has_cell_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::RangeDependenciesArchive& range_dependencies(const FormulaOwnerInfoArchive* msg);
  static void set_has_range_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::VolatileDependenciesArchive& volatile_dependencies(const FormulaOwnerInfoArchive* msg);
  static void set_has_volatile_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::SpanningDependenciesArchive& spanning_column_dependencies(const FormulaOwnerInfoArchive* msg);
  static void set_has_spanning_column_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCE::SpanningDependenciesArchive& spanning_row_dependencies(const FormulaOwnerInfoArchive* msg);
  static void set_has_spanning_row_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCE::WholeOwnerDependenciesArchive& whole_owner_dependencies(const FormulaOwnerInfoArchive* msg);
  static void set_has_whole_owner_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Reference& formula_owner(const FormulaOwnerInfoArchive* msg);
  static void set_has_formula_owner(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCE::CFUUIDArchive&
FormulaOwnerInfoArchive::_Internal::formula_owner_id(const FormulaOwnerInfoArchive* msg) {
  return *msg->_impl_.formula_owner_id_;
}
const ::TSCE::CellDependenciesArchive&
FormulaOwnerInfoArchive::_Internal::cell_dependencies(const FormulaOwnerInfoArchive* msg) {
  return *msg->_impl_.cell_dependencies_;
}
const ::TSCE::RangeDependenciesArchive&
FormulaOwnerInfoArchive::_Internal::range_dependencies(const FormulaOwnerInfoArchive* msg) {
  return *msg->_impl_.range_dependencies_;
}
const ::TSCE::VolatileDependenciesArchive&
FormulaOwnerInfoArchive::_Internal::volatile_dependencies(const FormulaOwnerInfoArchive* msg) {
  return *msg->_impl_.volatile_dependencies_;
}
const ::TSCE::SpanningDependenciesArchive&
FormulaOwnerInfoArchive::_Internal::spanning_column_dependencies(const FormulaOwnerInfoArchive* msg) {
  return *msg->_impl_.spanning_column_dependencies_;
}
const ::TSCE::SpanningDependenciesArchive&
FormulaOwnerInfoArchive::_Internal::spanning_row_dependencies(const FormulaOwnerInfoArchive* msg) {
  return *msg->_impl_.spanning_row_dependencies_;
}
const ::TSCE::WholeOwnerDependenciesArchive&
FormulaOwnerInfoArchive::_Internal::whole_owner_dependencies(const FormulaOwnerInfoArchive* msg) {
  return *msg->_impl_.whole_owner_dependencies_;
}
const ::TSP::Reference&
FormulaOwnerInfoArchive::_Internal::formula_owner(const FormulaOwnerInfoArchive* msg) {
  return *msg->_impl_.formula_owner_;
}
void FormulaOwnerInfoArchive::clear_formula_owner() {
  if (_impl_.formula_owner_ != nullptr) _impl_.formula_owner_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
FormulaOwnerInfoArchive::FormulaOwnerInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.FormulaOwnerInfoArchive)
}
FormulaOwnerInfoArchive::FormulaOwnerInfoArchive(const FormulaOwnerInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormulaOwnerInfoArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.formula_owner_id_){nullptr}
    , decltype(_impl_.cell_dependencies_){nullptr}
    , decltype(_impl_.range_dependencies_){nullptr}
    , decltype(_impl_.volatile_dependencies_){nullptr}
    , decltype(_impl_.spanning_column_dependencies_){nullptr}
    , decltype(_impl_.spanning_row_dependencies_){nullptr}
    , decltype(_impl_.formula_owner_){nullptr}
    , decltype(_impl_.whole_owner_dependencies_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_formula_owner_id()) {
    _this->_impl_.formula_owner_id_ = new ::TSCE::CFUUIDArchive(*from._impl_.formula_owner_id_);
  }
  if (from._internal_has_cell_dependencies()) {
    _this->_impl_.cell_dependencies_ = new ::TSCE::CellDependenciesArchive(*from._impl_.cell_dependencies_);
  }
  if (from._internal_has_range_dependencies()) {
    _this->_impl_.range_dependencies_ = new ::TSCE::RangeDependenciesArchive(*from._impl_.range_dependencies_);
  }
  if (from._internal_has_volatile_dependencies()) {
    _this->_impl_.volatile_dependencies_ = new ::TSCE::VolatileDependenciesArchive(*from._impl_.volatile_dependencies_);
  }
  if (from._internal_has_spanning_column_dependencies()) {
    _this->_impl_.spanning_column_dependencies_ = new ::TSCE::SpanningDependenciesArchive(*from._impl_.spanning_column_dependencies_);
  }
  if (from._internal_has_spanning_row_dependencies()) {
    _this->_impl_.spanning_row_dependencies_ = new ::TSCE::SpanningDependenciesArchive(*from._impl_.spanning_row_dependencies_);
  }
  if (from._internal_has_formula_owner()) {
    _this->_impl_.formula_owner_ = new ::TSP::Reference(*from._impl_.formula_owner_);
  }
  if (from._internal_has_whole_owner_dependencies()) {
    _this->_impl_.whole_owner_dependencies_ = new ::TSCE::WholeOwnerDependenciesArchive(*from._impl_.whole_owner_dependencies_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.FormulaOwnerInfoArchive)
}

inline void FormulaOwnerInfoArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.formula_owner_id_){nullptr}
    , decltype(_impl_.cell_dependencies_){nullptr}
    , decltype(_impl_.range_dependencies_){nullptr}
    , decltype(_impl_.volatile_dependencies_){nullptr}
    , decltype(_impl_.spanning_column_dependencies_){nullptr}
    , decltype(_impl_.spanning_row_dependencies_){nullptr}
    , decltype(_impl_.formula_owner_){nullptr}
    , decltype(_impl_.whole_owner_dependencies_){nullptr}
  };
}

FormulaOwnerInfoArchive::~FormulaOwnerInfoArchive() {
  // @@protoc_insertion_point(destructor:TSCE.FormulaOwnerInfoArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormulaOwnerInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.formula_owner_id_;
  if (this != internal_default_instance()) delete _impl_.cell_dependencies_;
  if (this != internal_default_instance()) delete _impl_.range_dependencies_;
  if (this != internal_default_instance()) delete _impl_.volatile_dependencies_;
  if (this != internal_default_instance()) delete _impl_.spanning_column_dependencies_;
  if (this != internal_default_instance()) delete _impl_.spanning_row_dependencies_;
  if (this != internal_default_instance()) delete _impl_.formula_owner_;
  if (this != internal_default_instance()) delete _impl_.whole_owner_dependencies_;
}

void FormulaOwnerInfoArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormulaOwnerInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.FormulaOwnerInfoArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.formula_owner_id_ != nullptr);
      _impl_.formula_owner_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cell_dependencies_ != nullptr);
      _impl_.cell_dependencies_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.range_dependencies_ != nullptr);
      _impl_.range_dependencies_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.volatile_dependencies_ != nullptr);
      _impl_.volatile_dependencies_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.spanning_column_dependencies_ != nullptr);
      _impl_.spanning_column_dependencies_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.spanning_row_dependencies_ != nullptr);
      _impl_.spanning_row_dependencies_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.formula_owner_ != nullptr);
      _impl_.formula_owner_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.whole_owner_dependencies_ != nullptr);
      _impl_.whole_owner_dependencies_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaOwnerInfoArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CFUUIDArchive formula_owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_owner_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellDependenciesArchive cell_dependencies = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_dependencies(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RangeDependenciesArchive range_dependencies = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_range_dependencies(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.VolatileDependenciesArchive volatile_dependencies = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_volatile_dependencies(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.SpanningDependenciesArchive spanning_column_dependencies = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_spanning_column_dependencies(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.SpanningDependenciesArchive spanning_row_dependencies = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_spanning_row_dependencies(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference formula_owner = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_owner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.WholeOwnerDependenciesArchive whole_owner_dependencies = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_whole_owner_dependencies(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormulaOwnerInfoArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.FormulaOwnerInfoArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.CFUUIDArchive formula_owner_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::formula_owner_id(this),
        _Internal::formula_owner_id(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CellDependenciesArchive cell_dependencies = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cell_dependencies(this),
        _Internal::cell_dependencies(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.RangeDependenciesArchive range_dependencies = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::range_dependencies(this),
        _Internal::range_dependencies(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.VolatileDependenciesArchive volatile_dependencies = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::volatile_dependencies(this),
        _Internal::volatile_dependencies(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.SpanningDependenciesArchive spanning_column_dependencies = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::spanning_column_dependencies(this),
        _Internal::spanning_column_dependencies(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.SpanningDependenciesArchive spanning_row_dependencies = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::spanning_row_dependencies(this),
        _Internal::spanning_row_dependencies(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference formula_owner = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::formula_owner(this),
        _Internal::formula_owner(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.WholeOwnerDependenciesArchive whole_owner_dependencies = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::whole_owner_dependencies(this),
        _Internal::whole_owner_dependencies(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.FormulaOwnerInfoArchive)
  return target;
}

size_t FormulaOwnerInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.FormulaOwnerInfoArchive)
  size_t total_size = 0;

  // required .TSCE.CFUUIDArchive formula_owner_id = 1;
  if (_internal_has_formula_owner_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formula_owner_id_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TSCE.CellDependenciesArchive cell_dependencies = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_dependencies_);
    }

    // optional .TSCE.RangeDependenciesArchive range_dependencies = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.range_dependencies_);
    }

    // optional .TSCE.VolatileDependenciesArchive volatile_dependencies = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.volatile_dependencies_);
    }

    // optional .TSCE.SpanningDependenciesArchive spanning_column_dependencies = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spanning_column_dependencies_);
    }

    // optional .TSCE.SpanningDependenciesArchive spanning_row_dependencies = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spanning_row_dependencies_);
    }

    // optional .TSP.Reference formula_owner = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.formula_owner_);
    }

    // optional .TSCE.WholeOwnerDependenciesArchive whole_owner_dependencies = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.whole_owner_dependencies_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaOwnerInfoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormulaOwnerInfoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaOwnerInfoArchive::GetClassData() const { return &_class_data_; }


void FormulaOwnerInfoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormulaOwnerInfoArchive*>(&to_msg);
  auto& from = static_cast<const FormulaOwnerInfoArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.FormulaOwnerInfoArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_formula_owner_id()->::TSCE::CFUUIDArchive::MergeFrom(
          from._internal_formula_owner_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cell_dependencies()->::TSCE::CellDependenciesArchive::MergeFrom(
          from._internal_cell_dependencies());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_range_dependencies()->::TSCE::RangeDependenciesArchive::MergeFrom(
          from._internal_range_dependencies());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_volatile_dependencies()->::TSCE::VolatileDependenciesArchive::MergeFrom(
          from._internal_volatile_dependencies());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_spanning_column_dependencies()->::TSCE::SpanningDependenciesArchive::MergeFrom(
          from._internal_spanning_column_dependencies());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_spanning_row_dependencies()->::TSCE::SpanningDependenciesArchive::MergeFrom(
          from._internal_spanning_row_dependencies());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_formula_owner()->::TSP::Reference::MergeFrom(
          from._internal_formula_owner());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_whole_owner_dependencies()->::TSCE::WholeOwnerDependenciesArchive::MergeFrom(
          from._internal_whole_owner_dependencies());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaOwnerInfoArchive::CopyFrom(const FormulaOwnerInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.FormulaOwnerInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaOwnerInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_cell_dependencies()) {
    if (!_impl_.cell_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_range_dependencies()) {
    if (!_impl_.range_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_volatile_dependencies()) {
    if (!_impl_.volatile_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_spanning_column_dependencies()) {
    if (!_impl_.spanning_column_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_spanning_row_dependencies()) {
    if (!_impl_.spanning_row_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_formula_owner()) {
    if (!_impl_.formula_owner_->IsInitialized()) return false;
  }
  if (_internal_has_whole_owner_dependencies()) {
    if (!_impl_.whole_owner_dependencies_->IsInitialized()) return false;
  }
  return true;
}

void FormulaOwnerInfoArchive::InternalSwap(FormulaOwnerInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaOwnerInfoArchive, _impl_.whole_owner_dependencies_)
      + sizeof(FormulaOwnerInfoArchive::_impl_.whole_owner_dependencies_)
      - PROTOBUF_FIELD_OFFSET(FormulaOwnerInfoArchive, _impl_.formula_owner_id_)>(
          reinterpret_cast<char*>(&_impl_.formula_owner_id_),
          reinterpret_cast<char*>(&other->_impl_.formula_owner_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaOwnerInfoArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[21]);
}

// ===================================================================

class OwnerIDMapArchive_OwnerIDMapArchiveEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<OwnerIDMapArchive_OwnerIDMapArchiveEntry>()._impl_._has_bits_);
  static void set_has_internal_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::CFUUIDArchive& owner_id(const OwnerIDMapArchive_OwnerIDMapArchiveEntry* msg);
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::CFUUIDArchive&
OwnerIDMapArchive_OwnerIDMapArchiveEntry::_Internal::owner_id(const OwnerIDMapArchive_OwnerIDMapArchiveEntry* msg) {
  return *msg->_impl_.owner_id_;
}
OwnerIDMapArchive_OwnerIDMapArchiveEntry::OwnerIDMapArchive_OwnerIDMapArchiveEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
}
OwnerIDMapArchive_OwnerIDMapArchiveEntry::OwnerIDMapArchive_OwnerIDMapArchiveEntry(const OwnerIDMapArchive_OwnerIDMapArchiveEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OwnerIDMapArchive_OwnerIDMapArchiveEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.owner_id_){nullptr}
    , decltype(_impl_.internal_owner_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_id()) {
    _this->_impl_.owner_id_ = new ::TSCE::CFUUIDArchive(*from._impl_.owner_id_);
  }
  _this->_impl_.internal_owner_id_ = from._impl_.internal_owner_id_;
  // @@protoc_insertion_point(copy_constructor:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
}

inline void OwnerIDMapArchive_OwnerIDMapArchiveEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.owner_id_){nullptr}
    , decltype(_impl_.internal_owner_id_){0u}
  };
}

OwnerIDMapArchive_OwnerIDMapArchiveEntry::~OwnerIDMapArchive_OwnerIDMapArchiveEntry() {
  // @@protoc_insertion_point(destructor:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OwnerIDMapArchive_OwnerIDMapArchiveEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.owner_id_;
}

void OwnerIDMapArchive_OwnerIDMapArchiveEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OwnerIDMapArchive_OwnerIDMapArchiveEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.owner_id_ != nullptr);
    _impl_.owner_id_->Clear();
  }
  _impl_.internal_owner_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OwnerIDMapArchive_OwnerIDMapArchiveEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 internal_owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_internal_owner_id(&has_bits);
          _impl_.internal_owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.CFUUIDArchive owner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OwnerIDMapArchive_OwnerIDMapArchiveEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 internal_owner_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_internal_owner_id(), target);
  }

  // required .TSCE.CFUUIDArchive owner_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::owner_id(this),
        _Internal::owner_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
  return target;
}

size_t OwnerIDMapArchive_OwnerIDMapArchiveEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
  size_t total_size = 0;

  if (_internal_has_owner_id()) {
    // required .TSCE.CFUUIDArchive owner_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.owner_id_);
  }

  if (_internal_has_internal_owner_id()) {
    // required uint32 internal_owner_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_internal_owner_id());
  }

  return total_size;
}
size_t OwnerIDMapArchive_OwnerIDMapArchiveEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.CFUUIDArchive owner_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.owner_id_);

    // required uint32 internal_owner_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_internal_owner_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OwnerIDMapArchive_OwnerIDMapArchiveEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OwnerIDMapArchive_OwnerIDMapArchiveEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OwnerIDMapArchive_OwnerIDMapArchiveEntry::GetClassData() const { return &_class_data_; }


void OwnerIDMapArchive_OwnerIDMapArchiveEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OwnerIDMapArchive_OwnerIDMapArchiveEntry*>(&to_msg);
  auto& from = static_cast<const OwnerIDMapArchive_OwnerIDMapArchiveEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_owner_id()->::TSCE::CFUUIDArchive::MergeFrom(
          from._internal_owner_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.internal_owner_id_ = from._impl_.internal_owner_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OwnerIDMapArchive_OwnerIDMapArchiveEntry::CopyFrom(const OwnerIDMapArchive_OwnerIDMapArchiveEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnerIDMapArchive_OwnerIDMapArchiveEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void OwnerIDMapArchive_OwnerIDMapArchiveEntry::InternalSwap(OwnerIDMapArchive_OwnerIDMapArchiveEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OwnerIDMapArchive_OwnerIDMapArchiveEntry, _impl_.internal_owner_id_)
      + sizeof(OwnerIDMapArchive_OwnerIDMapArchiveEntry::_impl_.internal_owner_id_)
      - PROTOBUF_FIELD_OFFSET(OwnerIDMapArchive_OwnerIDMapArchiveEntry, _impl_.owner_id_)>(
          reinterpret_cast<char*>(&_impl_.owner_id_),
          reinterpret_cast<char*>(&other->_impl_.owner_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OwnerIDMapArchive_OwnerIDMapArchiveEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[22]);
}

// ===================================================================

class OwnerIDMapArchive::_Internal {
 public:
};

OwnerIDMapArchive::OwnerIDMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.OwnerIDMapArchive)
}
OwnerIDMapArchive::OwnerIDMapArchive(const OwnerIDMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OwnerIDMapArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.map_entry_){from._impl_.map_entry_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.OwnerIDMapArchive)
}

inline void OwnerIDMapArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.map_entry_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OwnerIDMapArchive::~OwnerIDMapArchive() {
  // @@protoc_insertion_point(destructor:TSCE.OwnerIDMapArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OwnerIDMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.map_entry_.~RepeatedPtrField();
}

void OwnerIDMapArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OwnerIDMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.OwnerIDMapArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.map_entry_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OwnerIDMapArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry map_entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_map_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OwnerIDMapArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.OwnerIDMapArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry map_entry = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_map_entry_size()); i < n; i++) {
    const auto& repfield = this->_internal_map_entry(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.OwnerIDMapArchive)
  return target;
}

size_t OwnerIDMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.OwnerIDMapArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry map_entry = 1;
  total_size += 1UL * this->_internal_map_entry_size();
  for (const auto& msg : this->_impl_.map_entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OwnerIDMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OwnerIDMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OwnerIDMapArchive::GetClassData() const { return &_class_data_; }


void OwnerIDMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OwnerIDMapArchive*>(&to_msg);
  auto& from = static_cast<const OwnerIDMapArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.OwnerIDMapArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.map_entry_.MergeFrom(from._impl_.map_entry_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OwnerIDMapArchive::CopyFrom(const OwnerIDMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.OwnerIDMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnerIDMapArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.map_entry_))
    return false;
  return true;
}

void OwnerIDMapArchive::InternalSwap(OwnerIDMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.map_entry_.InternalSwap(&other->_impl_.map_entry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OwnerIDMapArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[23]);
}

// ===================================================================

class DependencyTrackerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DependencyTrackerArchive>()._impl_._has_bits_);
  static const ::TSCE::OwnerIDMapArchive& owner_id_map(const DependencyTrackerArchive* msg);
  static void set_has_owner_id_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSCE::OwnerIDMapArchive&
DependencyTrackerArchive::_Internal::owner_id_map(const DependencyTrackerArchive* msg) {
  return *msg->_impl_.owner_id_map_;
}
DependencyTrackerArchive::DependencyTrackerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.DependencyTrackerArchive)
}
DependencyTrackerArchive::DependencyTrackerArchive(const DependencyTrackerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DependencyTrackerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.formula_owner_info_){from._impl_.formula_owner_info_}
    , decltype(_impl_.dirty_leaf_){from._impl_.dirty_leaf_}
    , decltype(_impl_.internal_dirty_leaf_){from._impl_.internal_dirty_leaf_}
    , decltype(_impl_.owner_id_map_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_id_map()) {
    _this->_impl_.owner_id_map_ = new ::TSCE::OwnerIDMapArchive(*from._impl_.owner_id_map_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.DependencyTrackerArchive)
}

inline void DependencyTrackerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.formula_owner_info_){arena}
    , decltype(_impl_.dirty_leaf_){arena}
    , decltype(_impl_.internal_dirty_leaf_){arena}
    , decltype(_impl_.owner_id_map_){nullptr}
  };
}

DependencyTrackerArchive::~DependencyTrackerArchive() {
  // @@protoc_insertion_point(destructor:TSCE.DependencyTrackerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DependencyTrackerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.formula_owner_info_.~RepeatedPtrField();
  _impl_.dirty_leaf_.~RepeatedPtrField();
  _impl_.internal_dirty_leaf_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.owner_id_map_;
}

void DependencyTrackerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DependencyTrackerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.DependencyTrackerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.formula_owner_info_.Clear();
  _impl_.dirty_leaf_.Clear();
  _impl_.internal_dirty_leaf_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.owner_id_map_ != nullptr);
    _impl_.owner_id_map_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DependencyTrackerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.FormulaOwnerInfoArchive formula_owner_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_formula_owner_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.CellReferenceArchive dirty_leaf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dirty_leaf(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.OwnerIDMapArchive owner_id_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_id_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.InternalCellReferenceArchive internal_dirty_leaf = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_internal_dirty_leaf(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DependencyTrackerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.DependencyTrackerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.FormulaOwnerInfoArchive formula_owner_info = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_formula_owner_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_formula_owner_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCE.CellReferenceArchive dirty_leaf = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dirty_leaf_size()); i < n; i++) {
    const auto& repfield = this->_internal_dirty_leaf(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCE.OwnerIDMapArchive owner_id_map = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::owner_id_map(this),
        _Internal::owner_id_map(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCE.InternalCellReferenceArchive internal_dirty_leaf = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_internal_dirty_leaf_size()); i < n; i++) {
    const auto& repfield = this->_internal_internal_dirty_leaf(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.DependencyTrackerArchive)
  return target;
}

size_t DependencyTrackerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.DependencyTrackerArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.FormulaOwnerInfoArchive formula_owner_info = 1;
  total_size += 1UL * this->_internal_formula_owner_info_size();
  for (const auto& msg : this->_impl_.formula_owner_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.CellReferenceArchive dirty_leaf = 2;
  total_size += 1UL * this->_internal_dirty_leaf_size();
  for (const auto& msg : this->_impl_.dirty_leaf_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.InternalCellReferenceArchive internal_dirty_leaf = 4;
  total_size += 1UL * this->_internal_internal_dirty_leaf_size();
  for (const auto& msg : this->_impl_.internal_dirty_leaf_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSCE.OwnerIDMapArchive owner_id_map = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.owner_id_map_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DependencyTrackerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DependencyTrackerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DependencyTrackerArchive::GetClassData() const { return &_class_data_; }


void DependencyTrackerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DependencyTrackerArchive*>(&to_msg);
  auto& from = static_cast<const DependencyTrackerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.DependencyTrackerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.formula_owner_info_.MergeFrom(from._impl_.formula_owner_info_);
  _this->_impl_.dirty_leaf_.MergeFrom(from._impl_.dirty_leaf_);
  _this->_impl_.internal_dirty_leaf_.MergeFrom(from._impl_.internal_dirty_leaf_);
  if (from._internal_has_owner_id_map()) {
    _this->_internal_mutable_owner_id_map()->::TSCE::OwnerIDMapArchive::MergeFrom(
        from._internal_owner_id_map());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DependencyTrackerArchive::CopyFrom(const DependencyTrackerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.DependencyTrackerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DependencyTrackerArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.formula_owner_info_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.dirty_leaf_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.internal_dirty_leaf_))
    return false;
  if (_internal_has_owner_id_map()) {
    if (!_impl_.owner_id_map_->IsInitialized()) return false;
  }
  return true;
}

void DependencyTrackerArchive::InternalSwap(DependencyTrackerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.formula_owner_info_.InternalSwap(&other->_impl_.formula_owner_info_);
  _impl_.dirty_leaf_.InternalSwap(&other->_impl_.dirty_leaf_);
  _impl_.internal_dirty_leaf_.InternalSwap(&other->_impl_.internal_dirty_leaf_);
  swap(_impl_.owner_id_map_, other->_impl_.owner_id_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DependencyTrackerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[24]);
}

// ===================================================================

class NameTrackedReferencePair::_Internal {
 public:
  using HasBits = decltype(std::declval<NameTrackedReferencePair>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& tracked_reference(const NameTrackedReferencePair* msg);
  static void set_has_tracked_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tracked_reference_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
NameTrackedReferencePair::_Internal::tracked_reference(const NameTrackedReferencePair* msg) {
  return *msg->_impl_.tracked_reference_;
}
void NameTrackedReferencePair::clear_tracked_reference() {
  if (_impl_.tracked_reference_ != nullptr) _impl_.tracked_reference_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
NameTrackedReferencePair::NameTrackedReferencePair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.NameTrackedReferencePair)
}
NameTrackedReferencePair::NameTrackedReferencePair(const NameTrackedReferencePair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NameTrackedReferencePair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.tracked_reference_){nullptr}
    , decltype(_impl_.tracked_reference_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_tracked_reference()) {
    _this->_impl_.tracked_reference_ = new ::TSP::Reference(*from._impl_.tracked_reference_);
  }
  _this->_impl_.tracked_reference_id_ = from._impl_.tracked_reference_id_;
  // @@protoc_insertion_point(copy_constructor:TSCE.NameTrackedReferencePair)
}

inline void NameTrackedReferencePair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.tracked_reference_){nullptr}
    , decltype(_impl_.tracked_reference_id_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NameTrackedReferencePair::~NameTrackedReferencePair() {
  // @@protoc_insertion_point(destructor:TSCE.NameTrackedReferencePair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NameTrackedReferencePair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tracked_reference_;
}

void NameTrackedReferencePair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NameTrackedReferencePair::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.NameTrackedReferencePair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tracked_reference_ != nullptr);
      _impl_.tracked_reference_->Clear();
    }
  }
  _impl_.tracked_reference_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NameTrackedReferencePair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.NameTrackedReferencePair.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference tracked_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tracked_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tracked_reference_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tracked_reference_id(&has_bits);
          _impl_.tracked_reference_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NameTrackedReferencePair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.NameTrackedReferencePair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.NameTrackedReferencePair.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .TSP.Reference tracked_reference = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tracked_reference(this),
        _Internal::tracked_reference(this).GetCachedSize(), target, stream);
  }

  // optional uint32 tracked_reference_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tracked_reference_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.NameTrackedReferencePair)
  return target;
}

size_t NameTrackedReferencePair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.NameTrackedReferencePair)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference tracked_reference = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tracked_reference_);
    }

    // optional uint32 tracked_reference_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tracked_reference_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NameTrackedReferencePair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NameTrackedReferencePair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NameTrackedReferencePair::GetClassData() const { return &_class_data_; }


void NameTrackedReferencePair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NameTrackedReferencePair*>(&to_msg);
  auto& from = static_cast<const NameTrackedReferencePair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.NameTrackedReferencePair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tracked_reference()->::TSP::Reference::MergeFrom(
          from._internal_tracked_reference());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tracked_reference_id_ = from._impl_.tracked_reference_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NameTrackedReferencePair::CopyFrom(const NameTrackedReferencePair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.NameTrackedReferencePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameTrackedReferencePair::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_tracked_reference()) {
    if (!_impl_.tracked_reference_->IsInitialized()) return false;
  }
  return true;
}

void NameTrackedReferencePair::InternalSwap(NameTrackedReferencePair* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NameTrackedReferencePair, _impl_.tracked_reference_id_)
      + sizeof(NameTrackedReferencePair::_impl_.tracked_reference_id_)
      - PROTOBUF_FIELD_OFFSET(NameTrackedReferencePair, _impl_.tracked_reference_)>(
          reinterpret_cast<char*>(&_impl_.tracked_reference_),
          reinterpret_cast<char*>(&other->_impl_.tracked_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NameTrackedReferencePair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[25]);
}

// ===================================================================

class NamesByTrackedReferenceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<NamesByTrackedReferenceArchive>()._impl_._has_bits_);
  static const ::TSCE::CFUUIDArchive& table_id(const NamesByTrackedReferenceArchive* msg);
  static void set_has_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCE::CFUUIDArchive&
NamesByTrackedReferenceArchive::_Internal::table_id(const NamesByTrackedReferenceArchive* msg) {
  return *msg->_impl_.table_id_;
}
NamesByTrackedReferenceArchive::NamesByTrackedReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.NamesByTrackedReferenceArchive)
}
NamesByTrackedReferenceArchive::NamesByTrackedReferenceArchive(const NamesByTrackedReferenceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NamesByTrackedReferenceArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_tracked_reference_pair_){from._impl_.name_tracked_reference_pair_}
    , decltype(_impl_.table_id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_id()) {
    _this->_impl_.table_id_ = new ::TSCE::CFUUIDArchive(*from._impl_.table_id_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.NamesByTrackedReferenceArchive)
}

inline void NamesByTrackedReferenceArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_tracked_reference_pair_){arena}
    , decltype(_impl_.table_id_){nullptr}
  };
}

NamesByTrackedReferenceArchive::~NamesByTrackedReferenceArchive() {
  // @@protoc_insertion_point(destructor:TSCE.NamesByTrackedReferenceArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NamesByTrackedReferenceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_tracked_reference_pair_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.table_id_;
}

void NamesByTrackedReferenceArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NamesByTrackedReferenceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.NamesByTrackedReferenceArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_tracked_reference_pair_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.table_id_ != nullptr);
    _impl_.table_id_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamesByTrackedReferenceArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CFUUIDArchive table_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.NameTrackedReferencePair name_tracked_reference_pair = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_name_tracked_reference_pair(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NamesByTrackedReferenceArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.NamesByTrackedReferenceArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.CFUUIDArchive table_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::table_id(this),
        _Internal::table_id(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCE.NameTrackedReferencePair name_tracked_reference_pair = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_name_tracked_reference_pair_size()); i < n; i++) {
    const auto& repfield = this->_internal_name_tracked_reference_pair(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.NamesByTrackedReferenceArchive)
  return target;
}

size_t NamesByTrackedReferenceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.NamesByTrackedReferenceArchive)
  size_t total_size = 0;

  // required .TSCE.CFUUIDArchive table_id = 1;
  if (_internal_has_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_id_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.NameTrackedReferencePair name_tracked_reference_pair = 2;
  total_size += 1UL * this->_internal_name_tracked_reference_pair_size();
  for (const auto& msg : this->_impl_.name_tracked_reference_pair_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NamesByTrackedReferenceArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NamesByTrackedReferenceArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NamesByTrackedReferenceArchive::GetClassData() const { return &_class_data_; }


void NamesByTrackedReferenceArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NamesByTrackedReferenceArchive*>(&to_msg);
  auto& from = static_cast<const NamesByTrackedReferenceArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.NamesByTrackedReferenceArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.name_tracked_reference_pair_.MergeFrom(from._impl_.name_tracked_reference_pair_);
  if (from._internal_has_table_id()) {
    _this->_internal_mutable_table_id()->::TSCE::CFUUIDArchive::MergeFrom(
        from._internal_table_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NamesByTrackedReferenceArchive::CopyFrom(const NamesByTrackedReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.NamesByTrackedReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamesByTrackedReferenceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.name_tracked_reference_pair_))
    return false;
  return true;
}

void NamesByTrackedReferenceArchive::InternalSwap(NamesByTrackedReferenceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.name_tracked_reference_pair_.InternalSwap(&other->_impl_.name_tracked_reference_pair_);
  swap(_impl_.table_id_, other->_impl_.table_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NamesByTrackedReferenceArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[26]);
}

// ===================================================================

class NamedReferenceManagerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<NamedReferenceManagerArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& reference_tracker(const NamedReferenceManagerArchive* msg);
  static void set_has_reference_tracker(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
NamedReferenceManagerArchive::_Internal::reference_tracker(const NamedReferenceManagerArchive* msg) {
  return *msg->_impl_.reference_tracker_;
}
void NamedReferenceManagerArchive::clear_reference_tracker() {
  if (_impl_.reference_tracker_ != nullptr) _impl_.reference_tracker_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
NamedReferenceManagerArchive::NamedReferenceManagerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.NamedReferenceManagerArchive)
}
NamedReferenceManagerArchive::NamedReferenceManagerArchive(const NamedReferenceManagerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NamedReferenceManagerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.names_by_tracked_reference_by_table_){from._impl_.names_by_tracked_reference_by_table_}
    , decltype(_impl_.reference_tracker_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reference_tracker()) {
    _this->_impl_.reference_tracker_ = new ::TSP::Reference(*from._impl_.reference_tracker_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.NamedReferenceManagerArchive)
}

inline void NamedReferenceManagerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.names_by_tracked_reference_by_table_){arena}
    , decltype(_impl_.reference_tracker_){nullptr}
  };
}

NamedReferenceManagerArchive::~NamedReferenceManagerArchive() {
  // @@protoc_insertion_point(destructor:TSCE.NamedReferenceManagerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NamedReferenceManagerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.names_by_tracked_reference_by_table_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.reference_tracker_;
}

void NamedReferenceManagerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NamedReferenceManagerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.NamedReferenceManagerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.names_by_tracked_reference_by_table_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.reference_tracker_ != nullptr);
    _impl_.reference_tracker_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamedReferenceManagerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference reference_tracker = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference_tracker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.NamesByTrackedReferenceArchive names_by_tracked_reference_by_table = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_names_by_tracked_reference_by_table(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NamedReferenceManagerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.NamedReferenceManagerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference reference_tracker = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::reference_tracker(this),
        _Internal::reference_tracker(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCE.NamesByTrackedReferenceArchive names_by_tracked_reference_by_table = 2 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_names_by_tracked_reference_by_table_size()); i < n; i++) {
    const auto& repfield = this->_internal_names_by_tracked_reference_by_table(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.NamedReferenceManagerArchive)
  return target;
}

size_t NamedReferenceManagerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.NamedReferenceManagerArchive)
  size_t total_size = 0;

  // required .TSP.Reference reference_tracker = 1;
  if (_internal_has_reference_tracker()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reference_tracker_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.NamesByTrackedReferenceArchive names_by_tracked_reference_by_table = 2 [deprecated = true];
  total_size += 1UL * this->_internal_names_by_tracked_reference_by_table_size();
  for (const auto& msg : this->_impl_.names_by_tracked_reference_by_table_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NamedReferenceManagerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NamedReferenceManagerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NamedReferenceManagerArchive::GetClassData() const { return &_class_data_; }


void NamedReferenceManagerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NamedReferenceManagerArchive*>(&to_msg);
  auto& from = static_cast<const NamedReferenceManagerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.NamedReferenceManagerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.names_by_tracked_reference_by_table_.MergeFrom(from._impl_.names_by_tracked_reference_by_table_);
  if (from._internal_has_reference_tracker()) {
    _this->_internal_mutable_reference_tracker()->::TSP::Reference::MergeFrom(
        from._internal_reference_tracker());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NamedReferenceManagerArchive::CopyFrom(const NamedReferenceManagerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.NamedReferenceManagerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedReferenceManagerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.names_by_tracked_reference_by_table_))
    return false;
  if (_internal_has_reference_tracker()) {
    if (!_impl_.reference_tracker_->IsInitialized()) return false;
  }
  return true;
}

void NamedReferenceManagerArchive::InternalSwap(NamedReferenceManagerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.names_by_tracked_reference_by_table_.InternalSwap(&other->_impl_.names_by_tracked_reference_by_table_);
  swap(_impl_.reference_tracker_, other->_impl_.reference_tracker_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedReferenceManagerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[27]);
}

// ===================================================================

class CalculationEngineArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CalculationEngineArchive>()._impl_._has_bits_);
  static void set_has_base_date_1904(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::DependencyTrackerArchive& dependency_tracker(const CalculationEngineArchive* msg);
  static void set_has_dependency_tracker(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& named_reference_manager(const CalculationEngineArchive* msg);
  static void set_has_named_reference_manager(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_excel_import_date_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_saved_locale_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSCE::DependencyTrackerArchive&
CalculationEngineArchive::_Internal::dependency_tracker(const CalculationEngineArchive* msg) {
  return *msg->_impl_.dependency_tracker_;
}
const ::TSP::Reference&
CalculationEngineArchive::_Internal::named_reference_manager(const CalculationEngineArchive* msg) {
  return *msg->_impl_.named_reference_manager_;
}
void CalculationEngineArchive::clear_named_reference_manager() {
  if (_impl_.named_reference_manager_ != nullptr) _impl_.named_reference_manager_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CalculationEngineArchive::CalculationEngineArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CalculationEngineArchive)
}
CalculationEngineArchive::CalculationEngineArchive(const CalculationEngineArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CalculationEngineArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.saved_locale_identifier_){}
    , decltype(_impl_.dependency_tracker_){nullptr}
    , decltype(_impl_.named_reference_manager_){nullptr}
    , decltype(_impl_.base_date_1904_){}
    , decltype(_impl_.excel_import_date_mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.saved_locale_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.saved_locale_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_saved_locale_identifier()) {
    _this->_impl_.saved_locale_identifier_.Set(from._internal_saved_locale_identifier(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_dependency_tracker()) {
    _this->_impl_.dependency_tracker_ = new ::TSCE::DependencyTrackerArchive(*from._impl_.dependency_tracker_);
  }
  if (from._internal_has_named_reference_manager()) {
    _this->_impl_.named_reference_manager_ = new ::TSP::Reference(*from._impl_.named_reference_manager_);
  }
  ::memcpy(&_impl_.base_date_1904_, &from._impl_.base_date_1904_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.excel_import_date_mode_) -
    reinterpret_cast<char*>(&_impl_.base_date_1904_)) + sizeof(_impl_.excel_import_date_mode_));
  // @@protoc_insertion_point(copy_constructor:TSCE.CalculationEngineArchive)
}

inline void CalculationEngineArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.saved_locale_identifier_){}
    , decltype(_impl_.dependency_tracker_){nullptr}
    , decltype(_impl_.named_reference_manager_){nullptr}
    , decltype(_impl_.base_date_1904_){false}
    , decltype(_impl_.excel_import_date_mode_){1}
  };
  _impl_.saved_locale_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.saved_locale_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CalculationEngineArchive::~CalculationEngineArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CalculationEngineArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CalculationEngineArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.saved_locale_identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.dependency_tracker_;
  if (this != internal_default_instance()) delete _impl_.named_reference_manager_;
}

void CalculationEngineArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CalculationEngineArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CalculationEngineArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.saved_locale_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.dependency_tracker_ != nullptr);
      _impl_.dependency_tracker_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.named_reference_manager_ != nullptr);
      _impl_.named_reference_manager_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    _impl_.base_date_1904_ = false;
    _impl_.excel_import_date_mode_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CalculationEngineArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool base_date_1904 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_base_date_1904(&has_bits);
          _impl_.base_date_1904_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.DependencyTrackerArchive dependency_tracker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dependency_tracker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference named_reference_manager = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_named_reference_manager(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CalculationEngineArchive.ExcelImportDateMode excel_import_date_mode = 4 [default = DATE_MODE_1900];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCE::CalculationEngineArchive_ExcelImportDateMode_IsValid(val))) {
            _internal_set_excel_import_date_mode(static_cast<::TSCE::CalculationEngineArchive_ExcelImportDateMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string saved_locale_identifier = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_saved_locale_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.CalculationEngineArchive.saved_locale_identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CalculationEngineArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CalculationEngineArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool base_date_1904 = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_base_date_1904(), target);
  }

  // required .TSCE.DependencyTrackerArchive dependency_tracker = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::dependency_tracker(this),
        _Internal::dependency_tracker(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference named_reference_manager = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::named_reference_manager(this),
        _Internal::named_reference_manager(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CalculationEngineArchive.ExcelImportDateMode excel_import_date_mode = 4 [default = DATE_MODE_1900];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_excel_import_date_mode(), target);
  }

  // optional string saved_locale_identifier = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_saved_locale_identifier().data(), static_cast<int>(this->_internal_saved_locale_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.CalculationEngineArchive.saved_locale_identifier");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_saved_locale_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CalculationEngineArchive)
  return target;
}

size_t CalculationEngineArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CalculationEngineArchive)
  size_t total_size = 0;

  // required .TSCE.DependencyTrackerArchive dependency_tracker = 2;
  if (_internal_has_dependency_tracker()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dependency_tracker_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string saved_locale_identifier = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_saved_locale_identifier());
  }

  if (cached_has_bits & 0x0000001cu) {
    // optional .TSP.Reference named_reference_manager = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.named_reference_manager_);
    }

    // optional bool base_date_1904 = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .TSCE.CalculationEngineArchive.ExcelImportDateMode excel_import_date_mode = 4 [default = DATE_MODE_1900];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_excel_import_date_mode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CalculationEngineArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CalculationEngineArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CalculationEngineArchive::GetClassData() const { return &_class_data_; }


void CalculationEngineArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CalculationEngineArchive*>(&to_msg);
  auto& from = static_cast<const CalculationEngineArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CalculationEngineArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_saved_locale_identifier(from._internal_saved_locale_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_dependency_tracker()->::TSCE::DependencyTrackerArchive::MergeFrom(
          from._internal_dependency_tracker());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_named_reference_manager()->::TSP::Reference::MergeFrom(
          from._internal_named_reference_manager());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.base_date_1904_ = from._impl_.base_date_1904_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.excel_import_date_mode_ = from._impl_.excel_import_date_mode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CalculationEngineArchive::CopyFrom(const CalculationEngineArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CalculationEngineArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculationEngineArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_dependency_tracker()) {
    if (!_impl_.dependency_tracker_->IsInitialized()) return false;
  }
  if (_internal_has_named_reference_manager()) {
    if (!_impl_.named_reference_manager_->IsInitialized()) return false;
  }
  return true;
}

void CalculationEngineArchive::InternalSwap(CalculationEngineArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.saved_locale_identifier_, lhs_arena,
      &other->_impl_.saved_locale_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CalculationEngineArchive, _impl_.base_date_1904_)
      + sizeof(CalculationEngineArchive::_impl_.base_date_1904_)
      - PROTOBUF_FIELD_OFFSET(CalculationEngineArchive, _impl_.dependency_tracker_)>(
          reinterpret_cast<char*>(&_impl_.dependency_tracker_),
          reinterpret_cast<char*>(&other->_impl_.dependency_tracker_));
  swap(_impl_.excel_import_date_mode_, other->_impl_.excel_import_date_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CalculationEngineArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[28]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive>()._impl_._has_bits_);
  static void set_has_row_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_column_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_row_is_sticky(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_column_is_sticky(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
}
ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive(const ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_handle_){}
    , decltype(_impl_.column_handle_){}
    , decltype(_impl_.row_is_sticky_){}
    , decltype(_impl_.column_is_sticky_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.row_handle_, &from._impl_.row_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.column_is_sticky_) -
    reinterpret_cast<char*>(&_impl_.row_handle_)) + sizeof(_impl_.column_is_sticky_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
}

inline void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_handle_){0u}
    , decltype(_impl_.column_handle_){0u}
    , decltype(_impl_.row_is_sticky_){0u}
    , decltype(_impl_.column_is_sticky_){0u}
  };
}

ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::~ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.row_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.column_is_sticky_) -
        reinterpret_cast<char*>(&_impl_.row_handle_)) + sizeof(_impl_.column_is_sticky_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 row_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_row_handle(&has_bits);
          _impl_.row_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 column_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_column_handle(&has_bits);
          _impl_.column_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 row_is_sticky = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_row_is_sticky(&has_bits);
          _impl_.row_is_sticky_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 column_is_sticky = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_column_is_sticky(&has_bits);
          _impl_.column_is_sticky_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 row_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_row_handle(), target);
  }

  // required uint32 column_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_column_handle(), target);
  }

  // required uint32 row_is_sticky = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_row_is_sticky(), target);
  }

  // required uint32 column_is_sticky = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_column_is_sticky(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
  return target;
}

size_t ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
  size_t total_size = 0;

  if (_internal_has_row_handle()) {
    // required uint32 row_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row_handle());
  }

  if (_internal_has_column_handle()) {
    // required uint32 column_handle = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column_handle());
  }

  if (_internal_has_row_is_sticky()) {
    // required uint32 row_is_sticky = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row_is_sticky());
  }

  if (_internal_has_column_is_sticky()) {
    // required uint32 column_is_sticky = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column_is_sticky());
  }

  return total_size;
}
size_t ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 row_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row_handle());

    // required uint32 column_handle = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column_handle());

    // required uint32 row_is_sticky = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row_is_sticky());

    // required uint32 column_is_sticky = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column_is_sticky());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::GetClassData() const { return &_class_data_; }


void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive*>(&to_msg);
  auto& from = static_cast<const ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.row_handle_ = from._impl_.row_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.column_handle_ = from._impl_.column_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.row_is_sticky_ = from._impl_.row_is_sticky_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.column_is_sticky_ = from._impl_.column_is_sticky_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::CopyFrom(const ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::InternalSwap(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive, _impl_.column_is_sticky_)
      + sizeof(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_impl_.column_is_sticky_)
      - PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive, _impl_.row_handle_)>(
          reinterpret_cast<char*>(&_impl_.row_handle_),
          reinterpret_cast<char*>(&other->_impl_.row_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[29]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive>()._impl_._has_bits_);
  static void set_has_row_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_column_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_row_is_sticky(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_column_is_sticky(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSCE::CFUUIDArchive& table_id(const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* msg);
  static void set_has_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ast_reference_whitespace_after_sheet_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ast_reference_whitespace_before_table_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ast_reference_whitespace_after_table_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ast_reference_whitespace_before_cell_address(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001f0) ^ 0x000001f0) != 0;
  }
};

const ::TSCE::CFUUIDArchive&
ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_Internal::table_id(const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* msg) {
  return *msg->_impl_.table_id_;
}
ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
}
ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive(const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ast_reference_whitespace_after_sheet_name_){}
    , decltype(_impl_.ast_reference_whitespace_before_table_name_){}
    , decltype(_impl_.ast_reference_whitespace_after_table_name_){}
    , decltype(_impl_.ast_reference_whitespace_before_cell_address_){}
    , decltype(_impl_.table_id_){nullptr}
    , decltype(_impl_.row_handle_){}
    , decltype(_impl_.column_handle_){}
    , decltype(_impl_.row_is_sticky_){}
    , decltype(_impl_.column_is_sticky_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ast_reference_whitespace_after_sheet_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_after_sheet_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ast_reference_whitespace_after_sheet_name()) {
    _this->_impl_.ast_reference_whitespace_after_sheet_name_.Set(from._internal_ast_reference_whitespace_after_sheet_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ast_reference_whitespace_before_table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_before_table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ast_reference_whitespace_before_table_name()) {
    _this->_impl_.ast_reference_whitespace_before_table_name_.Set(from._internal_ast_reference_whitespace_before_table_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ast_reference_whitespace_after_table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_after_table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ast_reference_whitespace_after_table_name()) {
    _this->_impl_.ast_reference_whitespace_after_table_name_.Set(from._internal_ast_reference_whitespace_after_table_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ast_reference_whitespace_before_cell_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_before_cell_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ast_reference_whitespace_before_cell_address()) {
    _this->_impl_.ast_reference_whitespace_before_cell_address_.Set(from._internal_ast_reference_whitespace_before_cell_address(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_table_id()) {
    _this->_impl_.table_id_ = new ::TSCE::CFUUIDArchive(*from._impl_.table_id_);
  }
  ::memcpy(&_impl_.row_handle_, &from._impl_.row_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.column_is_sticky_) -
    reinterpret_cast<char*>(&_impl_.row_handle_)) + sizeof(_impl_.column_is_sticky_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
}

inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ast_reference_whitespace_after_sheet_name_){}
    , decltype(_impl_.ast_reference_whitespace_before_table_name_){}
    , decltype(_impl_.ast_reference_whitespace_after_table_name_){}
    , decltype(_impl_.ast_reference_whitespace_before_cell_address_){}
    , decltype(_impl_.table_id_){nullptr}
    , decltype(_impl_.row_handle_){0u}
    , decltype(_impl_.column_handle_){0u}
    , decltype(_impl_.row_is_sticky_){0u}
    , decltype(_impl_.column_is_sticky_){0u}
  };
  _impl_.ast_reference_whitespace_after_sheet_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_after_sheet_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ast_reference_whitespace_before_table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_before_table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ast_reference_whitespace_after_table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_after_table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ast_reference_whitespace_before_cell_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_before_cell_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::~ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ast_reference_whitespace_after_sheet_name_.Destroy();
  _impl_.ast_reference_whitespace_before_table_name_.Destroy();
  _impl_.ast_reference_whitespace_after_table_name_.Destroy();
  _impl_.ast_reference_whitespace_before_cell_address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.table_id_;
}

void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ast_reference_whitespace_after_sheet_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.ast_reference_whitespace_before_table_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.ast_reference_whitespace_after_table_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.ast_reference_whitespace_before_cell_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.table_id_ != nullptr);
      _impl_.table_id_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.row_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.row_is_sticky_) -
        reinterpret_cast<char*>(&_impl_.row_handle_)) + sizeof(_impl_.row_is_sticky_));
  }
  _impl_.column_is_sticky_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 row_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_row_handle(&has_bits);
          _impl_.row_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 column_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_column_handle(&has_bits);
          _impl_.column_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 row_is_sticky = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_row_is_sticky(&has_bits);
          _impl_.row_is_sticky_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 column_is_sticky = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_column_is_sticky(&has_bits);
          _impl_.column_is_sticky_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.CFUUIDArchive table_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string AST_reference_whitespace_after_sheet_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_ast_reference_whitespace_after_sheet_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_sheet_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string AST_reference_whitespace_before_table_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_ast_reference_whitespace_before_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_table_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string AST_reference_whitespace_after_table_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_ast_reference_whitespace_after_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_table_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string AST_reference_whitespace_before_cell_address = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_ast_reference_whitespace_before_cell_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_cell_address");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 row_handle = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_row_handle(), target);
  }

  // required uint32 column_handle = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_column_handle(), target);
  }

  // required uint32 row_is_sticky = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_row_is_sticky(), target);
  }

  // required uint32 column_is_sticky = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_column_is_sticky(), target);
  }

  // required .TSCE.CFUUIDArchive table_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::table_id(this),
        _Internal::table_id(this).GetCachedSize(), target, stream);
  }

  // optional string AST_reference_whitespace_after_sheet_name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_reference_whitespace_after_sheet_name().data(), static_cast<int>(this->_internal_ast_reference_whitespace_after_sheet_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_sheet_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ast_reference_whitespace_after_sheet_name(), target);
  }

  // optional string AST_reference_whitespace_before_table_name = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_reference_whitespace_before_table_name().data(), static_cast<int>(this->_internal_ast_reference_whitespace_before_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_table_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_ast_reference_whitespace_before_table_name(), target);
  }

  // optional string AST_reference_whitespace_after_table_name = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_reference_whitespace_after_table_name().data(), static_cast<int>(this->_internal_ast_reference_whitespace_after_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_table_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_ast_reference_whitespace_after_table_name(), target);
  }

  // optional string AST_reference_whitespace_before_cell_address = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_reference_whitespace_before_cell_address().data(), static_cast<int>(this->_internal_ast_reference_whitespace_before_cell_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_cell_address");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_ast_reference_whitespace_before_cell_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
  return target;
}

size_t ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
  size_t total_size = 0;

  if (_internal_has_table_id()) {
    // required .TSCE.CFUUIDArchive table_id = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_id_);
  }

  if (_internal_has_row_handle()) {
    // required uint32 row_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row_handle());
  }

  if (_internal_has_column_handle()) {
    // required uint32 column_handle = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column_handle());
  }

  if (_internal_has_row_is_sticky()) {
    // required uint32 row_is_sticky = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row_is_sticky());
  }

  if (_internal_has_column_is_sticky()) {
    // required uint32 column_is_sticky = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column_is_sticky());
  }

  return total_size;
}
size_t ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000001f0) ^ 0x000001f0) == 0) {  // All required fields are present.
    // required .TSCE.CFUUIDArchive table_id = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_id_);

    // required uint32 row_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row_handle());

    // required uint32 column_handle = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column_handle());

    // required uint32 row_is_sticky = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row_is_sticky());

    // required uint32 column_is_sticky = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column_is_sticky());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string AST_reference_whitespace_after_sheet_name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_reference_whitespace_after_sheet_name());
    }

    // optional string AST_reference_whitespace_before_table_name = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_reference_whitespace_before_table_name());
    }

    // optional string AST_reference_whitespace_after_table_name = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_reference_whitespace_after_table_name());
    }

    // optional string AST_reference_whitespace_before_cell_address = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_reference_whitespace_before_cell_address());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::GetClassData() const { return &_class_data_; }


void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive*>(&to_msg);
  auto& from = static_cast<const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_ast_reference_whitespace_after_sheet_name(from._internal_ast_reference_whitespace_after_sheet_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_ast_reference_whitespace_before_table_name(from._internal_ast_reference_whitespace_before_table_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_ast_reference_whitespace_after_table_name(from._internal_ast_reference_whitespace_after_table_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_ast_reference_whitespace_before_cell_address(from._internal_ast_reference_whitespace_before_cell_address());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_table_id()->::TSCE::CFUUIDArchive::MergeFrom(
          from._internal_table_id());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.row_handle_ = from._impl_.row_handle_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.column_handle_ = from._impl_.column_handle_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.row_is_sticky_ = from._impl_.row_is_sticky_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_column_is_sticky(from._internal_column_is_sticky());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::CopyFrom(const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::InternalSwap(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ast_reference_whitespace_after_sheet_name_, lhs_arena,
      &other->_impl_.ast_reference_whitespace_after_sheet_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ast_reference_whitespace_before_table_name_, lhs_arena,
      &other->_impl_.ast_reference_whitespace_before_table_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ast_reference_whitespace_after_table_name_, lhs_arena,
      &other->_impl_.ast_reference_whitespace_after_table_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ast_reference_whitespace_before_cell_address_, lhs_arena,
      &other->_impl_.ast_reference_whitespace_before_cell_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, _impl_.column_is_sticky_)
      + sizeof(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_impl_.column_is_sticky_)
      - PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, _impl_.table_id_)>(
          reinterpret_cast<char*>(&_impl_.table_id_),
          reinterpret_cast<char*>(&other->_impl_.table_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[30]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTColumnCoordinateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTColumnCoordinateArchive>()._impl_._has_bits_);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ASTNodeArrayArchive_ASTColumnCoordinateArchive::ASTNodeArrayArchive_ASTColumnCoordinateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
}
ASTNodeArrayArchive_ASTColumnCoordinateArchive::ASTNodeArrayArchive_ASTColumnCoordinateArchive(const ASTNodeArrayArchive_ASTColumnCoordinateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ASTNodeArrayArchive_ASTColumnCoordinateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_){}
    , decltype(_impl_.absolute_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.column_, &from._impl_.column_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.absolute_) -
    reinterpret_cast<char*>(&_impl_.column_)) + sizeof(_impl_.absolute_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
}

inline void ASTNodeArrayArchive_ASTColumnCoordinateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_){0}
    , decltype(_impl_.absolute_){false}
  };
}

ASTNodeArrayArchive_ASTColumnCoordinateArchive::~ASTNodeArrayArchive_ASTColumnCoordinateArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ASTNodeArrayArchive_ASTColumnCoordinateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ASTNodeArrayArchive_ASTColumnCoordinateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTColumnCoordinateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.absolute_) -
        reinterpret_cast<char*>(&_impl_.column_)) + sizeof(_impl_.absolute_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTColumnCoordinateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required sint32 column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_column(&has_bits);
          _impl_.column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool absolute = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_absolute(&has_bits);
          _impl_.absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ASTNodeArrayArchive_ASTColumnCoordinateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required sint32 column = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_column(), target);
  }

  // optional bool absolute = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_absolute(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
  return target;
}

size_t ASTNodeArrayArchive_ASTColumnCoordinateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
  size_t total_size = 0;

  // required sint32 column = 1;
  if (_internal_has_column()) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_column());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool absolute = 2 [default = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ASTNodeArrayArchive_ASTColumnCoordinateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ASTNodeArrayArchive_ASTColumnCoordinateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ASTNodeArrayArchive_ASTColumnCoordinateArchive::GetClassData() const { return &_class_data_; }


void ASTNodeArrayArchive_ASTColumnCoordinateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ASTNodeArrayArchive_ASTColumnCoordinateArchive*>(&to_msg);
  auto& from = static_cast<const ASTNodeArrayArchive_ASTColumnCoordinateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.column_ = from._impl_.column_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.absolute_ = from._impl_.absolute_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ASTNodeArrayArchive_ASTColumnCoordinateArchive::CopyFrom(const ASTNodeArrayArchive_ASTColumnCoordinateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTColumnCoordinateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ASTNodeArrayArchive_ASTColumnCoordinateArchive::InternalSwap(ASTNodeArrayArchive_ASTColumnCoordinateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTColumnCoordinateArchive, _impl_.absolute_)
      + sizeof(ASTNodeArrayArchive_ASTColumnCoordinateArchive::_impl_.absolute_)
      - PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTColumnCoordinateArchive, _impl_.column_)>(
          reinterpret_cast<char*>(&_impl_.column_),
          reinterpret_cast<char*>(&other->_impl_.column_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTColumnCoordinateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[31]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTRowCoordinateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTRowCoordinateArchive>()._impl_._has_bits_);
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ASTNodeArrayArchive_ASTRowCoordinateArchive::ASTNodeArrayArchive_ASTRowCoordinateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
}
ASTNodeArrayArchive_ASTRowCoordinateArchive::ASTNodeArrayArchive_ASTRowCoordinateArchive(const ASTNodeArrayArchive_ASTRowCoordinateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ASTNodeArrayArchive_ASTRowCoordinateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_){}
    , decltype(_impl_.absolute_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.row_, &from._impl_.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.absolute_) -
    reinterpret_cast<char*>(&_impl_.row_)) + sizeof(_impl_.absolute_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
}

inline void ASTNodeArrayArchive_ASTRowCoordinateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_){0}
    , decltype(_impl_.absolute_){false}
  };
}

ASTNodeArrayArchive_ASTRowCoordinateArchive::~ASTNodeArrayArchive_ASTRowCoordinateArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ASTNodeArrayArchive_ASTRowCoordinateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ASTNodeArrayArchive_ASTRowCoordinateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTRowCoordinateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.row_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.absolute_) -
        reinterpret_cast<char*>(&_impl_.row_)) + sizeof(_impl_.absolute_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTRowCoordinateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required sint32 row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_row(&has_bits);
          _impl_.row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool absolute = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_absolute(&has_bits);
          _impl_.absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ASTNodeArrayArchive_ASTRowCoordinateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required sint32 row = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_row(), target);
  }

  // optional bool absolute = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_absolute(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
  return target;
}

size_t ASTNodeArrayArchive_ASTRowCoordinateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
  size_t total_size = 0;

  // required sint32 row = 1;
  if (_internal_has_row()) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_row());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool absolute = 2 [default = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ASTNodeArrayArchive_ASTRowCoordinateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ASTNodeArrayArchive_ASTRowCoordinateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ASTNodeArrayArchive_ASTRowCoordinateArchive::GetClassData() const { return &_class_data_; }


void ASTNodeArrayArchive_ASTRowCoordinateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ASTNodeArrayArchive_ASTRowCoordinateArchive*>(&to_msg);
  auto& from = static_cast<const ASTNodeArrayArchive_ASTRowCoordinateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.row_ = from._impl_.row_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.absolute_ = from._impl_.absolute_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ASTNodeArrayArchive_ASTRowCoordinateArchive::CopyFrom(const ASTNodeArrayArchive_ASTRowCoordinateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTRowCoordinateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ASTNodeArrayArchive_ASTRowCoordinateArchive::InternalSwap(ASTNodeArrayArchive_ASTRowCoordinateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTRowCoordinateArchive, _impl_.absolute_)
      + sizeof(ASTNodeArrayArchive_ASTRowCoordinateArchive::_impl_.absolute_)
      - PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTRowCoordinateArchive, _impl_.row_)>(
          reinterpret_cast<char*>(&_impl_.row_),
          reinterpret_cast<char*>(&other->_impl_.row_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTRowCoordinateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[32]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive>()._impl_._has_bits_);
  static const ::TSCE::CFUUIDArchive& table_id(const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* msg);
  static void set_has_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ast_reference_whitespace_after_sheet_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ast_reference_whitespace_before_table_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ast_reference_whitespace_after_table_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ast_reference_whitespace_before_cell_address(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

const ::TSCE::CFUUIDArchive&
ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_Internal::table_id(const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* msg) {
  return *msg->_impl_.table_id_;
}
ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
}
ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive(const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ast_reference_whitespace_after_sheet_name_){}
    , decltype(_impl_.ast_reference_whitespace_before_table_name_){}
    , decltype(_impl_.ast_reference_whitespace_after_table_name_){}
    , decltype(_impl_.ast_reference_whitespace_before_cell_address_){}
    , decltype(_impl_.table_id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ast_reference_whitespace_after_sheet_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_after_sheet_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ast_reference_whitespace_after_sheet_name()) {
    _this->_impl_.ast_reference_whitespace_after_sheet_name_.Set(from._internal_ast_reference_whitespace_after_sheet_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ast_reference_whitespace_before_table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_before_table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ast_reference_whitespace_before_table_name()) {
    _this->_impl_.ast_reference_whitespace_before_table_name_.Set(from._internal_ast_reference_whitespace_before_table_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ast_reference_whitespace_after_table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_after_table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ast_reference_whitespace_after_table_name()) {
    _this->_impl_.ast_reference_whitespace_after_table_name_.Set(from._internal_ast_reference_whitespace_after_table_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ast_reference_whitespace_before_cell_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_before_cell_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ast_reference_whitespace_before_cell_address()) {
    _this->_impl_.ast_reference_whitespace_before_cell_address_.Set(from._internal_ast_reference_whitespace_before_cell_address(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_table_id()) {
    _this->_impl_.table_id_ = new ::TSCE::CFUUIDArchive(*from._impl_.table_id_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
}

inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ast_reference_whitespace_after_sheet_name_){}
    , decltype(_impl_.ast_reference_whitespace_before_table_name_){}
    , decltype(_impl_.ast_reference_whitespace_after_table_name_){}
    , decltype(_impl_.ast_reference_whitespace_before_cell_address_){}
    , decltype(_impl_.table_id_){nullptr}
  };
  _impl_.ast_reference_whitespace_after_sheet_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_after_sheet_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ast_reference_whitespace_before_table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_before_table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ast_reference_whitespace_after_table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_after_table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ast_reference_whitespace_before_cell_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_before_cell_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::~ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ast_reference_whitespace_after_sheet_name_.Destroy();
  _impl_.ast_reference_whitespace_before_table_name_.Destroy();
  _impl_.ast_reference_whitespace_after_table_name_.Destroy();
  _impl_.ast_reference_whitespace_before_cell_address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.table_id_;
}

void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ast_reference_whitespace_after_sheet_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.ast_reference_whitespace_before_table_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.ast_reference_whitespace_after_table_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.ast_reference_whitespace_before_cell_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.table_id_ != nullptr);
      _impl_.table_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CFUUIDArchive table_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string AST_reference_whitespace_after_sheet_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ast_reference_whitespace_after_sheet_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_sheet_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string AST_reference_whitespace_before_table_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ast_reference_whitespace_before_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_table_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string AST_reference_whitespace_after_table_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ast_reference_whitespace_after_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_table_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string AST_reference_whitespace_before_cell_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_ast_reference_whitespace_before_cell_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_cell_address");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.CFUUIDArchive table_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::table_id(this),
        _Internal::table_id(this).GetCachedSize(), target, stream);
  }

  // optional string AST_reference_whitespace_after_sheet_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_reference_whitespace_after_sheet_name().data(), static_cast<int>(this->_internal_ast_reference_whitespace_after_sheet_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_sheet_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ast_reference_whitespace_after_sheet_name(), target);
  }

  // optional string AST_reference_whitespace_before_table_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_reference_whitespace_before_table_name().data(), static_cast<int>(this->_internal_ast_reference_whitespace_before_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_table_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ast_reference_whitespace_before_table_name(), target);
  }

  // optional string AST_reference_whitespace_after_table_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_reference_whitespace_after_table_name().data(), static_cast<int>(this->_internal_ast_reference_whitespace_after_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_table_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ast_reference_whitespace_after_table_name(), target);
  }

  // optional string AST_reference_whitespace_before_cell_address = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_reference_whitespace_before_cell_address().data(), static_cast<int>(this->_internal_ast_reference_whitespace_before_cell_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_cell_address");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ast_reference_whitespace_before_cell_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
  return target;
}

size_t ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
  size_t total_size = 0;

  // required .TSCE.CFUUIDArchive table_id = 1;
  if (_internal_has_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_id_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string AST_reference_whitespace_after_sheet_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_reference_whitespace_after_sheet_name());
    }

    // optional string AST_reference_whitespace_before_table_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_reference_whitespace_before_table_name());
    }

    // optional string AST_reference_whitespace_after_table_name = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_reference_whitespace_after_table_name());
    }

    // optional string AST_reference_whitespace_before_cell_address = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_reference_whitespace_before_cell_address());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::GetClassData() const { return &_class_data_; }


void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive*>(&to_msg);
  auto& from = static_cast<const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_ast_reference_whitespace_after_sheet_name(from._internal_ast_reference_whitespace_after_sheet_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_ast_reference_whitespace_before_table_name(from._internal_ast_reference_whitespace_before_table_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_ast_reference_whitespace_after_table_name(from._internal_ast_reference_whitespace_after_table_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_ast_reference_whitespace_before_cell_address(from._internal_ast_reference_whitespace_before_cell_address());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_table_id()->::TSCE::CFUUIDArchive::MergeFrom(
          from._internal_table_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::CopyFrom(const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::InternalSwap(ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ast_reference_whitespace_after_sheet_name_, lhs_arena,
      &other->_impl_.ast_reference_whitespace_after_sheet_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ast_reference_whitespace_before_table_name_, lhs_arena,
      &other->_impl_.ast_reference_whitespace_before_table_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ast_reference_whitespace_after_table_name_, lhs_arena,
      &other->_impl_.ast_reference_whitespace_after_table_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ast_reference_whitespace_before_cell_address_, lhs_arena,
      &other->_impl_.ast_reference_whitespace_before_cell_address_, rhs_arena
  );
  swap(_impl_.table_id_, other->_impl_.table_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[33]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTNodeArchive>()._impl_._has_bits_);
  static void set_has_ast_node_type(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_ast_function_node_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ast_function_node_numargs(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_ast_number_node_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_ast_boolean_node_boolean(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_ast_string_node_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ast_date_node_datenum(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_ast_date_node_suppress_date_format(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_ast_date_node_suppress_time_format(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_ast_date_node_date_time_format(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ast_duration_node_unitnum(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_ast_duration_node_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_ast_duration_node_style(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_ast_duration_node_duration_unit_largest(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_ast_duration_node_duration_unit_smallest(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_ast_duration_node_use_automatic_units(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_ast_token_node_boolean(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_ast_array_node_numcol(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_ast_array_node_numrow(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_ast_list_node_numargs(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::TSCE::ASTNodeArrayArchive& ast_thunk_node_array(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_thunk_node_array(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& ast_local_cell_reference_node_reference(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_local_cell_reference_node_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& ast_cross_table_cell_reference_node_reference(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_cross_table_cell_reference_node_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ast_unknown_function_node_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ast_unknown_function_node_numargs(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_ast_whitespace(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive& ast_column(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_column(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive& ast_row(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_row(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& ast_cross_table_reference_extra_info(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_cross_table_reference_extra_info(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x10000000) ^ 0x10000000) != 0;
  }
};

const ::TSCE::ASTNodeArrayArchive&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_thunk_node_array(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->_impl_.ast_thunk_node_array_;
}
const ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_local_cell_reference_node_reference(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->_impl_.ast_local_cell_reference_node_reference_;
}
const ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_cross_table_cell_reference_node_reference(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->_impl_.ast_cross_table_cell_reference_node_reference_;
}
const ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_column(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->_impl_.ast_column_;
}
const ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_row(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->_impl_.ast_row_;
}
const ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_cross_table_reference_extra_info(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->_impl_.ast_cross_table_reference_extra_info_;
}
ASTNodeArrayArchive_ASTNodeArchive::ASTNodeArrayArchive_ASTNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
}
ASTNodeArrayArchive_ASTNodeArchive::ASTNodeArrayArchive_ASTNodeArchive(const ASTNodeArrayArchive_ASTNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ASTNodeArrayArchive_ASTNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ast_string_node_string_){}
    , decltype(_impl_.ast_unknown_function_node_string_){}
    , decltype(_impl_.ast_date_node_date_time_format_){}
    , decltype(_impl_.ast_whitespace_){}
    , decltype(_impl_.ast_thunk_node_array_){nullptr}
    , decltype(_impl_.ast_local_cell_reference_node_reference_){nullptr}
    , decltype(_impl_.ast_cross_table_cell_reference_node_reference_){nullptr}
    , decltype(_impl_.ast_column_){nullptr}
    , decltype(_impl_.ast_row_){nullptr}
    , decltype(_impl_.ast_cross_table_reference_extra_info_){nullptr}
    , decltype(_impl_.ast_function_node_index_){}
    , decltype(_impl_.ast_function_node_numargs_){}
    , decltype(_impl_.ast_number_node_number_){}
    , decltype(_impl_.ast_date_node_datenum_){}
    , decltype(_impl_.ast_duration_node_unitnum_){}
    , decltype(_impl_.ast_duration_node_unit_){}
    , decltype(_impl_.ast_token_node_boolean_){}
    , decltype(_impl_.ast_array_node_numcol_){}
    , decltype(_impl_.ast_array_node_numrow_){}
    , decltype(_impl_.ast_list_node_numargs_){}
    , decltype(_impl_.ast_unknown_function_node_numargs_){}
    , decltype(_impl_.ast_boolean_node_boolean_){}
    , decltype(_impl_.ast_date_node_suppress_date_format_){}
    , decltype(_impl_.ast_date_node_suppress_time_format_){}
    , decltype(_impl_.ast_duration_node_use_automatic_units_){}
    , decltype(_impl_.ast_duration_node_style_){}
    , decltype(_impl_.ast_duration_node_duration_unit_largest_){}
    , decltype(_impl_.ast_duration_node_duration_unit_smallest_){}
    , decltype(_impl_.ast_node_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ast_string_node_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_string_node_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ast_string_node_string()) {
    _this->_impl_.ast_string_node_string_.Set(from._internal_ast_string_node_string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ast_unknown_function_node_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_unknown_function_node_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ast_unknown_function_node_string()) {
    _this->_impl_.ast_unknown_function_node_string_.Set(from._internal_ast_unknown_function_node_string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ast_date_node_date_time_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_date_node_date_time_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ast_date_node_date_time_format()) {
    _this->_impl_.ast_date_node_date_time_format_.Set(from._internal_ast_date_node_date_time_format(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ast_whitespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_whitespace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ast_whitespace()) {
    _this->_impl_.ast_whitespace_.Set(from._internal_ast_whitespace(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ast_thunk_node_array()) {
    _this->_impl_.ast_thunk_node_array_ = new ::TSCE::ASTNodeArrayArchive(*from._impl_.ast_thunk_node_array_);
  }
  if (from._internal_has_ast_local_cell_reference_node_reference()) {
    _this->_impl_.ast_local_cell_reference_node_reference_ = new ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive(*from._impl_.ast_local_cell_reference_node_reference_);
  }
  if (from._internal_has_ast_cross_table_cell_reference_node_reference()) {
    _this->_impl_.ast_cross_table_cell_reference_node_reference_ = new ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive(*from._impl_.ast_cross_table_cell_reference_node_reference_);
  }
  if (from._internal_has_ast_column()) {
    _this->_impl_.ast_column_ = new ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive(*from._impl_.ast_column_);
  }
  if (from._internal_has_ast_row()) {
    _this->_impl_.ast_row_ = new ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive(*from._impl_.ast_row_);
  }
  if (from._internal_has_ast_cross_table_reference_extra_info()) {
    _this->_impl_.ast_cross_table_reference_extra_info_ = new ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive(*from._impl_.ast_cross_table_reference_extra_info_);
  }
  ::memcpy(&_impl_.ast_function_node_index_, &from._impl_.ast_function_node_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ast_node_type_) -
    reinterpret_cast<char*>(&_impl_.ast_function_node_index_)) + sizeof(_impl_.ast_node_type_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
}

inline void ASTNodeArrayArchive_ASTNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ast_string_node_string_){}
    , decltype(_impl_.ast_unknown_function_node_string_){}
    , decltype(_impl_.ast_date_node_date_time_format_){}
    , decltype(_impl_.ast_whitespace_){}
    , decltype(_impl_.ast_thunk_node_array_){nullptr}
    , decltype(_impl_.ast_local_cell_reference_node_reference_){nullptr}
    , decltype(_impl_.ast_cross_table_cell_reference_node_reference_){nullptr}
    , decltype(_impl_.ast_column_){nullptr}
    , decltype(_impl_.ast_row_){nullptr}
    , decltype(_impl_.ast_cross_table_reference_extra_info_){nullptr}
    , decltype(_impl_.ast_function_node_index_){0u}
    , decltype(_impl_.ast_function_node_numargs_){0u}
    , decltype(_impl_.ast_number_node_number_){0}
    , decltype(_impl_.ast_date_node_datenum_){0}
    , decltype(_impl_.ast_duration_node_unitnum_){0}
    , decltype(_impl_.ast_duration_node_unit_){0}
    , decltype(_impl_.ast_token_node_boolean_){false}
    , decltype(_impl_.ast_array_node_numcol_){0u}
    , decltype(_impl_.ast_array_node_numrow_){0u}
    , decltype(_impl_.ast_list_node_numargs_){0u}
    , decltype(_impl_.ast_unknown_function_node_numargs_){0u}
    , decltype(_impl_.ast_boolean_node_boolean_){false}
    , decltype(_impl_.ast_date_node_suppress_date_format_){false}
    , decltype(_impl_.ast_date_node_suppress_time_format_){false}
    , decltype(_impl_.ast_duration_node_use_automatic_units_){false}
    , decltype(_impl_.ast_duration_node_style_){0u}
    , decltype(_impl_.ast_duration_node_duration_unit_largest_){0u}
    , decltype(_impl_.ast_duration_node_duration_unit_smallest_){0u}
    , decltype(_impl_.ast_node_type_){1}
  };
  _impl_.ast_string_node_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_string_node_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ast_unknown_function_node_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_unknown_function_node_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ast_date_node_date_time_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_date_node_date_time_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ast_whitespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_whitespace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ASTNodeArrayArchive_ASTNodeArchive::~ASTNodeArrayArchive_ASTNodeArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ASTNodeArrayArchive_ASTNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ast_string_node_string_.Destroy();
  _impl_.ast_unknown_function_node_string_.Destroy();
  _impl_.ast_date_node_date_time_format_.Destroy();
  _impl_.ast_whitespace_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ast_thunk_node_array_;
  if (this != internal_default_instance()) delete _impl_.ast_local_cell_reference_node_reference_;
  if (this != internal_default_instance()) delete _impl_.ast_cross_table_cell_reference_node_reference_;
  if (this != internal_default_instance()) delete _impl_.ast_column_;
  if (this != internal_default_instance()) delete _impl_.ast_row_;
  if (this != internal_default_instance()) delete _impl_.ast_cross_table_reference_extra_info_;
}

void ASTNodeArrayArchive_ASTNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ast_string_node_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.ast_unknown_function_node_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.ast_date_node_date_time_format_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.ast_whitespace_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.ast_thunk_node_array_ != nullptr);
      _impl_.ast_thunk_node_array_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.ast_local_cell_reference_node_reference_ != nullptr);
      _impl_.ast_local_cell_reference_node_reference_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.ast_cross_table_cell_reference_node_reference_ != nullptr);
      _impl_.ast_cross_table_cell_reference_node_reference_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.ast_column_ != nullptr);
      _impl_.ast_column_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.ast_row_ != nullptr);
      _impl_.ast_row_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.ast_cross_table_reference_extra_info_ != nullptr);
      _impl_.ast_cross_table_reference_extra_info_->Clear();
    }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&_impl_.ast_function_node_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ast_duration_node_unit_) -
        reinterpret_cast<char*>(&_impl_.ast_function_node_index_)) + sizeof(_impl_.ast_duration_node_unit_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.ast_token_node_boolean_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ast_date_node_suppress_time_format_) -
        reinterpret_cast<char*>(&_impl_.ast_token_node_boolean_)) + sizeof(_impl_.ast_date_node_suppress_time_format_));
  }
  if (cached_has_bits & 0x1f000000u) {
    ::memset(&_impl_.ast_duration_node_use_automatic_units_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ast_duration_node_duration_unit_smallest_) -
        reinterpret_cast<char*>(&_impl_.ast_duration_node_use_automatic_units_)) + sizeof(_impl_.ast_duration_node_duration_unit_smallest_));
    _impl_.ast_node_type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.ASTNodeArrayArchive.ASTNodeType AST_node_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCE::ASTNodeArrayArchive_ASTNodeType_IsValid(val))) {
            _internal_set_ast_node_type(static_cast<::TSCE::ASTNodeArrayArchive_ASTNodeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 AST_function_node_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ast_function_node_index(&has_bits);
          _impl_.ast_function_node_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 AST_function_node_numArgs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ast_function_node_numargs(&has_bits);
          _impl_.ast_function_node_numargs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double AST_number_node_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_ast_number_node_number(&has_bits);
          _impl_.ast_number_node_number_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool AST_boolean_node_boolean = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_ast_boolean_node_boolean(&has_bits);
          _impl_.ast_boolean_node_boolean_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string AST_string_node_string = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_ast_string_node_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_string_node_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double AST_date_node_dateNum = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_ast_date_node_datenum(&has_bits);
          _impl_.ast_date_node_datenum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double AST_duration_node_unitNum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_ast_duration_node_unitnum(&has_bits);
          _impl_.ast_duration_node_unitnum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 AST_duration_node_unit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_ast_duration_node_unit(&has_bits);
          _impl_.ast_duration_node_unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool AST_token_node_boolean = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_ast_token_node_boolean(&has_bits);
          _impl_.ast_token_node_boolean_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 AST_array_node_numCol = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_ast_array_node_numcol(&has_bits);
          _impl_.ast_array_node_numcol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 AST_array_node_numRow = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_ast_array_node_numrow(&has_bits);
          _impl_.ast_array_node_numrow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 AST_list_node_numArgs = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_ast_list_node_numargs(&has_bits);
          _impl_.ast_list_node_numargs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive AST_thunk_node_array = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_thunk_node_array(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive AST_local_cell_reference_node_reference = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_local_cell_reference_node_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive AST_cross_table_cell_reference_node_reference = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_cross_table_cell_reference_node_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string AST_unknown_function_node_string = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_ast_unknown_function_node_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_unknown_function_node_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 AST_unknown_function_node_numArgs = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_ast_unknown_function_node_numargs(&has_bits);
          _impl_.ast_unknown_function_node_numargs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool AST_date_node_suppress_date_format = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_ast_date_node_suppress_date_format(&has_bits);
          _impl_.ast_date_node_suppress_date_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool AST_date_node_suppress_time_format = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_ast_date_node_suppress_time_format(&has_bits);
          _impl_.ast_date_node_suppress_time_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string AST_date_node_date_time_format = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_ast_date_node_date_time_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_date_node_date_time_format");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 AST_duration_node_style = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_ast_duration_node_style(&has_bits);
          _impl_.ast_duration_node_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 AST_duration_node_duration_unit_largest = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_ast_duration_node_duration_unit_largest(&has_bits);
          _impl_.ast_duration_node_duration_unit_largest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 AST_duration_node_duration_unit_smallest = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_ast_duration_node_duration_unit_smallest(&has_bits);
          _impl_.ast_duration_node_duration_unit_smallest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string AST_whitespace = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_ast_whitespace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_whitespace");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive AST_column = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_column(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive AST_row = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_row(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive AST_cross_table_reference_extra_info = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_cross_table_reference_extra_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool AST_duration_node_use_automatic_units = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_ast_duration_node_use_automatic_units(&has_bits);
          _impl_.ast_duration_node_use_automatic_units_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ASTNodeArrayArchive_ASTNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.ASTNodeArrayArchive.ASTNodeType AST_node_type = 1;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ast_node_type(), target);
  }

  // optional uint32 AST_function_node_index = 2;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ast_function_node_index(), target);
  }

  // optional uint32 AST_function_node_numArgs = 3;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ast_function_node_numargs(), target);
  }

  // optional double AST_number_node_number = 4;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_ast_number_node_number(), target);
  }

  // optional bool AST_boolean_node_boolean = 5;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_ast_boolean_node_boolean(), target);
  }

  // optional string AST_string_node_string = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_string_node_string().data(), static_cast<int>(this->_internal_ast_string_node_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_string_node_string");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ast_string_node_string(), target);
  }

  // optional double AST_date_node_dateNum = 7;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_ast_date_node_datenum(), target);
  }

  // optional double AST_duration_node_unitNum = 8;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_ast_duration_node_unitnum(), target);
  }

  // optional int32 AST_duration_node_unit = 9;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_ast_duration_node_unit(), target);
  }

  // optional bool AST_token_node_boolean = 10;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_ast_token_node_boolean(), target);
  }

  // optional uint32 AST_array_node_numCol = 11;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_ast_array_node_numcol(), target);
  }

  // optional uint32 AST_array_node_numRow = 12;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_ast_array_node_numrow(), target);
  }

  // optional uint32 AST_list_node_numArgs = 13;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_ast_list_node_numargs(), target);
  }

  // optional .TSCE.ASTNodeArrayArchive AST_thunk_node_array = 14;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::ast_thunk_node_array(this),
        _Internal::ast_thunk_node_array(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive AST_local_cell_reference_node_reference = 15;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::ast_local_cell_reference_node_reference(this),
        _Internal::ast_local_cell_reference_node_reference(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive AST_cross_table_cell_reference_node_reference = 16;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::ast_cross_table_cell_reference_node_reference(this),
        _Internal::ast_cross_table_cell_reference_node_reference(this).GetCachedSize(), target, stream);
  }

  // optional string AST_unknown_function_node_string = 17;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_unknown_function_node_string().data(), static_cast<int>(this->_internal_ast_unknown_function_node_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_unknown_function_node_string");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_ast_unknown_function_node_string(), target);
  }

  // optional uint32 AST_unknown_function_node_numArgs = 18;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_ast_unknown_function_node_numargs(), target);
  }

  // optional bool AST_date_node_suppress_date_format = 19;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_ast_date_node_suppress_date_format(), target);
  }

  // optional bool AST_date_node_suppress_time_format = 20;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_ast_date_node_suppress_time_format(), target);
  }

  // optional string AST_date_node_date_time_format = 21;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_date_node_date_time_format().data(), static_cast<int>(this->_internal_ast_date_node_date_time_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_date_node_date_time_format");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_ast_date_node_date_time_format(), target);
  }

  // optional uint32 AST_duration_node_style = 22;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_ast_duration_node_style(), target);
  }

  // optional uint32 AST_duration_node_duration_unit_largest = 23;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_ast_duration_node_duration_unit_largest(), target);
  }

  // optional uint32 AST_duration_node_duration_unit_smallest = 24;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_ast_duration_node_duration_unit_smallest(), target);
  }

  // optional string AST_whitespace = 25;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_whitespace().data(), static_cast<int>(this->_internal_ast_whitespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_whitespace");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_ast_whitespace(), target);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive AST_column = 26;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::ast_column(this),
        _Internal::ast_column(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive AST_row = 27;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::ast_row(this),
        _Internal::ast_row(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive AST_cross_table_reference_extra_info = 28;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::ast_cross_table_reference_extra_info(this),
        _Internal::ast_cross_table_reference_extra_info(this).GetCachedSize(), target, stream);
  }

  // optional bool AST_duration_node_use_automatic_units = 29;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(29, this->_internal_ast_duration_node_use_automatic_units(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
  return target;
}

size_t ASTNodeArrayArchive_ASTNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
  size_t total_size = 0;

  // required .TSCE.ASTNodeArrayArchive.ASTNodeType AST_node_type = 1;
  if (_internal_has_ast_node_type()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_ast_node_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string AST_string_node_string = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_string_node_string());
    }

    // optional string AST_unknown_function_node_string = 17;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_unknown_function_node_string());
    }

    // optional string AST_date_node_date_time_format = 21;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_date_node_date_time_format());
    }

    // optional string AST_whitespace = 25;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_whitespace());
    }

    // optional .TSCE.ASTNodeArrayArchive AST_thunk_node_array = 14;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ast_thunk_node_array_);
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive AST_local_cell_reference_node_reference = 15;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ast_local_cell_reference_node_reference_);
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive AST_cross_table_cell_reference_node_reference = 16;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ast_cross_table_cell_reference_node_reference_);
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive AST_column = 26;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ast_column_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive AST_row = 27;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ast_row_);
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive AST_cross_table_reference_extra_info = 28;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ast_cross_table_reference_extra_info_);
    }

    // optional uint32 AST_function_node_index = 2;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ast_function_node_index());
    }

    // optional uint32 AST_function_node_numArgs = 3;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ast_function_node_numargs());
    }

    // optional double AST_number_node_number = 4;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double AST_date_node_dateNum = 7;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double AST_duration_node_unitNum = 8;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional int32 AST_duration_node_unit = 9;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ast_duration_node_unit());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool AST_token_node_boolean = 10;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional uint32 AST_array_node_numCol = 11;
    if (cached_has_bits & 0x00020000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ast_array_node_numcol());
    }

    // optional uint32 AST_array_node_numRow = 12;
    if (cached_has_bits & 0x00040000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ast_array_node_numrow());
    }

    // optional uint32 AST_list_node_numArgs = 13;
    if (cached_has_bits & 0x00080000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ast_list_node_numargs());
    }

    // optional uint32 AST_unknown_function_node_numArgs = 18;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_ast_unknown_function_node_numargs());
    }

    // optional bool AST_boolean_node_boolean = 5;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 1;
    }

    // optional bool AST_date_node_suppress_date_format = 19;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool AST_date_node_suppress_time_format = 20;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0f000000u) {
    // optional bool AST_duration_node_use_automatic_units = 29;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional uint32 AST_duration_node_style = 22;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_ast_duration_node_style());
    }

    // optional uint32 AST_duration_node_duration_unit_largest = 23;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_ast_duration_node_duration_unit_largest());
    }

    // optional uint32 AST_duration_node_duration_unit_smallest = 24;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_ast_duration_node_duration_unit_smallest());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ASTNodeArrayArchive_ASTNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ASTNodeArrayArchive_ASTNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ASTNodeArrayArchive_ASTNodeArchive::GetClassData() const { return &_class_data_; }


void ASTNodeArrayArchive_ASTNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ASTNodeArrayArchive_ASTNodeArchive*>(&to_msg);
  auto& from = static_cast<const ASTNodeArrayArchive_ASTNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_ast_string_node_string(from._internal_ast_string_node_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_ast_unknown_function_node_string(from._internal_ast_unknown_function_node_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_ast_date_node_date_time_format(from._internal_ast_date_node_date_time_format());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_ast_whitespace(from._internal_ast_whitespace());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_ast_thunk_node_array()->::TSCE::ASTNodeArrayArchive::MergeFrom(
          from._internal_ast_thunk_node_array());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_ast_local_cell_reference_node_reference()->::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::MergeFrom(
          from._internal_ast_local_cell_reference_node_reference());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_ast_cross_table_cell_reference_node_reference()->::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::MergeFrom(
          from._internal_ast_cross_table_cell_reference_node_reference());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_ast_column()->::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive::MergeFrom(
          from._internal_ast_column());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_ast_row()->::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive::MergeFrom(
          from._internal_ast_row());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_ast_cross_table_reference_extra_info()->::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::MergeFrom(
          from._internal_ast_cross_table_reference_extra_info());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.ast_function_node_index_ = from._impl_.ast_function_node_index_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.ast_function_node_numargs_ = from._impl_.ast_function_node_numargs_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.ast_number_node_number_ = from._impl_.ast_number_node_number_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.ast_date_node_datenum_ = from._impl_.ast_date_node_datenum_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.ast_duration_node_unitnum_ = from._impl_.ast_duration_node_unitnum_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.ast_duration_node_unit_ = from._impl_.ast_duration_node_unit_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.ast_token_node_boolean_ = from._impl_.ast_token_node_boolean_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.ast_array_node_numcol_ = from._impl_.ast_array_node_numcol_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.ast_array_node_numrow_ = from._impl_.ast_array_node_numrow_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.ast_list_node_numargs_ = from._impl_.ast_list_node_numargs_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.ast_unknown_function_node_numargs_ = from._impl_.ast_unknown_function_node_numargs_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.ast_boolean_node_boolean_ = from._impl_.ast_boolean_node_boolean_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.ast_date_node_suppress_date_format_ = from._impl_.ast_date_node_suppress_date_format_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.ast_date_node_suppress_time_format_ = from._impl_.ast_date_node_suppress_time_format_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x1f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.ast_duration_node_use_automatic_units_ = from._impl_.ast_duration_node_use_automatic_units_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.ast_duration_node_style_ = from._impl_.ast_duration_node_style_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.ast_duration_node_duration_unit_largest_ = from._impl_.ast_duration_node_duration_unit_largest_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.ast_duration_node_duration_unit_smallest_ = from._impl_.ast_duration_node_duration_unit_smallest_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.ast_node_type_ = from._impl_.ast_node_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ASTNodeArrayArchive_ASTNodeArchive::CopyFrom(const ASTNodeArrayArchive_ASTNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_ast_thunk_node_array()) {
    if (!_impl_.ast_thunk_node_array_->IsInitialized()) return false;
  }
  if (_internal_has_ast_local_cell_reference_node_reference()) {
    if (!_impl_.ast_local_cell_reference_node_reference_->IsInitialized()) return false;
  }
  if (_internal_has_ast_cross_table_cell_reference_node_reference()) {
    if (!_impl_.ast_cross_table_cell_reference_node_reference_->IsInitialized()) return false;
  }
  if (_internal_has_ast_column()) {
    if (!_impl_.ast_column_->IsInitialized()) return false;
  }
  if (_internal_has_ast_row()) {
    if (!_impl_.ast_row_->IsInitialized()) return false;
  }
  if (_internal_has_ast_cross_table_reference_extra_info()) {
    if (!_impl_.ast_cross_table_reference_extra_info_->IsInitialized()) return false;
  }
  return true;
}

void ASTNodeArrayArchive_ASTNodeArchive::InternalSwap(ASTNodeArrayArchive_ASTNodeArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ast_string_node_string_, lhs_arena,
      &other->_impl_.ast_string_node_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ast_unknown_function_node_string_, lhs_arena,
      &other->_impl_.ast_unknown_function_node_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ast_date_node_date_time_format_, lhs_arena,
      &other->_impl_.ast_date_node_date_time_format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ast_whitespace_, lhs_arena,
      &other->_impl_.ast_whitespace_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_duration_node_duration_unit_smallest_)
      + sizeof(ASTNodeArrayArchive_ASTNodeArchive::_impl_.ast_duration_node_duration_unit_smallest_)
      - PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_thunk_node_array_)>(
          reinterpret_cast<char*>(&_impl_.ast_thunk_node_array_),
          reinterpret_cast<char*>(&other->_impl_.ast_thunk_node_array_));
  swap(_impl_.ast_node_type_, other->_impl_.ast_node_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[34]);
}

// ===================================================================

class ASTNodeArrayArchive::_Internal {
 public:
};

ASTNodeArrayArchive::ASTNodeArrayArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive)
}
ASTNodeArrayArchive::ASTNodeArrayArchive(const ASTNodeArrayArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ASTNodeArrayArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ast_node_){from._impl_.ast_node_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive)
}

inline void ASTNodeArrayArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ast_node_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ASTNodeArrayArchive::~ASTNodeArrayArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ASTNodeArrayArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ast_node_.~RepeatedPtrField();
}

void ASTNodeArrayArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ASTNodeArrayArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ast_node_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.ASTNodeArrayArchive.ASTNodeArchive AST_node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ast_node(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ASTNodeArrayArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.ASTNodeArrayArchive.ASTNodeArchive AST_node = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ast_node_size()); i < n; i++) {
    const auto& repfield = this->_internal_ast_node(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive)
  return target;
}

size_t ASTNodeArrayArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.ASTNodeArrayArchive.ASTNodeArchive AST_node = 1;
  total_size += 1UL * this->_internal_ast_node_size();
  for (const auto& msg : this->_impl_.ast_node_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ASTNodeArrayArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ASTNodeArrayArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ASTNodeArrayArchive::GetClassData() const { return &_class_data_; }


void ASTNodeArrayArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ASTNodeArrayArchive*>(&to_msg);
  auto& from = static_cast<const ASTNodeArrayArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ast_node_.MergeFrom(from._impl_.ast_node_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ASTNodeArrayArchive::CopyFrom(const ASTNodeArrayArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.ast_node_))
    return false;
  return true;
}

void ASTNodeArrayArchive::InternalSwap(ASTNodeArrayArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ast_node_.InternalSwap(&other->_impl_.ast_node_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[35]);
}

// ===================================================================

class FormulaTranslationFlagsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaTranslationFlagsArchive>()._impl_._has_bits_);
  static void set_has_excel_import_translation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_number_to_date_coercion_removal_translation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FormulaTranslationFlagsArchive::FormulaTranslationFlagsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.FormulaTranslationFlagsArchive)
}
FormulaTranslationFlagsArchive::FormulaTranslationFlagsArchive(const FormulaTranslationFlagsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormulaTranslationFlagsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.excel_import_translation_){}
    , decltype(_impl_.number_to_date_coercion_removal_translation_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.excel_import_translation_, &from._impl_.excel_import_translation_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.number_to_date_coercion_removal_translation_) -
    reinterpret_cast<char*>(&_impl_.excel_import_translation_)) + sizeof(_impl_.number_to_date_coercion_removal_translation_));
  // @@protoc_insertion_point(copy_constructor:TSCE.FormulaTranslationFlagsArchive)
}

inline void FormulaTranslationFlagsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.excel_import_translation_){false}
    , decltype(_impl_.number_to_date_coercion_removal_translation_){false}
  };
}

FormulaTranslationFlagsArchive::~FormulaTranslationFlagsArchive() {
  // @@protoc_insertion_point(destructor:TSCE.FormulaTranslationFlagsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormulaTranslationFlagsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FormulaTranslationFlagsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormulaTranslationFlagsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.FormulaTranslationFlagsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.excel_import_translation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.number_to_date_coercion_removal_translation_) -
      reinterpret_cast<char*>(&_impl_.excel_import_translation_)) + sizeof(_impl_.number_to_date_coercion_removal_translation_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaTranslationFlagsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool excel_import_translation = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_excel_import_translation(&has_bits);
          _impl_.excel_import_translation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool number_to_date_coercion_removal_translation = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_number_to_date_coercion_removal_translation(&has_bits);
          _impl_.number_to_date_coercion_removal_translation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormulaTranslationFlagsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.FormulaTranslationFlagsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool excel_import_translation = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_excel_import_translation(), target);
  }

  // optional bool number_to_date_coercion_removal_translation = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_number_to_date_coercion_removal_translation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.FormulaTranslationFlagsArchive)
  return target;
}

size_t FormulaTranslationFlagsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.FormulaTranslationFlagsArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool excel_import_translation = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool number_to_date_coercion_removal_translation = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaTranslationFlagsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormulaTranslationFlagsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaTranslationFlagsArchive::GetClassData() const { return &_class_data_; }


void FormulaTranslationFlagsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormulaTranslationFlagsArchive*>(&to_msg);
  auto& from = static_cast<const FormulaTranslationFlagsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.FormulaTranslationFlagsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.excel_import_translation_ = from._impl_.excel_import_translation_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.number_to_date_coercion_removal_translation_ = from._impl_.number_to_date_coercion_removal_translation_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaTranslationFlagsArchive::CopyFrom(const FormulaTranslationFlagsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.FormulaTranslationFlagsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaTranslationFlagsArchive::IsInitialized() const {
  return true;
}

void FormulaTranslationFlagsArchive::InternalSwap(FormulaTranslationFlagsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaTranslationFlagsArchive, _impl_.number_to_date_coercion_removal_translation_)
      + sizeof(FormulaTranslationFlagsArchive::_impl_.number_to_date_coercion_removal_translation_)
      - PROTOBUF_FIELD_OFFSET(FormulaTranslationFlagsArchive, _impl_.excel_import_translation_)>(
          reinterpret_cast<char*>(&_impl_.excel_import_translation_),
          reinterpret_cast<char*>(&other->_impl_.excel_import_translation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaTranslationFlagsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[36]);
}

// ===================================================================

class FormulaArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaArchive>()._impl_._has_bits_);
  static const ::TSCE::ASTNodeArrayArchive& ast_node_array(const FormulaArchive* msg);
  static void set_has_ast_node_array(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_host_column(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_host_row(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_host_column_is_negative(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_host_row_is_negative(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCE::FormulaTranslationFlagsArchive& translation_flags(const FormulaArchive* msg);
  static void set_has_translation_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCE::ASTNodeArrayArchive&
FormulaArchive::_Internal::ast_node_array(const FormulaArchive* msg) {
  return *msg->_impl_.ast_node_array_;
}
const ::TSCE::FormulaTranslationFlagsArchive&
FormulaArchive::_Internal::translation_flags(const FormulaArchive* msg) {
  return *msg->_impl_.translation_flags_;
}
FormulaArchive::FormulaArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.FormulaArchive)
}
FormulaArchive::FormulaArchive(const FormulaArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormulaArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ast_node_array_){nullptr}
    , decltype(_impl_.translation_flags_){nullptr}
    , decltype(_impl_.host_column_){}
    , decltype(_impl_.host_row_){}
    , decltype(_impl_.host_column_is_negative_){}
    , decltype(_impl_.host_row_is_negative_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ast_node_array()) {
    _this->_impl_.ast_node_array_ = new ::TSCE::ASTNodeArrayArchive(*from._impl_.ast_node_array_);
  }
  if (from._internal_has_translation_flags()) {
    _this->_impl_.translation_flags_ = new ::TSCE::FormulaTranslationFlagsArchive(*from._impl_.translation_flags_);
  }
  ::memcpy(&_impl_.host_column_, &from._impl_.host_column_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.host_row_is_negative_) -
    reinterpret_cast<char*>(&_impl_.host_column_)) + sizeof(_impl_.host_row_is_negative_));
  // @@protoc_insertion_point(copy_constructor:TSCE.FormulaArchive)
}

inline void FormulaArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ast_node_array_){nullptr}
    , decltype(_impl_.translation_flags_){nullptr}
    , decltype(_impl_.host_column_){0u}
    , decltype(_impl_.host_row_){0u}
    , decltype(_impl_.host_column_is_negative_){false}
    , decltype(_impl_.host_row_is_negative_){false}
  };
}

FormulaArchive::~FormulaArchive() {
  // @@protoc_insertion_point(destructor:TSCE.FormulaArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormulaArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ast_node_array_;
  if (this != internal_default_instance()) delete _impl_.translation_flags_;
}

void FormulaArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormulaArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.FormulaArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.ast_node_array_ != nullptr);
      _impl_.ast_node_array_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.translation_flags_ != nullptr);
      _impl_.translation_flags_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.host_column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.host_row_is_negative_) -
        reinterpret_cast<char*>(&_impl_.host_column_)) + sizeof(_impl_.host_row_is_negative_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.ASTNodeArrayArchive AST_node_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_node_array(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 host_column = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_host_column(&has_bits);
          _impl_.host_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 host_row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_host_row(&has_bits);
          _impl_.host_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool host_column_is_negative = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_host_column_is_negative(&has_bits);
          _impl_.host_column_is_negative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool host_row_is_negative = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_host_row_is_negative(&has_bits);
          _impl_.host_row_is_negative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.FormulaTranslationFlagsArchive translation_flags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation_flags(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormulaArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.FormulaArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.ASTNodeArrayArchive AST_node_array = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ast_node_array(this),
        _Internal::ast_node_array(this).GetCachedSize(), target, stream);
  }

  // optional uint32 host_column = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_host_column(), target);
  }

  // optional uint32 host_row = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_host_row(), target);
  }

  // optional bool host_column_is_negative = 4 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_host_column_is_negative(), target);
  }

  // optional bool host_row_is_negative = 5 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_host_row_is_negative(), target);
  }

  // optional .TSCE.FormulaTranslationFlagsArchive translation_flags = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::translation_flags(this),
        _Internal::translation_flags(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.FormulaArchive)
  return target;
}

size_t FormulaArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.FormulaArchive)
  size_t total_size = 0;

  // required .TSCE.ASTNodeArrayArchive AST_node_array = 1;
  if (_internal_has_ast_node_array()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ast_node_array_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional .TSCE.FormulaTranslationFlagsArchive translation_flags = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.translation_flags_);
    }

    // optional uint32 host_column = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_host_column());
    }

    // optional uint32 host_row = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_host_row());
    }

    // optional bool host_column_is_negative = 4 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool host_row_is_negative = 5 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormulaArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaArchive::GetClassData() const { return &_class_data_; }


void FormulaArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormulaArchive*>(&to_msg);
  auto& from = static_cast<const FormulaArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.FormulaArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ast_node_array()->::TSCE::ASTNodeArrayArchive::MergeFrom(
          from._internal_ast_node_array());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_translation_flags()->::TSCE::FormulaTranslationFlagsArchive::MergeFrom(
          from._internal_translation_flags());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.host_column_ = from._impl_.host_column_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.host_row_ = from._impl_.host_row_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.host_column_is_negative_ = from._impl_.host_column_is_negative_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.host_row_is_negative_ = from._impl_.host_row_is_negative_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaArchive::CopyFrom(const FormulaArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.FormulaArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_ast_node_array()) {
    if (!_impl_.ast_node_array_->IsInitialized()) return false;
  }
  return true;
}

void FormulaArchive::InternalSwap(FormulaArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaArchive, _impl_.host_row_is_negative_)
      + sizeof(FormulaArchive::_impl_.host_row_is_negative_)
      - PROTOBUF_FIELD_OFFSET(FormulaArchive, _impl_.ast_node_array_)>(
          reinterpret_cast<char*>(&_impl_.ast_node_array_),
          reinterpret_cast<char*>(&other->_impl_.ast_node_array_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[37]);
}

// ===================================================================

class FormatStructArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormatStructArchive>()._impl_._has_bits_);
  static void set_has_format_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_decimal_places(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_currency_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_negative_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_show_thousands_separator(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_use_accounting_style(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_duration_style(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_base_places(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_base_use_minus_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_fraction_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_suppress_date_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_suppress_time_format(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_date_time_format(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration_unit_largest(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_duration_unit_smallest(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

FormatStructArchive::FormatStructArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.FormatStructArchive)
}
FormatStructArchive::FormatStructArchive(const FormatStructArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormatStructArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currency_code_){}
    , decltype(_impl_.date_time_format_){}
    , decltype(_impl_.format_type_){}
    , decltype(_impl_.decimal_places_){}
    , decltype(_impl_.negative_style_){}
    , decltype(_impl_.duration_style_){}
    , decltype(_impl_.base_){}
    , decltype(_impl_.show_thousands_separator_){}
    , decltype(_impl_.use_accounting_style_){}
    , decltype(_impl_.base_use_minus_sign_){}
    , decltype(_impl_.suppress_date_format_){}
    , decltype(_impl_.base_places_){}
    , decltype(_impl_.fraction_accuracy_){}
    , decltype(_impl_.suppress_time_format_){}
    , decltype(_impl_.duration_unit_largest_){}
    , decltype(_impl_.duration_unit_smallest_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.currency_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_currency_code()) {
    _this->_impl_.currency_code_.Set(from._internal_currency_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.date_time_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.date_time_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_date_time_format()) {
    _this->_impl_.date_time_format_.Set(from._internal_date_time_format(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.format_type_, &from._impl_.format_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.duration_unit_smallest_) -
    reinterpret_cast<char*>(&_impl_.format_type_)) + sizeof(_impl_.duration_unit_smallest_));
  // @@protoc_insertion_point(copy_constructor:TSCE.FormatStructArchive)
}

inline void FormatStructArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currency_code_){}
    , decltype(_impl_.date_time_format_){}
    , decltype(_impl_.format_type_){0u}
    , decltype(_impl_.decimal_places_){0u}
    , decltype(_impl_.negative_style_){0u}
    , decltype(_impl_.duration_style_){0u}
    , decltype(_impl_.base_){0u}
    , decltype(_impl_.show_thousands_separator_){false}
    , decltype(_impl_.use_accounting_style_){false}
    , decltype(_impl_.base_use_minus_sign_){false}
    , decltype(_impl_.suppress_date_format_){false}
    , decltype(_impl_.base_places_){0u}
    , decltype(_impl_.fraction_accuracy_){0u}
    , decltype(_impl_.suppress_time_format_){false}
    , decltype(_impl_.duration_unit_largest_){0u}
    , decltype(_impl_.duration_unit_smallest_){0u}
  };
  _impl_.currency_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.date_time_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.date_time_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FormatStructArchive::~FormatStructArchive() {
  // @@protoc_insertion_point(destructor:TSCE.FormatStructArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormatStructArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.currency_code_.Destroy();
  _impl_.date_time_format_.Destroy();
}

void FormatStructArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormatStructArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.FormatStructArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.currency_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.date_time_format_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.format_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.show_thousands_separator_) -
        reinterpret_cast<char*>(&_impl_.format_type_)) + sizeof(_impl_.show_thousands_separator_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.use_accounting_style_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.duration_unit_smallest_) -
        reinterpret_cast<char*>(&_impl_.use_accounting_style_)) + sizeof(_impl_.duration_unit_smallest_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormatStructArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 format_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_format_type(&has_bits);
          _impl_.format_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 decimal_places = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_decimal_places(&has_bits);
          _impl_.decimal_places_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string currency_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_currency_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.FormatStructArchive.currency_code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 negative_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_negative_style(&has_bits);
          _impl_.negative_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_thousands_separator = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_show_thousands_separator(&has_bits);
          _impl_.show_thousands_separator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_accounting_style = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_use_accounting_style(&has_bits);
          _impl_.use_accounting_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration_style = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_duration_style(&has_bits);
          _impl_.duration_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 base = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_base(&has_bits);
          _impl_.base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 base_places = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_base_places(&has_bits);
          _impl_.base_places_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool base_use_minus_sign = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_base_use_minus_sign(&has_bits);
          _impl_.base_use_minus_sign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 fraction_accuracy = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_fraction_accuracy(&has_bits);
          _impl_.fraction_accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool suppress_date_format = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_suppress_date_format(&has_bits);
          _impl_.suppress_date_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool suppress_time_format = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_suppress_time_format(&has_bits);
          _impl_.suppress_time_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string date_time_format = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_date_time_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.FormatStructArchive.date_time_format");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration_unit_largest = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_duration_unit_largest(&has_bits);
          _impl_.duration_unit_largest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration_unit_smallest = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_duration_unit_smallest(&has_bits);
          _impl_.duration_unit_smallest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormatStructArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.FormatStructArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 format_type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_format_type(), target);
  }

  // optional uint32 decimal_places = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_decimal_places(), target);
  }

  // optional string currency_code = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currency_code().data(), static_cast<int>(this->_internal_currency_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.FormatStructArchive.currency_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_currency_code(), target);
  }

  // optional uint32 negative_style = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_negative_style(), target);
  }

  // optional bool show_thousands_separator = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_show_thousands_separator(), target);
  }

  // optional bool use_accounting_style = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_use_accounting_style(), target);
  }

  // optional uint32 duration_style = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_duration_style(), target);
  }

  // optional uint32 base = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_base(), target);
  }

  // optional uint32 base_places = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_base_places(), target);
  }

  // optional bool base_use_minus_sign = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_base_use_minus_sign(), target);
  }

  // optional uint32 fraction_accuracy = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_fraction_accuracy(), target);
  }

  // optional bool suppress_date_format = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_suppress_date_format(), target);
  }

  // optional bool suppress_time_format = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_suppress_time_format(), target);
  }

  // optional string date_time_format = 14;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_date_time_format().data(), static_cast<int>(this->_internal_date_time_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.FormatStructArchive.date_time_format");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_date_time_format(), target);
  }

  // optional uint32 duration_unit_largest = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_duration_unit_largest(), target);
  }

  // optional uint32 duration_unit_smallest = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_duration_unit_smallest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.FormatStructArchive)
  return target;
}

size_t FormatStructArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.FormatStructArchive)
  size_t total_size = 0;

  // required uint32 format_type = 1;
  if (_internal_has_format_type()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_format_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string currency_code = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currency_code());
    }

    // optional string date_time_format = 14;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_date_time_format());
    }

  }
  if (cached_has_bits & 0x000000f8u) {
    // optional uint32 decimal_places = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_decimal_places());
    }

    // optional uint32 negative_style = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_negative_style());
    }

    // optional uint32 duration_style = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration_style());
    }

    // optional uint32 base = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_base());
    }

    // optional bool show_thousands_separator = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool use_accounting_style = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool base_use_minus_sign = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool suppress_date_format = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional uint32 base_places = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_base_places());
    }

    // optional uint32 fraction_accuracy = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fraction_accuracy());
    }

    // optional bool suppress_time_format = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional uint32 duration_unit_largest = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration_unit_largest());
    }

    // optional uint32 duration_unit_smallest = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_duration_unit_smallest());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormatStructArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormatStructArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormatStructArchive::GetClassData() const { return &_class_data_; }


void FormatStructArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormatStructArchive*>(&to_msg);
  auto& from = static_cast<const FormatStructArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.FormatStructArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_currency_code(from._internal_currency_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_date_time_format(from._internal_date_time_format());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.format_type_ = from._impl_.format_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.decimal_places_ = from._impl_.decimal_places_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.negative_style_ = from._impl_.negative_style_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.duration_style_ = from._impl_.duration_style_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.base_ = from._impl_.base_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.show_thousands_separator_ = from._impl_.show_thousands_separator_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.use_accounting_style_ = from._impl_.use_accounting_style_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.base_use_minus_sign_ = from._impl_.base_use_minus_sign_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.suppress_date_format_ = from._impl_.suppress_date_format_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.base_places_ = from._impl_.base_places_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.fraction_accuracy_ = from._impl_.fraction_accuracy_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.suppress_time_format_ = from._impl_.suppress_time_format_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.duration_unit_largest_ = from._impl_.duration_unit_largest_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.duration_unit_smallest_ = from._impl_.duration_unit_smallest_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormatStructArchive::CopyFrom(const FormatStructArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.FormatStructArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormatStructArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void FormatStructArchive::InternalSwap(FormatStructArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_code_, lhs_arena,
      &other->_impl_.currency_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.date_time_format_, lhs_arena,
      &other->_impl_.date_time_format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormatStructArchive, _impl_.duration_unit_smallest_)
      + sizeof(FormatStructArchive::_impl_.duration_unit_smallest_)
      - PROTOBUF_FIELD_OFFSET(FormatStructArchive, _impl_.format_type_)>(
          reinterpret_cast<char*>(&_impl_.format_type_),
          reinterpret_cast<char*>(&other->_impl_.format_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormatStructArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[38]);
}

// ===================================================================

class RangeCoordinateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RangeCoordinateArchive>()._impl_._has_bits_);
  static void set_has_top_left_column(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top_left_row(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bottom_right_column(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bottom_right_row(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

RangeCoordinateArchive::RangeCoordinateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RangeCoordinateArchive)
}
RangeCoordinateArchive::RangeCoordinateArchive(const RangeCoordinateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RangeCoordinateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.top_left_column_){}
    , decltype(_impl_.top_left_row_){}
    , decltype(_impl_.bottom_right_column_){}
    , decltype(_impl_.bottom_right_row_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.top_left_column_, &from._impl_.top_left_column_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bottom_right_row_) -
    reinterpret_cast<char*>(&_impl_.top_left_column_)) + sizeof(_impl_.bottom_right_row_));
  // @@protoc_insertion_point(copy_constructor:TSCE.RangeCoordinateArchive)
}

inline void RangeCoordinateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.top_left_column_){0u}
    , decltype(_impl_.top_left_row_){0u}
    , decltype(_impl_.bottom_right_column_){0u}
    , decltype(_impl_.bottom_right_row_){0u}
  };
}

RangeCoordinateArchive::~RangeCoordinateArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RangeCoordinateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RangeCoordinateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RangeCoordinateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RangeCoordinateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RangeCoordinateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.top_left_column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bottom_right_row_) -
        reinterpret_cast<char*>(&_impl_.top_left_column_)) + sizeof(_impl_.bottom_right_row_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeCoordinateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 top_left_column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_top_left_column(&has_bits);
          _impl_.top_left_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 top_left_row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_top_left_row(&has_bits);
          _impl_.top_left_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 bottom_right_column = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_bottom_right_column(&has_bits);
          _impl_.bottom_right_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 bottom_right_row = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_bottom_right_row(&has_bits);
          _impl_.bottom_right_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RangeCoordinateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RangeCoordinateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 top_left_column = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_top_left_column(), target);
  }

  // required uint32 top_left_row = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_top_left_row(), target);
  }

  // required uint32 bottom_right_column = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bottom_right_column(), target);
  }

  // required uint32 bottom_right_row = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bottom_right_row(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RangeCoordinateArchive)
  return target;
}

size_t RangeCoordinateArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.RangeCoordinateArchive)
  size_t total_size = 0;

  if (_internal_has_top_left_column()) {
    // required uint32 top_left_column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_top_left_column());
  }

  if (_internal_has_top_left_row()) {
    // required uint32 top_left_row = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_top_left_row());
  }

  if (_internal_has_bottom_right_column()) {
    // required uint32 bottom_right_column = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bottom_right_column());
  }

  if (_internal_has_bottom_right_row()) {
    // required uint32 bottom_right_row = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bottom_right_row());
  }

  return total_size;
}
size_t RangeCoordinateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RangeCoordinateArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 top_left_column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_top_left_column());

    // required uint32 top_left_row = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_top_left_row());

    // required uint32 bottom_right_column = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bottom_right_column());

    // required uint32 bottom_right_row = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bottom_right_row());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RangeCoordinateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RangeCoordinateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RangeCoordinateArchive::GetClassData() const { return &_class_data_; }


void RangeCoordinateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RangeCoordinateArchive*>(&to_msg);
  auto& from = static_cast<const RangeCoordinateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RangeCoordinateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.top_left_column_ = from._impl_.top_left_column_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.top_left_row_ = from._impl_.top_left_row_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bottom_right_column_ = from._impl_.bottom_right_column_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.bottom_right_row_ = from._impl_.bottom_right_row_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RangeCoordinateArchive::CopyFrom(const RangeCoordinateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RangeCoordinateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeCoordinateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RangeCoordinateArchive::InternalSwap(RangeCoordinateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RangeCoordinateArchive, _impl_.bottom_right_row_)
      + sizeof(RangeCoordinateArchive::_impl_.bottom_right_row_)
      - PROTOBUF_FIELD_OFFSET(RangeCoordinateArchive, _impl_.top_left_column_)>(
          reinterpret_cast<char*>(&_impl_.top_left_column_),
          reinterpret_cast<char*>(&other->_impl_.top_left_column_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeCoordinateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[39]);
}

// ===================================================================

class TectonicShiftArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TectonicShiftArchive>()._impl_._has_bits_);
  static void set_has_grid_coordinate_offset_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_grid_coordinate_offset_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_grid_coordinate_offset_x_is_negative(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_grid_coordinate_offset_y_is_negative(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSCE::RangeCoordinateArchive& range_for_shift(const TectonicShiftArchive* msg);
  static void set_has_range_for_shift(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::RangeCoordinateArchive& range_for_deletion(const TectonicShiftArchive* msg);
  static void set_has_range_for_deletion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::RangeCoordinateArchive& inserted_range(const TectonicShiftArchive* msg);
  static void set_has_inserted_range(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_apply_to_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_inserting_after(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ignore_sticky_bits(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSCE::RangeCoordinateArchive& table_range(const TectonicShiftArchive* msg);
  static void set_has_table_range(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::CFUUIDArchive& table_id(const TectonicShiftArchive* msg);
  static void set_has_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000fe0) ^ 0x00000fe0) != 0;
  }
};

const ::TSCE::RangeCoordinateArchive&
TectonicShiftArchive::_Internal::range_for_shift(const TectonicShiftArchive* msg) {
  return *msg->_impl_.range_for_shift_;
}
const ::TSCE::RangeCoordinateArchive&
TectonicShiftArchive::_Internal::range_for_deletion(const TectonicShiftArchive* msg) {
  return *msg->_impl_.range_for_deletion_;
}
const ::TSCE::RangeCoordinateArchive&
TectonicShiftArchive::_Internal::inserted_range(const TectonicShiftArchive* msg) {
  return *msg->_impl_.inserted_range_;
}
const ::TSCE::RangeCoordinateArchive&
TectonicShiftArchive::_Internal::table_range(const TectonicShiftArchive* msg) {
  return *msg->_impl_.table_range_;
}
const ::TSCE::CFUUIDArchive&
TectonicShiftArchive::_Internal::table_id(const TectonicShiftArchive* msg) {
  return *msg->_impl_.table_id_;
}
TectonicShiftArchive::TectonicShiftArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.TectonicShiftArchive)
}
TectonicShiftArchive::TectonicShiftArchive(const TectonicShiftArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TectonicShiftArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_for_shift_){nullptr}
    , decltype(_impl_.range_for_deletion_){nullptr}
    , decltype(_impl_.inserted_range_){nullptr}
    , decltype(_impl_.table_range_){nullptr}
    , decltype(_impl_.table_id_){nullptr}
    , decltype(_impl_.grid_coordinate_offset_x_){}
    , decltype(_impl_.grid_coordinate_offset_y_){}
    , decltype(_impl_.grid_coordinate_offset_x_is_negative_){}
    , decltype(_impl_.grid_coordinate_offset_y_is_negative_){}
    , decltype(_impl_.apply_to_absolute_){}
    , decltype(_impl_.inserting_after_){}
    , decltype(_impl_.ignore_sticky_bits_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_range_for_shift()) {
    _this->_impl_.range_for_shift_ = new ::TSCE::RangeCoordinateArchive(*from._impl_.range_for_shift_);
  }
  if (from._internal_has_range_for_deletion()) {
    _this->_impl_.range_for_deletion_ = new ::TSCE::RangeCoordinateArchive(*from._impl_.range_for_deletion_);
  }
  if (from._internal_has_inserted_range()) {
    _this->_impl_.inserted_range_ = new ::TSCE::RangeCoordinateArchive(*from._impl_.inserted_range_);
  }
  if (from._internal_has_table_range()) {
    _this->_impl_.table_range_ = new ::TSCE::RangeCoordinateArchive(*from._impl_.table_range_);
  }
  if (from._internal_has_table_id()) {
    _this->_impl_.table_id_ = new ::TSCE::CFUUIDArchive(*from._impl_.table_id_);
  }
  ::memcpy(&_impl_.grid_coordinate_offset_x_, &from._impl_.grid_coordinate_offset_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ignore_sticky_bits_) -
    reinterpret_cast<char*>(&_impl_.grid_coordinate_offset_x_)) + sizeof(_impl_.ignore_sticky_bits_));
  // @@protoc_insertion_point(copy_constructor:TSCE.TectonicShiftArchive)
}

inline void TectonicShiftArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_for_shift_){nullptr}
    , decltype(_impl_.range_for_deletion_){nullptr}
    , decltype(_impl_.inserted_range_){nullptr}
    , decltype(_impl_.table_range_){nullptr}
    , decltype(_impl_.table_id_){nullptr}
    , decltype(_impl_.grid_coordinate_offset_x_){0u}
    , decltype(_impl_.grid_coordinate_offset_y_){0u}
    , decltype(_impl_.grid_coordinate_offset_x_is_negative_){false}
    , decltype(_impl_.grid_coordinate_offset_y_is_negative_){false}
    , decltype(_impl_.apply_to_absolute_){false}
    , decltype(_impl_.inserting_after_){false}
    , decltype(_impl_.ignore_sticky_bits_){false}
  };
}

TectonicShiftArchive::~TectonicShiftArchive() {
  // @@protoc_insertion_point(destructor:TSCE.TectonicShiftArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TectonicShiftArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.range_for_shift_;
  if (this != internal_default_instance()) delete _impl_.range_for_deletion_;
  if (this != internal_default_instance()) delete _impl_.inserted_range_;
  if (this != internal_default_instance()) delete _impl_.table_range_;
  if (this != internal_default_instance()) delete _impl_.table_id_;
}

void TectonicShiftArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TectonicShiftArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.TectonicShiftArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.range_for_shift_ != nullptr);
      _impl_.range_for_shift_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.range_for_deletion_ != nullptr);
      _impl_.range_for_deletion_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.inserted_range_ != nullptr);
      _impl_.inserted_range_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.table_range_ != nullptr);
      _impl_.table_range_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.table_id_ != nullptr);
      _impl_.table_id_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.grid_coordinate_offset_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.grid_coordinate_offset_x_is_negative_) -
        reinterpret_cast<char*>(&_impl_.grid_coordinate_offset_x_)) + sizeof(_impl_.grid_coordinate_offset_x_is_negative_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.grid_coordinate_offset_y_is_negative_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ignore_sticky_bits_) -
        reinterpret_cast<char*>(&_impl_.grid_coordinate_offset_y_is_negative_)) + sizeof(_impl_.ignore_sticky_bits_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TectonicShiftArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 grid_coordinate_offset_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_grid_coordinate_offset_x(&has_bits);
          _impl_.grid_coordinate_offset_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 grid_coordinate_offset_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_grid_coordinate_offset_y(&has_bits);
          _impl_.grid_coordinate_offset_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool grid_coordinate_offset_x_is_negative = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_grid_coordinate_offset_x_is_negative(&has_bits);
          _impl_.grid_coordinate_offset_x_is_negative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool grid_coordinate_offset_y_is_negative = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_grid_coordinate_offset_y_is_negative(&has_bits);
          _impl_.grid_coordinate_offset_y_is_negative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RangeCoordinateArchive range_for_shift = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_range_for_shift(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RangeCoordinateArchive range_for_deletion = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_range_for_deletion(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RangeCoordinateArchive inserted_range = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_inserted_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool apply_to_absolute = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_apply_to_absolute(&has_bits);
          _impl_.apply_to_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool inserting_after = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_inserting_after(&has_bits);
          _impl_.inserting_after_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool ignore_sticky_bits = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_ignore_sticky_bits(&has_bits);
          _impl_.ignore_sticky_bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RangeCoordinateArchive table_range = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CFUUIDArchive table_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TectonicShiftArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.TectonicShiftArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 grid_coordinate_offset_x = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_grid_coordinate_offset_x(), target);
  }

  // required uint32 grid_coordinate_offset_y = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_grid_coordinate_offset_y(), target);
  }

  // required bool grid_coordinate_offset_x_is_negative = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_grid_coordinate_offset_x_is_negative(), target);
  }

  // required bool grid_coordinate_offset_y_is_negative = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_grid_coordinate_offset_y_is_negative(), target);
  }

  // optional .TSCE.RangeCoordinateArchive range_for_shift = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::range_for_shift(this),
        _Internal::range_for_shift(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.RangeCoordinateArchive range_for_deletion = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::range_for_deletion(this),
        _Internal::range_for_deletion(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.RangeCoordinateArchive inserted_range = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::inserted_range(this),
        _Internal::inserted_range(this).GetCachedSize(), target, stream);
  }

  // required bool apply_to_absolute = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_apply_to_absolute(), target);
  }

  // required bool inserting_after = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_inserting_after(), target);
  }

  // required bool ignore_sticky_bits = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_ignore_sticky_bits(), target);
  }

  // optional .TSCE.RangeCoordinateArchive table_range = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::table_range(this),
        _Internal::table_range(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CFUUIDArchive table_id = 12;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::table_id(this),
        _Internal::table_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.TectonicShiftArchive)
  return target;
}

size_t TectonicShiftArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.TectonicShiftArchive)
  size_t total_size = 0;

  if (_internal_has_grid_coordinate_offset_x()) {
    // required uint32 grid_coordinate_offset_x = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_grid_coordinate_offset_x());
  }

  if (_internal_has_grid_coordinate_offset_y()) {
    // required uint32 grid_coordinate_offset_y = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_grid_coordinate_offset_y());
  }

  if (_internal_has_grid_coordinate_offset_x_is_negative()) {
    // required bool grid_coordinate_offset_x_is_negative = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_grid_coordinate_offset_y_is_negative()) {
    // required bool grid_coordinate_offset_y_is_negative = 4;
    total_size += 1 + 1;
  }

  if (_internal_has_apply_to_absolute()) {
    // required bool apply_to_absolute = 8;
    total_size += 1 + 1;
  }

  if (_internal_has_inserting_after()) {
    // required bool inserting_after = 9;
    total_size += 1 + 1;
  }

  if (_internal_has_ignore_sticky_bits()) {
    // required bool ignore_sticky_bits = 10;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t TectonicShiftArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.TectonicShiftArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000fe0) ^ 0x00000fe0) == 0) {  // All required fields are present.
    // required uint32 grid_coordinate_offset_x = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_grid_coordinate_offset_x());

    // required uint32 grid_coordinate_offset_y = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_grid_coordinate_offset_y());

    // required bool grid_coordinate_offset_x_is_negative = 3;
    total_size += 1 + 1;

    // required bool grid_coordinate_offset_y_is_negative = 4;
    total_size += 1 + 1;

    // required bool apply_to_absolute = 8;
    total_size += 1 + 1;

    // required bool inserting_after = 9;
    total_size += 1 + 1;

    // required bool ignore_sticky_bits = 10;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSCE.RangeCoordinateArchive range_for_shift = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.range_for_shift_);
    }

    // optional .TSCE.RangeCoordinateArchive range_for_deletion = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.range_for_deletion_);
    }

    // optional .TSCE.RangeCoordinateArchive inserted_range = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.inserted_range_);
    }

    // optional .TSCE.RangeCoordinateArchive table_range = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_range_);
    }

    // optional .TSCE.CFUUIDArchive table_id = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_id_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TectonicShiftArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TectonicShiftArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TectonicShiftArchive::GetClassData() const { return &_class_data_; }


void TectonicShiftArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TectonicShiftArchive*>(&to_msg);
  auto& from = static_cast<const TectonicShiftArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.TectonicShiftArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_range_for_shift()->::TSCE::RangeCoordinateArchive::MergeFrom(
          from._internal_range_for_shift());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_range_for_deletion()->::TSCE::RangeCoordinateArchive::MergeFrom(
          from._internal_range_for_deletion());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_inserted_range()->::TSCE::RangeCoordinateArchive::MergeFrom(
          from._internal_inserted_range());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_table_range()->::TSCE::RangeCoordinateArchive::MergeFrom(
          from._internal_table_range());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_table_id()->::TSCE::CFUUIDArchive::MergeFrom(
          from._internal_table_id());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.grid_coordinate_offset_x_ = from._impl_.grid_coordinate_offset_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.grid_coordinate_offset_y_ = from._impl_.grid_coordinate_offset_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.grid_coordinate_offset_x_is_negative_ = from._impl_.grid_coordinate_offset_x_is_negative_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.grid_coordinate_offset_y_is_negative_ = from._impl_.grid_coordinate_offset_y_is_negative_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.apply_to_absolute_ = from._impl_.apply_to_absolute_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.inserting_after_ = from._impl_.inserting_after_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.ignore_sticky_bits_ = from._impl_.ignore_sticky_bits_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TectonicShiftArchive::CopyFrom(const TectonicShiftArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.TectonicShiftArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TectonicShiftArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_range_for_shift()) {
    if (!_impl_.range_for_shift_->IsInitialized()) return false;
  }
  if (_internal_has_range_for_deletion()) {
    if (!_impl_.range_for_deletion_->IsInitialized()) return false;
  }
  if (_internal_has_inserted_range()) {
    if (!_impl_.inserted_range_->IsInitialized()) return false;
  }
  if (_internal_has_table_range()) {
    if (!_impl_.table_range_->IsInitialized()) return false;
  }
  return true;
}

void TectonicShiftArchive::InternalSwap(TectonicShiftArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TectonicShiftArchive, _impl_.ignore_sticky_bits_)
      + sizeof(TectonicShiftArchive::_impl_.ignore_sticky_bits_)
      - PROTOBUF_FIELD_OFFSET(TectonicShiftArchive, _impl_.range_for_shift_)>(
          reinterpret_cast<char*>(&_impl_.range_for_shift_),
          reinterpret_cast<char*>(&other->_impl_.range_for_shift_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TectonicShiftArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[40]);
}

// ===================================================================

class RewriteSortMappingArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RewriteSortMappingArchive>()._impl_._has_bits_);
  static const ::TSCE::CFUUIDArchive& table_id(const RewriteSortMappingArchive* msg);
  static void set_has_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSK::ShuffleMappingArchive& shuffle_mapping(const RewriteSortMappingArchive* msg);
  static void set_has_shuffle_mapping(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_explode_ranges(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSCE::CFUUIDArchive&
RewriteSortMappingArchive::_Internal::table_id(const RewriteSortMappingArchive* msg) {
  return *msg->_impl_.table_id_;
}
const ::TSK::ShuffleMappingArchive&
RewriteSortMappingArchive::_Internal::shuffle_mapping(const RewriteSortMappingArchive* msg) {
  return *msg->_impl_.shuffle_mapping_;
}
void RewriteSortMappingArchive::clear_shuffle_mapping() {
  if (_impl_.shuffle_mapping_ != nullptr) _impl_.shuffle_mapping_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
RewriteSortMappingArchive::RewriteSortMappingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RewriteSortMappingArchive)
}
RewriteSortMappingArchive::RewriteSortMappingArchive(const RewriteSortMappingArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RewriteSortMappingArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_id_){nullptr}
    , decltype(_impl_.shuffle_mapping_){nullptr}
    , decltype(_impl_.explode_ranges_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_id()) {
    _this->_impl_.table_id_ = new ::TSCE::CFUUIDArchive(*from._impl_.table_id_);
  }
  if (from._internal_has_shuffle_mapping()) {
    _this->_impl_.shuffle_mapping_ = new ::TSK::ShuffleMappingArchive(*from._impl_.shuffle_mapping_);
  }
  _this->_impl_.explode_ranges_ = from._impl_.explode_ranges_;
  // @@protoc_insertion_point(copy_constructor:TSCE.RewriteSortMappingArchive)
}

inline void RewriteSortMappingArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_id_){nullptr}
    , decltype(_impl_.shuffle_mapping_){nullptr}
    , decltype(_impl_.explode_ranges_){false}
  };
}

RewriteSortMappingArchive::~RewriteSortMappingArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RewriteSortMappingArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RewriteSortMappingArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.table_id_;
  if (this != internal_default_instance()) delete _impl_.shuffle_mapping_;
}

void RewriteSortMappingArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RewriteSortMappingArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RewriteSortMappingArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.table_id_ != nullptr);
      _impl_.table_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.shuffle_mapping_ != nullptr);
      _impl_.shuffle_mapping_->Clear();
    }
  }
  _impl_.explode_ranges_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RewriteSortMappingArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CFUUIDArchive table_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSK.ShuffleMappingArchive shuffle_mapping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shuffle_mapping(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool explode_ranges = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_explode_ranges(&has_bits);
          _impl_.explode_ranges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RewriteSortMappingArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RewriteSortMappingArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.CFUUIDArchive table_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::table_id(this),
        _Internal::table_id(this).GetCachedSize(), target, stream);
  }

  // required .TSK.ShuffleMappingArchive shuffle_mapping = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::shuffle_mapping(this),
        _Internal::shuffle_mapping(this).GetCachedSize(), target, stream);
  }

  // required bool explode_ranges = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_explode_ranges(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RewriteSortMappingArchive)
  return target;
}

size_t RewriteSortMappingArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.RewriteSortMappingArchive)
  size_t total_size = 0;

  if (_internal_has_table_id()) {
    // required .TSCE.CFUUIDArchive table_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_id_);
  }

  if (_internal_has_shuffle_mapping()) {
    // required .TSK.ShuffleMappingArchive shuffle_mapping = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shuffle_mapping_);
  }

  if (_internal_has_explode_ranges()) {
    // required bool explode_ranges = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t RewriteSortMappingArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RewriteSortMappingArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSCE.CFUUIDArchive table_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_id_);

    // required .TSK.ShuffleMappingArchive shuffle_mapping = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shuffle_mapping_);

    // required bool explode_ranges = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RewriteSortMappingArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RewriteSortMappingArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RewriteSortMappingArchive::GetClassData() const { return &_class_data_; }


void RewriteSortMappingArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RewriteSortMappingArchive*>(&to_msg);
  auto& from = static_cast<const RewriteSortMappingArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RewriteSortMappingArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_table_id()->::TSCE::CFUUIDArchive::MergeFrom(
          from._internal_table_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_shuffle_mapping()->::TSK::ShuffleMappingArchive::MergeFrom(
          from._internal_shuffle_mapping());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.explode_ranges_ = from._impl_.explode_ranges_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RewriteSortMappingArchive::CopyFrom(const RewriteSortMappingArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RewriteSortMappingArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewriteSortMappingArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_shuffle_mapping()) {
    if (!_impl_.shuffle_mapping_->IsInitialized()) return false;
  }
  return true;
}

void RewriteSortMappingArchive::InternalSwap(RewriteSortMappingArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RewriteSortMappingArchive, _impl_.explode_ranges_)
      + sizeof(RewriteSortMappingArchive::_impl_.explode_ranges_)
      - PROTOBUF_FIELD_OFFSET(RewriteSortMappingArchive, _impl_.table_id_)>(
          reinterpret_cast<char*>(&_impl_.table_id_),
          reinterpret_cast<char*>(&other->_impl_.table_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RewriteSortMappingArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[41]);
}

// ===================================================================

class RangeMovedInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RangeMovedInfoArchive>()._impl_._has_bits_);
  static const ::TSCE::CFUUIDArchive& table_id(const RangeMovedInfoArchive* msg);
  static void set_has_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::RangeCoordinateArchive& from_range(const RangeMovedInfoArchive* msg);
  static void set_has_from_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::RangeCoordinateArchive& to_range(const RangeMovedInfoArchive* msg);
  static void set_has_to_range(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::RangeReferenceArchive& from_range_reference(const RangeMovedInfoArchive* msg);
  static void set_has_from_range_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::RangeReferenceArchive& to_range_reference(const RangeMovedInfoArchive* msg);
  static void set_has_to_range_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TSCE::CFUUIDArchive&
RangeMovedInfoArchive::_Internal::table_id(const RangeMovedInfoArchive* msg) {
  return *msg->_impl_.table_id_;
}
const ::TSCE::RangeCoordinateArchive&
RangeMovedInfoArchive::_Internal::from_range(const RangeMovedInfoArchive* msg) {
  return *msg->_impl_.from_range_;
}
const ::TSCE::RangeCoordinateArchive&
RangeMovedInfoArchive::_Internal::to_range(const RangeMovedInfoArchive* msg) {
  return *msg->_impl_.to_range_;
}
const ::TSCE::RangeReferenceArchive&
RangeMovedInfoArchive::_Internal::from_range_reference(const RangeMovedInfoArchive* msg) {
  return *msg->_impl_.from_range_reference_;
}
const ::TSCE::RangeReferenceArchive&
RangeMovedInfoArchive::_Internal::to_range_reference(const RangeMovedInfoArchive* msg) {
  return *msg->_impl_.to_range_reference_;
}
RangeMovedInfoArchive::RangeMovedInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RangeMovedInfoArchive)
}
RangeMovedInfoArchive::RangeMovedInfoArchive(const RangeMovedInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RangeMovedInfoArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_id_){nullptr}
    , decltype(_impl_.from_range_){nullptr}
    , decltype(_impl_.to_range_){nullptr}
    , decltype(_impl_.from_range_reference_){nullptr}
    , decltype(_impl_.to_range_reference_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_id()) {
    _this->_impl_.table_id_ = new ::TSCE::CFUUIDArchive(*from._impl_.table_id_);
  }
  if (from._internal_has_from_range()) {
    _this->_impl_.from_range_ = new ::TSCE::RangeCoordinateArchive(*from._impl_.from_range_);
  }
  if (from._internal_has_to_range()) {
    _this->_impl_.to_range_ = new ::TSCE::RangeCoordinateArchive(*from._impl_.to_range_);
  }
  if (from._internal_has_from_range_reference()) {
    _this->_impl_.from_range_reference_ = new ::TSCE::RangeReferenceArchive(*from._impl_.from_range_reference_);
  }
  if (from._internal_has_to_range_reference()) {
    _this->_impl_.to_range_reference_ = new ::TSCE::RangeReferenceArchive(*from._impl_.to_range_reference_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.RangeMovedInfoArchive)
}

inline void RangeMovedInfoArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_id_){nullptr}
    , decltype(_impl_.from_range_){nullptr}
    , decltype(_impl_.to_range_){nullptr}
    , decltype(_impl_.from_range_reference_){nullptr}
    , decltype(_impl_.to_range_reference_){nullptr}
  };
}

RangeMovedInfoArchive::~RangeMovedInfoArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RangeMovedInfoArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RangeMovedInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.table_id_;
  if (this != internal_default_instance()) delete _impl_.from_range_;
  if (this != internal_default_instance()) delete _impl_.to_range_;
  if (this != internal_default_instance()) delete _impl_.from_range_reference_;
  if (this != internal_default_instance()) delete _impl_.to_range_reference_;
}

void RangeMovedInfoArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RangeMovedInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RangeMovedInfoArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.table_id_ != nullptr);
      _impl_.table_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.from_range_ != nullptr);
      _impl_.from_range_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.to_range_ != nullptr);
      _impl_.to_range_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.from_range_reference_ != nullptr);
      _impl_.from_range_reference_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.to_range_reference_ != nullptr);
      _impl_.to_range_reference_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeMovedInfoArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCE.CFUUIDArchive table_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RangeCoordinateArchive from_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RangeCoordinateArchive to_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_to_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RangeReferenceArchive from_range_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_from_range_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RangeReferenceArchive to_range_reference = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_to_range_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RangeMovedInfoArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RangeMovedInfoArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCE.CFUUIDArchive table_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::table_id(this),
        _Internal::table_id(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.RangeCoordinateArchive from_range = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::from_range(this),
        _Internal::from_range(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.RangeCoordinateArchive to_range = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::to_range(this),
        _Internal::to_range(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.RangeReferenceArchive from_range_reference = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::from_range_reference(this),
        _Internal::from_range_reference(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.RangeReferenceArchive to_range_reference = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::to_range_reference(this),
        _Internal::to_range_reference(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RangeMovedInfoArchive)
  return target;
}

size_t RangeMovedInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RangeMovedInfoArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSCE.CFUUIDArchive table_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_id_);
    }

    // optional .TSCE.RangeCoordinateArchive from_range = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.from_range_);
    }

    // optional .TSCE.RangeCoordinateArchive to_range = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.to_range_);
    }

    // optional .TSCE.RangeReferenceArchive from_range_reference = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.from_range_reference_);
    }

    // optional .TSCE.RangeReferenceArchive to_range_reference = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.to_range_reference_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RangeMovedInfoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RangeMovedInfoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RangeMovedInfoArchive::GetClassData() const { return &_class_data_; }


void RangeMovedInfoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RangeMovedInfoArchive*>(&to_msg);
  auto& from = static_cast<const RangeMovedInfoArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RangeMovedInfoArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_table_id()->::TSCE::CFUUIDArchive::MergeFrom(
          from._internal_table_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_from_range()->::TSCE::RangeCoordinateArchive::MergeFrom(
          from._internal_from_range());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_to_range()->::TSCE::RangeCoordinateArchive::MergeFrom(
          from._internal_to_range());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_from_range_reference()->::TSCE::RangeReferenceArchive::MergeFrom(
          from._internal_from_range_reference());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_to_range_reference()->::TSCE::RangeReferenceArchive::MergeFrom(
          from._internal_to_range_reference());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RangeMovedInfoArchive::CopyFrom(const RangeMovedInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RangeMovedInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeMovedInfoArchive::IsInitialized() const {
  if (_internal_has_from_range()) {
    if (!_impl_.from_range_->IsInitialized()) return false;
  }
  if (_internal_has_to_range()) {
    if (!_impl_.to_range_->IsInitialized()) return false;
  }
  if (_internal_has_from_range_reference()) {
    if (!_impl_.from_range_reference_->IsInitialized()) return false;
  }
  if (_internal_has_to_range_reference()) {
    if (!_impl_.to_range_reference_->IsInitialized()) return false;
  }
  return true;
}

void RangeMovedInfoArchive::InternalSwap(RangeMovedInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RangeMovedInfoArchive, _impl_.to_range_reference_)
      + sizeof(RangeMovedInfoArchive::_impl_.to_range_reference_)
      - PROTOBUF_FIELD_OFFSET(RangeMovedInfoArchive, _impl_.table_id_)>(
          reinterpret_cast<char*>(&_impl_.table_id_),
          reinterpret_cast<char*>(&other->_impl_.table_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeMovedInfoArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[42]);
}

// ===================================================================

class TableResizedInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableResizedInfoArchive>()._impl_._has_bits_);
  static const ::TSCE::CFUUIDArchive& table_id(const TableResizedInfoArchive* msg);
  static void set_has_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::RangeCoordinateArchive& new_table_size(const TableResizedInfoArchive* msg);
  static void set_has_new_table_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::RangeCoordinateArchive& old_table_size(const TableResizedInfoArchive* msg);
  static void set_has_old_table_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::CFUUIDArchive&
TableResizedInfoArchive::_Internal::table_id(const TableResizedInfoArchive* msg) {
  return *msg->_impl_.table_id_;
}
const ::TSCE::RangeCoordinateArchive&
TableResizedInfoArchive::_Internal::new_table_size(const TableResizedInfoArchive* msg) {
  return *msg->_impl_.new_table_size_;
}
const ::TSCE::RangeCoordinateArchive&
TableResizedInfoArchive::_Internal::old_table_size(const TableResizedInfoArchive* msg) {
  return *msg->_impl_.old_table_size_;
}
TableResizedInfoArchive::TableResizedInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.TableResizedInfoArchive)
}
TableResizedInfoArchive::TableResizedInfoArchive(const TableResizedInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableResizedInfoArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_id_){nullptr}
    , decltype(_impl_.new_table_size_){nullptr}
    , decltype(_impl_.old_table_size_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_id()) {
    _this->_impl_.table_id_ = new ::TSCE::CFUUIDArchive(*from._impl_.table_id_);
  }
  if (from._internal_has_new_table_size()) {
    _this->_impl_.new_table_size_ = new ::TSCE::RangeCoordinateArchive(*from._impl_.new_table_size_);
  }
  if (from._internal_has_old_table_size()) {
    _this->_impl_.old_table_size_ = new ::TSCE::RangeCoordinateArchive(*from._impl_.old_table_size_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.TableResizedInfoArchive)
}

inline void TableResizedInfoArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_id_){nullptr}
    , decltype(_impl_.new_table_size_){nullptr}
    , decltype(_impl_.old_table_size_){nullptr}
  };
}

TableResizedInfoArchive::~TableResizedInfoArchive() {
  // @@protoc_insertion_point(destructor:TSCE.TableResizedInfoArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableResizedInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.table_id_;
  if (this != internal_default_instance()) delete _impl_.new_table_size_;
  if (this != internal_default_instance()) delete _impl_.old_table_size_;
}

void TableResizedInfoArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableResizedInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.TableResizedInfoArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.table_id_ != nullptr);
      _impl_.table_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.new_table_size_ != nullptr);
      _impl_.new_table_size_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.old_table_size_ != nullptr);
      _impl_.old_table_size_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableResizedInfoArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CFUUIDArchive table_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.RangeCoordinateArchive new_table_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_table_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RangeCoordinateArchive old_table_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_table_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableResizedInfoArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.TableResizedInfoArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.CFUUIDArchive table_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::table_id(this),
        _Internal::table_id(this).GetCachedSize(), target, stream);
  }

  // required .TSCE.RangeCoordinateArchive new_table_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::new_table_size(this),
        _Internal::new_table_size(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.RangeCoordinateArchive old_table_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::old_table_size(this),
        _Internal::old_table_size(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.TableResizedInfoArchive)
  return target;
}

size_t TableResizedInfoArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.TableResizedInfoArchive)
  size_t total_size = 0;

  if (_internal_has_table_id()) {
    // required .TSCE.CFUUIDArchive table_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_id_);
  }

  if (_internal_has_new_table_size()) {
    // required .TSCE.RangeCoordinateArchive new_table_size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_table_size_);
  }

  return total_size;
}
size_t TableResizedInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.TableResizedInfoArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.CFUUIDArchive table_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_id_);

    // required .TSCE.RangeCoordinateArchive new_table_size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_table_size_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSCE.RangeCoordinateArchive old_table_size = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_table_size_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableResizedInfoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableResizedInfoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableResizedInfoArchive::GetClassData() const { return &_class_data_; }


void TableResizedInfoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableResizedInfoArchive*>(&to_msg);
  auto& from = static_cast<const TableResizedInfoArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.TableResizedInfoArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_table_id()->::TSCE::CFUUIDArchive::MergeFrom(
          from._internal_table_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_new_table_size()->::TSCE::RangeCoordinateArchive::MergeFrom(
          from._internal_new_table_size());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_old_table_size()->::TSCE::RangeCoordinateArchive::MergeFrom(
          from._internal_old_table_size());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableResizedInfoArchive::CopyFrom(const TableResizedInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.TableResizedInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableResizedInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_new_table_size()) {
    if (!_impl_.new_table_size_->IsInitialized()) return false;
  }
  if (_internal_has_old_table_size()) {
    if (!_impl_.old_table_size_->IsInitialized()) return false;
  }
  return true;
}

void TableResizedInfoArchive::InternalSwap(TableResizedInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableResizedInfoArchive, _impl_.old_table_size_)
      + sizeof(TableResizedInfoArchive::_impl_.old_table_size_)
      - PROTOBUF_FIELD_OFFSET(TableResizedInfoArchive, _impl_.table_id_)>(
          reinterpret_cast<char*>(&_impl_.table_id_),
          reinterpret_cast<char*>(&other->_impl_.table_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableResizedInfoArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[43]);
}

// ===================================================================

class CellMergeInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellMergeInfoArchive>()._impl_._has_bits_);
  static const ::TSCE::CFUUIDArchive& table_id(const CellMergeInfoArchive* msg);
  static void set_has_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::RangeCoordinateArchive& merged_range(const CellMergeInfoArchive* msg);
  static void set_has_merged_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::CFUUIDArchive&
CellMergeInfoArchive::_Internal::table_id(const CellMergeInfoArchive* msg) {
  return *msg->_impl_.table_id_;
}
const ::TSCE::RangeCoordinateArchive&
CellMergeInfoArchive::_Internal::merged_range(const CellMergeInfoArchive* msg) {
  return *msg->_impl_.merged_range_;
}
CellMergeInfoArchive::CellMergeInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellMergeInfoArchive)
}
CellMergeInfoArchive::CellMergeInfoArchive(const CellMergeInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellMergeInfoArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_id_){nullptr}
    , decltype(_impl_.merged_range_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_id()) {
    _this->_impl_.table_id_ = new ::TSCE::CFUUIDArchive(*from._impl_.table_id_);
  }
  if (from._internal_has_merged_range()) {
    _this->_impl_.merged_range_ = new ::TSCE::RangeCoordinateArchive(*from._impl_.merged_range_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.CellMergeInfoArchive)
}

inline void CellMergeInfoArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_id_){nullptr}
    , decltype(_impl_.merged_range_){nullptr}
  };
}

CellMergeInfoArchive::~CellMergeInfoArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellMergeInfoArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellMergeInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.table_id_;
  if (this != internal_default_instance()) delete _impl_.merged_range_;
}

void CellMergeInfoArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellMergeInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellMergeInfoArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.table_id_ != nullptr);
      _impl_.table_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.merged_range_ != nullptr);
      _impl_.merged_range_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellMergeInfoArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CFUUIDArchive table_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.RangeCoordinateArchive merged_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_merged_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellMergeInfoArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellMergeInfoArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.CFUUIDArchive table_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::table_id(this),
        _Internal::table_id(this).GetCachedSize(), target, stream);
  }

  // required .TSCE.RangeCoordinateArchive merged_range = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::merged_range(this),
        _Internal::merged_range(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellMergeInfoArchive)
  return target;
}

size_t CellMergeInfoArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.CellMergeInfoArchive)
  size_t total_size = 0;

  if (_internal_has_table_id()) {
    // required .TSCE.CFUUIDArchive table_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_id_);
  }

  if (_internal_has_merged_range()) {
    // required .TSCE.RangeCoordinateArchive merged_range = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.merged_range_);
  }

  return total_size;
}
size_t CellMergeInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellMergeInfoArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.CFUUIDArchive table_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_id_);

    // required .TSCE.RangeCoordinateArchive merged_range = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.merged_range_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellMergeInfoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellMergeInfoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellMergeInfoArchive::GetClassData() const { return &_class_data_; }


void CellMergeInfoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellMergeInfoArchive*>(&to_msg);
  auto& from = static_cast<const CellMergeInfoArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellMergeInfoArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_table_id()->::TSCE::CFUUIDArchive::MergeFrom(
          from._internal_table_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_merged_range()->::TSCE::RangeCoordinateArchive::MergeFrom(
          from._internal_merged_range());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellMergeInfoArchive::CopyFrom(const CellMergeInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellMergeInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellMergeInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_merged_range()) {
    if (!_impl_.merged_range_->IsInitialized()) return false;
  }
  return true;
}

void CellMergeInfoArchive::InternalSwap(CellMergeInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellMergeInfoArchive, _impl_.merged_range_)
      + sizeof(CellMergeInfoArchive::_impl_.merged_range_)
      - PROTOBUF_FIELD_OFFSET(CellMergeInfoArchive, _impl_.table_id_)>(
          reinterpret_cast<char*>(&_impl_.table_id_),
          reinterpret_cast<char*>(&other->_impl_.table_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellMergeInfoArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[44]);
}

// ===================================================================

class FormulaRewriteSpecArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaRewriteSpecArchive>()._impl_._has_bits_);
  static void set_has_rewrite_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSCE::TectonicShiftArchive& tectonic_shift(const FormulaRewriteSpecArchive* msg);
  static void set_has_tectonic_shift(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::RewriteSortMappingArchive& sort_mapping(const FormulaRewriteSpecArchive* msg);
  static void set_has_sort_mapping(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::RangeMovedInfoArchive& range_moved_info(const FormulaRewriteSpecArchive* msg);
  static void set_has_range_moved_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::CFUUIDArchive& deleted_owner_id(const FormulaRewriteSpecArchive* msg);
  static void set_has_deleted_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::TableResizedInfoArchive& table_resized_info(const FormulaRewriteSpecArchive* msg);
  static void set_has_table_resized_info(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCE::CellMergeInfoArchive& cell_merge_info(const FormulaRewriteSpecArchive* msg);
  static void set_has_cell_merge_info(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000040) ^ 0x00000040) != 0;
  }
};

const ::TSCE::TectonicShiftArchive&
FormulaRewriteSpecArchive::_Internal::tectonic_shift(const FormulaRewriteSpecArchive* msg) {
  return *msg->_impl_.tectonic_shift_;
}
const ::TSCE::RewriteSortMappingArchive&
FormulaRewriteSpecArchive::_Internal::sort_mapping(const FormulaRewriteSpecArchive* msg) {
  return *msg->_impl_.sort_mapping_;
}
const ::TSCE::RangeMovedInfoArchive&
FormulaRewriteSpecArchive::_Internal::range_moved_info(const FormulaRewriteSpecArchive* msg) {
  return *msg->_impl_.range_moved_info_;
}
const ::TSCE::CFUUIDArchive&
FormulaRewriteSpecArchive::_Internal::deleted_owner_id(const FormulaRewriteSpecArchive* msg) {
  return *msg->_impl_.deleted_owner_id_;
}
const ::TSCE::TableResizedInfoArchive&
FormulaRewriteSpecArchive::_Internal::table_resized_info(const FormulaRewriteSpecArchive* msg) {
  return *msg->_impl_.table_resized_info_;
}
const ::TSCE::CellMergeInfoArchive&
FormulaRewriteSpecArchive::_Internal::cell_merge_info(const FormulaRewriteSpecArchive* msg) {
  return *msg->_impl_.cell_merge_info_;
}
FormulaRewriteSpecArchive::FormulaRewriteSpecArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.FormulaRewriteSpecArchive)
}
FormulaRewriteSpecArchive::FormulaRewriteSpecArchive(const FormulaRewriteSpecArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormulaRewriteSpecArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tectonic_shift_){nullptr}
    , decltype(_impl_.sort_mapping_){nullptr}
    , decltype(_impl_.range_moved_info_){nullptr}
    , decltype(_impl_.deleted_owner_id_){nullptr}
    , decltype(_impl_.table_resized_info_){nullptr}
    , decltype(_impl_.cell_merge_info_){nullptr}
    , decltype(_impl_.rewrite_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tectonic_shift()) {
    _this->_impl_.tectonic_shift_ = new ::TSCE::TectonicShiftArchive(*from._impl_.tectonic_shift_);
  }
  if (from._internal_has_sort_mapping()) {
    _this->_impl_.sort_mapping_ = new ::TSCE::RewriteSortMappingArchive(*from._impl_.sort_mapping_);
  }
  if (from._internal_has_range_moved_info()) {
    _this->_impl_.range_moved_info_ = new ::TSCE::RangeMovedInfoArchive(*from._impl_.range_moved_info_);
  }
  if (from._internal_has_deleted_owner_id()) {
    _this->_impl_.deleted_owner_id_ = new ::TSCE::CFUUIDArchive(*from._impl_.deleted_owner_id_);
  }
  if (from._internal_has_table_resized_info()) {
    _this->_impl_.table_resized_info_ = new ::TSCE::TableResizedInfoArchive(*from._impl_.table_resized_info_);
  }
  if (from._internal_has_cell_merge_info()) {
    _this->_impl_.cell_merge_info_ = new ::TSCE::CellMergeInfoArchive(*from._impl_.cell_merge_info_);
  }
  _this->_impl_.rewrite_type_ = from._impl_.rewrite_type_;
  // @@protoc_insertion_point(copy_constructor:TSCE.FormulaRewriteSpecArchive)
}

inline void FormulaRewriteSpecArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tectonic_shift_){nullptr}
    , decltype(_impl_.sort_mapping_){nullptr}
    , decltype(_impl_.range_moved_info_){nullptr}
    , decltype(_impl_.deleted_owner_id_){nullptr}
    , decltype(_impl_.table_resized_info_){nullptr}
    , decltype(_impl_.cell_merge_info_){nullptr}
    , decltype(_impl_.rewrite_type_){1}
  };
}

FormulaRewriteSpecArchive::~FormulaRewriteSpecArchive() {
  // @@protoc_insertion_point(destructor:TSCE.FormulaRewriteSpecArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormulaRewriteSpecArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tectonic_shift_;
  if (this != internal_default_instance()) delete _impl_.sort_mapping_;
  if (this != internal_default_instance()) delete _impl_.range_moved_info_;
  if (this != internal_default_instance()) delete _impl_.deleted_owner_id_;
  if (this != internal_default_instance()) delete _impl_.table_resized_info_;
  if (this != internal_default_instance()) delete _impl_.cell_merge_info_;
}

void FormulaRewriteSpecArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormulaRewriteSpecArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.FormulaRewriteSpecArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.tectonic_shift_ != nullptr);
      _impl_.tectonic_shift_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.sort_mapping_ != nullptr);
      _impl_.sort_mapping_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.range_moved_info_ != nullptr);
      _impl_.range_moved_info_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.deleted_owner_id_ != nullptr);
      _impl_.deleted_owner_id_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.table_resized_info_ != nullptr);
      _impl_.table_resized_info_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.cell_merge_info_ != nullptr);
      _impl_.cell_merge_info_->Clear();
    }
    _impl_.rewrite_type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaRewriteSpecArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.FormulaRewriteSpecArchive.RewriteType rewrite_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCE::FormulaRewriteSpecArchive_RewriteType_IsValid(val))) {
            _internal_set_rewrite_type(static_cast<::TSCE::FormulaRewriteSpecArchive_RewriteType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.TectonicShiftArchive tectonic_shift = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tectonic_shift(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RewriteSortMappingArchive sort_mapping = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sort_mapping(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RangeMovedInfoArchive range_moved_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_range_moved_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CFUUIDArchive deleted_owner_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted_owner_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.TableResizedInfoArchive table_resized_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_resized_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellMergeInfoArchive cell_merge_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_merge_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormulaRewriteSpecArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.FormulaRewriteSpecArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.FormulaRewriteSpecArchive.RewriteType rewrite_type = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_rewrite_type(), target);
  }

  // optional .TSCE.TectonicShiftArchive tectonic_shift = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tectonic_shift(this),
        _Internal::tectonic_shift(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.RewriteSortMappingArchive sort_mapping = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::sort_mapping(this),
        _Internal::sort_mapping(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.RangeMovedInfoArchive range_moved_info = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::range_moved_info(this),
        _Internal::range_moved_info(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CFUUIDArchive deleted_owner_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::deleted_owner_id(this),
        _Internal::deleted_owner_id(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.TableResizedInfoArchive table_resized_info = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::table_resized_info(this),
        _Internal::table_resized_info(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CellMergeInfoArchive cell_merge_info = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::cell_merge_info(this),
        _Internal::cell_merge_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.FormulaRewriteSpecArchive)
  return target;
}

size_t FormulaRewriteSpecArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.FormulaRewriteSpecArchive)
  size_t total_size = 0;

  // required .TSCE.FormulaRewriteSpecArchive.RewriteType rewrite_type = 1;
  if (_internal_has_rewrite_type()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_rewrite_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .TSCE.TectonicShiftArchive tectonic_shift = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tectonic_shift_);
    }

    // optional .TSCE.RewriteSortMappingArchive sort_mapping = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sort_mapping_);
    }

    // optional .TSCE.RangeMovedInfoArchive range_moved_info = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.range_moved_info_);
    }

    // optional .TSCE.CFUUIDArchive deleted_owner_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deleted_owner_id_);
    }

    // optional .TSCE.TableResizedInfoArchive table_resized_info = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_resized_info_);
    }

    // optional .TSCE.CellMergeInfoArchive cell_merge_info = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_merge_info_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaRewriteSpecArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormulaRewriteSpecArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaRewriteSpecArchive::GetClassData() const { return &_class_data_; }


void FormulaRewriteSpecArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormulaRewriteSpecArchive*>(&to_msg);
  auto& from = static_cast<const FormulaRewriteSpecArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.FormulaRewriteSpecArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_tectonic_shift()->::TSCE::TectonicShiftArchive::MergeFrom(
          from._internal_tectonic_shift());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_sort_mapping()->::TSCE::RewriteSortMappingArchive::MergeFrom(
          from._internal_sort_mapping());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_range_moved_info()->::TSCE::RangeMovedInfoArchive::MergeFrom(
          from._internal_range_moved_info());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_deleted_owner_id()->::TSCE::CFUUIDArchive::MergeFrom(
          from._internal_deleted_owner_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_table_resized_info()->::TSCE::TableResizedInfoArchive::MergeFrom(
          from._internal_table_resized_info());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_cell_merge_info()->::TSCE::CellMergeInfoArchive::MergeFrom(
          from._internal_cell_merge_info());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.rewrite_type_ = from._impl_.rewrite_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaRewriteSpecArchive::CopyFrom(const FormulaRewriteSpecArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.FormulaRewriteSpecArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaRewriteSpecArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_tectonic_shift()) {
    if (!_impl_.tectonic_shift_->IsInitialized()) return false;
  }
  if (_internal_has_sort_mapping()) {
    if (!_impl_.sort_mapping_->IsInitialized()) return false;
  }
  if (_internal_has_range_moved_info()) {
    if (!_impl_.range_moved_info_->IsInitialized()) return false;
  }
  if (_internal_has_table_resized_info()) {
    if (!_impl_.table_resized_info_->IsInitialized()) return false;
  }
  if (_internal_has_cell_merge_info()) {
    if (!_impl_.cell_merge_info_->IsInitialized()) return false;
  }
  return true;
}

void FormulaRewriteSpecArchive::InternalSwap(FormulaRewriteSpecArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaRewriteSpecArchive, _impl_.cell_merge_info_)
      + sizeof(FormulaRewriteSpecArchive::_impl_.cell_merge_info_)
      - PROTOBUF_FIELD_OFFSET(FormulaRewriteSpecArchive, _impl_.tectonic_shift_)>(
          reinterpret_cast<char*>(&_impl_.tectonic_shift_),
          reinterpret_cast<char*>(&other->_impl_.tectonic_shift_));
  swap(_impl_.rewrite_type_, other->_impl_.rewrite_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaRewriteSpecArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[45]);
}

// ===================================================================

class CellCoordinateFormulaPairArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellCoordinateFormulaPairArchive>()._impl_._has_bits_);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::FormulaArchive& formula(const CellCoordinateFormulaPairArchive* msg);
  static void set_has_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::TSCE::FormulaArchive&
CellCoordinateFormulaPairArchive::_Internal::formula(const CellCoordinateFormulaPairArchive* msg) {
  return *msg->_impl_.formula_;
}
CellCoordinateFormulaPairArchive::CellCoordinateFormulaPairArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellCoordinateFormulaPairArchive)
}
CellCoordinateFormulaPairArchive::CellCoordinateFormulaPairArchive(const CellCoordinateFormulaPairArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellCoordinateFormulaPairArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.formula_){nullptr}
    , decltype(_impl_.column_){}
    , decltype(_impl_.row_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_formula()) {
    _this->_impl_.formula_ = new ::TSCE::FormulaArchive(*from._impl_.formula_);
  }
  ::memcpy(&_impl_.column_, &from._impl_.column_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.row_) -
    reinterpret_cast<char*>(&_impl_.column_)) + sizeof(_impl_.row_));
  // @@protoc_insertion_point(copy_constructor:TSCE.CellCoordinateFormulaPairArchive)
}

inline void CellCoordinateFormulaPairArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.formula_){nullptr}
    , decltype(_impl_.column_){0u}
    , decltype(_impl_.row_){0u}
  };
}

CellCoordinateFormulaPairArchive::~CellCoordinateFormulaPairArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellCoordinateFormulaPairArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellCoordinateFormulaPairArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.formula_;
}

void CellCoordinateFormulaPairArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellCoordinateFormulaPairArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellCoordinateFormulaPairArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.formula_ != nullptr);
    _impl_.formula_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.row_) -
        reinterpret_cast<char*>(&_impl_.column_)) + sizeof(_impl_.row_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellCoordinateFormulaPairArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_column(&has_bits);
          _impl_.column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_row(&has_bits);
          _impl_.row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.FormulaArchive formula = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellCoordinateFormulaPairArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellCoordinateFormulaPairArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 column = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_column(), target);
  }

  // required uint32 row = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_row(), target);
  }

  // optional .TSCE.FormulaArchive formula = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::formula(this),
        _Internal::formula(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellCoordinateFormulaPairArchive)
  return target;
}

size_t CellCoordinateFormulaPairArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.CellCoordinateFormulaPairArchive)
  size_t total_size = 0;

  if (_internal_has_column()) {
    // required uint32 column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());
  }

  if (_internal_has_row()) {
    // required uint32 row = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row());
  }

  return total_size;
}
size_t CellCoordinateFormulaPairArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellCoordinateFormulaPairArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());

    // required uint32 row = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSCE.FormulaArchive formula = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formula_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellCoordinateFormulaPairArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellCoordinateFormulaPairArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellCoordinateFormulaPairArchive::GetClassData() const { return &_class_data_; }


void CellCoordinateFormulaPairArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellCoordinateFormulaPairArchive*>(&to_msg);
  auto& from = static_cast<const CellCoordinateFormulaPairArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellCoordinateFormulaPairArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_formula()->::TSCE::FormulaArchive::MergeFrom(
          from._internal_formula());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.column_ = from._impl_.column_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.row_ = from._impl_.row_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellCoordinateFormulaPairArchive::CopyFrom(const CellCoordinateFormulaPairArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellCoordinateFormulaPairArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellCoordinateFormulaPairArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_formula()) {
    if (!_impl_.formula_->IsInitialized()) return false;
  }
  return true;
}

void CellCoordinateFormulaPairArchive::InternalSwap(CellCoordinateFormulaPairArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellCoordinateFormulaPairArchive, _impl_.row_)
      + sizeof(CellCoordinateFormulaPairArchive::_impl_.row_)
      - PROTOBUF_FIELD_OFFSET(CellCoordinateFormulaPairArchive, _impl_.formula_)>(
          reinterpret_cast<char*>(&_impl_.formula_),
          reinterpret_cast<char*>(&other->_impl_.formula_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellCoordinateFormulaPairArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[46]);
}

// ===================================================================

class CellCoordinateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellCoordinateArchive>()._impl_._has_bits_);
  static void set_has_packeddata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CellCoordinateArchive::CellCoordinateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellCoordinateArchive)
}
CellCoordinateArchive::CellCoordinateArchive(const CellCoordinateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellCoordinateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packeddata_){}
    , decltype(_impl_.column_){}
    , decltype(_impl_.row_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.packeddata_, &from._impl_.packeddata_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.row_) -
    reinterpret_cast<char*>(&_impl_.packeddata_)) + sizeof(_impl_.row_));
  // @@protoc_insertion_point(copy_constructor:TSCE.CellCoordinateArchive)
}

inline void CellCoordinateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packeddata_){0u}
    , decltype(_impl_.column_){0u}
    , decltype(_impl_.row_){0u}
  };
}

CellCoordinateArchive::~CellCoordinateArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellCoordinateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellCoordinateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CellCoordinateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellCoordinateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellCoordinateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.packeddata_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.row_) -
        reinterpret_cast<char*>(&_impl_.packeddata_)) + sizeof(_impl_.row_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellCoordinateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 packedData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_packeddata(&has_bits);
          _impl_.packeddata_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 column = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_column(&has_bits);
          _impl_.column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_row(&has_bits);
          _impl_.row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellCoordinateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellCoordinateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 packedData = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(1, this->_internal_packeddata(), target);
  }

  // optional uint32 column = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_column(), target);
  }

  // optional uint32 row = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_row(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellCoordinateArchive)
  return target;
}

size_t CellCoordinateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellCoordinateArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed32 packedData = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional uint32 column = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());
    }

    // optional uint32 row = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellCoordinateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellCoordinateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellCoordinateArchive::GetClassData() const { return &_class_data_; }


void CellCoordinateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellCoordinateArchive*>(&to_msg);
  auto& from = static_cast<const CellCoordinateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellCoordinateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.packeddata_ = from._impl_.packeddata_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.column_ = from._impl_.column_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.row_ = from._impl_.row_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellCoordinateArchive::CopyFrom(const CellCoordinateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellCoordinateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellCoordinateArchive::IsInitialized() const {
  return true;
}

void CellCoordinateArchive::InternalSwap(CellCoordinateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellCoordinateArchive, _impl_.row_)
      + sizeof(CellCoordinateArchive::_impl_.row_)
      - PROTOBUF_FIELD_OFFSET(CellCoordinateArchive, _impl_.packeddata_)>(
          reinterpret_cast<char*>(&_impl_.packeddata_),
          reinterpret_cast<char*>(&other->_impl_.packeddata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellCoordinateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[47]);
}

// ===================================================================

class CellCoordinateVectorArchive::_Internal {
 public:
};

CellCoordinateVectorArchive::CellCoordinateVectorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellCoordinateVectorArchive)
}
CellCoordinateVectorArchive::CellCoordinateVectorArchive(const CellCoordinateVectorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellCoordinateVectorArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_coordinate_){from._impl_.cell_coordinate_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.CellCoordinateVectorArchive)
}

inline void CellCoordinateVectorArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_coordinate_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CellCoordinateVectorArchive::~CellCoordinateVectorArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellCoordinateVectorArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellCoordinateVectorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cell_coordinate_.~RepeatedPtrField();
}

void CellCoordinateVectorArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellCoordinateVectorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellCoordinateVectorArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cell_coordinate_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellCoordinateVectorArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.CellCoordinateArchive cell_coordinate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_coordinate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellCoordinateVectorArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellCoordinateVectorArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.CellCoordinateArchive cell_coordinate = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cell_coordinate_size()); i < n; i++) {
    const auto& repfield = this->_internal_cell_coordinate(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellCoordinateVectorArchive)
  return target;
}

size_t CellCoordinateVectorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellCoordinateVectorArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.CellCoordinateArchive cell_coordinate = 1;
  total_size += 1UL * this->_internal_cell_coordinate_size();
  for (const auto& msg : this->_impl_.cell_coordinate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellCoordinateVectorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellCoordinateVectorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellCoordinateVectorArchive::GetClassData() const { return &_class_data_; }


void CellCoordinateVectorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellCoordinateVectorArchive*>(&to_msg);
  auto& from = static_cast<const CellCoordinateVectorArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellCoordinateVectorArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cell_coordinate_.MergeFrom(from._impl_.cell_coordinate_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellCoordinateVectorArchive::CopyFrom(const CellCoordinateVectorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellCoordinateVectorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellCoordinateVectorArchive::IsInitialized() const {
  return true;
}

void CellCoordinateVectorArchive::InternalSwap(CellCoordinateVectorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cell_coordinate_.InternalSwap(&other->_impl_.cell_coordinate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellCoordinateVectorArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[48]);
}

// ===================================================================

class CellCoordinateObjectPairArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellCoordinateObjectPairArchive>()._impl_._has_bits_);
  static const ::TSCE::CellCoordinateArchive& cell_coordinate(const CellCoordinateObjectPairArchive* msg);
  static void set_has_cell_coordinate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& object(const CellCoordinateObjectPairArchive* msg);
  static void set_has_object(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::CellCoordinateArchive&
CellCoordinateObjectPairArchive::_Internal::cell_coordinate(const CellCoordinateObjectPairArchive* msg) {
  return *msg->_impl_.cell_coordinate_;
}
const ::TSP::Reference&
CellCoordinateObjectPairArchive::_Internal::object(const CellCoordinateObjectPairArchive* msg) {
  return *msg->_impl_.object_;
}
void CellCoordinateObjectPairArchive::clear_object() {
  if (_impl_.object_ != nullptr) _impl_.object_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CellCoordinateObjectPairArchive::CellCoordinateObjectPairArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellCoordinateObjectPairArchive)
}
CellCoordinateObjectPairArchive::CellCoordinateObjectPairArchive(const CellCoordinateObjectPairArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellCoordinateObjectPairArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_coordinate_){nullptr}
    , decltype(_impl_.object_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell_coordinate()) {
    _this->_impl_.cell_coordinate_ = new ::TSCE::CellCoordinateArchive(*from._impl_.cell_coordinate_);
  }
  if (from._internal_has_object()) {
    _this->_impl_.object_ = new ::TSP::Reference(*from._impl_.object_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.CellCoordinateObjectPairArchive)
}

inline void CellCoordinateObjectPairArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_coordinate_){nullptr}
    , decltype(_impl_.object_){nullptr}
  };
}

CellCoordinateObjectPairArchive::~CellCoordinateObjectPairArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellCoordinateObjectPairArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellCoordinateObjectPairArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cell_coordinate_;
  if (this != internal_default_instance()) delete _impl_.object_;
}

void CellCoordinateObjectPairArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellCoordinateObjectPairArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellCoordinateObjectPairArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.cell_coordinate_ != nullptr);
      _impl_.cell_coordinate_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.object_ != nullptr);
      _impl_.object_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellCoordinateObjectPairArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CellCoordinateArchive cell_coordinate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_coordinate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellCoordinateObjectPairArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellCoordinateObjectPairArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.CellCoordinateArchive cell_coordinate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cell_coordinate(this),
        _Internal::cell_coordinate(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference object = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::object(this),
        _Internal::object(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellCoordinateObjectPairArchive)
  return target;
}

size_t CellCoordinateObjectPairArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.CellCoordinateObjectPairArchive)
  size_t total_size = 0;

  if (_internal_has_cell_coordinate()) {
    // required .TSCE.CellCoordinateArchive cell_coordinate = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_coordinate_);
  }

  if (_internal_has_object()) {
    // required .TSP.Reference object = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.object_);
  }

  return total_size;
}
size_t CellCoordinateObjectPairArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellCoordinateObjectPairArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.CellCoordinateArchive cell_coordinate = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_coordinate_);

    // required .TSP.Reference object = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.object_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellCoordinateObjectPairArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellCoordinateObjectPairArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellCoordinateObjectPairArchive::GetClassData() const { return &_class_data_; }


void CellCoordinateObjectPairArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellCoordinateObjectPairArchive*>(&to_msg);
  auto& from = static_cast<const CellCoordinateObjectPairArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellCoordinateObjectPairArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_cell_coordinate()->::TSCE::CellCoordinateArchive::MergeFrom(
          from._internal_cell_coordinate());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_object()->::TSP::Reference::MergeFrom(
          from._internal_object());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellCoordinateObjectPairArchive::CopyFrom(const CellCoordinateObjectPairArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellCoordinateObjectPairArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellCoordinateObjectPairArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_object()) {
    if (!_impl_.object_->IsInitialized()) return false;
  }
  return true;
}

void CellCoordinateObjectPairArchive::InternalSwap(CellCoordinateObjectPairArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellCoordinateObjectPairArchive, _impl_.object_)
      + sizeof(CellCoordinateObjectPairArchive::_impl_.object_)
      - PROTOBUF_FIELD_OFFSET(CellCoordinateObjectPairArchive, _impl_.cell_coordinate_)>(
          reinterpret_cast<char*>(&_impl_.cell_coordinate_),
          reinterpret_cast<char*>(&other->_impl_.cell_coordinate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellCoordinateObjectPairArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[49]);
}

// ===================================================================

class CellCoordinateObjectMapArchive::_Internal {
 public:
};

CellCoordinateObjectMapArchive::CellCoordinateObjectMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellCoordinateObjectMapArchive)
}
CellCoordinateObjectMapArchive::CellCoordinateObjectMapArchive(const CellCoordinateObjectMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellCoordinateObjectMapArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_coordinate_object_pair_){from._impl_.cell_coordinate_object_pair_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.CellCoordinateObjectMapArchive)
}

inline void CellCoordinateObjectMapArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_coordinate_object_pair_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CellCoordinateObjectMapArchive::~CellCoordinateObjectMapArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellCoordinateObjectMapArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellCoordinateObjectMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cell_coordinate_object_pair_.~RepeatedPtrField();
}

void CellCoordinateObjectMapArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellCoordinateObjectMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellCoordinateObjectMapArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cell_coordinate_object_pair_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellCoordinateObjectMapArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.CellCoordinateObjectPairArchive cell_coordinate_object_pair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_coordinate_object_pair(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellCoordinateObjectMapArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellCoordinateObjectMapArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.CellCoordinateObjectPairArchive cell_coordinate_object_pair = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cell_coordinate_object_pair_size()); i < n; i++) {
    const auto& repfield = this->_internal_cell_coordinate_object_pair(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellCoordinateObjectMapArchive)
  return target;
}

size_t CellCoordinateObjectMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellCoordinateObjectMapArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.CellCoordinateObjectPairArchive cell_coordinate_object_pair = 1;
  total_size += 1UL * this->_internal_cell_coordinate_object_pair_size();
  for (const auto& msg : this->_impl_.cell_coordinate_object_pair_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellCoordinateObjectMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellCoordinateObjectMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellCoordinateObjectMapArchive::GetClassData() const { return &_class_data_; }


void CellCoordinateObjectMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellCoordinateObjectMapArchive*>(&to_msg);
  auto& from = static_cast<const CellCoordinateObjectMapArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellCoordinateObjectMapArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cell_coordinate_object_pair_.MergeFrom(from._impl_.cell_coordinate_object_pair_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellCoordinateObjectMapArchive::CopyFrom(const CellCoordinateObjectMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellCoordinateObjectMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellCoordinateObjectMapArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.cell_coordinate_object_pair_))
    return false;
  return true;
}

void CellCoordinateObjectMapArchive::InternalSwap(CellCoordinateObjectMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cell_coordinate_object_pair_.InternalSwap(&other->_impl_.cell_coordinate_object_pair_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellCoordinateObjectMapArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[50]);
}

// ===================================================================

class OwnerFormulaMapArchive::_Internal {
 public:
};

OwnerFormulaMapArchive::OwnerFormulaMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.OwnerFormulaMapArchive)
}
OwnerFormulaMapArchive::OwnerFormulaMapArchive(const OwnerFormulaMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OwnerFormulaMapArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.coordinate_formula_pair_){from._impl_.coordinate_formula_pair_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.OwnerFormulaMapArchive)
}

inline void OwnerFormulaMapArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.coordinate_formula_pair_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OwnerFormulaMapArchive::~OwnerFormulaMapArchive() {
  // @@protoc_insertion_point(destructor:TSCE.OwnerFormulaMapArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OwnerFormulaMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.coordinate_formula_pair_.~RepeatedPtrField();
}

void OwnerFormulaMapArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OwnerFormulaMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.OwnerFormulaMapArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.coordinate_formula_pair_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OwnerFormulaMapArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.CellCoordinateFormulaPairArchive coordinate_formula_pair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_coordinate_formula_pair(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OwnerFormulaMapArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.OwnerFormulaMapArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.CellCoordinateFormulaPairArchive coordinate_formula_pair = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_coordinate_formula_pair_size()); i < n; i++) {
    const auto& repfield = this->_internal_coordinate_formula_pair(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.OwnerFormulaMapArchive)
  return target;
}

size_t OwnerFormulaMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.OwnerFormulaMapArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.CellCoordinateFormulaPairArchive coordinate_formula_pair = 1;
  total_size += 1UL * this->_internal_coordinate_formula_pair_size();
  for (const auto& msg : this->_impl_.coordinate_formula_pair_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OwnerFormulaMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OwnerFormulaMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OwnerFormulaMapArchive::GetClassData() const { return &_class_data_; }


void OwnerFormulaMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OwnerFormulaMapArchive*>(&to_msg);
  auto& from = static_cast<const OwnerFormulaMapArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.OwnerFormulaMapArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.coordinate_formula_pair_.MergeFrom(from._impl_.coordinate_formula_pair_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OwnerFormulaMapArchive::CopyFrom(const OwnerFormulaMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.OwnerFormulaMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnerFormulaMapArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.coordinate_formula_pair_))
    return false;
  return true;
}

void OwnerFormulaMapArchive::InternalSwap(OwnerFormulaMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.coordinate_formula_pair_.InternalSwap(&other->_impl_.coordinate_formula_pair_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OwnerFormulaMapArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[51]);
}

// ===================================================================

class FormulaRewriteCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaRewriteCommandArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& table_rewrite_command(const FormulaRewriteCommandArchive* msg);
  static void set_has_table_rewrite_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSK::CommandArchive& super(const FormulaRewriteCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
FormulaRewriteCommandArchive::_Internal::table_rewrite_command(const FormulaRewriteCommandArchive* msg) {
  return *msg->_impl_.table_rewrite_command_;
}
const ::TSK::CommandArchive&
FormulaRewriteCommandArchive::_Internal::super(const FormulaRewriteCommandArchive* msg) {
  return *msg->_impl_.super_;
}
void FormulaRewriteCommandArchive::clear_table_rewrite_command() {
  if (_impl_.table_rewrite_command_ != nullptr) _impl_.table_rewrite_command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void FormulaRewriteCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
FormulaRewriteCommandArchive::FormulaRewriteCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.FormulaRewriteCommandArchive)
}
FormulaRewriteCommandArchive::FormulaRewriteCommandArchive(const FormulaRewriteCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormulaRewriteCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_rewrite_command_){nullptr}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_rewrite_command()) {
    _this->_impl_.table_rewrite_command_ = new ::TSP::Reference(*from._impl_.table_rewrite_command_);
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.FormulaRewriteCommandArchive)
}

inline void FormulaRewriteCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_rewrite_command_){nullptr}
    , decltype(_impl_.super_){nullptr}
  };
}

FormulaRewriteCommandArchive::~FormulaRewriteCommandArchive() {
  // @@protoc_insertion_point(destructor:TSCE.FormulaRewriteCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormulaRewriteCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.table_rewrite_command_;
  if (this != internal_default_instance()) delete _impl_.super_;
}

void FormulaRewriteCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormulaRewriteCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.FormulaRewriteCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.table_rewrite_command_ != nullptr);
      _impl_.table_rewrite_command_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaRewriteCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference table_rewrite_command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_rewrite_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.CommandArchive super = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormulaRewriteCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.FormulaRewriteCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference table_rewrite_command = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::table_rewrite_command(this),
        _Internal::table_rewrite_command(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.CommandArchive super = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.FormulaRewriteCommandArchive)
  return target;
}

size_t FormulaRewriteCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.FormulaRewriteCommandArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference table_rewrite_command = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_rewrite_command_);
    }

    // optional .TSK.CommandArchive super = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.super_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaRewriteCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormulaRewriteCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaRewriteCommandArchive::GetClassData() const { return &_class_data_; }


void FormulaRewriteCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormulaRewriteCommandArchive*>(&to_msg);
  auto& from = static_cast<const FormulaRewriteCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.FormulaRewriteCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_table_rewrite_command()->::TSP::Reference::MergeFrom(
          from._internal_table_rewrite_command());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaRewriteCommandArchive::CopyFrom(const FormulaRewriteCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.FormulaRewriteCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaRewriteCommandArchive::IsInitialized() const {
  if (_internal_has_table_rewrite_command()) {
    if (!_impl_.table_rewrite_command_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void FormulaRewriteCommandArchive::InternalSwap(FormulaRewriteCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaRewriteCommandArchive, _impl_.super_)
      + sizeof(FormulaRewriteCommandArchive::_impl_.super_)
      - PROTOBUF_FIELD_OFFSET(FormulaRewriteCommandArchive, _impl_.table_rewrite_command_)>(
          reinterpret_cast<char*>(&_impl_.table_rewrite_command_),
          reinterpret_cast<char*>(&other->_impl_.table_rewrite_command_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaRewriteCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[52]);
}

// ===================================================================

class NumberTrackedReferencePairArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<NumberTrackedReferencePairArchive>()._impl_._has_bits_);
  static void set_has_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& tracked_reference(const NumberTrackedReferencePairArchive* msg);
  static void set_has_tracked_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSP::Reference&
NumberTrackedReferencePairArchive::_Internal::tracked_reference(const NumberTrackedReferencePairArchive* msg) {
  return *msg->_impl_.tracked_reference_;
}
void NumberTrackedReferencePairArchive::clear_tracked_reference() {
  if (_impl_.tracked_reference_ != nullptr) _impl_.tracked_reference_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
NumberTrackedReferencePairArchive::NumberTrackedReferencePairArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.NumberTrackedReferencePairArchive)
}
NumberTrackedReferencePairArchive::NumberTrackedReferencePairArchive(const NumberTrackedReferencePairArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NumberTrackedReferencePairArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tracked_reference_){nullptr}
    , decltype(_impl_.number_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tracked_reference()) {
    _this->_impl_.tracked_reference_ = new ::TSP::Reference(*from._impl_.tracked_reference_);
  }
  _this->_impl_.number_ = from._impl_.number_;
  // @@protoc_insertion_point(copy_constructor:TSCE.NumberTrackedReferencePairArchive)
}

inline void NumberTrackedReferencePairArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tracked_reference_){nullptr}
    , decltype(_impl_.number_){0u}
  };
}

NumberTrackedReferencePairArchive::~NumberTrackedReferencePairArchive() {
  // @@protoc_insertion_point(destructor:TSCE.NumberTrackedReferencePairArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NumberTrackedReferencePairArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tracked_reference_;
}

void NumberTrackedReferencePairArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NumberTrackedReferencePairArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.NumberTrackedReferencePairArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.tracked_reference_ != nullptr);
    _impl_.tracked_reference_->Clear();
  }
  _impl_.number_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NumberTrackedReferencePairArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_number(&has_bits);
          _impl_.number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference tracked_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tracked_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NumberTrackedReferencePairArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.NumberTrackedReferencePairArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 number = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_number(), target);
  }

  // optional .TSP.Reference tracked_reference = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tracked_reference(this),
        _Internal::tracked_reference(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.NumberTrackedReferencePairArchive)
  return target;
}

size_t NumberTrackedReferencePairArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.NumberTrackedReferencePairArchive)
  size_t total_size = 0;

  // required uint32 number = 1;
  if (_internal_has_number()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference tracked_reference = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tracked_reference_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NumberTrackedReferencePairArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NumberTrackedReferencePairArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NumberTrackedReferencePairArchive::GetClassData() const { return &_class_data_; }


void NumberTrackedReferencePairArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NumberTrackedReferencePairArchive*>(&to_msg);
  auto& from = static_cast<const NumberTrackedReferencePairArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.NumberTrackedReferencePairArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_tracked_reference()->::TSP::Reference::MergeFrom(
          from._internal_tracked_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.number_ = from._impl_.number_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NumberTrackedReferencePairArchive::CopyFrom(const NumberTrackedReferencePairArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.NumberTrackedReferencePairArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumberTrackedReferencePairArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_tracked_reference()) {
    if (!_impl_.tracked_reference_->IsInitialized()) return false;
  }
  return true;
}

void NumberTrackedReferencePairArchive::InternalSwap(NumberTrackedReferencePairArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NumberTrackedReferencePairArchive, _impl_.number_)
      + sizeof(NumberTrackedReferencePairArchive::_impl_.number_)
      - PROTOBUF_FIELD_OFFSET(NumberTrackedReferencePairArchive, _impl_.tracked_reference_)>(
          reinterpret_cast<char*>(&_impl_.tracked_reference_),
          reinterpret_cast<char*>(&other->_impl_.tracked_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NumberTrackedReferencePairArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[53]);
}

// ===================================================================

class NumberToTrackedReferenceMapArchive::_Internal {
 public:
};

NumberToTrackedReferenceMapArchive::NumberToTrackedReferenceMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.NumberToTrackedReferenceMapArchive)
}
NumberToTrackedReferenceMapArchive::NumberToTrackedReferenceMapArchive(const NumberToTrackedReferenceMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NumberToTrackedReferenceMapArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.number_tracked_reference_pair_){from._impl_.number_tracked_reference_pair_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.NumberToTrackedReferenceMapArchive)
}

inline void NumberToTrackedReferenceMapArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.number_tracked_reference_pair_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NumberToTrackedReferenceMapArchive::~NumberToTrackedReferenceMapArchive() {
  // @@protoc_insertion_point(destructor:TSCE.NumberToTrackedReferenceMapArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NumberToTrackedReferenceMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.number_tracked_reference_pair_.~RepeatedPtrField();
}

void NumberToTrackedReferenceMapArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NumberToTrackedReferenceMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.NumberToTrackedReferenceMapArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.number_tracked_reference_pair_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NumberToTrackedReferenceMapArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.NumberTrackedReferencePairArchive number_tracked_reference_pair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_number_tracked_reference_pair(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NumberToTrackedReferenceMapArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.NumberToTrackedReferenceMapArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.NumberTrackedReferencePairArchive number_tracked_reference_pair = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_number_tracked_reference_pair_size()); i < n; i++) {
    const auto& repfield = this->_internal_number_tracked_reference_pair(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.NumberToTrackedReferenceMapArchive)
  return target;
}

size_t NumberToTrackedReferenceMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.NumberToTrackedReferenceMapArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.NumberTrackedReferencePairArchive number_tracked_reference_pair = 1;
  total_size += 1UL * this->_internal_number_tracked_reference_pair_size();
  for (const auto& msg : this->_impl_.number_tracked_reference_pair_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NumberToTrackedReferenceMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NumberToTrackedReferenceMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NumberToTrackedReferenceMapArchive::GetClassData() const { return &_class_data_; }


void NumberToTrackedReferenceMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NumberToTrackedReferenceMapArchive*>(&to_msg);
  auto& from = static_cast<const NumberToTrackedReferenceMapArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.NumberToTrackedReferenceMapArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.number_tracked_reference_pair_.MergeFrom(from._impl_.number_tracked_reference_pair_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NumberToTrackedReferenceMapArchive::CopyFrom(const NumberToTrackedReferenceMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.NumberToTrackedReferenceMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumberToTrackedReferenceMapArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.number_tracked_reference_pair_))
    return false;
  return true;
}

void NumberToTrackedReferenceMapArchive::InternalSwap(NumberToTrackedReferenceMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.number_tracked_reference_pair_.InternalSwap(&other->_impl_.number_tracked_reference_pair_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NumberToTrackedReferenceMapArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[54]);
}

// ===================================================================

class TrackedReferencesRewriteCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackedReferencesRewriteCommandArchive>()._impl_._has_bits_);
  static const ::TSCE::NumberToTrackedReferenceMapArchive& references_in_reference_tracker(const TrackedReferencesRewriteCommandArchive* msg);
  static void set_has_references_in_reference_tracker(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::NumberToTrackedReferenceMapArchive& original_tracked_reference_copies(const TrackedReferencesRewriteCommandArchive* msg);
  static void set_has_original_tracked_reference_copies(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::FormulaRewriteSpecArchive& rewrite_spec(const TrackedReferencesRewriteCommandArchive* msg);
  static void set_has_rewrite_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& reference_tracker(const TrackedReferencesRewriteCommandArchive* msg);
  static void set_has_reference_tracker(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSK::CommandArchive& super(const TrackedReferencesRewriteCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000018) ^ 0x00000018) != 0;
  }
};

const ::TSCE::NumberToTrackedReferenceMapArchive&
TrackedReferencesRewriteCommandArchive::_Internal::references_in_reference_tracker(const TrackedReferencesRewriteCommandArchive* msg) {
  return *msg->_impl_.references_in_reference_tracker_;
}
const ::TSCE::NumberToTrackedReferenceMapArchive&
TrackedReferencesRewriteCommandArchive::_Internal::original_tracked_reference_copies(const TrackedReferencesRewriteCommandArchive* msg) {
  return *msg->_impl_.original_tracked_reference_copies_;
}
const ::TSCE::FormulaRewriteSpecArchive&
TrackedReferencesRewriteCommandArchive::_Internal::rewrite_spec(const TrackedReferencesRewriteCommandArchive* msg) {
  return *msg->_impl_.rewrite_spec_;
}
const ::TSP::Reference&
TrackedReferencesRewriteCommandArchive::_Internal::reference_tracker(const TrackedReferencesRewriteCommandArchive* msg) {
  return *msg->_impl_.reference_tracker_;
}
const ::TSK::CommandArchive&
TrackedReferencesRewriteCommandArchive::_Internal::super(const TrackedReferencesRewriteCommandArchive* msg) {
  return *msg->_impl_.super_;
}
void TrackedReferencesRewriteCommandArchive::clear_reference_tracker() {
  if (_impl_.reference_tracker_ != nullptr) _impl_.reference_tracker_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void TrackedReferencesRewriteCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
TrackedReferencesRewriteCommandArchive::TrackedReferencesRewriteCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.TrackedReferencesRewriteCommandArchive)
}
TrackedReferencesRewriteCommandArchive::TrackedReferencesRewriteCommandArchive(const TrackedReferencesRewriteCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackedReferencesRewriteCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.references_in_reference_tracker_){nullptr}
    , decltype(_impl_.original_tracked_reference_copies_){nullptr}
    , decltype(_impl_.rewrite_spec_){nullptr}
    , decltype(_impl_.reference_tracker_){nullptr}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_references_in_reference_tracker()) {
    _this->_impl_.references_in_reference_tracker_ = new ::TSCE::NumberToTrackedReferenceMapArchive(*from._impl_.references_in_reference_tracker_);
  }
  if (from._internal_has_original_tracked_reference_copies()) {
    _this->_impl_.original_tracked_reference_copies_ = new ::TSCE::NumberToTrackedReferenceMapArchive(*from._impl_.original_tracked_reference_copies_);
  }
  if (from._internal_has_rewrite_spec()) {
    _this->_impl_.rewrite_spec_ = new ::TSCE::FormulaRewriteSpecArchive(*from._impl_.rewrite_spec_);
  }
  if (from._internal_has_reference_tracker()) {
    _this->_impl_.reference_tracker_ = new ::TSP::Reference(*from._impl_.reference_tracker_);
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.TrackedReferencesRewriteCommandArchive)
}

inline void TrackedReferencesRewriteCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.references_in_reference_tracker_){nullptr}
    , decltype(_impl_.original_tracked_reference_copies_){nullptr}
    , decltype(_impl_.rewrite_spec_){nullptr}
    , decltype(_impl_.reference_tracker_){nullptr}
    , decltype(_impl_.super_){nullptr}
  };
}

TrackedReferencesRewriteCommandArchive::~TrackedReferencesRewriteCommandArchive() {
  // @@protoc_insertion_point(destructor:TSCE.TrackedReferencesRewriteCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackedReferencesRewriteCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.references_in_reference_tracker_;
  if (this != internal_default_instance()) delete _impl_.original_tracked_reference_copies_;
  if (this != internal_default_instance()) delete _impl_.rewrite_spec_;
  if (this != internal_default_instance()) delete _impl_.reference_tracker_;
  if (this != internal_default_instance()) delete _impl_.super_;
}

void TrackedReferencesRewriteCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackedReferencesRewriteCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.TrackedReferencesRewriteCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.references_in_reference_tracker_ != nullptr);
      _impl_.references_in_reference_tracker_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.original_tracked_reference_copies_ != nullptr);
      _impl_.original_tracked_reference_copies_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.rewrite_spec_ != nullptr);
      _impl_.rewrite_spec_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.reference_tracker_ != nullptr);
      _impl_.reference_tracker_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackedReferencesRewriteCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCE.NumberToTrackedReferenceMapArchive references_in_reference_tracker = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_references_in_reference_tracker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.NumberToTrackedReferenceMapArchive original_tracked_reference_copies = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_tracked_reference_copies(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.FormulaRewriteSpecArchive rewrite_spec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewrite_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference reference_tracker = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference_tracker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSK.CommandArchive super = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackedReferencesRewriteCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.TrackedReferencesRewriteCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCE.NumberToTrackedReferenceMapArchive references_in_reference_tracker = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::references_in_reference_tracker(this),
        _Internal::references_in_reference_tracker(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.NumberToTrackedReferenceMapArchive original_tracked_reference_copies = 2 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::original_tracked_reference_copies(this),
        _Internal::original_tracked_reference_copies(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.FormulaRewriteSpecArchive rewrite_spec = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rewrite_spec(this),
        _Internal::rewrite_spec(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference reference_tracker = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::reference_tracker(this),
        _Internal::reference_tracker(this).GetCachedSize(), target, stream);
  }

  // required .TSK.CommandArchive super = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.TrackedReferencesRewriteCommandArchive)
  return target;
}

size_t TrackedReferencesRewriteCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.TrackedReferencesRewriteCommandArchive)
  size_t total_size = 0;

  if (_internal_has_reference_tracker()) {
    // required .TSP.Reference reference_tracker = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reference_tracker_);
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  return total_size;
}
size_t TrackedReferencesRewriteCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.TrackedReferencesRewriteCommandArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000018) ^ 0x00000018) == 0) {  // All required fields are present.
    // required .TSP.Reference reference_tracker = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reference_tracker_);

    // required .TSK.CommandArchive super = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSCE.NumberToTrackedReferenceMapArchive references_in_reference_tracker = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.references_in_reference_tracker_);
    }

    // optional .TSCE.NumberToTrackedReferenceMapArchive original_tracked_reference_copies = 2 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.original_tracked_reference_copies_);
    }

    // optional .TSCE.FormulaRewriteSpecArchive rewrite_spec = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rewrite_spec_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackedReferencesRewriteCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackedReferencesRewriteCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackedReferencesRewriteCommandArchive::GetClassData() const { return &_class_data_; }


void TrackedReferencesRewriteCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackedReferencesRewriteCommandArchive*>(&to_msg);
  auto& from = static_cast<const TrackedReferencesRewriteCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.TrackedReferencesRewriteCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_references_in_reference_tracker()->::TSCE::NumberToTrackedReferenceMapArchive::MergeFrom(
          from._internal_references_in_reference_tracker());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_original_tracked_reference_copies()->::TSCE::NumberToTrackedReferenceMapArchive::MergeFrom(
          from._internal_original_tracked_reference_copies());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_rewrite_spec()->::TSCE::FormulaRewriteSpecArchive::MergeFrom(
          from._internal_rewrite_spec());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_reference_tracker()->::TSP::Reference::MergeFrom(
          from._internal_reference_tracker());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackedReferencesRewriteCommandArchive::CopyFrom(const TrackedReferencesRewriteCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.TrackedReferencesRewriteCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackedReferencesRewriteCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_references_in_reference_tracker()) {
    if (!_impl_.references_in_reference_tracker_->IsInitialized()) return false;
  }
  if (_internal_has_original_tracked_reference_copies()) {
    if (!_impl_.original_tracked_reference_copies_->IsInitialized()) return false;
  }
  if (_internal_has_rewrite_spec()) {
    if (!_impl_.rewrite_spec_->IsInitialized()) return false;
  }
  if (_internal_has_reference_tracker()) {
    if (!_impl_.reference_tracker_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void TrackedReferencesRewriteCommandArchive::InternalSwap(TrackedReferencesRewriteCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackedReferencesRewriteCommandArchive, _impl_.super_)
      + sizeof(TrackedReferencesRewriteCommandArchive::_impl_.super_)
      - PROTOBUF_FIELD_OFFSET(TrackedReferencesRewriteCommandArchive, _impl_.references_in_reference_tracker_)>(
          reinterpret_cast<char*>(&_impl_.references_in_reference_tracker_),
          reinterpret_cast<char*>(&other->_impl_.references_in_reference_tracker_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackedReferencesRewriteCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[55]);
}

// ===================================================================

class TrackedReferenceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackedReferenceArchive>()._impl_._has_bits_);
  static const ::TSCE::ASTNodeArrayArchive& ast(const TrackedReferenceArchive* msg);
  static void set_has_ast(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_formula_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::ASTNodeArrayArchive&
TrackedReferenceArchive::_Internal::ast(const TrackedReferenceArchive* msg) {
  return *msg->_impl_.ast_;
}
TrackedReferenceArchive::TrackedReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.TrackedReferenceArchive)
}
TrackedReferenceArchive::TrackedReferenceArchive(const TrackedReferenceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackedReferenceArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ast_){nullptr}
    , decltype(_impl_.formula_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ast()) {
    _this->_impl_.ast_ = new ::TSCE::ASTNodeArrayArchive(*from._impl_.ast_);
  }
  _this->_impl_.formula_id_ = from._impl_.formula_id_;
  // @@protoc_insertion_point(copy_constructor:TSCE.TrackedReferenceArchive)
}

inline void TrackedReferenceArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ast_){nullptr}
    , decltype(_impl_.formula_id_){0u}
  };
}

TrackedReferenceArchive::~TrackedReferenceArchive() {
  // @@protoc_insertion_point(destructor:TSCE.TrackedReferenceArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackedReferenceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ast_;
}

void TrackedReferenceArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackedReferenceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.TrackedReferenceArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.ast_ != nullptr);
    _impl_.ast_->Clear();
  }
  _impl_.formula_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackedReferenceArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.ASTNodeArrayArchive ast = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 formula_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_formula_id(&has_bits);
          _impl_.formula_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackedReferenceArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.TrackedReferenceArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.ASTNodeArrayArchive ast = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ast(this),
        _Internal::ast(this).GetCachedSize(), target, stream);
  }

  // required uint32 formula_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_formula_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.TrackedReferenceArchive)
  return target;
}

size_t TrackedReferenceArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.TrackedReferenceArchive)
  size_t total_size = 0;

  if (_internal_has_ast()) {
    // required .TSCE.ASTNodeArrayArchive ast = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ast_);
  }

  if (_internal_has_formula_id()) {
    // required uint32 formula_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_formula_id());
  }

  return total_size;
}
size_t TrackedReferenceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.TrackedReferenceArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.ASTNodeArrayArchive ast = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ast_);

    // required uint32 formula_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_formula_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackedReferenceArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackedReferenceArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackedReferenceArchive::GetClassData() const { return &_class_data_; }


void TrackedReferenceArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackedReferenceArchive*>(&to_msg);
  auto& from = static_cast<const TrackedReferenceArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.TrackedReferenceArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ast()->::TSCE::ASTNodeArrayArchive::MergeFrom(
          from._internal_ast());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.formula_id_ = from._impl_.formula_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackedReferenceArchive::CopyFrom(const TrackedReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.TrackedReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackedReferenceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_ast()) {
    if (!_impl_.ast_->IsInitialized()) return false;
  }
  return true;
}

void TrackedReferenceArchive::InternalSwap(TrackedReferenceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackedReferenceArchive, _impl_.formula_id_)
      + sizeof(TrackedReferenceArchive::_impl_.formula_id_)
      - PROTOBUF_FIELD_OFFSET(TrackedReferenceArchive, _impl_.ast_)>(
          reinterpret_cast<char*>(&_impl_.ast_),
          reinterpret_cast<char*>(&other->_impl_.ast_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackedReferenceArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[56]);
}

// ===================================================================

class ReferenceTrackerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferenceTrackerArchive>()._impl_._has_bits_);
  static const ::TSCE::CFUUIDArchive& uuid(const ReferenceTrackerArchive* msg);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCE::CFUUIDArchive&
ReferenceTrackerArchive::_Internal::uuid(const ReferenceTrackerArchive* msg) {
  return *msg->_impl_.uuid_;
}
void ReferenceTrackerArchive::clear_tracked_reference() {
  _impl_.tracked_reference_.Clear();
}
ReferenceTrackerArchive::ReferenceTrackerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ReferenceTrackerArchive)
}
ReferenceTrackerArchive::ReferenceTrackerArchive(const ReferenceTrackerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReferenceTrackerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tracked_reference_){from._impl_.tracked_reference_}
    , decltype(_impl_.contained_tracked_reference_){from._impl_.contained_tracked_reference_}
    , decltype(_impl_.uuid_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uuid()) {
    _this->_impl_.uuid_ = new ::TSCE::CFUUIDArchive(*from._impl_.uuid_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.ReferenceTrackerArchive)
}

inline void ReferenceTrackerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tracked_reference_){arena}
    , decltype(_impl_.contained_tracked_reference_){arena}
    , decltype(_impl_.uuid_){nullptr}
  };
}

ReferenceTrackerArchive::~ReferenceTrackerArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ReferenceTrackerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReferenceTrackerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tracked_reference_.~RepeatedPtrField();
  _impl_.contained_tracked_reference_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.uuid_;
}

void ReferenceTrackerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReferenceTrackerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ReferenceTrackerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tracked_reference_.Clear();
  _impl_.contained_tracked_reference_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.uuid_ != nullptr);
    _impl_.uuid_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceTrackerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CFUUIDArchive uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference tracked_reference = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tracked_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.TrackedReferenceArchive contained_tracked_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contained_tracked_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReferenceTrackerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ReferenceTrackerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.CFUUIDArchive uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::uuid(this),
        _Internal::uuid(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference tracked_reference = 2 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tracked_reference_size()); i < n; i++) {
    const auto& repfield = this->_internal_tracked_reference(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCE.TrackedReferenceArchive contained_tracked_reference = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_contained_tracked_reference_size()); i < n; i++) {
    const auto& repfield = this->_internal_contained_tracked_reference(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ReferenceTrackerArchive)
  return target;
}

size_t ReferenceTrackerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ReferenceTrackerArchive)
  size_t total_size = 0;

  // required .TSCE.CFUUIDArchive uuid = 1;
  if (_internal_has_uuid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uuid_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference tracked_reference = 2 [deprecated = true];
  total_size += 1UL * this->_internal_tracked_reference_size();
  for (const auto& msg : this->_impl_.tracked_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.TrackedReferenceArchive contained_tracked_reference = 3;
  total_size += 1UL * this->_internal_contained_tracked_reference_size();
  for (const auto& msg : this->_impl_.contained_tracked_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReferenceTrackerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReferenceTrackerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReferenceTrackerArchive::GetClassData() const { return &_class_data_; }


void ReferenceTrackerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReferenceTrackerArchive*>(&to_msg);
  auto& from = static_cast<const ReferenceTrackerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ReferenceTrackerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tracked_reference_.MergeFrom(from._impl_.tracked_reference_);
  _this->_impl_.contained_tracked_reference_.MergeFrom(from._impl_.contained_tracked_reference_);
  if (from._internal_has_uuid()) {
    _this->_internal_mutable_uuid()->::TSCE::CFUUIDArchive::MergeFrom(
        from._internal_uuid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReferenceTrackerArchive::CopyFrom(const ReferenceTrackerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ReferenceTrackerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceTrackerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.tracked_reference_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.contained_tracked_reference_))
    return false;
  return true;
}

void ReferenceTrackerArchive::InternalSwap(ReferenceTrackerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tracked_reference_.InternalSwap(&other->_impl_.tracked_reference_);
  _impl_.contained_tracked_reference_.InternalSwap(&other->_impl_.contained_tracked_reference_);
  swap(_impl_.uuid_, other->_impl_.uuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceTrackerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[57]);
}

// ===================================================================

class BooleanCellValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BooleanCellValueArchive>()._impl_._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

BooleanCellValueArchive::BooleanCellValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.BooleanCellValueArchive)
}
BooleanCellValueArchive::BooleanCellValueArchive(const BooleanCellValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BooleanCellValueArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:TSCE.BooleanCellValueArchive)
}

inline void BooleanCellValueArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){false}
  };
}

BooleanCellValueArchive::~BooleanCellValueArchive() {
  // @@protoc_insertion_point(destructor:TSCE.BooleanCellValueArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BooleanCellValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BooleanCellValueArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BooleanCellValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.BooleanCellValueArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BooleanCellValueArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BooleanCellValueArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.BooleanCellValueArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.BooleanCellValueArchive)
  return target;
}

size_t BooleanCellValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.BooleanCellValueArchive)
  size_t total_size = 0;

  // required bool value = 1;
  if (_internal_has_value()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BooleanCellValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BooleanCellValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BooleanCellValueArchive::GetClassData() const { return &_class_data_; }


void BooleanCellValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BooleanCellValueArchive*>(&to_msg);
  auto& from = static_cast<const BooleanCellValueArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.BooleanCellValueArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BooleanCellValueArchive::CopyFrom(const BooleanCellValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.BooleanCellValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BooleanCellValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void BooleanCellValueArchive::InternalSwap(BooleanCellValueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BooleanCellValueArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[58]);
}

// ===================================================================

class DateCellValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DateCellValueArchive>()._impl_._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSK::FormatStructArchive& format(const DateCellValueArchive* msg);
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_format_is_implicit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::FormatStructArchive&
DateCellValueArchive::_Internal::format(const DateCellValueArchive* msg) {
  return *msg->_impl_.format_;
}
void DateCellValueArchive::clear_format() {
  if (_impl_.format_ != nullptr) _impl_.format_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DateCellValueArchive::DateCellValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.DateCellValueArchive)
}
DateCellValueArchive::DateCellValueArchive(const DateCellValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DateCellValueArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.format_){nullptr}
    , decltype(_impl_.value_){}
    , decltype(_impl_.format_is_implicit_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_format()) {
    _this->_impl_.format_ = new ::TSK::FormatStructArchive(*from._impl_.format_);
  }
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.format_is_implicit_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.format_is_implicit_));
  // @@protoc_insertion_point(copy_constructor:TSCE.DateCellValueArchive)
}

inline void DateCellValueArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.format_){nullptr}
    , decltype(_impl_.value_){0}
    , decltype(_impl_.format_is_implicit_){true}
  };
}

DateCellValueArchive::~DateCellValueArchive() {
  // @@protoc_insertion_point(destructor:TSCE.DateCellValueArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DateCellValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.format_;
}

void DateCellValueArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DateCellValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.DateCellValueArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.format_ != nullptr);
    _impl_.format_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    _impl_.value_ = 0;
    _impl_.format_is_implicit_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DateCellValueArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required .TSK.FormatStructArchive format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool format_is_implicit = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_format_is_implicit(&has_bits);
          _impl_.format_is_implicit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DateCellValueArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.DateCellValueArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required double value = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
  }

  // required .TSK.FormatStructArchive format = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::format(this),
        _Internal::format(this).GetCachedSize(), target, stream);
  }

  // optional bool format_is_implicit = 3 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_format_is_implicit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.DateCellValueArchive)
  return target;
}

size_t DateCellValueArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.DateCellValueArchive)
  size_t total_size = 0;

  if (_internal_has_format()) {
    // required .TSK.FormatStructArchive format = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.format_);
  }

  if (_internal_has_value()) {
    // required double value = 1;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t DateCellValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.DateCellValueArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.FormatStructArchive format = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.format_);

    // required double value = 1;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool format_is_implicit = 3 [default = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DateCellValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DateCellValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DateCellValueArchive::GetClassData() const { return &_class_data_; }


void DateCellValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DateCellValueArchive*>(&to_msg);
  auto& from = static_cast<const DateCellValueArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.DateCellValueArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_format()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_format());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.format_is_implicit_ = from._impl_.format_is_implicit_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DateCellValueArchive::CopyFrom(const DateCellValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.DateCellValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateCellValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_format()) {
    if (!_impl_.format_->IsInitialized()) return false;
  }
  return true;
}

void DateCellValueArchive::InternalSwap(DateCellValueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DateCellValueArchive, _impl_.value_)
      + sizeof(DateCellValueArchive::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(DateCellValueArchive, _impl_.format_)>(
          reinterpret_cast<char*>(&_impl_.format_),
          reinterpret_cast<char*>(&other->_impl_.format_));
  swap(_impl_.format_is_implicit_, other->_impl_.format_is_implicit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DateCellValueArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[59]);
}

// ===================================================================

class NumberCellValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<NumberCellValueArchive>()._impl_._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSK::FormatStructArchive& format(const NumberCellValueArchive* msg);
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_format_is_implicit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::FormatStructArchive&
NumberCellValueArchive::_Internal::format(const NumberCellValueArchive* msg) {
  return *msg->_impl_.format_;
}
void NumberCellValueArchive::clear_format() {
  if (_impl_.format_ != nullptr) _impl_.format_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
NumberCellValueArchive::NumberCellValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.NumberCellValueArchive)
}
NumberCellValueArchive::NumberCellValueArchive(const NumberCellValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NumberCellValueArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.format_){nullptr}
    , decltype(_impl_.value_){}
    , decltype(_impl_.unit_){}
    , decltype(_impl_.format_is_implicit_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_format()) {
    _this->_impl_.format_ = new ::TSK::FormatStructArchive(*from._impl_.format_);
  }
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.format_is_implicit_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.format_is_implicit_));
  // @@protoc_insertion_point(copy_constructor:TSCE.NumberCellValueArchive)
}

inline void NumberCellValueArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.format_){nullptr}
    , decltype(_impl_.value_){0}
    , decltype(_impl_.unit_){0}
    , decltype(_impl_.format_is_implicit_){true}
  };
}

NumberCellValueArchive::~NumberCellValueArchive() {
  // @@protoc_insertion_point(destructor:TSCE.NumberCellValueArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NumberCellValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.format_;
}

void NumberCellValueArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NumberCellValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.NumberCellValueArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.format_ != nullptr);
    _impl_.format_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.unit_) -
        reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.unit_));
    _impl_.format_is_implicit_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NumberCellValueArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required int32 unit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_unit(&has_bits);
          _impl_.unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSK.FormatStructArchive format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool format_is_implicit = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_format_is_implicit(&has_bits);
          _impl_.format_is_implicit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NumberCellValueArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.NumberCellValueArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required double value = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
  }

  // required int32 unit = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_unit(), target);
  }

  // required .TSK.FormatStructArchive format = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::format(this),
        _Internal::format(this).GetCachedSize(), target, stream);
  }

  // optional bool format_is_implicit = 4 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_format_is_implicit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.NumberCellValueArchive)
  return target;
}

size_t NumberCellValueArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.NumberCellValueArchive)
  size_t total_size = 0;

  if (_internal_has_format()) {
    // required .TSK.FormatStructArchive format = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.format_);
  }

  if (_internal_has_value()) {
    // required double value = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_unit()) {
    // required int32 unit = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unit());
  }

  return total_size;
}
size_t NumberCellValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.NumberCellValueArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.FormatStructArchive format = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.format_);

    // required double value = 1;
    total_size += 1 + 8;

    // required int32 unit = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unit());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool format_is_implicit = 4 [default = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NumberCellValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NumberCellValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NumberCellValueArchive::GetClassData() const { return &_class_data_; }


void NumberCellValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NumberCellValueArchive*>(&to_msg);
  auto& from = static_cast<const NumberCellValueArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.NumberCellValueArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_format()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_format());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.unit_ = from._impl_.unit_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.format_is_implicit_ = from._impl_.format_is_implicit_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NumberCellValueArchive::CopyFrom(const NumberCellValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.NumberCellValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumberCellValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_format()) {
    if (!_impl_.format_->IsInitialized()) return false;
  }
  return true;
}

void NumberCellValueArchive::InternalSwap(NumberCellValueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NumberCellValueArchive, _impl_.unit_)
      + sizeof(NumberCellValueArchive::_impl_.unit_)
      - PROTOBUF_FIELD_OFFSET(NumberCellValueArchive, _impl_.format_)>(
          reinterpret_cast<char*>(&_impl_.format_),
          reinterpret_cast<char*>(&other->_impl_.format_));
  swap(_impl_.format_is_implicit_, other->_impl_.format_is_implicit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NumberCellValueArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[60]);
}

// ===================================================================

class StringCellValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StringCellValueArchive>()._impl_._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSK::FormatStructArchive& format(const StringCellValueArchive* msg);
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_format_is_implicit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::FormatStructArchive&
StringCellValueArchive::_Internal::format(const StringCellValueArchive* msg) {
  return *msg->_impl_.format_;
}
void StringCellValueArchive::clear_format() {
  if (_impl_.format_ != nullptr) _impl_.format_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
StringCellValueArchive::StringCellValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.StringCellValueArchive)
}
StringCellValueArchive::StringCellValueArchive(const StringCellValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringCellValueArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.format_){nullptr}
    , decltype(_impl_.format_is_implicit_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_format()) {
    _this->_impl_.format_ = new ::TSK::FormatStructArchive(*from._impl_.format_);
  }
  _this->_impl_.format_is_implicit_ = from._impl_.format_is_implicit_;
  // @@protoc_insertion_point(copy_constructor:TSCE.StringCellValueArchive)
}

inline void StringCellValueArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.format_){nullptr}
    , decltype(_impl_.format_is_implicit_){true}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StringCellValueArchive::~StringCellValueArchive() {
  // @@protoc_insertion_point(destructor:TSCE.StringCellValueArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringCellValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
  if (this != internal_default_instance()) delete _impl_.format_;
}

void StringCellValueArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringCellValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.StringCellValueArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.format_ != nullptr);
      _impl_.format_->Clear();
    }
    _impl_.format_is_implicit_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringCellValueArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.StringCellValueArchive.value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .TSK.FormatStructArchive format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool format_is_implicit = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_format_is_implicit(&has_bits);
          _impl_.format_is_implicit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringCellValueArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.StringCellValueArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.StringCellValueArchive.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  // required .TSK.FormatStructArchive format = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::format(this),
        _Internal::format(this).GetCachedSize(), target, stream);
  }

  // optional bool format_is_implicit = 3 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_format_is_implicit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.StringCellValueArchive)
  return target;
}

size_t StringCellValueArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.StringCellValueArchive)
  size_t total_size = 0;

  if (_internal_has_value()) {
    // required string value = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (_internal_has_format()) {
    // required .TSK.FormatStructArchive format = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.format_);
  }

  return total_size;
}
size_t StringCellValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.StringCellValueArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string value = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

    // required .TSK.FormatStructArchive format = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.format_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool format_is_implicit = 3 [default = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringCellValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringCellValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringCellValueArchive::GetClassData() const { return &_class_data_; }


void StringCellValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringCellValueArchive*>(&to_msg);
  auto& from = static_cast<const StringCellValueArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.StringCellValueArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_format()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_format());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.format_is_implicit_ = from._impl_.format_is_implicit_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringCellValueArchive::CopyFrom(const StringCellValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.StringCellValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringCellValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_format()) {
    if (!_impl_.format_->IsInitialized()) return false;
  }
  return true;
}

void StringCellValueArchive::InternalSwap(StringCellValueArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  swap(_impl_.format_, other->_impl_.format_);
  swap(_impl_.format_is_implicit_, other->_impl_.format_is_implicit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringCellValueArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[61]);
}

// ===================================================================

class CellValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellValueArchive>()._impl_._has_bits_);
  static void set_has_cell_value_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCE::BooleanCellValueArchive& boolean_value(const CellValueArchive* msg);
  static void set_has_boolean_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::DateCellValueArchive& date_value(const CellValueArchive* msg);
  static void set_has_date_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::NumberCellValueArchive& number_value(const CellValueArchive* msg);
  static void set_has_number_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::StringCellValueArchive& string_value(const CellValueArchive* msg);
  static void set_has_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

const ::TSCE::BooleanCellValueArchive&
CellValueArchive::_Internal::boolean_value(const CellValueArchive* msg) {
  return *msg->_impl_.boolean_value_;
}
const ::TSCE::DateCellValueArchive&
CellValueArchive::_Internal::date_value(const CellValueArchive* msg) {
  return *msg->_impl_.date_value_;
}
const ::TSCE::NumberCellValueArchive&
CellValueArchive::_Internal::number_value(const CellValueArchive* msg) {
  return *msg->_impl_.number_value_;
}
const ::TSCE::StringCellValueArchive&
CellValueArchive::_Internal::string_value(const CellValueArchive* msg) {
  return *msg->_impl_.string_value_;
}
CellValueArchive::CellValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellValueArchive)
}
CellValueArchive::CellValueArchive(const CellValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellValueArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.boolean_value_){nullptr}
    , decltype(_impl_.date_value_){nullptr}
    , decltype(_impl_.number_value_){nullptr}
    , decltype(_impl_.string_value_){nullptr}
    , decltype(_impl_.cell_value_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_boolean_value()) {
    _this->_impl_.boolean_value_ = new ::TSCE::BooleanCellValueArchive(*from._impl_.boolean_value_);
  }
  if (from._internal_has_date_value()) {
    _this->_impl_.date_value_ = new ::TSCE::DateCellValueArchive(*from._impl_.date_value_);
  }
  if (from._internal_has_number_value()) {
    _this->_impl_.number_value_ = new ::TSCE::NumberCellValueArchive(*from._impl_.number_value_);
  }
  if (from._internal_has_string_value()) {
    _this->_impl_.string_value_ = new ::TSCE::StringCellValueArchive(*from._impl_.string_value_);
  }
  _this->_impl_.cell_value_type_ = from._impl_.cell_value_type_;
  // @@protoc_insertion_point(copy_constructor:TSCE.CellValueArchive)
}

inline void CellValueArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.boolean_value_){nullptr}
    , decltype(_impl_.date_value_){nullptr}
    , decltype(_impl_.number_value_){nullptr}
    , decltype(_impl_.string_value_){nullptr}
    , decltype(_impl_.cell_value_type_){1}
  };
}

CellValueArchive::~CellValueArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellValueArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.boolean_value_;
  if (this != internal_default_instance()) delete _impl_.date_value_;
  if (this != internal_default_instance()) delete _impl_.number_value_;
  if (this != internal_default_instance()) delete _impl_.string_value_;
}

void CellValueArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellValueArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.boolean_value_ != nullptr);
      _impl_.boolean_value_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.date_value_ != nullptr);
      _impl_.date_value_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.number_value_ != nullptr);
      _impl_.number_value_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.string_value_ != nullptr);
      _impl_.string_value_->Clear();
    }
    _impl_.cell_value_type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellValueArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CellValueArchive.CellValueType cell_value_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCE::CellValueArchive_CellValueType_IsValid(val))) {
            _internal_set_cell_value_type(static_cast<::TSCE::CellValueArchive_CellValueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.BooleanCellValueArchive boolean_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_boolean_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.DateCellValueArchive date_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.NumberCellValueArchive number_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_number_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.StringCellValueArchive string_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_string_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellValueArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellValueArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.CellValueArchive.CellValueType cell_value_type = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cell_value_type(), target);
  }

  // optional .TSCE.BooleanCellValueArchive boolean_value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::boolean_value(this),
        _Internal::boolean_value(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.DateCellValueArchive date_value = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::date_value(this),
        _Internal::date_value(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.NumberCellValueArchive number_value = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::number_value(this),
        _Internal::number_value(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.StringCellValueArchive string_value = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::string_value(this),
        _Internal::string_value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellValueArchive)
  return target;
}

size_t CellValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellValueArchive)
  size_t total_size = 0;

  // required .TSCE.CellValueArchive.CellValueType cell_value_type = 1;
  if (_internal_has_cell_value_type()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cell_value_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSCE.BooleanCellValueArchive boolean_value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.boolean_value_);
    }

    // optional .TSCE.DateCellValueArchive date_value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.date_value_);
    }

    // optional .TSCE.NumberCellValueArchive number_value = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.number_value_);
    }

    // optional .TSCE.StringCellValueArchive string_value = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.string_value_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellValueArchive::GetClassData() const { return &_class_data_; }


void CellValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellValueArchive*>(&to_msg);
  auto& from = static_cast<const CellValueArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellValueArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_boolean_value()->::TSCE::BooleanCellValueArchive::MergeFrom(
          from._internal_boolean_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_date_value()->::TSCE::DateCellValueArchive::MergeFrom(
          from._internal_date_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_number_value()->::TSCE::NumberCellValueArchive::MergeFrom(
          from._internal_number_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_string_value()->::TSCE::StringCellValueArchive::MergeFrom(
          from._internal_string_value());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.cell_value_type_ = from._impl_.cell_value_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellValueArchive::CopyFrom(const CellValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_boolean_value()) {
    if (!_impl_.boolean_value_->IsInitialized()) return false;
  }
  if (_internal_has_date_value()) {
    if (!_impl_.date_value_->IsInitialized()) return false;
  }
  if (_internal_has_number_value()) {
    if (!_impl_.number_value_->IsInitialized()) return false;
  }
  if (_internal_has_string_value()) {
    if (!_impl_.string_value_->IsInitialized()) return false;
  }
  return true;
}

void CellValueArchive::InternalSwap(CellValueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellValueArchive, _impl_.string_value_)
      + sizeof(CellValueArchive::_impl_.string_value_)
      - PROTOBUF_FIELD_OFFSET(CellValueArchive, _impl_.boolean_value_)>(
          reinterpret_cast<char*>(&_impl_.boolean_value_),
          reinterpret_cast<char*>(&other->_impl_.boolean_value_));
  swap(_impl_.cell_value_type_, other->_impl_.cell_value_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellValueArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[62]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TSCE
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSCE::CFUUIDArchive*
Arena::CreateMaybeMessage< ::TSCE::CFUUIDArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CFUUIDArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellReferenceArchive*
Arena::CreateMaybeMessage< ::TSCE::CellReferenceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellReferenceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::InternalCellReferenceArchive*
Arena::CreateMaybeMessage< ::TSCE::InternalCellReferenceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::InternalCellReferenceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RangeReferenceArchive*
Arena::CreateMaybeMessage< ::TSCE::RangeReferenceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RangeReferenceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::InternalRangeReferenceArchive*
Arena::CreateMaybeMessage< ::TSCE::InternalRangeReferenceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::InternalRangeReferenceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ReferenceArchive*
Arena::CreateMaybeMessage< ::TSCE::ReferenceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ReferenceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::EdgeArchive*
Arena::CreateMaybeMessage< ::TSCE::EdgeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::EdgeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::EdgesArchive*
Arena::CreateMaybeMessage< ::TSCE::EdgesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::EdgesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellRecordArchive*
Arena::CreateMaybeMessage< ::TSCE::CellRecordArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellRecordArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellDependenciesArchive*
Arena::CreateMaybeMessage< ::TSCE::CellDependenciesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellDependenciesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::VolatileDependenciesArchive*
Arena::CreateMaybeMessage< ::TSCE::VolatileDependenciesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::VolatileDependenciesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RangeBackDependencyArchive*
Arena::CreateMaybeMessage< ::TSCE::RangeBackDependencyArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RangeBackDependencyArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RTreeInternalNodeContentsArchive*
Arena::CreateMaybeMessage< ::TSCE::RTreeInternalNodeContentsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RTreeInternalNodeContentsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RTreeLeafNodeContentsArchive*
Arena::CreateMaybeMessage< ::TSCE::RTreeLeafNodeContentsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RTreeLeafNodeContentsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RTreeNodeArchive*
Arena::CreateMaybeMessage< ::TSCE::RTreeNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RTreeNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RTreeArchive*
Arena::CreateMaybeMessage< ::TSCE::RTreeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RTreeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RangeDependenciesArchive*
Arena::CreateMaybeMessage< ::TSCE::RangeDependenciesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RangeDependenciesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells*
Arena::CreateMaybeMessage< ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells*
Arena::CreateMaybeMessage< ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::SpanningDependenciesArchive*
Arena::CreateMaybeMessage< ::TSCE::SpanningDependenciesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::SpanningDependenciesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::WholeOwnerDependenciesArchive*
Arena::CreateMaybeMessage< ::TSCE::WholeOwnerDependenciesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::WholeOwnerDependenciesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::FormulaOwnerInfoArchive*
Arena::CreateMaybeMessage< ::TSCE::FormulaOwnerInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::FormulaOwnerInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry*
Arena::CreateMaybeMessage< ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::OwnerIDMapArchive*
Arena::CreateMaybeMessage< ::TSCE::OwnerIDMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::OwnerIDMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::DependencyTrackerArchive*
Arena::CreateMaybeMessage< ::TSCE::DependencyTrackerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::DependencyTrackerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::NameTrackedReferencePair*
Arena::CreateMaybeMessage< ::TSCE::NameTrackedReferencePair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::NameTrackedReferencePair >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::NamesByTrackedReferenceArchive*
Arena::CreateMaybeMessage< ::TSCE::NamesByTrackedReferenceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::NamesByTrackedReferenceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::NamedReferenceManagerArchive*
Arena::CreateMaybeMessage< ::TSCE::NamedReferenceManagerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::NamedReferenceManagerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CalculationEngineArchive*
Arena::CreateMaybeMessage< ::TSCE::CalculationEngineArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CalculationEngineArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive*
Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive*
Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive*
Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive*
Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive*
Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTNodeArchive*
Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive*
Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::FormulaTranslationFlagsArchive*
Arena::CreateMaybeMessage< ::TSCE::FormulaTranslationFlagsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::FormulaTranslationFlagsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::FormulaArchive*
Arena::CreateMaybeMessage< ::TSCE::FormulaArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::FormulaArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::FormatStructArchive*
Arena::CreateMaybeMessage< ::TSCE::FormatStructArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::FormatStructArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RangeCoordinateArchive*
Arena::CreateMaybeMessage< ::TSCE::RangeCoordinateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RangeCoordinateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::TectonicShiftArchive*
Arena::CreateMaybeMessage< ::TSCE::TectonicShiftArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::TectonicShiftArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RewriteSortMappingArchive*
Arena::CreateMaybeMessage< ::TSCE::RewriteSortMappingArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RewriteSortMappingArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RangeMovedInfoArchive*
Arena::CreateMaybeMessage< ::TSCE::RangeMovedInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RangeMovedInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::TableResizedInfoArchive*
Arena::CreateMaybeMessage< ::TSCE::TableResizedInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::TableResizedInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellMergeInfoArchive*
Arena::CreateMaybeMessage< ::TSCE::CellMergeInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellMergeInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::FormulaRewriteSpecArchive*
Arena::CreateMaybeMessage< ::TSCE::FormulaRewriteSpecArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::FormulaRewriteSpecArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellCoordinateFormulaPairArchive*
Arena::CreateMaybeMessage< ::TSCE::CellCoordinateFormulaPairArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellCoordinateFormulaPairArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellCoordinateArchive*
Arena::CreateMaybeMessage< ::TSCE::CellCoordinateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellCoordinateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellCoordinateVectorArchive*
Arena::CreateMaybeMessage< ::TSCE::CellCoordinateVectorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellCoordinateVectorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellCoordinateObjectPairArchive*
Arena::CreateMaybeMessage< ::TSCE::CellCoordinateObjectPairArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellCoordinateObjectPairArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellCoordinateObjectMapArchive*
Arena::CreateMaybeMessage< ::TSCE::CellCoordinateObjectMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellCoordinateObjectMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::OwnerFormulaMapArchive*
Arena::CreateMaybeMessage< ::TSCE::OwnerFormulaMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::OwnerFormulaMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::FormulaRewriteCommandArchive*
Arena::CreateMaybeMessage< ::TSCE::FormulaRewriteCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::FormulaRewriteCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::NumberTrackedReferencePairArchive*
Arena::CreateMaybeMessage< ::TSCE::NumberTrackedReferencePairArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::NumberTrackedReferencePairArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::NumberToTrackedReferenceMapArchive*
Arena::CreateMaybeMessage< ::TSCE::NumberToTrackedReferenceMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::NumberToTrackedReferenceMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::TrackedReferencesRewriteCommandArchive*
Arena::CreateMaybeMessage< ::TSCE::TrackedReferencesRewriteCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::TrackedReferencesRewriteCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::TrackedReferenceArchive*
Arena::CreateMaybeMessage< ::TSCE::TrackedReferenceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::TrackedReferenceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ReferenceTrackerArchive*
Arena::CreateMaybeMessage< ::TSCE::ReferenceTrackerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ReferenceTrackerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::BooleanCellValueArchive*
Arena::CreateMaybeMessage< ::TSCE::BooleanCellValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::BooleanCellValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::DateCellValueArchive*
Arena::CreateMaybeMessage< ::TSCE::DateCellValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::DateCellValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::NumberCellValueArchive*
Arena::CreateMaybeMessage< ::TSCE::NumberCellValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::NumberCellValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::StringCellValueArchive*
Arena::CreateMaybeMessage< ::TSCE::StringCellValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::StringCellValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellValueArchive*
Arena::CreateMaybeMessage< ::TSCE::CellValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellValueArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
