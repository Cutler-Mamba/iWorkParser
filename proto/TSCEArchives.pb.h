// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCEArchives.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TSCEArchives_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TSCEArchives_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSKArchives.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TSCEArchives_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TSCEArchives_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSCEArchives_2eproto;
namespace TSCE {
class ASTNodeArrayArchive;
struct ASTNodeArrayArchiveDefaultTypeInternal;
extern ASTNodeArrayArchiveDefaultTypeInternal _ASTNodeArrayArchive_default_instance_;
class ASTNodeArrayArchive_ASTColumnCoordinateArchive;
struct ASTNodeArrayArchive_ASTColumnCoordinateArchiveDefaultTypeInternal;
extern ASTNodeArrayArchive_ASTColumnCoordinateArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTColumnCoordinateArchive_default_instance_;
class ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive;
struct ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchiveDefaultTypeInternal;
extern ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive_default_instance_;
class ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive;
struct ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchiveDefaultTypeInternal;
extern ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive_default_instance_;
class ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive;
struct ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchiveDefaultTypeInternal;
extern ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive_default_instance_;
class ASTNodeArrayArchive_ASTNodeArchive;
struct ASTNodeArrayArchive_ASTNodeArchiveDefaultTypeInternal;
extern ASTNodeArrayArchive_ASTNodeArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTNodeArchive_default_instance_;
class ASTNodeArrayArchive_ASTRowCoordinateArchive;
struct ASTNodeArrayArchive_ASTRowCoordinateArchiveDefaultTypeInternal;
extern ASTNodeArrayArchive_ASTRowCoordinateArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTRowCoordinateArchive_default_instance_;
class BooleanCellValueArchive;
struct BooleanCellValueArchiveDefaultTypeInternal;
extern BooleanCellValueArchiveDefaultTypeInternal _BooleanCellValueArchive_default_instance_;
class CFUUIDArchive;
struct CFUUIDArchiveDefaultTypeInternal;
extern CFUUIDArchiveDefaultTypeInternal _CFUUIDArchive_default_instance_;
class CalculationEngineArchive;
struct CalculationEngineArchiveDefaultTypeInternal;
extern CalculationEngineArchiveDefaultTypeInternal _CalculationEngineArchive_default_instance_;
class CellCoordinateArchive;
struct CellCoordinateArchiveDefaultTypeInternal;
extern CellCoordinateArchiveDefaultTypeInternal _CellCoordinateArchive_default_instance_;
class CellCoordinateFormulaPairArchive;
struct CellCoordinateFormulaPairArchiveDefaultTypeInternal;
extern CellCoordinateFormulaPairArchiveDefaultTypeInternal _CellCoordinateFormulaPairArchive_default_instance_;
class CellCoordinateObjectMapArchive;
struct CellCoordinateObjectMapArchiveDefaultTypeInternal;
extern CellCoordinateObjectMapArchiveDefaultTypeInternal _CellCoordinateObjectMapArchive_default_instance_;
class CellCoordinateObjectPairArchive;
struct CellCoordinateObjectPairArchiveDefaultTypeInternal;
extern CellCoordinateObjectPairArchiveDefaultTypeInternal _CellCoordinateObjectPairArchive_default_instance_;
class CellCoordinateVectorArchive;
struct CellCoordinateVectorArchiveDefaultTypeInternal;
extern CellCoordinateVectorArchiveDefaultTypeInternal _CellCoordinateVectorArchive_default_instance_;
class CellDependenciesArchive;
struct CellDependenciesArchiveDefaultTypeInternal;
extern CellDependenciesArchiveDefaultTypeInternal _CellDependenciesArchive_default_instance_;
class CellMergeInfoArchive;
struct CellMergeInfoArchiveDefaultTypeInternal;
extern CellMergeInfoArchiveDefaultTypeInternal _CellMergeInfoArchive_default_instance_;
class CellRecordArchive;
struct CellRecordArchiveDefaultTypeInternal;
extern CellRecordArchiveDefaultTypeInternal _CellRecordArchive_default_instance_;
class CellReferenceArchive;
struct CellReferenceArchiveDefaultTypeInternal;
extern CellReferenceArchiveDefaultTypeInternal _CellReferenceArchive_default_instance_;
class CellValueArchive;
struct CellValueArchiveDefaultTypeInternal;
extern CellValueArchiveDefaultTypeInternal _CellValueArchive_default_instance_;
class DateCellValueArchive;
struct DateCellValueArchiveDefaultTypeInternal;
extern DateCellValueArchiveDefaultTypeInternal _DateCellValueArchive_default_instance_;
class DependencyTrackerArchive;
struct DependencyTrackerArchiveDefaultTypeInternal;
extern DependencyTrackerArchiveDefaultTypeInternal _DependencyTrackerArchive_default_instance_;
class EdgeArchive;
struct EdgeArchiveDefaultTypeInternal;
extern EdgeArchiveDefaultTypeInternal _EdgeArchive_default_instance_;
class EdgesArchive;
struct EdgesArchiveDefaultTypeInternal;
extern EdgesArchiveDefaultTypeInternal _EdgesArchive_default_instance_;
class FormatStructArchive;
struct FormatStructArchiveDefaultTypeInternal;
extern FormatStructArchiveDefaultTypeInternal _FormatStructArchive_default_instance_;
class FormulaArchive;
struct FormulaArchiveDefaultTypeInternal;
extern FormulaArchiveDefaultTypeInternal _FormulaArchive_default_instance_;
class FormulaOwnerInfoArchive;
struct FormulaOwnerInfoArchiveDefaultTypeInternal;
extern FormulaOwnerInfoArchiveDefaultTypeInternal _FormulaOwnerInfoArchive_default_instance_;
class FormulaRewriteCommandArchive;
struct FormulaRewriteCommandArchiveDefaultTypeInternal;
extern FormulaRewriteCommandArchiveDefaultTypeInternal _FormulaRewriteCommandArchive_default_instance_;
class FormulaRewriteSpecArchive;
struct FormulaRewriteSpecArchiveDefaultTypeInternal;
extern FormulaRewriteSpecArchiveDefaultTypeInternal _FormulaRewriteSpecArchive_default_instance_;
class FormulaTranslationFlagsArchive;
struct FormulaTranslationFlagsArchiveDefaultTypeInternal;
extern FormulaTranslationFlagsArchiveDefaultTypeInternal _FormulaTranslationFlagsArchive_default_instance_;
class InternalCellReferenceArchive;
struct InternalCellReferenceArchiveDefaultTypeInternal;
extern InternalCellReferenceArchiveDefaultTypeInternal _InternalCellReferenceArchive_default_instance_;
class InternalRangeReferenceArchive;
struct InternalRangeReferenceArchiveDefaultTypeInternal;
extern InternalRangeReferenceArchiveDefaultTypeInternal _InternalRangeReferenceArchive_default_instance_;
class NameTrackedReferencePair;
struct NameTrackedReferencePairDefaultTypeInternal;
extern NameTrackedReferencePairDefaultTypeInternal _NameTrackedReferencePair_default_instance_;
class NamedReferenceManagerArchive;
struct NamedReferenceManagerArchiveDefaultTypeInternal;
extern NamedReferenceManagerArchiveDefaultTypeInternal _NamedReferenceManagerArchive_default_instance_;
class NamesByTrackedReferenceArchive;
struct NamesByTrackedReferenceArchiveDefaultTypeInternal;
extern NamesByTrackedReferenceArchiveDefaultTypeInternal _NamesByTrackedReferenceArchive_default_instance_;
class NumberCellValueArchive;
struct NumberCellValueArchiveDefaultTypeInternal;
extern NumberCellValueArchiveDefaultTypeInternal _NumberCellValueArchive_default_instance_;
class NumberToTrackedReferenceMapArchive;
struct NumberToTrackedReferenceMapArchiveDefaultTypeInternal;
extern NumberToTrackedReferenceMapArchiveDefaultTypeInternal _NumberToTrackedReferenceMapArchive_default_instance_;
class NumberTrackedReferencePairArchive;
struct NumberTrackedReferencePairArchiveDefaultTypeInternal;
extern NumberTrackedReferencePairArchiveDefaultTypeInternal _NumberTrackedReferencePairArchive_default_instance_;
class OwnerFormulaMapArchive;
struct OwnerFormulaMapArchiveDefaultTypeInternal;
extern OwnerFormulaMapArchiveDefaultTypeInternal _OwnerFormulaMapArchive_default_instance_;
class OwnerIDMapArchive;
struct OwnerIDMapArchiveDefaultTypeInternal;
extern OwnerIDMapArchiveDefaultTypeInternal _OwnerIDMapArchive_default_instance_;
class OwnerIDMapArchive_OwnerIDMapArchiveEntry;
struct OwnerIDMapArchive_OwnerIDMapArchiveEntryDefaultTypeInternal;
extern OwnerIDMapArchive_OwnerIDMapArchiveEntryDefaultTypeInternal _OwnerIDMapArchive_OwnerIDMapArchiveEntry_default_instance_;
class RTreeArchive;
struct RTreeArchiveDefaultTypeInternal;
extern RTreeArchiveDefaultTypeInternal _RTreeArchive_default_instance_;
class RTreeInternalNodeContentsArchive;
struct RTreeInternalNodeContentsArchiveDefaultTypeInternal;
extern RTreeInternalNodeContentsArchiveDefaultTypeInternal _RTreeInternalNodeContentsArchive_default_instance_;
class RTreeLeafNodeContentsArchive;
struct RTreeLeafNodeContentsArchiveDefaultTypeInternal;
extern RTreeLeafNodeContentsArchiveDefaultTypeInternal _RTreeLeafNodeContentsArchive_default_instance_;
class RTreeNodeArchive;
struct RTreeNodeArchiveDefaultTypeInternal;
extern RTreeNodeArchiveDefaultTypeInternal _RTreeNodeArchive_default_instance_;
class RangeBackDependencyArchive;
struct RangeBackDependencyArchiveDefaultTypeInternal;
extern RangeBackDependencyArchiveDefaultTypeInternal _RangeBackDependencyArchive_default_instance_;
class RangeCoordinateArchive;
struct RangeCoordinateArchiveDefaultTypeInternal;
extern RangeCoordinateArchiveDefaultTypeInternal _RangeCoordinateArchive_default_instance_;
class RangeDependenciesArchive;
struct RangeDependenciesArchiveDefaultTypeInternal;
extern RangeDependenciesArchiveDefaultTypeInternal _RangeDependenciesArchive_default_instance_;
class RangeMovedInfoArchive;
struct RangeMovedInfoArchiveDefaultTypeInternal;
extern RangeMovedInfoArchiveDefaultTypeInternal _RangeMovedInfoArchive_default_instance_;
class RangeReferenceArchive;
struct RangeReferenceArchiveDefaultTypeInternal;
extern RangeReferenceArchiveDefaultTypeInternal _RangeReferenceArchive_default_instance_;
class ReferenceArchive;
struct ReferenceArchiveDefaultTypeInternal;
extern ReferenceArchiveDefaultTypeInternal _ReferenceArchive_default_instance_;
class ReferenceTrackerArchive;
struct ReferenceTrackerArchiveDefaultTypeInternal;
extern ReferenceTrackerArchiveDefaultTypeInternal _ReferenceTrackerArchive_default_instance_;
class RewriteSortMappingArchive;
struct RewriteSortMappingArchiveDefaultTypeInternal;
extern RewriteSortMappingArchiveDefaultTypeInternal _RewriteSortMappingArchive_default_instance_;
class SpanningDependenciesArchive;
struct SpanningDependenciesArchiveDefaultTypeInternal;
extern SpanningDependenciesArchiveDefaultTypeInternal _SpanningDependenciesArchive_default_instance_;
class SpanningDependenciesArchive_ReferringColumnToLocalCells;
struct SpanningDependenciesArchive_ReferringColumnToLocalCellsDefaultTypeInternal;
extern SpanningDependenciesArchive_ReferringColumnToLocalCellsDefaultTypeInternal _SpanningDependenciesArchive_ReferringColumnToLocalCells_default_instance_;
class SpanningDependenciesArchive_ReferringColumnToRemoteCells;
struct SpanningDependenciesArchive_ReferringColumnToRemoteCellsDefaultTypeInternal;
extern SpanningDependenciesArchive_ReferringColumnToRemoteCellsDefaultTypeInternal _SpanningDependenciesArchive_ReferringColumnToRemoteCells_default_instance_;
class StringCellValueArchive;
struct StringCellValueArchiveDefaultTypeInternal;
extern StringCellValueArchiveDefaultTypeInternal _StringCellValueArchive_default_instance_;
class TableResizedInfoArchive;
struct TableResizedInfoArchiveDefaultTypeInternal;
extern TableResizedInfoArchiveDefaultTypeInternal _TableResizedInfoArchive_default_instance_;
class TectonicShiftArchive;
struct TectonicShiftArchiveDefaultTypeInternal;
extern TectonicShiftArchiveDefaultTypeInternal _TectonicShiftArchive_default_instance_;
class TrackedReferenceArchive;
struct TrackedReferenceArchiveDefaultTypeInternal;
extern TrackedReferenceArchiveDefaultTypeInternal _TrackedReferenceArchive_default_instance_;
class TrackedReferencesRewriteCommandArchive;
struct TrackedReferencesRewriteCommandArchiveDefaultTypeInternal;
extern TrackedReferencesRewriteCommandArchiveDefaultTypeInternal _TrackedReferencesRewriteCommandArchive_default_instance_;
class VolatileDependenciesArchive;
struct VolatileDependenciesArchiveDefaultTypeInternal;
extern VolatileDependenciesArchiveDefaultTypeInternal _VolatileDependenciesArchive_default_instance_;
class WholeOwnerDependenciesArchive;
struct WholeOwnerDependenciesArchiveDefaultTypeInternal;
extern WholeOwnerDependenciesArchiveDefaultTypeInternal _WholeOwnerDependenciesArchive_default_instance_;
}  // namespace TSCE
PROTOBUF_NAMESPACE_OPEN
template<> ::TSCE::ASTNodeArrayArchive* Arena::CreateMaybeMessage<::TSCE::ASTNodeArrayArchive>(Arena*);
template<> ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* Arena::CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive>(Arena*);
template<> ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* Arena::CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive>(Arena*);
template<> ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* Arena::CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive>(Arena*);
template<> ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* Arena::CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive>(Arena*);
template<> ::TSCE::ASTNodeArrayArchive_ASTNodeArchive* Arena::CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTNodeArchive>(Arena*);
template<> ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* Arena::CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive>(Arena*);
template<> ::TSCE::BooleanCellValueArchive* Arena::CreateMaybeMessage<::TSCE::BooleanCellValueArchive>(Arena*);
template<> ::TSCE::CFUUIDArchive* Arena::CreateMaybeMessage<::TSCE::CFUUIDArchive>(Arena*);
template<> ::TSCE::CalculationEngineArchive* Arena::CreateMaybeMessage<::TSCE::CalculationEngineArchive>(Arena*);
template<> ::TSCE::CellCoordinateArchive* Arena::CreateMaybeMessage<::TSCE::CellCoordinateArchive>(Arena*);
template<> ::TSCE::CellCoordinateFormulaPairArchive* Arena::CreateMaybeMessage<::TSCE::CellCoordinateFormulaPairArchive>(Arena*);
template<> ::TSCE::CellCoordinateObjectMapArchive* Arena::CreateMaybeMessage<::TSCE::CellCoordinateObjectMapArchive>(Arena*);
template<> ::TSCE::CellCoordinateObjectPairArchive* Arena::CreateMaybeMessage<::TSCE::CellCoordinateObjectPairArchive>(Arena*);
template<> ::TSCE::CellCoordinateVectorArchive* Arena::CreateMaybeMessage<::TSCE::CellCoordinateVectorArchive>(Arena*);
template<> ::TSCE::CellDependenciesArchive* Arena::CreateMaybeMessage<::TSCE::CellDependenciesArchive>(Arena*);
template<> ::TSCE::CellMergeInfoArchive* Arena::CreateMaybeMessage<::TSCE::CellMergeInfoArchive>(Arena*);
template<> ::TSCE::CellRecordArchive* Arena::CreateMaybeMessage<::TSCE::CellRecordArchive>(Arena*);
template<> ::TSCE::CellReferenceArchive* Arena::CreateMaybeMessage<::TSCE::CellReferenceArchive>(Arena*);
template<> ::TSCE::CellValueArchive* Arena::CreateMaybeMessage<::TSCE::CellValueArchive>(Arena*);
template<> ::TSCE::DateCellValueArchive* Arena::CreateMaybeMessage<::TSCE::DateCellValueArchive>(Arena*);
template<> ::TSCE::DependencyTrackerArchive* Arena::CreateMaybeMessage<::TSCE::DependencyTrackerArchive>(Arena*);
template<> ::TSCE::EdgeArchive* Arena::CreateMaybeMessage<::TSCE::EdgeArchive>(Arena*);
template<> ::TSCE::EdgesArchive* Arena::CreateMaybeMessage<::TSCE::EdgesArchive>(Arena*);
template<> ::TSCE::FormatStructArchive* Arena::CreateMaybeMessage<::TSCE::FormatStructArchive>(Arena*);
template<> ::TSCE::FormulaArchive* Arena::CreateMaybeMessage<::TSCE::FormulaArchive>(Arena*);
template<> ::TSCE::FormulaOwnerInfoArchive* Arena::CreateMaybeMessage<::TSCE::FormulaOwnerInfoArchive>(Arena*);
template<> ::TSCE::FormulaRewriteCommandArchive* Arena::CreateMaybeMessage<::TSCE::FormulaRewriteCommandArchive>(Arena*);
template<> ::TSCE::FormulaRewriteSpecArchive* Arena::CreateMaybeMessage<::TSCE::FormulaRewriteSpecArchive>(Arena*);
template<> ::TSCE::FormulaTranslationFlagsArchive* Arena::CreateMaybeMessage<::TSCE::FormulaTranslationFlagsArchive>(Arena*);
template<> ::TSCE::InternalCellReferenceArchive* Arena::CreateMaybeMessage<::TSCE::InternalCellReferenceArchive>(Arena*);
template<> ::TSCE::InternalRangeReferenceArchive* Arena::CreateMaybeMessage<::TSCE::InternalRangeReferenceArchive>(Arena*);
template<> ::TSCE::NameTrackedReferencePair* Arena::CreateMaybeMessage<::TSCE::NameTrackedReferencePair>(Arena*);
template<> ::TSCE::NamedReferenceManagerArchive* Arena::CreateMaybeMessage<::TSCE::NamedReferenceManagerArchive>(Arena*);
template<> ::TSCE::NamesByTrackedReferenceArchive* Arena::CreateMaybeMessage<::TSCE::NamesByTrackedReferenceArchive>(Arena*);
template<> ::TSCE::NumberCellValueArchive* Arena::CreateMaybeMessage<::TSCE::NumberCellValueArchive>(Arena*);
template<> ::TSCE::NumberToTrackedReferenceMapArchive* Arena::CreateMaybeMessage<::TSCE::NumberToTrackedReferenceMapArchive>(Arena*);
template<> ::TSCE::NumberTrackedReferencePairArchive* Arena::CreateMaybeMessage<::TSCE::NumberTrackedReferencePairArchive>(Arena*);
template<> ::TSCE::OwnerFormulaMapArchive* Arena::CreateMaybeMessage<::TSCE::OwnerFormulaMapArchive>(Arena*);
template<> ::TSCE::OwnerIDMapArchive* Arena::CreateMaybeMessage<::TSCE::OwnerIDMapArchive>(Arena*);
template<> ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry* Arena::CreateMaybeMessage<::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry>(Arena*);
template<> ::TSCE::RTreeArchive* Arena::CreateMaybeMessage<::TSCE::RTreeArchive>(Arena*);
template<> ::TSCE::RTreeInternalNodeContentsArchive* Arena::CreateMaybeMessage<::TSCE::RTreeInternalNodeContentsArchive>(Arena*);
template<> ::TSCE::RTreeLeafNodeContentsArchive* Arena::CreateMaybeMessage<::TSCE::RTreeLeafNodeContentsArchive>(Arena*);
template<> ::TSCE::RTreeNodeArchive* Arena::CreateMaybeMessage<::TSCE::RTreeNodeArchive>(Arena*);
template<> ::TSCE::RangeBackDependencyArchive* Arena::CreateMaybeMessage<::TSCE::RangeBackDependencyArchive>(Arena*);
template<> ::TSCE::RangeCoordinateArchive* Arena::CreateMaybeMessage<::TSCE::RangeCoordinateArchive>(Arena*);
template<> ::TSCE::RangeDependenciesArchive* Arena::CreateMaybeMessage<::TSCE::RangeDependenciesArchive>(Arena*);
template<> ::TSCE::RangeMovedInfoArchive* Arena::CreateMaybeMessage<::TSCE::RangeMovedInfoArchive>(Arena*);
template<> ::TSCE::RangeReferenceArchive* Arena::CreateMaybeMessage<::TSCE::RangeReferenceArchive>(Arena*);
template<> ::TSCE::ReferenceArchive* Arena::CreateMaybeMessage<::TSCE::ReferenceArchive>(Arena*);
template<> ::TSCE::ReferenceTrackerArchive* Arena::CreateMaybeMessage<::TSCE::ReferenceTrackerArchive>(Arena*);
template<> ::TSCE::RewriteSortMappingArchive* Arena::CreateMaybeMessage<::TSCE::RewriteSortMappingArchive>(Arena*);
template<> ::TSCE::SpanningDependenciesArchive* Arena::CreateMaybeMessage<::TSCE::SpanningDependenciesArchive>(Arena*);
template<> ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells* Arena::CreateMaybeMessage<::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells>(Arena*);
template<> ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells* Arena::CreateMaybeMessage<::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells>(Arena*);
template<> ::TSCE::StringCellValueArchive* Arena::CreateMaybeMessage<::TSCE::StringCellValueArchive>(Arena*);
template<> ::TSCE::TableResizedInfoArchive* Arena::CreateMaybeMessage<::TSCE::TableResizedInfoArchive>(Arena*);
template<> ::TSCE::TectonicShiftArchive* Arena::CreateMaybeMessage<::TSCE::TectonicShiftArchive>(Arena*);
template<> ::TSCE::TrackedReferenceArchive* Arena::CreateMaybeMessage<::TSCE::TrackedReferenceArchive>(Arena*);
template<> ::TSCE::TrackedReferencesRewriteCommandArchive* Arena::CreateMaybeMessage<::TSCE::TrackedReferencesRewriteCommandArchive>(Arena*);
template<> ::TSCE::VolatileDependenciesArchive* Arena::CreateMaybeMessage<::TSCE::VolatileDependenciesArchive>(Arena*);
template<> ::TSCE::WholeOwnerDependenciesArchive* Arena::CreateMaybeMessage<::TSCE::WholeOwnerDependenciesArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TSCE {

enum ReferenceArchive_ReferenceType : int {
  ReferenceArchive_ReferenceType_CELL_REFERENCE = 1,
  ReferenceArchive_ReferenceType_RANGE_REFERENCE = 2,
  ReferenceArchive_ReferenceType_NAME_DEPENDENCY = 3
};
bool ReferenceArchive_ReferenceType_IsValid(int value);
constexpr ReferenceArchive_ReferenceType ReferenceArchive_ReferenceType_ReferenceType_MIN = ReferenceArchive_ReferenceType_CELL_REFERENCE;
constexpr ReferenceArchive_ReferenceType ReferenceArchive_ReferenceType_ReferenceType_MAX = ReferenceArchive_ReferenceType_NAME_DEPENDENCY;
constexpr int ReferenceArchive_ReferenceType_ReferenceType_ARRAYSIZE = ReferenceArchive_ReferenceType_ReferenceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReferenceArchive_ReferenceType_descriptor();
template<typename T>
inline const std::string& ReferenceArchive_ReferenceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReferenceArchive_ReferenceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReferenceArchive_ReferenceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReferenceArchive_ReferenceType_descriptor(), enum_t_value);
}
inline bool ReferenceArchive_ReferenceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReferenceArchive_ReferenceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReferenceArchive_ReferenceType>(
    ReferenceArchive_ReferenceType_descriptor(), name, value);
}
enum SpanningDependenciesArchive_RangeContext : int {
  SpanningDependenciesArchive_RangeContext_DEFAULT = 0,
  SpanningDependenciesArchive_RangeContext_INCLUDE_HEADERS = 1
};
bool SpanningDependenciesArchive_RangeContext_IsValid(int value);
constexpr SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive_RangeContext_RangeContext_MIN = SpanningDependenciesArchive_RangeContext_DEFAULT;
constexpr SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive_RangeContext_RangeContext_MAX = SpanningDependenciesArchive_RangeContext_INCLUDE_HEADERS;
constexpr int SpanningDependenciesArchive_RangeContext_RangeContext_ARRAYSIZE = SpanningDependenciesArchive_RangeContext_RangeContext_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpanningDependenciesArchive_RangeContext_descriptor();
template<typename T>
inline const std::string& SpanningDependenciesArchive_RangeContext_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SpanningDependenciesArchive_RangeContext>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SpanningDependenciesArchive_RangeContext_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SpanningDependenciesArchive_RangeContext_descriptor(), enum_t_value);
}
inline bool SpanningDependenciesArchive_RangeContext_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SpanningDependenciesArchive_RangeContext* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SpanningDependenciesArchive_RangeContext>(
    SpanningDependenciesArchive_RangeContext_descriptor(), name, value);
}
enum CalculationEngineArchive_ExcelImportDateMode : int {
  CalculationEngineArchive_ExcelImportDateMode_DATE_MODE_1900 = 1,
  CalculationEngineArchive_ExcelImportDateMode_DATE_MODE_1900_LEGACY = 2,
  CalculationEngineArchive_ExcelImportDateMode_DATE_MODE_1904_LEGACY = 3
};
bool CalculationEngineArchive_ExcelImportDateMode_IsValid(int value);
constexpr CalculationEngineArchive_ExcelImportDateMode CalculationEngineArchive_ExcelImportDateMode_ExcelImportDateMode_MIN = CalculationEngineArchive_ExcelImportDateMode_DATE_MODE_1900;
constexpr CalculationEngineArchive_ExcelImportDateMode CalculationEngineArchive_ExcelImportDateMode_ExcelImportDateMode_MAX = CalculationEngineArchive_ExcelImportDateMode_DATE_MODE_1904_LEGACY;
constexpr int CalculationEngineArchive_ExcelImportDateMode_ExcelImportDateMode_ARRAYSIZE = CalculationEngineArchive_ExcelImportDateMode_ExcelImportDateMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CalculationEngineArchive_ExcelImportDateMode_descriptor();
template<typename T>
inline const std::string& CalculationEngineArchive_ExcelImportDateMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CalculationEngineArchive_ExcelImportDateMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CalculationEngineArchive_ExcelImportDateMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CalculationEngineArchive_ExcelImportDateMode_descriptor(), enum_t_value);
}
inline bool CalculationEngineArchive_ExcelImportDateMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CalculationEngineArchive_ExcelImportDateMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CalculationEngineArchive_ExcelImportDateMode>(
    CalculationEngineArchive_ExcelImportDateMode_descriptor(), name, value);
}
enum ASTNodeArrayArchive_ASTNodeType : int {
  ASTNodeArrayArchive_ASTNodeType_ADDITION_NODE = 1,
  ASTNodeArrayArchive_ASTNodeType_SUBTRACTION_NODE = 2,
  ASTNodeArrayArchive_ASTNodeType_MULTIPLICATION_NODE = 3,
  ASTNodeArrayArchive_ASTNodeType_DIVISION_NODE = 4,
  ASTNodeArrayArchive_ASTNodeType_POWER_NODE = 5,
  ASTNodeArrayArchive_ASTNodeType_CONCATENATION_NODE = 6,
  ASTNodeArrayArchive_ASTNodeType_GREATER_THAN_NODE = 7,
  ASTNodeArrayArchive_ASTNodeType_GREATER_THAN_OR_EQUAL_TO_NODE = 8,
  ASTNodeArrayArchive_ASTNodeType_LESS_THAN_NODE = 9,
  ASTNodeArrayArchive_ASTNodeType_LESS_THAN_OR_EQUAL_TO_NODE = 10,
  ASTNodeArrayArchive_ASTNodeType_EQUAL_TO_NODE = 11,
  ASTNodeArrayArchive_ASTNodeType_NOT_EQUAL_TO_NODE = 12,
  ASTNodeArrayArchive_ASTNodeType_NEGATION_NODE = 13,
  ASTNodeArrayArchive_ASTNodeType_PLUS_SIGN_NODE = 14,
  ASTNodeArrayArchive_ASTNodeType_PERCENT_NODE = 15,
  ASTNodeArrayArchive_ASTNodeType_FUNCTION_NODE = 16,
  ASTNodeArrayArchive_ASTNodeType_NUMBER_NODE = 17,
  ASTNodeArrayArchive_ASTNodeType_BOOLEAN_NODE = 18,
  ASTNodeArrayArchive_ASTNodeType_STRING_NODE = 19,
  ASTNodeArrayArchive_ASTNodeType_DATE_NODE = 20,
  ASTNodeArrayArchive_ASTNodeType_DURATION_NODE = 21,
  ASTNodeArrayArchive_ASTNodeType_EMPTY_ARGUMENT_NODE = 22,
  ASTNodeArrayArchive_ASTNodeType_TOKEN_NODE = 23,
  ASTNodeArrayArchive_ASTNodeType_ARRAY_NODE = 24,
  ASTNodeArrayArchive_ASTNodeType_LIST_NODE = 25,
  ASTNodeArrayArchive_ASTNodeType_THUNK_NODE = 26,
  ASTNodeArrayArchive_ASTNodeType_LOCAL_CELL_REFERENCE_NODE = 27,
  ASTNodeArrayArchive_ASTNodeType_CROSS_TABLE_CELL_REFERENCE_NODE = 28,
  ASTNodeArrayArchive_ASTNodeType_COLON_NODE = 29,
  ASTNodeArrayArchive_ASTNodeType_REFERENCE_ERROR_NODE = 30,
  ASTNodeArrayArchive_ASTNodeType_UNKNOWN_FUNCTION_NODE = 31,
  ASTNodeArrayArchive_ASTNodeType_APPEND_WHITESPACE_NODE = 32,
  ASTNodeArrayArchive_ASTNodeType_PREPEND_WHITESPACE_NODE = 33,
  ASTNodeArrayArchive_ASTNodeType_BEGIN_THUNK_NODE = 34,
  ASTNodeArrayArchive_ASTNodeType_END_THUNK_NODE = 35,
  ASTNodeArrayArchive_ASTNodeType_CELL_REFERENCE_NODE = 36
};
bool ASTNodeArrayArchive_ASTNodeType_IsValid(int value);
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive_ASTNodeType_ASTNodeType_MIN = ASTNodeArrayArchive_ASTNodeType_ADDITION_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive_ASTNodeType_ASTNodeType_MAX = ASTNodeArrayArchive_ASTNodeType_CELL_REFERENCE_NODE;
constexpr int ASTNodeArrayArchive_ASTNodeType_ASTNodeType_ARRAYSIZE = ASTNodeArrayArchive_ASTNodeType_ASTNodeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ASTNodeArrayArchive_ASTNodeType_descriptor();
template<typename T>
inline const std::string& ASTNodeArrayArchive_ASTNodeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ASTNodeArrayArchive_ASTNodeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ASTNodeArrayArchive_ASTNodeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ASTNodeArrayArchive_ASTNodeType_descriptor(), enum_t_value);
}
inline bool ASTNodeArrayArchive_ASTNodeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ASTNodeArrayArchive_ASTNodeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ASTNodeArrayArchive_ASTNodeType>(
    ASTNodeArrayArchive_ASTNodeType_descriptor(), name, value);
}
enum FormulaRewriteSpecArchive_RewriteType : int {
  FormulaRewriteSpecArchive_RewriteType_TECTONIC_SHIFT = 1,
  FormulaRewriteSpecArchive_RewriteType_REMAP_WITH_SORT_MAPPING = 2,
  FormulaRewriteSpecArchive_RewriteType_MOVE_RANGE = 3,
  FormulaRewriteSpecArchive_RewriteType_DELETE_OWNER = 4,
  FormulaRewriteSpecArchive_RewriteType_TABLE_RESIZE = 5,
  FormulaRewriteSpecArchive_RewriteType_CELL_MERGE = 6
};
bool FormulaRewriteSpecArchive_RewriteType_IsValid(int value);
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive_RewriteType_RewriteType_MIN = FormulaRewriteSpecArchive_RewriteType_TECTONIC_SHIFT;
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive_RewriteType_RewriteType_MAX = FormulaRewriteSpecArchive_RewriteType_CELL_MERGE;
constexpr int FormulaRewriteSpecArchive_RewriteType_RewriteType_ARRAYSIZE = FormulaRewriteSpecArchive_RewriteType_RewriteType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FormulaRewriteSpecArchive_RewriteType_descriptor();
template<typename T>
inline const std::string& FormulaRewriteSpecArchive_RewriteType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FormulaRewriteSpecArchive_RewriteType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FormulaRewriteSpecArchive_RewriteType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FormulaRewriteSpecArchive_RewriteType_descriptor(), enum_t_value);
}
inline bool FormulaRewriteSpecArchive_RewriteType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FormulaRewriteSpecArchive_RewriteType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FormulaRewriteSpecArchive_RewriteType>(
    FormulaRewriteSpecArchive_RewriteType_descriptor(), name, value);
}
enum CellValueArchive_CellValueType : int {
  CellValueArchive_CellValueType_NIL_TYPE = 1,
  CellValueArchive_CellValueType_BOOLEAN_TYPE = 2,
  CellValueArchive_CellValueType_DATE_TYPE = 3,
  CellValueArchive_CellValueType_NUMBER_TYPE = 4,
  CellValueArchive_CellValueType_STRING_TYPE = 5
};
bool CellValueArchive_CellValueType_IsValid(int value);
constexpr CellValueArchive_CellValueType CellValueArchive_CellValueType_CellValueType_MIN = CellValueArchive_CellValueType_NIL_TYPE;
constexpr CellValueArchive_CellValueType CellValueArchive_CellValueType_CellValueType_MAX = CellValueArchive_CellValueType_STRING_TYPE;
constexpr int CellValueArchive_CellValueType_CellValueType_ARRAYSIZE = CellValueArchive_CellValueType_CellValueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CellValueArchive_CellValueType_descriptor();
template<typename T>
inline const std::string& CellValueArchive_CellValueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CellValueArchive_CellValueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CellValueArchive_CellValueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CellValueArchive_CellValueType_descriptor(), enum_t_value);
}
inline bool CellValueArchive_CellValueType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CellValueArchive_CellValueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CellValueArchive_CellValueType>(
    CellValueArchive_CellValueType_descriptor(), name, value);
}
// ===================================================================

class CFUUIDArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CFUUIDArchive) */ {
 public:
  inline CFUUIDArchive() : CFUUIDArchive(nullptr) {}
  ~CFUUIDArchive() override;
  explicit PROTOBUF_CONSTEXPR CFUUIDArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CFUUIDArchive(const CFUUIDArchive& from);
  CFUUIDArchive(CFUUIDArchive&& from) noexcept
    : CFUUIDArchive() {
    *this = ::std::move(from);
  }

  inline CFUUIDArchive& operator=(const CFUUIDArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFUUIDArchive& operator=(CFUUIDArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CFUUIDArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CFUUIDArchive* internal_default_instance() {
    return reinterpret_cast<const CFUUIDArchive*>(
               &_CFUUIDArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CFUUIDArchive& a, CFUUIDArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CFUUIDArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CFUUIDArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CFUUIDArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CFUUIDArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CFUUIDArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CFUUIDArchive& from) {
    CFUUIDArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFUUIDArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CFUUIDArchive";
  }
  protected:
  explicit CFUUIDArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidBytesFieldNumber = 1,
    kUuidW0FieldNumber = 2,
    kUuidW1FieldNumber = 3,
    kUuidW2FieldNumber = 4,
    kUuidW3FieldNumber = 5,
  };
  // optional bytes uuid_bytes = 1;
  bool has_uuid_bytes() const;
  private:
  bool _internal_has_uuid_bytes() const;
  public:
  void clear_uuid_bytes();
  const std::string& uuid_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid_bytes();
  PROTOBUF_NODISCARD std::string* release_uuid_bytes();
  void set_allocated_uuid_bytes(std::string* uuid_bytes);
  private:
  const std::string& _internal_uuid_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid_bytes(const std::string& value);
  std::string* _internal_mutable_uuid_bytes();
  public:

  // optional uint32 uuid_w0 = 2;
  bool has_uuid_w0() const;
  private:
  bool _internal_has_uuid_w0() const;
  public:
  void clear_uuid_w0();
  uint32_t uuid_w0() const;
  void set_uuid_w0(uint32_t value);
  private:
  uint32_t _internal_uuid_w0() const;
  void _internal_set_uuid_w0(uint32_t value);
  public:

  // optional uint32 uuid_w1 = 3;
  bool has_uuid_w1() const;
  private:
  bool _internal_has_uuid_w1() const;
  public:
  void clear_uuid_w1();
  uint32_t uuid_w1() const;
  void set_uuid_w1(uint32_t value);
  private:
  uint32_t _internal_uuid_w1() const;
  void _internal_set_uuid_w1(uint32_t value);
  public:

  // optional uint32 uuid_w2 = 4;
  bool has_uuid_w2() const;
  private:
  bool _internal_has_uuid_w2() const;
  public:
  void clear_uuid_w2();
  uint32_t uuid_w2() const;
  void set_uuid_w2(uint32_t value);
  private:
  uint32_t _internal_uuid_w2() const;
  void _internal_set_uuid_w2(uint32_t value);
  public:

  // optional uint32 uuid_w3 = 5;
  bool has_uuid_w3() const;
  private:
  bool _internal_has_uuid_w3() const;
  public:
  void clear_uuid_w3();
  uint32_t uuid_w3() const;
  void set_uuid_w3(uint32_t value);
  private:
  uint32_t _internal_uuid_w3() const;
  void _internal_set_uuid_w3(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.CFUUIDArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_bytes_;
    uint32_t uuid_w0_;
    uint32_t uuid_w1_;
    uint32_t uuid_w2_;
    uint32_t uuid_w3_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CellReferenceArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CellReferenceArchive) */ {
 public:
  inline CellReferenceArchive() : CellReferenceArchive(nullptr) {}
  ~CellReferenceArchive() override;
  explicit PROTOBUF_CONSTEXPR CellReferenceArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellReferenceArchive(const CellReferenceArchive& from);
  CellReferenceArchive(CellReferenceArchive&& from) noexcept
    : CellReferenceArchive() {
    *this = ::std::move(from);
  }

  inline CellReferenceArchive& operator=(const CellReferenceArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellReferenceArchive& operator=(CellReferenceArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellReferenceArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellReferenceArchive* internal_default_instance() {
    return reinterpret_cast<const CellReferenceArchive*>(
               &_CellReferenceArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CellReferenceArchive& a, CellReferenceArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellReferenceArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellReferenceArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CellReferenceArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CellReferenceArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CellReferenceArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CellReferenceArchive& from) {
    CellReferenceArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellReferenceArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CellReferenceArchive";
  }
  protected:
  explicit CellReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableIdFieldNumber = 3,
    kColumnFieldNumber = 1,
    kRowFieldNumber = 2,
  };
  // required .TSCE.CFUUIDArchive table_id = 3;
  bool has_table_id() const;
  private:
  bool _internal_has_table_id() const;
  public:
  void clear_table_id();
  const ::TSCE::CFUUIDArchive& table_id() const;
  PROTOBUF_NODISCARD ::TSCE::CFUUIDArchive* release_table_id();
  ::TSCE::CFUUIDArchive* mutable_table_id();
  void set_allocated_table_id(::TSCE::CFUUIDArchive* table_id);
  private:
  const ::TSCE::CFUUIDArchive& _internal_table_id() const;
  ::TSCE::CFUUIDArchive* _internal_mutable_table_id();
  public:
  void unsafe_arena_set_allocated_table_id(
      ::TSCE::CFUUIDArchive* table_id);
  ::TSCE::CFUUIDArchive* unsafe_arena_release_table_id();

  // required uint32 column = 1;
  bool has_column() const;
  private:
  bool _internal_has_column() const;
  public:
  void clear_column();
  uint32_t column() const;
  void set_column(uint32_t value);
  private:
  uint32_t _internal_column() const;
  void _internal_set_column(uint32_t value);
  public:

  // required uint32 row = 2;
  bool has_row() const;
  private:
  bool _internal_has_row() const;
  public:
  void clear_row();
  uint32_t row() const;
  void set_row(uint32_t value);
  private:
  uint32_t _internal_row() const;
  void _internal_set_row(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.CellReferenceArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCE::CFUUIDArchive* table_id_;
    uint32_t column_;
    uint32_t row_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class InternalCellReferenceArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.InternalCellReferenceArchive) */ {
 public:
  inline InternalCellReferenceArchive() : InternalCellReferenceArchive(nullptr) {}
  ~InternalCellReferenceArchive() override;
  explicit PROTOBUF_CONSTEXPR InternalCellReferenceArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternalCellReferenceArchive(const InternalCellReferenceArchive& from);
  InternalCellReferenceArchive(InternalCellReferenceArchive&& from) noexcept
    : InternalCellReferenceArchive() {
    *this = ::std::move(from);
  }

  inline InternalCellReferenceArchive& operator=(const InternalCellReferenceArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalCellReferenceArchive& operator=(InternalCellReferenceArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InternalCellReferenceArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const InternalCellReferenceArchive* internal_default_instance() {
    return reinterpret_cast<const InternalCellReferenceArchive*>(
               &_InternalCellReferenceArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InternalCellReferenceArchive& a, InternalCellReferenceArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalCellReferenceArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternalCellReferenceArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InternalCellReferenceArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InternalCellReferenceArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InternalCellReferenceArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InternalCellReferenceArchive& from) {
    InternalCellReferenceArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalCellReferenceArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.InternalCellReferenceArchive";
  }
  protected:
  explicit InternalCellReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordinateFieldNumber = 1,
    kOwnerIdFieldNumber = 2,
  };
  // required .TSCE.CellCoordinateArchive coordinate = 1;
  bool has_coordinate() const;
  private:
  bool _internal_has_coordinate() const;
  public:
  void clear_coordinate();
  const ::TSCE::CellCoordinateArchive& coordinate() const;
  PROTOBUF_NODISCARD ::TSCE::CellCoordinateArchive* release_coordinate();
  ::TSCE::CellCoordinateArchive* mutable_coordinate();
  void set_allocated_coordinate(::TSCE::CellCoordinateArchive* coordinate);
  private:
  const ::TSCE::CellCoordinateArchive& _internal_coordinate() const;
  ::TSCE::CellCoordinateArchive* _internal_mutable_coordinate();
  public:
  void unsafe_arena_set_allocated_coordinate(
      ::TSCE::CellCoordinateArchive* coordinate);
  ::TSCE::CellCoordinateArchive* unsafe_arena_release_coordinate();

  // required uint32 owner_id = 2;
  bool has_owner_id() const;
  private:
  bool _internal_has_owner_id() const;
  public:
  void clear_owner_id();
  uint32_t owner_id() const;
  void set_owner_id(uint32_t value);
  private:
  uint32_t _internal_owner_id() const;
  void _internal_set_owner_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.InternalCellReferenceArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCE::CellCoordinateArchive* coordinate_;
    uint32_t owner_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RangeReferenceArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RangeReferenceArchive) */ {
 public:
  inline RangeReferenceArchive() : RangeReferenceArchive(nullptr) {}
  ~RangeReferenceArchive() override;
  explicit PROTOBUF_CONSTEXPR RangeReferenceArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RangeReferenceArchive(const RangeReferenceArchive& from);
  RangeReferenceArchive(RangeReferenceArchive&& from) noexcept
    : RangeReferenceArchive() {
    *this = ::std::move(from);
  }

  inline RangeReferenceArchive& operator=(const RangeReferenceArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeReferenceArchive& operator=(RangeReferenceArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RangeReferenceArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RangeReferenceArchive* internal_default_instance() {
    return reinterpret_cast<const RangeReferenceArchive*>(
               &_RangeReferenceArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RangeReferenceArchive& a, RangeReferenceArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeReferenceArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RangeReferenceArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RangeReferenceArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RangeReferenceArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RangeReferenceArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RangeReferenceArchive& from) {
    RangeReferenceArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeReferenceArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RangeReferenceArchive";
  }
  protected:
  explicit RangeReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableIdFieldNumber = 1,
    kTopLeftColumnFieldNumber = 2,
    kTopLeftRowFieldNumber = 3,
    kBottomRightColumnFieldNumber = 4,
    kBottomRightRowFieldNumber = 5,
  };
  // required .TSCE.CFUUIDArchive table_id = 1;
  bool has_table_id() const;
  private:
  bool _internal_has_table_id() const;
  public:
  void clear_table_id();
  const ::TSCE::CFUUIDArchive& table_id() const;
  PROTOBUF_NODISCARD ::TSCE::CFUUIDArchive* release_table_id();
  ::TSCE::CFUUIDArchive* mutable_table_id();
  void set_allocated_table_id(::TSCE::CFUUIDArchive* table_id);
  private:
  const ::TSCE::CFUUIDArchive& _internal_table_id() const;
  ::TSCE::CFUUIDArchive* _internal_mutable_table_id();
  public:
  void unsafe_arena_set_allocated_table_id(
      ::TSCE::CFUUIDArchive* table_id);
  ::TSCE::CFUUIDArchive* unsafe_arena_release_table_id();

  // required uint32 top_left_column = 2;
  bool has_top_left_column() const;
  private:
  bool _internal_has_top_left_column() const;
  public:
  void clear_top_left_column();
  uint32_t top_left_column() const;
  void set_top_left_column(uint32_t value);
  private:
  uint32_t _internal_top_left_column() const;
  void _internal_set_top_left_column(uint32_t value);
  public:

  // required uint32 top_left_row = 3;
  bool has_top_left_row() const;
  private:
  bool _internal_has_top_left_row() const;
  public:
  void clear_top_left_row();
  uint32_t top_left_row() const;
  void set_top_left_row(uint32_t value);
  private:
  uint32_t _internal_top_left_row() const;
  void _internal_set_top_left_row(uint32_t value);
  public:

  // required uint32 bottom_right_column = 4;
  bool has_bottom_right_column() const;
  private:
  bool _internal_has_bottom_right_column() const;
  public:
  void clear_bottom_right_column();
  uint32_t bottom_right_column() const;
  void set_bottom_right_column(uint32_t value);
  private:
  uint32_t _internal_bottom_right_column() const;
  void _internal_set_bottom_right_column(uint32_t value);
  public:

  // required uint32 bottom_right_row = 5;
  bool has_bottom_right_row() const;
  private:
  bool _internal_has_bottom_right_row() const;
  public:
  void clear_bottom_right_row();
  uint32_t bottom_right_row() const;
  void set_bottom_right_row(uint32_t value);
  private:
  uint32_t _internal_bottom_right_row() const;
  void _internal_set_bottom_right_row(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.RangeReferenceArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCE::CFUUIDArchive* table_id_;
    uint32_t top_left_column_;
    uint32_t top_left_row_;
    uint32_t bottom_right_column_;
    uint32_t bottom_right_row_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class InternalRangeReferenceArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.InternalRangeReferenceArchive) */ {
 public:
  inline InternalRangeReferenceArchive() : InternalRangeReferenceArchive(nullptr) {}
  ~InternalRangeReferenceArchive() override;
  explicit PROTOBUF_CONSTEXPR InternalRangeReferenceArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternalRangeReferenceArchive(const InternalRangeReferenceArchive& from);
  InternalRangeReferenceArchive(InternalRangeReferenceArchive&& from) noexcept
    : InternalRangeReferenceArchive() {
    *this = ::std::move(from);
  }

  inline InternalRangeReferenceArchive& operator=(const InternalRangeReferenceArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalRangeReferenceArchive& operator=(InternalRangeReferenceArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InternalRangeReferenceArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const InternalRangeReferenceArchive* internal_default_instance() {
    return reinterpret_cast<const InternalRangeReferenceArchive*>(
               &_InternalRangeReferenceArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InternalRangeReferenceArchive& a, InternalRangeReferenceArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalRangeReferenceArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternalRangeReferenceArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InternalRangeReferenceArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InternalRangeReferenceArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InternalRangeReferenceArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InternalRangeReferenceArchive& from) {
    InternalRangeReferenceArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalRangeReferenceArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.InternalRangeReferenceArchive";
  }
  protected:
  explicit InternalRangeReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeFieldNumber = 2,
    kOwnerIdFieldNumber = 1,
  };
  // required .TSCE.RangeCoordinateArchive range = 2;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::TSCE::RangeCoordinateArchive& range() const;
  PROTOBUF_NODISCARD ::TSCE::RangeCoordinateArchive* release_range();
  ::TSCE::RangeCoordinateArchive* mutable_range();
  void set_allocated_range(::TSCE::RangeCoordinateArchive* range);
  private:
  const ::TSCE::RangeCoordinateArchive& _internal_range() const;
  ::TSCE::RangeCoordinateArchive* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::TSCE::RangeCoordinateArchive* range);
  ::TSCE::RangeCoordinateArchive* unsafe_arena_release_range();

  // required uint32 owner_id = 1;
  bool has_owner_id() const;
  private:
  bool _internal_has_owner_id() const;
  public:
  void clear_owner_id();
  uint32_t owner_id() const;
  void set_owner_id(uint32_t value);
  private:
  uint32_t _internal_owner_id() const;
  void _internal_set_owner_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.InternalRangeReferenceArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCE::RangeCoordinateArchive* range_;
    uint32_t owner_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ReferenceArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ReferenceArchive) */ {
 public:
  inline ReferenceArchive() : ReferenceArchive(nullptr) {}
  ~ReferenceArchive() override;
  explicit PROTOBUF_CONSTEXPR ReferenceArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReferenceArchive(const ReferenceArchive& from);
  ReferenceArchive(ReferenceArchive&& from) noexcept
    : ReferenceArchive() {
    *this = ::std::move(from);
  }

  inline ReferenceArchive& operator=(const ReferenceArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReferenceArchive& operator=(ReferenceArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReferenceArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReferenceArchive* internal_default_instance() {
    return reinterpret_cast<const ReferenceArchive*>(
               &_ReferenceArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReferenceArchive& a, ReferenceArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ReferenceArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReferenceArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReferenceArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReferenceArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReferenceArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReferenceArchive& from) {
    ReferenceArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReferenceArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ReferenceArchive";
  }
  protected:
  explicit ReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReferenceArchive_ReferenceType ReferenceType;
  static constexpr ReferenceType CELL_REFERENCE =
    ReferenceArchive_ReferenceType_CELL_REFERENCE;
  static constexpr ReferenceType RANGE_REFERENCE =
    ReferenceArchive_ReferenceType_RANGE_REFERENCE;
  static constexpr ReferenceType NAME_DEPENDENCY =
    ReferenceArchive_ReferenceType_NAME_DEPENDENCY;
  static inline bool ReferenceType_IsValid(int value) {
    return ReferenceArchive_ReferenceType_IsValid(value);
  }
  static constexpr ReferenceType ReferenceType_MIN =
    ReferenceArchive_ReferenceType_ReferenceType_MIN;
  static constexpr ReferenceType ReferenceType_MAX =
    ReferenceArchive_ReferenceType_ReferenceType_MAX;
  static constexpr int ReferenceType_ARRAYSIZE =
    ReferenceArchive_ReferenceType_ReferenceType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReferenceType_descriptor() {
    return ReferenceArchive_ReferenceType_descriptor();
  }
  template<typename T>
  static inline const std::string& ReferenceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReferenceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReferenceType_Name.");
    return ReferenceArchive_ReferenceType_Name(enum_t_value);
  }
  static inline bool ReferenceType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ReferenceType* value) {
    return ReferenceArchive_ReferenceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCellReferenceFieldNumber = 2,
    kRangeReferenceFieldNumber = 3,
    kReferenceTypeFieldNumber = 1,
  };
  // optional .TSCE.CellReferenceArchive cell_reference = 2;
  bool has_cell_reference() const;
  private:
  bool _internal_has_cell_reference() const;
  public:
  void clear_cell_reference();
  const ::TSCE::CellReferenceArchive& cell_reference() const;
  PROTOBUF_NODISCARD ::TSCE::CellReferenceArchive* release_cell_reference();
  ::TSCE::CellReferenceArchive* mutable_cell_reference();
  void set_allocated_cell_reference(::TSCE::CellReferenceArchive* cell_reference);
  private:
  const ::TSCE::CellReferenceArchive& _internal_cell_reference() const;
  ::TSCE::CellReferenceArchive* _internal_mutable_cell_reference();
  public:
  void unsafe_arena_set_allocated_cell_reference(
      ::TSCE::CellReferenceArchive* cell_reference);
  ::TSCE::CellReferenceArchive* unsafe_arena_release_cell_reference();

  // optional .TSCE.RangeReferenceArchive range_reference = 3;
  bool has_range_reference() const;
  private:
  bool _internal_has_range_reference() const;
  public:
  void clear_range_reference();
  const ::TSCE::RangeReferenceArchive& range_reference() const;
  PROTOBUF_NODISCARD ::TSCE::RangeReferenceArchive* release_range_reference();
  ::TSCE::RangeReferenceArchive* mutable_range_reference();
  void set_allocated_range_reference(::TSCE::RangeReferenceArchive* range_reference);
  private:
  const ::TSCE::RangeReferenceArchive& _internal_range_reference() const;
  ::TSCE::RangeReferenceArchive* _internal_mutable_range_reference();
  public:
  void unsafe_arena_set_allocated_range_reference(
      ::TSCE::RangeReferenceArchive* range_reference);
  ::TSCE::RangeReferenceArchive* unsafe_arena_release_range_reference();

  // required .TSCE.ReferenceArchive.ReferenceType reference_type = 1;
  bool has_reference_type() const;
  private:
  bool _internal_has_reference_type() const;
  public:
  void clear_reference_type();
  ::TSCE::ReferenceArchive_ReferenceType reference_type() const;
  void set_reference_type(::TSCE::ReferenceArchive_ReferenceType value);
  private:
  ::TSCE::ReferenceArchive_ReferenceType _internal_reference_type() const;
  void _internal_set_reference_type(::TSCE::ReferenceArchive_ReferenceType value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.ReferenceArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCE::CellReferenceArchive* cell_reference_;
    ::TSCE::RangeReferenceArchive* range_reference_;
    int reference_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class EdgeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.EdgeArchive) */ {
 public:
  inline EdgeArchive() : EdgeArchive(nullptr) {}
  ~EdgeArchive() override;
  explicit PROTOBUF_CONSTEXPR EdgeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdgeArchive(const EdgeArchive& from);
  EdgeArchive(EdgeArchive&& from) noexcept
    : EdgeArchive() {
    *this = ::std::move(from);
  }

  inline EdgeArchive& operator=(const EdgeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeArchive& operator=(EdgeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdgeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdgeArchive* internal_default_instance() {
    return reinterpret_cast<const EdgeArchive*>(
               &_EdgeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(EdgeArchive& a, EdgeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EdgeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EdgeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EdgeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EdgeArchive& from) {
    EdgeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.EdgeArchive";
  }
  protected:
  explicit EdgeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerIdFieldNumber = 4,
    kColumnFieldNumber = 1,
    kRowFieldNumber = 2,
    kIsPrecedentFieldNumber = 3,
  };
  // optional .TSCE.CFUUIDArchive owner_id = 4;
  bool has_owner_id() const;
  private:
  bool _internal_has_owner_id() const;
  public:
  void clear_owner_id();
  const ::TSCE::CFUUIDArchive& owner_id() const;
  PROTOBUF_NODISCARD ::TSCE::CFUUIDArchive* release_owner_id();
  ::TSCE::CFUUIDArchive* mutable_owner_id();
  void set_allocated_owner_id(::TSCE::CFUUIDArchive* owner_id);
  private:
  const ::TSCE::CFUUIDArchive& _internal_owner_id() const;
  ::TSCE::CFUUIDArchive* _internal_mutable_owner_id();
  public:
  void unsafe_arena_set_allocated_owner_id(
      ::TSCE::CFUUIDArchive* owner_id);
  ::TSCE::CFUUIDArchive* unsafe_arena_release_owner_id();

  // required uint32 column = 1;
  bool has_column() const;
  private:
  bool _internal_has_column() const;
  public:
  void clear_column();
  uint32_t column() const;
  void set_column(uint32_t value);
  private:
  uint32_t _internal_column() const;
  void _internal_set_column(uint32_t value);
  public:

  // required uint32 row = 2;
  bool has_row() const;
  private:
  bool _internal_has_row() const;
  public:
  void clear_row();
  uint32_t row() const;
  void set_row(uint32_t value);
  private:
  uint32_t _internal_row() const;
  void _internal_set_row(uint32_t value);
  public:

  // required bool is_precedent = 3;
  bool has_is_precedent() const;
  private:
  bool _internal_has_is_precedent() const;
  public:
  void clear_is_precedent();
  bool is_precedent() const;
  void set_is_precedent(bool value);
  private:
  bool _internal_is_precedent() const;
  void _internal_set_is_precedent(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.EdgeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCE::CFUUIDArchive* owner_id_;
    uint32_t column_;
    uint32_t row_;
    bool is_precedent_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class EdgesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.EdgesArchive) */ {
 public:
  inline EdgesArchive() : EdgesArchive(nullptr) {}
  ~EdgesArchive() override;
  explicit PROTOBUF_CONSTEXPR EdgesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdgesArchive(const EdgesArchive& from);
  EdgesArchive(EdgesArchive&& from) noexcept
    : EdgesArchive() {
    *this = ::std::move(from);
  }

  inline EdgesArchive& operator=(const EdgesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgesArchive& operator=(EdgesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdgesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdgesArchive* internal_default_instance() {
    return reinterpret_cast<const EdgesArchive*>(
               &_EdgesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(EdgesArchive& a, EdgesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EdgesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EdgesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EdgesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EdgesArchive& from) {
    EdgesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.EdgesArchive";
  }
  protected:
  explicit EdgesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackedEdgeWithoutOwnerFieldNumber = 9,
    kPackedEdgeWithOwnerFieldNumber = 10,
    kOwnerIdForEdgeFieldNumber = 11,
    kInternalOwnerIdForEdgeFieldNumber = 12,
  };
  // repeated uint32 packed_edge_without_owner = 9;
  int packed_edge_without_owner_size() const;
  private:
  int _internal_packed_edge_without_owner_size() const;
  public:
  void clear_packed_edge_without_owner();
  private:
  uint32_t _internal_packed_edge_without_owner(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_packed_edge_without_owner() const;
  void _internal_add_packed_edge_without_owner(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_packed_edge_without_owner();
  public:
  uint32_t packed_edge_without_owner(int index) const;
  void set_packed_edge_without_owner(int index, uint32_t value);
  void add_packed_edge_without_owner(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      packed_edge_without_owner() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_packed_edge_without_owner();

  // repeated uint32 packed_edge_with_owner = 10;
  int packed_edge_with_owner_size() const;
  private:
  int _internal_packed_edge_with_owner_size() const;
  public:
  void clear_packed_edge_with_owner();
  private:
  uint32_t _internal_packed_edge_with_owner(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_packed_edge_with_owner() const;
  void _internal_add_packed_edge_with_owner(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_packed_edge_with_owner();
  public:
  uint32_t packed_edge_with_owner(int index) const;
  void set_packed_edge_with_owner(int index, uint32_t value);
  void add_packed_edge_with_owner(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      packed_edge_with_owner() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_packed_edge_with_owner();

  // repeated .TSCE.CFUUIDArchive owner_id_for_edge = 11;
  int owner_id_for_edge_size() const;
  private:
  int _internal_owner_id_for_edge_size() const;
  public:
  void clear_owner_id_for_edge();
  ::TSCE::CFUUIDArchive* mutable_owner_id_for_edge(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CFUUIDArchive >*
      mutable_owner_id_for_edge();
  private:
  const ::TSCE::CFUUIDArchive& _internal_owner_id_for_edge(int index) const;
  ::TSCE::CFUUIDArchive* _internal_add_owner_id_for_edge();
  public:
  const ::TSCE::CFUUIDArchive& owner_id_for_edge(int index) const;
  ::TSCE::CFUUIDArchive* add_owner_id_for_edge();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CFUUIDArchive >&
      owner_id_for_edge() const;

  // repeated uint32 internal_owner_id_for_edge = 12;
  int internal_owner_id_for_edge_size() const;
  private:
  int _internal_internal_owner_id_for_edge_size() const;
  public:
  void clear_internal_owner_id_for_edge();
  private:
  uint32_t _internal_internal_owner_id_for_edge(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_internal_owner_id_for_edge() const;
  void _internal_add_internal_owner_id_for_edge(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_internal_owner_id_for_edge();
  public:
  uint32_t internal_owner_id_for_edge(int index) const;
  void set_internal_owner_id_for_edge(int index, uint32_t value);
  void add_internal_owner_id_for_edge(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      internal_owner_id_for_edge() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_internal_owner_id_for_edge();

  // @@protoc_insertion_point(class_scope:TSCE.EdgesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > packed_edge_without_owner_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > packed_edge_with_owner_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CFUUIDArchive > owner_id_for_edge_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > internal_owner_id_for_edge_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CellRecordArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CellRecordArchive) */ {
 public:
  inline CellRecordArchive() : CellRecordArchive(nullptr) {}
  ~CellRecordArchive() override;
  explicit PROTOBUF_CONSTEXPR CellRecordArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellRecordArchive(const CellRecordArchive& from);
  CellRecordArchive(CellRecordArchive&& from) noexcept
    : CellRecordArchive() {
    *this = ::std::move(from);
  }

  inline CellRecordArchive& operator=(const CellRecordArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellRecordArchive& operator=(CellRecordArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellRecordArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellRecordArchive* internal_default_instance() {
    return reinterpret_cast<const CellRecordArchive*>(
               &_CellRecordArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CellRecordArchive& a, CellRecordArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellRecordArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellRecordArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CellRecordArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CellRecordArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CellRecordArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CellRecordArchive& from) {
    CellRecordArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellRecordArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CellRecordArchive";
  }
  protected:
  explicit CellRecordArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgeFieldNumber = 5,
    kEdgesFieldNumber = 9,
    kColumnFieldNumber = 1,
    kRowFieldNumber = 2,
    kDirtySelfPlusPrecedentsCountFieldNumber = 3,
    kIsInACycleFieldNumber = 4,
    kHasCalculatedPrecedentsFieldNumber = 7,
    kCalculatePrecedentsOnNextRecalcFieldNumber = 8,
    kTranslateForExcelImportOnNextRecalcFieldNumber = 10,
    kContainsAFormulaFieldNumber = 6,
  };
  // repeated .TSCE.EdgeArchive edge = 5 [deprecated = true];
  PROTOBUF_DEPRECATED int edge_size() const;
  private:
  int _internal_edge_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_edge();
  PROTOBUF_DEPRECATED ::TSCE::EdgeArchive* mutable_edge(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::EdgeArchive >*
      mutable_edge();
  private:
  const ::TSCE::EdgeArchive& _internal_edge(int index) const;
  ::TSCE::EdgeArchive* _internal_add_edge();
  public:
  PROTOBUF_DEPRECATED const ::TSCE::EdgeArchive& edge(int index) const;
  PROTOBUF_DEPRECATED ::TSCE::EdgeArchive* add_edge();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::EdgeArchive >&
      edge() const;

  // optional .TSCE.EdgesArchive edges = 9;
  bool has_edges() const;
  private:
  bool _internal_has_edges() const;
  public:
  void clear_edges();
  const ::TSCE::EdgesArchive& edges() const;
  PROTOBUF_NODISCARD ::TSCE::EdgesArchive* release_edges();
  ::TSCE::EdgesArchive* mutable_edges();
  void set_allocated_edges(::TSCE::EdgesArchive* edges);
  private:
  const ::TSCE::EdgesArchive& _internal_edges() const;
  ::TSCE::EdgesArchive* _internal_mutable_edges();
  public:
  void unsafe_arena_set_allocated_edges(
      ::TSCE::EdgesArchive* edges);
  ::TSCE::EdgesArchive* unsafe_arena_release_edges();

  // required uint32 column = 1;
  bool has_column() const;
  private:
  bool _internal_has_column() const;
  public:
  void clear_column();
  uint32_t column() const;
  void set_column(uint32_t value);
  private:
  uint32_t _internal_column() const;
  void _internal_set_column(uint32_t value);
  public:

  // required uint32 row = 2;
  bool has_row() const;
  private:
  bool _internal_has_row() const;
  public:
  void clear_row();
  uint32_t row() const;
  void set_row(uint32_t value);
  private:
  uint32_t _internal_row() const;
  void _internal_set_row(uint32_t value);
  public:

  // optional uint32 dirty_self_plus_precedents_count = 3 [default = 0];
  bool has_dirty_self_plus_precedents_count() const;
  private:
  bool _internal_has_dirty_self_plus_precedents_count() const;
  public:
  void clear_dirty_self_plus_precedents_count();
  uint32_t dirty_self_plus_precedents_count() const;
  void set_dirty_self_plus_precedents_count(uint32_t value);
  private:
  uint32_t _internal_dirty_self_plus_precedents_count() const;
  void _internal_set_dirty_self_plus_precedents_count(uint32_t value);
  public:

  // optional bool is_in_a_cycle = 4 [default = false];
  bool has_is_in_a_cycle() const;
  private:
  bool _internal_has_is_in_a_cycle() const;
  public:
  void clear_is_in_a_cycle();
  bool is_in_a_cycle() const;
  void set_is_in_a_cycle(bool value);
  private:
  bool _internal_is_in_a_cycle() const;
  void _internal_set_is_in_a_cycle(bool value);
  public:

  // optional bool has_calculated_precedents = 7 [default = false];
  bool has_has_calculated_precedents() const;
  private:
  bool _internal_has_has_calculated_precedents() const;
  public:
  void clear_has_calculated_precedents();
  bool has_calculated_precedents() const;
  void set_has_calculated_precedents(bool value);
  private:
  bool _internal_has_calculated_precedents() const;
  void _internal_set_has_calculated_precedents(bool value);
  public:

  // optional bool calculate_precedents_on_next_recalc = 8 [default = false, deprecated = true];
  PROTOBUF_DEPRECATED bool has_calculate_precedents_on_next_recalc() const;
  private:
  bool _internal_has_calculate_precedents_on_next_recalc() const;
  public:
  PROTOBUF_DEPRECATED void clear_calculate_precedents_on_next_recalc();
  PROTOBUF_DEPRECATED bool calculate_precedents_on_next_recalc() const;
  PROTOBUF_DEPRECATED void set_calculate_precedents_on_next_recalc(bool value);
  private:
  bool _internal_calculate_precedents_on_next_recalc() const;
  void _internal_set_calculate_precedents_on_next_recalc(bool value);
  public:

  // optional bool translate_for_excel_import_on_next_recalc = 10 [default = false];
  bool has_translate_for_excel_import_on_next_recalc() const;
  private:
  bool _internal_has_translate_for_excel_import_on_next_recalc() const;
  public:
  void clear_translate_for_excel_import_on_next_recalc();
  bool translate_for_excel_import_on_next_recalc() const;
  void set_translate_for_excel_import_on_next_recalc(bool value);
  private:
  bool _internal_translate_for_excel_import_on_next_recalc() const;
  void _internal_set_translate_for_excel_import_on_next_recalc(bool value);
  public:

  // optional bool contains_a_formula = 6 [default = true];
  bool has_contains_a_formula() const;
  private:
  bool _internal_has_contains_a_formula() const;
  public:
  void clear_contains_a_formula();
  bool contains_a_formula() const;
  void set_contains_a_formula(bool value);
  private:
  bool _internal_contains_a_formula() const;
  void _internal_set_contains_a_formula(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.CellRecordArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::EdgeArchive > edge_;
    ::TSCE::EdgesArchive* edges_;
    uint32_t column_;
    uint32_t row_;
    uint32_t dirty_self_plus_precedents_count_;
    bool is_in_a_cycle_;
    bool has_calculated_precedents_;
    bool calculate_precedents_on_next_recalc_;
    bool translate_for_excel_import_on_next_recalc_;
    bool contains_a_formula_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CellDependenciesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CellDependenciesArchive) */ {
 public:
  inline CellDependenciesArchive() : CellDependenciesArchive(nullptr) {}
  ~CellDependenciesArchive() override;
  explicit PROTOBUF_CONSTEXPR CellDependenciesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellDependenciesArchive(const CellDependenciesArchive& from);
  CellDependenciesArchive(CellDependenciesArchive&& from) noexcept
    : CellDependenciesArchive() {
    *this = ::std::move(from);
  }

  inline CellDependenciesArchive& operator=(const CellDependenciesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellDependenciesArchive& operator=(CellDependenciesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellDependenciesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellDependenciesArchive* internal_default_instance() {
    return reinterpret_cast<const CellDependenciesArchive*>(
               &_CellDependenciesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CellDependenciesArchive& a, CellDependenciesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellDependenciesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellDependenciesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CellDependenciesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CellDependenciesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CellDependenciesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CellDependenciesArchive& from) {
    CellDependenciesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellDependenciesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CellDependenciesArchive";
  }
  protected:
  explicit CellDependenciesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellRecordFieldNumber = 1,
    kNumDirtyCellsFieldNumber = 2,
  };
  // repeated .TSCE.CellRecordArchive cell_record = 1;
  int cell_record_size() const;
  private:
  int _internal_cell_record_size() const;
  public:
  void clear_cell_record();
  ::TSCE::CellRecordArchive* mutable_cell_record(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellRecordArchive >*
      mutable_cell_record();
  private:
  const ::TSCE::CellRecordArchive& _internal_cell_record(int index) const;
  ::TSCE::CellRecordArchive* _internal_add_cell_record();
  public:
  const ::TSCE::CellRecordArchive& cell_record(int index) const;
  ::TSCE::CellRecordArchive* add_cell_record();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellRecordArchive >&
      cell_record() const;

  // optional uint32 num_dirty_cells = 2;
  bool has_num_dirty_cells() const;
  private:
  bool _internal_has_num_dirty_cells() const;
  public:
  void clear_num_dirty_cells();
  uint32_t num_dirty_cells() const;
  void set_num_dirty_cells(uint32_t value);
  private:
  uint32_t _internal_num_dirty_cells() const;
  void _internal_set_num_dirty_cells(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.CellDependenciesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellRecordArchive > cell_record_;
    uint32_t num_dirty_cells_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class VolatileDependenciesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.VolatileDependenciesArchive) */ {
 public:
  inline VolatileDependenciesArchive() : VolatileDependenciesArchive(nullptr) {}
  ~VolatileDependenciesArchive() override;
  explicit PROTOBUF_CONSTEXPR VolatileDependenciesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VolatileDependenciesArchive(const VolatileDependenciesArchive& from);
  VolatileDependenciesArchive(VolatileDependenciesArchive&& from) noexcept
    : VolatileDependenciesArchive() {
    *this = ::std::move(from);
  }

  inline VolatileDependenciesArchive& operator=(const VolatileDependenciesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline VolatileDependenciesArchive& operator=(VolatileDependenciesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VolatileDependenciesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const VolatileDependenciesArchive* internal_default_instance() {
    return reinterpret_cast<const VolatileDependenciesArchive*>(
               &_VolatileDependenciesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(VolatileDependenciesArchive& a, VolatileDependenciesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(VolatileDependenciesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VolatileDependenciesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VolatileDependenciesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VolatileDependenciesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VolatileDependenciesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VolatileDependenciesArchive& from) {
    VolatileDependenciesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VolatileDependenciesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.VolatileDependenciesArchive";
  }
  protected:
  explicit VolatileDependenciesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVolatileTimeCellColumnFieldNumber = 1,
    kVolatileTimeCellRowFieldNumber = 2,
    kVolatileRandomCellColumnFieldNumber = 3,
    kVolatileRandomCellRowFieldNumber = 4,
    kVolatileLocationCellColumnFieldNumber = 5,
    kVolatileLocationCellRowFieldNumber = 6,
    kVolatileCompassCellColumnFieldNumber = 7,
    kVolatileCompassCellRowFieldNumber = 8,
    kCalculatedDependencyCellColumnFieldNumber = 9,
    kCalculatedDependencyCellRowFieldNumber = 10,
    kVolatileGeometryCellFieldNumber = 11,
    kVolatileGeometryCellReferenceFieldNumber = 13,
    kVolatileLocaleCellColumnFieldNumber = 15,
    kVolatileLocaleCellRowFieldNumber = 16,
  };
  // repeated uint32 volatile_time_cell_column = 1;
  int volatile_time_cell_column_size() const;
  private:
  int _internal_volatile_time_cell_column_size() const;
  public:
  void clear_volatile_time_cell_column();
  private:
  uint32_t _internal_volatile_time_cell_column(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_volatile_time_cell_column() const;
  void _internal_add_volatile_time_cell_column(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_volatile_time_cell_column();
  public:
  uint32_t volatile_time_cell_column(int index) const;
  void set_volatile_time_cell_column(int index, uint32_t value);
  void add_volatile_time_cell_column(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      volatile_time_cell_column() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_volatile_time_cell_column();

  // repeated uint32 volatile_time_cell_row = 2;
  int volatile_time_cell_row_size() const;
  private:
  int _internal_volatile_time_cell_row_size() const;
  public:
  void clear_volatile_time_cell_row();
  private:
  uint32_t _internal_volatile_time_cell_row(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_volatile_time_cell_row() const;
  void _internal_add_volatile_time_cell_row(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_volatile_time_cell_row();
  public:
  uint32_t volatile_time_cell_row(int index) const;
  void set_volatile_time_cell_row(int index, uint32_t value);
  void add_volatile_time_cell_row(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      volatile_time_cell_row() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_volatile_time_cell_row();

  // repeated uint32 volatile_random_cell_column = 3;
  int volatile_random_cell_column_size() const;
  private:
  int _internal_volatile_random_cell_column_size() const;
  public:
  void clear_volatile_random_cell_column();
  private:
  uint32_t _internal_volatile_random_cell_column(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_volatile_random_cell_column() const;
  void _internal_add_volatile_random_cell_column(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_volatile_random_cell_column();
  public:
  uint32_t volatile_random_cell_column(int index) const;
  void set_volatile_random_cell_column(int index, uint32_t value);
  void add_volatile_random_cell_column(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      volatile_random_cell_column() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_volatile_random_cell_column();

  // repeated uint32 volatile_random_cell_row = 4;
  int volatile_random_cell_row_size() const;
  private:
  int _internal_volatile_random_cell_row_size() const;
  public:
  void clear_volatile_random_cell_row();
  private:
  uint32_t _internal_volatile_random_cell_row(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_volatile_random_cell_row() const;
  void _internal_add_volatile_random_cell_row(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_volatile_random_cell_row();
  public:
  uint32_t volatile_random_cell_row(int index) const;
  void set_volatile_random_cell_row(int index, uint32_t value);
  void add_volatile_random_cell_row(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      volatile_random_cell_row() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_volatile_random_cell_row();

  // repeated uint32 volatile_location_cell_column = 5;
  int volatile_location_cell_column_size() const;
  private:
  int _internal_volatile_location_cell_column_size() const;
  public:
  void clear_volatile_location_cell_column();
  private:
  uint32_t _internal_volatile_location_cell_column(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_volatile_location_cell_column() const;
  void _internal_add_volatile_location_cell_column(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_volatile_location_cell_column();
  public:
  uint32_t volatile_location_cell_column(int index) const;
  void set_volatile_location_cell_column(int index, uint32_t value);
  void add_volatile_location_cell_column(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      volatile_location_cell_column() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_volatile_location_cell_column();

  // repeated uint32 volatile_location_cell_row = 6;
  int volatile_location_cell_row_size() const;
  private:
  int _internal_volatile_location_cell_row_size() const;
  public:
  void clear_volatile_location_cell_row();
  private:
  uint32_t _internal_volatile_location_cell_row(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_volatile_location_cell_row() const;
  void _internal_add_volatile_location_cell_row(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_volatile_location_cell_row();
  public:
  uint32_t volatile_location_cell_row(int index) const;
  void set_volatile_location_cell_row(int index, uint32_t value);
  void add_volatile_location_cell_row(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      volatile_location_cell_row() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_volatile_location_cell_row();

  // repeated uint32 volatile_compass_cell_column = 7;
  int volatile_compass_cell_column_size() const;
  private:
  int _internal_volatile_compass_cell_column_size() const;
  public:
  void clear_volatile_compass_cell_column();
  private:
  uint32_t _internal_volatile_compass_cell_column(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_volatile_compass_cell_column() const;
  void _internal_add_volatile_compass_cell_column(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_volatile_compass_cell_column();
  public:
  uint32_t volatile_compass_cell_column(int index) const;
  void set_volatile_compass_cell_column(int index, uint32_t value);
  void add_volatile_compass_cell_column(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      volatile_compass_cell_column() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_volatile_compass_cell_column();

  // repeated uint32 volatile_compass_cell_row = 8;
  int volatile_compass_cell_row_size() const;
  private:
  int _internal_volatile_compass_cell_row_size() const;
  public:
  void clear_volatile_compass_cell_row();
  private:
  uint32_t _internal_volatile_compass_cell_row(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_volatile_compass_cell_row() const;
  void _internal_add_volatile_compass_cell_row(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_volatile_compass_cell_row();
  public:
  uint32_t volatile_compass_cell_row(int index) const;
  void set_volatile_compass_cell_row(int index, uint32_t value);
  void add_volatile_compass_cell_row(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      volatile_compass_cell_row() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_volatile_compass_cell_row();

  // repeated uint32 calculated_dependency_cell_column = 9;
  int calculated_dependency_cell_column_size() const;
  private:
  int _internal_calculated_dependency_cell_column_size() const;
  public:
  void clear_calculated_dependency_cell_column();
  private:
  uint32_t _internal_calculated_dependency_cell_column(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_calculated_dependency_cell_column() const;
  void _internal_add_calculated_dependency_cell_column(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_calculated_dependency_cell_column();
  public:
  uint32_t calculated_dependency_cell_column(int index) const;
  void set_calculated_dependency_cell_column(int index, uint32_t value);
  void add_calculated_dependency_cell_column(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      calculated_dependency_cell_column() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_calculated_dependency_cell_column();

  // repeated uint32 calculated_dependency_cell_row = 10;
  int calculated_dependency_cell_row_size() const;
  private:
  int _internal_calculated_dependency_cell_row_size() const;
  public:
  void clear_calculated_dependency_cell_row();
  private:
  uint32_t _internal_calculated_dependency_cell_row(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_calculated_dependency_cell_row() const;
  void _internal_add_calculated_dependency_cell_row(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_calculated_dependency_cell_row();
  public:
  uint32_t calculated_dependency_cell_row(int index) const;
  void set_calculated_dependency_cell_row(int index, uint32_t value);
  void add_calculated_dependency_cell_row(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      calculated_dependency_cell_row() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_calculated_dependency_cell_row();

  // repeated .TSCE.CellCoordinateArchive volatile_geometry_cell = 11;
  int volatile_geometry_cell_size() const;
  private:
  int _internal_volatile_geometry_cell_size() const;
  public:
  void clear_volatile_geometry_cell();
  ::TSCE::CellCoordinateArchive* mutable_volatile_geometry_cell(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >*
      mutable_volatile_geometry_cell();
  private:
  const ::TSCE::CellCoordinateArchive& _internal_volatile_geometry_cell(int index) const;
  ::TSCE::CellCoordinateArchive* _internal_add_volatile_geometry_cell();
  public:
  const ::TSCE::CellCoordinateArchive& volatile_geometry_cell(int index) const;
  ::TSCE::CellCoordinateArchive* add_volatile_geometry_cell();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >&
      volatile_geometry_cell() const;

  // repeated .TSCE.CellReferenceArchive volatile_geometry_cell_reference = 13;
  int volatile_geometry_cell_reference_size() const;
  private:
  int _internal_volatile_geometry_cell_reference_size() const;
  public:
  void clear_volatile_geometry_cell_reference();
  ::TSCE::CellReferenceArchive* mutable_volatile_geometry_cell_reference(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellReferenceArchive >*
      mutable_volatile_geometry_cell_reference();
  private:
  const ::TSCE::CellReferenceArchive& _internal_volatile_geometry_cell_reference(int index) const;
  ::TSCE::CellReferenceArchive* _internal_add_volatile_geometry_cell_reference();
  public:
  const ::TSCE::CellReferenceArchive& volatile_geometry_cell_reference(int index) const;
  ::TSCE::CellReferenceArchive* add_volatile_geometry_cell_reference();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellReferenceArchive >&
      volatile_geometry_cell_reference() const;

  // repeated uint32 volatile_locale_cell_column = 15;
  int volatile_locale_cell_column_size() const;
  private:
  int _internal_volatile_locale_cell_column_size() const;
  public:
  void clear_volatile_locale_cell_column();
  private:
  uint32_t _internal_volatile_locale_cell_column(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_volatile_locale_cell_column() const;
  void _internal_add_volatile_locale_cell_column(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_volatile_locale_cell_column();
  public:
  uint32_t volatile_locale_cell_column(int index) const;
  void set_volatile_locale_cell_column(int index, uint32_t value);
  void add_volatile_locale_cell_column(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      volatile_locale_cell_column() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_volatile_locale_cell_column();

  // repeated uint32 volatile_locale_cell_row = 16;
  int volatile_locale_cell_row_size() const;
  private:
  int _internal_volatile_locale_cell_row_size() const;
  public:
  void clear_volatile_locale_cell_row();
  private:
  uint32_t _internal_volatile_locale_cell_row(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_volatile_locale_cell_row() const;
  void _internal_add_volatile_locale_cell_row(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_volatile_locale_cell_row();
  public:
  uint32_t volatile_locale_cell_row(int index) const;
  void set_volatile_locale_cell_row(int index, uint32_t value);
  void add_volatile_locale_cell_row(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      volatile_locale_cell_row() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_volatile_locale_cell_row();

  // @@protoc_insertion_point(class_scope:TSCE.VolatileDependenciesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > volatile_time_cell_column_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > volatile_time_cell_row_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > volatile_random_cell_column_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > volatile_random_cell_row_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > volatile_location_cell_column_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > volatile_location_cell_row_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > volatile_compass_cell_column_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > volatile_compass_cell_row_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > calculated_dependency_cell_column_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > calculated_dependency_cell_row_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive > volatile_geometry_cell_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellReferenceArchive > volatile_geometry_cell_reference_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > volatile_locale_cell_column_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > volatile_locale_cell_row_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RangeBackDependencyArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RangeBackDependencyArchive) */ {
 public:
  inline RangeBackDependencyArchive() : RangeBackDependencyArchive(nullptr) {}
  ~RangeBackDependencyArchive() override;
  explicit PROTOBUF_CONSTEXPR RangeBackDependencyArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RangeBackDependencyArchive(const RangeBackDependencyArchive& from);
  RangeBackDependencyArchive(RangeBackDependencyArchive&& from) noexcept
    : RangeBackDependencyArchive() {
    *this = ::std::move(from);
  }

  inline RangeBackDependencyArchive& operator=(const RangeBackDependencyArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeBackDependencyArchive& operator=(RangeBackDependencyArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RangeBackDependencyArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RangeBackDependencyArchive* internal_default_instance() {
    return reinterpret_cast<const RangeBackDependencyArchive*>(
               &_RangeBackDependencyArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RangeBackDependencyArchive& a, RangeBackDependencyArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeBackDependencyArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RangeBackDependencyArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RangeBackDependencyArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RangeBackDependencyArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RangeBackDependencyArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RangeBackDependencyArchive& from) {
    RangeBackDependencyArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeBackDependencyArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RangeBackDependencyArchive";
  }
  protected:
  explicit RangeBackDependencyArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeReferenceFieldNumber = 3,
    kInternalRangeReferenceFieldNumber = 4,
    kCellCoordRowFieldNumber = 1,
    kCellCoordColumnFieldNumber = 2,
  };
  // optional .TSCE.RangeReferenceArchive range_reference = 3;
  bool has_range_reference() const;
  private:
  bool _internal_has_range_reference() const;
  public:
  void clear_range_reference();
  const ::TSCE::RangeReferenceArchive& range_reference() const;
  PROTOBUF_NODISCARD ::TSCE::RangeReferenceArchive* release_range_reference();
  ::TSCE::RangeReferenceArchive* mutable_range_reference();
  void set_allocated_range_reference(::TSCE::RangeReferenceArchive* range_reference);
  private:
  const ::TSCE::RangeReferenceArchive& _internal_range_reference() const;
  ::TSCE::RangeReferenceArchive* _internal_mutable_range_reference();
  public:
  void unsafe_arena_set_allocated_range_reference(
      ::TSCE::RangeReferenceArchive* range_reference);
  ::TSCE::RangeReferenceArchive* unsafe_arena_release_range_reference();

  // optional .TSCE.InternalRangeReferenceArchive internal_range_reference = 4;
  bool has_internal_range_reference() const;
  private:
  bool _internal_has_internal_range_reference() const;
  public:
  void clear_internal_range_reference();
  const ::TSCE::InternalRangeReferenceArchive& internal_range_reference() const;
  PROTOBUF_NODISCARD ::TSCE::InternalRangeReferenceArchive* release_internal_range_reference();
  ::TSCE::InternalRangeReferenceArchive* mutable_internal_range_reference();
  void set_allocated_internal_range_reference(::TSCE::InternalRangeReferenceArchive* internal_range_reference);
  private:
  const ::TSCE::InternalRangeReferenceArchive& _internal_internal_range_reference() const;
  ::TSCE::InternalRangeReferenceArchive* _internal_mutable_internal_range_reference();
  public:
  void unsafe_arena_set_allocated_internal_range_reference(
      ::TSCE::InternalRangeReferenceArchive* internal_range_reference);
  ::TSCE::InternalRangeReferenceArchive* unsafe_arena_release_internal_range_reference();

  // required uint32 cell_coord_row = 1;
  bool has_cell_coord_row() const;
  private:
  bool _internal_has_cell_coord_row() const;
  public:
  void clear_cell_coord_row();
  uint32_t cell_coord_row() const;
  void set_cell_coord_row(uint32_t value);
  private:
  uint32_t _internal_cell_coord_row() const;
  void _internal_set_cell_coord_row(uint32_t value);
  public:

  // required uint32 cell_coord_column = 2;
  bool has_cell_coord_column() const;
  private:
  bool _internal_has_cell_coord_column() const;
  public:
  void clear_cell_coord_column();
  uint32_t cell_coord_column() const;
  void set_cell_coord_column(uint32_t value);
  private:
  uint32_t _internal_cell_coord_column() const;
  void _internal_set_cell_coord_column(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.RangeBackDependencyArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCE::RangeReferenceArchive* range_reference_;
    ::TSCE::InternalRangeReferenceArchive* internal_range_reference_;
    uint32_t cell_coord_row_;
    uint32_t cell_coord_column_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RTreeInternalNodeContentsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RTreeInternalNodeContentsArchive) */ {
 public:
  inline RTreeInternalNodeContentsArchive() : RTreeInternalNodeContentsArchive(nullptr) {}
  ~RTreeInternalNodeContentsArchive() override;
  explicit PROTOBUF_CONSTEXPR RTreeInternalNodeContentsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RTreeInternalNodeContentsArchive(const RTreeInternalNodeContentsArchive& from);
  RTreeInternalNodeContentsArchive(RTreeInternalNodeContentsArchive&& from) noexcept
    : RTreeInternalNodeContentsArchive() {
    *this = ::std::move(from);
  }

  inline RTreeInternalNodeContentsArchive& operator=(const RTreeInternalNodeContentsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RTreeInternalNodeContentsArchive& operator=(RTreeInternalNodeContentsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RTreeInternalNodeContentsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RTreeInternalNodeContentsArchive* internal_default_instance() {
    return reinterpret_cast<const RTreeInternalNodeContentsArchive*>(
               &_RTreeInternalNodeContentsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RTreeInternalNodeContentsArchive& a, RTreeInternalNodeContentsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RTreeInternalNodeContentsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RTreeInternalNodeContentsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RTreeInternalNodeContentsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RTreeInternalNodeContentsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RTreeInternalNodeContentsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RTreeInternalNodeContentsArchive& from) {
    RTreeInternalNodeContentsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RTreeInternalNodeContentsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RTreeInternalNodeContentsArchive";
  }
  protected:
  explicit RTreeInternalNodeContentsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
    kChildFieldNumber = 3,
  };
  // repeated uint32 min = 1;
  int min_size() const;
  private:
  int _internal_min_size() const;
  public:
  void clear_min();
  private:
  uint32_t _internal_min(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_min() const;
  void _internal_add_min(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_min();
  public:
  uint32_t min(int index) const;
  void set_min(int index, uint32_t value);
  void add_min(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      min() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_min();

  // repeated uint32 max = 2;
  int max_size() const;
  private:
  int _internal_max_size() const;
  public:
  void clear_max();
  private:
  uint32_t _internal_max(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_max() const;
  void _internal_add_max(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_max();
  public:
  uint32_t max(int index) const;
  void set_max(int index, uint32_t value);
  void add_max(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      max() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_max();

  // required .TSCE.RTreeNodeArchive child = 3;
  bool has_child() const;
  private:
  bool _internal_has_child() const;
  public:
  void clear_child();
  const ::TSCE::RTreeNodeArchive& child() const;
  PROTOBUF_NODISCARD ::TSCE::RTreeNodeArchive* release_child();
  ::TSCE::RTreeNodeArchive* mutable_child();
  void set_allocated_child(::TSCE::RTreeNodeArchive* child);
  private:
  const ::TSCE::RTreeNodeArchive& _internal_child() const;
  ::TSCE::RTreeNodeArchive* _internal_mutable_child();
  public:
  void unsafe_arena_set_allocated_child(
      ::TSCE::RTreeNodeArchive* child);
  ::TSCE::RTreeNodeArchive* unsafe_arena_release_child();

  // @@protoc_insertion_point(class_scope:TSCE.RTreeInternalNodeContentsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > min_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > max_;
    ::TSCE::RTreeNodeArchive* child_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RTreeLeafNodeContentsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RTreeLeafNodeContentsArchive) */ {
 public:
  inline RTreeLeafNodeContentsArchive() : RTreeLeafNodeContentsArchive(nullptr) {}
  ~RTreeLeafNodeContentsArchive() override;
  explicit PROTOBUF_CONSTEXPR RTreeLeafNodeContentsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RTreeLeafNodeContentsArchive(const RTreeLeafNodeContentsArchive& from);
  RTreeLeafNodeContentsArchive(RTreeLeafNodeContentsArchive&& from) noexcept
    : RTreeLeafNodeContentsArchive() {
    *this = ::std::move(from);
  }

  inline RTreeLeafNodeContentsArchive& operator=(const RTreeLeafNodeContentsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RTreeLeafNodeContentsArchive& operator=(RTreeLeafNodeContentsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RTreeLeafNodeContentsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RTreeLeafNodeContentsArchive* internal_default_instance() {
    return reinterpret_cast<const RTreeLeafNodeContentsArchive*>(
               &_RTreeLeafNodeContentsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RTreeLeafNodeContentsArchive& a, RTreeLeafNodeContentsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RTreeLeafNodeContentsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RTreeLeafNodeContentsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RTreeLeafNodeContentsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RTreeLeafNodeContentsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RTreeLeafNodeContentsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RTreeLeafNodeContentsArchive& from) {
    RTreeLeafNodeContentsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RTreeLeafNodeContentsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RTreeLeafNodeContentsArchive";
  }
  protected:
  explicit RTreeLeafNodeContentsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
    kCellReferenceFieldNumber = 3,
  };
  // repeated uint32 min = 1;
  int min_size() const;
  private:
  int _internal_min_size() const;
  public:
  void clear_min();
  private:
  uint32_t _internal_min(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_min() const;
  void _internal_add_min(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_min();
  public:
  uint32_t min(int index) const;
  void set_min(int index, uint32_t value);
  void add_min(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      min() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_min();

  // repeated uint32 max = 2;
  int max_size() const;
  private:
  int _internal_max_size() const;
  public:
  void clear_max();
  private:
  uint32_t _internal_max(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_max() const;
  void _internal_add_max(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_max();
  public:
  uint32_t max(int index) const;
  void set_max(int index, uint32_t value);
  void add_max(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      max() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_max();

  // required .TSCE.CellReferenceArchive cell_reference = 3;
  bool has_cell_reference() const;
  private:
  bool _internal_has_cell_reference() const;
  public:
  void clear_cell_reference();
  const ::TSCE::CellReferenceArchive& cell_reference() const;
  PROTOBUF_NODISCARD ::TSCE::CellReferenceArchive* release_cell_reference();
  ::TSCE::CellReferenceArchive* mutable_cell_reference();
  void set_allocated_cell_reference(::TSCE::CellReferenceArchive* cell_reference);
  private:
  const ::TSCE::CellReferenceArchive& _internal_cell_reference() const;
  ::TSCE::CellReferenceArchive* _internal_mutable_cell_reference();
  public:
  void unsafe_arena_set_allocated_cell_reference(
      ::TSCE::CellReferenceArchive* cell_reference);
  ::TSCE::CellReferenceArchive* unsafe_arena_release_cell_reference();

  // @@protoc_insertion_point(class_scope:TSCE.RTreeLeafNodeContentsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > min_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > max_;
    ::TSCE::CellReferenceArchive* cell_reference_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RTreeNodeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RTreeNodeArchive) */ {
 public:
  inline RTreeNodeArchive() : RTreeNodeArchive(nullptr) {}
  ~RTreeNodeArchive() override;
  explicit PROTOBUF_CONSTEXPR RTreeNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RTreeNodeArchive(const RTreeNodeArchive& from);
  RTreeNodeArchive(RTreeNodeArchive&& from) noexcept
    : RTreeNodeArchive() {
    *this = ::std::move(from);
  }

  inline RTreeNodeArchive& operator=(const RTreeNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RTreeNodeArchive& operator=(RTreeNodeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RTreeNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RTreeNodeArchive* internal_default_instance() {
    return reinterpret_cast<const RTreeNodeArchive*>(
               &_RTreeNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RTreeNodeArchive& a, RTreeNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RTreeNodeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RTreeNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RTreeNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RTreeNodeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RTreeNodeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RTreeNodeArchive& from) {
    RTreeNodeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RTreeNodeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RTreeNodeArchive";
  }
  protected:
  explicit RTreeNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInternalNodeContentsFieldNumber = 3,
    kLeafNodeContentsFieldNumber = 4,
    kLevelFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .TSCE.RTreeInternalNodeContentsArchive internal_node_contents = 3;
  int internal_node_contents_size() const;
  private:
  int _internal_internal_node_contents_size() const;
  public:
  void clear_internal_node_contents();
  ::TSCE::RTreeInternalNodeContentsArchive* mutable_internal_node_contents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RTreeInternalNodeContentsArchive >*
      mutable_internal_node_contents();
  private:
  const ::TSCE::RTreeInternalNodeContentsArchive& _internal_internal_node_contents(int index) const;
  ::TSCE::RTreeInternalNodeContentsArchive* _internal_add_internal_node_contents();
  public:
  const ::TSCE::RTreeInternalNodeContentsArchive& internal_node_contents(int index) const;
  ::TSCE::RTreeInternalNodeContentsArchive* add_internal_node_contents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RTreeInternalNodeContentsArchive >&
      internal_node_contents() const;

  // repeated .TSCE.RTreeLeafNodeContentsArchive leaf_node_contents = 4;
  int leaf_node_contents_size() const;
  private:
  int _internal_leaf_node_contents_size() const;
  public:
  void clear_leaf_node_contents();
  ::TSCE::RTreeLeafNodeContentsArchive* mutable_leaf_node_contents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RTreeLeafNodeContentsArchive >*
      mutable_leaf_node_contents();
  private:
  const ::TSCE::RTreeLeafNodeContentsArchive& _internal_leaf_node_contents(int index) const;
  ::TSCE::RTreeLeafNodeContentsArchive* _internal_add_leaf_node_contents();
  public:
  const ::TSCE::RTreeLeafNodeContentsArchive& leaf_node_contents(int index) const;
  ::TSCE::RTreeLeafNodeContentsArchive* add_leaf_node_contents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RTreeLeafNodeContentsArchive >&
      leaf_node_contents() const;

  // required uint32 level = 1;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // required uint32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.RTreeNodeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RTreeInternalNodeContentsArchive > internal_node_contents_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RTreeLeafNodeContentsArchive > leaf_node_contents_;
    uint32_t level_;
    uint32_t count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RTreeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RTreeArchive) */ {
 public:
  inline RTreeArchive() : RTreeArchive(nullptr) {}
  ~RTreeArchive() override;
  explicit PROTOBUF_CONSTEXPR RTreeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RTreeArchive(const RTreeArchive& from);
  RTreeArchive(RTreeArchive&& from) noexcept
    : RTreeArchive() {
    *this = ::std::move(from);
  }

  inline RTreeArchive& operator=(const RTreeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RTreeArchive& operator=(RTreeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RTreeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RTreeArchive* internal_default_instance() {
    return reinterpret_cast<const RTreeArchive*>(
               &_RTreeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RTreeArchive& a, RTreeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RTreeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RTreeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RTreeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RTreeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RTreeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RTreeArchive& from) {
    RTreeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RTreeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RTreeArchive";
  }
  protected:
  explicit RTreeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootFieldNumber = 8,
    kDataFileIdFieldNumber = 1,
    kDataSizeFieldNumber = 2,
    kDataNumDimsFieldNumber = 3,
    kDataElemSizeFieldNumber = 4,
    kDataElemRealSizeFieldNumber = 5,
    kDataMaxNodesFieldNumber = 6,
    kDataMinNodesFieldNumber = 7,
  };
  // required .TSCE.RTreeNodeArchive root = 8;
  bool has_root() const;
  private:
  bool _internal_has_root() const;
  public:
  void clear_root();
  const ::TSCE::RTreeNodeArchive& root() const;
  PROTOBUF_NODISCARD ::TSCE::RTreeNodeArchive* release_root();
  ::TSCE::RTreeNodeArchive* mutable_root();
  void set_allocated_root(::TSCE::RTreeNodeArchive* root);
  private:
  const ::TSCE::RTreeNodeArchive& _internal_root() const;
  ::TSCE::RTreeNodeArchive* _internal_mutable_root();
  public:
  void unsafe_arena_set_allocated_root(
      ::TSCE::RTreeNodeArchive* root);
  ::TSCE::RTreeNodeArchive* unsafe_arena_release_root();

  // required uint32 data_file_id = 1;
  bool has_data_file_id() const;
  private:
  bool _internal_has_data_file_id() const;
  public:
  void clear_data_file_id();
  uint32_t data_file_id() const;
  void set_data_file_id(uint32_t value);
  private:
  uint32_t _internal_data_file_id() const;
  void _internal_set_data_file_id(uint32_t value);
  public:

  // required uint32 data_size = 2;
  bool has_data_size() const;
  private:
  bool _internal_has_data_size() const;
  public:
  void clear_data_size();
  uint32_t data_size() const;
  void set_data_size(uint32_t value);
  private:
  uint32_t _internal_data_size() const;
  void _internal_set_data_size(uint32_t value);
  public:

  // required uint32 data_num_dims = 3;
  bool has_data_num_dims() const;
  private:
  bool _internal_has_data_num_dims() const;
  public:
  void clear_data_num_dims();
  uint32_t data_num_dims() const;
  void set_data_num_dims(uint32_t value);
  private:
  uint32_t _internal_data_num_dims() const;
  void _internal_set_data_num_dims(uint32_t value);
  public:

  // required uint32 data_elem_size = 4;
  bool has_data_elem_size() const;
  private:
  bool _internal_has_data_elem_size() const;
  public:
  void clear_data_elem_size();
  uint32_t data_elem_size() const;
  void set_data_elem_size(uint32_t value);
  private:
  uint32_t _internal_data_elem_size() const;
  void _internal_set_data_elem_size(uint32_t value);
  public:

  // required uint32 data_elem_real_size = 5;
  bool has_data_elem_real_size() const;
  private:
  bool _internal_has_data_elem_real_size() const;
  public:
  void clear_data_elem_real_size();
  uint32_t data_elem_real_size() const;
  void set_data_elem_real_size(uint32_t value);
  private:
  uint32_t _internal_data_elem_real_size() const;
  void _internal_set_data_elem_real_size(uint32_t value);
  public:

  // required uint32 data_max_nodes = 6;
  bool has_data_max_nodes() const;
  private:
  bool _internal_has_data_max_nodes() const;
  public:
  void clear_data_max_nodes();
  uint32_t data_max_nodes() const;
  void set_data_max_nodes(uint32_t value);
  private:
  uint32_t _internal_data_max_nodes() const;
  void _internal_set_data_max_nodes(uint32_t value);
  public:

  // required uint32 data_min_nodes = 7;
  bool has_data_min_nodes() const;
  private:
  bool _internal_has_data_min_nodes() const;
  public:
  void clear_data_min_nodes();
  uint32_t data_min_nodes() const;
  void set_data_min_nodes(uint32_t value);
  private:
  uint32_t _internal_data_min_nodes() const;
  void _internal_set_data_min_nodes(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.RTreeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCE::RTreeNodeArchive* root_;
    uint32_t data_file_id_;
    uint32_t data_size_;
    uint32_t data_num_dims_;
    uint32_t data_elem_size_;
    uint32_t data_elem_real_size_;
    uint32_t data_max_nodes_;
    uint32_t data_min_nodes_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RangeDependenciesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RangeDependenciesArchive) */ {
 public:
  inline RangeDependenciesArchive() : RangeDependenciesArchive(nullptr) {}
  ~RangeDependenciesArchive() override;
  explicit PROTOBUF_CONSTEXPR RangeDependenciesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RangeDependenciesArchive(const RangeDependenciesArchive& from);
  RangeDependenciesArchive(RangeDependenciesArchive&& from) noexcept
    : RangeDependenciesArchive() {
    *this = ::std::move(from);
  }

  inline RangeDependenciesArchive& operator=(const RangeDependenciesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeDependenciesArchive& operator=(RangeDependenciesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RangeDependenciesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RangeDependenciesArchive* internal_default_instance() {
    return reinterpret_cast<const RangeDependenciesArchive*>(
               &_RangeDependenciesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(RangeDependenciesArchive& a, RangeDependenciesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeDependenciesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RangeDependenciesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RangeDependenciesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RangeDependenciesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RangeDependenciesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RangeDependenciesArchive& from) {
    RangeDependenciesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeDependenciesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RangeDependenciesArchive";
  }
  protected:
  explicit RangeDependenciesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBackDependencyFieldNumber = 2,
    kRTreeFieldNumber = 1,
  };
  // repeated .TSCE.RangeBackDependencyArchive back_dependency = 2;
  int back_dependency_size() const;
  private:
  int _internal_back_dependency_size() const;
  public:
  void clear_back_dependency();
  ::TSCE::RangeBackDependencyArchive* mutable_back_dependency(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RangeBackDependencyArchive >*
      mutable_back_dependency();
  private:
  const ::TSCE::RangeBackDependencyArchive& _internal_back_dependency(int index) const;
  ::TSCE::RangeBackDependencyArchive* _internal_add_back_dependency();
  public:
  const ::TSCE::RangeBackDependencyArchive& back_dependency(int index) const;
  ::TSCE::RangeBackDependencyArchive* add_back_dependency();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RangeBackDependencyArchive >&
      back_dependency() const;

  // optional .TSCE.RTreeArchive r_tree = 1;
  bool has_r_tree() const;
  private:
  bool _internal_has_r_tree() const;
  public:
  void clear_r_tree();
  const ::TSCE::RTreeArchive& r_tree() const;
  PROTOBUF_NODISCARD ::TSCE::RTreeArchive* release_r_tree();
  ::TSCE::RTreeArchive* mutable_r_tree();
  void set_allocated_r_tree(::TSCE::RTreeArchive* r_tree);
  private:
  const ::TSCE::RTreeArchive& _internal_r_tree() const;
  ::TSCE::RTreeArchive* _internal_mutable_r_tree();
  public:
  void unsafe_arena_set_allocated_r_tree(
      ::TSCE::RTreeArchive* r_tree);
  ::TSCE::RTreeArchive* unsafe_arena_release_r_tree();

  // @@protoc_insertion_point(class_scope:TSCE.RangeDependenciesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RangeBackDependencyArchive > back_dependency_;
    ::TSCE::RTreeArchive* r_tree_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class SpanningDependenciesArchive_ReferringColumnToLocalCells final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells) */ {
 public:
  inline SpanningDependenciesArchive_ReferringColumnToLocalCells() : SpanningDependenciesArchive_ReferringColumnToLocalCells(nullptr) {}
  ~SpanningDependenciesArchive_ReferringColumnToLocalCells() override;
  explicit PROTOBUF_CONSTEXPR SpanningDependenciesArchive_ReferringColumnToLocalCells(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpanningDependenciesArchive_ReferringColumnToLocalCells(const SpanningDependenciesArchive_ReferringColumnToLocalCells& from);
  SpanningDependenciesArchive_ReferringColumnToLocalCells(SpanningDependenciesArchive_ReferringColumnToLocalCells&& from) noexcept
    : SpanningDependenciesArchive_ReferringColumnToLocalCells() {
    *this = ::std::move(from);
  }

  inline SpanningDependenciesArchive_ReferringColumnToLocalCells& operator=(const SpanningDependenciesArchive_ReferringColumnToLocalCells& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpanningDependenciesArchive_ReferringColumnToLocalCells& operator=(SpanningDependenciesArchive_ReferringColumnToLocalCells&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpanningDependenciesArchive_ReferringColumnToLocalCells& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpanningDependenciesArchive_ReferringColumnToLocalCells* internal_default_instance() {
    return reinterpret_cast<const SpanningDependenciesArchive_ReferringColumnToLocalCells*>(
               &_SpanningDependenciesArchive_ReferringColumnToLocalCells_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SpanningDependenciesArchive_ReferringColumnToLocalCells& a, SpanningDependenciesArchive_ReferringColumnToLocalCells& b) {
    a.Swap(&b);
  }
  inline void Swap(SpanningDependenciesArchive_ReferringColumnToLocalCells* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpanningDependenciesArchive_ReferringColumnToLocalCells* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpanningDependenciesArchive_ReferringColumnToLocalCells* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpanningDependenciesArchive_ReferringColumnToLocalCells>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpanningDependenciesArchive_ReferringColumnToLocalCells& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpanningDependenciesArchive_ReferringColumnToLocalCells& from) {
    SpanningDependenciesArchive_ReferringColumnToLocalCells::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpanningDependenciesArchive_ReferringColumnToLocalCells* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells";
  }
  protected:
  explicit SpanningDependenciesArchive_ReferringColumnToLocalCells(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellCoordinateFieldNumber = 3,
    kColumnFieldNumber = 1,
    kRangeContextFieldNumber = 2,
  };
  // repeated .TSCE.CellCoordinateArchive cell_coordinate = 3;
  int cell_coordinate_size() const;
  private:
  int _internal_cell_coordinate_size() const;
  public:
  void clear_cell_coordinate();
  ::TSCE::CellCoordinateArchive* mutable_cell_coordinate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >*
      mutable_cell_coordinate();
  private:
  const ::TSCE::CellCoordinateArchive& _internal_cell_coordinate(int index) const;
  ::TSCE::CellCoordinateArchive* _internal_add_cell_coordinate();
  public:
  const ::TSCE::CellCoordinateArchive& cell_coordinate(int index) const;
  ::TSCE::CellCoordinateArchive* add_cell_coordinate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >&
      cell_coordinate() const;

  // required uint32 column = 1;
  bool has_column() const;
  private:
  bool _internal_has_column() const;
  public:
  void clear_column();
  uint32_t column() const;
  void set_column(uint32_t value);
  private:
  uint32_t _internal_column() const;
  void _internal_set_column(uint32_t value);
  public:

  // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
  bool has_range_context() const;
  private:
  bool _internal_has_range_context() const;
  public:
  void clear_range_context();
  ::TSCE::SpanningDependenciesArchive_RangeContext range_context() const;
  void set_range_context(::TSCE::SpanningDependenciesArchive_RangeContext value);
  private:
  ::TSCE::SpanningDependenciesArchive_RangeContext _internal_range_context() const;
  void _internal_set_range_context(::TSCE::SpanningDependenciesArchive_RangeContext value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive > cell_coordinate_;
    uint32_t column_;
    int range_context_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class SpanningDependenciesArchive_ReferringColumnToRemoteCells final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells) */ {
 public:
  inline SpanningDependenciesArchive_ReferringColumnToRemoteCells() : SpanningDependenciesArchive_ReferringColumnToRemoteCells(nullptr) {}
  ~SpanningDependenciesArchive_ReferringColumnToRemoteCells() override;
  explicit PROTOBUF_CONSTEXPR SpanningDependenciesArchive_ReferringColumnToRemoteCells(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpanningDependenciesArchive_ReferringColumnToRemoteCells(const SpanningDependenciesArchive_ReferringColumnToRemoteCells& from);
  SpanningDependenciesArchive_ReferringColumnToRemoteCells(SpanningDependenciesArchive_ReferringColumnToRemoteCells&& from) noexcept
    : SpanningDependenciesArchive_ReferringColumnToRemoteCells() {
    *this = ::std::move(from);
  }

  inline SpanningDependenciesArchive_ReferringColumnToRemoteCells& operator=(const SpanningDependenciesArchive_ReferringColumnToRemoteCells& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpanningDependenciesArchive_ReferringColumnToRemoteCells& operator=(SpanningDependenciesArchive_ReferringColumnToRemoteCells&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpanningDependenciesArchive_ReferringColumnToRemoteCells& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpanningDependenciesArchive_ReferringColumnToRemoteCells* internal_default_instance() {
    return reinterpret_cast<const SpanningDependenciesArchive_ReferringColumnToRemoteCells*>(
               &_SpanningDependenciesArchive_ReferringColumnToRemoteCells_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SpanningDependenciesArchive_ReferringColumnToRemoteCells& a, SpanningDependenciesArchive_ReferringColumnToRemoteCells& b) {
    a.Swap(&b);
  }
  inline void Swap(SpanningDependenciesArchive_ReferringColumnToRemoteCells* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpanningDependenciesArchive_ReferringColumnToRemoteCells* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpanningDependenciesArchive_ReferringColumnToRemoteCells* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpanningDependenciesArchive_ReferringColumnToRemoteCells>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpanningDependenciesArchive_ReferringColumnToRemoteCells& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpanningDependenciesArchive_ReferringColumnToRemoteCells& from) {
    SpanningDependenciesArchive_ReferringColumnToRemoteCells::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpanningDependenciesArchive_ReferringColumnToRemoteCells* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells";
  }
  protected:
  explicit SpanningDependenciesArchive_ReferringColumnToRemoteCells(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInternalCellReferenceFieldNumber = 3,
    kColumnFieldNumber = 1,
    kRangeContextFieldNumber = 2,
  };
  // repeated .TSCE.InternalCellReferenceArchive internal_cell_reference = 3;
  int internal_cell_reference_size() const;
  private:
  int _internal_internal_cell_reference_size() const;
  public:
  void clear_internal_cell_reference();
  ::TSCE::InternalCellReferenceArchive* mutable_internal_cell_reference(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive >*
      mutable_internal_cell_reference();
  private:
  const ::TSCE::InternalCellReferenceArchive& _internal_internal_cell_reference(int index) const;
  ::TSCE::InternalCellReferenceArchive* _internal_add_internal_cell_reference();
  public:
  const ::TSCE::InternalCellReferenceArchive& internal_cell_reference(int index) const;
  ::TSCE::InternalCellReferenceArchive* add_internal_cell_reference();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive >&
      internal_cell_reference() const;

  // required uint32 column = 1;
  bool has_column() const;
  private:
  bool _internal_has_column() const;
  public:
  void clear_column();
  uint32_t column() const;
  void set_column(uint32_t value);
  private:
  uint32_t _internal_column() const;
  void _internal_set_column(uint32_t value);
  public:

  // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
  bool has_range_context() const;
  private:
  bool _internal_has_range_context() const;
  public:
  void clear_range_context();
  ::TSCE::SpanningDependenciesArchive_RangeContext range_context() const;
  void set_range_context(::TSCE::SpanningDependenciesArchive_RangeContext value);
  private:
  ::TSCE::SpanningDependenciesArchive_RangeContext _internal_range_context() const;
  void _internal_set_range_context(::TSCE::SpanningDependenciesArchive_RangeContext value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive > internal_cell_reference_;
    uint32_t column_;
    int range_context_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class SpanningDependenciesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.SpanningDependenciesArchive) */ {
 public:
  inline SpanningDependenciesArchive() : SpanningDependenciesArchive(nullptr) {}
  ~SpanningDependenciesArchive() override;
  explicit PROTOBUF_CONSTEXPR SpanningDependenciesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpanningDependenciesArchive(const SpanningDependenciesArchive& from);
  SpanningDependenciesArchive(SpanningDependenciesArchive&& from) noexcept
    : SpanningDependenciesArchive() {
    *this = ::std::move(from);
  }

  inline SpanningDependenciesArchive& operator=(const SpanningDependenciesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpanningDependenciesArchive& operator=(SpanningDependenciesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpanningDependenciesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpanningDependenciesArchive* internal_default_instance() {
    return reinterpret_cast<const SpanningDependenciesArchive*>(
               &_SpanningDependenciesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SpanningDependenciesArchive& a, SpanningDependenciesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SpanningDependenciesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpanningDependenciesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpanningDependenciesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpanningDependenciesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpanningDependenciesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpanningDependenciesArchive& from) {
    SpanningDependenciesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpanningDependenciesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.SpanningDependenciesArchive";
  }
  protected:
  explicit SpanningDependenciesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SpanningDependenciesArchive_ReferringColumnToLocalCells ReferringColumnToLocalCells;
  typedef SpanningDependenciesArchive_ReferringColumnToRemoteCells ReferringColumnToRemoteCells;

  typedef SpanningDependenciesArchive_RangeContext RangeContext;
  static constexpr RangeContext DEFAULT =
    SpanningDependenciesArchive_RangeContext_DEFAULT;
  static constexpr RangeContext INCLUDE_HEADERS =
    SpanningDependenciesArchive_RangeContext_INCLUDE_HEADERS;
  static inline bool RangeContext_IsValid(int value) {
    return SpanningDependenciesArchive_RangeContext_IsValid(value);
  }
  static constexpr RangeContext RangeContext_MIN =
    SpanningDependenciesArchive_RangeContext_RangeContext_MIN;
  static constexpr RangeContext RangeContext_MAX =
    SpanningDependenciesArchive_RangeContext_RangeContext_MAX;
  static constexpr int RangeContext_ARRAYSIZE =
    SpanningDependenciesArchive_RangeContext_RangeContext_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RangeContext_descriptor() {
    return SpanningDependenciesArchive_RangeContext_descriptor();
  }
  template<typename T>
  static inline const std::string& RangeContext_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RangeContext>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RangeContext_Name.");
    return SpanningDependenciesArchive_RangeContext_Name(enum_t_value);
  }
  static inline bool RangeContext_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RangeContext* value) {
    return SpanningDependenciesArchive_RangeContext_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kColumnFieldNumber = 1,
    kRangeContextFieldNumber = 2,
    kCellFieldNumber = 3,
    kReferringColumnToLocalCellsFieldNumber = 6,
    kReferringColumnToRemoteCellsFieldNumber = 7,
    kTotalRangeForDeletedTableFieldNumber = 4,
    kBodyRangeForDeletedTableFieldNumber = 5,
  };
  // repeated uint32 column = 1;
  int column_size() const;
  private:
  int _internal_column_size() const;
  public:
  void clear_column();
  private:
  uint32_t _internal_column(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_column() const;
  void _internal_add_column(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_column();
  public:
  uint32_t column(int index) const;
  void set_column(int index, uint32_t value);
  void add_column(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      column() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_column();

  // repeated .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
  int range_context_size() const;
  private:
  int _internal_range_context_size() const;
  public:
  void clear_range_context();
  private:
  ::TSCE::SpanningDependenciesArchive_RangeContext _internal_range_context(int index) const;
  void _internal_add_range_context(::TSCE::SpanningDependenciesArchive_RangeContext value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_range_context();
  public:
  ::TSCE::SpanningDependenciesArchive_RangeContext range_context(int index) const;
  void set_range_context(int index, ::TSCE::SpanningDependenciesArchive_RangeContext value);
  void add_range_context(::TSCE::SpanningDependenciesArchive_RangeContext value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& range_context() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_range_context();

  // repeated .TSCE.CellReferenceArchive cell = 3;
  int cell_size() const;
  private:
  int _internal_cell_size() const;
  public:
  void clear_cell();
  ::TSCE::CellReferenceArchive* mutable_cell(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellReferenceArchive >*
      mutable_cell();
  private:
  const ::TSCE::CellReferenceArchive& _internal_cell(int index) const;
  ::TSCE::CellReferenceArchive* _internal_add_cell();
  public:
  const ::TSCE::CellReferenceArchive& cell(int index) const;
  ::TSCE::CellReferenceArchive* add_cell();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellReferenceArchive >&
      cell() const;

  // repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells referring_column_to_local_cells = 6;
  int referring_column_to_local_cells_size() const;
  private:
  int _internal_referring_column_to_local_cells_size() const;
  public:
  void clear_referring_column_to_local_cells();
  ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells* mutable_referring_column_to_local_cells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells >*
      mutable_referring_column_to_local_cells();
  private:
  const ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells& _internal_referring_column_to_local_cells(int index) const;
  ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells* _internal_add_referring_column_to_local_cells();
  public:
  const ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells& referring_column_to_local_cells(int index) const;
  ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells* add_referring_column_to_local_cells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells >&
      referring_column_to_local_cells() const;

  // repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells referring_column_to_remote_cells = 7;
  int referring_column_to_remote_cells_size() const;
  private:
  int _internal_referring_column_to_remote_cells_size() const;
  public:
  void clear_referring_column_to_remote_cells();
  ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells* mutable_referring_column_to_remote_cells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells >*
      mutable_referring_column_to_remote_cells();
  private:
  const ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells& _internal_referring_column_to_remote_cells(int index) const;
  ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells* _internal_add_referring_column_to_remote_cells();
  public:
  const ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells& referring_column_to_remote_cells(int index) const;
  ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells* add_referring_column_to_remote_cells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells >&
      referring_column_to_remote_cells() const;

  // optional .TSCE.RangeCoordinateArchive total_range_for_deleted_table = 4;
  bool has_total_range_for_deleted_table() const;
  private:
  bool _internal_has_total_range_for_deleted_table() const;
  public:
  void clear_total_range_for_deleted_table();
  const ::TSCE::RangeCoordinateArchive& total_range_for_deleted_table() const;
  PROTOBUF_NODISCARD ::TSCE::RangeCoordinateArchive* release_total_range_for_deleted_table();
  ::TSCE::RangeCoordinateArchive* mutable_total_range_for_deleted_table();
  void set_allocated_total_range_for_deleted_table(::TSCE::RangeCoordinateArchive* total_range_for_deleted_table);
  private:
  const ::TSCE::RangeCoordinateArchive& _internal_total_range_for_deleted_table() const;
  ::TSCE::RangeCoordinateArchive* _internal_mutable_total_range_for_deleted_table();
  public:
  void unsafe_arena_set_allocated_total_range_for_deleted_table(
      ::TSCE::RangeCoordinateArchive* total_range_for_deleted_table);
  ::TSCE::RangeCoordinateArchive* unsafe_arena_release_total_range_for_deleted_table();

  // optional .TSCE.RangeCoordinateArchive body_range_for_deleted_table = 5;
  bool has_body_range_for_deleted_table() const;
  private:
  bool _internal_has_body_range_for_deleted_table() const;
  public:
  void clear_body_range_for_deleted_table();
  const ::TSCE::RangeCoordinateArchive& body_range_for_deleted_table() const;
  PROTOBUF_NODISCARD ::TSCE::RangeCoordinateArchive* release_body_range_for_deleted_table();
  ::TSCE::RangeCoordinateArchive* mutable_body_range_for_deleted_table();
  void set_allocated_body_range_for_deleted_table(::TSCE::RangeCoordinateArchive* body_range_for_deleted_table);
  private:
  const ::TSCE::RangeCoordinateArchive& _internal_body_range_for_deleted_table() const;
  ::TSCE::RangeCoordinateArchive* _internal_mutable_body_range_for_deleted_table();
  public:
  void unsafe_arena_set_allocated_body_range_for_deleted_table(
      ::TSCE::RangeCoordinateArchive* body_range_for_deleted_table);
  ::TSCE::RangeCoordinateArchive* unsafe_arena_release_body_range_for_deleted_table();

  // @@protoc_insertion_point(class_scope:TSCE.SpanningDependenciesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > column_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> range_context_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellReferenceArchive > cell_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells > referring_column_to_local_cells_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells > referring_column_to_remote_cells_;
    ::TSCE::RangeCoordinateArchive* total_range_for_deleted_table_;
    ::TSCE::RangeCoordinateArchive* body_range_for_deleted_table_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class WholeOwnerDependenciesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.WholeOwnerDependenciesArchive) */ {
 public:
  inline WholeOwnerDependenciesArchive() : WholeOwnerDependenciesArchive(nullptr) {}
  ~WholeOwnerDependenciesArchive() override;
  explicit PROTOBUF_CONSTEXPR WholeOwnerDependenciesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WholeOwnerDependenciesArchive(const WholeOwnerDependenciesArchive& from);
  WholeOwnerDependenciesArchive(WholeOwnerDependenciesArchive&& from) noexcept
    : WholeOwnerDependenciesArchive() {
    *this = ::std::move(from);
  }

  inline WholeOwnerDependenciesArchive& operator=(const WholeOwnerDependenciesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline WholeOwnerDependenciesArchive& operator=(WholeOwnerDependenciesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WholeOwnerDependenciesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const WholeOwnerDependenciesArchive* internal_default_instance() {
    return reinterpret_cast<const WholeOwnerDependenciesArchive*>(
               &_WholeOwnerDependenciesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(WholeOwnerDependenciesArchive& a, WholeOwnerDependenciesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(WholeOwnerDependenciesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WholeOwnerDependenciesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WholeOwnerDependenciesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WholeOwnerDependenciesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WholeOwnerDependenciesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WholeOwnerDependenciesArchive& from) {
    WholeOwnerDependenciesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WholeOwnerDependenciesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.WholeOwnerDependenciesArchive";
  }
  protected:
  explicit WholeOwnerDependenciesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDependentCellFieldNumber = 1,
  };
  // repeated .TSCE.InternalCellReferenceArchive dependent_cell = 1;
  int dependent_cell_size() const;
  private:
  int _internal_dependent_cell_size() const;
  public:
  void clear_dependent_cell();
  ::TSCE::InternalCellReferenceArchive* mutable_dependent_cell(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive >*
      mutable_dependent_cell();
  private:
  const ::TSCE::InternalCellReferenceArchive& _internal_dependent_cell(int index) const;
  ::TSCE::InternalCellReferenceArchive* _internal_add_dependent_cell();
  public:
  const ::TSCE::InternalCellReferenceArchive& dependent_cell(int index) const;
  ::TSCE::InternalCellReferenceArchive* add_dependent_cell();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive >&
      dependent_cell() const;

  // @@protoc_insertion_point(class_scope:TSCE.WholeOwnerDependenciesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive > dependent_cell_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class FormulaOwnerInfoArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.FormulaOwnerInfoArchive) */ {
 public:
  inline FormulaOwnerInfoArchive() : FormulaOwnerInfoArchive(nullptr) {}
  ~FormulaOwnerInfoArchive() override;
  explicit PROTOBUF_CONSTEXPR FormulaOwnerInfoArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormulaOwnerInfoArchive(const FormulaOwnerInfoArchive& from);
  FormulaOwnerInfoArchive(FormulaOwnerInfoArchive&& from) noexcept
    : FormulaOwnerInfoArchive() {
    *this = ::std::move(from);
  }

  inline FormulaOwnerInfoArchive& operator=(const FormulaOwnerInfoArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormulaOwnerInfoArchive& operator=(FormulaOwnerInfoArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormulaOwnerInfoArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormulaOwnerInfoArchive* internal_default_instance() {
    return reinterpret_cast<const FormulaOwnerInfoArchive*>(
               &_FormulaOwnerInfoArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(FormulaOwnerInfoArchive& a, FormulaOwnerInfoArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormulaOwnerInfoArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormulaOwnerInfoArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FormulaOwnerInfoArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FormulaOwnerInfoArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FormulaOwnerInfoArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FormulaOwnerInfoArchive& from) {
    FormulaOwnerInfoArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormulaOwnerInfoArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.FormulaOwnerInfoArchive";
  }
  protected:
  explicit FormulaOwnerInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormulaOwnerIdFieldNumber = 1,
    kCellDependenciesFieldNumber = 2,
    kRangeDependenciesFieldNumber = 3,
    kVolatileDependenciesFieldNumber = 4,
    kSpanningColumnDependenciesFieldNumber = 5,
    kSpanningRowDependenciesFieldNumber = 6,
    kFormulaOwnerFieldNumber = 7,
    kWholeOwnerDependenciesFieldNumber = 8,
  };
  // required .TSCE.CFUUIDArchive formula_owner_id = 1;
  bool has_formula_owner_id() const;
  private:
  bool _internal_has_formula_owner_id() const;
  public:
  void clear_formula_owner_id();
  const ::TSCE::CFUUIDArchive& formula_owner_id() const;
  PROTOBUF_NODISCARD ::TSCE::CFUUIDArchive* release_formula_owner_id();
  ::TSCE::CFUUIDArchive* mutable_formula_owner_id();
  void set_allocated_formula_owner_id(::TSCE::CFUUIDArchive* formula_owner_id);
  private:
  const ::TSCE::CFUUIDArchive& _internal_formula_owner_id() const;
  ::TSCE::CFUUIDArchive* _internal_mutable_formula_owner_id();
  public:
  void unsafe_arena_set_allocated_formula_owner_id(
      ::TSCE::CFUUIDArchive* formula_owner_id);
  ::TSCE::CFUUIDArchive* unsafe_arena_release_formula_owner_id();

  // optional .TSCE.CellDependenciesArchive cell_dependencies = 2;
  bool has_cell_dependencies() const;
  private:
  bool _internal_has_cell_dependencies() const;
  public:
  void clear_cell_dependencies();
  const ::TSCE::CellDependenciesArchive& cell_dependencies() const;
  PROTOBUF_NODISCARD ::TSCE::CellDependenciesArchive* release_cell_dependencies();
  ::TSCE::CellDependenciesArchive* mutable_cell_dependencies();
  void set_allocated_cell_dependencies(::TSCE::CellDependenciesArchive* cell_dependencies);
  private:
  const ::TSCE::CellDependenciesArchive& _internal_cell_dependencies() const;
  ::TSCE::CellDependenciesArchive* _internal_mutable_cell_dependencies();
  public:
  void unsafe_arena_set_allocated_cell_dependencies(
      ::TSCE::CellDependenciesArchive* cell_dependencies);
  ::TSCE::CellDependenciesArchive* unsafe_arena_release_cell_dependencies();

  // optional .TSCE.RangeDependenciesArchive range_dependencies = 3;
  bool has_range_dependencies() const;
  private:
  bool _internal_has_range_dependencies() const;
  public:
  void clear_range_dependencies();
  const ::TSCE::RangeDependenciesArchive& range_dependencies() const;
  PROTOBUF_NODISCARD ::TSCE::RangeDependenciesArchive* release_range_dependencies();
  ::TSCE::RangeDependenciesArchive* mutable_range_dependencies();
  void set_allocated_range_dependencies(::TSCE::RangeDependenciesArchive* range_dependencies);
  private:
  const ::TSCE::RangeDependenciesArchive& _internal_range_dependencies() const;
  ::TSCE::RangeDependenciesArchive* _internal_mutable_range_dependencies();
  public:
  void unsafe_arena_set_allocated_range_dependencies(
      ::TSCE::RangeDependenciesArchive* range_dependencies);
  ::TSCE::RangeDependenciesArchive* unsafe_arena_release_range_dependencies();

  // optional .TSCE.VolatileDependenciesArchive volatile_dependencies = 4;
  bool has_volatile_dependencies() const;
  private:
  bool _internal_has_volatile_dependencies() const;
  public:
  void clear_volatile_dependencies();
  const ::TSCE::VolatileDependenciesArchive& volatile_dependencies() const;
  PROTOBUF_NODISCARD ::TSCE::VolatileDependenciesArchive* release_volatile_dependencies();
  ::TSCE::VolatileDependenciesArchive* mutable_volatile_dependencies();
  void set_allocated_volatile_dependencies(::TSCE::VolatileDependenciesArchive* volatile_dependencies);
  private:
  const ::TSCE::VolatileDependenciesArchive& _internal_volatile_dependencies() const;
  ::TSCE::VolatileDependenciesArchive* _internal_mutable_volatile_dependencies();
  public:
  void unsafe_arena_set_allocated_volatile_dependencies(
      ::TSCE::VolatileDependenciesArchive* volatile_dependencies);
  ::TSCE::VolatileDependenciesArchive* unsafe_arena_release_volatile_dependencies();

  // optional .TSCE.SpanningDependenciesArchive spanning_column_dependencies = 5;
  bool has_spanning_column_dependencies() const;
  private:
  bool _internal_has_spanning_column_dependencies() const;
  public:
  void clear_spanning_column_dependencies();
  const ::TSCE::SpanningDependenciesArchive& spanning_column_dependencies() const;
  PROTOBUF_NODISCARD ::TSCE::SpanningDependenciesArchive* release_spanning_column_dependencies();
  ::TSCE::SpanningDependenciesArchive* mutable_spanning_column_dependencies();
  void set_allocated_spanning_column_dependencies(::TSCE::SpanningDependenciesArchive* spanning_column_dependencies);
  private:
  const ::TSCE::SpanningDependenciesArchive& _internal_spanning_column_dependencies() const;
  ::TSCE::SpanningDependenciesArchive* _internal_mutable_spanning_column_dependencies();
  public:
  void unsafe_arena_set_allocated_spanning_column_dependencies(
      ::TSCE::SpanningDependenciesArchive* spanning_column_dependencies);
  ::TSCE::SpanningDependenciesArchive* unsafe_arena_release_spanning_column_dependencies();

  // optional .TSCE.SpanningDependenciesArchive spanning_row_dependencies = 6;
  bool has_spanning_row_dependencies() const;
  private:
  bool _internal_has_spanning_row_dependencies() const;
  public:
  void clear_spanning_row_dependencies();
  const ::TSCE::SpanningDependenciesArchive& spanning_row_dependencies() const;
  PROTOBUF_NODISCARD ::TSCE::SpanningDependenciesArchive* release_spanning_row_dependencies();
  ::TSCE::SpanningDependenciesArchive* mutable_spanning_row_dependencies();
  void set_allocated_spanning_row_dependencies(::TSCE::SpanningDependenciesArchive* spanning_row_dependencies);
  private:
  const ::TSCE::SpanningDependenciesArchive& _internal_spanning_row_dependencies() const;
  ::TSCE::SpanningDependenciesArchive* _internal_mutable_spanning_row_dependencies();
  public:
  void unsafe_arena_set_allocated_spanning_row_dependencies(
      ::TSCE::SpanningDependenciesArchive* spanning_row_dependencies);
  ::TSCE::SpanningDependenciesArchive* unsafe_arena_release_spanning_row_dependencies();

  // optional .TSP.Reference formula_owner = 7;
  bool has_formula_owner() const;
  private:
  bool _internal_has_formula_owner() const;
  public:
  void clear_formula_owner();
  const ::TSP::Reference& formula_owner() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_formula_owner();
  ::TSP::Reference* mutable_formula_owner();
  void set_allocated_formula_owner(::TSP::Reference* formula_owner);
  private:
  const ::TSP::Reference& _internal_formula_owner() const;
  ::TSP::Reference* _internal_mutable_formula_owner();
  public:
  void unsafe_arena_set_allocated_formula_owner(
      ::TSP::Reference* formula_owner);
  ::TSP::Reference* unsafe_arena_release_formula_owner();

  // optional .TSCE.WholeOwnerDependenciesArchive whole_owner_dependencies = 8;
  bool has_whole_owner_dependencies() const;
  private:
  bool _internal_has_whole_owner_dependencies() const;
  public:
  void clear_whole_owner_dependencies();
  const ::TSCE::WholeOwnerDependenciesArchive& whole_owner_dependencies() const;
  PROTOBUF_NODISCARD ::TSCE::WholeOwnerDependenciesArchive* release_whole_owner_dependencies();
  ::TSCE::WholeOwnerDependenciesArchive* mutable_whole_owner_dependencies();
  void set_allocated_whole_owner_dependencies(::TSCE::WholeOwnerDependenciesArchive* whole_owner_dependencies);
  private:
  const ::TSCE::WholeOwnerDependenciesArchive& _internal_whole_owner_dependencies() const;
  ::TSCE::WholeOwnerDependenciesArchive* _internal_mutable_whole_owner_dependencies();
  public:
  void unsafe_arena_set_allocated_whole_owner_dependencies(
      ::TSCE::WholeOwnerDependenciesArchive* whole_owner_dependencies);
  ::TSCE::WholeOwnerDependenciesArchive* unsafe_arena_release_whole_owner_dependencies();

  // @@protoc_insertion_point(class_scope:TSCE.FormulaOwnerInfoArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCE::CFUUIDArchive* formula_owner_id_;
    ::TSCE::CellDependenciesArchive* cell_dependencies_;
    ::TSCE::RangeDependenciesArchive* range_dependencies_;
    ::TSCE::VolatileDependenciesArchive* volatile_dependencies_;
    ::TSCE::SpanningDependenciesArchive* spanning_column_dependencies_;
    ::TSCE::SpanningDependenciesArchive* spanning_row_dependencies_;
    ::TSP::Reference* formula_owner_;
    ::TSCE::WholeOwnerDependenciesArchive* whole_owner_dependencies_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class OwnerIDMapArchive_OwnerIDMapArchiveEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry) */ {
 public:
  inline OwnerIDMapArchive_OwnerIDMapArchiveEntry() : OwnerIDMapArchive_OwnerIDMapArchiveEntry(nullptr) {}
  ~OwnerIDMapArchive_OwnerIDMapArchiveEntry() override;
  explicit PROTOBUF_CONSTEXPR OwnerIDMapArchive_OwnerIDMapArchiveEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OwnerIDMapArchive_OwnerIDMapArchiveEntry(const OwnerIDMapArchive_OwnerIDMapArchiveEntry& from);
  OwnerIDMapArchive_OwnerIDMapArchiveEntry(OwnerIDMapArchive_OwnerIDMapArchiveEntry&& from) noexcept
    : OwnerIDMapArchive_OwnerIDMapArchiveEntry() {
    *this = ::std::move(from);
  }

  inline OwnerIDMapArchive_OwnerIDMapArchiveEntry& operator=(const OwnerIDMapArchive_OwnerIDMapArchiveEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline OwnerIDMapArchive_OwnerIDMapArchiveEntry& operator=(OwnerIDMapArchive_OwnerIDMapArchiveEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OwnerIDMapArchive_OwnerIDMapArchiveEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const OwnerIDMapArchive_OwnerIDMapArchiveEntry* internal_default_instance() {
    return reinterpret_cast<const OwnerIDMapArchive_OwnerIDMapArchiveEntry*>(
               &_OwnerIDMapArchive_OwnerIDMapArchiveEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(OwnerIDMapArchive_OwnerIDMapArchiveEntry& a, OwnerIDMapArchive_OwnerIDMapArchiveEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(OwnerIDMapArchive_OwnerIDMapArchiveEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OwnerIDMapArchive_OwnerIDMapArchiveEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OwnerIDMapArchive_OwnerIDMapArchiveEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OwnerIDMapArchive_OwnerIDMapArchiveEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OwnerIDMapArchive_OwnerIDMapArchiveEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OwnerIDMapArchive_OwnerIDMapArchiveEntry& from) {
    OwnerIDMapArchive_OwnerIDMapArchiveEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OwnerIDMapArchive_OwnerIDMapArchiveEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry";
  }
  protected:
  explicit OwnerIDMapArchive_OwnerIDMapArchiveEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerIdFieldNumber = 2,
    kInternalOwnerIdFieldNumber = 1,
  };
  // required .TSCE.CFUUIDArchive owner_id = 2;
  bool has_owner_id() const;
  private:
  bool _internal_has_owner_id() const;
  public:
  void clear_owner_id();
  const ::TSCE::CFUUIDArchive& owner_id() const;
  PROTOBUF_NODISCARD ::TSCE::CFUUIDArchive* release_owner_id();
  ::TSCE::CFUUIDArchive* mutable_owner_id();
  void set_allocated_owner_id(::TSCE::CFUUIDArchive* owner_id);
  private:
  const ::TSCE::CFUUIDArchive& _internal_owner_id() const;
  ::TSCE::CFUUIDArchive* _internal_mutable_owner_id();
  public:
  void unsafe_arena_set_allocated_owner_id(
      ::TSCE::CFUUIDArchive* owner_id);
  ::TSCE::CFUUIDArchive* unsafe_arena_release_owner_id();

  // required uint32 internal_owner_id = 1;
  bool has_internal_owner_id() const;
  private:
  bool _internal_has_internal_owner_id() const;
  public:
  void clear_internal_owner_id();
  uint32_t internal_owner_id() const;
  void set_internal_owner_id(uint32_t value);
  private:
  uint32_t _internal_internal_owner_id() const;
  void _internal_set_internal_owner_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCE::CFUUIDArchive* owner_id_;
    uint32_t internal_owner_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class OwnerIDMapArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.OwnerIDMapArchive) */ {
 public:
  inline OwnerIDMapArchive() : OwnerIDMapArchive(nullptr) {}
  ~OwnerIDMapArchive() override;
  explicit PROTOBUF_CONSTEXPR OwnerIDMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OwnerIDMapArchive(const OwnerIDMapArchive& from);
  OwnerIDMapArchive(OwnerIDMapArchive&& from) noexcept
    : OwnerIDMapArchive() {
    *this = ::std::move(from);
  }

  inline OwnerIDMapArchive& operator=(const OwnerIDMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline OwnerIDMapArchive& operator=(OwnerIDMapArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OwnerIDMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const OwnerIDMapArchive* internal_default_instance() {
    return reinterpret_cast<const OwnerIDMapArchive*>(
               &_OwnerIDMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(OwnerIDMapArchive& a, OwnerIDMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(OwnerIDMapArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OwnerIDMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OwnerIDMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OwnerIDMapArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OwnerIDMapArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OwnerIDMapArchive& from) {
    OwnerIDMapArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OwnerIDMapArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.OwnerIDMapArchive";
  }
  protected:
  explicit OwnerIDMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OwnerIDMapArchive_OwnerIDMapArchiveEntry OwnerIDMapArchiveEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kMapEntryFieldNumber = 1,
  };
  // repeated .TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry map_entry = 1;
  int map_entry_size() const;
  private:
  int _internal_map_entry_size() const;
  public:
  void clear_map_entry();
  ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry* mutable_map_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry >*
      mutable_map_entry();
  private:
  const ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry& _internal_map_entry(int index) const;
  ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry* _internal_add_map_entry();
  public:
  const ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry& map_entry(int index) const;
  ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry* add_map_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry >&
      map_entry() const;

  // @@protoc_insertion_point(class_scope:TSCE.OwnerIDMapArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry > map_entry_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class DependencyTrackerArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.DependencyTrackerArchive) */ {
 public:
  inline DependencyTrackerArchive() : DependencyTrackerArchive(nullptr) {}
  ~DependencyTrackerArchive() override;
  explicit PROTOBUF_CONSTEXPR DependencyTrackerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DependencyTrackerArchive(const DependencyTrackerArchive& from);
  DependencyTrackerArchive(DependencyTrackerArchive&& from) noexcept
    : DependencyTrackerArchive() {
    *this = ::std::move(from);
  }

  inline DependencyTrackerArchive& operator=(const DependencyTrackerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DependencyTrackerArchive& operator=(DependencyTrackerArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DependencyTrackerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DependencyTrackerArchive* internal_default_instance() {
    return reinterpret_cast<const DependencyTrackerArchive*>(
               &_DependencyTrackerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(DependencyTrackerArchive& a, DependencyTrackerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DependencyTrackerArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DependencyTrackerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DependencyTrackerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DependencyTrackerArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DependencyTrackerArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DependencyTrackerArchive& from) {
    DependencyTrackerArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DependencyTrackerArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.DependencyTrackerArchive";
  }
  protected:
  explicit DependencyTrackerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormulaOwnerInfoFieldNumber = 1,
    kDirtyLeafFieldNumber = 2,
    kInternalDirtyLeafFieldNumber = 4,
    kOwnerIdMapFieldNumber = 3,
  };
  // repeated .TSCE.FormulaOwnerInfoArchive formula_owner_info = 1;
  int formula_owner_info_size() const;
  private:
  int _internal_formula_owner_info_size() const;
  public:
  void clear_formula_owner_info();
  ::TSCE::FormulaOwnerInfoArchive* mutable_formula_owner_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaOwnerInfoArchive >*
      mutable_formula_owner_info();
  private:
  const ::TSCE::FormulaOwnerInfoArchive& _internal_formula_owner_info(int index) const;
  ::TSCE::FormulaOwnerInfoArchive* _internal_add_formula_owner_info();
  public:
  const ::TSCE::FormulaOwnerInfoArchive& formula_owner_info(int index) const;
  ::TSCE::FormulaOwnerInfoArchive* add_formula_owner_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaOwnerInfoArchive >&
      formula_owner_info() const;

  // repeated .TSCE.CellReferenceArchive dirty_leaf = 2;
  int dirty_leaf_size() const;
  private:
  int _internal_dirty_leaf_size() const;
  public:
  void clear_dirty_leaf();
  ::TSCE::CellReferenceArchive* mutable_dirty_leaf(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellReferenceArchive >*
      mutable_dirty_leaf();
  private:
  const ::TSCE::CellReferenceArchive& _internal_dirty_leaf(int index) const;
  ::TSCE::CellReferenceArchive* _internal_add_dirty_leaf();
  public:
  const ::TSCE::CellReferenceArchive& dirty_leaf(int index) const;
  ::TSCE::CellReferenceArchive* add_dirty_leaf();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellReferenceArchive >&
      dirty_leaf() const;

  // repeated .TSCE.InternalCellReferenceArchive internal_dirty_leaf = 4;
  int internal_dirty_leaf_size() const;
  private:
  int _internal_internal_dirty_leaf_size() const;
  public:
  void clear_internal_dirty_leaf();
  ::TSCE::InternalCellReferenceArchive* mutable_internal_dirty_leaf(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive >*
      mutable_internal_dirty_leaf();
  private:
  const ::TSCE::InternalCellReferenceArchive& _internal_internal_dirty_leaf(int index) const;
  ::TSCE::InternalCellReferenceArchive* _internal_add_internal_dirty_leaf();
  public:
  const ::TSCE::InternalCellReferenceArchive& internal_dirty_leaf(int index) const;
  ::TSCE::InternalCellReferenceArchive* add_internal_dirty_leaf();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive >&
      internal_dirty_leaf() const;

  // optional .TSCE.OwnerIDMapArchive owner_id_map = 3;
  bool has_owner_id_map() const;
  private:
  bool _internal_has_owner_id_map() const;
  public:
  void clear_owner_id_map();
  const ::TSCE::OwnerIDMapArchive& owner_id_map() const;
  PROTOBUF_NODISCARD ::TSCE::OwnerIDMapArchive* release_owner_id_map();
  ::TSCE::OwnerIDMapArchive* mutable_owner_id_map();
  void set_allocated_owner_id_map(::TSCE::OwnerIDMapArchive* owner_id_map);
  private:
  const ::TSCE::OwnerIDMapArchive& _internal_owner_id_map() const;
  ::TSCE::OwnerIDMapArchive* _internal_mutable_owner_id_map();
  public:
  void unsafe_arena_set_allocated_owner_id_map(
      ::TSCE::OwnerIDMapArchive* owner_id_map);
  ::TSCE::OwnerIDMapArchive* unsafe_arena_release_owner_id_map();

  // @@protoc_insertion_point(class_scope:TSCE.DependencyTrackerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaOwnerInfoArchive > formula_owner_info_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellReferenceArchive > dirty_leaf_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive > internal_dirty_leaf_;
    ::TSCE::OwnerIDMapArchive* owner_id_map_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class NameTrackedReferencePair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.NameTrackedReferencePair) */ {
 public:
  inline NameTrackedReferencePair() : NameTrackedReferencePair(nullptr) {}
  ~NameTrackedReferencePair() override;
  explicit PROTOBUF_CONSTEXPR NameTrackedReferencePair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NameTrackedReferencePair(const NameTrackedReferencePair& from);
  NameTrackedReferencePair(NameTrackedReferencePair&& from) noexcept
    : NameTrackedReferencePair() {
    *this = ::std::move(from);
  }

  inline NameTrackedReferencePair& operator=(const NameTrackedReferencePair& from) {
    CopyFrom(from);
    return *this;
  }
  inline NameTrackedReferencePair& operator=(NameTrackedReferencePair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NameTrackedReferencePair& default_instance() {
    return *internal_default_instance();
  }
  static inline const NameTrackedReferencePair* internal_default_instance() {
    return reinterpret_cast<const NameTrackedReferencePair*>(
               &_NameTrackedReferencePair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(NameTrackedReferencePair& a, NameTrackedReferencePair& b) {
    a.Swap(&b);
  }
  inline void Swap(NameTrackedReferencePair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NameTrackedReferencePair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NameTrackedReferencePair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NameTrackedReferencePair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NameTrackedReferencePair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NameTrackedReferencePair& from) {
    NameTrackedReferencePair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NameTrackedReferencePair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.NameTrackedReferencePair";
  }
  protected:
  explicit NameTrackedReferencePair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTrackedReferenceFieldNumber = 2,
    kTrackedReferenceIdFieldNumber = 3,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .TSP.Reference tracked_reference = 2;
  bool has_tracked_reference() const;
  private:
  bool _internal_has_tracked_reference() const;
  public:
  void clear_tracked_reference();
  const ::TSP::Reference& tracked_reference() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_tracked_reference();
  ::TSP::Reference* mutable_tracked_reference();
  void set_allocated_tracked_reference(::TSP::Reference* tracked_reference);
  private:
  const ::TSP::Reference& _internal_tracked_reference() const;
  ::TSP::Reference* _internal_mutable_tracked_reference();
  public:
  void unsafe_arena_set_allocated_tracked_reference(
      ::TSP::Reference* tracked_reference);
  ::TSP::Reference* unsafe_arena_release_tracked_reference();

  // optional uint32 tracked_reference_id = 3;
  bool has_tracked_reference_id() const;
  private:
  bool _internal_has_tracked_reference_id() const;
  public:
  void clear_tracked_reference_id();
  uint32_t tracked_reference_id() const;
  void set_tracked_reference_id(uint32_t value);
  private:
  uint32_t _internal_tracked_reference_id() const;
  void _internal_set_tracked_reference_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.NameTrackedReferencePair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::TSP::Reference* tracked_reference_;
    uint32_t tracked_reference_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class NamesByTrackedReferenceArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.NamesByTrackedReferenceArchive) */ {
 public:
  inline NamesByTrackedReferenceArchive() : NamesByTrackedReferenceArchive(nullptr) {}
  ~NamesByTrackedReferenceArchive() override;
  explicit PROTOBUF_CONSTEXPR NamesByTrackedReferenceArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NamesByTrackedReferenceArchive(const NamesByTrackedReferenceArchive& from);
  NamesByTrackedReferenceArchive(NamesByTrackedReferenceArchive&& from) noexcept
    : NamesByTrackedReferenceArchive() {
    *this = ::std::move(from);
  }

  inline NamesByTrackedReferenceArchive& operator=(const NamesByTrackedReferenceArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline NamesByTrackedReferenceArchive& operator=(NamesByTrackedReferenceArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NamesByTrackedReferenceArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const NamesByTrackedReferenceArchive* internal_default_instance() {
    return reinterpret_cast<const NamesByTrackedReferenceArchive*>(
               &_NamesByTrackedReferenceArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(NamesByTrackedReferenceArchive& a, NamesByTrackedReferenceArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(NamesByTrackedReferenceArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NamesByTrackedReferenceArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NamesByTrackedReferenceArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NamesByTrackedReferenceArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NamesByTrackedReferenceArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NamesByTrackedReferenceArchive& from) {
    NamesByTrackedReferenceArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NamesByTrackedReferenceArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.NamesByTrackedReferenceArchive";
  }
  protected:
  explicit NamesByTrackedReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameTrackedReferencePairFieldNumber = 2,
    kTableIdFieldNumber = 1,
  };
  // repeated .TSCE.NameTrackedReferencePair name_tracked_reference_pair = 2;
  int name_tracked_reference_pair_size() const;
  private:
  int _internal_name_tracked_reference_pair_size() const;
  public:
  void clear_name_tracked_reference_pair();
  ::TSCE::NameTrackedReferencePair* mutable_name_tracked_reference_pair(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::NameTrackedReferencePair >*
      mutable_name_tracked_reference_pair();
  private:
  const ::TSCE::NameTrackedReferencePair& _internal_name_tracked_reference_pair(int index) const;
  ::TSCE::NameTrackedReferencePair* _internal_add_name_tracked_reference_pair();
  public:
  const ::TSCE::NameTrackedReferencePair& name_tracked_reference_pair(int index) const;
  ::TSCE::NameTrackedReferencePair* add_name_tracked_reference_pair();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::NameTrackedReferencePair >&
      name_tracked_reference_pair() const;

  // required .TSCE.CFUUIDArchive table_id = 1;
  bool has_table_id() const;
  private:
  bool _internal_has_table_id() const;
  public:
  void clear_table_id();
  const ::TSCE::CFUUIDArchive& table_id() const;
  PROTOBUF_NODISCARD ::TSCE::CFUUIDArchive* release_table_id();
  ::TSCE::CFUUIDArchive* mutable_table_id();
  void set_allocated_table_id(::TSCE::CFUUIDArchive* table_id);
  private:
  const ::TSCE::CFUUIDArchive& _internal_table_id() const;
  ::TSCE::CFUUIDArchive* _internal_mutable_table_id();
  public:
  void unsafe_arena_set_allocated_table_id(
      ::TSCE::CFUUIDArchive* table_id);
  ::TSCE::CFUUIDArchive* unsafe_arena_release_table_id();

  // @@protoc_insertion_point(class_scope:TSCE.NamesByTrackedReferenceArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::NameTrackedReferencePair > name_tracked_reference_pair_;
    ::TSCE::CFUUIDArchive* table_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class NamedReferenceManagerArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.NamedReferenceManagerArchive) */ {
 public:
  inline NamedReferenceManagerArchive() : NamedReferenceManagerArchive(nullptr) {}
  ~NamedReferenceManagerArchive() override;
  explicit PROTOBUF_CONSTEXPR NamedReferenceManagerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NamedReferenceManagerArchive(const NamedReferenceManagerArchive& from);
  NamedReferenceManagerArchive(NamedReferenceManagerArchive&& from) noexcept
    : NamedReferenceManagerArchive() {
    *this = ::std::move(from);
  }

  inline NamedReferenceManagerArchive& operator=(const NamedReferenceManagerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline NamedReferenceManagerArchive& operator=(NamedReferenceManagerArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NamedReferenceManagerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const NamedReferenceManagerArchive* internal_default_instance() {
    return reinterpret_cast<const NamedReferenceManagerArchive*>(
               &_NamedReferenceManagerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(NamedReferenceManagerArchive& a, NamedReferenceManagerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(NamedReferenceManagerArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NamedReferenceManagerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NamedReferenceManagerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NamedReferenceManagerArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NamedReferenceManagerArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NamedReferenceManagerArchive& from) {
    NamedReferenceManagerArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NamedReferenceManagerArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.NamedReferenceManagerArchive";
  }
  protected:
  explicit NamedReferenceManagerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesByTrackedReferenceByTableFieldNumber = 2,
    kReferenceTrackerFieldNumber = 1,
  };
  // repeated .TSCE.NamesByTrackedReferenceArchive names_by_tracked_reference_by_table = 2 [deprecated = true];
  PROTOBUF_DEPRECATED int names_by_tracked_reference_by_table_size() const;
  private:
  int _internal_names_by_tracked_reference_by_table_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_names_by_tracked_reference_by_table();
  PROTOBUF_DEPRECATED ::TSCE::NamesByTrackedReferenceArchive* mutable_names_by_tracked_reference_by_table(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::NamesByTrackedReferenceArchive >*
      mutable_names_by_tracked_reference_by_table();
  private:
  const ::TSCE::NamesByTrackedReferenceArchive& _internal_names_by_tracked_reference_by_table(int index) const;
  ::TSCE::NamesByTrackedReferenceArchive* _internal_add_names_by_tracked_reference_by_table();
  public:
  PROTOBUF_DEPRECATED const ::TSCE::NamesByTrackedReferenceArchive& names_by_tracked_reference_by_table(int index) const;
  PROTOBUF_DEPRECATED ::TSCE::NamesByTrackedReferenceArchive* add_names_by_tracked_reference_by_table();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::NamesByTrackedReferenceArchive >&
      names_by_tracked_reference_by_table() const;

  // required .TSP.Reference reference_tracker = 1;
  bool has_reference_tracker() const;
  private:
  bool _internal_has_reference_tracker() const;
  public:
  void clear_reference_tracker();
  const ::TSP::Reference& reference_tracker() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_reference_tracker();
  ::TSP::Reference* mutable_reference_tracker();
  void set_allocated_reference_tracker(::TSP::Reference* reference_tracker);
  private:
  const ::TSP::Reference& _internal_reference_tracker() const;
  ::TSP::Reference* _internal_mutable_reference_tracker();
  public:
  void unsafe_arena_set_allocated_reference_tracker(
      ::TSP::Reference* reference_tracker);
  ::TSP::Reference* unsafe_arena_release_reference_tracker();

  // @@protoc_insertion_point(class_scope:TSCE.NamedReferenceManagerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::NamesByTrackedReferenceArchive > names_by_tracked_reference_by_table_;
    ::TSP::Reference* reference_tracker_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CalculationEngineArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CalculationEngineArchive) */ {
 public:
  inline CalculationEngineArchive() : CalculationEngineArchive(nullptr) {}
  ~CalculationEngineArchive() override;
  explicit PROTOBUF_CONSTEXPR CalculationEngineArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalculationEngineArchive(const CalculationEngineArchive& from);
  CalculationEngineArchive(CalculationEngineArchive&& from) noexcept
    : CalculationEngineArchive() {
    *this = ::std::move(from);
  }

  inline CalculationEngineArchive& operator=(const CalculationEngineArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculationEngineArchive& operator=(CalculationEngineArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalculationEngineArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalculationEngineArchive* internal_default_instance() {
    return reinterpret_cast<const CalculationEngineArchive*>(
               &_CalculationEngineArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CalculationEngineArchive& a, CalculationEngineArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculationEngineArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalculationEngineArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalculationEngineArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalculationEngineArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalculationEngineArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CalculationEngineArchive& from) {
    CalculationEngineArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculationEngineArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CalculationEngineArchive";
  }
  protected:
  explicit CalculationEngineArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CalculationEngineArchive_ExcelImportDateMode ExcelImportDateMode;
  static constexpr ExcelImportDateMode DATE_MODE_1900 =
    CalculationEngineArchive_ExcelImportDateMode_DATE_MODE_1900;
  static constexpr ExcelImportDateMode DATE_MODE_1900_LEGACY =
    CalculationEngineArchive_ExcelImportDateMode_DATE_MODE_1900_LEGACY;
  static constexpr ExcelImportDateMode DATE_MODE_1904_LEGACY =
    CalculationEngineArchive_ExcelImportDateMode_DATE_MODE_1904_LEGACY;
  static inline bool ExcelImportDateMode_IsValid(int value) {
    return CalculationEngineArchive_ExcelImportDateMode_IsValid(value);
  }
  static constexpr ExcelImportDateMode ExcelImportDateMode_MIN =
    CalculationEngineArchive_ExcelImportDateMode_ExcelImportDateMode_MIN;
  static constexpr ExcelImportDateMode ExcelImportDateMode_MAX =
    CalculationEngineArchive_ExcelImportDateMode_ExcelImportDateMode_MAX;
  static constexpr int ExcelImportDateMode_ARRAYSIZE =
    CalculationEngineArchive_ExcelImportDateMode_ExcelImportDateMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ExcelImportDateMode_descriptor() {
    return CalculationEngineArchive_ExcelImportDateMode_descriptor();
  }
  template<typename T>
  static inline const std::string& ExcelImportDateMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ExcelImportDateMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ExcelImportDateMode_Name.");
    return CalculationEngineArchive_ExcelImportDateMode_Name(enum_t_value);
  }
  static inline bool ExcelImportDateMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ExcelImportDateMode* value) {
    return CalculationEngineArchive_ExcelImportDateMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSavedLocaleIdentifierFieldNumber = 5,
    kDependencyTrackerFieldNumber = 2,
    kNamedReferenceManagerFieldNumber = 3,
    kBaseDate1904FieldNumber = 1,
    kExcelImportDateModeFieldNumber = 4,
  };
  // optional string saved_locale_identifier = 5;
  bool has_saved_locale_identifier() const;
  private:
  bool _internal_has_saved_locale_identifier() const;
  public:
  void clear_saved_locale_identifier();
  const std::string& saved_locale_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_saved_locale_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_saved_locale_identifier();
  PROTOBUF_NODISCARD std::string* release_saved_locale_identifier();
  void set_allocated_saved_locale_identifier(std::string* saved_locale_identifier);
  private:
  const std::string& _internal_saved_locale_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_saved_locale_identifier(const std::string& value);
  std::string* _internal_mutable_saved_locale_identifier();
  public:

  // required .TSCE.DependencyTrackerArchive dependency_tracker = 2;
  bool has_dependency_tracker() const;
  private:
  bool _internal_has_dependency_tracker() const;
  public:
  void clear_dependency_tracker();
  const ::TSCE::DependencyTrackerArchive& dependency_tracker() const;
  PROTOBUF_NODISCARD ::TSCE::DependencyTrackerArchive* release_dependency_tracker();
  ::TSCE::DependencyTrackerArchive* mutable_dependency_tracker();
  void set_allocated_dependency_tracker(::TSCE::DependencyTrackerArchive* dependency_tracker);
  private:
  const ::TSCE::DependencyTrackerArchive& _internal_dependency_tracker() const;
  ::TSCE::DependencyTrackerArchive* _internal_mutable_dependency_tracker();
  public:
  void unsafe_arena_set_allocated_dependency_tracker(
      ::TSCE::DependencyTrackerArchive* dependency_tracker);
  ::TSCE::DependencyTrackerArchive* unsafe_arena_release_dependency_tracker();

  // optional .TSP.Reference named_reference_manager = 3;
  bool has_named_reference_manager() const;
  private:
  bool _internal_has_named_reference_manager() const;
  public:
  void clear_named_reference_manager();
  const ::TSP::Reference& named_reference_manager() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_named_reference_manager();
  ::TSP::Reference* mutable_named_reference_manager();
  void set_allocated_named_reference_manager(::TSP::Reference* named_reference_manager);
  private:
  const ::TSP::Reference& _internal_named_reference_manager() const;
  ::TSP::Reference* _internal_mutable_named_reference_manager();
  public:
  void unsafe_arena_set_allocated_named_reference_manager(
      ::TSP::Reference* named_reference_manager);
  ::TSP::Reference* unsafe_arena_release_named_reference_manager();

  // optional bool base_date_1904 = 1;
  bool has_base_date_1904() const;
  private:
  bool _internal_has_base_date_1904() const;
  public:
  void clear_base_date_1904();
  bool base_date_1904() const;
  void set_base_date_1904(bool value);
  private:
  bool _internal_base_date_1904() const;
  void _internal_set_base_date_1904(bool value);
  public:

  // optional .TSCE.CalculationEngineArchive.ExcelImportDateMode excel_import_date_mode = 4 [default = DATE_MODE_1900];
  bool has_excel_import_date_mode() const;
  private:
  bool _internal_has_excel_import_date_mode() const;
  public:
  void clear_excel_import_date_mode();
  ::TSCE::CalculationEngineArchive_ExcelImportDateMode excel_import_date_mode() const;
  void set_excel_import_date_mode(::TSCE::CalculationEngineArchive_ExcelImportDateMode value);
  private:
  ::TSCE::CalculationEngineArchive_ExcelImportDateMode _internal_excel_import_date_mode() const;
  void _internal_set_excel_import_date_mode(::TSCE::CalculationEngineArchive_ExcelImportDateMode value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.CalculationEngineArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr saved_locale_identifier_;
    ::TSCE::DependencyTrackerArchive* dependency_tracker_;
    ::TSP::Reference* named_reference_manager_;
    bool base_date_1904_;
    int excel_import_date_mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive) */ {
 public:
  inline ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive() : ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive(nullptr) {}
  ~ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive() override;
  explicit PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive(const ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& from);
  ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive&& from) noexcept
    : ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive() {
    *this = ::std::move(from);
  }

  inline ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& operator=(const ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& operator=(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* internal_default_instance() {
    return reinterpret_cast<const ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive*>(
               &_ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& a, ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& from) {
    ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive";
  }
  protected:
  explicit ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowHandleFieldNumber = 1,
    kColumnHandleFieldNumber = 2,
    kRowIsStickyFieldNumber = 3,
    kColumnIsStickyFieldNumber = 4,
  };
  // required uint32 row_handle = 1;
  bool has_row_handle() const;
  private:
  bool _internal_has_row_handle() const;
  public:
  void clear_row_handle();
  uint32_t row_handle() const;
  void set_row_handle(uint32_t value);
  private:
  uint32_t _internal_row_handle() const;
  void _internal_set_row_handle(uint32_t value);
  public:

  // required uint32 column_handle = 2;
  bool has_column_handle() const;
  private:
  bool _internal_has_column_handle() const;
  public:
  void clear_column_handle();
  uint32_t column_handle() const;
  void set_column_handle(uint32_t value);
  private:
  uint32_t _internal_column_handle() const;
  void _internal_set_column_handle(uint32_t value);
  public:

  // required uint32 row_is_sticky = 3;
  bool has_row_is_sticky() const;
  private:
  bool _internal_has_row_is_sticky() const;
  public:
  void clear_row_is_sticky();
  uint32_t row_is_sticky() const;
  void set_row_is_sticky(uint32_t value);
  private:
  uint32_t _internal_row_is_sticky() const;
  void _internal_set_row_is_sticky(uint32_t value);
  public:

  // required uint32 column_is_sticky = 4;
  bool has_column_is_sticky() const;
  private:
  bool _internal_has_column_is_sticky() const;
  public:
  void clear_column_is_sticky();
  uint32_t column_is_sticky() const;
  void set_column_is_sticky(uint32_t value);
  private:
  uint32_t _internal_column_is_sticky() const;
  void _internal_set_column_is_sticky(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t row_handle_;
    uint32_t column_handle_;
    uint32_t row_is_sticky_;
    uint32_t column_is_sticky_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive) */ {
 public:
  inline ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive() : ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive(nullptr) {}
  ~ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive() override;
  explicit PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive(const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& from);
  ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive&& from) noexcept
    : ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive() {
    *this = ::std::move(from);
  }

  inline ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& operator=(const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& operator=(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* internal_default_instance() {
    return reinterpret_cast<const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive*>(
               &_ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& a, ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& from) {
    ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive";
  }
  protected:
  explicit ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kASTReferenceWhitespaceAfterSheetNameFieldNumber = 6,
    kASTReferenceWhitespaceBeforeTableNameFieldNumber = 7,
    kASTReferenceWhitespaceAfterTableNameFieldNumber = 8,
    kASTReferenceWhitespaceBeforeCellAddressFieldNumber = 9,
    kTableIdFieldNumber = 5,
    kRowHandleFieldNumber = 1,
    kColumnHandleFieldNumber = 2,
    kRowIsStickyFieldNumber = 3,
    kColumnIsStickyFieldNumber = 4,
  };
  // optional string AST_reference_whitespace_after_sheet_name = 6;
  bool has_ast_reference_whitespace_after_sheet_name() const;
  private:
  bool _internal_has_ast_reference_whitespace_after_sheet_name() const;
  public:
  void clear_ast_reference_whitespace_after_sheet_name();
  const std::string& ast_reference_whitespace_after_sheet_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ast_reference_whitespace_after_sheet_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ast_reference_whitespace_after_sheet_name();
  PROTOBUF_NODISCARD std::string* release_ast_reference_whitespace_after_sheet_name();
  void set_allocated_ast_reference_whitespace_after_sheet_name(std::string* ast_reference_whitespace_after_sheet_name);
  private:
  const std::string& _internal_ast_reference_whitespace_after_sheet_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ast_reference_whitespace_after_sheet_name(const std::string& value);
  std::string* _internal_mutable_ast_reference_whitespace_after_sheet_name();
  public:

  // optional string AST_reference_whitespace_before_table_name = 7;
  bool has_ast_reference_whitespace_before_table_name() const;
  private:
  bool _internal_has_ast_reference_whitespace_before_table_name() const;
  public:
  void clear_ast_reference_whitespace_before_table_name();
  const std::string& ast_reference_whitespace_before_table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ast_reference_whitespace_before_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ast_reference_whitespace_before_table_name();
  PROTOBUF_NODISCARD std::string* release_ast_reference_whitespace_before_table_name();
  void set_allocated_ast_reference_whitespace_before_table_name(std::string* ast_reference_whitespace_before_table_name);
  private:
  const std::string& _internal_ast_reference_whitespace_before_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ast_reference_whitespace_before_table_name(const std::string& value);
  std::string* _internal_mutable_ast_reference_whitespace_before_table_name();
  public:

  // optional string AST_reference_whitespace_after_table_name = 8;
  bool has_ast_reference_whitespace_after_table_name() const;
  private:
  bool _internal_has_ast_reference_whitespace_after_table_name() const;
  public:
  void clear_ast_reference_whitespace_after_table_name();
  const std::string& ast_reference_whitespace_after_table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ast_reference_whitespace_after_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ast_reference_whitespace_after_table_name();
  PROTOBUF_NODISCARD std::string* release_ast_reference_whitespace_after_table_name();
  void set_allocated_ast_reference_whitespace_after_table_name(std::string* ast_reference_whitespace_after_table_name);
  private:
  const std::string& _internal_ast_reference_whitespace_after_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ast_reference_whitespace_after_table_name(const std::string& value);
  std::string* _internal_mutable_ast_reference_whitespace_after_table_name();
  public:

  // optional string AST_reference_whitespace_before_cell_address = 9;
  bool has_ast_reference_whitespace_before_cell_address() const;
  private:
  bool _internal_has_ast_reference_whitespace_before_cell_address() const;
  public:
  void clear_ast_reference_whitespace_before_cell_address();
  const std::string& ast_reference_whitespace_before_cell_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ast_reference_whitespace_before_cell_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ast_reference_whitespace_before_cell_address();
  PROTOBUF_NODISCARD std::string* release_ast_reference_whitespace_before_cell_address();
  void set_allocated_ast_reference_whitespace_before_cell_address(std::string* ast_reference_whitespace_before_cell_address);
  private:
  const std::string& _internal_ast_reference_whitespace_before_cell_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ast_reference_whitespace_before_cell_address(const std::string& value);
  std::string* _internal_mutable_ast_reference_whitespace_before_cell_address();
  public:

  // required .TSCE.CFUUIDArchive table_id = 5;
  bool has_table_id() const;
  private:
  bool _internal_has_table_id() const;
  public:
  void clear_table_id();
  const ::TSCE::CFUUIDArchive& table_id() const;
  PROTOBUF_NODISCARD ::TSCE::CFUUIDArchive* release_table_id();
  ::TSCE::CFUUIDArchive* mutable_table_id();
  void set_allocated_table_id(::TSCE::CFUUIDArchive* table_id);
  private:
  const ::TSCE::CFUUIDArchive& _internal_table_id() const;
  ::TSCE::CFUUIDArchive* _internal_mutable_table_id();
  public:
  void unsafe_arena_set_allocated_table_id(
      ::TSCE::CFUUIDArchive* table_id);
  ::TSCE::CFUUIDArchive* unsafe_arena_release_table_id();

  // required uint32 row_handle = 1;
  bool has_row_handle() const;
  private:
  bool _internal_has_row_handle() const;
  public:
  void clear_row_handle();
  uint32_t row_handle() const;
  void set_row_handle(uint32_t value);
  private:
  uint32_t _internal_row_handle() const;
  void _internal_set_row_handle(uint32_t value);
  public:

  // required uint32 column_handle = 2;
  bool has_column_handle() const;
  private:
  bool _internal_has_column_handle() const;
  public:
  void clear_column_handle();
  uint32_t column_handle() const;
  void set_column_handle(uint32_t value);
  private:
  uint32_t _internal_column_handle() const;
  void _internal_set_column_handle(uint32_t value);
  public:

  // required uint32 row_is_sticky = 3;
  bool has_row_is_sticky() const;
  private:
  bool _internal_has_row_is_sticky() const;
  public:
  void clear_row_is_sticky();
  uint32_t row_is_sticky() const;
  void set_row_is_sticky(uint32_t value);
  private:
  uint32_t _internal_row_is_sticky() const;
  void _internal_set_row_is_sticky(uint32_t value);
  public:

  // required uint32 column_is_sticky = 4;
  bool has_column_is_sticky() const;
  private:
  bool _internal_has_column_is_sticky() const;
  public:
  void clear_column_is_sticky();
  uint32_t column_is_sticky() const;
  void set_column_is_sticky(uint32_t value);
  private:
  uint32_t _internal_column_is_sticky() const;
  void _internal_set_column_is_sticky(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ast_reference_whitespace_after_sheet_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ast_reference_whitespace_before_table_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ast_reference_whitespace_after_table_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ast_reference_whitespace_before_cell_address_;
    ::TSCE::CFUUIDArchive* table_id_;
    uint32_t row_handle_;
    uint32_t column_handle_;
    uint32_t row_is_sticky_;
    uint32_t column_is_sticky_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ASTNodeArrayArchive_ASTColumnCoordinateArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive) */ {
 public:
  inline ASTNodeArrayArchive_ASTColumnCoordinateArchive() : ASTNodeArrayArchive_ASTColumnCoordinateArchive(nullptr) {}
  ~ASTNodeArrayArchive_ASTColumnCoordinateArchive() override;
  explicit PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTColumnCoordinateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ASTNodeArrayArchive_ASTColumnCoordinateArchive(const ASTNodeArrayArchive_ASTColumnCoordinateArchive& from);
  ASTNodeArrayArchive_ASTColumnCoordinateArchive(ASTNodeArrayArchive_ASTColumnCoordinateArchive&& from) noexcept
    : ASTNodeArrayArchive_ASTColumnCoordinateArchive() {
    *this = ::std::move(from);
  }

  inline ASTNodeArrayArchive_ASTColumnCoordinateArchive& operator=(const ASTNodeArrayArchive_ASTColumnCoordinateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ASTNodeArrayArchive_ASTColumnCoordinateArchive& operator=(ASTNodeArrayArchive_ASTColumnCoordinateArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ASTNodeArrayArchive_ASTColumnCoordinateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ASTNodeArrayArchive_ASTColumnCoordinateArchive* internal_default_instance() {
    return reinterpret_cast<const ASTNodeArrayArchive_ASTColumnCoordinateArchive*>(
               &_ASTNodeArrayArchive_ASTColumnCoordinateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ASTNodeArrayArchive_ASTColumnCoordinateArchive& a, ASTNodeArrayArchive_ASTColumnCoordinateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ASTNodeArrayArchive_ASTColumnCoordinateArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ASTNodeArrayArchive_ASTColumnCoordinateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ASTNodeArrayArchive_ASTColumnCoordinateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTColumnCoordinateArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ASTNodeArrayArchive_ASTColumnCoordinateArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ASTNodeArrayArchive_ASTColumnCoordinateArchive& from) {
    ASTNodeArrayArchive_ASTColumnCoordinateArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASTNodeArrayArchive_ASTColumnCoordinateArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive";
  }
  protected:
  explicit ASTNodeArrayArchive_ASTColumnCoordinateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnFieldNumber = 1,
    kAbsoluteFieldNumber = 2,
  };
  // required sint32 column = 1;
  bool has_column() const;
  private:
  bool _internal_has_column() const;
  public:
  void clear_column();
  int32_t column() const;
  void set_column(int32_t value);
  private:
  int32_t _internal_column() const;
  void _internal_set_column(int32_t value);
  public:

  // optional bool absolute = 2 [default = false];
  bool has_absolute() const;
  private:
  bool _internal_has_absolute() const;
  public:
  void clear_absolute();
  bool absolute() const;
  void set_absolute(bool value);
  private:
  bool _internal_absolute() const;
  void _internal_set_absolute(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t column_;
    bool absolute_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ASTNodeArrayArchive_ASTRowCoordinateArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive) */ {
 public:
  inline ASTNodeArrayArchive_ASTRowCoordinateArchive() : ASTNodeArrayArchive_ASTRowCoordinateArchive(nullptr) {}
  ~ASTNodeArrayArchive_ASTRowCoordinateArchive() override;
  explicit PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTRowCoordinateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ASTNodeArrayArchive_ASTRowCoordinateArchive(const ASTNodeArrayArchive_ASTRowCoordinateArchive& from);
  ASTNodeArrayArchive_ASTRowCoordinateArchive(ASTNodeArrayArchive_ASTRowCoordinateArchive&& from) noexcept
    : ASTNodeArrayArchive_ASTRowCoordinateArchive() {
    *this = ::std::move(from);
  }

  inline ASTNodeArrayArchive_ASTRowCoordinateArchive& operator=(const ASTNodeArrayArchive_ASTRowCoordinateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ASTNodeArrayArchive_ASTRowCoordinateArchive& operator=(ASTNodeArrayArchive_ASTRowCoordinateArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ASTNodeArrayArchive_ASTRowCoordinateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ASTNodeArrayArchive_ASTRowCoordinateArchive* internal_default_instance() {
    return reinterpret_cast<const ASTNodeArrayArchive_ASTRowCoordinateArchive*>(
               &_ASTNodeArrayArchive_ASTRowCoordinateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ASTNodeArrayArchive_ASTRowCoordinateArchive& a, ASTNodeArrayArchive_ASTRowCoordinateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ASTNodeArrayArchive_ASTRowCoordinateArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ASTNodeArrayArchive_ASTRowCoordinateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ASTNodeArrayArchive_ASTRowCoordinateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTRowCoordinateArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ASTNodeArrayArchive_ASTRowCoordinateArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ASTNodeArrayArchive_ASTRowCoordinateArchive& from) {
    ASTNodeArrayArchive_ASTRowCoordinateArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASTNodeArrayArchive_ASTRowCoordinateArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive";
  }
  protected:
  explicit ASTNodeArrayArchive_ASTRowCoordinateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 1,
    kAbsoluteFieldNumber = 2,
  };
  // required sint32 row = 1;
  bool has_row() const;
  private:
  bool _internal_has_row() const;
  public:
  void clear_row();
  int32_t row() const;
  void set_row(int32_t value);
  private:
  int32_t _internal_row() const;
  void _internal_set_row(int32_t value);
  public:

  // optional bool absolute = 2 [default = false];
  bool has_absolute() const;
  private:
  bool _internal_has_absolute() const;
  public:
  void clear_absolute();
  bool absolute() const;
  void set_absolute(bool value);
  private:
  bool _internal_absolute() const;
  void _internal_set_absolute(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t row_;
    bool absolute_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive) */ {
 public:
  inline ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive() : ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive(nullptr) {}
  ~ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive() override;
  explicit PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive(const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& from);
  ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive(ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive&& from) noexcept
    : ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive() {
    *this = ::std::move(from);
  }

  inline ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& operator=(const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& operator=(ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* internal_default_instance() {
    return reinterpret_cast<const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive*>(
               &_ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& a, ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& from) {
    ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive";
  }
  protected:
  explicit ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kASTReferenceWhitespaceAfterSheetNameFieldNumber = 2,
    kASTReferenceWhitespaceBeforeTableNameFieldNumber = 3,
    kASTReferenceWhitespaceAfterTableNameFieldNumber = 4,
    kASTReferenceWhitespaceBeforeCellAddressFieldNumber = 5,
    kTableIdFieldNumber = 1,
  };
  // optional string AST_reference_whitespace_after_sheet_name = 2;
  bool has_ast_reference_whitespace_after_sheet_name() const;
  private:
  bool _internal_has_ast_reference_whitespace_after_sheet_name() const;
  public:
  void clear_ast_reference_whitespace_after_sheet_name();
  const std::string& ast_reference_whitespace_after_sheet_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ast_reference_whitespace_after_sheet_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ast_reference_whitespace_after_sheet_name();
  PROTOBUF_NODISCARD std::string* release_ast_reference_whitespace_after_sheet_name();
  void set_allocated_ast_reference_whitespace_after_sheet_name(std::string* ast_reference_whitespace_after_sheet_name);
  private:
  const std::string& _internal_ast_reference_whitespace_after_sheet_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ast_reference_whitespace_after_sheet_name(const std::string& value);
  std::string* _internal_mutable_ast_reference_whitespace_after_sheet_name();
  public:

  // optional string AST_reference_whitespace_before_table_name = 3;
  bool has_ast_reference_whitespace_before_table_name() const;
  private:
  bool _internal_has_ast_reference_whitespace_before_table_name() const;
  public:
  void clear_ast_reference_whitespace_before_table_name();
  const std::string& ast_reference_whitespace_before_table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ast_reference_whitespace_before_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ast_reference_whitespace_before_table_name();
  PROTOBUF_NODISCARD std::string* release_ast_reference_whitespace_before_table_name();
  void set_allocated_ast_reference_whitespace_before_table_name(std::string* ast_reference_whitespace_before_table_name);
  private:
  const std::string& _internal_ast_reference_whitespace_before_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ast_reference_whitespace_before_table_name(const std::string& value);
  std::string* _internal_mutable_ast_reference_whitespace_before_table_name();
  public:

  // optional string AST_reference_whitespace_after_table_name = 4;
  bool has_ast_reference_whitespace_after_table_name() const;
  private:
  bool _internal_has_ast_reference_whitespace_after_table_name() const;
  public:
  void clear_ast_reference_whitespace_after_table_name();
  const std::string& ast_reference_whitespace_after_table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ast_reference_whitespace_after_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ast_reference_whitespace_after_table_name();
  PROTOBUF_NODISCARD std::string* release_ast_reference_whitespace_after_table_name();
  void set_allocated_ast_reference_whitespace_after_table_name(std::string* ast_reference_whitespace_after_table_name);
  private:
  const std::string& _internal_ast_reference_whitespace_after_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ast_reference_whitespace_after_table_name(const std::string& value);
  std::string* _internal_mutable_ast_reference_whitespace_after_table_name();
  public:

  // optional string AST_reference_whitespace_before_cell_address = 5;
  bool has_ast_reference_whitespace_before_cell_address() const;
  private:
  bool _internal_has_ast_reference_whitespace_before_cell_address() const;
  public:
  void clear_ast_reference_whitespace_before_cell_address();
  const std::string& ast_reference_whitespace_before_cell_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ast_reference_whitespace_before_cell_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ast_reference_whitespace_before_cell_address();
  PROTOBUF_NODISCARD std::string* release_ast_reference_whitespace_before_cell_address();
  void set_allocated_ast_reference_whitespace_before_cell_address(std::string* ast_reference_whitespace_before_cell_address);
  private:
  const std::string& _internal_ast_reference_whitespace_before_cell_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ast_reference_whitespace_before_cell_address(const std::string& value);
  std::string* _internal_mutable_ast_reference_whitespace_before_cell_address();
  public:

  // required .TSCE.CFUUIDArchive table_id = 1;
  bool has_table_id() const;
  private:
  bool _internal_has_table_id() const;
  public:
  void clear_table_id();
  const ::TSCE::CFUUIDArchive& table_id() const;
  PROTOBUF_NODISCARD ::TSCE::CFUUIDArchive* release_table_id();
  ::TSCE::CFUUIDArchive* mutable_table_id();
  void set_allocated_table_id(::TSCE::CFUUIDArchive* table_id);
  private:
  const ::TSCE::CFUUIDArchive& _internal_table_id() const;
  ::TSCE::CFUUIDArchive* _internal_mutable_table_id();
  public:
  void unsafe_arena_set_allocated_table_id(
      ::TSCE::CFUUIDArchive* table_id);
  ::TSCE::CFUUIDArchive* unsafe_arena_release_table_id();

  // @@protoc_insertion_point(class_scope:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ast_reference_whitespace_after_sheet_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ast_reference_whitespace_before_table_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ast_reference_whitespace_after_table_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ast_reference_whitespace_before_cell_address_;
    ::TSCE::CFUUIDArchive* table_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ASTNodeArrayArchive_ASTNodeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ASTNodeArrayArchive.ASTNodeArchive) */ {
 public:
  inline ASTNodeArrayArchive_ASTNodeArchive() : ASTNodeArrayArchive_ASTNodeArchive(nullptr) {}
  ~ASTNodeArrayArchive_ASTNodeArchive() override;
  explicit PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ASTNodeArrayArchive_ASTNodeArchive(const ASTNodeArrayArchive_ASTNodeArchive& from);
  ASTNodeArrayArchive_ASTNodeArchive(ASTNodeArrayArchive_ASTNodeArchive&& from) noexcept
    : ASTNodeArrayArchive_ASTNodeArchive() {
    *this = ::std::move(from);
  }

  inline ASTNodeArrayArchive_ASTNodeArchive& operator=(const ASTNodeArrayArchive_ASTNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ASTNodeArrayArchive_ASTNodeArchive& operator=(ASTNodeArrayArchive_ASTNodeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ASTNodeArrayArchive_ASTNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ASTNodeArrayArchive_ASTNodeArchive* internal_default_instance() {
    return reinterpret_cast<const ASTNodeArrayArchive_ASTNodeArchive*>(
               &_ASTNodeArrayArchive_ASTNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ASTNodeArrayArchive_ASTNodeArchive& a, ASTNodeArrayArchive_ASTNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ASTNodeArrayArchive_ASTNodeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ASTNodeArrayArchive_ASTNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ASTNodeArrayArchive_ASTNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTNodeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ASTNodeArrayArchive_ASTNodeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ASTNodeArrayArchive_ASTNodeArchive& from) {
    ASTNodeArrayArchive_ASTNodeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASTNodeArrayArchive_ASTNodeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ASTNodeArrayArchive.ASTNodeArchive";
  }
  protected:
  explicit ASTNodeArrayArchive_ASTNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kASTStringNodeStringFieldNumber = 6,
    kASTUnknownFunctionNodeStringFieldNumber = 17,
    kASTDateNodeDateTimeFormatFieldNumber = 21,
    kASTWhitespaceFieldNumber = 25,
    kASTThunkNodeArrayFieldNumber = 14,
    kASTLocalCellReferenceNodeReferenceFieldNumber = 15,
    kASTCrossTableCellReferenceNodeReferenceFieldNumber = 16,
    kASTColumnFieldNumber = 26,
    kASTRowFieldNumber = 27,
    kASTCrossTableReferenceExtraInfoFieldNumber = 28,
    kASTFunctionNodeIndexFieldNumber = 2,
    kASTFunctionNodeNumArgsFieldNumber = 3,
    kASTNumberNodeNumberFieldNumber = 4,
    kASTDateNodeDateNumFieldNumber = 7,
    kASTDurationNodeUnitNumFieldNumber = 8,
    kASTDurationNodeUnitFieldNumber = 9,
    kASTTokenNodeBooleanFieldNumber = 10,
    kASTArrayNodeNumColFieldNumber = 11,
    kASTArrayNodeNumRowFieldNumber = 12,
    kASTListNodeNumArgsFieldNumber = 13,
    kASTUnknownFunctionNodeNumArgsFieldNumber = 18,
    kASTBooleanNodeBooleanFieldNumber = 5,
    kASTDateNodeSuppressDateFormatFieldNumber = 19,
    kASTDateNodeSuppressTimeFormatFieldNumber = 20,
    kASTDurationNodeUseAutomaticUnitsFieldNumber = 29,
    kASTDurationNodeStyleFieldNumber = 22,
    kASTDurationNodeDurationUnitLargestFieldNumber = 23,
    kASTDurationNodeDurationUnitSmallestFieldNumber = 24,
    kASTNodeTypeFieldNumber = 1,
  };
  // optional string AST_string_node_string = 6;
  bool has_ast_string_node_string() const;
  private:
  bool _internal_has_ast_string_node_string() const;
  public:
  void clear_ast_string_node_string();
  const std::string& ast_string_node_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ast_string_node_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ast_string_node_string();
  PROTOBUF_NODISCARD std::string* release_ast_string_node_string();
  void set_allocated_ast_string_node_string(std::string* ast_string_node_string);
  private:
  const std::string& _internal_ast_string_node_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ast_string_node_string(const std::string& value);
  std::string* _internal_mutable_ast_string_node_string();
  public:

  // optional string AST_unknown_function_node_string = 17;
  bool has_ast_unknown_function_node_string() const;
  private:
  bool _internal_has_ast_unknown_function_node_string() const;
  public:
  void clear_ast_unknown_function_node_string();
  const std::string& ast_unknown_function_node_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ast_unknown_function_node_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ast_unknown_function_node_string();
  PROTOBUF_NODISCARD std::string* release_ast_unknown_function_node_string();
  void set_allocated_ast_unknown_function_node_string(std::string* ast_unknown_function_node_string);
  private:
  const std::string& _internal_ast_unknown_function_node_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ast_unknown_function_node_string(const std::string& value);
  std::string* _internal_mutable_ast_unknown_function_node_string();
  public:

  // optional string AST_date_node_date_time_format = 21;
  bool has_ast_date_node_date_time_format() const;
  private:
  bool _internal_has_ast_date_node_date_time_format() const;
  public:
  void clear_ast_date_node_date_time_format();
  const std::string& ast_date_node_date_time_format() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ast_date_node_date_time_format(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ast_date_node_date_time_format();
  PROTOBUF_NODISCARD std::string* release_ast_date_node_date_time_format();
  void set_allocated_ast_date_node_date_time_format(std::string* ast_date_node_date_time_format);
  private:
  const std::string& _internal_ast_date_node_date_time_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ast_date_node_date_time_format(const std::string& value);
  std::string* _internal_mutable_ast_date_node_date_time_format();
  public:

  // optional string AST_whitespace = 25;
  bool has_ast_whitespace() const;
  private:
  bool _internal_has_ast_whitespace() const;
  public:
  void clear_ast_whitespace();
  const std::string& ast_whitespace() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ast_whitespace(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ast_whitespace();
  PROTOBUF_NODISCARD std::string* release_ast_whitespace();
  void set_allocated_ast_whitespace(std::string* ast_whitespace);
  private:
  const std::string& _internal_ast_whitespace() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ast_whitespace(const std::string& value);
  std::string* _internal_mutable_ast_whitespace();
  public:

  // optional .TSCE.ASTNodeArrayArchive AST_thunk_node_array = 14;
  bool has_ast_thunk_node_array() const;
  private:
  bool _internal_has_ast_thunk_node_array() const;
  public:
  void clear_ast_thunk_node_array();
  const ::TSCE::ASTNodeArrayArchive& ast_thunk_node_array() const;
  PROTOBUF_NODISCARD ::TSCE::ASTNodeArrayArchive* release_ast_thunk_node_array();
  ::TSCE::ASTNodeArrayArchive* mutable_ast_thunk_node_array();
  void set_allocated_ast_thunk_node_array(::TSCE::ASTNodeArrayArchive* ast_thunk_node_array);
  private:
  const ::TSCE::ASTNodeArrayArchive& _internal_ast_thunk_node_array() const;
  ::TSCE::ASTNodeArrayArchive* _internal_mutable_ast_thunk_node_array();
  public:
  void unsafe_arena_set_allocated_ast_thunk_node_array(
      ::TSCE::ASTNodeArrayArchive* ast_thunk_node_array);
  ::TSCE::ASTNodeArrayArchive* unsafe_arena_release_ast_thunk_node_array();

  // optional .TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive AST_local_cell_reference_node_reference = 15;
  bool has_ast_local_cell_reference_node_reference() const;
  private:
  bool _internal_has_ast_local_cell_reference_node_reference() const;
  public:
  void clear_ast_local_cell_reference_node_reference();
  const ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& ast_local_cell_reference_node_reference() const;
  PROTOBUF_NODISCARD ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* release_ast_local_cell_reference_node_reference();
  ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* mutable_ast_local_cell_reference_node_reference();
  void set_allocated_ast_local_cell_reference_node_reference(::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* ast_local_cell_reference_node_reference);
  private:
  const ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& _internal_ast_local_cell_reference_node_reference() const;
  ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* _internal_mutable_ast_local_cell_reference_node_reference();
  public:
  void unsafe_arena_set_allocated_ast_local_cell_reference_node_reference(
      ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* ast_local_cell_reference_node_reference);
  ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* unsafe_arena_release_ast_local_cell_reference_node_reference();

  // optional .TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive AST_cross_table_cell_reference_node_reference = 16;
  bool has_ast_cross_table_cell_reference_node_reference() const;
  private:
  bool _internal_has_ast_cross_table_cell_reference_node_reference() const;
  public:
  void clear_ast_cross_table_cell_reference_node_reference();
  const ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& ast_cross_table_cell_reference_node_reference() const;
  PROTOBUF_NODISCARD ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* release_ast_cross_table_cell_reference_node_reference();
  ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* mutable_ast_cross_table_cell_reference_node_reference();
  void set_allocated_ast_cross_table_cell_reference_node_reference(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* ast_cross_table_cell_reference_node_reference);
  private:
  const ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& _internal_ast_cross_table_cell_reference_node_reference() const;
  ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* _internal_mutable_ast_cross_table_cell_reference_node_reference();
  public:
  void unsafe_arena_set_allocated_ast_cross_table_cell_reference_node_reference(
      ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* ast_cross_table_cell_reference_node_reference);
  ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* unsafe_arena_release_ast_cross_table_cell_reference_node_reference();

  // optional .TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive AST_column = 26;
  bool has_ast_column() const;
  private:
  bool _internal_has_ast_column() const;
  public:
  void clear_ast_column();
  const ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive& ast_column() const;
  PROTOBUF_NODISCARD ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* release_ast_column();
  ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* mutable_ast_column();
  void set_allocated_ast_column(::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* ast_column);
  private:
  const ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive& _internal_ast_column() const;
  ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* _internal_mutable_ast_column();
  public:
  void unsafe_arena_set_allocated_ast_column(
      ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* ast_column);
  ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* unsafe_arena_release_ast_column();

  // optional .TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive AST_row = 27;
  bool has_ast_row() const;
  private:
  bool _internal_has_ast_row() const;
  public:
  void clear_ast_row();
  const ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive& ast_row() const;
  PROTOBUF_NODISCARD ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* release_ast_row();
  ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* mutable_ast_row();
  void set_allocated_ast_row(::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* ast_row);
  private:
  const ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive& _internal_ast_row() const;
  ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* _internal_mutable_ast_row();
  public:
  void unsafe_arena_set_allocated_ast_row(
      ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* ast_row);
  ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* unsafe_arena_release_ast_row();

  // optional .TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive AST_cross_table_reference_extra_info = 28;
  bool has_ast_cross_table_reference_extra_info() const;
  private:
  bool _internal_has_ast_cross_table_reference_extra_info() const;
  public:
  void clear_ast_cross_table_reference_extra_info();
  const ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& ast_cross_table_reference_extra_info() const;
  PROTOBUF_NODISCARD ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* release_ast_cross_table_reference_extra_info();
  ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* mutable_ast_cross_table_reference_extra_info();
  void set_allocated_ast_cross_table_reference_extra_info(::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* ast_cross_table_reference_extra_info);
  private:
  const ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& _internal_ast_cross_table_reference_extra_info() const;
  ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* _internal_mutable_ast_cross_table_reference_extra_info();
  public:
  void unsafe_arena_set_allocated_ast_cross_table_reference_extra_info(
      ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* ast_cross_table_reference_extra_info);
  ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* unsafe_arena_release_ast_cross_table_reference_extra_info();

  // optional uint32 AST_function_node_index = 2;
  bool has_ast_function_node_index() const;
  private:
  bool _internal_has_ast_function_node_index() const;
  public:
  void clear_ast_function_node_index();
  uint32_t ast_function_node_index() const;
  void set_ast_function_node_index(uint32_t value);
  private:
  uint32_t _internal_ast_function_node_index() const;
  void _internal_set_ast_function_node_index(uint32_t value);
  public:

  // optional uint32 AST_function_node_numArgs = 3;
  bool has_ast_function_node_numargs() const;
  private:
  bool _internal_has_ast_function_node_numargs() const;
  public:
  void clear_ast_function_node_numargs();
  uint32_t ast_function_node_numargs() const;
  void set_ast_function_node_numargs(uint32_t value);
  private:
  uint32_t _internal_ast_function_node_numargs() const;
  void _internal_set_ast_function_node_numargs(uint32_t value);
  public:

  // optional double AST_number_node_number = 4;
  bool has_ast_number_node_number() const;
  private:
  bool _internal_has_ast_number_node_number() const;
  public:
  void clear_ast_number_node_number();
  double ast_number_node_number() const;
  void set_ast_number_node_number(double value);
  private:
  double _internal_ast_number_node_number() const;
  void _internal_set_ast_number_node_number(double value);
  public:

  // optional double AST_date_node_dateNum = 7;
  bool has_ast_date_node_datenum() const;
  private:
  bool _internal_has_ast_date_node_datenum() const;
  public:
  void clear_ast_date_node_datenum();
  double ast_date_node_datenum() const;
  void set_ast_date_node_datenum(double value);
  private:
  double _internal_ast_date_node_datenum() const;
  void _internal_set_ast_date_node_datenum(double value);
  public:

  // optional double AST_duration_node_unitNum = 8;
  bool has_ast_duration_node_unitnum() const;
  private:
  bool _internal_has_ast_duration_node_unitnum() const;
  public:
  void clear_ast_duration_node_unitnum();
  double ast_duration_node_unitnum() const;
  void set_ast_duration_node_unitnum(double value);
  private:
  double _internal_ast_duration_node_unitnum() const;
  void _internal_set_ast_duration_node_unitnum(double value);
  public:

  // optional int32 AST_duration_node_unit = 9;
  bool has_ast_duration_node_unit() const;
  private:
  bool _internal_has_ast_duration_node_unit() const;
  public:
  void clear_ast_duration_node_unit();
  int32_t ast_duration_node_unit() const;
  void set_ast_duration_node_unit(int32_t value);
  private:
  int32_t _internal_ast_duration_node_unit() const;
  void _internal_set_ast_duration_node_unit(int32_t value);
  public:

  // optional bool AST_token_node_boolean = 10;
  bool has_ast_token_node_boolean() const;
  private:
  bool _internal_has_ast_token_node_boolean() const;
  public:
  void clear_ast_token_node_boolean();
  bool ast_token_node_boolean() const;
  void set_ast_token_node_boolean(bool value);
  private:
  bool _internal_ast_token_node_boolean() const;
  void _internal_set_ast_token_node_boolean(bool value);
  public:

  // optional uint32 AST_array_node_numCol = 11;
  bool has_ast_array_node_numcol() const;
  private:
  bool _internal_has_ast_array_node_numcol() const;
  public:
  void clear_ast_array_node_numcol();
  uint32_t ast_array_node_numcol() const;
  void set_ast_array_node_numcol(uint32_t value);
  private:
  uint32_t _internal_ast_array_node_numcol() const;
  void _internal_set_ast_array_node_numcol(uint32_t value);
  public:

  // optional uint32 AST_array_node_numRow = 12;
  bool has_ast_array_node_numrow() const;
  private:
  bool _internal_has_ast_array_node_numrow() const;
  public:
  void clear_ast_array_node_numrow();
  uint32_t ast_array_node_numrow() const;
  void set_ast_array_node_numrow(uint32_t value);
  private:
  uint32_t _internal_ast_array_node_numrow() const;
  void _internal_set_ast_array_node_numrow(uint32_t value);
  public:

  // optional uint32 AST_list_node_numArgs = 13;
  bool has_ast_list_node_numargs() const;
  private:
  bool _internal_has_ast_list_node_numargs() const;
  public:
  void clear_ast_list_node_numargs();
  uint32_t ast_list_node_numargs() const;
  void set_ast_list_node_numargs(uint32_t value);
  private:
  uint32_t _internal_ast_list_node_numargs() const;
  void _internal_set_ast_list_node_numargs(uint32_t value);
  public:

  // optional uint32 AST_unknown_function_node_numArgs = 18;
  bool has_ast_unknown_function_node_numargs() const;
  private:
  bool _internal_has_ast_unknown_function_node_numargs() const;
  public:
  void clear_ast_unknown_function_node_numargs();
  uint32_t ast_unknown_function_node_numargs() const;
  void set_ast_unknown_function_node_numargs(uint32_t value);
  private:
  uint32_t _internal_ast_unknown_function_node_numargs() const;
  void _internal_set_ast_unknown_function_node_numargs(uint32_t value);
  public:

  // optional bool AST_boolean_node_boolean = 5;
  bool has_ast_boolean_node_boolean() const;
  private:
  bool _internal_has_ast_boolean_node_boolean() const;
  public:
  void clear_ast_boolean_node_boolean();
  bool ast_boolean_node_boolean() const;
  void set_ast_boolean_node_boolean(bool value);
  private:
  bool _internal_ast_boolean_node_boolean() const;
  void _internal_set_ast_boolean_node_boolean(bool value);
  public:

  // optional bool AST_date_node_suppress_date_format = 19;
  bool has_ast_date_node_suppress_date_format() const;
  private:
  bool _internal_has_ast_date_node_suppress_date_format() const;
  public:
  void clear_ast_date_node_suppress_date_format();
  bool ast_date_node_suppress_date_format() const;
  void set_ast_date_node_suppress_date_format(bool value);
  private:
  bool _internal_ast_date_node_suppress_date_format() const;
  void _internal_set_ast_date_node_suppress_date_format(bool value);
  public:

  // optional bool AST_date_node_suppress_time_format = 20;
  bool has_ast_date_node_suppress_time_format() const;
  private:
  bool _internal_has_ast_date_node_suppress_time_format() const;
  public:
  void clear_ast_date_node_suppress_time_format();
  bool ast_date_node_suppress_time_format() const;
  void set_ast_date_node_suppress_time_format(bool value);
  private:
  bool _internal_ast_date_node_suppress_time_format() const;
  void _internal_set_ast_date_node_suppress_time_format(bool value);
  public:

  // optional bool AST_duration_node_use_automatic_units = 29;
  bool has_ast_duration_node_use_automatic_units() const;
  private:
  bool _internal_has_ast_duration_node_use_automatic_units() const;
  public:
  void clear_ast_duration_node_use_automatic_units();
  bool ast_duration_node_use_automatic_units() const;
  void set_ast_duration_node_use_automatic_units(bool value);
  private:
  bool _internal_ast_duration_node_use_automatic_units() const;
  void _internal_set_ast_duration_node_use_automatic_units(bool value);
  public:

  // optional uint32 AST_duration_node_style = 22;
  bool has_ast_duration_node_style() const;
  private:
  bool _internal_has_ast_duration_node_style() const;
  public:
  void clear_ast_duration_node_style();
  uint32_t ast_duration_node_style() const;
  void set_ast_duration_node_style(uint32_t value);
  private:
  uint32_t _internal_ast_duration_node_style() const;
  void _internal_set_ast_duration_node_style(uint32_t value);
  public:

  // optional uint32 AST_duration_node_duration_unit_largest = 23;
  bool has_ast_duration_node_duration_unit_largest() const;
  private:
  bool _internal_has_ast_duration_node_duration_unit_largest() const;
  public:
  void clear_ast_duration_node_duration_unit_largest();
  uint32_t ast_duration_node_duration_unit_largest() const;
  void set_ast_duration_node_duration_unit_largest(uint32_t value);
  private:
  uint32_t _internal_ast_duration_node_duration_unit_largest() const;
  void _internal_set_ast_duration_node_duration_unit_largest(uint32_t value);
  public:

  // optional uint32 AST_duration_node_duration_unit_smallest = 24;
  bool has_ast_duration_node_duration_unit_smallest() const;
  private:
  bool _internal_has_ast_duration_node_duration_unit_smallest() const;
  public:
  void clear_ast_duration_node_duration_unit_smallest();
  uint32_t ast_duration_node_duration_unit_smallest() const;
  void set_ast_duration_node_duration_unit_smallest(uint32_t value);
  private:
  uint32_t _internal_ast_duration_node_duration_unit_smallest() const;
  void _internal_set_ast_duration_node_duration_unit_smallest(uint32_t value);
  public:

  // required .TSCE.ASTNodeArrayArchive.ASTNodeType AST_node_type = 1;
  bool has_ast_node_type() const;
  private:
  bool _internal_has_ast_node_type() const;
  public:
  void clear_ast_node_type();
  ::TSCE::ASTNodeArrayArchive_ASTNodeType ast_node_type() const;
  void set_ast_node_type(::TSCE::ASTNodeArrayArchive_ASTNodeType value);
  private:
  ::TSCE::ASTNodeArrayArchive_ASTNodeType _internal_ast_node_type() const;
  void _internal_set_ast_node_type(::TSCE::ASTNodeArrayArchive_ASTNodeType value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ast_string_node_string_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ast_unknown_function_node_string_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ast_date_node_date_time_format_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ast_whitespace_;
    ::TSCE::ASTNodeArrayArchive* ast_thunk_node_array_;
    ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* ast_local_cell_reference_node_reference_;
    ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* ast_cross_table_cell_reference_node_reference_;
    ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* ast_column_;
    ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* ast_row_;
    ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* ast_cross_table_reference_extra_info_;
    uint32_t ast_function_node_index_;
    uint32_t ast_function_node_numargs_;
    double ast_number_node_number_;
    double ast_date_node_datenum_;
    double ast_duration_node_unitnum_;
    int32_t ast_duration_node_unit_;
    bool ast_token_node_boolean_;
    uint32_t ast_array_node_numcol_;
    uint32_t ast_array_node_numrow_;
    uint32_t ast_list_node_numargs_;
    uint32_t ast_unknown_function_node_numargs_;
    bool ast_boolean_node_boolean_;
    bool ast_date_node_suppress_date_format_;
    bool ast_date_node_suppress_time_format_;
    bool ast_duration_node_use_automatic_units_;
    uint32_t ast_duration_node_style_;
    uint32_t ast_duration_node_duration_unit_largest_;
    uint32_t ast_duration_node_duration_unit_smallest_;
    int ast_node_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ASTNodeArrayArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ASTNodeArrayArchive) */ {
 public:
  inline ASTNodeArrayArchive() : ASTNodeArrayArchive(nullptr) {}
  ~ASTNodeArrayArchive() override;
  explicit PROTOBUF_CONSTEXPR ASTNodeArrayArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ASTNodeArrayArchive(const ASTNodeArrayArchive& from);
  ASTNodeArrayArchive(ASTNodeArrayArchive&& from) noexcept
    : ASTNodeArrayArchive() {
    *this = ::std::move(from);
  }

  inline ASTNodeArrayArchive& operator=(const ASTNodeArrayArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ASTNodeArrayArchive& operator=(ASTNodeArrayArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ASTNodeArrayArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ASTNodeArrayArchive* internal_default_instance() {
    return reinterpret_cast<const ASTNodeArrayArchive*>(
               &_ASTNodeArrayArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(ASTNodeArrayArchive& a, ASTNodeArrayArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ASTNodeArrayArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ASTNodeArrayArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ASTNodeArrayArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ASTNodeArrayArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ASTNodeArrayArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ASTNodeArrayArchive& from) {
    ASTNodeArrayArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASTNodeArrayArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ASTNodeArrayArchive";
  }
  protected:
  explicit ASTNodeArrayArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive ASTLocalCellReferenceNodeArchive;
  typedef ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive ASTCrossTableCellReferenceNodeArchive;
  typedef ASTNodeArrayArchive_ASTColumnCoordinateArchive ASTColumnCoordinateArchive;
  typedef ASTNodeArrayArchive_ASTRowCoordinateArchive ASTRowCoordinateArchive;
  typedef ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive ASTCrossTableReferenceExtraInfoArchive;
  typedef ASTNodeArrayArchive_ASTNodeArchive ASTNodeArchive;

  typedef ASTNodeArrayArchive_ASTNodeType ASTNodeType;
  static constexpr ASTNodeType ADDITION_NODE =
    ASTNodeArrayArchive_ASTNodeType_ADDITION_NODE;
  static constexpr ASTNodeType SUBTRACTION_NODE =
    ASTNodeArrayArchive_ASTNodeType_SUBTRACTION_NODE;
  static constexpr ASTNodeType MULTIPLICATION_NODE =
    ASTNodeArrayArchive_ASTNodeType_MULTIPLICATION_NODE;
  static constexpr ASTNodeType DIVISION_NODE =
    ASTNodeArrayArchive_ASTNodeType_DIVISION_NODE;
  static constexpr ASTNodeType POWER_NODE =
    ASTNodeArrayArchive_ASTNodeType_POWER_NODE;
  static constexpr ASTNodeType CONCATENATION_NODE =
    ASTNodeArrayArchive_ASTNodeType_CONCATENATION_NODE;
  static constexpr ASTNodeType GREATER_THAN_NODE =
    ASTNodeArrayArchive_ASTNodeType_GREATER_THAN_NODE;
  static constexpr ASTNodeType GREATER_THAN_OR_EQUAL_TO_NODE =
    ASTNodeArrayArchive_ASTNodeType_GREATER_THAN_OR_EQUAL_TO_NODE;
  static constexpr ASTNodeType LESS_THAN_NODE =
    ASTNodeArrayArchive_ASTNodeType_LESS_THAN_NODE;
  static constexpr ASTNodeType LESS_THAN_OR_EQUAL_TO_NODE =
    ASTNodeArrayArchive_ASTNodeType_LESS_THAN_OR_EQUAL_TO_NODE;
  static constexpr ASTNodeType EQUAL_TO_NODE =
    ASTNodeArrayArchive_ASTNodeType_EQUAL_TO_NODE;
  static constexpr ASTNodeType NOT_EQUAL_TO_NODE =
    ASTNodeArrayArchive_ASTNodeType_NOT_EQUAL_TO_NODE;
  static constexpr ASTNodeType NEGATION_NODE =
    ASTNodeArrayArchive_ASTNodeType_NEGATION_NODE;
  static constexpr ASTNodeType PLUS_SIGN_NODE =
    ASTNodeArrayArchive_ASTNodeType_PLUS_SIGN_NODE;
  static constexpr ASTNodeType PERCENT_NODE =
    ASTNodeArrayArchive_ASTNodeType_PERCENT_NODE;
  static constexpr ASTNodeType FUNCTION_NODE =
    ASTNodeArrayArchive_ASTNodeType_FUNCTION_NODE;
  static constexpr ASTNodeType NUMBER_NODE =
    ASTNodeArrayArchive_ASTNodeType_NUMBER_NODE;
  static constexpr ASTNodeType BOOLEAN_NODE =
    ASTNodeArrayArchive_ASTNodeType_BOOLEAN_NODE;
  static constexpr ASTNodeType STRING_NODE =
    ASTNodeArrayArchive_ASTNodeType_STRING_NODE;
  static constexpr ASTNodeType DATE_NODE =
    ASTNodeArrayArchive_ASTNodeType_DATE_NODE;
  static constexpr ASTNodeType DURATION_NODE =
    ASTNodeArrayArchive_ASTNodeType_DURATION_NODE;
  static constexpr ASTNodeType EMPTY_ARGUMENT_NODE =
    ASTNodeArrayArchive_ASTNodeType_EMPTY_ARGUMENT_NODE;
  static constexpr ASTNodeType TOKEN_NODE =
    ASTNodeArrayArchive_ASTNodeType_TOKEN_NODE;
  static constexpr ASTNodeType ARRAY_NODE =
    ASTNodeArrayArchive_ASTNodeType_ARRAY_NODE;
  static constexpr ASTNodeType LIST_NODE =
    ASTNodeArrayArchive_ASTNodeType_LIST_NODE;
  static constexpr ASTNodeType THUNK_NODE =
    ASTNodeArrayArchive_ASTNodeType_THUNK_NODE;
  static constexpr ASTNodeType LOCAL_CELL_REFERENCE_NODE =
    ASTNodeArrayArchive_ASTNodeType_LOCAL_CELL_REFERENCE_NODE;
  static constexpr ASTNodeType CROSS_TABLE_CELL_REFERENCE_NODE =
    ASTNodeArrayArchive_ASTNodeType_CROSS_TABLE_CELL_REFERENCE_NODE;
  static constexpr ASTNodeType COLON_NODE =
    ASTNodeArrayArchive_ASTNodeType_COLON_NODE;
  static constexpr ASTNodeType REFERENCE_ERROR_NODE =
    ASTNodeArrayArchive_ASTNodeType_REFERENCE_ERROR_NODE;
  static constexpr ASTNodeType UNKNOWN_FUNCTION_NODE =
    ASTNodeArrayArchive_ASTNodeType_UNKNOWN_FUNCTION_NODE;
  static constexpr ASTNodeType APPEND_WHITESPACE_NODE =
    ASTNodeArrayArchive_ASTNodeType_APPEND_WHITESPACE_NODE;
  static constexpr ASTNodeType PREPEND_WHITESPACE_NODE =
    ASTNodeArrayArchive_ASTNodeType_PREPEND_WHITESPACE_NODE;
  static constexpr ASTNodeType BEGIN_THUNK_NODE =
    ASTNodeArrayArchive_ASTNodeType_BEGIN_THUNK_NODE;
  static constexpr ASTNodeType END_THUNK_NODE =
    ASTNodeArrayArchive_ASTNodeType_END_THUNK_NODE;
  static constexpr ASTNodeType CELL_REFERENCE_NODE =
    ASTNodeArrayArchive_ASTNodeType_CELL_REFERENCE_NODE;
  static inline bool ASTNodeType_IsValid(int value) {
    return ASTNodeArrayArchive_ASTNodeType_IsValid(value);
  }
  static constexpr ASTNodeType ASTNodeType_MIN =
    ASTNodeArrayArchive_ASTNodeType_ASTNodeType_MIN;
  static constexpr ASTNodeType ASTNodeType_MAX =
    ASTNodeArrayArchive_ASTNodeType_ASTNodeType_MAX;
  static constexpr int ASTNodeType_ARRAYSIZE =
    ASTNodeArrayArchive_ASTNodeType_ASTNodeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ASTNodeType_descriptor() {
    return ASTNodeArrayArchive_ASTNodeType_descriptor();
  }
  template<typename T>
  static inline const std::string& ASTNodeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ASTNodeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ASTNodeType_Name.");
    return ASTNodeArrayArchive_ASTNodeType_Name(enum_t_value);
  }
  static inline bool ASTNodeType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ASTNodeType* value) {
    return ASTNodeArrayArchive_ASTNodeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kASTNodeFieldNumber = 1,
  };
  // repeated .TSCE.ASTNodeArrayArchive.ASTNodeArchive AST_node = 1;
  int ast_node_size() const;
  private:
  int _internal_ast_node_size() const;
  public:
  void clear_ast_node();
  ::TSCE::ASTNodeArrayArchive_ASTNodeArchive* mutable_ast_node(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTNodeArchive >*
      mutable_ast_node();
  private:
  const ::TSCE::ASTNodeArrayArchive_ASTNodeArchive& _internal_ast_node(int index) const;
  ::TSCE::ASTNodeArrayArchive_ASTNodeArchive* _internal_add_ast_node();
  public:
  const ::TSCE::ASTNodeArrayArchive_ASTNodeArchive& ast_node(int index) const;
  ::TSCE::ASTNodeArrayArchive_ASTNodeArchive* add_ast_node();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTNodeArchive >&
      ast_node() const;

  // @@protoc_insertion_point(class_scope:TSCE.ASTNodeArrayArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTNodeArchive > ast_node_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class FormulaTranslationFlagsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.FormulaTranslationFlagsArchive) */ {
 public:
  inline FormulaTranslationFlagsArchive() : FormulaTranslationFlagsArchive(nullptr) {}
  ~FormulaTranslationFlagsArchive() override;
  explicit PROTOBUF_CONSTEXPR FormulaTranslationFlagsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormulaTranslationFlagsArchive(const FormulaTranslationFlagsArchive& from);
  FormulaTranslationFlagsArchive(FormulaTranslationFlagsArchive&& from) noexcept
    : FormulaTranslationFlagsArchive() {
    *this = ::std::move(from);
  }

  inline FormulaTranslationFlagsArchive& operator=(const FormulaTranslationFlagsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormulaTranslationFlagsArchive& operator=(FormulaTranslationFlagsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormulaTranslationFlagsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormulaTranslationFlagsArchive* internal_default_instance() {
    return reinterpret_cast<const FormulaTranslationFlagsArchive*>(
               &_FormulaTranslationFlagsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(FormulaTranslationFlagsArchive& a, FormulaTranslationFlagsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormulaTranslationFlagsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormulaTranslationFlagsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FormulaTranslationFlagsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FormulaTranslationFlagsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FormulaTranslationFlagsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FormulaTranslationFlagsArchive& from) {
    FormulaTranslationFlagsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormulaTranslationFlagsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.FormulaTranslationFlagsArchive";
  }
  protected:
  explicit FormulaTranslationFlagsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExcelImportTranslationFieldNumber = 1,
    kNumberToDateCoercionRemovalTranslationFieldNumber = 2,
  };
  // optional bool excel_import_translation = 1 [default = false];
  bool has_excel_import_translation() const;
  private:
  bool _internal_has_excel_import_translation() const;
  public:
  void clear_excel_import_translation();
  bool excel_import_translation() const;
  void set_excel_import_translation(bool value);
  private:
  bool _internal_excel_import_translation() const;
  void _internal_set_excel_import_translation(bool value);
  public:

  // optional bool number_to_date_coercion_removal_translation = 2 [default = false];
  bool has_number_to_date_coercion_removal_translation() const;
  private:
  bool _internal_has_number_to_date_coercion_removal_translation() const;
  public:
  void clear_number_to_date_coercion_removal_translation();
  bool number_to_date_coercion_removal_translation() const;
  void set_number_to_date_coercion_removal_translation(bool value);
  private:
  bool _internal_number_to_date_coercion_removal_translation() const;
  void _internal_set_number_to_date_coercion_removal_translation(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.FormulaTranslationFlagsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool excel_import_translation_;
    bool number_to_date_coercion_removal_translation_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class FormulaArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.FormulaArchive) */ {
 public:
  inline FormulaArchive() : FormulaArchive(nullptr) {}
  ~FormulaArchive() override;
  explicit PROTOBUF_CONSTEXPR FormulaArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormulaArchive(const FormulaArchive& from);
  FormulaArchive(FormulaArchive&& from) noexcept
    : FormulaArchive() {
    *this = ::std::move(from);
  }

  inline FormulaArchive& operator=(const FormulaArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormulaArchive& operator=(FormulaArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormulaArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormulaArchive* internal_default_instance() {
    return reinterpret_cast<const FormulaArchive*>(
               &_FormulaArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(FormulaArchive& a, FormulaArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormulaArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormulaArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FormulaArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FormulaArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FormulaArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FormulaArchive& from) {
    FormulaArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormulaArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.FormulaArchive";
  }
  protected:
  explicit FormulaArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kASTNodeArrayFieldNumber = 1,
    kTranslationFlagsFieldNumber = 6,
    kHostColumnFieldNumber = 2,
    kHostRowFieldNumber = 3,
    kHostColumnIsNegativeFieldNumber = 4,
    kHostRowIsNegativeFieldNumber = 5,
  };
  // required .TSCE.ASTNodeArrayArchive AST_node_array = 1;
  bool has_ast_node_array() const;
  private:
  bool _internal_has_ast_node_array() const;
  public:
  void clear_ast_node_array();
  const ::TSCE::ASTNodeArrayArchive& ast_node_array() const;
  PROTOBUF_NODISCARD ::TSCE::ASTNodeArrayArchive* release_ast_node_array();
  ::TSCE::ASTNodeArrayArchive* mutable_ast_node_array();
  void set_allocated_ast_node_array(::TSCE::ASTNodeArrayArchive* ast_node_array);
  private:
  const ::TSCE::ASTNodeArrayArchive& _internal_ast_node_array() const;
  ::TSCE::ASTNodeArrayArchive* _internal_mutable_ast_node_array();
  public:
  void unsafe_arena_set_allocated_ast_node_array(
      ::TSCE::ASTNodeArrayArchive* ast_node_array);
  ::TSCE::ASTNodeArrayArchive* unsafe_arena_release_ast_node_array();

  // optional .TSCE.FormulaTranslationFlagsArchive translation_flags = 6;
  bool has_translation_flags() const;
  private:
  bool _internal_has_translation_flags() const;
  public:
  void clear_translation_flags();
  const ::TSCE::FormulaTranslationFlagsArchive& translation_flags() const;
  PROTOBUF_NODISCARD ::TSCE::FormulaTranslationFlagsArchive* release_translation_flags();
  ::TSCE::FormulaTranslationFlagsArchive* mutable_translation_flags();
  void set_allocated_translation_flags(::TSCE::FormulaTranslationFlagsArchive* translation_flags);
  private:
  const ::TSCE::FormulaTranslationFlagsArchive& _internal_translation_flags() const;
  ::TSCE::FormulaTranslationFlagsArchive* _internal_mutable_translation_flags();
  public:
  void unsafe_arena_set_allocated_translation_flags(
      ::TSCE::FormulaTranslationFlagsArchive* translation_flags);
  ::TSCE::FormulaTranslationFlagsArchive* unsafe_arena_release_translation_flags();

  // optional uint32 host_column = 2;
  bool has_host_column() const;
  private:
  bool _internal_has_host_column() const;
  public:
  void clear_host_column();
  uint32_t host_column() const;
  void set_host_column(uint32_t value);
  private:
  uint32_t _internal_host_column() const;
  void _internal_set_host_column(uint32_t value);
  public:

  // optional uint32 host_row = 3;
  bool has_host_row() const;
  private:
  bool _internal_has_host_row() const;
  public:
  void clear_host_row();
  uint32_t host_row() const;
  void set_host_row(uint32_t value);
  private:
  uint32_t _internal_host_row() const;
  void _internal_set_host_row(uint32_t value);
  public:

  // optional bool host_column_is_negative = 4 [default = false];
  bool has_host_column_is_negative() const;
  private:
  bool _internal_has_host_column_is_negative() const;
  public:
  void clear_host_column_is_negative();
  bool host_column_is_negative() const;
  void set_host_column_is_negative(bool value);
  private:
  bool _internal_host_column_is_negative() const;
  void _internal_set_host_column_is_negative(bool value);
  public:

  // optional bool host_row_is_negative = 5 [default = false];
  bool has_host_row_is_negative() const;
  private:
  bool _internal_has_host_row_is_negative() const;
  public:
  void clear_host_row_is_negative();
  bool host_row_is_negative() const;
  void set_host_row_is_negative(bool value);
  private:
  bool _internal_host_row_is_negative() const;
  void _internal_set_host_row_is_negative(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.FormulaArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCE::ASTNodeArrayArchive* ast_node_array_;
    ::TSCE::FormulaTranslationFlagsArchive* translation_flags_;
    uint32_t host_column_;
    uint32_t host_row_;
    bool host_column_is_negative_;
    bool host_row_is_negative_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class FormatStructArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.FormatStructArchive) */ {
 public:
  inline FormatStructArchive() : FormatStructArchive(nullptr) {}
  ~FormatStructArchive() override;
  explicit PROTOBUF_CONSTEXPR FormatStructArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormatStructArchive(const FormatStructArchive& from);
  FormatStructArchive(FormatStructArchive&& from) noexcept
    : FormatStructArchive() {
    *this = ::std::move(from);
  }

  inline FormatStructArchive& operator=(const FormatStructArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormatStructArchive& operator=(FormatStructArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormatStructArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormatStructArchive* internal_default_instance() {
    return reinterpret_cast<const FormatStructArchive*>(
               &_FormatStructArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(FormatStructArchive& a, FormatStructArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormatStructArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormatStructArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FormatStructArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FormatStructArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FormatStructArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FormatStructArchive& from) {
    FormatStructArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormatStructArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.FormatStructArchive";
  }
  protected:
  explicit FormatStructArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyCodeFieldNumber = 3,
    kDateTimeFormatFieldNumber = 14,
    kFormatTypeFieldNumber = 1,
    kDecimalPlacesFieldNumber = 2,
    kNegativeStyleFieldNumber = 4,
    kDurationStyleFieldNumber = 7,
    kBaseFieldNumber = 8,
    kShowThousandsSeparatorFieldNumber = 5,
    kUseAccountingStyleFieldNumber = 6,
    kBaseUseMinusSignFieldNumber = 10,
    kSuppressDateFormatFieldNumber = 12,
    kBasePlacesFieldNumber = 9,
    kFractionAccuracyFieldNumber = 11,
    kSuppressTimeFormatFieldNumber = 13,
    kDurationUnitLargestFieldNumber = 15,
    kDurationUnitSmallestFieldNumber = 16,
  };
  // optional string currency_code = 3;
  bool has_currency_code() const;
  private:
  bool _internal_has_currency_code() const;
  public:
  void clear_currency_code();
  const std::string& currency_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency_code();
  PROTOBUF_NODISCARD std::string* release_currency_code();
  void set_allocated_currency_code(std::string* currency_code);
  private:
  const std::string& _internal_currency_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency_code(const std::string& value);
  std::string* _internal_mutable_currency_code();
  public:

  // optional string date_time_format = 14;
  bool has_date_time_format() const;
  private:
  bool _internal_has_date_time_format() const;
  public:
  void clear_date_time_format();
  const std::string& date_time_format() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_date_time_format(ArgT0&& arg0, ArgT... args);
  std::string* mutable_date_time_format();
  PROTOBUF_NODISCARD std::string* release_date_time_format();
  void set_allocated_date_time_format(std::string* date_time_format);
  private:
  const std::string& _internal_date_time_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date_time_format(const std::string& value);
  std::string* _internal_mutable_date_time_format();
  public:

  // required uint32 format_type = 1;
  bool has_format_type() const;
  private:
  bool _internal_has_format_type() const;
  public:
  void clear_format_type();
  uint32_t format_type() const;
  void set_format_type(uint32_t value);
  private:
  uint32_t _internal_format_type() const;
  void _internal_set_format_type(uint32_t value);
  public:

  // optional uint32 decimal_places = 2;
  bool has_decimal_places() const;
  private:
  bool _internal_has_decimal_places() const;
  public:
  void clear_decimal_places();
  uint32_t decimal_places() const;
  void set_decimal_places(uint32_t value);
  private:
  uint32_t _internal_decimal_places() const;
  void _internal_set_decimal_places(uint32_t value);
  public:

  // optional uint32 negative_style = 4;
  bool has_negative_style() const;
  private:
  bool _internal_has_negative_style() const;
  public:
  void clear_negative_style();
  uint32_t negative_style() const;
  void set_negative_style(uint32_t value);
  private:
  uint32_t _internal_negative_style() const;
  void _internal_set_negative_style(uint32_t value);
  public:

  // optional uint32 duration_style = 7;
  bool has_duration_style() const;
  private:
  bool _internal_has_duration_style() const;
  public:
  void clear_duration_style();
  uint32_t duration_style() const;
  void set_duration_style(uint32_t value);
  private:
  uint32_t _internal_duration_style() const;
  void _internal_set_duration_style(uint32_t value);
  public:

  // optional uint32 base = 8;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  uint32_t base() const;
  void set_base(uint32_t value);
  private:
  uint32_t _internal_base() const;
  void _internal_set_base(uint32_t value);
  public:

  // optional bool show_thousands_separator = 5;
  bool has_show_thousands_separator() const;
  private:
  bool _internal_has_show_thousands_separator() const;
  public:
  void clear_show_thousands_separator();
  bool show_thousands_separator() const;
  void set_show_thousands_separator(bool value);
  private:
  bool _internal_show_thousands_separator() const;
  void _internal_set_show_thousands_separator(bool value);
  public:

  // optional bool use_accounting_style = 6;
  bool has_use_accounting_style() const;
  private:
  bool _internal_has_use_accounting_style() const;
  public:
  void clear_use_accounting_style();
  bool use_accounting_style() const;
  void set_use_accounting_style(bool value);
  private:
  bool _internal_use_accounting_style() const;
  void _internal_set_use_accounting_style(bool value);
  public:

  // optional bool base_use_minus_sign = 10;
  bool has_base_use_minus_sign() const;
  private:
  bool _internal_has_base_use_minus_sign() const;
  public:
  void clear_base_use_minus_sign();
  bool base_use_minus_sign() const;
  void set_base_use_minus_sign(bool value);
  private:
  bool _internal_base_use_minus_sign() const;
  void _internal_set_base_use_minus_sign(bool value);
  public:

  // optional bool suppress_date_format = 12;
  bool has_suppress_date_format() const;
  private:
  bool _internal_has_suppress_date_format() const;
  public:
  void clear_suppress_date_format();
  bool suppress_date_format() const;
  void set_suppress_date_format(bool value);
  private:
  bool _internal_suppress_date_format() const;
  void _internal_set_suppress_date_format(bool value);
  public:

  // optional uint32 base_places = 9;
  bool has_base_places() const;
  private:
  bool _internal_has_base_places() const;
  public:
  void clear_base_places();
  uint32_t base_places() const;
  void set_base_places(uint32_t value);
  private:
  uint32_t _internal_base_places() const;
  void _internal_set_base_places(uint32_t value);
  public:

  // optional uint32 fraction_accuracy = 11;
  bool has_fraction_accuracy() const;
  private:
  bool _internal_has_fraction_accuracy() const;
  public:
  void clear_fraction_accuracy();
  uint32_t fraction_accuracy() const;
  void set_fraction_accuracy(uint32_t value);
  private:
  uint32_t _internal_fraction_accuracy() const;
  void _internal_set_fraction_accuracy(uint32_t value);
  public:

  // optional bool suppress_time_format = 13;
  bool has_suppress_time_format() const;
  private:
  bool _internal_has_suppress_time_format() const;
  public:
  void clear_suppress_time_format();
  bool suppress_time_format() const;
  void set_suppress_time_format(bool value);
  private:
  bool _internal_suppress_time_format() const;
  void _internal_set_suppress_time_format(bool value);
  public:

  // optional uint32 duration_unit_largest = 15;
  bool has_duration_unit_largest() const;
  private:
  bool _internal_has_duration_unit_largest() const;
  public:
  void clear_duration_unit_largest();
  uint32_t duration_unit_largest() const;
  void set_duration_unit_largest(uint32_t value);
  private:
  uint32_t _internal_duration_unit_largest() const;
  void _internal_set_duration_unit_largest(uint32_t value);
  public:

  // optional uint32 duration_unit_smallest = 16;
  bool has_duration_unit_smallest() const;
  private:
  bool _internal_has_duration_unit_smallest() const;
  public:
  void clear_duration_unit_smallest();
  uint32_t duration_unit_smallest() const;
  void set_duration_unit_smallest(uint32_t value);
  private:
  uint32_t _internal_duration_unit_smallest() const;
  void _internal_set_duration_unit_smallest(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.FormatStructArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_time_format_;
    uint32_t format_type_;
    uint32_t decimal_places_;
    uint32_t negative_style_;
    uint32_t duration_style_;
    uint32_t base_;
    bool show_thousands_separator_;
    bool use_accounting_style_;
    bool base_use_minus_sign_;
    bool suppress_date_format_;
    uint32_t base_places_;
    uint32_t fraction_accuracy_;
    bool suppress_time_format_;
    uint32_t duration_unit_largest_;
    uint32_t duration_unit_smallest_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RangeCoordinateArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RangeCoordinateArchive) */ {
 public:
  inline RangeCoordinateArchive() : RangeCoordinateArchive(nullptr) {}
  ~RangeCoordinateArchive() override;
  explicit PROTOBUF_CONSTEXPR RangeCoordinateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RangeCoordinateArchive(const RangeCoordinateArchive& from);
  RangeCoordinateArchive(RangeCoordinateArchive&& from) noexcept
    : RangeCoordinateArchive() {
    *this = ::std::move(from);
  }

  inline RangeCoordinateArchive& operator=(const RangeCoordinateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeCoordinateArchive& operator=(RangeCoordinateArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RangeCoordinateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RangeCoordinateArchive* internal_default_instance() {
    return reinterpret_cast<const RangeCoordinateArchive*>(
               &_RangeCoordinateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(RangeCoordinateArchive& a, RangeCoordinateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeCoordinateArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RangeCoordinateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RangeCoordinateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RangeCoordinateArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RangeCoordinateArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RangeCoordinateArchive& from) {
    RangeCoordinateArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeCoordinateArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RangeCoordinateArchive";
  }
  protected:
  explicit RangeCoordinateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopLeftColumnFieldNumber = 1,
    kTopLeftRowFieldNumber = 2,
    kBottomRightColumnFieldNumber = 3,
    kBottomRightRowFieldNumber = 4,
  };
  // required uint32 top_left_column = 1;
  bool has_top_left_column() const;
  private:
  bool _internal_has_top_left_column() const;
  public:
  void clear_top_left_column();
  uint32_t top_left_column() const;
  void set_top_left_column(uint32_t value);
  private:
  uint32_t _internal_top_left_column() const;
  void _internal_set_top_left_column(uint32_t value);
  public:

  // required uint32 top_left_row = 2;
  bool has_top_left_row() const;
  private:
  bool _internal_has_top_left_row() const;
  public:
  void clear_top_left_row();
  uint32_t top_left_row() const;
  void set_top_left_row(uint32_t value);
  private:
  uint32_t _internal_top_left_row() const;
  void _internal_set_top_left_row(uint32_t value);
  public:

  // required uint32 bottom_right_column = 3;
  bool has_bottom_right_column() const;
  private:
  bool _internal_has_bottom_right_column() const;
  public:
  void clear_bottom_right_column();
  uint32_t bottom_right_column() const;
  void set_bottom_right_column(uint32_t value);
  private:
  uint32_t _internal_bottom_right_column() const;
  void _internal_set_bottom_right_column(uint32_t value);
  public:

  // required uint32 bottom_right_row = 4;
  bool has_bottom_right_row() const;
  private:
  bool _internal_has_bottom_right_row() const;
  public:
  void clear_bottom_right_row();
  uint32_t bottom_right_row() const;
  void set_bottom_right_row(uint32_t value);
  private:
  uint32_t _internal_bottom_right_row() const;
  void _internal_set_bottom_right_row(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.RangeCoordinateArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t top_left_column_;
    uint32_t top_left_row_;
    uint32_t bottom_right_column_;
    uint32_t bottom_right_row_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class TectonicShiftArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.TectonicShiftArchive) */ {
 public:
  inline TectonicShiftArchive() : TectonicShiftArchive(nullptr) {}
  ~TectonicShiftArchive() override;
  explicit PROTOBUF_CONSTEXPR TectonicShiftArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TectonicShiftArchive(const TectonicShiftArchive& from);
  TectonicShiftArchive(TectonicShiftArchive&& from) noexcept
    : TectonicShiftArchive() {
    *this = ::std::move(from);
  }

  inline TectonicShiftArchive& operator=(const TectonicShiftArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TectonicShiftArchive& operator=(TectonicShiftArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TectonicShiftArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TectonicShiftArchive* internal_default_instance() {
    return reinterpret_cast<const TectonicShiftArchive*>(
               &_TectonicShiftArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(TectonicShiftArchive& a, TectonicShiftArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TectonicShiftArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TectonicShiftArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TectonicShiftArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TectonicShiftArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TectonicShiftArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TectonicShiftArchive& from) {
    TectonicShiftArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TectonicShiftArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.TectonicShiftArchive";
  }
  protected:
  explicit TectonicShiftArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeForShiftFieldNumber = 5,
    kRangeForDeletionFieldNumber = 6,
    kInsertedRangeFieldNumber = 7,
    kTableRangeFieldNumber = 11,
    kTableIdFieldNumber = 12,
    kGridCoordinateOffsetXFieldNumber = 1,
    kGridCoordinateOffsetYFieldNumber = 2,
    kGridCoordinateOffsetXIsNegativeFieldNumber = 3,
    kGridCoordinateOffsetYIsNegativeFieldNumber = 4,
    kApplyToAbsoluteFieldNumber = 8,
    kInsertingAfterFieldNumber = 9,
    kIgnoreStickyBitsFieldNumber = 10,
  };
  // optional .TSCE.RangeCoordinateArchive range_for_shift = 5;
  bool has_range_for_shift() const;
  private:
  bool _internal_has_range_for_shift() const;
  public:
  void clear_range_for_shift();
  const ::TSCE::RangeCoordinateArchive& range_for_shift() const;
  PROTOBUF_NODISCARD ::TSCE::RangeCoordinateArchive* release_range_for_shift();
  ::TSCE::RangeCoordinateArchive* mutable_range_for_shift();
  void set_allocated_range_for_shift(::TSCE::RangeCoordinateArchive* range_for_shift);
  private:
  const ::TSCE::RangeCoordinateArchive& _internal_range_for_shift() const;
  ::TSCE::RangeCoordinateArchive* _internal_mutable_range_for_shift();
  public:
  void unsafe_arena_set_allocated_range_for_shift(
      ::TSCE::RangeCoordinateArchive* range_for_shift);
  ::TSCE::RangeCoordinateArchive* unsafe_arena_release_range_for_shift();

  // optional .TSCE.RangeCoordinateArchive range_for_deletion = 6;
  bool has_range_for_deletion() const;
  private:
  bool _internal_has_range_for_deletion() const;
  public:
  void clear_range_for_deletion();
  const ::TSCE::RangeCoordinateArchive& range_for_deletion() const;
  PROTOBUF_NODISCARD ::TSCE::RangeCoordinateArchive* release_range_for_deletion();
  ::TSCE::RangeCoordinateArchive* mutable_range_for_deletion();
  void set_allocated_range_for_deletion(::TSCE::RangeCoordinateArchive* range_for_deletion);
  private:
  const ::TSCE::RangeCoordinateArchive& _internal_range_for_deletion() const;
  ::TSCE::RangeCoordinateArchive* _internal_mutable_range_for_deletion();
  public:
  void unsafe_arena_set_allocated_range_for_deletion(
      ::TSCE::RangeCoordinateArchive* range_for_deletion);
  ::TSCE::RangeCoordinateArchive* unsafe_arena_release_range_for_deletion();

  // optional .TSCE.RangeCoordinateArchive inserted_range = 7;
  bool has_inserted_range() const;
  private:
  bool _internal_has_inserted_range() const;
  public:
  void clear_inserted_range();
  const ::TSCE::RangeCoordinateArchive& inserted_range() const;
  PROTOBUF_NODISCARD ::TSCE::RangeCoordinateArchive* release_inserted_range();
  ::TSCE::RangeCoordinateArchive* mutable_inserted_range();
  void set_allocated_inserted_range(::TSCE::RangeCoordinateArchive* inserted_range);
  private:
  const ::TSCE::RangeCoordinateArchive& _internal_inserted_range() const;
  ::TSCE::RangeCoordinateArchive* _internal_mutable_inserted_range();
  public:
  void unsafe_arena_set_allocated_inserted_range(
      ::TSCE::RangeCoordinateArchive* inserted_range);
  ::TSCE::RangeCoordinateArchive* unsafe_arena_release_inserted_range();

  // optional .TSCE.RangeCoordinateArchive table_range = 11;
  bool has_table_range() const;
  private:
  bool _internal_has_table_range() const;
  public:
  void clear_table_range();
  const ::TSCE::RangeCoordinateArchive& table_range() const;
  PROTOBUF_NODISCARD ::TSCE::RangeCoordinateArchive* release_table_range();
  ::TSCE::RangeCoordinateArchive* mutable_table_range();
  void set_allocated_table_range(::TSCE::RangeCoordinateArchive* table_range);
  private:
  const ::TSCE::RangeCoordinateArchive& _internal_table_range() const;
  ::TSCE::RangeCoordinateArchive* _internal_mutable_table_range();
  public:
  void unsafe_arena_set_allocated_table_range(
      ::TSCE::RangeCoordinateArchive* table_range);
  ::TSCE::RangeCoordinateArchive* unsafe_arena_release_table_range();

  // optional .TSCE.CFUUIDArchive table_id = 12;
  bool has_table_id() const;
  private:
  bool _internal_has_table_id() const;
  public:
  void clear_table_id();
  const ::TSCE::CFUUIDArchive& table_id() const;
  PROTOBUF_NODISCARD ::TSCE::CFUUIDArchive* release_table_id();
  ::TSCE::CFUUIDArchive* mutable_table_id();
  void set_allocated_table_id(::TSCE::CFUUIDArchive* table_id);
  private:
  const ::TSCE::CFUUIDArchive& _internal_table_id() const;
  ::TSCE::CFUUIDArchive* _internal_mutable_table_id();
  public:
  void unsafe_arena_set_allocated_table_id(
      ::TSCE::CFUUIDArchive* table_id);
  ::TSCE::CFUUIDArchive* unsafe_arena_release_table_id();

  // required uint32 grid_coordinate_offset_x = 1;
  bool has_grid_coordinate_offset_x() const;
  private:
  bool _internal_has_grid_coordinate_offset_x() const;
  public:
  void clear_grid_coordinate_offset_x();
  uint32_t grid_coordinate_offset_x() const;
  void set_grid_coordinate_offset_x(uint32_t value);
  private:
  uint32_t _internal_grid_coordinate_offset_x() const;
  void _internal_set_grid_coordinate_offset_x(uint32_t value);
  public:

  // required uint32 grid_coordinate_offset_y = 2;
  bool has_grid_coordinate_offset_y() const;
  private:
  bool _internal_has_grid_coordinate_offset_y() const;
  public:
  void clear_grid_coordinate_offset_y();
  uint32_t grid_coordinate_offset_y() const;
  void set_grid_coordinate_offset_y(uint32_t value);
  private:
  uint32_t _internal_grid_coordinate_offset_y() const;
  void _internal_set_grid_coordinate_offset_y(uint32_t value);
  public:

  // required bool grid_coordinate_offset_x_is_negative = 3;
  bool has_grid_coordinate_offset_x_is_negative() const;
  private:
  bool _internal_has_grid_coordinate_offset_x_is_negative() const;
  public:
  void clear_grid_coordinate_offset_x_is_negative();
  bool grid_coordinate_offset_x_is_negative() const;
  void set_grid_coordinate_offset_x_is_negative(bool value);
  private:
  bool _internal_grid_coordinate_offset_x_is_negative() const;
  void _internal_set_grid_coordinate_offset_x_is_negative(bool value);
  public:

  // required bool grid_coordinate_offset_y_is_negative = 4;
  bool has_grid_coordinate_offset_y_is_negative() const;
  private:
  bool _internal_has_grid_coordinate_offset_y_is_negative() const;
  public:
  void clear_grid_coordinate_offset_y_is_negative();
  bool grid_coordinate_offset_y_is_negative() const;
  void set_grid_coordinate_offset_y_is_negative(bool value);
  private:
  bool _internal_grid_coordinate_offset_y_is_negative() const;
  void _internal_set_grid_coordinate_offset_y_is_negative(bool value);
  public:

  // required bool apply_to_absolute = 8;
  bool has_apply_to_absolute() const;
  private:
  bool _internal_has_apply_to_absolute() const;
  public:
  void clear_apply_to_absolute();
  bool apply_to_absolute() const;
  void set_apply_to_absolute(bool value);
  private:
  bool _internal_apply_to_absolute() const;
  void _internal_set_apply_to_absolute(bool value);
  public:

  // required bool inserting_after = 9;
  bool has_inserting_after() const;
  private:
  bool _internal_has_inserting_after() const;
  public:
  void clear_inserting_after();
  bool inserting_after() const;
  void set_inserting_after(bool value);
  private:
  bool _internal_inserting_after() const;
  void _internal_set_inserting_after(bool value);
  public:

  // required bool ignore_sticky_bits = 10;
  bool has_ignore_sticky_bits() const;
  private:
  bool _internal_has_ignore_sticky_bits() const;
  public:
  void clear_ignore_sticky_bits();
  bool ignore_sticky_bits() const;
  void set_ignore_sticky_bits(bool value);
  private:
  bool _internal_ignore_sticky_bits() const;
  void _internal_set_ignore_sticky_bits(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.TectonicShiftArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCE::RangeCoordinateArchive* range_for_shift_;
    ::TSCE::RangeCoordinateArchive* range_for_deletion_;
    ::TSCE::RangeCoordinateArchive* inserted_range_;
    ::TSCE::RangeCoordinateArchive* table_range_;
    ::TSCE::CFUUIDArchive* table_id_;
    uint32_t grid_coordinate_offset_x_;
    uint32_t grid_coordinate_offset_y_;
    bool grid_coordinate_offset_x_is_negative_;
    bool grid_coordinate_offset_y_is_negative_;
    bool apply_to_absolute_;
    bool inserting_after_;
    bool ignore_sticky_bits_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RewriteSortMappingArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RewriteSortMappingArchive) */ {
 public:
  inline RewriteSortMappingArchive() : RewriteSortMappingArchive(nullptr) {}
  ~RewriteSortMappingArchive() override;
  explicit PROTOBUF_CONSTEXPR RewriteSortMappingArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RewriteSortMappingArchive(const RewriteSortMappingArchive& from);
  RewriteSortMappingArchive(RewriteSortMappingArchive&& from) noexcept
    : RewriteSortMappingArchive() {
    *this = ::std::move(from);
  }

  inline RewriteSortMappingArchive& operator=(const RewriteSortMappingArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewriteSortMappingArchive& operator=(RewriteSortMappingArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RewriteSortMappingArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RewriteSortMappingArchive* internal_default_instance() {
    return reinterpret_cast<const RewriteSortMappingArchive*>(
               &_RewriteSortMappingArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(RewriteSortMappingArchive& a, RewriteSortMappingArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RewriteSortMappingArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RewriteSortMappingArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RewriteSortMappingArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RewriteSortMappingArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RewriteSortMappingArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RewriteSortMappingArchive& from) {
    RewriteSortMappingArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RewriteSortMappingArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RewriteSortMappingArchive";
  }
  protected:
  explicit RewriteSortMappingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableIdFieldNumber = 1,
    kShuffleMappingFieldNumber = 2,
    kExplodeRangesFieldNumber = 3,
  };
  // required .TSCE.CFUUIDArchive table_id = 1;
  bool has_table_id() const;
  private:
  bool _internal_has_table_id() const;
  public:
  void clear_table_id();
  const ::TSCE::CFUUIDArchive& table_id() const;
  PROTOBUF_NODISCARD ::TSCE::CFUUIDArchive* release_table_id();
  ::TSCE::CFUUIDArchive* mutable_table_id();
  void set_allocated_table_id(::TSCE::CFUUIDArchive* table_id);
  private:
  const ::TSCE::CFUUIDArchive& _internal_table_id() const;
  ::TSCE::CFUUIDArchive* _internal_mutable_table_id();
  public:
  void unsafe_arena_set_allocated_table_id(
      ::TSCE::CFUUIDArchive* table_id);
  ::TSCE::CFUUIDArchive* unsafe_arena_release_table_id();

  // required .TSK.ShuffleMappingArchive shuffle_mapping = 2;
  bool has_shuffle_mapping() const;
  private:
  bool _internal_has_shuffle_mapping() const;
  public:
  void clear_shuffle_mapping();
  const ::TSK::ShuffleMappingArchive& shuffle_mapping() const;
  PROTOBUF_NODISCARD ::TSK::ShuffleMappingArchive* release_shuffle_mapping();
  ::TSK::ShuffleMappingArchive* mutable_shuffle_mapping();
  void set_allocated_shuffle_mapping(::TSK::ShuffleMappingArchive* shuffle_mapping);
  private:
  const ::TSK::ShuffleMappingArchive& _internal_shuffle_mapping() const;
  ::TSK::ShuffleMappingArchive* _internal_mutable_shuffle_mapping();
  public:
  void unsafe_arena_set_allocated_shuffle_mapping(
      ::TSK::ShuffleMappingArchive* shuffle_mapping);
  ::TSK::ShuffleMappingArchive* unsafe_arena_release_shuffle_mapping();

  // required bool explode_ranges = 3;
  bool has_explode_ranges() const;
  private:
  bool _internal_has_explode_ranges() const;
  public:
  void clear_explode_ranges();
  bool explode_ranges() const;
  void set_explode_ranges(bool value);
  private:
  bool _internal_explode_ranges() const;
  void _internal_set_explode_ranges(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.RewriteSortMappingArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCE::CFUUIDArchive* table_id_;
    ::TSK::ShuffleMappingArchive* shuffle_mapping_;
    bool explode_ranges_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RangeMovedInfoArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RangeMovedInfoArchive) */ {
 public:
  inline RangeMovedInfoArchive() : RangeMovedInfoArchive(nullptr) {}
  ~RangeMovedInfoArchive() override;
  explicit PROTOBUF_CONSTEXPR RangeMovedInfoArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RangeMovedInfoArchive(const RangeMovedInfoArchive& from);
  RangeMovedInfoArchive(RangeMovedInfoArchive&& from) noexcept
    : RangeMovedInfoArchive() {
    *this = ::std::move(from);
  }

  inline RangeMovedInfoArchive& operator=(const RangeMovedInfoArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeMovedInfoArchive& operator=(RangeMovedInfoArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RangeMovedInfoArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RangeMovedInfoArchive* internal_default_instance() {
    return reinterpret_cast<const RangeMovedInfoArchive*>(
               &_RangeMovedInfoArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(RangeMovedInfoArchive& a, RangeMovedInfoArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeMovedInfoArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RangeMovedInfoArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RangeMovedInfoArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RangeMovedInfoArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RangeMovedInfoArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RangeMovedInfoArchive& from) {
    RangeMovedInfoArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeMovedInfoArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RangeMovedInfoArchive";
  }
  protected:
  explicit RangeMovedInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableIdFieldNumber = 1,
    kFromRangeFieldNumber = 2,
    kToRangeFieldNumber = 3,
    kFromRangeReferenceFieldNumber = 4,
    kToRangeReferenceFieldNumber = 5,
  };
  // optional .TSCE.CFUUIDArchive table_id = 1;
  bool has_table_id() const;
  private:
  bool _internal_has_table_id() const;
  public:
  void clear_table_id();
  const ::TSCE::CFUUIDArchive& table_id() const;
  PROTOBUF_NODISCARD ::TSCE::CFUUIDArchive* release_table_id();
  ::TSCE::CFUUIDArchive* mutable_table_id();
  void set_allocated_table_id(::TSCE::CFUUIDArchive* table_id);
  private:
  const ::TSCE::CFUUIDArchive& _internal_table_id() const;
  ::TSCE::CFUUIDArchive* _internal_mutable_table_id();
  public:
  void unsafe_arena_set_allocated_table_id(
      ::TSCE::CFUUIDArchive* table_id);
  ::TSCE::CFUUIDArchive* unsafe_arena_release_table_id();

  // optional .TSCE.RangeCoordinateArchive from_range = 2;
  bool has_from_range() const;
  private:
  bool _internal_has_from_range() const;
  public:
  void clear_from_range();
  const ::TSCE::RangeCoordinateArchive& from_range() const;
  PROTOBUF_NODISCARD ::TSCE::RangeCoordinateArchive* release_from_range();
  ::TSCE::RangeCoordinateArchive* mutable_from_range();
  void set_allocated_from_range(::TSCE::RangeCoordinateArchive* from_range);
  private:
  const ::TSCE::RangeCoordinateArchive& _internal_from_range() const;
  ::TSCE::RangeCoordinateArchive* _internal_mutable_from_range();
  public:
  void unsafe_arena_set_allocated_from_range(
      ::TSCE::RangeCoordinateArchive* from_range);
  ::TSCE::RangeCoordinateArchive* unsafe_arena_release_from_range();

  // optional .TSCE.RangeCoordinateArchive to_range = 3;
  bool has_to_range() const;
  private:
  bool _internal_has_to_range() const;
  public:
  void clear_to_range();
  const ::TSCE::RangeCoordinateArchive& to_range() const;
  PROTOBUF_NODISCARD ::TSCE::RangeCoordinateArchive* release_to_range();
  ::TSCE::RangeCoordinateArchive* mutable_to_range();
  void set_allocated_to_range(::TSCE::RangeCoordinateArchive* to_range);
  private:
  const ::TSCE::RangeCoordinateArchive& _internal_to_range() const;
  ::TSCE::RangeCoordinateArchive* _internal_mutable_to_range();
  public:
  void unsafe_arena_set_allocated_to_range(
      ::TSCE::RangeCoordinateArchive* to_range);
  ::TSCE::RangeCoordinateArchive* unsafe_arena_release_to_range();

  // optional .TSCE.RangeReferenceArchive from_range_reference = 4;
  bool has_from_range_reference() const;
  private:
  bool _internal_has_from_range_reference() const;
  public:
  void clear_from_range_reference();
  const ::TSCE::RangeReferenceArchive& from_range_reference() const;
  PROTOBUF_NODISCARD ::TSCE::RangeReferenceArchive* release_from_range_reference();
  ::TSCE::RangeReferenceArchive* mutable_from_range_reference();
  void set_allocated_from_range_reference(::TSCE::RangeReferenceArchive* from_range_reference);
  private:
  const ::TSCE::RangeReferenceArchive& _internal_from_range_reference() const;
  ::TSCE::RangeReferenceArchive* _internal_mutable_from_range_reference();
  public:
  void unsafe_arena_set_allocated_from_range_reference(
      ::TSCE::RangeReferenceArchive* from_range_reference);
  ::TSCE::RangeReferenceArchive* unsafe_arena_release_from_range_reference();

  // optional .TSCE.RangeReferenceArchive to_range_reference = 5;
  bool has_to_range_reference() const;
  private:
  bool _internal_has_to_range_reference() const;
  public:
  void clear_to_range_reference();
  const ::TSCE::RangeReferenceArchive& to_range_reference() const;
  PROTOBUF_NODISCARD ::TSCE::RangeReferenceArchive* release_to_range_reference();
  ::TSCE::RangeReferenceArchive* mutable_to_range_reference();
  void set_allocated_to_range_reference(::TSCE::RangeReferenceArchive* to_range_reference);
  private:
  const ::TSCE::RangeReferenceArchive& _internal_to_range_reference() const;
  ::TSCE::RangeReferenceArchive* _internal_mutable_to_range_reference();
  public:
  void unsafe_arena_set_allocated_to_range_reference(
      ::TSCE::RangeReferenceArchive* to_range_reference);
  ::TSCE::RangeReferenceArchive* unsafe_arena_release_to_range_reference();

  // @@protoc_insertion_point(class_scope:TSCE.RangeMovedInfoArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCE::CFUUIDArchive* table_id_;
    ::TSCE::RangeCoordinateArchive* from_range_;
    ::TSCE::RangeCoordinateArchive* to_range_;
    ::TSCE::RangeReferenceArchive* from_range_reference_;
    ::TSCE::RangeReferenceArchive* to_range_reference_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class TableResizedInfoArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.TableResizedInfoArchive) */ {
 public:
  inline TableResizedInfoArchive() : TableResizedInfoArchive(nullptr) {}
  ~TableResizedInfoArchive() override;
  explicit PROTOBUF_CONSTEXPR TableResizedInfoArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableResizedInfoArchive(const TableResizedInfoArchive& from);
  TableResizedInfoArchive(TableResizedInfoArchive&& from) noexcept
    : TableResizedInfoArchive() {
    *this = ::std::move(from);
  }

  inline TableResizedInfoArchive& operator=(const TableResizedInfoArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableResizedInfoArchive& operator=(TableResizedInfoArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableResizedInfoArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableResizedInfoArchive* internal_default_instance() {
    return reinterpret_cast<const TableResizedInfoArchive*>(
               &_TableResizedInfoArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(TableResizedInfoArchive& a, TableResizedInfoArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TableResizedInfoArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableResizedInfoArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableResizedInfoArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableResizedInfoArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableResizedInfoArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TableResizedInfoArchive& from) {
    TableResizedInfoArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableResizedInfoArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.TableResizedInfoArchive";
  }
  protected:
  explicit TableResizedInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableIdFieldNumber = 1,
    kNewTableSizeFieldNumber = 2,
    kOldTableSizeFieldNumber = 3,
  };
  // required .TSCE.CFUUIDArchive table_id = 1;
  bool has_table_id() const;
  private:
  bool _internal_has_table_id() const;
  public:
  void clear_table_id();
  const ::TSCE::CFUUIDArchive& table_id() const;
  PROTOBUF_NODISCARD ::TSCE::CFUUIDArchive* release_table_id();
  ::TSCE::CFUUIDArchive* mutable_table_id();
  void set_allocated_table_id(::TSCE::CFUUIDArchive* table_id);
  private:
  const ::TSCE::CFUUIDArchive& _internal_table_id() const;
  ::TSCE::CFUUIDArchive* _internal_mutable_table_id();
  public:
  void unsafe_arena_set_allocated_table_id(
      ::TSCE::CFUUIDArchive* table_id);
  ::TSCE::CFUUIDArchive* unsafe_arena_release_table_id();

  // required .TSCE.RangeCoordinateArchive new_table_size = 2;
  bool has_new_table_size() const;
  private:
  bool _internal_has_new_table_size() const;
  public:
  void clear_new_table_size();
  const ::TSCE::RangeCoordinateArchive& new_table_size() const;
  PROTOBUF_NODISCARD ::TSCE::RangeCoordinateArchive* release_new_table_size();
  ::TSCE::RangeCoordinateArchive* mutable_new_table_size();
  void set_allocated_new_table_size(::TSCE::RangeCoordinateArchive* new_table_size);
  private:
  const ::TSCE::RangeCoordinateArchive& _internal_new_table_size() const;
  ::TSCE::RangeCoordinateArchive* _internal_mutable_new_table_size();
  public:
  void unsafe_arena_set_allocated_new_table_size(
      ::TSCE::RangeCoordinateArchive* new_table_size);
  ::TSCE::RangeCoordinateArchive* unsafe_arena_release_new_table_size();

  // optional .TSCE.RangeCoordinateArchive old_table_size = 3;
  bool has_old_table_size() const;
  private:
  bool _internal_has_old_table_size() const;
  public:
  void clear_old_table_size();
  const ::TSCE::RangeCoordinateArchive& old_table_size() const;
  PROTOBUF_NODISCARD ::TSCE::RangeCoordinateArchive* release_old_table_size();
  ::TSCE::RangeCoordinateArchive* mutable_old_table_size();
  void set_allocated_old_table_size(::TSCE::RangeCoordinateArchive* old_table_size);
  private:
  const ::TSCE::RangeCoordinateArchive& _internal_old_table_size() const;
  ::TSCE::RangeCoordinateArchive* _internal_mutable_old_table_size();
  public:
  void unsafe_arena_set_allocated_old_table_size(
      ::TSCE::RangeCoordinateArchive* old_table_size);
  ::TSCE::RangeCoordinateArchive* unsafe_arena_release_old_table_size();

  // @@protoc_insertion_point(class_scope:TSCE.TableResizedInfoArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCE::CFUUIDArchive* table_id_;
    ::TSCE::RangeCoordinateArchive* new_table_size_;
    ::TSCE::RangeCoordinateArchive* old_table_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CellMergeInfoArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CellMergeInfoArchive) */ {
 public:
  inline CellMergeInfoArchive() : CellMergeInfoArchive(nullptr) {}
  ~CellMergeInfoArchive() override;
  explicit PROTOBUF_CONSTEXPR CellMergeInfoArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellMergeInfoArchive(const CellMergeInfoArchive& from);
  CellMergeInfoArchive(CellMergeInfoArchive&& from) noexcept
    : CellMergeInfoArchive() {
    *this = ::std::move(from);
  }

  inline CellMergeInfoArchive& operator=(const CellMergeInfoArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellMergeInfoArchive& operator=(CellMergeInfoArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellMergeInfoArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellMergeInfoArchive* internal_default_instance() {
    return reinterpret_cast<const CellMergeInfoArchive*>(
               &_CellMergeInfoArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CellMergeInfoArchive& a, CellMergeInfoArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellMergeInfoArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellMergeInfoArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CellMergeInfoArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CellMergeInfoArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CellMergeInfoArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CellMergeInfoArchive& from) {
    CellMergeInfoArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellMergeInfoArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CellMergeInfoArchive";
  }
  protected:
  explicit CellMergeInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableIdFieldNumber = 1,
    kMergedRangeFieldNumber = 2,
  };
  // required .TSCE.CFUUIDArchive table_id = 1;
  bool has_table_id() const;
  private:
  bool _internal_has_table_id() const;
  public:
  void clear_table_id();
  const ::TSCE::CFUUIDArchive& table_id() const;
  PROTOBUF_NODISCARD ::TSCE::CFUUIDArchive* release_table_id();
  ::TSCE::CFUUIDArchive* mutable_table_id();
  void set_allocated_table_id(::TSCE::CFUUIDArchive* table_id);
  private:
  const ::TSCE::CFUUIDArchive& _internal_table_id() const;
  ::TSCE::CFUUIDArchive* _internal_mutable_table_id();
  public:
  void unsafe_arena_set_allocated_table_id(
      ::TSCE::CFUUIDArchive* table_id);
  ::TSCE::CFUUIDArchive* unsafe_arena_release_table_id();

  // required .TSCE.RangeCoordinateArchive merged_range = 2;
  bool has_merged_range() const;
  private:
  bool _internal_has_merged_range() const;
  public:
  void clear_merged_range();
  const ::TSCE::RangeCoordinateArchive& merged_range() const;
  PROTOBUF_NODISCARD ::TSCE::RangeCoordinateArchive* release_merged_range();
  ::TSCE::RangeCoordinateArchive* mutable_merged_range();
  void set_allocated_merged_range(::TSCE::RangeCoordinateArchive* merged_range);
  private:
  const ::TSCE::RangeCoordinateArchive& _internal_merged_range() const;
  ::TSCE::RangeCoordinateArchive* _internal_mutable_merged_range();
  public:
  void unsafe_arena_set_allocated_merged_range(
      ::TSCE::RangeCoordinateArchive* merged_range);
  ::TSCE::RangeCoordinateArchive* unsafe_arena_release_merged_range();

  // @@protoc_insertion_point(class_scope:TSCE.CellMergeInfoArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCE::CFUUIDArchive* table_id_;
    ::TSCE::RangeCoordinateArchive* merged_range_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class FormulaRewriteSpecArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.FormulaRewriteSpecArchive) */ {
 public:
  inline FormulaRewriteSpecArchive() : FormulaRewriteSpecArchive(nullptr) {}
  ~FormulaRewriteSpecArchive() override;
  explicit PROTOBUF_CONSTEXPR FormulaRewriteSpecArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormulaRewriteSpecArchive(const FormulaRewriteSpecArchive& from);
  FormulaRewriteSpecArchive(FormulaRewriteSpecArchive&& from) noexcept
    : FormulaRewriteSpecArchive() {
    *this = ::std::move(from);
  }

  inline FormulaRewriteSpecArchive& operator=(const FormulaRewriteSpecArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormulaRewriteSpecArchive& operator=(FormulaRewriteSpecArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormulaRewriteSpecArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormulaRewriteSpecArchive* internal_default_instance() {
    return reinterpret_cast<const FormulaRewriteSpecArchive*>(
               &_FormulaRewriteSpecArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(FormulaRewriteSpecArchive& a, FormulaRewriteSpecArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormulaRewriteSpecArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormulaRewriteSpecArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FormulaRewriteSpecArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FormulaRewriteSpecArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FormulaRewriteSpecArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FormulaRewriteSpecArchive& from) {
    FormulaRewriteSpecArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormulaRewriteSpecArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.FormulaRewriteSpecArchive";
  }
  protected:
  explicit FormulaRewriteSpecArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FormulaRewriteSpecArchive_RewriteType RewriteType;
  static constexpr RewriteType TECTONIC_SHIFT =
    FormulaRewriteSpecArchive_RewriteType_TECTONIC_SHIFT;
  static constexpr RewriteType REMAP_WITH_SORT_MAPPING =
    FormulaRewriteSpecArchive_RewriteType_REMAP_WITH_SORT_MAPPING;
  static constexpr RewriteType MOVE_RANGE =
    FormulaRewriteSpecArchive_RewriteType_MOVE_RANGE;
  static constexpr RewriteType DELETE_OWNER =
    FormulaRewriteSpecArchive_RewriteType_DELETE_OWNER;
  static constexpr RewriteType TABLE_RESIZE =
    FormulaRewriteSpecArchive_RewriteType_TABLE_RESIZE;
  static constexpr RewriteType CELL_MERGE =
    FormulaRewriteSpecArchive_RewriteType_CELL_MERGE;
  static inline bool RewriteType_IsValid(int value) {
    return FormulaRewriteSpecArchive_RewriteType_IsValid(value);
  }
  static constexpr RewriteType RewriteType_MIN =
    FormulaRewriteSpecArchive_RewriteType_RewriteType_MIN;
  static constexpr RewriteType RewriteType_MAX =
    FormulaRewriteSpecArchive_RewriteType_RewriteType_MAX;
  static constexpr int RewriteType_ARRAYSIZE =
    FormulaRewriteSpecArchive_RewriteType_RewriteType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RewriteType_descriptor() {
    return FormulaRewriteSpecArchive_RewriteType_descriptor();
  }
  template<typename T>
  static inline const std::string& RewriteType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RewriteType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RewriteType_Name.");
    return FormulaRewriteSpecArchive_RewriteType_Name(enum_t_value);
  }
  static inline bool RewriteType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RewriteType* value) {
    return FormulaRewriteSpecArchive_RewriteType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTectonicShiftFieldNumber = 2,
    kSortMappingFieldNumber = 3,
    kRangeMovedInfoFieldNumber = 4,
    kDeletedOwnerIdFieldNumber = 5,
    kTableResizedInfoFieldNumber = 6,
    kCellMergeInfoFieldNumber = 7,
    kRewriteTypeFieldNumber = 1,
  };
  // optional .TSCE.TectonicShiftArchive tectonic_shift = 2;
  bool has_tectonic_shift() const;
  private:
  bool _internal_has_tectonic_shift() const;
  public:
  void clear_tectonic_shift();
  const ::TSCE::TectonicShiftArchive& tectonic_shift() const;
  PROTOBUF_NODISCARD ::TSCE::TectonicShiftArchive* release_tectonic_shift();
  ::TSCE::TectonicShiftArchive* mutable_tectonic_shift();
  void set_allocated_tectonic_shift(::TSCE::TectonicShiftArchive* tectonic_shift);
  private:
  const ::TSCE::TectonicShiftArchive& _internal_tectonic_shift() const;
  ::TSCE::TectonicShiftArchive* _internal_mutable_tectonic_shift();
  public:
  void unsafe_arena_set_allocated_tectonic_shift(
      ::TSCE::TectonicShiftArchive* tectonic_shift);
  ::TSCE::TectonicShiftArchive* unsafe_arena_release_tectonic_shift();

  // optional .TSCE.RewriteSortMappingArchive sort_mapping = 3;
  bool has_sort_mapping() const;
  private:
  bool _internal_has_sort_mapping() const;
  public:
  void clear_sort_mapping();
  const ::TSCE::RewriteSortMappingArchive& sort_mapping() const;
  PROTOBUF_NODISCARD ::TSCE::RewriteSortMappingArchive* release_sort_mapping();
  ::TSCE::RewriteSortMappingArchive* mutable_sort_mapping();
  void set_allocated_sort_mapping(::TSCE::RewriteSortMappingArchive* sort_mapping);
  private:
  const ::TSCE::RewriteSortMappingArchive& _internal_sort_mapping() const;
  ::TSCE::RewriteSortMappingArchive* _internal_mutable_sort_mapping();
  public:
  void unsafe_arena_set_allocated_sort_mapping(
      ::TSCE::RewriteSortMappingArchive* sort_mapping);
  ::TSCE::RewriteSortMappingArchive* unsafe_arena_release_sort_mapping();

  // optional .TSCE.RangeMovedInfoArchive range_moved_info = 4;
  bool has_range_moved_info() const;
  private:
  bool _internal_has_range_moved_info() const;
  public:
  void clear_range_moved_info();
  const ::TSCE::RangeMovedInfoArchive& range_moved_info() const;
  PROTOBUF_NODISCARD ::TSCE::RangeMovedInfoArchive* release_range_moved_info();
  ::TSCE::RangeMovedInfoArchive* mutable_range_moved_info();
  void set_allocated_range_moved_info(::TSCE::RangeMovedInfoArchive* range_moved_info);
  private:
  const ::TSCE::RangeMovedInfoArchive& _internal_range_moved_info() const;
  ::TSCE::RangeMovedInfoArchive* _internal_mutable_range_moved_info();
  public:
  void unsafe_arena_set_allocated_range_moved_info(
      ::TSCE::RangeMovedInfoArchive* range_moved_info);
  ::TSCE::RangeMovedInfoArchive* unsafe_arena_release_range_moved_info();

  // optional .TSCE.CFUUIDArchive deleted_owner_id = 5;
  bool has_deleted_owner_id() const;
  private:
  bool _internal_has_deleted_owner_id() const;
  public:
  void clear_deleted_owner_id();
  const ::TSCE::CFUUIDArchive& deleted_owner_id() const;
  PROTOBUF_NODISCARD ::TSCE::CFUUIDArchive* release_deleted_owner_id();
  ::TSCE::CFUUIDArchive* mutable_deleted_owner_id();
  void set_allocated_deleted_owner_id(::TSCE::CFUUIDArchive* deleted_owner_id);
  private:
  const ::TSCE::CFUUIDArchive& _internal_deleted_owner_id() const;
  ::TSCE::CFUUIDArchive* _internal_mutable_deleted_owner_id();
  public:
  void unsafe_arena_set_allocated_deleted_owner_id(
      ::TSCE::CFUUIDArchive* deleted_owner_id);
  ::TSCE::CFUUIDArchive* unsafe_arena_release_deleted_owner_id();

  // optional .TSCE.TableResizedInfoArchive table_resized_info = 6;
  bool has_table_resized_info() const;
  private:
  bool _internal_has_table_resized_info() const;
  public:
  void clear_table_resized_info();
  const ::TSCE::TableResizedInfoArchive& table_resized_info() const;
  PROTOBUF_NODISCARD ::TSCE::TableResizedInfoArchive* release_table_resized_info();
  ::TSCE::TableResizedInfoArchive* mutable_table_resized_info();
  void set_allocated_table_resized_info(::TSCE::TableResizedInfoArchive* table_resized_info);
  private:
  const ::TSCE::TableResizedInfoArchive& _internal_table_resized_info() const;
  ::TSCE::TableResizedInfoArchive* _internal_mutable_table_resized_info();
  public:
  void unsafe_arena_set_allocated_table_resized_info(
      ::TSCE::TableResizedInfoArchive* table_resized_info);
  ::TSCE::TableResizedInfoArchive* unsafe_arena_release_table_resized_info();

  // optional .TSCE.CellMergeInfoArchive cell_merge_info = 7;
  bool has_cell_merge_info() const;
  private:
  bool _internal_has_cell_merge_info() const;
  public:
  void clear_cell_merge_info();
  const ::TSCE::CellMergeInfoArchive& cell_merge_info() const;
  PROTOBUF_NODISCARD ::TSCE::CellMergeInfoArchive* release_cell_merge_info();
  ::TSCE::CellMergeInfoArchive* mutable_cell_merge_info();
  void set_allocated_cell_merge_info(::TSCE::CellMergeInfoArchive* cell_merge_info);
  private:
  const ::TSCE::CellMergeInfoArchive& _internal_cell_merge_info() const;
  ::TSCE::CellMergeInfoArchive* _internal_mutable_cell_merge_info();
  public:
  void unsafe_arena_set_allocated_cell_merge_info(
      ::TSCE::CellMergeInfoArchive* cell_merge_info);
  ::TSCE::CellMergeInfoArchive* unsafe_arena_release_cell_merge_info();

  // required .TSCE.FormulaRewriteSpecArchive.RewriteType rewrite_type = 1;
  bool has_rewrite_type() const;
  private:
  bool _internal_has_rewrite_type() const;
  public:
  void clear_rewrite_type();
  ::TSCE::FormulaRewriteSpecArchive_RewriteType rewrite_type() const;
  void set_rewrite_type(::TSCE::FormulaRewriteSpecArchive_RewriteType value);
  private:
  ::TSCE::FormulaRewriteSpecArchive_RewriteType _internal_rewrite_type() const;
  void _internal_set_rewrite_type(::TSCE::FormulaRewriteSpecArchive_RewriteType value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.FormulaRewriteSpecArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCE::TectonicShiftArchive* tectonic_shift_;
    ::TSCE::RewriteSortMappingArchive* sort_mapping_;
    ::TSCE::RangeMovedInfoArchive* range_moved_info_;
    ::TSCE::CFUUIDArchive* deleted_owner_id_;
    ::TSCE::TableResizedInfoArchive* table_resized_info_;
    ::TSCE::CellMergeInfoArchive* cell_merge_info_;
    int rewrite_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CellCoordinateFormulaPairArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CellCoordinateFormulaPairArchive) */ {
 public:
  inline CellCoordinateFormulaPairArchive() : CellCoordinateFormulaPairArchive(nullptr) {}
  ~CellCoordinateFormulaPairArchive() override;
  explicit PROTOBUF_CONSTEXPR CellCoordinateFormulaPairArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellCoordinateFormulaPairArchive(const CellCoordinateFormulaPairArchive& from);
  CellCoordinateFormulaPairArchive(CellCoordinateFormulaPairArchive&& from) noexcept
    : CellCoordinateFormulaPairArchive() {
    *this = ::std::move(from);
  }

  inline CellCoordinateFormulaPairArchive& operator=(const CellCoordinateFormulaPairArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellCoordinateFormulaPairArchive& operator=(CellCoordinateFormulaPairArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellCoordinateFormulaPairArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellCoordinateFormulaPairArchive* internal_default_instance() {
    return reinterpret_cast<const CellCoordinateFormulaPairArchive*>(
               &_CellCoordinateFormulaPairArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CellCoordinateFormulaPairArchive& a, CellCoordinateFormulaPairArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellCoordinateFormulaPairArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellCoordinateFormulaPairArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CellCoordinateFormulaPairArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CellCoordinateFormulaPairArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CellCoordinateFormulaPairArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CellCoordinateFormulaPairArchive& from) {
    CellCoordinateFormulaPairArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellCoordinateFormulaPairArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CellCoordinateFormulaPairArchive";
  }
  protected:
  explicit CellCoordinateFormulaPairArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormulaFieldNumber = 3,
    kColumnFieldNumber = 1,
    kRowFieldNumber = 2,
  };
  // optional .TSCE.FormulaArchive formula = 3;
  bool has_formula() const;
  private:
  bool _internal_has_formula() const;
  public:
  void clear_formula();
  const ::TSCE::FormulaArchive& formula() const;
  PROTOBUF_NODISCARD ::TSCE::FormulaArchive* release_formula();
  ::TSCE::FormulaArchive* mutable_formula();
  void set_allocated_formula(::TSCE::FormulaArchive* formula);
  private:
  const ::TSCE::FormulaArchive& _internal_formula() const;
  ::TSCE::FormulaArchive* _internal_mutable_formula();
  public:
  void unsafe_arena_set_allocated_formula(
      ::TSCE::FormulaArchive* formula);
  ::TSCE::FormulaArchive* unsafe_arena_release_formula();

  // required uint32 column = 1;
  bool has_column() const;
  private:
  bool _internal_has_column() const;
  public:
  void clear_column();
  uint32_t column() const;
  void set_column(uint32_t value);
  private:
  uint32_t _internal_column() const;
  void _internal_set_column(uint32_t value);
  public:

  // required uint32 row = 2;
  bool has_row() const;
  private:
  bool _internal_has_row() const;
  public:
  void clear_row();
  uint32_t row() const;
  void set_row(uint32_t value);
  private:
  uint32_t _internal_row() const;
  void _internal_set_row(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.CellCoordinateFormulaPairArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCE::FormulaArchive* formula_;
    uint32_t column_;
    uint32_t row_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CellCoordinateArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CellCoordinateArchive) */ {
 public:
  inline CellCoordinateArchive() : CellCoordinateArchive(nullptr) {}
  ~CellCoordinateArchive() override;
  explicit PROTOBUF_CONSTEXPR CellCoordinateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellCoordinateArchive(const CellCoordinateArchive& from);
  CellCoordinateArchive(CellCoordinateArchive&& from) noexcept
    : CellCoordinateArchive() {
    *this = ::std::move(from);
  }

  inline CellCoordinateArchive& operator=(const CellCoordinateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellCoordinateArchive& operator=(CellCoordinateArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellCoordinateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellCoordinateArchive* internal_default_instance() {
    return reinterpret_cast<const CellCoordinateArchive*>(
               &_CellCoordinateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CellCoordinateArchive& a, CellCoordinateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellCoordinateArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellCoordinateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CellCoordinateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CellCoordinateArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CellCoordinateArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CellCoordinateArchive& from) {
    CellCoordinateArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellCoordinateArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CellCoordinateArchive";
  }
  protected:
  explicit CellCoordinateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackedDataFieldNumber = 1,
    kColumnFieldNumber = 2,
    kRowFieldNumber = 3,
  };
  // optional fixed32 packedData = 1;
  bool has_packeddata() const;
  private:
  bool _internal_has_packeddata() const;
  public:
  void clear_packeddata();
  uint32_t packeddata() const;
  void set_packeddata(uint32_t value);
  private:
  uint32_t _internal_packeddata() const;
  void _internal_set_packeddata(uint32_t value);
  public:

  // optional uint32 column = 2;
  bool has_column() const;
  private:
  bool _internal_has_column() const;
  public:
  void clear_column();
  uint32_t column() const;
  void set_column(uint32_t value);
  private:
  uint32_t _internal_column() const;
  void _internal_set_column(uint32_t value);
  public:

  // optional uint32 row = 3;
  bool has_row() const;
  private:
  bool _internal_has_row() const;
  public:
  void clear_row();
  uint32_t row() const;
  void set_row(uint32_t value);
  private:
  uint32_t _internal_row() const;
  void _internal_set_row(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.CellCoordinateArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t packeddata_;
    uint32_t column_;
    uint32_t row_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CellCoordinateVectorArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CellCoordinateVectorArchive) */ {
 public:
  inline CellCoordinateVectorArchive() : CellCoordinateVectorArchive(nullptr) {}
  ~CellCoordinateVectorArchive() override;
  explicit PROTOBUF_CONSTEXPR CellCoordinateVectorArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellCoordinateVectorArchive(const CellCoordinateVectorArchive& from);
  CellCoordinateVectorArchive(CellCoordinateVectorArchive&& from) noexcept
    : CellCoordinateVectorArchive() {
    *this = ::std::move(from);
  }

  inline CellCoordinateVectorArchive& operator=(const CellCoordinateVectorArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellCoordinateVectorArchive& operator=(CellCoordinateVectorArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellCoordinateVectorArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellCoordinateVectorArchive* internal_default_instance() {
    return reinterpret_cast<const CellCoordinateVectorArchive*>(
               &_CellCoordinateVectorArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CellCoordinateVectorArchive& a, CellCoordinateVectorArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellCoordinateVectorArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellCoordinateVectorArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CellCoordinateVectorArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CellCoordinateVectorArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CellCoordinateVectorArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CellCoordinateVectorArchive& from) {
    CellCoordinateVectorArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellCoordinateVectorArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CellCoordinateVectorArchive";
  }
  protected:
  explicit CellCoordinateVectorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellCoordinateFieldNumber = 1,
  };
  // repeated .TSCE.CellCoordinateArchive cell_coordinate = 1;
  int cell_coordinate_size() const;
  private:
  int _internal_cell_coordinate_size() const;
  public:
  void clear_cell_coordinate();
  ::TSCE::CellCoordinateArchive* mutable_cell_coordinate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >*
      mutable_cell_coordinate();
  private:
  const ::TSCE::CellCoordinateArchive& _internal_cell_coordinate(int index) const;
  ::TSCE::CellCoordinateArchive* _internal_add_cell_coordinate();
  public:
  const ::TSCE::CellCoordinateArchive& cell_coordinate(int index) const;
  ::TSCE::CellCoordinateArchive* add_cell_coordinate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >&
      cell_coordinate() const;

  // @@protoc_insertion_point(class_scope:TSCE.CellCoordinateVectorArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive > cell_coordinate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CellCoordinateObjectPairArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CellCoordinateObjectPairArchive) */ {
 public:
  inline CellCoordinateObjectPairArchive() : CellCoordinateObjectPairArchive(nullptr) {}
  ~CellCoordinateObjectPairArchive() override;
  explicit PROTOBUF_CONSTEXPR CellCoordinateObjectPairArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellCoordinateObjectPairArchive(const CellCoordinateObjectPairArchive& from);
  CellCoordinateObjectPairArchive(CellCoordinateObjectPairArchive&& from) noexcept
    : CellCoordinateObjectPairArchive() {
    *this = ::std::move(from);
  }

  inline CellCoordinateObjectPairArchive& operator=(const CellCoordinateObjectPairArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellCoordinateObjectPairArchive& operator=(CellCoordinateObjectPairArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellCoordinateObjectPairArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellCoordinateObjectPairArchive* internal_default_instance() {
    return reinterpret_cast<const CellCoordinateObjectPairArchive*>(
               &_CellCoordinateObjectPairArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CellCoordinateObjectPairArchive& a, CellCoordinateObjectPairArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellCoordinateObjectPairArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellCoordinateObjectPairArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CellCoordinateObjectPairArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CellCoordinateObjectPairArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CellCoordinateObjectPairArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CellCoordinateObjectPairArchive& from) {
    CellCoordinateObjectPairArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellCoordinateObjectPairArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CellCoordinateObjectPairArchive";
  }
  protected:
  explicit CellCoordinateObjectPairArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellCoordinateFieldNumber = 1,
    kObjectFieldNumber = 2,
  };
  // required .TSCE.CellCoordinateArchive cell_coordinate = 1;
  bool has_cell_coordinate() const;
  private:
  bool _internal_has_cell_coordinate() const;
  public:
  void clear_cell_coordinate();
  const ::TSCE::CellCoordinateArchive& cell_coordinate() const;
  PROTOBUF_NODISCARD ::TSCE::CellCoordinateArchive* release_cell_coordinate();
  ::TSCE::CellCoordinateArchive* mutable_cell_coordinate();
  void set_allocated_cell_coordinate(::TSCE::CellCoordinateArchive* cell_coordinate);
  private:
  const ::TSCE::CellCoordinateArchive& _internal_cell_coordinate() const;
  ::TSCE::CellCoordinateArchive* _internal_mutable_cell_coordinate();
  public:
  void unsafe_arena_set_allocated_cell_coordinate(
      ::TSCE::CellCoordinateArchive* cell_coordinate);
  ::TSCE::CellCoordinateArchive* unsafe_arena_release_cell_coordinate();

  // required .TSP.Reference object = 2;
  bool has_object() const;
  private:
  bool _internal_has_object() const;
  public:
  void clear_object();
  const ::TSP::Reference& object() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_object();
  ::TSP::Reference* mutable_object();
  void set_allocated_object(::TSP::Reference* object);
  private:
  const ::TSP::Reference& _internal_object() const;
  ::TSP::Reference* _internal_mutable_object();
  public:
  void unsafe_arena_set_allocated_object(
      ::TSP::Reference* object);
  ::TSP::Reference* unsafe_arena_release_object();

  // @@protoc_insertion_point(class_scope:TSCE.CellCoordinateObjectPairArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCE::CellCoordinateArchive* cell_coordinate_;
    ::TSP::Reference* object_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CellCoordinateObjectMapArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CellCoordinateObjectMapArchive) */ {
 public:
  inline CellCoordinateObjectMapArchive() : CellCoordinateObjectMapArchive(nullptr) {}
  ~CellCoordinateObjectMapArchive() override;
  explicit PROTOBUF_CONSTEXPR CellCoordinateObjectMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellCoordinateObjectMapArchive(const CellCoordinateObjectMapArchive& from);
  CellCoordinateObjectMapArchive(CellCoordinateObjectMapArchive&& from) noexcept
    : CellCoordinateObjectMapArchive() {
    *this = ::std::move(from);
  }

  inline CellCoordinateObjectMapArchive& operator=(const CellCoordinateObjectMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellCoordinateObjectMapArchive& operator=(CellCoordinateObjectMapArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellCoordinateObjectMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellCoordinateObjectMapArchive* internal_default_instance() {
    return reinterpret_cast<const CellCoordinateObjectMapArchive*>(
               &_CellCoordinateObjectMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CellCoordinateObjectMapArchive& a, CellCoordinateObjectMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellCoordinateObjectMapArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellCoordinateObjectMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CellCoordinateObjectMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CellCoordinateObjectMapArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CellCoordinateObjectMapArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CellCoordinateObjectMapArchive& from) {
    CellCoordinateObjectMapArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellCoordinateObjectMapArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CellCoordinateObjectMapArchive";
  }
  protected:
  explicit CellCoordinateObjectMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellCoordinateObjectPairFieldNumber = 1,
  };
  // repeated .TSCE.CellCoordinateObjectPairArchive cell_coordinate_object_pair = 1;
  int cell_coordinate_object_pair_size() const;
  private:
  int _internal_cell_coordinate_object_pair_size() const;
  public:
  void clear_cell_coordinate_object_pair();
  ::TSCE::CellCoordinateObjectPairArchive* mutable_cell_coordinate_object_pair(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateObjectPairArchive >*
      mutable_cell_coordinate_object_pair();
  private:
  const ::TSCE::CellCoordinateObjectPairArchive& _internal_cell_coordinate_object_pair(int index) const;
  ::TSCE::CellCoordinateObjectPairArchive* _internal_add_cell_coordinate_object_pair();
  public:
  const ::TSCE::CellCoordinateObjectPairArchive& cell_coordinate_object_pair(int index) const;
  ::TSCE::CellCoordinateObjectPairArchive* add_cell_coordinate_object_pair();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateObjectPairArchive >&
      cell_coordinate_object_pair() const;

  // @@protoc_insertion_point(class_scope:TSCE.CellCoordinateObjectMapArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateObjectPairArchive > cell_coordinate_object_pair_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class OwnerFormulaMapArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.OwnerFormulaMapArchive) */ {
 public:
  inline OwnerFormulaMapArchive() : OwnerFormulaMapArchive(nullptr) {}
  ~OwnerFormulaMapArchive() override;
  explicit PROTOBUF_CONSTEXPR OwnerFormulaMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OwnerFormulaMapArchive(const OwnerFormulaMapArchive& from);
  OwnerFormulaMapArchive(OwnerFormulaMapArchive&& from) noexcept
    : OwnerFormulaMapArchive() {
    *this = ::std::move(from);
  }

  inline OwnerFormulaMapArchive& operator=(const OwnerFormulaMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline OwnerFormulaMapArchive& operator=(OwnerFormulaMapArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OwnerFormulaMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const OwnerFormulaMapArchive* internal_default_instance() {
    return reinterpret_cast<const OwnerFormulaMapArchive*>(
               &_OwnerFormulaMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(OwnerFormulaMapArchive& a, OwnerFormulaMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(OwnerFormulaMapArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OwnerFormulaMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OwnerFormulaMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OwnerFormulaMapArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OwnerFormulaMapArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OwnerFormulaMapArchive& from) {
    OwnerFormulaMapArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OwnerFormulaMapArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.OwnerFormulaMapArchive";
  }
  protected:
  explicit OwnerFormulaMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordinateFormulaPairFieldNumber = 1,
  };
  // repeated .TSCE.CellCoordinateFormulaPairArchive coordinate_formula_pair = 1;
  int coordinate_formula_pair_size() const;
  private:
  int _internal_coordinate_formula_pair_size() const;
  public:
  void clear_coordinate_formula_pair();
  ::TSCE::CellCoordinateFormulaPairArchive* mutable_coordinate_formula_pair(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateFormulaPairArchive >*
      mutable_coordinate_formula_pair();
  private:
  const ::TSCE::CellCoordinateFormulaPairArchive& _internal_coordinate_formula_pair(int index) const;
  ::TSCE::CellCoordinateFormulaPairArchive* _internal_add_coordinate_formula_pair();
  public:
  const ::TSCE::CellCoordinateFormulaPairArchive& coordinate_formula_pair(int index) const;
  ::TSCE::CellCoordinateFormulaPairArchive* add_coordinate_formula_pair();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateFormulaPairArchive >&
      coordinate_formula_pair() const;

  // @@protoc_insertion_point(class_scope:TSCE.OwnerFormulaMapArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateFormulaPairArchive > coordinate_formula_pair_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class FormulaRewriteCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.FormulaRewriteCommandArchive) */ {
 public:
  inline FormulaRewriteCommandArchive() : FormulaRewriteCommandArchive(nullptr) {}
  ~FormulaRewriteCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR FormulaRewriteCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormulaRewriteCommandArchive(const FormulaRewriteCommandArchive& from);
  FormulaRewriteCommandArchive(FormulaRewriteCommandArchive&& from) noexcept
    : FormulaRewriteCommandArchive() {
    *this = ::std::move(from);
  }

  inline FormulaRewriteCommandArchive& operator=(const FormulaRewriteCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormulaRewriteCommandArchive& operator=(FormulaRewriteCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormulaRewriteCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormulaRewriteCommandArchive* internal_default_instance() {
    return reinterpret_cast<const FormulaRewriteCommandArchive*>(
               &_FormulaRewriteCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(FormulaRewriteCommandArchive& a, FormulaRewriteCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormulaRewriteCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormulaRewriteCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FormulaRewriteCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FormulaRewriteCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FormulaRewriteCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FormulaRewriteCommandArchive& from) {
    FormulaRewriteCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormulaRewriteCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.FormulaRewriteCommandArchive";
  }
  protected:
  explicit FormulaRewriteCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableRewriteCommandFieldNumber = 1,
    kSuperFieldNumber = 2,
  };
  // optional .TSP.Reference table_rewrite_command = 1;
  bool has_table_rewrite_command() const;
  private:
  bool _internal_has_table_rewrite_command() const;
  public:
  void clear_table_rewrite_command();
  const ::TSP::Reference& table_rewrite_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_table_rewrite_command();
  ::TSP::Reference* mutable_table_rewrite_command();
  void set_allocated_table_rewrite_command(::TSP::Reference* table_rewrite_command);
  private:
  const ::TSP::Reference& _internal_table_rewrite_command() const;
  ::TSP::Reference* _internal_mutable_table_rewrite_command();
  public:
  void unsafe_arena_set_allocated_table_rewrite_command(
      ::TSP::Reference* table_rewrite_command);
  ::TSP::Reference* unsafe_arena_release_table_rewrite_command();

  // optional .TSK.CommandArchive super = 2;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSCE.FormulaRewriteCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* table_rewrite_command_;
    ::TSK::CommandArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class NumberTrackedReferencePairArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.NumberTrackedReferencePairArchive) */ {
 public:
  inline NumberTrackedReferencePairArchive() : NumberTrackedReferencePairArchive(nullptr) {}
  ~NumberTrackedReferencePairArchive() override;
  explicit PROTOBUF_CONSTEXPR NumberTrackedReferencePairArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NumberTrackedReferencePairArchive(const NumberTrackedReferencePairArchive& from);
  NumberTrackedReferencePairArchive(NumberTrackedReferencePairArchive&& from) noexcept
    : NumberTrackedReferencePairArchive() {
    *this = ::std::move(from);
  }

  inline NumberTrackedReferencePairArchive& operator=(const NumberTrackedReferencePairArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline NumberTrackedReferencePairArchive& operator=(NumberTrackedReferencePairArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NumberTrackedReferencePairArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const NumberTrackedReferencePairArchive* internal_default_instance() {
    return reinterpret_cast<const NumberTrackedReferencePairArchive*>(
               &_NumberTrackedReferencePairArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(NumberTrackedReferencePairArchive& a, NumberTrackedReferencePairArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(NumberTrackedReferencePairArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NumberTrackedReferencePairArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NumberTrackedReferencePairArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NumberTrackedReferencePairArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NumberTrackedReferencePairArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NumberTrackedReferencePairArchive& from) {
    NumberTrackedReferencePairArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NumberTrackedReferencePairArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.NumberTrackedReferencePairArchive";
  }
  protected:
  explicit NumberTrackedReferencePairArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackedReferenceFieldNumber = 2,
    kNumberFieldNumber = 1,
  };
  // optional .TSP.Reference tracked_reference = 2;
  bool has_tracked_reference() const;
  private:
  bool _internal_has_tracked_reference() const;
  public:
  void clear_tracked_reference();
  const ::TSP::Reference& tracked_reference() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_tracked_reference();
  ::TSP::Reference* mutable_tracked_reference();
  void set_allocated_tracked_reference(::TSP::Reference* tracked_reference);
  private:
  const ::TSP::Reference& _internal_tracked_reference() const;
  ::TSP::Reference* _internal_mutable_tracked_reference();
  public:
  void unsafe_arena_set_allocated_tracked_reference(
      ::TSP::Reference* tracked_reference);
  ::TSP::Reference* unsafe_arena_release_tracked_reference();

  // required uint32 number = 1;
  bool has_number() const;
  private:
  bool _internal_has_number() const;
  public:
  void clear_number();
  uint32_t number() const;
  void set_number(uint32_t value);
  private:
  uint32_t _internal_number() const;
  void _internal_set_number(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.NumberTrackedReferencePairArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* tracked_reference_;
    uint32_t number_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class NumberToTrackedReferenceMapArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.NumberToTrackedReferenceMapArchive) */ {
 public:
  inline NumberToTrackedReferenceMapArchive() : NumberToTrackedReferenceMapArchive(nullptr) {}
  ~NumberToTrackedReferenceMapArchive() override;
  explicit PROTOBUF_CONSTEXPR NumberToTrackedReferenceMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NumberToTrackedReferenceMapArchive(const NumberToTrackedReferenceMapArchive& from);
  NumberToTrackedReferenceMapArchive(NumberToTrackedReferenceMapArchive&& from) noexcept
    : NumberToTrackedReferenceMapArchive() {
    *this = ::std::move(from);
  }

  inline NumberToTrackedReferenceMapArchive& operator=(const NumberToTrackedReferenceMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline NumberToTrackedReferenceMapArchive& operator=(NumberToTrackedReferenceMapArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NumberToTrackedReferenceMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const NumberToTrackedReferenceMapArchive* internal_default_instance() {
    return reinterpret_cast<const NumberToTrackedReferenceMapArchive*>(
               &_NumberToTrackedReferenceMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(NumberToTrackedReferenceMapArchive& a, NumberToTrackedReferenceMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(NumberToTrackedReferenceMapArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NumberToTrackedReferenceMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NumberToTrackedReferenceMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NumberToTrackedReferenceMapArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NumberToTrackedReferenceMapArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NumberToTrackedReferenceMapArchive& from) {
    NumberToTrackedReferenceMapArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NumberToTrackedReferenceMapArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.NumberToTrackedReferenceMapArchive";
  }
  protected:
  explicit NumberToTrackedReferenceMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumberTrackedReferencePairFieldNumber = 1,
  };
  // repeated .TSCE.NumberTrackedReferencePairArchive number_tracked_reference_pair = 1;
  int number_tracked_reference_pair_size() const;
  private:
  int _internal_number_tracked_reference_pair_size() const;
  public:
  void clear_number_tracked_reference_pair();
  ::TSCE::NumberTrackedReferencePairArchive* mutable_number_tracked_reference_pair(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::NumberTrackedReferencePairArchive >*
      mutable_number_tracked_reference_pair();
  private:
  const ::TSCE::NumberTrackedReferencePairArchive& _internal_number_tracked_reference_pair(int index) const;
  ::TSCE::NumberTrackedReferencePairArchive* _internal_add_number_tracked_reference_pair();
  public:
  const ::TSCE::NumberTrackedReferencePairArchive& number_tracked_reference_pair(int index) const;
  ::TSCE::NumberTrackedReferencePairArchive* add_number_tracked_reference_pair();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::NumberTrackedReferencePairArchive >&
      number_tracked_reference_pair() const;

  // @@protoc_insertion_point(class_scope:TSCE.NumberToTrackedReferenceMapArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::NumberTrackedReferencePairArchive > number_tracked_reference_pair_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class TrackedReferencesRewriteCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.TrackedReferencesRewriteCommandArchive) */ {
 public:
  inline TrackedReferencesRewriteCommandArchive() : TrackedReferencesRewriteCommandArchive(nullptr) {}
  ~TrackedReferencesRewriteCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR TrackedReferencesRewriteCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackedReferencesRewriteCommandArchive(const TrackedReferencesRewriteCommandArchive& from);
  TrackedReferencesRewriteCommandArchive(TrackedReferencesRewriteCommandArchive&& from) noexcept
    : TrackedReferencesRewriteCommandArchive() {
    *this = ::std::move(from);
  }

  inline TrackedReferencesRewriteCommandArchive& operator=(const TrackedReferencesRewriteCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackedReferencesRewriteCommandArchive& operator=(TrackedReferencesRewriteCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackedReferencesRewriteCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackedReferencesRewriteCommandArchive* internal_default_instance() {
    return reinterpret_cast<const TrackedReferencesRewriteCommandArchive*>(
               &_TrackedReferencesRewriteCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(TrackedReferencesRewriteCommandArchive& a, TrackedReferencesRewriteCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackedReferencesRewriteCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackedReferencesRewriteCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrackedReferencesRewriteCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrackedReferencesRewriteCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrackedReferencesRewriteCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrackedReferencesRewriteCommandArchive& from) {
    TrackedReferencesRewriteCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackedReferencesRewriteCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.TrackedReferencesRewriteCommandArchive";
  }
  protected:
  explicit TrackedReferencesRewriteCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferencesInReferenceTrackerFieldNumber = 1,
    kOriginalTrackedReferenceCopiesFieldNumber = 2,
    kRewriteSpecFieldNumber = 3,
    kReferenceTrackerFieldNumber = 4,
    kSuperFieldNumber = 5,
  };
  // optional .TSCE.NumberToTrackedReferenceMapArchive references_in_reference_tracker = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_references_in_reference_tracker() const;
  private:
  bool _internal_has_references_in_reference_tracker() const;
  public:
  PROTOBUF_DEPRECATED void clear_references_in_reference_tracker();
  PROTOBUF_DEPRECATED const ::TSCE::NumberToTrackedReferenceMapArchive& references_in_reference_tracker() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::TSCE::NumberToTrackedReferenceMapArchive* release_references_in_reference_tracker();
  PROTOBUF_DEPRECATED ::TSCE::NumberToTrackedReferenceMapArchive* mutable_references_in_reference_tracker();
  PROTOBUF_DEPRECATED void set_allocated_references_in_reference_tracker(::TSCE::NumberToTrackedReferenceMapArchive* references_in_reference_tracker);
  private:
  const ::TSCE::NumberToTrackedReferenceMapArchive& _internal_references_in_reference_tracker() const;
  ::TSCE::NumberToTrackedReferenceMapArchive* _internal_mutable_references_in_reference_tracker();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_references_in_reference_tracker(
      ::TSCE::NumberToTrackedReferenceMapArchive* references_in_reference_tracker);
  PROTOBUF_DEPRECATED ::TSCE::NumberToTrackedReferenceMapArchive* unsafe_arena_release_references_in_reference_tracker();

  // optional .TSCE.NumberToTrackedReferenceMapArchive original_tracked_reference_copies = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_original_tracked_reference_copies() const;
  private:
  bool _internal_has_original_tracked_reference_copies() const;
  public:
  PROTOBUF_DEPRECATED void clear_original_tracked_reference_copies();
  PROTOBUF_DEPRECATED const ::TSCE::NumberToTrackedReferenceMapArchive& original_tracked_reference_copies() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::TSCE::NumberToTrackedReferenceMapArchive* release_original_tracked_reference_copies();
  PROTOBUF_DEPRECATED ::TSCE::NumberToTrackedReferenceMapArchive* mutable_original_tracked_reference_copies();
  PROTOBUF_DEPRECATED void set_allocated_original_tracked_reference_copies(::TSCE::NumberToTrackedReferenceMapArchive* original_tracked_reference_copies);
  private:
  const ::TSCE::NumberToTrackedReferenceMapArchive& _internal_original_tracked_reference_copies() const;
  ::TSCE::NumberToTrackedReferenceMapArchive* _internal_mutable_original_tracked_reference_copies();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_original_tracked_reference_copies(
      ::TSCE::NumberToTrackedReferenceMapArchive* original_tracked_reference_copies);
  PROTOBUF_DEPRECATED ::TSCE::NumberToTrackedReferenceMapArchive* unsafe_arena_release_original_tracked_reference_copies();

  // optional .TSCE.FormulaRewriteSpecArchive rewrite_spec = 3;
  bool has_rewrite_spec() const;
  private:
  bool _internal_has_rewrite_spec() const;
  public:
  void clear_rewrite_spec();
  const ::TSCE::FormulaRewriteSpecArchive& rewrite_spec() const;
  PROTOBUF_NODISCARD ::TSCE::FormulaRewriteSpecArchive* release_rewrite_spec();
  ::TSCE::FormulaRewriteSpecArchive* mutable_rewrite_spec();
  void set_allocated_rewrite_spec(::TSCE::FormulaRewriteSpecArchive* rewrite_spec);
  private:
  const ::TSCE::FormulaRewriteSpecArchive& _internal_rewrite_spec() const;
  ::TSCE::FormulaRewriteSpecArchive* _internal_mutable_rewrite_spec();
  public:
  void unsafe_arena_set_allocated_rewrite_spec(
      ::TSCE::FormulaRewriteSpecArchive* rewrite_spec);
  ::TSCE::FormulaRewriteSpecArchive* unsafe_arena_release_rewrite_spec();

  // required .TSP.Reference reference_tracker = 4;
  bool has_reference_tracker() const;
  private:
  bool _internal_has_reference_tracker() const;
  public:
  void clear_reference_tracker();
  const ::TSP::Reference& reference_tracker() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_reference_tracker();
  ::TSP::Reference* mutable_reference_tracker();
  void set_allocated_reference_tracker(::TSP::Reference* reference_tracker);
  private:
  const ::TSP::Reference& _internal_reference_tracker() const;
  ::TSP::Reference* _internal_mutable_reference_tracker();
  public:
  void unsafe_arena_set_allocated_reference_tracker(
      ::TSP::Reference* reference_tracker);
  ::TSP::Reference* unsafe_arena_release_reference_tracker();

  // required .TSK.CommandArchive super = 5;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSCE.TrackedReferencesRewriteCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCE::NumberToTrackedReferenceMapArchive* references_in_reference_tracker_;
    ::TSCE::NumberToTrackedReferenceMapArchive* original_tracked_reference_copies_;
    ::TSCE::FormulaRewriteSpecArchive* rewrite_spec_;
    ::TSP::Reference* reference_tracker_;
    ::TSK::CommandArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class TrackedReferenceArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.TrackedReferenceArchive) */ {
 public:
  inline TrackedReferenceArchive() : TrackedReferenceArchive(nullptr) {}
  ~TrackedReferenceArchive() override;
  explicit PROTOBUF_CONSTEXPR TrackedReferenceArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackedReferenceArchive(const TrackedReferenceArchive& from);
  TrackedReferenceArchive(TrackedReferenceArchive&& from) noexcept
    : TrackedReferenceArchive() {
    *this = ::std::move(from);
  }

  inline TrackedReferenceArchive& operator=(const TrackedReferenceArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackedReferenceArchive& operator=(TrackedReferenceArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackedReferenceArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackedReferenceArchive* internal_default_instance() {
    return reinterpret_cast<const TrackedReferenceArchive*>(
               &_TrackedReferenceArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(TrackedReferenceArchive& a, TrackedReferenceArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackedReferenceArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackedReferenceArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrackedReferenceArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrackedReferenceArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrackedReferenceArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrackedReferenceArchive& from) {
    TrackedReferenceArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackedReferenceArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.TrackedReferenceArchive";
  }
  protected:
  explicit TrackedReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAstFieldNumber = 1,
    kFormulaIdFieldNumber = 2,
  };
  // required .TSCE.ASTNodeArrayArchive ast = 1;
  bool has_ast() const;
  private:
  bool _internal_has_ast() const;
  public:
  void clear_ast();
  const ::TSCE::ASTNodeArrayArchive& ast() const;
  PROTOBUF_NODISCARD ::TSCE::ASTNodeArrayArchive* release_ast();
  ::TSCE::ASTNodeArrayArchive* mutable_ast();
  void set_allocated_ast(::TSCE::ASTNodeArrayArchive* ast);
  private:
  const ::TSCE::ASTNodeArrayArchive& _internal_ast() const;
  ::TSCE::ASTNodeArrayArchive* _internal_mutable_ast();
  public:
  void unsafe_arena_set_allocated_ast(
      ::TSCE::ASTNodeArrayArchive* ast);
  ::TSCE::ASTNodeArrayArchive* unsafe_arena_release_ast();

  // required uint32 formula_id = 2;
  bool has_formula_id() const;
  private:
  bool _internal_has_formula_id() const;
  public:
  void clear_formula_id();
  uint32_t formula_id() const;
  void set_formula_id(uint32_t value);
  private:
  uint32_t _internal_formula_id() const;
  void _internal_set_formula_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.TrackedReferenceArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCE::ASTNodeArrayArchive* ast_;
    uint32_t formula_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ReferenceTrackerArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ReferenceTrackerArchive) */ {
 public:
  inline ReferenceTrackerArchive() : ReferenceTrackerArchive(nullptr) {}
  ~ReferenceTrackerArchive() override;
  explicit PROTOBUF_CONSTEXPR ReferenceTrackerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReferenceTrackerArchive(const ReferenceTrackerArchive& from);
  ReferenceTrackerArchive(ReferenceTrackerArchive&& from) noexcept
    : ReferenceTrackerArchive() {
    *this = ::std::move(from);
  }

  inline ReferenceTrackerArchive& operator=(const ReferenceTrackerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReferenceTrackerArchive& operator=(ReferenceTrackerArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReferenceTrackerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReferenceTrackerArchive* internal_default_instance() {
    return reinterpret_cast<const ReferenceTrackerArchive*>(
               &_ReferenceTrackerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(ReferenceTrackerArchive& a, ReferenceTrackerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ReferenceTrackerArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReferenceTrackerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReferenceTrackerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReferenceTrackerArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReferenceTrackerArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReferenceTrackerArchive& from) {
    ReferenceTrackerArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReferenceTrackerArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ReferenceTrackerArchive";
  }
  protected:
  explicit ReferenceTrackerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackedReferenceFieldNumber = 2,
    kContainedTrackedReferenceFieldNumber = 3,
    kUuidFieldNumber = 1,
  };
  // repeated .TSP.Reference tracked_reference = 2 [deprecated = true];
  PROTOBUF_DEPRECATED int tracked_reference_size() const;
  private:
  int _internal_tracked_reference_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_tracked_reference();
  PROTOBUF_DEPRECATED ::TSP::Reference* mutable_tracked_reference(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_tracked_reference();
  private:
  const ::TSP::Reference& _internal_tracked_reference(int index) const;
  ::TSP::Reference* _internal_add_tracked_reference();
  public:
  PROTOBUF_DEPRECATED const ::TSP::Reference& tracked_reference(int index) const;
  PROTOBUF_DEPRECATED ::TSP::Reference* add_tracked_reference();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      tracked_reference() const;

  // repeated .TSCE.TrackedReferenceArchive contained_tracked_reference = 3;
  int contained_tracked_reference_size() const;
  private:
  int _internal_contained_tracked_reference_size() const;
  public:
  void clear_contained_tracked_reference();
  ::TSCE::TrackedReferenceArchive* mutable_contained_tracked_reference(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::TrackedReferenceArchive >*
      mutable_contained_tracked_reference();
  private:
  const ::TSCE::TrackedReferenceArchive& _internal_contained_tracked_reference(int index) const;
  ::TSCE::TrackedReferenceArchive* _internal_add_contained_tracked_reference();
  public:
  const ::TSCE::TrackedReferenceArchive& contained_tracked_reference(int index) const;
  ::TSCE::TrackedReferenceArchive* add_contained_tracked_reference();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::TrackedReferenceArchive >&
      contained_tracked_reference() const;

  // required .TSCE.CFUUIDArchive uuid = 1;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const ::TSCE::CFUUIDArchive& uuid() const;
  PROTOBUF_NODISCARD ::TSCE::CFUUIDArchive* release_uuid();
  ::TSCE::CFUUIDArchive* mutable_uuid();
  void set_allocated_uuid(::TSCE::CFUUIDArchive* uuid);
  private:
  const ::TSCE::CFUUIDArchive& _internal_uuid() const;
  ::TSCE::CFUUIDArchive* _internal_mutable_uuid();
  public:
  void unsafe_arena_set_allocated_uuid(
      ::TSCE::CFUUIDArchive* uuid);
  ::TSCE::CFUUIDArchive* unsafe_arena_release_uuid();

  // @@protoc_insertion_point(class_scope:TSCE.ReferenceTrackerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > tracked_reference_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::TrackedReferenceArchive > contained_tracked_reference_;
    ::TSCE::CFUUIDArchive* uuid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class BooleanCellValueArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.BooleanCellValueArchive) */ {
 public:
  inline BooleanCellValueArchive() : BooleanCellValueArchive(nullptr) {}
  ~BooleanCellValueArchive() override;
  explicit PROTOBUF_CONSTEXPR BooleanCellValueArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BooleanCellValueArchive(const BooleanCellValueArchive& from);
  BooleanCellValueArchive(BooleanCellValueArchive&& from) noexcept
    : BooleanCellValueArchive() {
    *this = ::std::move(from);
  }

  inline BooleanCellValueArchive& operator=(const BooleanCellValueArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline BooleanCellValueArchive& operator=(BooleanCellValueArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BooleanCellValueArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const BooleanCellValueArchive* internal_default_instance() {
    return reinterpret_cast<const BooleanCellValueArchive*>(
               &_BooleanCellValueArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(BooleanCellValueArchive& a, BooleanCellValueArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(BooleanCellValueArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BooleanCellValueArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BooleanCellValueArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BooleanCellValueArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BooleanCellValueArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BooleanCellValueArchive& from) {
    BooleanCellValueArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BooleanCellValueArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.BooleanCellValueArchive";
  }
  protected:
  explicit BooleanCellValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // required bool value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.BooleanCellValueArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class DateCellValueArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.DateCellValueArchive) */ {
 public:
  inline DateCellValueArchive() : DateCellValueArchive(nullptr) {}
  ~DateCellValueArchive() override;
  explicit PROTOBUF_CONSTEXPR DateCellValueArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DateCellValueArchive(const DateCellValueArchive& from);
  DateCellValueArchive(DateCellValueArchive&& from) noexcept
    : DateCellValueArchive() {
    *this = ::std::move(from);
  }

  inline DateCellValueArchive& operator=(const DateCellValueArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DateCellValueArchive& operator=(DateCellValueArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DateCellValueArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DateCellValueArchive* internal_default_instance() {
    return reinterpret_cast<const DateCellValueArchive*>(
               &_DateCellValueArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(DateCellValueArchive& a, DateCellValueArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DateCellValueArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DateCellValueArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DateCellValueArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DateCellValueArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DateCellValueArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DateCellValueArchive& from) {
    DateCellValueArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateCellValueArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.DateCellValueArchive";
  }
  protected:
  explicit DateCellValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormatFieldNumber = 2,
    kValueFieldNumber = 1,
    kFormatIsImplicitFieldNumber = 3,
  };
  // required .TSK.FormatStructArchive format = 2;
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  const ::TSK::FormatStructArchive& format() const;
  PROTOBUF_NODISCARD ::TSK::FormatStructArchive* release_format();
  ::TSK::FormatStructArchive* mutable_format();
  void set_allocated_format(::TSK::FormatStructArchive* format);
  private:
  const ::TSK::FormatStructArchive& _internal_format() const;
  ::TSK::FormatStructArchive* _internal_mutable_format();
  public:
  void unsafe_arena_set_allocated_format(
      ::TSK::FormatStructArchive* format);
  ::TSK::FormatStructArchive* unsafe_arena_release_format();

  // required double value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // optional bool format_is_implicit = 3 [default = true];
  bool has_format_is_implicit() const;
  private:
  bool _internal_has_format_is_implicit() const;
  public:
  void clear_format_is_implicit();
  bool format_is_implicit() const;
  void set_format_is_implicit(bool value);
  private:
  bool _internal_format_is_implicit() const;
  void _internal_set_format_is_implicit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.DateCellValueArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::FormatStructArchive* format_;
    double value_;
    bool format_is_implicit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class NumberCellValueArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.NumberCellValueArchive) */ {
 public:
  inline NumberCellValueArchive() : NumberCellValueArchive(nullptr) {}
  ~NumberCellValueArchive() override;
  explicit PROTOBUF_CONSTEXPR NumberCellValueArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NumberCellValueArchive(const NumberCellValueArchive& from);
  NumberCellValueArchive(NumberCellValueArchive&& from) noexcept
    : NumberCellValueArchive() {
    *this = ::std::move(from);
  }

  inline NumberCellValueArchive& operator=(const NumberCellValueArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline NumberCellValueArchive& operator=(NumberCellValueArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NumberCellValueArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const NumberCellValueArchive* internal_default_instance() {
    return reinterpret_cast<const NumberCellValueArchive*>(
               &_NumberCellValueArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(NumberCellValueArchive& a, NumberCellValueArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(NumberCellValueArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NumberCellValueArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NumberCellValueArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NumberCellValueArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NumberCellValueArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NumberCellValueArchive& from) {
    NumberCellValueArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NumberCellValueArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.NumberCellValueArchive";
  }
  protected:
  explicit NumberCellValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormatFieldNumber = 3,
    kValueFieldNumber = 1,
    kUnitFieldNumber = 2,
    kFormatIsImplicitFieldNumber = 4,
  };
  // required .TSK.FormatStructArchive format = 3;
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  const ::TSK::FormatStructArchive& format() const;
  PROTOBUF_NODISCARD ::TSK::FormatStructArchive* release_format();
  ::TSK::FormatStructArchive* mutable_format();
  void set_allocated_format(::TSK::FormatStructArchive* format);
  private:
  const ::TSK::FormatStructArchive& _internal_format() const;
  ::TSK::FormatStructArchive* _internal_mutable_format();
  public:
  void unsafe_arena_set_allocated_format(
      ::TSK::FormatStructArchive* format);
  ::TSK::FormatStructArchive* unsafe_arena_release_format();

  // required double value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // required int32 unit = 2;
  bool has_unit() const;
  private:
  bool _internal_has_unit() const;
  public:
  void clear_unit();
  int32_t unit() const;
  void set_unit(int32_t value);
  private:
  int32_t _internal_unit() const;
  void _internal_set_unit(int32_t value);
  public:

  // optional bool format_is_implicit = 4 [default = true];
  bool has_format_is_implicit() const;
  private:
  bool _internal_has_format_is_implicit() const;
  public:
  void clear_format_is_implicit();
  bool format_is_implicit() const;
  void set_format_is_implicit(bool value);
  private:
  bool _internal_format_is_implicit() const;
  void _internal_set_format_is_implicit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.NumberCellValueArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::FormatStructArchive* format_;
    double value_;
    int32_t unit_;
    bool format_is_implicit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class StringCellValueArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.StringCellValueArchive) */ {
 public:
  inline StringCellValueArchive() : StringCellValueArchive(nullptr) {}
  ~StringCellValueArchive() override;
  explicit PROTOBUF_CONSTEXPR StringCellValueArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringCellValueArchive(const StringCellValueArchive& from);
  StringCellValueArchive(StringCellValueArchive&& from) noexcept
    : StringCellValueArchive() {
    *this = ::std::move(from);
  }

  inline StringCellValueArchive& operator=(const StringCellValueArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringCellValueArchive& operator=(StringCellValueArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringCellValueArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringCellValueArchive* internal_default_instance() {
    return reinterpret_cast<const StringCellValueArchive*>(
               &_StringCellValueArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(StringCellValueArchive& a, StringCellValueArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StringCellValueArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringCellValueArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringCellValueArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringCellValueArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringCellValueArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringCellValueArchive& from) {
    StringCellValueArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringCellValueArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.StringCellValueArchive";
  }
  protected:
  explicit StringCellValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kFormatFieldNumber = 2,
    kFormatIsImplicitFieldNumber = 3,
  };
  // required string value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // required .TSK.FormatStructArchive format = 2;
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  const ::TSK::FormatStructArchive& format() const;
  PROTOBUF_NODISCARD ::TSK::FormatStructArchive* release_format();
  ::TSK::FormatStructArchive* mutable_format();
  void set_allocated_format(::TSK::FormatStructArchive* format);
  private:
  const ::TSK::FormatStructArchive& _internal_format() const;
  ::TSK::FormatStructArchive* _internal_mutable_format();
  public:
  void unsafe_arena_set_allocated_format(
      ::TSK::FormatStructArchive* format);
  ::TSK::FormatStructArchive* unsafe_arena_release_format();

  // optional bool format_is_implicit = 3 [default = true];
  bool has_format_is_implicit() const;
  private:
  bool _internal_has_format_is_implicit() const;
  public:
  void clear_format_is_implicit();
  bool format_is_implicit() const;
  void set_format_is_implicit(bool value);
  private:
  bool _internal_format_is_implicit() const;
  void _internal_set_format_is_implicit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.StringCellValueArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::TSK::FormatStructArchive* format_;
    bool format_is_implicit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CellValueArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CellValueArchive) */ {
 public:
  inline CellValueArchive() : CellValueArchive(nullptr) {}
  ~CellValueArchive() override;
  explicit PROTOBUF_CONSTEXPR CellValueArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellValueArchive(const CellValueArchive& from);
  CellValueArchive(CellValueArchive&& from) noexcept
    : CellValueArchive() {
    *this = ::std::move(from);
  }

  inline CellValueArchive& operator=(const CellValueArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellValueArchive& operator=(CellValueArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellValueArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellValueArchive* internal_default_instance() {
    return reinterpret_cast<const CellValueArchive*>(
               &_CellValueArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(CellValueArchive& a, CellValueArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellValueArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellValueArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CellValueArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CellValueArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CellValueArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CellValueArchive& from) {
    CellValueArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellValueArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CellValueArchive";
  }
  protected:
  explicit CellValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CellValueArchive_CellValueType CellValueType;
  static constexpr CellValueType NIL_TYPE =
    CellValueArchive_CellValueType_NIL_TYPE;
  static constexpr CellValueType BOOLEAN_TYPE =
    CellValueArchive_CellValueType_BOOLEAN_TYPE;
  static constexpr CellValueType DATE_TYPE =
    CellValueArchive_CellValueType_DATE_TYPE;
  static constexpr CellValueType NUMBER_TYPE =
    CellValueArchive_CellValueType_NUMBER_TYPE;
  static constexpr CellValueType STRING_TYPE =
    CellValueArchive_CellValueType_STRING_TYPE;
  static inline bool CellValueType_IsValid(int value) {
    return CellValueArchive_CellValueType_IsValid(value);
  }
  static constexpr CellValueType CellValueType_MIN =
    CellValueArchive_CellValueType_CellValueType_MIN;
  static constexpr CellValueType CellValueType_MAX =
    CellValueArchive_CellValueType_CellValueType_MAX;
  static constexpr int CellValueType_ARRAYSIZE =
    CellValueArchive_CellValueType_CellValueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CellValueType_descriptor() {
    return CellValueArchive_CellValueType_descriptor();
  }
  template<typename T>
  static inline const std::string& CellValueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CellValueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CellValueType_Name.");
    return CellValueArchive_CellValueType_Name(enum_t_value);
  }
  static inline bool CellValueType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CellValueType* value) {
    return CellValueArchive_CellValueType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBooleanValueFieldNumber = 2,
    kDateValueFieldNumber = 3,
    kNumberValueFieldNumber = 4,
    kStringValueFieldNumber = 5,
    kCellValueTypeFieldNumber = 1,
  };
  // optional .TSCE.BooleanCellValueArchive boolean_value = 2;
  bool has_boolean_value() const;
  private:
  bool _internal_has_boolean_value() const;
  public:
  void clear_boolean_value();
  const ::TSCE::BooleanCellValueArchive& boolean_value() const;
  PROTOBUF_NODISCARD ::TSCE::BooleanCellValueArchive* release_boolean_value();
  ::TSCE::BooleanCellValueArchive* mutable_boolean_value();
  void set_allocated_boolean_value(::TSCE::BooleanCellValueArchive* boolean_value);
  private:
  const ::TSCE::BooleanCellValueArchive& _internal_boolean_value() const;
  ::TSCE::BooleanCellValueArchive* _internal_mutable_boolean_value();
  public:
  void unsafe_arena_set_allocated_boolean_value(
      ::TSCE::BooleanCellValueArchive* boolean_value);
  ::TSCE::BooleanCellValueArchive* unsafe_arena_release_boolean_value();

  // optional .TSCE.DateCellValueArchive date_value = 3;
  bool has_date_value() const;
  private:
  bool _internal_has_date_value() const;
  public:
  void clear_date_value();
  const ::TSCE::DateCellValueArchive& date_value() const;
  PROTOBUF_NODISCARD ::TSCE::DateCellValueArchive* release_date_value();
  ::TSCE::DateCellValueArchive* mutable_date_value();
  void set_allocated_date_value(::TSCE::DateCellValueArchive* date_value);
  private:
  const ::TSCE::DateCellValueArchive& _internal_date_value() const;
  ::TSCE::DateCellValueArchive* _internal_mutable_date_value();
  public:
  void unsafe_arena_set_allocated_date_value(
      ::TSCE::DateCellValueArchive* date_value);
  ::TSCE::DateCellValueArchive* unsafe_arena_release_date_value();

  // optional .TSCE.NumberCellValueArchive number_value = 4;
  bool has_number_value() const;
  private:
  bool _internal_has_number_value() const;
  public:
  void clear_number_value();
  const ::TSCE::NumberCellValueArchive& number_value() const;
  PROTOBUF_NODISCARD ::TSCE::NumberCellValueArchive* release_number_value();
  ::TSCE::NumberCellValueArchive* mutable_number_value();
  void set_allocated_number_value(::TSCE::NumberCellValueArchive* number_value);
  private:
  const ::TSCE::NumberCellValueArchive& _internal_number_value() const;
  ::TSCE::NumberCellValueArchive* _internal_mutable_number_value();
  public:
  void unsafe_arena_set_allocated_number_value(
      ::TSCE::NumberCellValueArchive* number_value);
  ::TSCE::NumberCellValueArchive* unsafe_arena_release_number_value();

  // optional .TSCE.StringCellValueArchive string_value = 5;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const ::TSCE::StringCellValueArchive& string_value() const;
  PROTOBUF_NODISCARD ::TSCE::StringCellValueArchive* release_string_value();
  ::TSCE::StringCellValueArchive* mutable_string_value();
  void set_allocated_string_value(::TSCE::StringCellValueArchive* string_value);
  private:
  const ::TSCE::StringCellValueArchive& _internal_string_value() const;
  ::TSCE::StringCellValueArchive* _internal_mutable_string_value();
  public:
  void unsafe_arena_set_allocated_string_value(
      ::TSCE::StringCellValueArchive* string_value);
  ::TSCE::StringCellValueArchive* unsafe_arena_release_string_value();

  // required .TSCE.CellValueArchive.CellValueType cell_value_type = 1;
  bool has_cell_value_type() const;
  private:
  bool _internal_has_cell_value_type() const;
  public:
  void clear_cell_value_type();
  ::TSCE::CellValueArchive_CellValueType cell_value_type() const;
  void set_cell_value_type(::TSCE::CellValueArchive_CellValueType value);
  private:
  ::TSCE::CellValueArchive_CellValueType _internal_cell_value_type() const;
  void _internal_set_cell_value_type(::TSCE::CellValueArchive_CellValueType value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.CellValueArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCE::BooleanCellValueArchive* boolean_value_;
    ::TSCE::DateCellValueArchive* date_value_;
    ::TSCE::NumberCellValueArchive* number_value_;
    ::TSCE::StringCellValueArchive* string_value_;
    int cell_value_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CFUUIDArchive

// optional bytes uuid_bytes = 1;
inline bool CFUUIDArchive::_internal_has_uuid_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CFUUIDArchive::has_uuid_bytes() const {
  return _internal_has_uuid_bytes();
}
inline void CFUUIDArchive::clear_uuid_bytes() {
  _impl_.uuid_bytes_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CFUUIDArchive::uuid_bytes() const {
  // @@protoc_insertion_point(field_get:TSCE.CFUUIDArchive.uuid_bytes)
  return _internal_uuid_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CFUUIDArchive::set_uuid_bytes(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.uuid_bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCE.CFUUIDArchive.uuid_bytes)
}
inline std::string* CFUUIDArchive::mutable_uuid_bytes() {
  std::string* _s = _internal_mutable_uuid_bytes();
  // @@protoc_insertion_point(field_mutable:TSCE.CFUUIDArchive.uuid_bytes)
  return _s;
}
inline const std::string& CFUUIDArchive::_internal_uuid_bytes() const {
  return _impl_.uuid_bytes_.Get();
}
inline void CFUUIDArchive::_internal_set_uuid_bytes(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.uuid_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* CFUUIDArchive::_internal_mutable_uuid_bytes() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.uuid_bytes_.Mutable(GetArenaForAllocation());
}
inline std::string* CFUUIDArchive::release_uuid_bytes() {
  // @@protoc_insertion_point(field_release:TSCE.CFUUIDArchive.uuid_bytes)
  if (!_internal_has_uuid_bytes()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.uuid_bytes_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_bytes_.IsDefault()) {
    _impl_.uuid_bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CFUUIDArchive::set_allocated_uuid_bytes(std::string* uuid_bytes) {
  if (uuid_bytes != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.uuid_bytes_.SetAllocated(uuid_bytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_bytes_.IsDefault()) {
    _impl_.uuid_bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCE.CFUUIDArchive.uuid_bytes)
}

// optional uint32 uuid_w0 = 2;
inline bool CFUUIDArchive::_internal_has_uuid_w0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CFUUIDArchive::has_uuid_w0() const {
  return _internal_has_uuid_w0();
}
inline void CFUUIDArchive::clear_uuid_w0() {
  _impl_.uuid_w0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CFUUIDArchive::_internal_uuid_w0() const {
  return _impl_.uuid_w0_;
}
inline uint32_t CFUUIDArchive::uuid_w0() const {
  // @@protoc_insertion_point(field_get:TSCE.CFUUIDArchive.uuid_w0)
  return _internal_uuid_w0();
}
inline void CFUUIDArchive::_internal_set_uuid_w0(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.uuid_w0_ = value;
}
inline void CFUUIDArchive::set_uuid_w0(uint32_t value) {
  _internal_set_uuid_w0(value);
  // @@protoc_insertion_point(field_set:TSCE.CFUUIDArchive.uuid_w0)
}

// optional uint32 uuid_w1 = 3;
inline bool CFUUIDArchive::_internal_has_uuid_w1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CFUUIDArchive::has_uuid_w1() const {
  return _internal_has_uuid_w1();
}
inline void CFUUIDArchive::clear_uuid_w1() {
  _impl_.uuid_w1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CFUUIDArchive::_internal_uuid_w1() const {
  return _impl_.uuid_w1_;
}
inline uint32_t CFUUIDArchive::uuid_w1() const {
  // @@protoc_insertion_point(field_get:TSCE.CFUUIDArchive.uuid_w1)
  return _internal_uuid_w1();
}
inline void CFUUIDArchive::_internal_set_uuid_w1(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.uuid_w1_ = value;
}
inline void CFUUIDArchive::set_uuid_w1(uint32_t value) {
  _internal_set_uuid_w1(value);
  // @@protoc_insertion_point(field_set:TSCE.CFUUIDArchive.uuid_w1)
}

// optional uint32 uuid_w2 = 4;
inline bool CFUUIDArchive::_internal_has_uuid_w2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CFUUIDArchive::has_uuid_w2() const {
  return _internal_has_uuid_w2();
}
inline void CFUUIDArchive::clear_uuid_w2() {
  _impl_.uuid_w2_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CFUUIDArchive::_internal_uuid_w2() const {
  return _impl_.uuid_w2_;
}
inline uint32_t CFUUIDArchive::uuid_w2() const {
  // @@protoc_insertion_point(field_get:TSCE.CFUUIDArchive.uuid_w2)
  return _internal_uuid_w2();
}
inline void CFUUIDArchive::_internal_set_uuid_w2(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.uuid_w2_ = value;
}
inline void CFUUIDArchive::set_uuid_w2(uint32_t value) {
  _internal_set_uuid_w2(value);
  // @@protoc_insertion_point(field_set:TSCE.CFUUIDArchive.uuid_w2)
}

// optional uint32 uuid_w3 = 5;
inline bool CFUUIDArchive::_internal_has_uuid_w3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CFUUIDArchive::has_uuid_w3() const {
  return _internal_has_uuid_w3();
}
inline void CFUUIDArchive::clear_uuid_w3() {
  _impl_.uuid_w3_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CFUUIDArchive::_internal_uuid_w3() const {
  return _impl_.uuid_w3_;
}
inline uint32_t CFUUIDArchive::uuid_w3() const {
  // @@protoc_insertion_point(field_get:TSCE.CFUUIDArchive.uuid_w3)
  return _internal_uuid_w3();
}
inline void CFUUIDArchive::_internal_set_uuid_w3(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.uuid_w3_ = value;
}
inline void CFUUIDArchive::set_uuid_w3(uint32_t value) {
  _internal_set_uuid_w3(value);
  // @@protoc_insertion_point(field_set:TSCE.CFUUIDArchive.uuid_w3)
}

// -------------------------------------------------------------------

// CellReferenceArchive

// required uint32 column = 1;
inline bool CellReferenceArchive::_internal_has_column() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CellReferenceArchive::has_column() const {
  return _internal_has_column();
}
inline void CellReferenceArchive::clear_column() {
  _impl_.column_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CellReferenceArchive::_internal_column() const {
  return _impl_.column_;
}
inline uint32_t CellReferenceArchive::column() const {
  // @@protoc_insertion_point(field_get:TSCE.CellReferenceArchive.column)
  return _internal_column();
}
inline void CellReferenceArchive::_internal_set_column(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.column_ = value;
}
inline void CellReferenceArchive::set_column(uint32_t value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:TSCE.CellReferenceArchive.column)
}

// required uint32 row = 2;
inline bool CellReferenceArchive::_internal_has_row() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CellReferenceArchive::has_row() const {
  return _internal_has_row();
}
inline void CellReferenceArchive::clear_row() {
  _impl_.row_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CellReferenceArchive::_internal_row() const {
  return _impl_.row_;
}
inline uint32_t CellReferenceArchive::row() const {
  // @@protoc_insertion_point(field_get:TSCE.CellReferenceArchive.row)
  return _internal_row();
}
inline void CellReferenceArchive::_internal_set_row(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.row_ = value;
}
inline void CellReferenceArchive::set_row(uint32_t value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:TSCE.CellReferenceArchive.row)
}

// required .TSCE.CFUUIDArchive table_id = 3;
inline bool CellReferenceArchive::_internal_has_table_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.table_id_ != nullptr);
  return value;
}
inline bool CellReferenceArchive::has_table_id() const {
  return _internal_has_table_id();
}
inline void CellReferenceArchive::clear_table_id() {
  if (_impl_.table_id_ != nullptr) _impl_.table_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::CFUUIDArchive& CellReferenceArchive::_internal_table_id() const {
  const ::TSCE::CFUUIDArchive* p = _impl_.table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CFUUIDArchive&>(
      ::TSCE::_CFUUIDArchive_default_instance_);
}
inline const ::TSCE::CFUUIDArchive& CellReferenceArchive::table_id() const {
  // @@protoc_insertion_point(field_get:TSCE.CellReferenceArchive.table_id)
  return _internal_table_id();
}
inline void CellReferenceArchive::unsafe_arena_set_allocated_table_id(
    ::TSCE::CFUUIDArchive* table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_id_);
  }
  _impl_.table_id_ = table_id;
  if (table_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CellReferenceArchive.table_id)
}
inline ::TSCE::CFUUIDArchive* CellReferenceArchive::release_table_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::CFUUIDArchive* temp = _impl_.table_id_;
  _impl_.table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CFUUIDArchive* CellReferenceArchive::unsafe_arena_release_table_id() {
  // @@protoc_insertion_point(field_release:TSCE.CellReferenceArchive.table_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::CFUUIDArchive* temp = _impl_.table_id_;
  _impl_.table_id_ = nullptr;
  return temp;
}
inline ::TSCE::CFUUIDArchive* CellReferenceArchive::_internal_mutable_table_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CFUUIDArchive>(GetArenaForAllocation());
    _impl_.table_id_ = p;
  }
  return _impl_.table_id_;
}
inline ::TSCE::CFUUIDArchive* CellReferenceArchive::mutable_table_id() {
  ::TSCE::CFUUIDArchive* _msg = _internal_mutable_table_id();
  // @@protoc_insertion_point(field_mutable:TSCE.CellReferenceArchive.table_id)
  return _msg;
}
inline void CellReferenceArchive::set_allocated_table_id(::TSCE::CFUUIDArchive* table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.table_id_;
  }
  if (table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(table_id);
    if (message_arena != submessage_arena) {
      table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.table_id_ = table_id;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CellReferenceArchive.table_id)
}

// -------------------------------------------------------------------

// InternalCellReferenceArchive

// required .TSCE.CellCoordinateArchive coordinate = 1;
inline bool InternalCellReferenceArchive::_internal_has_coordinate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.coordinate_ != nullptr);
  return value;
}
inline bool InternalCellReferenceArchive::has_coordinate() const {
  return _internal_has_coordinate();
}
inline void InternalCellReferenceArchive::clear_coordinate() {
  if (_impl_.coordinate_ != nullptr) _impl_.coordinate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::CellCoordinateArchive& InternalCellReferenceArchive::_internal_coordinate() const {
  const ::TSCE::CellCoordinateArchive* p = _impl_.coordinate_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordinateArchive&>(
      ::TSCE::_CellCoordinateArchive_default_instance_);
}
inline const ::TSCE::CellCoordinateArchive& InternalCellReferenceArchive::coordinate() const {
  // @@protoc_insertion_point(field_get:TSCE.InternalCellReferenceArchive.coordinate)
  return _internal_coordinate();
}
inline void InternalCellReferenceArchive::unsafe_arena_set_allocated_coordinate(
    ::TSCE::CellCoordinateArchive* coordinate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coordinate_);
  }
  _impl_.coordinate_ = coordinate;
  if (coordinate) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.InternalCellReferenceArchive.coordinate)
}
inline ::TSCE::CellCoordinateArchive* InternalCellReferenceArchive::release_coordinate() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellCoordinateArchive* temp = _impl_.coordinate_;
  _impl_.coordinate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CellCoordinateArchive* InternalCellReferenceArchive::unsafe_arena_release_coordinate() {
  // @@protoc_insertion_point(field_release:TSCE.InternalCellReferenceArchive.coordinate)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellCoordinateArchive* temp = _impl_.coordinate_;
  _impl_.coordinate_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordinateArchive* InternalCellReferenceArchive::_internal_mutable_coordinate() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.coordinate_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordinateArchive>(GetArenaForAllocation());
    _impl_.coordinate_ = p;
  }
  return _impl_.coordinate_;
}
inline ::TSCE::CellCoordinateArchive* InternalCellReferenceArchive::mutable_coordinate() {
  ::TSCE::CellCoordinateArchive* _msg = _internal_mutable_coordinate();
  // @@protoc_insertion_point(field_mutable:TSCE.InternalCellReferenceArchive.coordinate)
  return _msg;
}
inline void InternalCellReferenceArchive::set_allocated_coordinate(::TSCE::CellCoordinateArchive* coordinate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.coordinate_;
  }
  if (coordinate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(coordinate);
    if (message_arena != submessage_arena) {
      coordinate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinate, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.coordinate_ = coordinate;
  // @@protoc_insertion_point(field_set_allocated:TSCE.InternalCellReferenceArchive.coordinate)
}

// required uint32 owner_id = 2;
inline bool InternalCellReferenceArchive::_internal_has_owner_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InternalCellReferenceArchive::has_owner_id() const {
  return _internal_has_owner_id();
}
inline void InternalCellReferenceArchive::clear_owner_id() {
  _impl_.owner_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t InternalCellReferenceArchive::_internal_owner_id() const {
  return _impl_.owner_id_;
}
inline uint32_t InternalCellReferenceArchive::owner_id() const {
  // @@protoc_insertion_point(field_get:TSCE.InternalCellReferenceArchive.owner_id)
  return _internal_owner_id();
}
inline void InternalCellReferenceArchive::_internal_set_owner_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.owner_id_ = value;
}
inline void InternalCellReferenceArchive::set_owner_id(uint32_t value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:TSCE.InternalCellReferenceArchive.owner_id)
}

// -------------------------------------------------------------------

// RangeReferenceArchive

// required .TSCE.CFUUIDArchive table_id = 1;
inline bool RangeReferenceArchive::_internal_has_table_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.table_id_ != nullptr);
  return value;
}
inline bool RangeReferenceArchive::has_table_id() const {
  return _internal_has_table_id();
}
inline void RangeReferenceArchive::clear_table_id() {
  if (_impl_.table_id_ != nullptr) _impl_.table_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::CFUUIDArchive& RangeReferenceArchive::_internal_table_id() const {
  const ::TSCE::CFUUIDArchive* p = _impl_.table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CFUUIDArchive&>(
      ::TSCE::_CFUUIDArchive_default_instance_);
}
inline const ::TSCE::CFUUIDArchive& RangeReferenceArchive::table_id() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeReferenceArchive.table_id)
  return _internal_table_id();
}
inline void RangeReferenceArchive::unsafe_arena_set_allocated_table_id(
    ::TSCE::CFUUIDArchive* table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_id_);
  }
  _impl_.table_id_ = table_id;
  if (table_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RangeReferenceArchive.table_id)
}
inline ::TSCE::CFUUIDArchive* RangeReferenceArchive::release_table_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::CFUUIDArchive* temp = _impl_.table_id_;
  _impl_.table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CFUUIDArchive* RangeReferenceArchive::unsafe_arena_release_table_id() {
  // @@protoc_insertion_point(field_release:TSCE.RangeReferenceArchive.table_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::CFUUIDArchive* temp = _impl_.table_id_;
  _impl_.table_id_ = nullptr;
  return temp;
}
inline ::TSCE::CFUUIDArchive* RangeReferenceArchive::_internal_mutable_table_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CFUUIDArchive>(GetArenaForAllocation());
    _impl_.table_id_ = p;
  }
  return _impl_.table_id_;
}
inline ::TSCE::CFUUIDArchive* RangeReferenceArchive::mutable_table_id() {
  ::TSCE::CFUUIDArchive* _msg = _internal_mutable_table_id();
  // @@protoc_insertion_point(field_mutable:TSCE.RangeReferenceArchive.table_id)
  return _msg;
}
inline void RangeReferenceArchive::set_allocated_table_id(::TSCE::CFUUIDArchive* table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.table_id_;
  }
  if (table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(table_id);
    if (message_arena != submessage_arena) {
      table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.table_id_ = table_id;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RangeReferenceArchive.table_id)
}

// required uint32 top_left_column = 2;
inline bool RangeReferenceArchive::_internal_has_top_left_column() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RangeReferenceArchive::has_top_left_column() const {
  return _internal_has_top_left_column();
}
inline void RangeReferenceArchive::clear_top_left_column() {
  _impl_.top_left_column_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t RangeReferenceArchive::_internal_top_left_column() const {
  return _impl_.top_left_column_;
}
inline uint32_t RangeReferenceArchive::top_left_column() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeReferenceArchive.top_left_column)
  return _internal_top_left_column();
}
inline void RangeReferenceArchive::_internal_set_top_left_column(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.top_left_column_ = value;
}
inline void RangeReferenceArchive::set_top_left_column(uint32_t value) {
  _internal_set_top_left_column(value);
  // @@protoc_insertion_point(field_set:TSCE.RangeReferenceArchive.top_left_column)
}

// required uint32 top_left_row = 3;
inline bool RangeReferenceArchive::_internal_has_top_left_row() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RangeReferenceArchive::has_top_left_row() const {
  return _internal_has_top_left_row();
}
inline void RangeReferenceArchive::clear_top_left_row() {
  _impl_.top_left_row_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t RangeReferenceArchive::_internal_top_left_row() const {
  return _impl_.top_left_row_;
}
inline uint32_t RangeReferenceArchive::top_left_row() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeReferenceArchive.top_left_row)
  return _internal_top_left_row();
}
inline void RangeReferenceArchive::_internal_set_top_left_row(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.top_left_row_ = value;
}
inline void RangeReferenceArchive::set_top_left_row(uint32_t value) {
  _internal_set_top_left_row(value);
  // @@protoc_insertion_point(field_set:TSCE.RangeReferenceArchive.top_left_row)
}

// required uint32 bottom_right_column = 4;
inline bool RangeReferenceArchive::_internal_has_bottom_right_column() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RangeReferenceArchive::has_bottom_right_column() const {
  return _internal_has_bottom_right_column();
}
inline void RangeReferenceArchive::clear_bottom_right_column() {
  _impl_.bottom_right_column_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t RangeReferenceArchive::_internal_bottom_right_column() const {
  return _impl_.bottom_right_column_;
}
inline uint32_t RangeReferenceArchive::bottom_right_column() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeReferenceArchive.bottom_right_column)
  return _internal_bottom_right_column();
}
inline void RangeReferenceArchive::_internal_set_bottom_right_column(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.bottom_right_column_ = value;
}
inline void RangeReferenceArchive::set_bottom_right_column(uint32_t value) {
  _internal_set_bottom_right_column(value);
  // @@protoc_insertion_point(field_set:TSCE.RangeReferenceArchive.bottom_right_column)
}

// required uint32 bottom_right_row = 5;
inline bool RangeReferenceArchive::_internal_has_bottom_right_row() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RangeReferenceArchive::has_bottom_right_row() const {
  return _internal_has_bottom_right_row();
}
inline void RangeReferenceArchive::clear_bottom_right_row() {
  _impl_.bottom_right_row_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t RangeReferenceArchive::_internal_bottom_right_row() const {
  return _impl_.bottom_right_row_;
}
inline uint32_t RangeReferenceArchive::bottom_right_row() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeReferenceArchive.bottom_right_row)
  return _internal_bottom_right_row();
}
inline void RangeReferenceArchive::_internal_set_bottom_right_row(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.bottom_right_row_ = value;
}
inline void RangeReferenceArchive::set_bottom_right_row(uint32_t value) {
  _internal_set_bottom_right_row(value);
  // @@protoc_insertion_point(field_set:TSCE.RangeReferenceArchive.bottom_right_row)
}

// -------------------------------------------------------------------

// InternalRangeReferenceArchive

// required uint32 owner_id = 1;
inline bool InternalRangeReferenceArchive::_internal_has_owner_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InternalRangeReferenceArchive::has_owner_id() const {
  return _internal_has_owner_id();
}
inline void InternalRangeReferenceArchive::clear_owner_id() {
  _impl_.owner_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t InternalRangeReferenceArchive::_internal_owner_id() const {
  return _impl_.owner_id_;
}
inline uint32_t InternalRangeReferenceArchive::owner_id() const {
  // @@protoc_insertion_point(field_get:TSCE.InternalRangeReferenceArchive.owner_id)
  return _internal_owner_id();
}
inline void InternalRangeReferenceArchive::_internal_set_owner_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.owner_id_ = value;
}
inline void InternalRangeReferenceArchive::set_owner_id(uint32_t value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:TSCE.InternalRangeReferenceArchive.owner_id)
}

// required .TSCE.RangeCoordinateArchive range = 2;
inline bool InternalRangeReferenceArchive::_internal_has_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.range_ != nullptr);
  return value;
}
inline bool InternalRangeReferenceArchive::has_range() const {
  return _internal_has_range();
}
inline void InternalRangeReferenceArchive::clear_range() {
  if (_impl_.range_ != nullptr) _impl_.range_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::RangeCoordinateArchive& InternalRangeReferenceArchive::_internal_range() const {
  const ::TSCE::RangeCoordinateArchive* p = _impl_.range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeCoordinateArchive&>(
      ::TSCE::_RangeCoordinateArchive_default_instance_);
}
inline const ::TSCE::RangeCoordinateArchive& InternalRangeReferenceArchive::range() const {
  // @@protoc_insertion_point(field_get:TSCE.InternalRangeReferenceArchive.range)
  return _internal_range();
}
inline void InternalRangeReferenceArchive::unsafe_arena_set_allocated_range(
    ::TSCE::RangeCoordinateArchive* range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.range_);
  }
  _impl_.range_ = range;
  if (range) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.InternalRangeReferenceArchive.range)
}
inline ::TSCE::RangeCoordinateArchive* InternalRangeReferenceArchive::release_range() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::RangeCoordinateArchive* temp = _impl_.range_;
  _impl_.range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* InternalRangeReferenceArchive::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_release:TSCE.InternalRangeReferenceArchive.range)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::RangeCoordinateArchive* temp = _impl_.range_;
  _impl_.range_ = nullptr;
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* InternalRangeReferenceArchive::_internal_mutable_range() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeCoordinateArchive>(GetArenaForAllocation());
    _impl_.range_ = p;
  }
  return _impl_.range_;
}
inline ::TSCE::RangeCoordinateArchive* InternalRangeReferenceArchive::mutable_range() {
  ::TSCE::RangeCoordinateArchive* _msg = _internal_mutable_range();
  // @@protoc_insertion_point(field_mutable:TSCE.InternalRangeReferenceArchive.range)
  return _msg;
}
inline void InternalRangeReferenceArchive::set_allocated_range(::TSCE::RangeCoordinateArchive* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.range_;
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(range);
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.range_ = range;
  // @@protoc_insertion_point(field_set_allocated:TSCE.InternalRangeReferenceArchive.range)
}

// -------------------------------------------------------------------

// ReferenceArchive

// required .TSCE.ReferenceArchive.ReferenceType reference_type = 1;
inline bool ReferenceArchive::_internal_has_reference_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReferenceArchive::has_reference_type() const {
  return _internal_has_reference_type();
}
inline void ReferenceArchive::clear_reference_type() {
  _impl_.reference_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::TSCE::ReferenceArchive_ReferenceType ReferenceArchive::_internal_reference_type() const {
  return static_cast< ::TSCE::ReferenceArchive_ReferenceType >(_impl_.reference_type_);
}
inline ::TSCE::ReferenceArchive_ReferenceType ReferenceArchive::reference_type() const {
  // @@protoc_insertion_point(field_get:TSCE.ReferenceArchive.reference_type)
  return _internal_reference_type();
}
inline void ReferenceArchive::_internal_set_reference_type(::TSCE::ReferenceArchive_ReferenceType value) {
  assert(::TSCE::ReferenceArchive_ReferenceType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.reference_type_ = value;
}
inline void ReferenceArchive::set_reference_type(::TSCE::ReferenceArchive_ReferenceType value) {
  _internal_set_reference_type(value);
  // @@protoc_insertion_point(field_set:TSCE.ReferenceArchive.reference_type)
}

// optional .TSCE.CellReferenceArchive cell_reference = 2;
inline bool ReferenceArchive::_internal_has_cell_reference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_reference_ != nullptr);
  return value;
}
inline bool ReferenceArchive::has_cell_reference() const {
  return _internal_has_cell_reference();
}
inline void ReferenceArchive::clear_cell_reference() {
  if (_impl_.cell_reference_ != nullptr) _impl_.cell_reference_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::CellReferenceArchive& ReferenceArchive::_internal_cell_reference() const {
  const ::TSCE::CellReferenceArchive* p = _impl_.cell_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellReferenceArchive&>(
      ::TSCE::_CellReferenceArchive_default_instance_);
}
inline const ::TSCE::CellReferenceArchive& ReferenceArchive::cell_reference() const {
  // @@protoc_insertion_point(field_get:TSCE.ReferenceArchive.cell_reference)
  return _internal_cell_reference();
}
inline void ReferenceArchive::unsafe_arena_set_allocated_cell_reference(
    ::TSCE::CellReferenceArchive* cell_reference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_reference_);
  }
  _impl_.cell_reference_ = cell_reference;
  if (cell_reference) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ReferenceArchive.cell_reference)
}
inline ::TSCE::CellReferenceArchive* ReferenceArchive::release_cell_reference() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellReferenceArchive* temp = _impl_.cell_reference_;
  _impl_.cell_reference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CellReferenceArchive* ReferenceArchive::unsafe_arena_release_cell_reference() {
  // @@protoc_insertion_point(field_release:TSCE.ReferenceArchive.cell_reference)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellReferenceArchive* temp = _impl_.cell_reference_;
  _impl_.cell_reference_ = nullptr;
  return temp;
}
inline ::TSCE::CellReferenceArchive* ReferenceArchive::_internal_mutable_cell_reference() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.cell_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellReferenceArchive>(GetArenaForAllocation());
    _impl_.cell_reference_ = p;
  }
  return _impl_.cell_reference_;
}
inline ::TSCE::CellReferenceArchive* ReferenceArchive::mutable_cell_reference() {
  ::TSCE::CellReferenceArchive* _msg = _internal_mutable_cell_reference();
  // @@protoc_insertion_point(field_mutable:TSCE.ReferenceArchive.cell_reference)
  return _msg;
}
inline void ReferenceArchive::set_allocated_cell_reference(::TSCE::CellReferenceArchive* cell_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cell_reference_;
  }
  if (cell_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cell_reference);
    if (message_arena != submessage_arena) {
      cell_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_reference, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cell_reference_ = cell_reference;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ReferenceArchive.cell_reference)
}

// optional .TSCE.RangeReferenceArchive range_reference = 3;
inline bool ReferenceArchive::_internal_has_range_reference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.range_reference_ != nullptr);
  return value;
}
inline bool ReferenceArchive::has_range_reference() const {
  return _internal_has_range_reference();
}
inline void ReferenceArchive::clear_range_reference() {
  if (_impl_.range_reference_ != nullptr) _impl_.range_reference_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::RangeReferenceArchive& ReferenceArchive::_internal_range_reference() const {
  const ::TSCE::RangeReferenceArchive* p = _impl_.range_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeReferenceArchive&>(
      ::TSCE::_RangeReferenceArchive_default_instance_);
}
inline const ::TSCE::RangeReferenceArchive& ReferenceArchive::range_reference() const {
  // @@protoc_insertion_point(field_get:TSCE.ReferenceArchive.range_reference)
  return _internal_range_reference();
}
inline void ReferenceArchive::unsafe_arena_set_allocated_range_reference(
    ::TSCE::RangeReferenceArchive* range_reference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.range_reference_);
  }
  _impl_.range_reference_ = range_reference;
  if (range_reference) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ReferenceArchive.range_reference)
}
inline ::TSCE::RangeReferenceArchive* ReferenceArchive::release_range_reference() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::RangeReferenceArchive* temp = _impl_.range_reference_;
  _impl_.range_reference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RangeReferenceArchive* ReferenceArchive::unsafe_arena_release_range_reference() {
  // @@protoc_insertion_point(field_release:TSCE.ReferenceArchive.range_reference)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::RangeReferenceArchive* temp = _impl_.range_reference_;
  _impl_.range_reference_ = nullptr;
  return temp;
}
inline ::TSCE::RangeReferenceArchive* ReferenceArchive::_internal_mutable_range_reference() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.range_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeReferenceArchive>(GetArenaForAllocation());
    _impl_.range_reference_ = p;
  }
  return _impl_.range_reference_;
}
inline ::TSCE::RangeReferenceArchive* ReferenceArchive::mutable_range_reference() {
  ::TSCE::RangeReferenceArchive* _msg = _internal_mutable_range_reference();
  // @@protoc_insertion_point(field_mutable:TSCE.ReferenceArchive.range_reference)
  return _msg;
}
inline void ReferenceArchive::set_allocated_range_reference(::TSCE::RangeReferenceArchive* range_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.range_reference_;
  }
  if (range_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(range_reference);
    if (message_arena != submessage_arena) {
      range_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range_reference, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.range_reference_ = range_reference;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ReferenceArchive.range_reference)
}

// -------------------------------------------------------------------

// EdgeArchive

// required uint32 column = 1;
inline bool EdgeArchive::_internal_has_column() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EdgeArchive::has_column() const {
  return _internal_has_column();
}
inline void EdgeArchive::clear_column() {
  _impl_.column_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t EdgeArchive::_internal_column() const {
  return _impl_.column_;
}
inline uint32_t EdgeArchive::column() const {
  // @@protoc_insertion_point(field_get:TSCE.EdgeArchive.column)
  return _internal_column();
}
inline void EdgeArchive::_internal_set_column(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.column_ = value;
}
inline void EdgeArchive::set_column(uint32_t value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:TSCE.EdgeArchive.column)
}

// required uint32 row = 2;
inline bool EdgeArchive::_internal_has_row() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EdgeArchive::has_row() const {
  return _internal_has_row();
}
inline void EdgeArchive::clear_row() {
  _impl_.row_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t EdgeArchive::_internal_row() const {
  return _impl_.row_;
}
inline uint32_t EdgeArchive::row() const {
  // @@protoc_insertion_point(field_get:TSCE.EdgeArchive.row)
  return _internal_row();
}
inline void EdgeArchive::_internal_set_row(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.row_ = value;
}
inline void EdgeArchive::set_row(uint32_t value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:TSCE.EdgeArchive.row)
}

// required bool is_precedent = 3;
inline bool EdgeArchive::_internal_has_is_precedent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EdgeArchive::has_is_precedent() const {
  return _internal_has_is_precedent();
}
inline void EdgeArchive::clear_is_precedent() {
  _impl_.is_precedent_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool EdgeArchive::_internal_is_precedent() const {
  return _impl_.is_precedent_;
}
inline bool EdgeArchive::is_precedent() const {
  // @@protoc_insertion_point(field_get:TSCE.EdgeArchive.is_precedent)
  return _internal_is_precedent();
}
inline void EdgeArchive::_internal_set_is_precedent(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.is_precedent_ = value;
}
inline void EdgeArchive::set_is_precedent(bool value) {
  _internal_set_is_precedent(value);
  // @@protoc_insertion_point(field_set:TSCE.EdgeArchive.is_precedent)
}

// optional .TSCE.CFUUIDArchive owner_id = 4;
inline bool EdgeArchive::_internal_has_owner_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.owner_id_ != nullptr);
  return value;
}
inline bool EdgeArchive::has_owner_id() const {
  return _internal_has_owner_id();
}
inline void EdgeArchive::clear_owner_id() {
  if (_impl_.owner_id_ != nullptr) _impl_.owner_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::CFUUIDArchive& EdgeArchive::_internal_owner_id() const {
  const ::TSCE::CFUUIDArchive* p = _impl_.owner_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CFUUIDArchive&>(
      ::TSCE::_CFUUIDArchive_default_instance_);
}
inline const ::TSCE::CFUUIDArchive& EdgeArchive::owner_id() const {
  // @@protoc_insertion_point(field_get:TSCE.EdgeArchive.owner_id)
  return _internal_owner_id();
}
inline void EdgeArchive::unsafe_arena_set_allocated_owner_id(
    ::TSCE::CFUUIDArchive* owner_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.owner_id_);
  }
  _impl_.owner_id_ = owner_id;
  if (owner_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.EdgeArchive.owner_id)
}
inline ::TSCE::CFUUIDArchive* EdgeArchive::release_owner_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::CFUUIDArchive* temp = _impl_.owner_id_;
  _impl_.owner_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CFUUIDArchive* EdgeArchive::unsafe_arena_release_owner_id() {
  // @@protoc_insertion_point(field_release:TSCE.EdgeArchive.owner_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::CFUUIDArchive* temp = _impl_.owner_id_;
  _impl_.owner_id_ = nullptr;
  return temp;
}
inline ::TSCE::CFUUIDArchive* EdgeArchive::_internal_mutable_owner_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.owner_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CFUUIDArchive>(GetArenaForAllocation());
    _impl_.owner_id_ = p;
  }
  return _impl_.owner_id_;
}
inline ::TSCE::CFUUIDArchive* EdgeArchive::mutable_owner_id() {
  ::TSCE::CFUUIDArchive* _msg = _internal_mutable_owner_id();
  // @@protoc_insertion_point(field_mutable:TSCE.EdgeArchive.owner_id)
  return _msg;
}
inline void EdgeArchive::set_allocated_owner_id(::TSCE::CFUUIDArchive* owner_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.owner_id_;
  }
  if (owner_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(owner_id);
    if (message_arena != submessage_arena) {
      owner_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.owner_id_ = owner_id;
  // @@protoc_insertion_point(field_set_allocated:TSCE.EdgeArchive.owner_id)
}

// -------------------------------------------------------------------

// EdgesArchive

// repeated uint32 packed_edge_without_owner = 9;
inline int EdgesArchive::_internal_packed_edge_without_owner_size() const {
  return _impl_.packed_edge_without_owner_.size();
}
inline int EdgesArchive::packed_edge_without_owner_size() const {
  return _internal_packed_edge_without_owner_size();
}
inline void EdgesArchive::clear_packed_edge_without_owner() {
  _impl_.packed_edge_without_owner_.Clear();
}
inline uint32_t EdgesArchive::_internal_packed_edge_without_owner(int index) const {
  return _impl_.packed_edge_without_owner_.Get(index);
}
inline uint32_t EdgesArchive::packed_edge_without_owner(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.EdgesArchive.packed_edge_without_owner)
  return _internal_packed_edge_without_owner(index);
}
inline void EdgesArchive::set_packed_edge_without_owner(int index, uint32_t value) {
  _impl_.packed_edge_without_owner_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.EdgesArchive.packed_edge_without_owner)
}
inline void EdgesArchive::_internal_add_packed_edge_without_owner(uint32_t value) {
  _impl_.packed_edge_without_owner_.Add(value);
}
inline void EdgesArchive::add_packed_edge_without_owner(uint32_t value) {
  _internal_add_packed_edge_without_owner(value);
  // @@protoc_insertion_point(field_add:TSCE.EdgesArchive.packed_edge_without_owner)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
EdgesArchive::_internal_packed_edge_without_owner() const {
  return _impl_.packed_edge_without_owner_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
EdgesArchive::packed_edge_without_owner() const {
  // @@protoc_insertion_point(field_list:TSCE.EdgesArchive.packed_edge_without_owner)
  return _internal_packed_edge_without_owner();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
EdgesArchive::_internal_mutable_packed_edge_without_owner() {
  return &_impl_.packed_edge_without_owner_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
EdgesArchive::mutable_packed_edge_without_owner() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.EdgesArchive.packed_edge_without_owner)
  return _internal_mutable_packed_edge_without_owner();
}

// repeated uint32 packed_edge_with_owner = 10;
inline int EdgesArchive::_internal_packed_edge_with_owner_size() const {
  return _impl_.packed_edge_with_owner_.size();
}
inline int EdgesArchive::packed_edge_with_owner_size() const {
  return _internal_packed_edge_with_owner_size();
}
inline void EdgesArchive::clear_packed_edge_with_owner() {
  _impl_.packed_edge_with_owner_.Clear();
}
inline uint32_t EdgesArchive::_internal_packed_edge_with_owner(int index) const {
  return _impl_.packed_edge_with_owner_.Get(index);
}
inline uint32_t EdgesArchive::packed_edge_with_owner(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.EdgesArchive.packed_edge_with_owner)
  return _internal_packed_edge_with_owner(index);
}
inline void EdgesArchive::set_packed_edge_with_owner(int index, uint32_t value) {
  _impl_.packed_edge_with_owner_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.EdgesArchive.packed_edge_with_owner)
}
inline void EdgesArchive::_internal_add_packed_edge_with_owner(uint32_t value) {
  _impl_.packed_edge_with_owner_.Add(value);
}
inline void EdgesArchive::add_packed_edge_with_owner(uint32_t value) {
  _internal_add_packed_edge_with_owner(value);
  // @@protoc_insertion_point(field_add:TSCE.EdgesArchive.packed_edge_with_owner)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
EdgesArchive::_internal_packed_edge_with_owner() const {
  return _impl_.packed_edge_with_owner_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
EdgesArchive::packed_edge_with_owner() const {
  // @@protoc_insertion_point(field_list:TSCE.EdgesArchive.packed_edge_with_owner)
  return _internal_packed_edge_with_owner();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
EdgesArchive::_internal_mutable_packed_edge_with_owner() {
  return &_impl_.packed_edge_with_owner_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
EdgesArchive::mutable_packed_edge_with_owner() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.EdgesArchive.packed_edge_with_owner)
  return _internal_mutable_packed_edge_with_owner();
}

// repeated .TSCE.CFUUIDArchive owner_id_for_edge = 11;
inline int EdgesArchive::_internal_owner_id_for_edge_size() const {
  return _impl_.owner_id_for_edge_.size();
}
inline int EdgesArchive::owner_id_for_edge_size() const {
  return _internal_owner_id_for_edge_size();
}
inline void EdgesArchive::clear_owner_id_for_edge() {
  _impl_.owner_id_for_edge_.Clear();
}
inline ::TSCE::CFUUIDArchive* EdgesArchive::mutable_owner_id_for_edge(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.EdgesArchive.owner_id_for_edge)
  return _impl_.owner_id_for_edge_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CFUUIDArchive >*
EdgesArchive::mutable_owner_id_for_edge() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.EdgesArchive.owner_id_for_edge)
  return &_impl_.owner_id_for_edge_;
}
inline const ::TSCE::CFUUIDArchive& EdgesArchive::_internal_owner_id_for_edge(int index) const {
  return _impl_.owner_id_for_edge_.Get(index);
}
inline const ::TSCE::CFUUIDArchive& EdgesArchive::owner_id_for_edge(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.EdgesArchive.owner_id_for_edge)
  return _internal_owner_id_for_edge(index);
}
inline ::TSCE::CFUUIDArchive* EdgesArchive::_internal_add_owner_id_for_edge() {
  return _impl_.owner_id_for_edge_.Add();
}
inline ::TSCE::CFUUIDArchive* EdgesArchive::add_owner_id_for_edge() {
  ::TSCE::CFUUIDArchive* _add = _internal_add_owner_id_for_edge();
  // @@protoc_insertion_point(field_add:TSCE.EdgesArchive.owner_id_for_edge)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CFUUIDArchive >&
EdgesArchive::owner_id_for_edge() const {
  // @@protoc_insertion_point(field_list:TSCE.EdgesArchive.owner_id_for_edge)
  return _impl_.owner_id_for_edge_;
}

// repeated uint32 internal_owner_id_for_edge = 12;
inline int EdgesArchive::_internal_internal_owner_id_for_edge_size() const {
  return _impl_.internal_owner_id_for_edge_.size();
}
inline int EdgesArchive::internal_owner_id_for_edge_size() const {
  return _internal_internal_owner_id_for_edge_size();
}
inline void EdgesArchive::clear_internal_owner_id_for_edge() {
  _impl_.internal_owner_id_for_edge_.Clear();
}
inline uint32_t EdgesArchive::_internal_internal_owner_id_for_edge(int index) const {
  return _impl_.internal_owner_id_for_edge_.Get(index);
}
inline uint32_t EdgesArchive::internal_owner_id_for_edge(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.EdgesArchive.internal_owner_id_for_edge)
  return _internal_internal_owner_id_for_edge(index);
}
inline void EdgesArchive::set_internal_owner_id_for_edge(int index, uint32_t value) {
  _impl_.internal_owner_id_for_edge_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.EdgesArchive.internal_owner_id_for_edge)
}
inline void EdgesArchive::_internal_add_internal_owner_id_for_edge(uint32_t value) {
  _impl_.internal_owner_id_for_edge_.Add(value);
}
inline void EdgesArchive::add_internal_owner_id_for_edge(uint32_t value) {
  _internal_add_internal_owner_id_for_edge(value);
  // @@protoc_insertion_point(field_add:TSCE.EdgesArchive.internal_owner_id_for_edge)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
EdgesArchive::_internal_internal_owner_id_for_edge() const {
  return _impl_.internal_owner_id_for_edge_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
EdgesArchive::internal_owner_id_for_edge() const {
  // @@protoc_insertion_point(field_list:TSCE.EdgesArchive.internal_owner_id_for_edge)
  return _internal_internal_owner_id_for_edge();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
EdgesArchive::_internal_mutable_internal_owner_id_for_edge() {
  return &_impl_.internal_owner_id_for_edge_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
EdgesArchive::mutable_internal_owner_id_for_edge() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.EdgesArchive.internal_owner_id_for_edge)
  return _internal_mutable_internal_owner_id_for_edge();
}

// -------------------------------------------------------------------

// CellRecordArchive

// required uint32 column = 1;
inline bool CellRecordArchive::_internal_has_column() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CellRecordArchive::has_column() const {
  return _internal_has_column();
}
inline void CellRecordArchive::clear_column() {
  _impl_.column_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CellRecordArchive::_internal_column() const {
  return _impl_.column_;
}
inline uint32_t CellRecordArchive::column() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRecordArchive.column)
  return _internal_column();
}
inline void CellRecordArchive::_internal_set_column(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.column_ = value;
}
inline void CellRecordArchive::set_column(uint32_t value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:TSCE.CellRecordArchive.column)
}

// required uint32 row = 2;
inline bool CellRecordArchive::_internal_has_row() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CellRecordArchive::has_row() const {
  return _internal_has_row();
}
inline void CellRecordArchive::clear_row() {
  _impl_.row_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CellRecordArchive::_internal_row() const {
  return _impl_.row_;
}
inline uint32_t CellRecordArchive::row() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRecordArchive.row)
  return _internal_row();
}
inline void CellRecordArchive::_internal_set_row(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.row_ = value;
}
inline void CellRecordArchive::set_row(uint32_t value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:TSCE.CellRecordArchive.row)
}

// optional uint32 dirty_self_plus_precedents_count = 3 [default = 0];
inline bool CellRecordArchive::_internal_has_dirty_self_plus_precedents_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CellRecordArchive::has_dirty_self_plus_precedents_count() const {
  return _internal_has_dirty_self_plus_precedents_count();
}
inline void CellRecordArchive::clear_dirty_self_plus_precedents_count() {
  _impl_.dirty_self_plus_precedents_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CellRecordArchive::_internal_dirty_self_plus_precedents_count() const {
  return _impl_.dirty_self_plus_precedents_count_;
}
inline uint32_t CellRecordArchive::dirty_self_plus_precedents_count() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRecordArchive.dirty_self_plus_precedents_count)
  return _internal_dirty_self_plus_precedents_count();
}
inline void CellRecordArchive::_internal_set_dirty_self_plus_precedents_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.dirty_self_plus_precedents_count_ = value;
}
inline void CellRecordArchive::set_dirty_self_plus_precedents_count(uint32_t value) {
  _internal_set_dirty_self_plus_precedents_count(value);
  // @@protoc_insertion_point(field_set:TSCE.CellRecordArchive.dirty_self_plus_precedents_count)
}

// optional bool is_in_a_cycle = 4 [default = false];
inline bool CellRecordArchive::_internal_has_is_in_a_cycle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CellRecordArchive::has_is_in_a_cycle() const {
  return _internal_has_is_in_a_cycle();
}
inline void CellRecordArchive::clear_is_in_a_cycle() {
  _impl_.is_in_a_cycle_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CellRecordArchive::_internal_is_in_a_cycle() const {
  return _impl_.is_in_a_cycle_;
}
inline bool CellRecordArchive::is_in_a_cycle() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRecordArchive.is_in_a_cycle)
  return _internal_is_in_a_cycle();
}
inline void CellRecordArchive::_internal_set_is_in_a_cycle(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.is_in_a_cycle_ = value;
}
inline void CellRecordArchive::set_is_in_a_cycle(bool value) {
  _internal_set_is_in_a_cycle(value);
  // @@protoc_insertion_point(field_set:TSCE.CellRecordArchive.is_in_a_cycle)
}

// repeated .TSCE.EdgeArchive edge = 5 [deprecated = true];
inline int CellRecordArchive::_internal_edge_size() const {
  return _impl_.edge_.size();
}
inline int CellRecordArchive::edge_size() const {
  return _internal_edge_size();
}
inline void CellRecordArchive::clear_edge() {
  _impl_.edge_.Clear();
}
inline ::TSCE::EdgeArchive* CellRecordArchive::mutable_edge(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.CellRecordArchive.edge)
  return _impl_.edge_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::EdgeArchive >*
CellRecordArchive::mutable_edge() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.CellRecordArchive.edge)
  return &_impl_.edge_;
}
inline const ::TSCE::EdgeArchive& CellRecordArchive::_internal_edge(int index) const {
  return _impl_.edge_.Get(index);
}
inline const ::TSCE::EdgeArchive& CellRecordArchive::edge(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.CellRecordArchive.edge)
  return _internal_edge(index);
}
inline ::TSCE::EdgeArchive* CellRecordArchive::_internal_add_edge() {
  return _impl_.edge_.Add();
}
inline ::TSCE::EdgeArchive* CellRecordArchive::add_edge() {
  ::TSCE::EdgeArchive* _add = _internal_add_edge();
  // @@protoc_insertion_point(field_add:TSCE.CellRecordArchive.edge)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::EdgeArchive >&
CellRecordArchive::edge() const {
  // @@protoc_insertion_point(field_list:TSCE.CellRecordArchive.edge)
  return _impl_.edge_;
}

// optional bool contains_a_formula = 6 [default = true];
inline bool CellRecordArchive::_internal_has_contains_a_formula() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CellRecordArchive::has_contains_a_formula() const {
  return _internal_has_contains_a_formula();
}
inline void CellRecordArchive::clear_contains_a_formula() {
  _impl_.contains_a_formula_ = true;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool CellRecordArchive::_internal_contains_a_formula() const {
  return _impl_.contains_a_formula_;
}
inline bool CellRecordArchive::contains_a_formula() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRecordArchive.contains_a_formula)
  return _internal_contains_a_formula();
}
inline void CellRecordArchive::_internal_set_contains_a_formula(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.contains_a_formula_ = value;
}
inline void CellRecordArchive::set_contains_a_formula(bool value) {
  _internal_set_contains_a_formula(value);
  // @@protoc_insertion_point(field_set:TSCE.CellRecordArchive.contains_a_formula)
}

// optional bool has_calculated_precedents = 7 [default = false];
inline bool CellRecordArchive::_internal_has_has_calculated_precedents() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CellRecordArchive::has_has_calculated_precedents() const {
  return _internal_has_has_calculated_precedents();
}
inline void CellRecordArchive::clear_has_calculated_precedents() {
  _impl_.has_calculated_precedents_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CellRecordArchive::_internal_has_calculated_precedents() const {
  return _impl_.has_calculated_precedents_;
}
inline bool CellRecordArchive::has_calculated_precedents() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRecordArchive.has_calculated_precedents)
  return _internal_has_calculated_precedents();
}
inline void CellRecordArchive::_internal_set_has_calculated_precedents(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.has_calculated_precedents_ = value;
}
inline void CellRecordArchive::set_has_calculated_precedents(bool value) {
  _internal_set_has_calculated_precedents(value);
  // @@protoc_insertion_point(field_set:TSCE.CellRecordArchive.has_calculated_precedents)
}

// optional bool calculate_precedents_on_next_recalc = 8 [default = false, deprecated = true];
inline bool CellRecordArchive::_internal_has_calculate_precedents_on_next_recalc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CellRecordArchive::has_calculate_precedents_on_next_recalc() const {
  return _internal_has_calculate_precedents_on_next_recalc();
}
inline void CellRecordArchive::clear_calculate_precedents_on_next_recalc() {
  _impl_.calculate_precedents_on_next_recalc_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool CellRecordArchive::_internal_calculate_precedents_on_next_recalc() const {
  return _impl_.calculate_precedents_on_next_recalc_;
}
inline bool CellRecordArchive::calculate_precedents_on_next_recalc() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRecordArchive.calculate_precedents_on_next_recalc)
  return _internal_calculate_precedents_on_next_recalc();
}
inline void CellRecordArchive::_internal_set_calculate_precedents_on_next_recalc(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.calculate_precedents_on_next_recalc_ = value;
}
inline void CellRecordArchive::set_calculate_precedents_on_next_recalc(bool value) {
  _internal_set_calculate_precedents_on_next_recalc(value);
  // @@protoc_insertion_point(field_set:TSCE.CellRecordArchive.calculate_precedents_on_next_recalc)
}

// optional bool translate_for_excel_import_on_next_recalc = 10 [default = false];
inline bool CellRecordArchive::_internal_has_translate_for_excel_import_on_next_recalc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CellRecordArchive::has_translate_for_excel_import_on_next_recalc() const {
  return _internal_has_translate_for_excel_import_on_next_recalc();
}
inline void CellRecordArchive::clear_translate_for_excel_import_on_next_recalc() {
  _impl_.translate_for_excel_import_on_next_recalc_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool CellRecordArchive::_internal_translate_for_excel_import_on_next_recalc() const {
  return _impl_.translate_for_excel_import_on_next_recalc_;
}
inline bool CellRecordArchive::translate_for_excel_import_on_next_recalc() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRecordArchive.translate_for_excel_import_on_next_recalc)
  return _internal_translate_for_excel_import_on_next_recalc();
}
inline void CellRecordArchive::_internal_set_translate_for_excel_import_on_next_recalc(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.translate_for_excel_import_on_next_recalc_ = value;
}
inline void CellRecordArchive::set_translate_for_excel_import_on_next_recalc(bool value) {
  _internal_set_translate_for_excel_import_on_next_recalc(value);
  // @@protoc_insertion_point(field_set:TSCE.CellRecordArchive.translate_for_excel_import_on_next_recalc)
}

// optional .TSCE.EdgesArchive edges = 9;
inline bool CellRecordArchive::_internal_has_edges() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.edges_ != nullptr);
  return value;
}
inline bool CellRecordArchive::has_edges() const {
  return _internal_has_edges();
}
inline void CellRecordArchive::clear_edges() {
  if (_impl_.edges_ != nullptr) _impl_.edges_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::EdgesArchive& CellRecordArchive::_internal_edges() const {
  const ::TSCE::EdgesArchive* p = _impl_.edges_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::EdgesArchive&>(
      ::TSCE::_EdgesArchive_default_instance_);
}
inline const ::TSCE::EdgesArchive& CellRecordArchive::edges() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRecordArchive.edges)
  return _internal_edges();
}
inline void CellRecordArchive::unsafe_arena_set_allocated_edges(
    ::TSCE::EdgesArchive* edges) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.edges_);
  }
  _impl_.edges_ = edges;
  if (edges) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CellRecordArchive.edges)
}
inline ::TSCE::EdgesArchive* CellRecordArchive::release_edges() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::EdgesArchive* temp = _impl_.edges_;
  _impl_.edges_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::EdgesArchive* CellRecordArchive::unsafe_arena_release_edges() {
  // @@protoc_insertion_point(field_release:TSCE.CellRecordArchive.edges)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::EdgesArchive* temp = _impl_.edges_;
  _impl_.edges_ = nullptr;
  return temp;
}
inline ::TSCE::EdgesArchive* CellRecordArchive::_internal_mutable_edges() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.edges_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::EdgesArchive>(GetArenaForAllocation());
    _impl_.edges_ = p;
  }
  return _impl_.edges_;
}
inline ::TSCE::EdgesArchive* CellRecordArchive::mutable_edges() {
  ::TSCE::EdgesArchive* _msg = _internal_mutable_edges();
  // @@protoc_insertion_point(field_mutable:TSCE.CellRecordArchive.edges)
  return _msg;
}
inline void CellRecordArchive::set_allocated_edges(::TSCE::EdgesArchive* edges) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.edges_;
  }
  if (edges) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(edges);
    if (message_arena != submessage_arena) {
      edges = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edges, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.edges_ = edges;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CellRecordArchive.edges)
}

// -------------------------------------------------------------------

// CellDependenciesArchive

// repeated .TSCE.CellRecordArchive cell_record = 1;
inline int CellDependenciesArchive::_internal_cell_record_size() const {
  return _impl_.cell_record_.size();
}
inline int CellDependenciesArchive::cell_record_size() const {
  return _internal_cell_record_size();
}
inline void CellDependenciesArchive::clear_cell_record() {
  _impl_.cell_record_.Clear();
}
inline ::TSCE::CellRecordArchive* CellDependenciesArchive::mutable_cell_record(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.CellDependenciesArchive.cell_record)
  return _impl_.cell_record_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellRecordArchive >*
CellDependenciesArchive::mutable_cell_record() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.CellDependenciesArchive.cell_record)
  return &_impl_.cell_record_;
}
inline const ::TSCE::CellRecordArchive& CellDependenciesArchive::_internal_cell_record(int index) const {
  return _impl_.cell_record_.Get(index);
}
inline const ::TSCE::CellRecordArchive& CellDependenciesArchive::cell_record(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.CellDependenciesArchive.cell_record)
  return _internal_cell_record(index);
}
inline ::TSCE::CellRecordArchive* CellDependenciesArchive::_internal_add_cell_record() {
  return _impl_.cell_record_.Add();
}
inline ::TSCE::CellRecordArchive* CellDependenciesArchive::add_cell_record() {
  ::TSCE::CellRecordArchive* _add = _internal_add_cell_record();
  // @@protoc_insertion_point(field_add:TSCE.CellDependenciesArchive.cell_record)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellRecordArchive >&
CellDependenciesArchive::cell_record() const {
  // @@protoc_insertion_point(field_list:TSCE.CellDependenciesArchive.cell_record)
  return _impl_.cell_record_;
}

// optional uint32 num_dirty_cells = 2;
inline bool CellDependenciesArchive::_internal_has_num_dirty_cells() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CellDependenciesArchive::has_num_dirty_cells() const {
  return _internal_has_num_dirty_cells();
}
inline void CellDependenciesArchive::clear_num_dirty_cells() {
  _impl_.num_dirty_cells_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CellDependenciesArchive::_internal_num_dirty_cells() const {
  return _impl_.num_dirty_cells_;
}
inline uint32_t CellDependenciesArchive::num_dirty_cells() const {
  // @@protoc_insertion_point(field_get:TSCE.CellDependenciesArchive.num_dirty_cells)
  return _internal_num_dirty_cells();
}
inline void CellDependenciesArchive::_internal_set_num_dirty_cells(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.num_dirty_cells_ = value;
}
inline void CellDependenciesArchive::set_num_dirty_cells(uint32_t value) {
  _internal_set_num_dirty_cells(value);
  // @@protoc_insertion_point(field_set:TSCE.CellDependenciesArchive.num_dirty_cells)
}

// -------------------------------------------------------------------

// VolatileDependenciesArchive

// repeated uint32 volatile_time_cell_column = 1;
inline int VolatileDependenciesArchive::_internal_volatile_time_cell_column_size() const {
  return _impl_.volatile_time_cell_column_.size();
}
inline int VolatileDependenciesArchive::volatile_time_cell_column_size() const {
  return _internal_volatile_time_cell_column_size();
}
inline void VolatileDependenciesArchive::clear_volatile_time_cell_column() {
  _impl_.volatile_time_cell_column_.Clear();
}
inline uint32_t VolatileDependenciesArchive::_internal_volatile_time_cell_column(int index) const {
  return _impl_.volatile_time_cell_column_.Get(index);
}
inline uint32_t VolatileDependenciesArchive::volatile_time_cell_column(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.volatile_time_cell_column)
  return _internal_volatile_time_cell_column(index);
}
inline void VolatileDependenciesArchive::set_volatile_time_cell_column(int index, uint32_t value) {
  _impl_.volatile_time_cell_column_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.VolatileDependenciesArchive.volatile_time_cell_column)
}
inline void VolatileDependenciesArchive::_internal_add_volatile_time_cell_column(uint32_t value) {
  _impl_.volatile_time_cell_column_.Add(value);
}
inline void VolatileDependenciesArchive::add_volatile_time_cell_column(uint32_t value) {
  _internal_add_volatile_time_cell_column(value);
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.volatile_time_cell_column)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
VolatileDependenciesArchive::_internal_volatile_time_cell_column() const {
  return _impl_.volatile_time_cell_column_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
VolatileDependenciesArchive::volatile_time_cell_column() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.volatile_time_cell_column)
  return _internal_volatile_time_cell_column();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
VolatileDependenciesArchive::_internal_mutable_volatile_time_cell_column() {
  return &_impl_.volatile_time_cell_column_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
VolatileDependenciesArchive::mutable_volatile_time_cell_column() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.volatile_time_cell_column)
  return _internal_mutable_volatile_time_cell_column();
}

// repeated uint32 volatile_time_cell_row = 2;
inline int VolatileDependenciesArchive::_internal_volatile_time_cell_row_size() const {
  return _impl_.volatile_time_cell_row_.size();
}
inline int VolatileDependenciesArchive::volatile_time_cell_row_size() const {
  return _internal_volatile_time_cell_row_size();
}
inline void VolatileDependenciesArchive::clear_volatile_time_cell_row() {
  _impl_.volatile_time_cell_row_.Clear();
}
inline uint32_t VolatileDependenciesArchive::_internal_volatile_time_cell_row(int index) const {
  return _impl_.volatile_time_cell_row_.Get(index);
}
inline uint32_t VolatileDependenciesArchive::volatile_time_cell_row(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.volatile_time_cell_row)
  return _internal_volatile_time_cell_row(index);
}
inline void VolatileDependenciesArchive::set_volatile_time_cell_row(int index, uint32_t value) {
  _impl_.volatile_time_cell_row_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.VolatileDependenciesArchive.volatile_time_cell_row)
}
inline void VolatileDependenciesArchive::_internal_add_volatile_time_cell_row(uint32_t value) {
  _impl_.volatile_time_cell_row_.Add(value);
}
inline void VolatileDependenciesArchive::add_volatile_time_cell_row(uint32_t value) {
  _internal_add_volatile_time_cell_row(value);
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.volatile_time_cell_row)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
VolatileDependenciesArchive::_internal_volatile_time_cell_row() const {
  return _impl_.volatile_time_cell_row_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
VolatileDependenciesArchive::volatile_time_cell_row() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.volatile_time_cell_row)
  return _internal_volatile_time_cell_row();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
VolatileDependenciesArchive::_internal_mutable_volatile_time_cell_row() {
  return &_impl_.volatile_time_cell_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
VolatileDependenciesArchive::mutable_volatile_time_cell_row() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.volatile_time_cell_row)
  return _internal_mutable_volatile_time_cell_row();
}

// repeated uint32 volatile_random_cell_column = 3;
inline int VolatileDependenciesArchive::_internal_volatile_random_cell_column_size() const {
  return _impl_.volatile_random_cell_column_.size();
}
inline int VolatileDependenciesArchive::volatile_random_cell_column_size() const {
  return _internal_volatile_random_cell_column_size();
}
inline void VolatileDependenciesArchive::clear_volatile_random_cell_column() {
  _impl_.volatile_random_cell_column_.Clear();
}
inline uint32_t VolatileDependenciesArchive::_internal_volatile_random_cell_column(int index) const {
  return _impl_.volatile_random_cell_column_.Get(index);
}
inline uint32_t VolatileDependenciesArchive::volatile_random_cell_column(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.volatile_random_cell_column)
  return _internal_volatile_random_cell_column(index);
}
inline void VolatileDependenciesArchive::set_volatile_random_cell_column(int index, uint32_t value) {
  _impl_.volatile_random_cell_column_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.VolatileDependenciesArchive.volatile_random_cell_column)
}
inline void VolatileDependenciesArchive::_internal_add_volatile_random_cell_column(uint32_t value) {
  _impl_.volatile_random_cell_column_.Add(value);
}
inline void VolatileDependenciesArchive::add_volatile_random_cell_column(uint32_t value) {
  _internal_add_volatile_random_cell_column(value);
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.volatile_random_cell_column)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
VolatileDependenciesArchive::_internal_volatile_random_cell_column() const {
  return _impl_.volatile_random_cell_column_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
VolatileDependenciesArchive::volatile_random_cell_column() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.volatile_random_cell_column)
  return _internal_volatile_random_cell_column();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
VolatileDependenciesArchive::_internal_mutable_volatile_random_cell_column() {
  return &_impl_.volatile_random_cell_column_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
VolatileDependenciesArchive::mutable_volatile_random_cell_column() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.volatile_random_cell_column)
  return _internal_mutable_volatile_random_cell_column();
}

// repeated uint32 volatile_random_cell_row = 4;
inline int VolatileDependenciesArchive::_internal_volatile_random_cell_row_size() const {
  return _impl_.volatile_random_cell_row_.size();
}
inline int VolatileDependenciesArchive::volatile_random_cell_row_size() const {
  return _internal_volatile_random_cell_row_size();
}
inline void VolatileDependenciesArchive::clear_volatile_random_cell_row() {
  _impl_.volatile_random_cell_row_.Clear();
}
inline uint32_t VolatileDependenciesArchive::_internal_volatile_random_cell_row(int index) const {
  return _impl_.volatile_random_cell_row_.Get(index);
}
inline uint32_t VolatileDependenciesArchive::volatile_random_cell_row(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.volatile_random_cell_row)
  return _internal_volatile_random_cell_row(index);
}
inline void VolatileDependenciesArchive::set_volatile_random_cell_row(int index, uint32_t value) {
  _impl_.volatile_random_cell_row_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.VolatileDependenciesArchive.volatile_random_cell_row)
}
inline void VolatileDependenciesArchive::_internal_add_volatile_random_cell_row(uint32_t value) {
  _impl_.volatile_random_cell_row_.Add(value);
}
inline void VolatileDependenciesArchive::add_volatile_random_cell_row(uint32_t value) {
  _internal_add_volatile_random_cell_row(value);
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.volatile_random_cell_row)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
VolatileDependenciesArchive::_internal_volatile_random_cell_row() const {
  return _impl_.volatile_random_cell_row_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
VolatileDependenciesArchive::volatile_random_cell_row() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.volatile_random_cell_row)
  return _internal_volatile_random_cell_row();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
VolatileDependenciesArchive::_internal_mutable_volatile_random_cell_row() {
  return &_impl_.volatile_random_cell_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
VolatileDependenciesArchive::mutable_volatile_random_cell_row() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.volatile_random_cell_row)
  return _internal_mutable_volatile_random_cell_row();
}

// repeated uint32 volatile_locale_cell_column = 15;
inline int VolatileDependenciesArchive::_internal_volatile_locale_cell_column_size() const {
  return _impl_.volatile_locale_cell_column_.size();
}
inline int VolatileDependenciesArchive::volatile_locale_cell_column_size() const {
  return _internal_volatile_locale_cell_column_size();
}
inline void VolatileDependenciesArchive::clear_volatile_locale_cell_column() {
  _impl_.volatile_locale_cell_column_.Clear();
}
inline uint32_t VolatileDependenciesArchive::_internal_volatile_locale_cell_column(int index) const {
  return _impl_.volatile_locale_cell_column_.Get(index);
}
inline uint32_t VolatileDependenciesArchive::volatile_locale_cell_column(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.volatile_locale_cell_column)
  return _internal_volatile_locale_cell_column(index);
}
inline void VolatileDependenciesArchive::set_volatile_locale_cell_column(int index, uint32_t value) {
  _impl_.volatile_locale_cell_column_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.VolatileDependenciesArchive.volatile_locale_cell_column)
}
inline void VolatileDependenciesArchive::_internal_add_volatile_locale_cell_column(uint32_t value) {
  _impl_.volatile_locale_cell_column_.Add(value);
}
inline void VolatileDependenciesArchive::add_volatile_locale_cell_column(uint32_t value) {
  _internal_add_volatile_locale_cell_column(value);
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.volatile_locale_cell_column)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
VolatileDependenciesArchive::_internal_volatile_locale_cell_column() const {
  return _impl_.volatile_locale_cell_column_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
VolatileDependenciesArchive::volatile_locale_cell_column() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.volatile_locale_cell_column)
  return _internal_volatile_locale_cell_column();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
VolatileDependenciesArchive::_internal_mutable_volatile_locale_cell_column() {
  return &_impl_.volatile_locale_cell_column_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
VolatileDependenciesArchive::mutable_volatile_locale_cell_column() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.volatile_locale_cell_column)
  return _internal_mutable_volatile_locale_cell_column();
}

// repeated uint32 volatile_locale_cell_row = 16;
inline int VolatileDependenciesArchive::_internal_volatile_locale_cell_row_size() const {
  return _impl_.volatile_locale_cell_row_.size();
}
inline int VolatileDependenciesArchive::volatile_locale_cell_row_size() const {
  return _internal_volatile_locale_cell_row_size();
}
inline void VolatileDependenciesArchive::clear_volatile_locale_cell_row() {
  _impl_.volatile_locale_cell_row_.Clear();
}
inline uint32_t VolatileDependenciesArchive::_internal_volatile_locale_cell_row(int index) const {
  return _impl_.volatile_locale_cell_row_.Get(index);
}
inline uint32_t VolatileDependenciesArchive::volatile_locale_cell_row(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.volatile_locale_cell_row)
  return _internal_volatile_locale_cell_row(index);
}
inline void VolatileDependenciesArchive::set_volatile_locale_cell_row(int index, uint32_t value) {
  _impl_.volatile_locale_cell_row_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.VolatileDependenciesArchive.volatile_locale_cell_row)
}
inline void VolatileDependenciesArchive::_internal_add_volatile_locale_cell_row(uint32_t value) {
  _impl_.volatile_locale_cell_row_.Add(value);
}
inline void VolatileDependenciesArchive::add_volatile_locale_cell_row(uint32_t value) {
  _internal_add_volatile_locale_cell_row(value);
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.volatile_locale_cell_row)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
VolatileDependenciesArchive::_internal_volatile_locale_cell_row() const {
  return _impl_.volatile_locale_cell_row_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
VolatileDependenciesArchive::volatile_locale_cell_row() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.volatile_locale_cell_row)
  return _internal_volatile_locale_cell_row();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
VolatileDependenciesArchive::_internal_mutable_volatile_locale_cell_row() {
  return &_impl_.volatile_locale_cell_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
VolatileDependenciesArchive::mutable_volatile_locale_cell_row() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.volatile_locale_cell_row)
  return _internal_mutable_volatile_locale_cell_row();
}

// repeated uint32 volatile_location_cell_column = 5;
inline int VolatileDependenciesArchive::_internal_volatile_location_cell_column_size() const {
  return _impl_.volatile_location_cell_column_.size();
}
inline int VolatileDependenciesArchive::volatile_location_cell_column_size() const {
  return _internal_volatile_location_cell_column_size();
}
inline void VolatileDependenciesArchive::clear_volatile_location_cell_column() {
  _impl_.volatile_location_cell_column_.Clear();
}
inline uint32_t VolatileDependenciesArchive::_internal_volatile_location_cell_column(int index) const {
  return _impl_.volatile_location_cell_column_.Get(index);
}
inline uint32_t VolatileDependenciesArchive::volatile_location_cell_column(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.volatile_location_cell_column)
  return _internal_volatile_location_cell_column(index);
}
inline void VolatileDependenciesArchive::set_volatile_location_cell_column(int index, uint32_t value) {
  _impl_.volatile_location_cell_column_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.VolatileDependenciesArchive.volatile_location_cell_column)
}
inline void VolatileDependenciesArchive::_internal_add_volatile_location_cell_column(uint32_t value) {
  _impl_.volatile_location_cell_column_.Add(value);
}
inline void VolatileDependenciesArchive::add_volatile_location_cell_column(uint32_t value) {
  _internal_add_volatile_location_cell_column(value);
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.volatile_location_cell_column)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
VolatileDependenciesArchive::_internal_volatile_location_cell_column() const {
  return _impl_.volatile_location_cell_column_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
VolatileDependenciesArchive::volatile_location_cell_column() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.volatile_location_cell_column)
  return _internal_volatile_location_cell_column();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
VolatileDependenciesArchive::_internal_mutable_volatile_location_cell_column() {
  return &_impl_.volatile_location_cell_column_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
VolatileDependenciesArchive::mutable_volatile_location_cell_column() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.volatile_location_cell_column)
  return _internal_mutable_volatile_location_cell_column();
}

// repeated uint32 volatile_location_cell_row = 6;
inline int VolatileDependenciesArchive::_internal_volatile_location_cell_row_size() const {
  return _impl_.volatile_location_cell_row_.size();
}
inline int VolatileDependenciesArchive::volatile_location_cell_row_size() const {
  return _internal_volatile_location_cell_row_size();
}
inline void VolatileDependenciesArchive::clear_volatile_location_cell_row() {
  _impl_.volatile_location_cell_row_.Clear();
}
inline uint32_t VolatileDependenciesArchive::_internal_volatile_location_cell_row(int index) const {
  return _impl_.volatile_location_cell_row_.Get(index);
}
inline uint32_t VolatileDependenciesArchive::volatile_location_cell_row(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.volatile_location_cell_row)
  return _internal_volatile_location_cell_row(index);
}
inline void VolatileDependenciesArchive::set_volatile_location_cell_row(int index, uint32_t value) {
  _impl_.volatile_location_cell_row_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.VolatileDependenciesArchive.volatile_location_cell_row)
}
inline void VolatileDependenciesArchive::_internal_add_volatile_location_cell_row(uint32_t value) {
  _impl_.volatile_location_cell_row_.Add(value);
}
inline void VolatileDependenciesArchive::add_volatile_location_cell_row(uint32_t value) {
  _internal_add_volatile_location_cell_row(value);
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.volatile_location_cell_row)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
VolatileDependenciesArchive::_internal_volatile_location_cell_row() const {
  return _impl_.volatile_location_cell_row_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
VolatileDependenciesArchive::volatile_location_cell_row() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.volatile_location_cell_row)
  return _internal_volatile_location_cell_row();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
VolatileDependenciesArchive::_internal_mutable_volatile_location_cell_row() {
  return &_impl_.volatile_location_cell_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
VolatileDependenciesArchive::mutable_volatile_location_cell_row() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.volatile_location_cell_row)
  return _internal_mutable_volatile_location_cell_row();
}

// repeated uint32 volatile_compass_cell_column = 7;
inline int VolatileDependenciesArchive::_internal_volatile_compass_cell_column_size() const {
  return _impl_.volatile_compass_cell_column_.size();
}
inline int VolatileDependenciesArchive::volatile_compass_cell_column_size() const {
  return _internal_volatile_compass_cell_column_size();
}
inline void VolatileDependenciesArchive::clear_volatile_compass_cell_column() {
  _impl_.volatile_compass_cell_column_.Clear();
}
inline uint32_t VolatileDependenciesArchive::_internal_volatile_compass_cell_column(int index) const {
  return _impl_.volatile_compass_cell_column_.Get(index);
}
inline uint32_t VolatileDependenciesArchive::volatile_compass_cell_column(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.volatile_compass_cell_column)
  return _internal_volatile_compass_cell_column(index);
}
inline void VolatileDependenciesArchive::set_volatile_compass_cell_column(int index, uint32_t value) {
  _impl_.volatile_compass_cell_column_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.VolatileDependenciesArchive.volatile_compass_cell_column)
}
inline void VolatileDependenciesArchive::_internal_add_volatile_compass_cell_column(uint32_t value) {
  _impl_.volatile_compass_cell_column_.Add(value);
}
inline void VolatileDependenciesArchive::add_volatile_compass_cell_column(uint32_t value) {
  _internal_add_volatile_compass_cell_column(value);
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.volatile_compass_cell_column)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
VolatileDependenciesArchive::_internal_volatile_compass_cell_column() const {
  return _impl_.volatile_compass_cell_column_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
VolatileDependenciesArchive::volatile_compass_cell_column() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.volatile_compass_cell_column)
  return _internal_volatile_compass_cell_column();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
VolatileDependenciesArchive::_internal_mutable_volatile_compass_cell_column() {
  return &_impl_.volatile_compass_cell_column_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
VolatileDependenciesArchive::mutable_volatile_compass_cell_column() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.volatile_compass_cell_column)
  return _internal_mutable_volatile_compass_cell_column();
}

// repeated uint32 volatile_compass_cell_row = 8;
inline int VolatileDependenciesArchive::_internal_volatile_compass_cell_row_size() const {
  return _impl_.volatile_compass_cell_row_.size();
}
inline int VolatileDependenciesArchive::volatile_compass_cell_row_size() const {
  return _internal_volatile_compass_cell_row_size();
}
inline void VolatileDependenciesArchive::clear_volatile_compass_cell_row() {
  _impl_.volatile_compass_cell_row_.Clear();
}
inline uint32_t VolatileDependenciesArchive::_internal_volatile_compass_cell_row(int index) const {
  return _impl_.volatile_compass_cell_row_.Get(index);
}
inline uint32_t VolatileDependenciesArchive::volatile_compass_cell_row(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.volatile_compass_cell_row)
  return _internal_volatile_compass_cell_row(index);
}
inline void VolatileDependenciesArchive::set_volatile_compass_cell_row(int index, uint32_t value) {
  _impl_.volatile_compass_cell_row_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.VolatileDependenciesArchive.volatile_compass_cell_row)
}
inline void VolatileDependenciesArchive::_internal_add_volatile_compass_cell_row(uint32_t value) {
  _impl_.volatile_compass_cell_row_.Add(value);
}
inline void VolatileDependenciesArchive::add_volatile_compass_cell_row(uint32_t value) {
  _internal_add_volatile_compass_cell_row(value);
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.volatile_compass_cell_row)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
VolatileDependenciesArchive::_internal_volatile_compass_cell_row() const {
  return _impl_.volatile_compass_cell_row_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
VolatileDependenciesArchive::volatile_compass_cell_row() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.volatile_compass_cell_row)
  return _internal_volatile_compass_cell_row();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
VolatileDependenciesArchive::_internal_mutable_volatile_compass_cell_row() {
  return &_impl_.volatile_compass_cell_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
VolatileDependenciesArchive::mutable_volatile_compass_cell_row() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.volatile_compass_cell_row)
  return _internal_mutable_volatile_compass_cell_row();
}

// repeated uint32 calculated_dependency_cell_column = 9;
inline int VolatileDependenciesArchive::_internal_calculated_dependency_cell_column_size() const {
  return _impl_.calculated_dependency_cell_column_.size();
}
inline int VolatileDependenciesArchive::calculated_dependency_cell_column_size() const {
  return _internal_calculated_dependency_cell_column_size();
}
inline void VolatileDependenciesArchive::clear_calculated_dependency_cell_column() {
  _impl_.calculated_dependency_cell_column_.Clear();
}
inline uint32_t VolatileDependenciesArchive::_internal_calculated_dependency_cell_column(int index) const {
  return _impl_.calculated_dependency_cell_column_.Get(index);
}
inline uint32_t VolatileDependenciesArchive::calculated_dependency_cell_column(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.calculated_dependency_cell_column)
  return _internal_calculated_dependency_cell_column(index);
}
inline void VolatileDependenciesArchive::set_calculated_dependency_cell_column(int index, uint32_t value) {
  _impl_.calculated_dependency_cell_column_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.VolatileDependenciesArchive.calculated_dependency_cell_column)
}
inline void VolatileDependenciesArchive::_internal_add_calculated_dependency_cell_column(uint32_t value) {
  _impl_.calculated_dependency_cell_column_.Add(value);
}
inline void VolatileDependenciesArchive::add_calculated_dependency_cell_column(uint32_t value) {
  _internal_add_calculated_dependency_cell_column(value);
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.calculated_dependency_cell_column)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
VolatileDependenciesArchive::_internal_calculated_dependency_cell_column() const {
  return _impl_.calculated_dependency_cell_column_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
VolatileDependenciesArchive::calculated_dependency_cell_column() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.calculated_dependency_cell_column)
  return _internal_calculated_dependency_cell_column();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
VolatileDependenciesArchive::_internal_mutable_calculated_dependency_cell_column() {
  return &_impl_.calculated_dependency_cell_column_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
VolatileDependenciesArchive::mutable_calculated_dependency_cell_column() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.calculated_dependency_cell_column)
  return _internal_mutable_calculated_dependency_cell_column();
}

// repeated uint32 calculated_dependency_cell_row = 10;
inline int VolatileDependenciesArchive::_internal_calculated_dependency_cell_row_size() const {
  return _impl_.calculated_dependency_cell_row_.size();
}
inline int VolatileDependenciesArchive::calculated_dependency_cell_row_size() const {
  return _internal_calculated_dependency_cell_row_size();
}
inline void VolatileDependenciesArchive::clear_calculated_dependency_cell_row() {
  _impl_.calculated_dependency_cell_row_.Clear();
}
inline uint32_t VolatileDependenciesArchive::_internal_calculated_dependency_cell_row(int index) const {
  return _impl_.calculated_dependency_cell_row_.Get(index);
}
inline uint32_t VolatileDependenciesArchive::calculated_dependency_cell_row(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.calculated_dependency_cell_row)
  return _internal_calculated_dependency_cell_row(index);
}
inline void VolatileDependenciesArchive::set_calculated_dependency_cell_row(int index, uint32_t value) {
  _impl_.calculated_dependency_cell_row_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.VolatileDependenciesArchive.calculated_dependency_cell_row)
}
inline void VolatileDependenciesArchive::_internal_add_calculated_dependency_cell_row(uint32_t value) {
  _impl_.calculated_dependency_cell_row_.Add(value);
}
inline void VolatileDependenciesArchive::add_calculated_dependency_cell_row(uint32_t value) {
  _internal_add_calculated_dependency_cell_row(value);
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.calculated_dependency_cell_row)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
VolatileDependenciesArchive::_internal_calculated_dependency_cell_row() const {
  return _impl_.calculated_dependency_cell_row_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
VolatileDependenciesArchive::calculated_dependency_cell_row() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.calculated_dependency_cell_row)
  return _internal_calculated_dependency_cell_row();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
VolatileDependenciesArchive::_internal_mutable_calculated_dependency_cell_row() {
  return &_impl_.calculated_dependency_cell_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
VolatileDependenciesArchive::mutable_calculated_dependency_cell_row() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.calculated_dependency_cell_row)
  return _internal_mutable_calculated_dependency_cell_row();
}

// repeated .TSCE.CellReferenceArchive volatile_geometry_cell_reference = 13;
inline int VolatileDependenciesArchive::_internal_volatile_geometry_cell_reference_size() const {
  return _impl_.volatile_geometry_cell_reference_.size();
}
inline int VolatileDependenciesArchive::volatile_geometry_cell_reference_size() const {
  return _internal_volatile_geometry_cell_reference_size();
}
inline void VolatileDependenciesArchive::clear_volatile_geometry_cell_reference() {
  _impl_.volatile_geometry_cell_reference_.Clear();
}
inline ::TSCE::CellReferenceArchive* VolatileDependenciesArchive::mutable_volatile_geometry_cell_reference(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.VolatileDependenciesArchive.volatile_geometry_cell_reference)
  return _impl_.volatile_geometry_cell_reference_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellReferenceArchive >*
VolatileDependenciesArchive::mutable_volatile_geometry_cell_reference() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.volatile_geometry_cell_reference)
  return &_impl_.volatile_geometry_cell_reference_;
}
inline const ::TSCE::CellReferenceArchive& VolatileDependenciesArchive::_internal_volatile_geometry_cell_reference(int index) const {
  return _impl_.volatile_geometry_cell_reference_.Get(index);
}
inline const ::TSCE::CellReferenceArchive& VolatileDependenciesArchive::volatile_geometry_cell_reference(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.volatile_geometry_cell_reference)
  return _internal_volatile_geometry_cell_reference(index);
}
inline ::TSCE::CellReferenceArchive* VolatileDependenciesArchive::_internal_add_volatile_geometry_cell_reference() {
  return _impl_.volatile_geometry_cell_reference_.Add();
}
inline ::TSCE::CellReferenceArchive* VolatileDependenciesArchive::add_volatile_geometry_cell_reference() {
  ::TSCE::CellReferenceArchive* _add = _internal_add_volatile_geometry_cell_reference();
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.volatile_geometry_cell_reference)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellReferenceArchive >&
VolatileDependenciesArchive::volatile_geometry_cell_reference() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.volatile_geometry_cell_reference)
  return _impl_.volatile_geometry_cell_reference_;
}

// repeated .TSCE.CellCoordinateArchive volatile_geometry_cell = 11;
inline int VolatileDependenciesArchive::_internal_volatile_geometry_cell_size() const {
  return _impl_.volatile_geometry_cell_.size();
}
inline int VolatileDependenciesArchive::volatile_geometry_cell_size() const {
  return _internal_volatile_geometry_cell_size();
}
inline void VolatileDependenciesArchive::clear_volatile_geometry_cell() {
  _impl_.volatile_geometry_cell_.Clear();
}
inline ::TSCE::CellCoordinateArchive* VolatileDependenciesArchive::mutable_volatile_geometry_cell(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.VolatileDependenciesArchive.volatile_geometry_cell)
  return _impl_.volatile_geometry_cell_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >*
VolatileDependenciesArchive::mutable_volatile_geometry_cell() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.volatile_geometry_cell)
  return &_impl_.volatile_geometry_cell_;
}
inline const ::TSCE::CellCoordinateArchive& VolatileDependenciesArchive::_internal_volatile_geometry_cell(int index) const {
  return _impl_.volatile_geometry_cell_.Get(index);
}
inline const ::TSCE::CellCoordinateArchive& VolatileDependenciesArchive::volatile_geometry_cell(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.volatile_geometry_cell)
  return _internal_volatile_geometry_cell(index);
}
inline ::TSCE::CellCoordinateArchive* VolatileDependenciesArchive::_internal_add_volatile_geometry_cell() {
  return _impl_.volatile_geometry_cell_.Add();
}
inline ::TSCE::CellCoordinateArchive* VolatileDependenciesArchive::add_volatile_geometry_cell() {
  ::TSCE::CellCoordinateArchive* _add = _internal_add_volatile_geometry_cell();
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.volatile_geometry_cell)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >&
VolatileDependenciesArchive::volatile_geometry_cell() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.volatile_geometry_cell)
  return _impl_.volatile_geometry_cell_;
}

// -------------------------------------------------------------------

// RangeBackDependencyArchive

// required uint32 cell_coord_row = 1;
inline bool RangeBackDependencyArchive::_internal_has_cell_coord_row() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RangeBackDependencyArchive::has_cell_coord_row() const {
  return _internal_has_cell_coord_row();
}
inline void RangeBackDependencyArchive::clear_cell_coord_row() {
  _impl_.cell_coord_row_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t RangeBackDependencyArchive::_internal_cell_coord_row() const {
  return _impl_.cell_coord_row_;
}
inline uint32_t RangeBackDependencyArchive::cell_coord_row() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeBackDependencyArchive.cell_coord_row)
  return _internal_cell_coord_row();
}
inline void RangeBackDependencyArchive::_internal_set_cell_coord_row(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.cell_coord_row_ = value;
}
inline void RangeBackDependencyArchive::set_cell_coord_row(uint32_t value) {
  _internal_set_cell_coord_row(value);
  // @@protoc_insertion_point(field_set:TSCE.RangeBackDependencyArchive.cell_coord_row)
}

// required uint32 cell_coord_column = 2;
inline bool RangeBackDependencyArchive::_internal_has_cell_coord_column() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RangeBackDependencyArchive::has_cell_coord_column() const {
  return _internal_has_cell_coord_column();
}
inline void RangeBackDependencyArchive::clear_cell_coord_column() {
  _impl_.cell_coord_column_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t RangeBackDependencyArchive::_internal_cell_coord_column() const {
  return _impl_.cell_coord_column_;
}
inline uint32_t RangeBackDependencyArchive::cell_coord_column() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeBackDependencyArchive.cell_coord_column)
  return _internal_cell_coord_column();
}
inline void RangeBackDependencyArchive::_internal_set_cell_coord_column(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.cell_coord_column_ = value;
}
inline void RangeBackDependencyArchive::set_cell_coord_column(uint32_t value) {
  _internal_set_cell_coord_column(value);
  // @@protoc_insertion_point(field_set:TSCE.RangeBackDependencyArchive.cell_coord_column)
}

// optional .TSCE.RangeReferenceArchive range_reference = 3;
inline bool RangeBackDependencyArchive::_internal_has_range_reference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.range_reference_ != nullptr);
  return value;
}
inline bool RangeBackDependencyArchive::has_range_reference() const {
  return _internal_has_range_reference();
}
inline void RangeBackDependencyArchive::clear_range_reference() {
  if (_impl_.range_reference_ != nullptr) _impl_.range_reference_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::RangeReferenceArchive& RangeBackDependencyArchive::_internal_range_reference() const {
  const ::TSCE::RangeReferenceArchive* p = _impl_.range_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeReferenceArchive&>(
      ::TSCE::_RangeReferenceArchive_default_instance_);
}
inline const ::TSCE::RangeReferenceArchive& RangeBackDependencyArchive::range_reference() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeBackDependencyArchive.range_reference)
  return _internal_range_reference();
}
inline void RangeBackDependencyArchive::unsafe_arena_set_allocated_range_reference(
    ::TSCE::RangeReferenceArchive* range_reference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.range_reference_);
  }
  _impl_.range_reference_ = range_reference;
  if (range_reference) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RangeBackDependencyArchive.range_reference)
}
inline ::TSCE::RangeReferenceArchive* RangeBackDependencyArchive::release_range_reference() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::RangeReferenceArchive* temp = _impl_.range_reference_;
  _impl_.range_reference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RangeReferenceArchive* RangeBackDependencyArchive::unsafe_arena_release_range_reference() {
  // @@protoc_insertion_point(field_release:TSCE.RangeBackDependencyArchive.range_reference)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::RangeReferenceArchive* temp = _impl_.range_reference_;
  _impl_.range_reference_ = nullptr;
  return temp;
}
inline ::TSCE::RangeReferenceArchive* RangeBackDependencyArchive::_internal_mutable_range_reference() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.range_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeReferenceArchive>(GetArenaForAllocation());
    _impl_.range_reference_ = p;
  }
  return _impl_.range_reference_;
}
inline ::TSCE::RangeReferenceArchive* RangeBackDependencyArchive::mutable_range_reference() {
  ::TSCE::RangeReferenceArchive* _msg = _internal_mutable_range_reference();
  // @@protoc_insertion_point(field_mutable:TSCE.RangeBackDependencyArchive.range_reference)
  return _msg;
}
inline void RangeBackDependencyArchive::set_allocated_range_reference(::TSCE::RangeReferenceArchive* range_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.range_reference_;
  }
  if (range_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(range_reference);
    if (message_arena != submessage_arena) {
      range_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range_reference, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.range_reference_ = range_reference;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RangeBackDependencyArchive.range_reference)
}

// optional .TSCE.InternalRangeReferenceArchive internal_range_reference = 4;
inline bool RangeBackDependencyArchive::_internal_has_internal_range_reference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.internal_range_reference_ != nullptr);
  return value;
}
inline bool RangeBackDependencyArchive::has_internal_range_reference() const {
  return _internal_has_internal_range_reference();
}
inline void RangeBackDependencyArchive::clear_internal_range_reference() {
  if (_impl_.internal_range_reference_ != nullptr) _impl_.internal_range_reference_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::InternalRangeReferenceArchive& RangeBackDependencyArchive::_internal_internal_range_reference() const {
  const ::TSCE::InternalRangeReferenceArchive* p = _impl_.internal_range_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::InternalRangeReferenceArchive&>(
      ::TSCE::_InternalRangeReferenceArchive_default_instance_);
}
inline const ::TSCE::InternalRangeReferenceArchive& RangeBackDependencyArchive::internal_range_reference() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeBackDependencyArchive.internal_range_reference)
  return _internal_internal_range_reference();
}
inline void RangeBackDependencyArchive::unsafe_arena_set_allocated_internal_range_reference(
    ::TSCE::InternalRangeReferenceArchive* internal_range_reference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.internal_range_reference_);
  }
  _impl_.internal_range_reference_ = internal_range_reference;
  if (internal_range_reference) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RangeBackDependencyArchive.internal_range_reference)
}
inline ::TSCE::InternalRangeReferenceArchive* RangeBackDependencyArchive::release_internal_range_reference() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::InternalRangeReferenceArchive* temp = _impl_.internal_range_reference_;
  _impl_.internal_range_reference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::InternalRangeReferenceArchive* RangeBackDependencyArchive::unsafe_arena_release_internal_range_reference() {
  // @@protoc_insertion_point(field_release:TSCE.RangeBackDependencyArchive.internal_range_reference)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::InternalRangeReferenceArchive* temp = _impl_.internal_range_reference_;
  _impl_.internal_range_reference_ = nullptr;
  return temp;
}
inline ::TSCE::InternalRangeReferenceArchive* RangeBackDependencyArchive::_internal_mutable_internal_range_reference() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.internal_range_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::InternalRangeReferenceArchive>(GetArenaForAllocation());
    _impl_.internal_range_reference_ = p;
  }
  return _impl_.internal_range_reference_;
}
inline ::TSCE::InternalRangeReferenceArchive* RangeBackDependencyArchive::mutable_internal_range_reference() {
  ::TSCE::InternalRangeReferenceArchive* _msg = _internal_mutable_internal_range_reference();
  // @@protoc_insertion_point(field_mutable:TSCE.RangeBackDependencyArchive.internal_range_reference)
  return _msg;
}
inline void RangeBackDependencyArchive::set_allocated_internal_range_reference(::TSCE::InternalRangeReferenceArchive* internal_range_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.internal_range_reference_;
  }
  if (internal_range_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(internal_range_reference);
    if (message_arena != submessage_arena) {
      internal_range_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, internal_range_reference, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.internal_range_reference_ = internal_range_reference;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RangeBackDependencyArchive.internal_range_reference)
}

// -------------------------------------------------------------------

// RTreeInternalNodeContentsArchive

// repeated uint32 min = 1;
inline int RTreeInternalNodeContentsArchive::_internal_min_size() const {
  return _impl_.min_.size();
}
inline int RTreeInternalNodeContentsArchive::min_size() const {
  return _internal_min_size();
}
inline void RTreeInternalNodeContentsArchive::clear_min() {
  _impl_.min_.Clear();
}
inline uint32_t RTreeInternalNodeContentsArchive::_internal_min(int index) const {
  return _impl_.min_.Get(index);
}
inline uint32_t RTreeInternalNodeContentsArchive::min(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeInternalNodeContentsArchive.min)
  return _internal_min(index);
}
inline void RTreeInternalNodeContentsArchive::set_min(int index, uint32_t value) {
  _impl_.min_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.RTreeInternalNodeContentsArchive.min)
}
inline void RTreeInternalNodeContentsArchive::_internal_add_min(uint32_t value) {
  _impl_.min_.Add(value);
}
inline void RTreeInternalNodeContentsArchive::add_min(uint32_t value) {
  _internal_add_min(value);
  // @@protoc_insertion_point(field_add:TSCE.RTreeInternalNodeContentsArchive.min)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
RTreeInternalNodeContentsArchive::_internal_min() const {
  return _impl_.min_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
RTreeInternalNodeContentsArchive::min() const {
  // @@protoc_insertion_point(field_list:TSCE.RTreeInternalNodeContentsArchive.min)
  return _internal_min();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
RTreeInternalNodeContentsArchive::_internal_mutable_min() {
  return &_impl_.min_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
RTreeInternalNodeContentsArchive::mutable_min() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.RTreeInternalNodeContentsArchive.min)
  return _internal_mutable_min();
}

// repeated uint32 max = 2;
inline int RTreeInternalNodeContentsArchive::_internal_max_size() const {
  return _impl_.max_.size();
}
inline int RTreeInternalNodeContentsArchive::max_size() const {
  return _internal_max_size();
}
inline void RTreeInternalNodeContentsArchive::clear_max() {
  _impl_.max_.Clear();
}
inline uint32_t RTreeInternalNodeContentsArchive::_internal_max(int index) const {
  return _impl_.max_.Get(index);
}
inline uint32_t RTreeInternalNodeContentsArchive::max(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeInternalNodeContentsArchive.max)
  return _internal_max(index);
}
inline void RTreeInternalNodeContentsArchive::set_max(int index, uint32_t value) {
  _impl_.max_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.RTreeInternalNodeContentsArchive.max)
}
inline void RTreeInternalNodeContentsArchive::_internal_add_max(uint32_t value) {
  _impl_.max_.Add(value);
}
inline void RTreeInternalNodeContentsArchive::add_max(uint32_t value) {
  _internal_add_max(value);
  // @@protoc_insertion_point(field_add:TSCE.RTreeInternalNodeContentsArchive.max)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
RTreeInternalNodeContentsArchive::_internal_max() const {
  return _impl_.max_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
RTreeInternalNodeContentsArchive::max() const {
  // @@protoc_insertion_point(field_list:TSCE.RTreeInternalNodeContentsArchive.max)
  return _internal_max();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
RTreeInternalNodeContentsArchive::_internal_mutable_max() {
  return &_impl_.max_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
RTreeInternalNodeContentsArchive::mutable_max() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.RTreeInternalNodeContentsArchive.max)
  return _internal_mutable_max();
}

// required .TSCE.RTreeNodeArchive child = 3;
inline bool RTreeInternalNodeContentsArchive::_internal_has_child() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.child_ != nullptr);
  return value;
}
inline bool RTreeInternalNodeContentsArchive::has_child() const {
  return _internal_has_child();
}
inline void RTreeInternalNodeContentsArchive::clear_child() {
  if (_impl_.child_ != nullptr) _impl_.child_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::RTreeNodeArchive& RTreeInternalNodeContentsArchive::_internal_child() const {
  const ::TSCE::RTreeNodeArchive* p = _impl_.child_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RTreeNodeArchive&>(
      ::TSCE::_RTreeNodeArchive_default_instance_);
}
inline const ::TSCE::RTreeNodeArchive& RTreeInternalNodeContentsArchive::child() const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeInternalNodeContentsArchive.child)
  return _internal_child();
}
inline void RTreeInternalNodeContentsArchive::unsafe_arena_set_allocated_child(
    ::TSCE::RTreeNodeArchive* child) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.child_);
  }
  _impl_.child_ = child;
  if (child) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RTreeInternalNodeContentsArchive.child)
}
inline ::TSCE::RTreeNodeArchive* RTreeInternalNodeContentsArchive::release_child() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::RTreeNodeArchive* temp = _impl_.child_;
  _impl_.child_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RTreeNodeArchive* RTreeInternalNodeContentsArchive::unsafe_arena_release_child() {
  // @@protoc_insertion_point(field_release:TSCE.RTreeInternalNodeContentsArchive.child)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::RTreeNodeArchive* temp = _impl_.child_;
  _impl_.child_ = nullptr;
  return temp;
}
inline ::TSCE::RTreeNodeArchive* RTreeInternalNodeContentsArchive::_internal_mutable_child() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.child_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RTreeNodeArchive>(GetArenaForAllocation());
    _impl_.child_ = p;
  }
  return _impl_.child_;
}
inline ::TSCE::RTreeNodeArchive* RTreeInternalNodeContentsArchive::mutable_child() {
  ::TSCE::RTreeNodeArchive* _msg = _internal_mutable_child();
  // @@protoc_insertion_point(field_mutable:TSCE.RTreeInternalNodeContentsArchive.child)
  return _msg;
}
inline void RTreeInternalNodeContentsArchive::set_allocated_child(::TSCE::RTreeNodeArchive* child) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.child_;
  }
  if (child) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(child);
    if (message_arena != submessage_arena) {
      child = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, child, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.child_ = child;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RTreeInternalNodeContentsArchive.child)
}

// -------------------------------------------------------------------

// RTreeLeafNodeContentsArchive

// repeated uint32 min = 1;
inline int RTreeLeafNodeContentsArchive::_internal_min_size() const {
  return _impl_.min_.size();
}
inline int RTreeLeafNodeContentsArchive::min_size() const {
  return _internal_min_size();
}
inline void RTreeLeafNodeContentsArchive::clear_min() {
  _impl_.min_.Clear();
}
inline uint32_t RTreeLeafNodeContentsArchive::_internal_min(int index) const {
  return _impl_.min_.Get(index);
}
inline uint32_t RTreeLeafNodeContentsArchive::min(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeLeafNodeContentsArchive.min)
  return _internal_min(index);
}
inline void RTreeLeafNodeContentsArchive::set_min(int index, uint32_t value) {
  _impl_.min_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.RTreeLeafNodeContentsArchive.min)
}
inline void RTreeLeafNodeContentsArchive::_internal_add_min(uint32_t value) {
  _impl_.min_.Add(value);
}
inline void RTreeLeafNodeContentsArchive::add_min(uint32_t value) {
  _internal_add_min(value);
  // @@protoc_insertion_point(field_add:TSCE.RTreeLeafNodeContentsArchive.min)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
RTreeLeafNodeContentsArchive::_internal_min() const {
  return _impl_.min_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
RTreeLeafNodeContentsArchive::min() const {
  // @@protoc_insertion_point(field_list:TSCE.RTreeLeafNodeContentsArchive.min)
  return _internal_min();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
RTreeLeafNodeContentsArchive::_internal_mutable_min() {
  return &_impl_.min_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
RTreeLeafNodeContentsArchive::mutable_min() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.RTreeLeafNodeContentsArchive.min)
  return _internal_mutable_min();
}

// repeated uint32 max = 2;
inline int RTreeLeafNodeContentsArchive::_internal_max_size() const {
  return _impl_.max_.size();
}
inline int RTreeLeafNodeContentsArchive::max_size() const {
  return _internal_max_size();
}
inline void RTreeLeafNodeContentsArchive::clear_max() {
  _impl_.max_.Clear();
}
inline uint32_t RTreeLeafNodeContentsArchive::_internal_max(int index) const {
  return _impl_.max_.Get(index);
}
inline uint32_t RTreeLeafNodeContentsArchive::max(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeLeafNodeContentsArchive.max)
  return _internal_max(index);
}
inline void RTreeLeafNodeContentsArchive::set_max(int index, uint32_t value) {
  _impl_.max_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.RTreeLeafNodeContentsArchive.max)
}
inline void RTreeLeafNodeContentsArchive::_internal_add_max(uint32_t value) {
  _impl_.max_.Add(value);
}
inline void RTreeLeafNodeContentsArchive::add_max(uint32_t value) {
  _internal_add_max(value);
  // @@protoc_insertion_point(field_add:TSCE.RTreeLeafNodeContentsArchive.max)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
RTreeLeafNodeContentsArchive::_internal_max() const {
  return _impl_.max_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
RTreeLeafNodeContentsArchive::max() const {
  // @@protoc_insertion_point(field_list:TSCE.RTreeLeafNodeContentsArchive.max)
  return _internal_max();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
RTreeLeafNodeContentsArchive::_internal_mutable_max() {
  return &_impl_.max_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
RTreeLeafNodeContentsArchive::mutable_max() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.RTreeLeafNodeContentsArchive.max)
  return _internal_mutable_max();
}

// required .TSCE.CellReferenceArchive cell_reference = 3;
inline bool RTreeLeafNodeContentsArchive::_internal_has_cell_reference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_reference_ != nullptr);
  return value;
}
inline bool RTreeLeafNodeContentsArchive::has_cell_reference() const {
  return _internal_has_cell_reference();
}
inline void RTreeLeafNodeContentsArchive::clear_cell_reference() {
  if (_impl_.cell_reference_ != nullptr) _impl_.cell_reference_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::CellReferenceArchive& RTreeLeafNodeContentsArchive::_internal_cell_reference() const {
  const ::TSCE::CellReferenceArchive* p = _impl_.cell_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellReferenceArchive&>(
      ::TSCE::_CellReferenceArchive_default_instance_);
}
inline const ::TSCE::CellReferenceArchive& RTreeLeafNodeContentsArchive::cell_reference() const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeLeafNodeContentsArchive.cell_reference)
  return _internal_cell_reference();
}
inline void RTreeLeafNodeContentsArchive::unsafe_arena_set_allocated_cell_reference(
    ::TSCE::CellReferenceArchive* cell_reference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_reference_);
  }
  _impl_.cell_reference_ = cell_reference;
  if (cell_reference) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RTreeLeafNodeContentsArchive.cell_reference)
}
inline ::TSCE::CellReferenceArchive* RTreeLeafNodeContentsArchive::release_cell_reference() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellReferenceArchive* temp = _impl_.cell_reference_;
  _impl_.cell_reference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CellReferenceArchive* RTreeLeafNodeContentsArchive::unsafe_arena_release_cell_reference() {
  // @@protoc_insertion_point(field_release:TSCE.RTreeLeafNodeContentsArchive.cell_reference)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellReferenceArchive* temp = _impl_.cell_reference_;
  _impl_.cell_reference_ = nullptr;
  return temp;
}
inline ::TSCE::CellReferenceArchive* RTreeLeafNodeContentsArchive::_internal_mutable_cell_reference() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.cell_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellReferenceArchive>(GetArenaForAllocation());
    _impl_.cell_reference_ = p;
  }
  return _impl_.cell_reference_;
}
inline ::TSCE::CellReferenceArchive* RTreeLeafNodeContentsArchive::mutable_cell_reference() {
  ::TSCE::CellReferenceArchive* _msg = _internal_mutable_cell_reference();
  // @@protoc_insertion_point(field_mutable:TSCE.RTreeLeafNodeContentsArchive.cell_reference)
  return _msg;
}
inline void RTreeLeafNodeContentsArchive::set_allocated_cell_reference(::TSCE::CellReferenceArchive* cell_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cell_reference_;
  }
  if (cell_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cell_reference);
    if (message_arena != submessage_arena) {
      cell_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_reference, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cell_reference_ = cell_reference;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RTreeLeafNodeContentsArchive.cell_reference)
}

// -------------------------------------------------------------------

// RTreeNodeArchive

// required uint32 level = 1;
inline bool RTreeNodeArchive::_internal_has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RTreeNodeArchive::has_level() const {
  return _internal_has_level();
}
inline void RTreeNodeArchive::clear_level() {
  _impl_.level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t RTreeNodeArchive::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t RTreeNodeArchive::level() const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeNodeArchive.level)
  return _internal_level();
}
inline void RTreeNodeArchive::_internal_set_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.level_ = value;
}
inline void RTreeNodeArchive::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:TSCE.RTreeNodeArchive.level)
}

// required uint32 count = 2;
inline bool RTreeNodeArchive::_internal_has_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RTreeNodeArchive::has_count() const {
  return _internal_has_count();
}
inline void RTreeNodeArchive::clear_count() {
  _impl_.count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t RTreeNodeArchive::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t RTreeNodeArchive::count() const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeNodeArchive.count)
  return _internal_count();
}
inline void RTreeNodeArchive::_internal_set_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.count_ = value;
}
inline void RTreeNodeArchive::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:TSCE.RTreeNodeArchive.count)
}

// repeated .TSCE.RTreeInternalNodeContentsArchive internal_node_contents = 3;
inline int RTreeNodeArchive::_internal_internal_node_contents_size() const {
  return _impl_.internal_node_contents_.size();
}
inline int RTreeNodeArchive::internal_node_contents_size() const {
  return _internal_internal_node_contents_size();
}
inline void RTreeNodeArchive::clear_internal_node_contents() {
  _impl_.internal_node_contents_.Clear();
}
inline ::TSCE::RTreeInternalNodeContentsArchive* RTreeNodeArchive::mutable_internal_node_contents(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.RTreeNodeArchive.internal_node_contents)
  return _impl_.internal_node_contents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RTreeInternalNodeContentsArchive >*
RTreeNodeArchive::mutable_internal_node_contents() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.RTreeNodeArchive.internal_node_contents)
  return &_impl_.internal_node_contents_;
}
inline const ::TSCE::RTreeInternalNodeContentsArchive& RTreeNodeArchive::_internal_internal_node_contents(int index) const {
  return _impl_.internal_node_contents_.Get(index);
}
inline const ::TSCE::RTreeInternalNodeContentsArchive& RTreeNodeArchive::internal_node_contents(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeNodeArchive.internal_node_contents)
  return _internal_internal_node_contents(index);
}
inline ::TSCE::RTreeInternalNodeContentsArchive* RTreeNodeArchive::_internal_add_internal_node_contents() {
  return _impl_.internal_node_contents_.Add();
}
inline ::TSCE::RTreeInternalNodeContentsArchive* RTreeNodeArchive::add_internal_node_contents() {
  ::TSCE::RTreeInternalNodeContentsArchive* _add = _internal_add_internal_node_contents();
  // @@protoc_insertion_point(field_add:TSCE.RTreeNodeArchive.internal_node_contents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RTreeInternalNodeContentsArchive >&
RTreeNodeArchive::internal_node_contents() const {
  // @@protoc_insertion_point(field_list:TSCE.RTreeNodeArchive.internal_node_contents)
  return _impl_.internal_node_contents_;
}

// repeated .TSCE.RTreeLeafNodeContentsArchive leaf_node_contents = 4;
inline int RTreeNodeArchive::_internal_leaf_node_contents_size() const {
  return _impl_.leaf_node_contents_.size();
}
inline int RTreeNodeArchive::leaf_node_contents_size() const {
  return _internal_leaf_node_contents_size();
}
inline void RTreeNodeArchive::clear_leaf_node_contents() {
  _impl_.leaf_node_contents_.Clear();
}
inline ::TSCE::RTreeLeafNodeContentsArchive* RTreeNodeArchive::mutable_leaf_node_contents(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.RTreeNodeArchive.leaf_node_contents)
  return _impl_.leaf_node_contents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RTreeLeafNodeContentsArchive >*
RTreeNodeArchive::mutable_leaf_node_contents() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.RTreeNodeArchive.leaf_node_contents)
  return &_impl_.leaf_node_contents_;
}
inline const ::TSCE::RTreeLeafNodeContentsArchive& RTreeNodeArchive::_internal_leaf_node_contents(int index) const {
  return _impl_.leaf_node_contents_.Get(index);
}
inline const ::TSCE::RTreeLeafNodeContentsArchive& RTreeNodeArchive::leaf_node_contents(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeNodeArchive.leaf_node_contents)
  return _internal_leaf_node_contents(index);
}
inline ::TSCE::RTreeLeafNodeContentsArchive* RTreeNodeArchive::_internal_add_leaf_node_contents() {
  return _impl_.leaf_node_contents_.Add();
}
inline ::TSCE::RTreeLeafNodeContentsArchive* RTreeNodeArchive::add_leaf_node_contents() {
  ::TSCE::RTreeLeafNodeContentsArchive* _add = _internal_add_leaf_node_contents();
  // @@protoc_insertion_point(field_add:TSCE.RTreeNodeArchive.leaf_node_contents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RTreeLeafNodeContentsArchive >&
RTreeNodeArchive::leaf_node_contents() const {
  // @@protoc_insertion_point(field_list:TSCE.RTreeNodeArchive.leaf_node_contents)
  return _impl_.leaf_node_contents_;
}

// -------------------------------------------------------------------

// RTreeArchive

// required uint32 data_file_id = 1;
inline bool RTreeArchive::_internal_has_data_file_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RTreeArchive::has_data_file_id() const {
  return _internal_has_data_file_id();
}
inline void RTreeArchive::clear_data_file_id() {
  _impl_.data_file_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t RTreeArchive::_internal_data_file_id() const {
  return _impl_.data_file_id_;
}
inline uint32_t RTreeArchive::data_file_id() const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeArchive.data_file_id)
  return _internal_data_file_id();
}
inline void RTreeArchive::_internal_set_data_file_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.data_file_id_ = value;
}
inline void RTreeArchive::set_data_file_id(uint32_t value) {
  _internal_set_data_file_id(value);
  // @@protoc_insertion_point(field_set:TSCE.RTreeArchive.data_file_id)
}

// required uint32 data_size = 2;
inline bool RTreeArchive::_internal_has_data_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RTreeArchive::has_data_size() const {
  return _internal_has_data_size();
}
inline void RTreeArchive::clear_data_size() {
  _impl_.data_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t RTreeArchive::_internal_data_size() const {
  return _impl_.data_size_;
}
inline uint32_t RTreeArchive::data_size() const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeArchive.data_size)
  return _internal_data_size();
}
inline void RTreeArchive::_internal_set_data_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.data_size_ = value;
}
inline void RTreeArchive::set_data_size(uint32_t value) {
  _internal_set_data_size(value);
  // @@protoc_insertion_point(field_set:TSCE.RTreeArchive.data_size)
}

// required uint32 data_num_dims = 3;
inline bool RTreeArchive::_internal_has_data_num_dims() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RTreeArchive::has_data_num_dims() const {
  return _internal_has_data_num_dims();
}
inline void RTreeArchive::clear_data_num_dims() {
  _impl_.data_num_dims_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t RTreeArchive::_internal_data_num_dims() const {
  return _impl_.data_num_dims_;
}
inline uint32_t RTreeArchive::data_num_dims() const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeArchive.data_num_dims)
  return _internal_data_num_dims();
}
inline void RTreeArchive::_internal_set_data_num_dims(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.data_num_dims_ = value;
}
inline void RTreeArchive::set_data_num_dims(uint32_t value) {
  _internal_set_data_num_dims(value);
  // @@protoc_insertion_point(field_set:TSCE.RTreeArchive.data_num_dims)
}

// required uint32 data_elem_size = 4;
inline bool RTreeArchive::_internal_has_data_elem_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RTreeArchive::has_data_elem_size() const {
  return _internal_has_data_elem_size();
}
inline void RTreeArchive::clear_data_elem_size() {
  _impl_.data_elem_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t RTreeArchive::_internal_data_elem_size() const {
  return _impl_.data_elem_size_;
}
inline uint32_t RTreeArchive::data_elem_size() const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeArchive.data_elem_size)
  return _internal_data_elem_size();
}
inline void RTreeArchive::_internal_set_data_elem_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.data_elem_size_ = value;
}
inline void RTreeArchive::set_data_elem_size(uint32_t value) {
  _internal_set_data_elem_size(value);
  // @@protoc_insertion_point(field_set:TSCE.RTreeArchive.data_elem_size)
}

// required uint32 data_elem_real_size = 5;
inline bool RTreeArchive::_internal_has_data_elem_real_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RTreeArchive::has_data_elem_real_size() const {
  return _internal_has_data_elem_real_size();
}
inline void RTreeArchive::clear_data_elem_real_size() {
  _impl_.data_elem_real_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t RTreeArchive::_internal_data_elem_real_size() const {
  return _impl_.data_elem_real_size_;
}
inline uint32_t RTreeArchive::data_elem_real_size() const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeArchive.data_elem_real_size)
  return _internal_data_elem_real_size();
}
inline void RTreeArchive::_internal_set_data_elem_real_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.data_elem_real_size_ = value;
}
inline void RTreeArchive::set_data_elem_real_size(uint32_t value) {
  _internal_set_data_elem_real_size(value);
  // @@protoc_insertion_point(field_set:TSCE.RTreeArchive.data_elem_real_size)
}

// required uint32 data_max_nodes = 6;
inline bool RTreeArchive::_internal_has_data_max_nodes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RTreeArchive::has_data_max_nodes() const {
  return _internal_has_data_max_nodes();
}
inline void RTreeArchive::clear_data_max_nodes() {
  _impl_.data_max_nodes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t RTreeArchive::_internal_data_max_nodes() const {
  return _impl_.data_max_nodes_;
}
inline uint32_t RTreeArchive::data_max_nodes() const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeArchive.data_max_nodes)
  return _internal_data_max_nodes();
}
inline void RTreeArchive::_internal_set_data_max_nodes(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.data_max_nodes_ = value;
}
inline void RTreeArchive::set_data_max_nodes(uint32_t value) {
  _internal_set_data_max_nodes(value);
  // @@protoc_insertion_point(field_set:TSCE.RTreeArchive.data_max_nodes)
}

// required uint32 data_min_nodes = 7;
inline bool RTreeArchive::_internal_has_data_min_nodes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RTreeArchive::has_data_min_nodes() const {
  return _internal_has_data_min_nodes();
}
inline void RTreeArchive::clear_data_min_nodes() {
  _impl_.data_min_nodes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t RTreeArchive::_internal_data_min_nodes() const {
  return _impl_.data_min_nodes_;
}
inline uint32_t RTreeArchive::data_min_nodes() const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeArchive.data_min_nodes)
  return _internal_data_min_nodes();
}
inline void RTreeArchive::_internal_set_data_min_nodes(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.data_min_nodes_ = value;
}
inline void RTreeArchive::set_data_min_nodes(uint32_t value) {
  _internal_set_data_min_nodes(value);
  // @@protoc_insertion_point(field_set:TSCE.RTreeArchive.data_min_nodes)
}

// required .TSCE.RTreeNodeArchive root = 8;
inline bool RTreeArchive::_internal_has_root() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.root_ != nullptr);
  return value;
}
inline bool RTreeArchive::has_root() const {
  return _internal_has_root();
}
inline void RTreeArchive::clear_root() {
  if (_impl_.root_ != nullptr) _impl_.root_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::RTreeNodeArchive& RTreeArchive::_internal_root() const {
  const ::TSCE::RTreeNodeArchive* p = _impl_.root_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RTreeNodeArchive&>(
      ::TSCE::_RTreeNodeArchive_default_instance_);
}
inline const ::TSCE::RTreeNodeArchive& RTreeArchive::root() const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeArchive.root)
  return _internal_root();
}
inline void RTreeArchive::unsafe_arena_set_allocated_root(
    ::TSCE::RTreeNodeArchive* root) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.root_);
  }
  _impl_.root_ = root;
  if (root) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RTreeArchive.root)
}
inline ::TSCE::RTreeNodeArchive* RTreeArchive::release_root() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::RTreeNodeArchive* temp = _impl_.root_;
  _impl_.root_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RTreeNodeArchive* RTreeArchive::unsafe_arena_release_root() {
  // @@protoc_insertion_point(field_release:TSCE.RTreeArchive.root)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::RTreeNodeArchive* temp = _impl_.root_;
  _impl_.root_ = nullptr;
  return temp;
}
inline ::TSCE::RTreeNodeArchive* RTreeArchive::_internal_mutable_root() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.root_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RTreeNodeArchive>(GetArenaForAllocation());
    _impl_.root_ = p;
  }
  return _impl_.root_;
}
inline ::TSCE::RTreeNodeArchive* RTreeArchive::mutable_root() {
  ::TSCE::RTreeNodeArchive* _msg = _internal_mutable_root();
  // @@protoc_insertion_point(field_mutable:TSCE.RTreeArchive.root)
  return _msg;
}
inline void RTreeArchive::set_allocated_root(::TSCE::RTreeNodeArchive* root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.root_;
  }
  if (root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(root);
    if (message_arena != submessage_arena) {
      root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.root_ = root;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RTreeArchive.root)
}

// -------------------------------------------------------------------

// RangeDependenciesArchive

// optional .TSCE.RTreeArchive r_tree = 1;
inline bool RangeDependenciesArchive::_internal_has_r_tree() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.r_tree_ != nullptr);
  return value;
}
inline bool RangeDependenciesArchive::has_r_tree() const {
  return _internal_has_r_tree();
}
inline void RangeDependenciesArchive::clear_r_tree() {
  if (_impl_.r_tree_ != nullptr) _impl_.r_tree_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::RTreeArchive& RangeDependenciesArchive::_internal_r_tree() const {
  const ::TSCE::RTreeArchive* p = _impl_.r_tree_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RTreeArchive&>(
      ::TSCE::_RTreeArchive_default_instance_);
}
inline const ::TSCE::RTreeArchive& RangeDependenciesArchive::r_tree() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeDependenciesArchive.r_tree)
  return _internal_r_tree();
}
inline void RangeDependenciesArchive::unsafe_arena_set_allocated_r_tree(
    ::TSCE::RTreeArchive* r_tree) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.r_tree_);
  }
  _impl_.r_tree_ = r_tree;
  if (r_tree) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RangeDependenciesArchive.r_tree)
}
inline ::TSCE::RTreeArchive* RangeDependenciesArchive::release_r_tree() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::RTreeArchive* temp = _impl_.r_tree_;
  _impl_.r_tree_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RTreeArchive* RangeDependenciesArchive::unsafe_arena_release_r_tree() {
  // @@protoc_insertion_point(field_release:TSCE.RangeDependenciesArchive.r_tree)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::RTreeArchive* temp = _impl_.r_tree_;
  _impl_.r_tree_ = nullptr;
  return temp;
}
inline ::TSCE::RTreeArchive* RangeDependenciesArchive::_internal_mutable_r_tree() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.r_tree_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RTreeArchive>(GetArenaForAllocation());
    _impl_.r_tree_ = p;
  }
  return _impl_.r_tree_;
}
inline ::TSCE::RTreeArchive* RangeDependenciesArchive::mutable_r_tree() {
  ::TSCE::RTreeArchive* _msg = _internal_mutable_r_tree();
  // @@protoc_insertion_point(field_mutable:TSCE.RangeDependenciesArchive.r_tree)
  return _msg;
}
inline void RangeDependenciesArchive::set_allocated_r_tree(::TSCE::RTreeArchive* r_tree) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.r_tree_;
  }
  if (r_tree) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(r_tree);
    if (message_arena != submessage_arena) {
      r_tree = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, r_tree, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.r_tree_ = r_tree;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RangeDependenciesArchive.r_tree)
}

// repeated .TSCE.RangeBackDependencyArchive back_dependency = 2;
inline int RangeDependenciesArchive::_internal_back_dependency_size() const {
  return _impl_.back_dependency_.size();
}
inline int RangeDependenciesArchive::back_dependency_size() const {
  return _internal_back_dependency_size();
}
inline void RangeDependenciesArchive::clear_back_dependency() {
  _impl_.back_dependency_.Clear();
}
inline ::TSCE::RangeBackDependencyArchive* RangeDependenciesArchive::mutable_back_dependency(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.RangeDependenciesArchive.back_dependency)
  return _impl_.back_dependency_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RangeBackDependencyArchive >*
RangeDependenciesArchive::mutable_back_dependency() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.RangeDependenciesArchive.back_dependency)
  return &_impl_.back_dependency_;
}
inline const ::TSCE::RangeBackDependencyArchive& RangeDependenciesArchive::_internal_back_dependency(int index) const {
  return _impl_.back_dependency_.Get(index);
}
inline const ::TSCE::RangeBackDependencyArchive& RangeDependenciesArchive::back_dependency(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.RangeDependenciesArchive.back_dependency)
  return _internal_back_dependency(index);
}
inline ::TSCE::RangeBackDependencyArchive* RangeDependenciesArchive::_internal_add_back_dependency() {
  return _impl_.back_dependency_.Add();
}
inline ::TSCE::RangeBackDependencyArchive* RangeDependenciesArchive::add_back_dependency() {
  ::TSCE::RangeBackDependencyArchive* _add = _internal_add_back_dependency();
  // @@protoc_insertion_point(field_add:TSCE.RangeDependenciesArchive.back_dependency)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RangeBackDependencyArchive >&
RangeDependenciesArchive::back_dependency() const {
  // @@protoc_insertion_point(field_list:TSCE.RangeDependenciesArchive.back_dependency)
  return _impl_.back_dependency_;
}

// -------------------------------------------------------------------

// SpanningDependenciesArchive_ReferringColumnToLocalCells

// required uint32 column = 1;
inline bool SpanningDependenciesArchive_ReferringColumnToLocalCells::_internal_has_column() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SpanningDependenciesArchive_ReferringColumnToLocalCells::has_column() const {
  return _internal_has_column();
}
inline void SpanningDependenciesArchive_ReferringColumnToLocalCells::clear_column() {
  _impl_.column_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t SpanningDependenciesArchive_ReferringColumnToLocalCells::_internal_column() const {
  return _impl_.column_;
}
inline uint32_t SpanningDependenciesArchive_ReferringColumnToLocalCells::column() const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells.column)
  return _internal_column();
}
inline void SpanningDependenciesArchive_ReferringColumnToLocalCells::_internal_set_column(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.column_ = value;
}
inline void SpanningDependenciesArchive_ReferringColumnToLocalCells::set_column(uint32_t value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells.column)
}

// required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
inline bool SpanningDependenciesArchive_ReferringColumnToLocalCells::_internal_has_range_context() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SpanningDependenciesArchive_ReferringColumnToLocalCells::has_range_context() const {
  return _internal_has_range_context();
}
inline void SpanningDependenciesArchive_ReferringColumnToLocalCells::clear_range_context() {
  _impl_.range_context_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::TSCE::SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive_ReferringColumnToLocalCells::_internal_range_context() const {
  return static_cast< ::TSCE::SpanningDependenciesArchive_RangeContext >(_impl_.range_context_);
}
inline ::TSCE::SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive_ReferringColumnToLocalCells::range_context() const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells.range_context)
  return _internal_range_context();
}
inline void SpanningDependenciesArchive_ReferringColumnToLocalCells::_internal_set_range_context(::TSCE::SpanningDependenciesArchive_RangeContext value) {
  assert(::TSCE::SpanningDependenciesArchive_RangeContext_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.range_context_ = value;
}
inline void SpanningDependenciesArchive_ReferringColumnToLocalCells::set_range_context(::TSCE::SpanningDependenciesArchive_RangeContext value) {
  _internal_set_range_context(value);
  // @@protoc_insertion_point(field_set:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells.range_context)
}

// repeated .TSCE.CellCoordinateArchive cell_coordinate = 3;
inline int SpanningDependenciesArchive_ReferringColumnToLocalCells::_internal_cell_coordinate_size() const {
  return _impl_.cell_coordinate_.size();
}
inline int SpanningDependenciesArchive_ReferringColumnToLocalCells::cell_coordinate_size() const {
  return _internal_cell_coordinate_size();
}
inline void SpanningDependenciesArchive_ReferringColumnToLocalCells::clear_cell_coordinate() {
  _impl_.cell_coordinate_.Clear();
}
inline ::TSCE::CellCoordinateArchive* SpanningDependenciesArchive_ReferringColumnToLocalCells::mutable_cell_coordinate(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells.cell_coordinate)
  return _impl_.cell_coordinate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >*
SpanningDependenciesArchive_ReferringColumnToLocalCells::mutable_cell_coordinate() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells.cell_coordinate)
  return &_impl_.cell_coordinate_;
}
inline const ::TSCE::CellCoordinateArchive& SpanningDependenciesArchive_ReferringColumnToLocalCells::_internal_cell_coordinate(int index) const {
  return _impl_.cell_coordinate_.Get(index);
}
inline const ::TSCE::CellCoordinateArchive& SpanningDependenciesArchive_ReferringColumnToLocalCells::cell_coordinate(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells.cell_coordinate)
  return _internal_cell_coordinate(index);
}
inline ::TSCE::CellCoordinateArchive* SpanningDependenciesArchive_ReferringColumnToLocalCells::_internal_add_cell_coordinate() {
  return _impl_.cell_coordinate_.Add();
}
inline ::TSCE::CellCoordinateArchive* SpanningDependenciesArchive_ReferringColumnToLocalCells::add_cell_coordinate() {
  ::TSCE::CellCoordinateArchive* _add = _internal_add_cell_coordinate();
  // @@protoc_insertion_point(field_add:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells.cell_coordinate)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >&
SpanningDependenciesArchive_ReferringColumnToLocalCells::cell_coordinate() const {
  // @@protoc_insertion_point(field_list:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells.cell_coordinate)
  return _impl_.cell_coordinate_;
}

// -------------------------------------------------------------------

// SpanningDependenciesArchive_ReferringColumnToRemoteCells

// required uint32 column = 1;
inline bool SpanningDependenciesArchive_ReferringColumnToRemoteCells::_internal_has_column() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SpanningDependenciesArchive_ReferringColumnToRemoteCells::has_column() const {
  return _internal_has_column();
}
inline void SpanningDependenciesArchive_ReferringColumnToRemoteCells::clear_column() {
  _impl_.column_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t SpanningDependenciesArchive_ReferringColumnToRemoteCells::_internal_column() const {
  return _impl_.column_;
}
inline uint32_t SpanningDependenciesArchive_ReferringColumnToRemoteCells::column() const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells.column)
  return _internal_column();
}
inline void SpanningDependenciesArchive_ReferringColumnToRemoteCells::_internal_set_column(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.column_ = value;
}
inline void SpanningDependenciesArchive_ReferringColumnToRemoteCells::set_column(uint32_t value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells.column)
}

// required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
inline bool SpanningDependenciesArchive_ReferringColumnToRemoteCells::_internal_has_range_context() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SpanningDependenciesArchive_ReferringColumnToRemoteCells::has_range_context() const {
  return _internal_has_range_context();
}
inline void SpanningDependenciesArchive_ReferringColumnToRemoteCells::clear_range_context() {
  _impl_.range_context_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::TSCE::SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive_ReferringColumnToRemoteCells::_internal_range_context() const {
  return static_cast< ::TSCE::SpanningDependenciesArchive_RangeContext >(_impl_.range_context_);
}
inline ::TSCE::SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive_ReferringColumnToRemoteCells::range_context() const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells.range_context)
  return _internal_range_context();
}
inline void SpanningDependenciesArchive_ReferringColumnToRemoteCells::_internal_set_range_context(::TSCE::SpanningDependenciesArchive_RangeContext value) {
  assert(::TSCE::SpanningDependenciesArchive_RangeContext_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.range_context_ = value;
}
inline void SpanningDependenciesArchive_ReferringColumnToRemoteCells::set_range_context(::TSCE::SpanningDependenciesArchive_RangeContext value) {
  _internal_set_range_context(value);
  // @@protoc_insertion_point(field_set:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells.range_context)
}

// repeated .TSCE.InternalCellReferenceArchive internal_cell_reference = 3;
inline int SpanningDependenciesArchive_ReferringColumnToRemoteCells::_internal_internal_cell_reference_size() const {
  return _impl_.internal_cell_reference_.size();
}
inline int SpanningDependenciesArchive_ReferringColumnToRemoteCells::internal_cell_reference_size() const {
  return _internal_internal_cell_reference_size();
}
inline void SpanningDependenciesArchive_ReferringColumnToRemoteCells::clear_internal_cell_reference() {
  _impl_.internal_cell_reference_.Clear();
}
inline ::TSCE::InternalCellReferenceArchive* SpanningDependenciesArchive_ReferringColumnToRemoteCells::mutable_internal_cell_reference(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells.internal_cell_reference)
  return _impl_.internal_cell_reference_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive >*
SpanningDependenciesArchive_ReferringColumnToRemoteCells::mutable_internal_cell_reference() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells.internal_cell_reference)
  return &_impl_.internal_cell_reference_;
}
inline const ::TSCE::InternalCellReferenceArchive& SpanningDependenciesArchive_ReferringColumnToRemoteCells::_internal_internal_cell_reference(int index) const {
  return _impl_.internal_cell_reference_.Get(index);
}
inline const ::TSCE::InternalCellReferenceArchive& SpanningDependenciesArchive_ReferringColumnToRemoteCells::internal_cell_reference(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells.internal_cell_reference)
  return _internal_internal_cell_reference(index);
}
inline ::TSCE::InternalCellReferenceArchive* SpanningDependenciesArchive_ReferringColumnToRemoteCells::_internal_add_internal_cell_reference() {
  return _impl_.internal_cell_reference_.Add();
}
inline ::TSCE::InternalCellReferenceArchive* SpanningDependenciesArchive_ReferringColumnToRemoteCells::add_internal_cell_reference() {
  ::TSCE::InternalCellReferenceArchive* _add = _internal_add_internal_cell_reference();
  // @@protoc_insertion_point(field_add:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells.internal_cell_reference)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive >&
SpanningDependenciesArchive_ReferringColumnToRemoteCells::internal_cell_reference() const {
  // @@protoc_insertion_point(field_list:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells.internal_cell_reference)
  return _impl_.internal_cell_reference_;
}

// -------------------------------------------------------------------

// SpanningDependenciesArchive

// repeated uint32 column = 1;
inline int SpanningDependenciesArchive::_internal_column_size() const {
  return _impl_.column_.size();
}
inline int SpanningDependenciesArchive::column_size() const {
  return _internal_column_size();
}
inline void SpanningDependenciesArchive::clear_column() {
  _impl_.column_.Clear();
}
inline uint32_t SpanningDependenciesArchive::_internal_column(int index) const {
  return _impl_.column_.Get(index);
}
inline uint32_t SpanningDependenciesArchive::column(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesArchive.column)
  return _internal_column(index);
}
inline void SpanningDependenciesArchive::set_column(int index, uint32_t value) {
  _impl_.column_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.SpanningDependenciesArchive.column)
}
inline void SpanningDependenciesArchive::_internal_add_column(uint32_t value) {
  _impl_.column_.Add(value);
}
inline void SpanningDependenciesArchive::add_column(uint32_t value) {
  _internal_add_column(value);
  // @@protoc_insertion_point(field_add:TSCE.SpanningDependenciesArchive.column)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SpanningDependenciesArchive::_internal_column() const {
  return _impl_.column_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SpanningDependenciesArchive::column() const {
  // @@protoc_insertion_point(field_list:TSCE.SpanningDependenciesArchive.column)
  return _internal_column();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SpanningDependenciesArchive::_internal_mutable_column() {
  return &_impl_.column_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SpanningDependenciesArchive::mutable_column() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.SpanningDependenciesArchive.column)
  return _internal_mutable_column();
}

// repeated .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
inline int SpanningDependenciesArchive::_internal_range_context_size() const {
  return _impl_.range_context_.size();
}
inline int SpanningDependenciesArchive::range_context_size() const {
  return _internal_range_context_size();
}
inline void SpanningDependenciesArchive::clear_range_context() {
  _impl_.range_context_.Clear();
}
inline ::TSCE::SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive::_internal_range_context(int index) const {
  return static_cast< ::TSCE::SpanningDependenciesArchive_RangeContext >(_impl_.range_context_.Get(index));
}
inline ::TSCE::SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive::range_context(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesArchive.range_context)
  return _internal_range_context(index);
}
inline void SpanningDependenciesArchive::set_range_context(int index, ::TSCE::SpanningDependenciesArchive_RangeContext value) {
  assert(::TSCE::SpanningDependenciesArchive_RangeContext_IsValid(value));
  _impl_.range_context_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.SpanningDependenciesArchive.range_context)
}
inline void SpanningDependenciesArchive::_internal_add_range_context(::TSCE::SpanningDependenciesArchive_RangeContext value) {
  assert(::TSCE::SpanningDependenciesArchive_RangeContext_IsValid(value));
  _impl_.range_context_.Add(value);
}
inline void SpanningDependenciesArchive::add_range_context(::TSCE::SpanningDependenciesArchive_RangeContext value) {
  _internal_add_range_context(value);
  // @@protoc_insertion_point(field_add:TSCE.SpanningDependenciesArchive.range_context)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SpanningDependenciesArchive::range_context() const {
  // @@protoc_insertion_point(field_list:TSCE.SpanningDependenciesArchive.range_context)
  return _impl_.range_context_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SpanningDependenciesArchive::_internal_mutable_range_context() {
  return &_impl_.range_context_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SpanningDependenciesArchive::mutable_range_context() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.SpanningDependenciesArchive.range_context)
  return _internal_mutable_range_context();
}

// repeated .TSCE.CellReferenceArchive cell = 3;
inline int SpanningDependenciesArchive::_internal_cell_size() const {
  return _impl_.cell_.size();
}
inline int SpanningDependenciesArchive::cell_size() const {
  return _internal_cell_size();
}
inline void SpanningDependenciesArchive::clear_cell() {
  _impl_.cell_.Clear();
}
inline ::TSCE::CellReferenceArchive* SpanningDependenciesArchive::mutable_cell(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.SpanningDependenciesArchive.cell)
  return _impl_.cell_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellReferenceArchive >*
SpanningDependenciesArchive::mutable_cell() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.SpanningDependenciesArchive.cell)
  return &_impl_.cell_;
}
inline const ::TSCE::CellReferenceArchive& SpanningDependenciesArchive::_internal_cell(int index) const {
  return _impl_.cell_.Get(index);
}
inline const ::TSCE::CellReferenceArchive& SpanningDependenciesArchive::cell(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesArchive.cell)
  return _internal_cell(index);
}
inline ::TSCE::CellReferenceArchive* SpanningDependenciesArchive::_internal_add_cell() {
  return _impl_.cell_.Add();
}
inline ::TSCE::CellReferenceArchive* SpanningDependenciesArchive::add_cell() {
  ::TSCE::CellReferenceArchive* _add = _internal_add_cell();
  // @@protoc_insertion_point(field_add:TSCE.SpanningDependenciesArchive.cell)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellReferenceArchive >&
SpanningDependenciesArchive::cell() const {
  // @@protoc_insertion_point(field_list:TSCE.SpanningDependenciesArchive.cell)
  return _impl_.cell_;
}

// optional .TSCE.RangeCoordinateArchive total_range_for_deleted_table = 4;
inline bool SpanningDependenciesArchive::_internal_has_total_range_for_deleted_table() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.total_range_for_deleted_table_ != nullptr);
  return value;
}
inline bool SpanningDependenciesArchive::has_total_range_for_deleted_table() const {
  return _internal_has_total_range_for_deleted_table();
}
inline void SpanningDependenciesArchive::clear_total_range_for_deleted_table() {
  if (_impl_.total_range_for_deleted_table_ != nullptr) _impl_.total_range_for_deleted_table_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::RangeCoordinateArchive& SpanningDependenciesArchive::_internal_total_range_for_deleted_table() const {
  const ::TSCE::RangeCoordinateArchive* p = _impl_.total_range_for_deleted_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeCoordinateArchive&>(
      ::TSCE::_RangeCoordinateArchive_default_instance_);
}
inline const ::TSCE::RangeCoordinateArchive& SpanningDependenciesArchive::total_range_for_deleted_table() const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesArchive.total_range_for_deleted_table)
  return _internal_total_range_for_deleted_table();
}
inline void SpanningDependenciesArchive::unsafe_arena_set_allocated_total_range_for_deleted_table(
    ::TSCE::RangeCoordinateArchive* total_range_for_deleted_table) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_range_for_deleted_table_);
  }
  _impl_.total_range_for_deleted_table_ = total_range_for_deleted_table;
  if (total_range_for_deleted_table) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.SpanningDependenciesArchive.total_range_for_deleted_table)
}
inline ::TSCE::RangeCoordinateArchive* SpanningDependenciesArchive::release_total_range_for_deleted_table() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::RangeCoordinateArchive* temp = _impl_.total_range_for_deleted_table_;
  _impl_.total_range_for_deleted_table_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* SpanningDependenciesArchive::unsafe_arena_release_total_range_for_deleted_table() {
  // @@protoc_insertion_point(field_release:TSCE.SpanningDependenciesArchive.total_range_for_deleted_table)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::RangeCoordinateArchive* temp = _impl_.total_range_for_deleted_table_;
  _impl_.total_range_for_deleted_table_ = nullptr;
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* SpanningDependenciesArchive::_internal_mutable_total_range_for_deleted_table() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.total_range_for_deleted_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeCoordinateArchive>(GetArenaForAllocation());
    _impl_.total_range_for_deleted_table_ = p;
  }
  return _impl_.total_range_for_deleted_table_;
}
inline ::TSCE::RangeCoordinateArchive* SpanningDependenciesArchive::mutable_total_range_for_deleted_table() {
  ::TSCE::RangeCoordinateArchive* _msg = _internal_mutable_total_range_for_deleted_table();
  // @@protoc_insertion_point(field_mutable:TSCE.SpanningDependenciesArchive.total_range_for_deleted_table)
  return _msg;
}
inline void SpanningDependenciesArchive::set_allocated_total_range_for_deleted_table(::TSCE::RangeCoordinateArchive* total_range_for_deleted_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.total_range_for_deleted_table_;
  }
  if (total_range_for_deleted_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(total_range_for_deleted_table);
    if (message_arena != submessage_arena) {
      total_range_for_deleted_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_range_for_deleted_table, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.total_range_for_deleted_table_ = total_range_for_deleted_table;
  // @@protoc_insertion_point(field_set_allocated:TSCE.SpanningDependenciesArchive.total_range_for_deleted_table)
}

// optional .TSCE.RangeCoordinateArchive body_range_for_deleted_table = 5;
inline bool SpanningDependenciesArchive::_internal_has_body_range_for_deleted_table() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.body_range_for_deleted_table_ != nullptr);
  return value;
}
inline bool SpanningDependenciesArchive::has_body_range_for_deleted_table() const {
  return _internal_has_body_range_for_deleted_table();
}
inline void SpanningDependenciesArchive::clear_body_range_for_deleted_table() {
  if (_impl_.body_range_for_deleted_table_ != nullptr) _impl_.body_range_for_deleted_table_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::RangeCoordinateArchive& SpanningDependenciesArchive::_internal_body_range_for_deleted_table() const {
  const ::TSCE::RangeCoordinateArchive* p = _impl_.body_range_for_deleted_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeCoordinateArchive&>(
      ::TSCE::_RangeCoordinateArchive_default_instance_);
}
inline const ::TSCE::RangeCoordinateArchive& SpanningDependenciesArchive::body_range_for_deleted_table() const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesArchive.body_range_for_deleted_table)
  return _internal_body_range_for_deleted_table();
}
inline void SpanningDependenciesArchive::unsafe_arena_set_allocated_body_range_for_deleted_table(
    ::TSCE::RangeCoordinateArchive* body_range_for_deleted_table) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_range_for_deleted_table_);
  }
  _impl_.body_range_for_deleted_table_ = body_range_for_deleted_table;
  if (body_range_for_deleted_table) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.SpanningDependenciesArchive.body_range_for_deleted_table)
}
inline ::TSCE::RangeCoordinateArchive* SpanningDependenciesArchive::release_body_range_for_deleted_table() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::RangeCoordinateArchive* temp = _impl_.body_range_for_deleted_table_;
  _impl_.body_range_for_deleted_table_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* SpanningDependenciesArchive::unsafe_arena_release_body_range_for_deleted_table() {
  // @@protoc_insertion_point(field_release:TSCE.SpanningDependenciesArchive.body_range_for_deleted_table)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::RangeCoordinateArchive* temp = _impl_.body_range_for_deleted_table_;
  _impl_.body_range_for_deleted_table_ = nullptr;
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* SpanningDependenciesArchive::_internal_mutable_body_range_for_deleted_table() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.body_range_for_deleted_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeCoordinateArchive>(GetArenaForAllocation());
    _impl_.body_range_for_deleted_table_ = p;
  }
  return _impl_.body_range_for_deleted_table_;
}
inline ::TSCE::RangeCoordinateArchive* SpanningDependenciesArchive::mutable_body_range_for_deleted_table() {
  ::TSCE::RangeCoordinateArchive* _msg = _internal_mutable_body_range_for_deleted_table();
  // @@protoc_insertion_point(field_mutable:TSCE.SpanningDependenciesArchive.body_range_for_deleted_table)
  return _msg;
}
inline void SpanningDependenciesArchive::set_allocated_body_range_for_deleted_table(::TSCE::RangeCoordinateArchive* body_range_for_deleted_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.body_range_for_deleted_table_;
  }
  if (body_range_for_deleted_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(body_range_for_deleted_table);
    if (message_arena != submessage_arena) {
      body_range_for_deleted_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body_range_for_deleted_table, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.body_range_for_deleted_table_ = body_range_for_deleted_table;
  // @@protoc_insertion_point(field_set_allocated:TSCE.SpanningDependenciesArchive.body_range_for_deleted_table)
}

// repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells referring_column_to_local_cells = 6;
inline int SpanningDependenciesArchive::_internal_referring_column_to_local_cells_size() const {
  return _impl_.referring_column_to_local_cells_.size();
}
inline int SpanningDependenciesArchive::referring_column_to_local_cells_size() const {
  return _internal_referring_column_to_local_cells_size();
}
inline void SpanningDependenciesArchive::clear_referring_column_to_local_cells() {
  _impl_.referring_column_to_local_cells_.Clear();
}
inline ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells* SpanningDependenciesArchive::mutable_referring_column_to_local_cells(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.SpanningDependenciesArchive.referring_column_to_local_cells)
  return _impl_.referring_column_to_local_cells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells >*
SpanningDependenciesArchive::mutable_referring_column_to_local_cells() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.SpanningDependenciesArchive.referring_column_to_local_cells)
  return &_impl_.referring_column_to_local_cells_;
}
inline const ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells& SpanningDependenciesArchive::_internal_referring_column_to_local_cells(int index) const {
  return _impl_.referring_column_to_local_cells_.Get(index);
}
inline const ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells& SpanningDependenciesArchive::referring_column_to_local_cells(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesArchive.referring_column_to_local_cells)
  return _internal_referring_column_to_local_cells(index);
}
inline ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells* SpanningDependenciesArchive::_internal_add_referring_column_to_local_cells() {
  return _impl_.referring_column_to_local_cells_.Add();
}
inline ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells* SpanningDependenciesArchive::add_referring_column_to_local_cells() {
  ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells* _add = _internal_add_referring_column_to_local_cells();
  // @@protoc_insertion_point(field_add:TSCE.SpanningDependenciesArchive.referring_column_to_local_cells)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells >&
SpanningDependenciesArchive::referring_column_to_local_cells() const {
  // @@protoc_insertion_point(field_list:TSCE.SpanningDependenciesArchive.referring_column_to_local_cells)
  return _impl_.referring_column_to_local_cells_;
}

// repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells referring_column_to_remote_cells = 7;
inline int SpanningDependenciesArchive::_internal_referring_column_to_remote_cells_size() const {
  return _impl_.referring_column_to_remote_cells_.size();
}
inline int SpanningDependenciesArchive::referring_column_to_remote_cells_size() const {
  return _internal_referring_column_to_remote_cells_size();
}
inline void SpanningDependenciesArchive::clear_referring_column_to_remote_cells() {
  _impl_.referring_column_to_remote_cells_.Clear();
}
inline ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells* SpanningDependenciesArchive::mutable_referring_column_to_remote_cells(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.SpanningDependenciesArchive.referring_column_to_remote_cells)
  return _impl_.referring_column_to_remote_cells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells >*
SpanningDependenciesArchive::mutable_referring_column_to_remote_cells() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.SpanningDependenciesArchive.referring_column_to_remote_cells)
  return &_impl_.referring_column_to_remote_cells_;
}
inline const ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells& SpanningDependenciesArchive::_internal_referring_column_to_remote_cells(int index) const {
  return _impl_.referring_column_to_remote_cells_.Get(index);
}
inline const ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells& SpanningDependenciesArchive::referring_column_to_remote_cells(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesArchive.referring_column_to_remote_cells)
  return _internal_referring_column_to_remote_cells(index);
}
inline ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells* SpanningDependenciesArchive::_internal_add_referring_column_to_remote_cells() {
  return _impl_.referring_column_to_remote_cells_.Add();
}
inline ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells* SpanningDependenciesArchive::add_referring_column_to_remote_cells() {
  ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells* _add = _internal_add_referring_column_to_remote_cells();
  // @@protoc_insertion_point(field_add:TSCE.SpanningDependenciesArchive.referring_column_to_remote_cells)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells >&
SpanningDependenciesArchive::referring_column_to_remote_cells() const {
  // @@protoc_insertion_point(field_list:TSCE.SpanningDependenciesArchive.referring_column_to_remote_cells)
  return _impl_.referring_column_to_remote_cells_;
}

// -------------------------------------------------------------------

// WholeOwnerDependenciesArchive

// repeated .TSCE.InternalCellReferenceArchive dependent_cell = 1;
inline int WholeOwnerDependenciesArchive::_internal_dependent_cell_size() const {
  return _impl_.dependent_cell_.size();
}
inline int WholeOwnerDependenciesArchive::dependent_cell_size() const {
  return _internal_dependent_cell_size();
}
inline void WholeOwnerDependenciesArchive::clear_dependent_cell() {
  _impl_.dependent_cell_.Clear();
}
inline ::TSCE::InternalCellReferenceArchive* WholeOwnerDependenciesArchive::mutable_dependent_cell(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.WholeOwnerDependenciesArchive.dependent_cell)
  return _impl_.dependent_cell_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive >*
WholeOwnerDependenciesArchive::mutable_dependent_cell() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.WholeOwnerDependenciesArchive.dependent_cell)
  return &_impl_.dependent_cell_;
}
inline const ::TSCE::InternalCellReferenceArchive& WholeOwnerDependenciesArchive::_internal_dependent_cell(int index) const {
  return _impl_.dependent_cell_.Get(index);
}
inline const ::TSCE::InternalCellReferenceArchive& WholeOwnerDependenciesArchive::dependent_cell(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.WholeOwnerDependenciesArchive.dependent_cell)
  return _internal_dependent_cell(index);
}
inline ::TSCE::InternalCellReferenceArchive* WholeOwnerDependenciesArchive::_internal_add_dependent_cell() {
  return _impl_.dependent_cell_.Add();
}
inline ::TSCE::InternalCellReferenceArchive* WholeOwnerDependenciesArchive::add_dependent_cell() {
  ::TSCE::InternalCellReferenceArchive* _add = _internal_add_dependent_cell();
  // @@protoc_insertion_point(field_add:TSCE.WholeOwnerDependenciesArchive.dependent_cell)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive >&
WholeOwnerDependenciesArchive::dependent_cell() const {
  // @@protoc_insertion_point(field_list:TSCE.WholeOwnerDependenciesArchive.dependent_cell)
  return _impl_.dependent_cell_;
}

// -------------------------------------------------------------------

// FormulaOwnerInfoArchive

// required .TSCE.CFUUIDArchive formula_owner_id = 1;
inline bool FormulaOwnerInfoArchive::_internal_has_formula_owner_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.formula_owner_id_ != nullptr);
  return value;
}
inline bool FormulaOwnerInfoArchive::has_formula_owner_id() const {
  return _internal_has_formula_owner_id();
}
inline void FormulaOwnerInfoArchive::clear_formula_owner_id() {
  if (_impl_.formula_owner_id_ != nullptr) _impl_.formula_owner_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::CFUUIDArchive& FormulaOwnerInfoArchive::_internal_formula_owner_id() const {
  const ::TSCE::CFUUIDArchive* p = _impl_.formula_owner_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CFUUIDArchive&>(
      ::TSCE::_CFUUIDArchive_default_instance_);
}
inline const ::TSCE::CFUUIDArchive& FormulaOwnerInfoArchive::formula_owner_id() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerInfoArchive.formula_owner_id)
  return _internal_formula_owner_id();
}
inline void FormulaOwnerInfoArchive::unsafe_arena_set_allocated_formula_owner_id(
    ::TSCE::CFUUIDArchive* formula_owner_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_owner_id_);
  }
  _impl_.formula_owner_id_ = formula_owner_id;
  if (formula_owner_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaOwnerInfoArchive.formula_owner_id)
}
inline ::TSCE::CFUUIDArchive* FormulaOwnerInfoArchive::release_formula_owner_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::CFUUIDArchive* temp = _impl_.formula_owner_id_;
  _impl_.formula_owner_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CFUUIDArchive* FormulaOwnerInfoArchive::unsafe_arena_release_formula_owner_id() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaOwnerInfoArchive.formula_owner_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::CFUUIDArchive* temp = _impl_.formula_owner_id_;
  _impl_.formula_owner_id_ = nullptr;
  return temp;
}
inline ::TSCE::CFUUIDArchive* FormulaOwnerInfoArchive::_internal_mutable_formula_owner_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.formula_owner_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CFUUIDArchive>(GetArenaForAllocation());
    _impl_.formula_owner_id_ = p;
  }
  return _impl_.formula_owner_id_;
}
inline ::TSCE::CFUUIDArchive* FormulaOwnerInfoArchive::mutable_formula_owner_id() {
  ::TSCE::CFUUIDArchive* _msg = _internal_mutable_formula_owner_id();
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaOwnerInfoArchive.formula_owner_id)
  return _msg;
}
inline void FormulaOwnerInfoArchive::set_allocated_formula_owner_id(::TSCE::CFUUIDArchive* formula_owner_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.formula_owner_id_;
  }
  if (formula_owner_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(formula_owner_id);
    if (message_arena != submessage_arena) {
      formula_owner_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula_owner_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.formula_owner_id_ = formula_owner_id;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaOwnerInfoArchive.formula_owner_id)
}

// optional .TSCE.CellDependenciesArchive cell_dependencies = 2;
inline bool FormulaOwnerInfoArchive::_internal_has_cell_dependencies() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_dependencies_ != nullptr);
  return value;
}
inline bool FormulaOwnerInfoArchive::has_cell_dependencies() const {
  return _internal_has_cell_dependencies();
}
inline void FormulaOwnerInfoArchive::clear_cell_dependencies() {
  if (_impl_.cell_dependencies_ != nullptr) _impl_.cell_dependencies_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::CellDependenciesArchive& FormulaOwnerInfoArchive::_internal_cell_dependencies() const {
  const ::TSCE::CellDependenciesArchive* p = _impl_.cell_dependencies_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellDependenciesArchive&>(
      ::TSCE::_CellDependenciesArchive_default_instance_);
}
inline const ::TSCE::CellDependenciesArchive& FormulaOwnerInfoArchive::cell_dependencies() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerInfoArchive.cell_dependencies)
  return _internal_cell_dependencies();
}
inline void FormulaOwnerInfoArchive::unsafe_arena_set_allocated_cell_dependencies(
    ::TSCE::CellDependenciesArchive* cell_dependencies) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_dependencies_);
  }
  _impl_.cell_dependencies_ = cell_dependencies;
  if (cell_dependencies) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaOwnerInfoArchive.cell_dependencies)
}
inline ::TSCE::CellDependenciesArchive* FormulaOwnerInfoArchive::release_cell_dependencies() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::CellDependenciesArchive* temp = _impl_.cell_dependencies_;
  _impl_.cell_dependencies_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CellDependenciesArchive* FormulaOwnerInfoArchive::unsafe_arena_release_cell_dependencies() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaOwnerInfoArchive.cell_dependencies)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::CellDependenciesArchive* temp = _impl_.cell_dependencies_;
  _impl_.cell_dependencies_ = nullptr;
  return temp;
}
inline ::TSCE::CellDependenciesArchive* FormulaOwnerInfoArchive::_internal_mutable_cell_dependencies() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.cell_dependencies_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellDependenciesArchive>(GetArenaForAllocation());
    _impl_.cell_dependencies_ = p;
  }
  return _impl_.cell_dependencies_;
}
inline ::TSCE::CellDependenciesArchive* FormulaOwnerInfoArchive::mutable_cell_dependencies() {
  ::TSCE::CellDependenciesArchive* _msg = _internal_mutable_cell_dependencies();
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaOwnerInfoArchive.cell_dependencies)
  return _msg;
}
inline void FormulaOwnerInfoArchive::set_allocated_cell_dependencies(::TSCE::CellDependenciesArchive* cell_dependencies) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cell_dependencies_;
  }
  if (cell_dependencies) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cell_dependencies);
    if (message_arena != submessage_arena) {
      cell_dependencies = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_dependencies, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cell_dependencies_ = cell_dependencies;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaOwnerInfoArchive.cell_dependencies)
}

// optional .TSCE.RangeDependenciesArchive range_dependencies = 3;
inline bool FormulaOwnerInfoArchive::_internal_has_range_dependencies() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.range_dependencies_ != nullptr);
  return value;
}
inline bool FormulaOwnerInfoArchive::has_range_dependencies() const {
  return _internal_has_range_dependencies();
}
inline void FormulaOwnerInfoArchive::clear_range_dependencies() {
  if (_impl_.range_dependencies_ != nullptr) _impl_.range_dependencies_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCE::RangeDependenciesArchive& FormulaOwnerInfoArchive::_internal_range_dependencies() const {
  const ::TSCE::RangeDependenciesArchive* p = _impl_.range_dependencies_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeDependenciesArchive&>(
      ::TSCE::_RangeDependenciesArchive_default_instance_);
}
inline const ::TSCE::RangeDependenciesArchive& FormulaOwnerInfoArchive::range_dependencies() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerInfoArchive.range_dependencies)
  return _internal_range_dependencies();
}
inline void FormulaOwnerInfoArchive::unsafe_arena_set_allocated_range_dependencies(
    ::TSCE::RangeDependenciesArchive* range_dependencies) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.range_dependencies_);
  }
  _impl_.range_dependencies_ = range_dependencies;
  if (range_dependencies) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaOwnerInfoArchive.range_dependencies)
}
inline ::TSCE::RangeDependenciesArchive* FormulaOwnerInfoArchive::release_range_dependencies() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::RangeDependenciesArchive* temp = _impl_.range_dependencies_;
  _impl_.range_dependencies_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RangeDependenciesArchive* FormulaOwnerInfoArchive::unsafe_arena_release_range_dependencies() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaOwnerInfoArchive.range_dependencies)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::RangeDependenciesArchive* temp = _impl_.range_dependencies_;
  _impl_.range_dependencies_ = nullptr;
  return temp;
}
inline ::TSCE::RangeDependenciesArchive* FormulaOwnerInfoArchive::_internal_mutable_range_dependencies() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.range_dependencies_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeDependenciesArchive>(GetArenaForAllocation());
    _impl_.range_dependencies_ = p;
  }
  return _impl_.range_dependencies_;
}
inline ::TSCE::RangeDependenciesArchive* FormulaOwnerInfoArchive::mutable_range_dependencies() {
  ::TSCE::RangeDependenciesArchive* _msg = _internal_mutable_range_dependencies();
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaOwnerInfoArchive.range_dependencies)
  return _msg;
}
inline void FormulaOwnerInfoArchive::set_allocated_range_dependencies(::TSCE::RangeDependenciesArchive* range_dependencies) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.range_dependencies_;
  }
  if (range_dependencies) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(range_dependencies);
    if (message_arena != submessage_arena) {
      range_dependencies = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range_dependencies, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.range_dependencies_ = range_dependencies;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaOwnerInfoArchive.range_dependencies)
}

// optional .TSCE.VolatileDependenciesArchive volatile_dependencies = 4;
inline bool FormulaOwnerInfoArchive::_internal_has_volatile_dependencies() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.volatile_dependencies_ != nullptr);
  return value;
}
inline bool FormulaOwnerInfoArchive::has_volatile_dependencies() const {
  return _internal_has_volatile_dependencies();
}
inline void FormulaOwnerInfoArchive::clear_volatile_dependencies() {
  if (_impl_.volatile_dependencies_ != nullptr) _impl_.volatile_dependencies_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::TSCE::VolatileDependenciesArchive& FormulaOwnerInfoArchive::_internal_volatile_dependencies() const {
  const ::TSCE::VolatileDependenciesArchive* p = _impl_.volatile_dependencies_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::VolatileDependenciesArchive&>(
      ::TSCE::_VolatileDependenciesArchive_default_instance_);
}
inline const ::TSCE::VolatileDependenciesArchive& FormulaOwnerInfoArchive::volatile_dependencies() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerInfoArchive.volatile_dependencies)
  return _internal_volatile_dependencies();
}
inline void FormulaOwnerInfoArchive::unsafe_arena_set_allocated_volatile_dependencies(
    ::TSCE::VolatileDependenciesArchive* volatile_dependencies) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.volatile_dependencies_);
  }
  _impl_.volatile_dependencies_ = volatile_dependencies;
  if (volatile_dependencies) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaOwnerInfoArchive.volatile_dependencies)
}
inline ::TSCE::VolatileDependenciesArchive* FormulaOwnerInfoArchive::release_volatile_dependencies() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::VolatileDependenciesArchive* temp = _impl_.volatile_dependencies_;
  _impl_.volatile_dependencies_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::VolatileDependenciesArchive* FormulaOwnerInfoArchive::unsafe_arena_release_volatile_dependencies() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaOwnerInfoArchive.volatile_dependencies)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::VolatileDependenciesArchive* temp = _impl_.volatile_dependencies_;
  _impl_.volatile_dependencies_ = nullptr;
  return temp;
}
inline ::TSCE::VolatileDependenciesArchive* FormulaOwnerInfoArchive::_internal_mutable_volatile_dependencies() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.volatile_dependencies_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::VolatileDependenciesArchive>(GetArenaForAllocation());
    _impl_.volatile_dependencies_ = p;
  }
  return _impl_.volatile_dependencies_;
}
inline ::TSCE::VolatileDependenciesArchive* FormulaOwnerInfoArchive::mutable_volatile_dependencies() {
  ::TSCE::VolatileDependenciesArchive* _msg = _internal_mutable_volatile_dependencies();
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaOwnerInfoArchive.volatile_dependencies)
  return _msg;
}
inline void FormulaOwnerInfoArchive::set_allocated_volatile_dependencies(::TSCE::VolatileDependenciesArchive* volatile_dependencies) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.volatile_dependencies_;
  }
  if (volatile_dependencies) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(volatile_dependencies);
    if (message_arena != submessage_arena) {
      volatile_dependencies = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volatile_dependencies, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.volatile_dependencies_ = volatile_dependencies;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaOwnerInfoArchive.volatile_dependencies)
}

// optional .TSCE.SpanningDependenciesArchive spanning_column_dependencies = 5;
inline bool FormulaOwnerInfoArchive::_internal_has_spanning_column_dependencies() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.spanning_column_dependencies_ != nullptr);
  return value;
}
inline bool FormulaOwnerInfoArchive::has_spanning_column_dependencies() const {
  return _internal_has_spanning_column_dependencies();
}
inline void FormulaOwnerInfoArchive::clear_spanning_column_dependencies() {
  if (_impl_.spanning_column_dependencies_ != nullptr) _impl_.spanning_column_dependencies_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::TSCE::SpanningDependenciesArchive& FormulaOwnerInfoArchive::_internal_spanning_column_dependencies() const {
  const ::TSCE::SpanningDependenciesArchive* p = _impl_.spanning_column_dependencies_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::SpanningDependenciesArchive&>(
      ::TSCE::_SpanningDependenciesArchive_default_instance_);
}
inline const ::TSCE::SpanningDependenciesArchive& FormulaOwnerInfoArchive::spanning_column_dependencies() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerInfoArchive.spanning_column_dependencies)
  return _internal_spanning_column_dependencies();
}
inline void FormulaOwnerInfoArchive::unsafe_arena_set_allocated_spanning_column_dependencies(
    ::TSCE::SpanningDependenciesArchive* spanning_column_dependencies) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spanning_column_dependencies_);
  }
  _impl_.spanning_column_dependencies_ = spanning_column_dependencies;
  if (spanning_column_dependencies) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaOwnerInfoArchive.spanning_column_dependencies)
}
inline ::TSCE::SpanningDependenciesArchive* FormulaOwnerInfoArchive::release_spanning_column_dependencies() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCE::SpanningDependenciesArchive* temp = _impl_.spanning_column_dependencies_;
  _impl_.spanning_column_dependencies_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::SpanningDependenciesArchive* FormulaOwnerInfoArchive::unsafe_arena_release_spanning_column_dependencies() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaOwnerInfoArchive.spanning_column_dependencies)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCE::SpanningDependenciesArchive* temp = _impl_.spanning_column_dependencies_;
  _impl_.spanning_column_dependencies_ = nullptr;
  return temp;
}
inline ::TSCE::SpanningDependenciesArchive* FormulaOwnerInfoArchive::_internal_mutable_spanning_column_dependencies() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.spanning_column_dependencies_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::SpanningDependenciesArchive>(GetArenaForAllocation());
    _impl_.spanning_column_dependencies_ = p;
  }
  return _impl_.spanning_column_dependencies_;
}
inline ::TSCE::SpanningDependenciesArchive* FormulaOwnerInfoArchive::mutable_spanning_column_dependencies() {
  ::TSCE::SpanningDependenciesArchive* _msg = _internal_mutable_spanning_column_dependencies();
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaOwnerInfoArchive.spanning_column_dependencies)
  return _msg;
}
inline void FormulaOwnerInfoArchive::set_allocated_spanning_column_dependencies(::TSCE::SpanningDependenciesArchive* spanning_column_dependencies) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.spanning_column_dependencies_;
  }
  if (spanning_column_dependencies) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(spanning_column_dependencies);
    if (message_arena != submessage_arena) {
      spanning_column_dependencies = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spanning_column_dependencies, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.spanning_column_dependencies_ = spanning_column_dependencies;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaOwnerInfoArchive.spanning_column_dependencies)
}

// optional .TSCE.SpanningDependenciesArchive spanning_row_dependencies = 6;
inline bool FormulaOwnerInfoArchive::_internal_has_spanning_row_dependencies() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.spanning_row_dependencies_ != nullptr);
  return value;
}
inline bool FormulaOwnerInfoArchive::has_spanning_row_dependencies() const {
  return _internal_has_spanning_row_dependencies();
}
inline void FormulaOwnerInfoArchive::clear_spanning_row_dependencies() {
  if (_impl_.spanning_row_dependencies_ != nullptr) _impl_.spanning_row_dependencies_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::TSCE::SpanningDependenciesArchive& FormulaOwnerInfoArchive::_internal_spanning_row_dependencies() const {
  const ::TSCE::SpanningDependenciesArchive* p = _impl_.spanning_row_dependencies_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::SpanningDependenciesArchive&>(
      ::TSCE::_SpanningDependenciesArchive_default_instance_);
}
inline const ::TSCE::SpanningDependenciesArchive& FormulaOwnerInfoArchive::spanning_row_dependencies() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerInfoArchive.spanning_row_dependencies)
  return _internal_spanning_row_dependencies();
}
inline void FormulaOwnerInfoArchive::unsafe_arena_set_allocated_spanning_row_dependencies(
    ::TSCE::SpanningDependenciesArchive* spanning_row_dependencies) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spanning_row_dependencies_);
  }
  _impl_.spanning_row_dependencies_ = spanning_row_dependencies;
  if (spanning_row_dependencies) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaOwnerInfoArchive.spanning_row_dependencies)
}
inline ::TSCE::SpanningDependenciesArchive* FormulaOwnerInfoArchive::release_spanning_row_dependencies() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSCE::SpanningDependenciesArchive* temp = _impl_.spanning_row_dependencies_;
  _impl_.spanning_row_dependencies_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::SpanningDependenciesArchive* FormulaOwnerInfoArchive::unsafe_arena_release_spanning_row_dependencies() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaOwnerInfoArchive.spanning_row_dependencies)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSCE::SpanningDependenciesArchive* temp = _impl_.spanning_row_dependencies_;
  _impl_.spanning_row_dependencies_ = nullptr;
  return temp;
}
inline ::TSCE::SpanningDependenciesArchive* FormulaOwnerInfoArchive::_internal_mutable_spanning_row_dependencies() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.spanning_row_dependencies_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::SpanningDependenciesArchive>(GetArenaForAllocation());
    _impl_.spanning_row_dependencies_ = p;
  }
  return _impl_.spanning_row_dependencies_;
}
inline ::TSCE::SpanningDependenciesArchive* FormulaOwnerInfoArchive::mutable_spanning_row_dependencies() {
  ::TSCE::SpanningDependenciesArchive* _msg = _internal_mutable_spanning_row_dependencies();
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaOwnerInfoArchive.spanning_row_dependencies)
  return _msg;
}
inline void FormulaOwnerInfoArchive::set_allocated_spanning_row_dependencies(::TSCE::SpanningDependenciesArchive* spanning_row_dependencies) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.spanning_row_dependencies_;
  }
  if (spanning_row_dependencies) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(spanning_row_dependencies);
    if (message_arena != submessage_arena) {
      spanning_row_dependencies = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spanning_row_dependencies, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.spanning_row_dependencies_ = spanning_row_dependencies;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaOwnerInfoArchive.spanning_row_dependencies)
}

// optional .TSCE.WholeOwnerDependenciesArchive whole_owner_dependencies = 8;
inline bool FormulaOwnerInfoArchive::_internal_has_whole_owner_dependencies() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.whole_owner_dependencies_ != nullptr);
  return value;
}
inline bool FormulaOwnerInfoArchive::has_whole_owner_dependencies() const {
  return _internal_has_whole_owner_dependencies();
}
inline void FormulaOwnerInfoArchive::clear_whole_owner_dependencies() {
  if (_impl_.whole_owner_dependencies_ != nullptr) _impl_.whole_owner_dependencies_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::TSCE::WholeOwnerDependenciesArchive& FormulaOwnerInfoArchive::_internal_whole_owner_dependencies() const {
  const ::TSCE::WholeOwnerDependenciesArchive* p = _impl_.whole_owner_dependencies_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::WholeOwnerDependenciesArchive&>(
      ::TSCE::_WholeOwnerDependenciesArchive_default_instance_);
}
inline const ::TSCE::WholeOwnerDependenciesArchive& FormulaOwnerInfoArchive::whole_owner_dependencies() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerInfoArchive.whole_owner_dependencies)
  return _internal_whole_owner_dependencies();
}
inline void FormulaOwnerInfoArchive::unsafe_arena_set_allocated_whole_owner_dependencies(
    ::TSCE::WholeOwnerDependenciesArchive* whole_owner_dependencies) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.whole_owner_dependencies_);
  }
  _impl_.whole_owner_dependencies_ = whole_owner_dependencies;
  if (whole_owner_dependencies) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaOwnerInfoArchive.whole_owner_dependencies)
}
inline ::TSCE::WholeOwnerDependenciesArchive* FormulaOwnerInfoArchive::release_whole_owner_dependencies() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSCE::WholeOwnerDependenciesArchive* temp = _impl_.whole_owner_dependencies_;
  _impl_.whole_owner_dependencies_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::WholeOwnerDependenciesArchive* FormulaOwnerInfoArchive::unsafe_arena_release_whole_owner_dependencies() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaOwnerInfoArchive.whole_owner_dependencies)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSCE::WholeOwnerDependenciesArchive* temp = _impl_.whole_owner_dependencies_;
  _impl_.whole_owner_dependencies_ = nullptr;
  return temp;
}
inline ::TSCE::WholeOwnerDependenciesArchive* FormulaOwnerInfoArchive::_internal_mutable_whole_owner_dependencies() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.whole_owner_dependencies_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::WholeOwnerDependenciesArchive>(GetArenaForAllocation());
    _impl_.whole_owner_dependencies_ = p;
  }
  return _impl_.whole_owner_dependencies_;
}
inline ::TSCE::WholeOwnerDependenciesArchive* FormulaOwnerInfoArchive::mutable_whole_owner_dependencies() {
  ::TSCE::WholeOwnerDependenciesArchive* _msg = _internal_mutable_whole_owner_dependencies();
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaOwnerInfoArchive.whole_owner_dependencies)
  return _msg;
}
inline void FormulaOwnerInfoArchive::set_allocated_whole_owner_dependencies(::TSCE::WholeOwnerDependenciesArchive* whole_owner_dependencies) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.whole_owner_dependencies_;
  }
  if (whole_owner_dependencies) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(whole_owner_dependencies);
    if (message_arena != submessage_arena) {
      whole_owner_dependencies = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, whole_owner_dependencies, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.whole_owner_dependencies_ = whole_owner_dependencies;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaOwnerInfoArchive.whole_owner_dependencies)
}

// optional .TSP.Reference formula_owner = 7;
inline bool FormulaOwnerInfoArchive::_internal_has_formula_owner() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.formula_owner_ != nullptr);
  return value;
}
inline bool FormulaOwnerInfoArchive::has_formula_owner() const {
  return _internal_has_formula_owner();
}
inline const ::TSP::Reference& FormulaOwnerInfoArchive::_internal_formula_owner() const {
  const ::TSP::Reference* p = _impl_.formula_owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& FormulaOwnerInfoArchive::formula_owner() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerInfoArchive.formula_owner)
  return _internal_formula_owner();
}
inline void FormulaOwnerInfoArchive::unsafe_arena_set_allocated_formula_owner(
    ::TSP::Reference* formula_owner) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_owner_);
  }
  _impl_.formula_owner_ = formula_owner;
  if (formula_owner) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaOwnerInfoArchive.formula_owner)
}
inline ::TSP::Reference* FormulaOwnerInfoArchive::release_formula_owner() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.formula_owner_;
  _impl_.formula_owner_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* FormulaOwnerInfoArchive::unsafe_arena_release_formula_owner() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaOwnerInfoArchive.formula_owner)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.formula_owner_;
  _impl_.formula_owner_ = nullptr;
  return temp;
}
inline ::TSP::Reference* FormulaOwnerInfoArchive::_internal_mutable_formula_owner() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.formula_owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.formula_owner_ = p;
  }
  return _impl_.formula_owner_;
}
inline ::TSP::Reference* FormulaOwnerInfoArchive::mutable_formula_owner() {
  ::TSP::Reference* _msg = _internal_mutable_formula_owner();
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaOwnerInfoArchive.formula_owner)
  return _msg;
}
inline void FormulaOwnerInfoArchive::set_allocated_formula_owner(::TSP::Reference* formula_owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_owner_);
  }
  if (formula_owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_owner));
    if (message_arena != submessage_arena) {
      formula_owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula_owner, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.formula_owner_ = formula_owner;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaOwnerInfoArchive.formula_owner)
}

// -------------------------------------------------------------------

// OwnerIDMapArchive_OwnerIDMapArchiveEntry

// required uint32 internal_owner_id = 1;
inline bool OwnerIDMapArchive_OwnerIDMapArchiveEntry::_internal_has_internal_owner_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OwnerIDMapArchive_OwnerIDMapArchiveEntry::has_internal_owner_id() const {
  return _internal_has_internal_owner_id();
}
inline void OwnerIDMapArchive_OwnerIDMapArchiveEntry::clear_internal_owner_id() {
  _impl_.internal_owner_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t OwnerIDMapArchive_OwnerIDMapArchiveEntry::_internal_internal_owner_id() const {
  return _impl_.internal_owner_id_;
}
inline uint32_t OwnerIDMapArchive_OwnerIDMapArchiveEntry::internal_owner_id() const {
  // @@protoc_insertion_point(field_get:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry.internal_owner_id)
  return _internal_internal_owner_id();
}
inline void OwnerIDMapArchive_OwnerIDMapArchiveEntry::_internal_set_internal_owner_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.internal_owner_id_ = value;
}
inline void OwnerIDMapArchive_OwnerIDMapArchiveEntry::set_internal_owner_id(uint32_t value) {
  _internal_set_internal_owner_id(value);
  // @@protoc_insertion_point(field_set:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry.internal_owner_id)
}

// required .TSCE.CFUUIDArchive owner_id = 2;
inline bool OwnerIDMapArchive_OwnerIDMapArchiveEntry::_internal_has_owner_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.owner_id_ != nullptr);
  return value;
}
inline bool OwnerIDMapArchive_OwnerIDMapArchiveEntry::has_owner_id() const {
  return _internal_has_owner_id();
}
inline void OwnerIDMapArchive_OwnerIDMapArchiveEntry::clear_owner_id() {
  if (_impl_.owner_id_ != nullptr) _impl_.owner_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::CFUUIDArchive& OwnerIDMapArchive_OwnerIDMapArchiveEntry::_internal_owner_id() const {
  const ::TSCE::CFUUIDArchive* p = _impl_.owner_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CFUUIDArchive&>(
      ::TSCE::_CFUUIDArchive_default_instance_);
}
inline const ::TSCE::CFUUIDArchive& OwnerIDMapArchive_OwnerIDMapArchiveEntry::owner_id() const {
  // @@protoc_insertion_point(field_get:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry.owner_id)
  return _internal_owner_id();
}
inline void OwnerIDMapArchive_OwnerIDMapArchiveEntry::unsafe_arena_set_allocated_owner_id(
    ::TSCE::CFUUIDArchive* owner_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.owner_id_);
  }
  _impl_.owner_id_ = owner_id;
  if (owner_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry.owner_id)
}
inline ::TSCE::CFUUIDArchive* OwnerIDMapArchive_OwnerIDMapArchiveEntry::release_owner_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::CFUUIDArchive* temp = _impl_.owner_id_;
  _impl_.owner_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CFUUIDArchive* OwnerIDMapArchive_OwnerIDMapArchiveEntry::unsafe_arena_release_owner_id() {
  // @@protoc_insertion_point(field_release:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry.owner_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::CFUUIDArchive* temp = _impl_.owner_id_;
  _impl_.owner_id_ = nullptr;
  return temp;
}
inline ::TSCE::CFUUIDArchive* OwnerIDMapArchive_OwnerIDMapArchiveEntry::_internal_mutable_owner_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.owner_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CFUUIDArchive>(GetArenaForAllocation());
    _impl_.owner_id_ = p;
  }
  return _impl_.owner_id_;
}
inline ::TSCE::CFUUIDArchive* OwnerIDMapArchive_OwnerIDMapArchiveEntry::mutable_owner_id() {
  ::TSCE::CFUUIDArchive* _msg = _internal_mutable_owner_id();
  // @@protoc_insertion_point(field_mutable:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry.owner_id)
  return _msg;
}
inline void OwnerIDMapArchive_OwnerIDMapArchiveEntry::set_allocated_owner_id(::TSCE::CFUUIDArchive* owner_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.owner_id_;
  }
  if (owner_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(owner_id);
    if (message_arena != submessage_arena) {
      owner_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.owner_id_ = owner_id;
  // @@protoc_insertion_point(field_set_allocated:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry.owner_id)
}

// -------------------------------------------------------------------

// OwnerIDMapArchive

// repeated .TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry map_entry = 1;
inline int OwnerIDMapArchive::_internal_map_entry_size() const {
  return _impl_.map_entry_.size();
}
inline int OwnerIDMapArchive::map_entry_size() const {
  return _internal_map_entry_size();
}
inline void OwnerIDMapArchive::clear_map_entry() {
  _impl_.map_entry_.Clear();
}
inline ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry* OwnerIDMapArchive::mutable_map_entry(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.OwnerIDMapArchive.map_entry)
  return _impl_.map_entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry >*
OwnerIDMapArchive::mutable_map_entry() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.OwnerIDMapArchive.map_entry)
  return &_impl_.map_entry_;
}
inline const ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry& OwnerIDMapArchive::_internal_map_entry(int index) const {
  return _impl_.map_entry_.Get(index);
}
inline const ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry& OwnerIDMapArchive::map_entry(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.OwnerIDMapArchive.map_entry)
  return _internal_map_entry(index);
}
inline ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry* OwnerIDMapArchive::_internal_add_map_entry() {
  return _impl_.map_entry_.Add();
}
inline ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry* OwnerIDMapArchive::add_map_entry() {
  ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry* _add = _internal_add_map_entry();
  // @@protoc_insertion_point(field_add:TSCE.OwnerIDMapArchive.map_entry)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry >&
OwnerIDMapArchive::map_entry() const {
  // @@protoc_insertion_point(field_list:TSCE.OwnerIDMapArchive.map_entry)
  return _impl_.map_entry_;
}

// -------------------------------------------------------------------

// DependencyTrackerArchive

// repeated .TSCE.FormulaOwnerInfoArchive formula_owner_info = 1;
inline int DependencyTrackerArchive::_internal_formula_owner_info_size() const {
  return _impl_.formula_owner_info_.size();
}
inline int DependencyTrackerArchive::formula_owner_info_size() const {
  return _internal_formula_owner_info_size();
}
inline void DependencyTrackerArchive::clear_formula_owner_info() {
  _impl_.formula_owner_info_.Clear();
}
inline ::TSCE::FormulaOwnerInfoArchive* DependencyTrackerArchive::mutable_formula_owner_info(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.DependencyTrackerArchive.formula_owner_info)
  return _impl_.formula_owner_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaOwnerInfoArchive >*
DependencyTrackerArchive::mutable_formula_owner_info() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.DependencyTrackerArchive.formula_owner_info)
  return &_impl_.formula_owner_info_;
}
inline const ::TSCE::FormulaOwnerInfoArchive& DependencyTrackerArchive::_internal_formula_owner_info(int index) const {
  return _impl_.formula_owner_info_.Get(index);
}
inline const ::TSCE::FormulaOwnerInfoArchive& DependencyTrackerArchive::formula_owner_info(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.DependencyTrackerArchive.formula_owner_info)
  return _internal_formula_owner_info(index);
}
inline ::TSCE::FormulaOwnerInfoArchive* DependencyTrackerArchive::_internal_add_formula_owner_info() {
  return _impl_.formula_owner_info_.Add();
}
inline ::TSCE::FormulaOwnerInfoArchive* DependencyTrackerArchive::add_formula_owner_info() {
  ::TSCE::FormulaOwnerInfoArchive* _add = _internal_add_formula_owner_info();
  // @@protoc_insertion_point(field_add:TSCE.DependencyTrackerArchive.formula_owner_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaOwnerInfoArchive >&
DependencyTrackerArchive::formula_owner_info() const {
  // @@protoc_insertion_point(field_list:TSCE.DependencyTrackerArchive.formula_owner_info)
  return _impl_.formula_owner_info_;
}

// repeated .TSCE.CellReferenceArchive dirty_leaf = 2;
inline int DependencyTrackerArchive::_internal_dirty_leaf_size() const {
  return _impl_.dirty_leaf_.size();
}
inline int DependencyTrackerArchive::dirty_leaf_size() const {
  return _internal_dirty_leaf_size();
}
inline void DependencyTrackerArchive::clear_dirty_leaf() {
  _impl_.dirty_leaf_.Clear();
}
inline ::TSCE::CellReferenceArchive* DependencyTrackerArchive::mutable_dirty_leaf(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.DependencyTrackerArchive.dirty_leaf)
  return _impl_.dirty_leaf_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellReferenceArchive >*
DependencyTrackerArchive::mutable_dirty_leaf() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.DependencyTrackerArchive.dirty_leaf)
  return &_impl_.dirty_leaf_;
}
inline const ::TSCE::CellReferenceArchive& DependencyTrackerArchive::_internal_dirty_leaf(int index) const {
  return _impl_.dirty_leaf_.Get(index);
}
inline const ::TSCE::CellReferenceArchive& DependencyTrackerArchive::dirty_leaf(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.DependencyTrackerArchive.dirty_leaf)
  return _internal_dirty_leaf(index);
}
inline ::TSCE::CellReferenceArchive* DependencyTrackerArchive::_internal_add_dirty_leaf() {
  return _impl_.dirty_leaf_.Add();
}
inline ::TSCE::CellReferenceArchive* DependencyTrackerArchive::add_dirty_leaf() {
  ::TSCE::CellReferenceArchive* _add = _internal_add_dirty_leaf();
  // @@protoc_insertion_point(field_add:TSCE.DependencyTrackerArchive.dirty_leaf)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellReferenceArchive >&
DependencyTrackerArchive::dirty_leaf() const {
  // @@protoc_insertion_point(field_list:TSCE.DependencyTrackerArchive.dirty_leaf)
  return _impl_.dirty_leaf_;
}

// repeated .TSCE.InternalCellReferenceArchive internal_dirty_leaf = 4;
inline int DependencyTrackerArchive::_internal_internal_dirty_leaf_size() const {
  return _impl_.internal_dirty_leaf_.size();
}
inline int DependencyTrackerArchive::internal_dirty_leaf_size() const {
  return _internal_internal_dirty_leaf_size();
}
inline void DependencyTrackerArchive::clear_internal_dirty_leaf() {
  _impl_.internal_dirty_leaf_.Clear();
}
inline ::TSCE::InternalCellReferenceArchive* DependencyTrackerArchive::mutable_internal_dirty_leaf(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.DependencyTrackerArchive.internal_dirty_leaf)
  return _impl_.internal_dirty_leaf_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive >*
DependencyTrackerArchive::mutable_internal_dirty_leaf() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.DependencyTrackerArchive.internal_dirty_leaf)
  return &_impl_.internal_dirty_leaf_;
}
inline const ::TSCE::InternalCellReferenceArchive& DependencyTrackerArchive::_internal_internal_dirty_leaf(int index) const {
  return _impl_.internal_dirty_leaf_.Get(index);
}
inline const ::TSCE::InternalCellReferenceArchive& DependencyTrackerArchive::internal_dirty_leaf(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.DependencyTrackerArchive.internal_dirty_leaf)
  return _internal_internal_dirty_leaf(index);
}
inline ::TSCE::InternalCellReferenceArchive* DependencyTrackerArchive::_internal_add_internal_dirty_leaf() {
  return _impl_.internal_dirty_leaf_.Add();
}
inline ::TSCE::InternalCellReferenceArchive* DependencyTrackerArchive::add_internal_dirty_leaf() {
  ::TSCE::InternalCellReferenceArchive* _add = _internal_add_internal_dirty_leaf();
  // @@protoc_insertion_point(field_add:TSCE.DependencyTrackerArchive.internal_dirty_leaf)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive >&
DependencyTrackerArchive::internal_dirty_leaf() const {
  // @@protoc_insertion_point(field_list:TSCE.DependencyTrackerArchive.internal_dirty_leaf)
  return _impl_.internal_dirty_leaf_;
}

// optional .TSCE.OwnerIDMapArchive owner_id_map = 3;
inline bool DependencyTrackerArchive::_internal_has_owner_id_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.owner_id_map_ != nullptr);
  return value;
}
inline bool DependencyTrackerArchive::has_owner_id_map() const {
  return _internal_has_owner_id_map();
}
inline void DependencyTrackerArchive::clear_owner_id_map() {
  if (_impl_.owner_id_map_ != nullptr) _impl_.owner_id_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::OwnerIDMapArchive& DependencyTrackerArchive::_internal_owner_id_map() const {
  const ::TSCE::OwnerIDMapArchive* p = _impl_.owner_id_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::OwnerIDMapArchive&>(
      ::TSCE::_OwnerIDMapArchive_default_instance_);
}
inline const ::TSCE::OwnerIDMapArchive& DependencyTrackerArchive::owner_id_map() const {
  // @@protoc_insertion_point(field_get:TSCE.DependencyTrackerArchive.owner_id_map)
  return _internal_owner_id_map();
}
inline void DependencyTrackerArchive::unsafe_arena_set_allocated_owner_id_map(
    ::TSCE::OwnerIDMapArchive* owner_id_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.owner_id_map_);
  }
  _impl_.owner_id_map_ = owner_id_map;
  if (owner_id_map) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.DependencyTrackerArchive.owner_id_map)
}
inline ::TSCE::OwnerIDMapArchive* DependencyTrackerArchive::release_owner_id_map() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::OwnerIDMapArchive* temp = _impl_.owner_id_map_;
  _impl_.owner_id_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::OwnerIDMapArchive* DependencyTrackerArchive::unsafe_arena_release_owner_id_map() {
  // @@protoc_insertion_point(field_release:TSCE.DependencyTrackerArchive.owner_id_map)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::OwnerIDMapArchive* temp = _impl_.owner_id_map_;
  _impl_.owner_id_map_ = nullptr;
  return temp;
}
inline ::TSCE::OwnerIDMapArchive* DependencyTrackerArchive::_internal_mutable_owner_id_map() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.owner_id_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::OwnerIDMapArchive>(GetArenaForAllocation());
    _impl_.owner_id_map_ = p;
  }
  return _impl_.owner_id_map_;
}
inline ::TSCE::OwnerIDMapArchive* DependencyTrackerArchive::mutable_owner_id_map() {
  ::TSCE::OwnerIDMapArchive* _msg = _internal_mutable_owner_id_map();
  // @@protoc_insertion_point(field_mutable:TSCE.DependencyTrackerArchive.owner_id_map)
  return _msg;
}
inline void DependencyTrackerArchive::set_allocated_owner_id_map(::TSCE::OwnerIDMapArchive* owner_id_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.owner_id_map_;
  }
  if (owner_id_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(owner_id_map);
    if (message_arena != submessage_arena) {
      owner_id_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_id_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.owner_id_map_ = owner_id_map;
  // @@protoc_insertion_point(field_set_allocated:TSCE.DependencyTrackerArchive.owner_id_map)
}

// -------------------------------------------------------------------

// NameTrackedReferencePair

// required string name = 1;
inline bool NameTrackedReferencePair::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NameTrackedReferencePair::has_name() const {
  return _internal_has_name();
}
inline void NameTrackedReferencePair::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NameTrackedReferencePair::name() const {
  // @@protoc_insertion_point(field_get:TSCE.NameTrackedReferencePair.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NameTrackedReferencePair::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCE.NameTrackedReferencePair.name)
}
inline std::string* NameTrackedReferencePair::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TSCE.NameTrackedReferencePair.name)
  return _s;
}
inline const std::string& NameTrackedReferencePair::_internal_name() const {
  return _impl_.name_.Get();
}
inline void NameTrackedReferencePair::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* NameTrackedReferencePair::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* NameTrackedReferencePair::release_name() {
  // @@protoc_insertion_point(field_release:TSCE.NameTrackedReferencePair.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NameTrackedReferencePair::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCE.NameTrackedReferencePair.name)
}

// optional .TSP.Reference tracked_reference = 2;
inline bool NameTrackedReferencePair::_internal_has_tracked_reference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tracked_reference_ != nullptr);
  return value;
}
inline bool NameTrackedReferencePair::has_tracked_reference() const {
  return _internal_has_tracked_reference();
}
inline const ::TSP::Reference& NameTrackedReferencePair::_internal_tracked_reference() const {
  const ::TSP::Reference* p = _impl_.tracked_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& NameTrackedReferencePair::tracked_reference() const {
  // @@protoc_insertion_point(field_get:TSCE.NameTrackedReferencePair.tracked_reference)
  return _internal_tracked_reference();
}
inline void NameTrackedReferencePair::unsafe_arena_set_allocated_tracked_reference(
    ::TSP::Reference* tracked_reference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tracked_reference_);
  }
  _impl_.tracked_reference_ = tracked_reference;
  if (tracked_reference) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.NameTrackedReferencePair.tracked_reference)
}
inline ::TSP::Reference* NameTrackedReferencePair::release_tracked_reference() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.tracked_reference_;
  _impl_.tracked_reference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* NameTrackedReferencePair::unsafe_arena_release_tracked_reference() {
  // @@protoc_insertion_point(field_release:TSCE.NameTrackedReferencePair.tracked_reference)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.tracked_reference_;
  _impl_.tracked_reference_ = nullptr;
  return temp;
}
inline ::TSP::Reference* NameTrackedReferencePair::_internal_mutable_tracked_reference() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.tracked_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.tracked_reference_ = p;
  }
  return _impl_.tracked_reference_;
}
inline ::TSP::Reference* NameTrackedReferencePair::mutable_tracked_reference() {
  ::TSP::Reference* _msg = _internal_mutable_tracked_reference();
  // @@protoc_insertion_point(field_mutable:TSCE.NameTrackedReferencePair.tracked_reference)
  return _msg;
}
inline void NameTrackedReferencePair::set_allocated_tracked_reference(::TSP::Reference* tracked_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tracked_reference_);
  }
  if (tracked_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tracked_reference));
    if (message_arena != submessage_arena) {
      tracked_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracked_reference, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.tracked_reference_ = tracked_reference;
  // @@protoc_insertion_point(field_set_allocated:TSCE.NameTrackedReferencePair.tracked_reference)
}

// optional uint32 tracked_reference_id = 3;
inline bool NameTrackedReferencePair::_internal_has_tracked_reference_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NameTrackedReferencePair::has_tracked_reference_id() const {
  return _internal_has_tracked_reference_id();
}
inline void NameTrackedReferencePair::clear_tracked_reference_id() {
  _impl_.tracked_reference_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t NameTrackedReferencePair::_internal_tracked_reference_id() const {
  return _impl_.tracked_reference_id_;
}
inline uint32_t NameTrackedReferencePair::tracked_reference_id() const {
  // @@protoc_insertion_point(field_get:TSCE.NameTrackedReferencePair.tracked_reference_id)
  return _internal_tracked_reference_id();
}
inline void NameTrackedReferencePair::_internal_set_tracked_reference_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.tracked_reference_id_ = value;
}
inline void NameTrackedReferencePair::set_tracked_reference_id(uint32_t value) {
  _internal_set_tracked_reference_id(value);
  // @@protoc_insertion_point(field_set:TSCE.NameTrackedReferencePair.tracked_reference_id)
}

// -------------------------------------------------------------------

// NamesByTrackedReferenceArchive

// required .TSCE.CFUUIDArchive table_id = 1;
inline bool NamesByTrackedReferenceArchive::_internal_has_table_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.table_id_ != nullptr);
  return value;
}
inline bool NamesByTrackedReferenceArchive::has_table_id() const {
  return _internal_has_table_id();
}
inline void NamesByTrackedReferenceArchive::clear_table_id() {
  if (_impl_.table_id_ != nullptr) _impl_.table_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::CFUUIDArchive& NamesByTrackedReferenceArchive::_internal_table_id() const {
  const ::TSCE::CFUUIDArchive* p = _impl_.table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CFUUIDArchive&>(
      ::TSCE::_CFUUIDArchive_default_instance_);
}
inline const ::TSCE::CFUUIDArchive& NamesByTrackedReferenceArchive::table_id() const {
  // @@protoc_insertion_point(field_get:TSCE.NamesByTrackedReferenceArchive.table_id)
  return _internal_table_id();
}
inline void NamesByTrackedReferenceArchive::unsafe_arena_set_allocated_table_id(
    ::TSCE::CFUUIDArchive* table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_id_);
  }
  _impl_.table_id_ = table_id;
  if (table_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.NamesByTrackedReferenceArchive.table_id)
}
inline ::TSCE::CFUUIDArchive* NamesByTrackedReferenceArchive::release_table_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::CFUUIDArchive* temp = _impl_.table_id_;
  _impl_.table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CFUUIDArchive* NamesByTrackedReferenceArchive::unsafe_arena_release_table_id() {
  // @@protoc_insertion_point(field_release:TSCE.NamesByTrackedReferenceArchive.table_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::CFUUIDArchive* temp = _impl_.table_id_;
  _impl_.table_id_ = nullptr;
  return temp;
}
inline ::TSCE::CFUUIDArchive* NamesByTrackedReferenceArchive::_internal_mutable_table_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CFUUIDArchive>(GetArenaForAllocation());
    _impl_.table_id_ = p;
  }
  return _impl_.table_id_;
}
inline ::TSCE::CFUUIDArchive* NamesByTrackedReferenceArchive::mutable_table_id() {
  ::TSCE::CFUUIDArchive* _msg = _internal_mutable_table_id();
  // @@protoc_insertion_point(field_mutable:TSCE.NamesByTrackedReferenceArchive.table_id)
  return _msg;
}
inline void NamesByTrackedReferenceArchive::set_allocated_table_id(::TSCE::CFUUIDArchive* table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.table_id_;
  }
  if (table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(table_id);
    if (message_arena != submessage_arena) {
      table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.table_id_ = table_id;
  // @@protoc_insertion_point(field_set_allocated:TSCE.NamesByTrackedReferenceArchive.table_id)
}

// repeated .TSCE.NameTrackedReferencePair name_tracked_reference_pair = 2;
inline int NamesByTrackedReferenceArchive::_internal_name_tracked_reference_pair_size() const {
  return _impl_.name_tracked_reference_pair_.size();
}
inline int NamesByTrackedReferenceArchive::name_tracked_reference_pair_size() const {
  return _internal_name_tracked_reference_pair_size();
}
inline void NamesByTrackedReferenceArchive::clear_name_tracked_reference_pair() {
  _impl_.name_tracked_reference_pair_.Clear();
}
inline ::TSCE::NameTrackedReferencePair* NamesByTrackedReferenceArchive::mutable_name_tracked_reference_pair(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.NamesByTrackedReferenceArchive.name_tracked_reference_pair)
  return _impl_.name_tracked_reference_pair_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::NameTrackedReferencePair >*
NamesByTrackedReferenceArchive::mutable_name_tracked_reference_pair() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.NamesByTrackedReferenceArchive.name_tracked_reference_pair)
  return &_impl_.name_tracked_reference_pair_;
}
inline const ::TSCE::NameTrackedReferencePair& NamesByTrackedReferenceArchive::_internal_name_tracked_reference_pair(int index) const {
  return _impl_.name_tracked_reference_pair_.Get(index);
}
inline const ::TSCE::NameTrackedReferencePair& NamesByTrackedReferenceArchive::name_tracked_reference_pair(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.NamesByTrackedReferenceArchive.name_tracked_reference_pair)
  return _internal_name_tracked_reference_pair(index);
}
inline ::TSCE::NameTrackedReferencePair* NamesByTrackedReferenceArchive::_internal_add_name_tracked_reference_pair() {
  return _impl_.name_tracked_reference_pair_.Add();
}
inline ::TSCE::NameTrackedReferencePair* NamesByTrackedReferenceArchive::add_name_tracked_reference_pair() {
  ::TSCE::NameTrackedReferencePair* _add = _internal_add_name_tracked_reference_pair();
  // @@protoc_insertion_point(field_add:TSCE.NamesByTrackedReferenceArchive.name_tracked_reference_pair)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::NameTrackedReferencePair >&
NamesByTrackedReferenceArchive::name_tracked_reference_pair() const {
  // @@protoc_insertion_point(field_list:TSCE.NamesByTrackedReferenceArchive.name_tracked_reference_pair)
  return _impl_.name_tracked_reference_pair_;
}

// -------------------------------------------------------------------

// NamedReferenceManagerArchive

// required .TSP.Reference reference_tracker = 1;
inline bool NamedReferenceManagerArchive::_internal_has_reference_tracker() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reference_tracker_ != nullptr);
  return value;
}
inline bool NamedReferenceManagerArchive::has_reference_tracker() const {
  return _internal_has_reference_tracker();
}
inline const ::TSP::Reference& NamedReferenceManagerArchive::_internal_reference_tracker() const {
  const ::TSP::Reference* p = _impl_.reference_tracker_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& NamedReferenceManagerArchive::reference_tracker() const {
  // @@protoc_insertion_point(field_get:TSCE.NamedReferenceManagerArchive.reference_tracker)
  return _internal_reference_tracker();
}
inline void NamedReferenceManagerArchive::unsafe_arena_set_allocated_reference_tracker(
    ::TSP::Reference* reference_tracker) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reference_tracker_);
  }
  _impl_.reference_tracker_ = reference_tracker;
  if (reference_tracker) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.NamedReferenceManagerArchive.reference_tracker)
}
inline ::TSP::Reference* NamedReferenceManagerArchive::release_reference_tracker() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.reference_tracker_;
  _impl_.reference_tracker_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* NamedReferenceManagerArchive::unsafe_arena_release_reference_tracker() {
  // @@protoc_insertion_point(field_release:TSCE.NamedReferenceManagerArchive.reference_tracker)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.reference_tracker_;
  _impl_.reference_tracker_ = nullptr;
  return temp;
}
inline ::TSP::Reference* NamedReferenceManagerArchive::_internal_mutable_reference_tracker() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.reference_tracker_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.reference_tracker_ = p;
  }
  return _impl_.reference_tracker_;
}
inline ::TSP::Reference* NamedReferenceManagerArchive::mutable_reference_tracker() {
  ::TSP::Reference* _msg = _internal_mutable_reference_tracker();
  // @@protoc_insertion_point(field_mutable:TSCE.NamedReferenceManagerArchive.reference_tracker)
  return _msg;
}
inline void NamedReferenceManagerArchive::set_allocated_reference_tracker(::TSP::Reference* reference_tracker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reference_tracker_);
  }
  if (reference_tracker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_tracker));
    if (message_arena != submessage_arena) {
      reference_tracker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference_tracker, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.reference_tracker_ = reference_tracker;
  // @@protoc_insertion_point(field_set_allocated:TSCE.NamedReferenceManagerArchive.reference_tracker)
}

// repeated .TSCE.NamesByTrackedReferenceArchive names_by_tracked_reference_by_table = 2 [deprecated = true];
inline int NamedReferenceManagerArchive::_internal_names_by_tracked_reference_by_table_size() const {
  return _impl_.names_by_tracked_reference_by_table_.size();
}
inline int NamedReferenceManagerArchive::names_by_tracked_reference_by_table_size() const {
  return _internal_names_by_tracked_reference_by_table_size();
}
inline void NamedReferenceManagerArchive::clear_names_by_tracked_reference_by_table() {
  _impl_.names_by_tracked_reference_by_table_.Clear();
}
inline ::TSCE::NamesByTrackedReferenceArchive* NamedReferenceManagerArchive::mutable_names_by_tracked_reference_by_table(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.NamedReferenceManagerArchive.names_by_tracked_reference_by_table)
  return _impl_.names_by_tracked_reference_by_table_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::NamesByTrackedReferenceArchive >*
NamedReferenceManagerArchive::mutable_names_by_tracked_reference_by_table() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.NamedReferenceManagerArchive.names_by_tracked_reference_by_table)
  return &_impl_.names_by_tracked_reference_by_table_;
}
inline const ::TSCE::NamesByTrackedReferenceArchive& NamedReferenceManagerArchive::_internal_names_by_tracked_reference_by_table(int index) const {
  return _impl_.names_by_tracked_reference_by_table_.Get(index);
}
inline const ::TSCE::NamesByTrackedReferenceArchive& NamedReferenceManagerArchive::names_by_tracked_reference_by_table(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.NamedReferenceManagerArchive.names_by_tracked_reference_by_table)
  return _internal_names_by_tracked_reference_by_table(index);
}
inline ::TSCE::NamesByTrackedReferenceArchive* NamedReferenceManagerArchive::_internal_add_names_by_tracked_reference_by_table() {
  return _impl_.names_by_tracked_reference_by_table_.Add();
}
inline ::TSCE::NamesByTrackedReferenceArchive* NamedReferenceManagerArchive::add_names_by_tracked_reference_by_table() {
  ::TSCE::NamesByTrackedReferenceArchive* _add = _internal_add_names_by_tracked_reference_by_table();
  // @@protoc_insertion_point(field_add:TSCE.NamedReferenceManagerArchive.names_by_tracked_reference_by_table)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::NamesByTrackedReferenceArchive >&
NamedReferenceManagerArchive::names_by_tracked_reference_by_table() const {
  // @@protoc_insertion_point(field_list:TSCE.NamedReferenceManagerArchive.names_by_tracked_reference_by_table)
  return _impl_.names_by_tracked_reference_by_table_;
}

// -------------------------------------------------------------------

// CalculationEngineArchive

// optional bool base_date_1904 = 1;
inline bool CalculationEngineArchive::_internal_has_base_date_1904() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CalculationEngineArchive::has_base_date_1904() const {
  return _internal_has_base_date_1904();
}
inline void CalculationEngineArchive::clear_base_date_1904() {
  _impl_.base_date_1904_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CalculationEngineArchive::_internal_base_date_1904() const {
  return _impl_.base_date_1904_;
}
inline bool CalculationEngineArchive::base_date_1904() const {
  // @@protoc_insertion_point(field_get:TSCE.CalculationEngineArchive.base_date_1904)
  return _internal_base_date_1904();
}
inline void CalculationEngineArchive::_internal_set_base_date_1904(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.base_date_1904_ = value;
}
inline void CalculationEngineArchive::set_base_date_1904(bool value) {
  _internal_set_base_date_1904(value);
  // @@protoc_insertion_point(field_set:TSCE.CalculationEngineArchive.base_date_1904)
}

// required .TSCE.DependencyTrackerArchive dependency_tracker = 2;
inline bool CalculationEngineArchive::_internal_has_dependency_tracker() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dependency_tracker_ != nullptr);
  return value;
}
inline bool CalculationEngineArchive::has_dependency_tracker() const {
  return _internal_has_dependency_tracker();
}
inline void CalculationEngineArchive::clear_dependency_tracker() {
  if (_impl_.dependency_tracker_ != nullptr) _impl_.dependency_tracker_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::DependencyTrackerArchive& CalculationEngineArchive::_internal_dependency_tracker() const {
  const ::TSCE::DependencyTrackerArchive* p = _impl_.dependency_tracker_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::DependencyTrackerArchive&>(
      ::TSCE::_DependencyTrackerArchive_default_instance_);
}
inline const ::TSCE::DependencyTrackerArchive& CalculationEngineArchive::dependency_tracker() const {
  // @@protoc_insertion_point(field_get:TSCE.CalculationEngineArchive.dependency_tracker)
  return _internal_dependency_tracker();
}
inline void CalculationEngineArchive::unsafe_arena_set_allocated_dependency_tracker(
    ::TSCE::DependencyTrackerArchive* dependency_tracker) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dependency_tracker_);
  }
  _impl_.dependency_tracker_ = dependency_tracker;
  if (dependency_tracker) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CalculationEngineArchive.dependency_tracker)
}
inline ::TSCE::DependencyTrackerArchive* CalculationEngineArchive::release_dependency_tracker() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::DependencyTrackerArchive* temp = _impl_.dependency_tracker_;
  _impl_.dependency_tracker_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::DependencyTrackerArchive* CalculationEngineArchive::unsafe_arena_release_dependency_tracker() {
  // @@protoc_insertion_point(field_release:TSCE.CalculationEngineArchive.dependency_tracker)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::DependencyTrackerArchive* temp = _impl_.dependency_tracker_;
  _impl_.dependency_tracker_ = nullptr;
  return temp;
}
inline ::TSCE::DependencyTrackerArchive* CalculationEngineArchive::_internal_mutable_dependency_tracker() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.dependency_tracker_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::DependencyTrackerArchive>(GetArenaForAllocation());
    _impl_.dependency_tracker_ = p;
  }
  return _impl_.dependency_tracker_;
}
inline ::TSCE::DependencyTrackerArchive* CalculationEngineArchive::mutable_dependency_tracker() {
  ::TSCE::DependencyTrackerArchive* _msg = _internal_mutable_dependency_tracker();
  // @@protoc_insertion_point(field_mutable:TSCE.CalculationEngineArchive.dependency_tracker)
  return _msg;
}
inline void CalculationEngineArchive::set_allocated_dependency_tracker(::TSCE::DependencyTrackerArchive* dependency_tracker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dependency_tracker_;
  }
  if (dependency_tracker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dependency_tracker);
    if (message_arena != submessage_arena) {
      dependency_tracker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dependency_tracker, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.dependency_tracker_ = dependency_tracker;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CalculationEngineArchive.dependency_tracker)
}

// optional .TSP.Reference named_reference_manager = 3;
inline bool CalculationEngineArchive::_internal_has_named_reference_manager() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.named_reference_manager_ != nullptr);
  return value;
}
inline bool CalculationEngineArchive::has_named_reference_manager() const {
  return _internal_has_named_reference_manager();
}
inline const ::TSP::Reference& CalculationEngineArchive::_internal_named_reference_manager() const {
  const ::TSP::Reference* p = _impl_.named_reference_manager_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CalculationEngineArchive::named_reference_manager() const {
  // @@protoc_insertion_point(field_get:TSCE.CalculationEngineArchive.named_reference_manager)
  return _internal_named_reference_manager();
}
inline void CalculationEngineArchive::unsafe_arena_set_allocated_named_reference_manager(
    ::TSP::Reference* named_reference_manager) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.named_reference_manager_);
  }
  _impl_.named_reference_manager_ = named_reference_manager;
  if (named_reference_manager) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CalculationEngineArchive.named_reference_manager)
}
inline ::TSP::Reference* CalculationEngineArchive::release_named_reference_manager() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.named_reference_manager_;
  _impl_.named_reference_manager_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CalculationEngineArchive::unsafe_arena_release_named_reference_manager() {
  // @@protoc_insertion_point(field_release:TSCE.CalculationEngineArchive.named_reference_manager)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.named_reference_manager_;
  _impl_.named_reference_manager_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CalculationEngineArchive::_internal_mutable_named_reference_manager() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.named_reference_manager_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.named_reference_manager_ = p;
  }
  return _impl_.named_reference_manager_;
}
inline ::TSP::Reference* CalculationEngineArchive::mutable_named_reference_manager() {
  ::TSP::Reference* _msg = _internal_mutable_named_reference_manager();
  // @@protoc_insertion_point(field_mutable:TSCE.CalculationEngineArchive.named_reference_manager)
  return _msg;
}
inline void CalculationEngineArchive::set_allocated_named_reference_manager(::TSP::Reference* named_reference_manager) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.named_reference_manager_);
  }
  if (named_reference_manager) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(named_reference_manager));
    if (message_arena != submessage_arena) {
      named_reference_manager = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, named_reference_manager, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.named_reference_manager_ = named_reference_manager;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CalculationEngineArchive.named_reference_manager)
}

// optional .TSCE.CalculationEngineArchive.ExcelImportDateMode excel_import_date_mode = 4 [default = DATE_MODE_1900];
inline bool CalculationEngineArchive::_internal_has_excel_import_date_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CalculationEngineArchive::has_excel_import_date_mode() const {
  return _internal_has_excel_import_date_mode();
}
inline void CalculationEngineArchive::clear_excel_import_date_mode() {
  _impl_.excel_import_date_mode_ = 1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::TSCE::CalculationEngineArchive_ExcelImportDateMode CalculationEngineArchive::_internal_excel_import_date_mode() const {
  return static_cast< ::TSCE::CalculationEngineArchive_ExcelImportDateMode >(_impl_.excel_import_date_mode_);
}
inline ::TSCE::CalculationEngineArchive_ExcelImportDateMode CalculationEngineArchive::excel_import_date_mode() const {
  // @@protoc_insertion_point(field_get:TSCE.CalculationEngineArchive.excel_import_date_mode)
  return _internal_excel_import_date_mode();
}
inline void CalculationEngineArchive::_internal_set_excel_import_date_mode(::TSCE::CalculationEngineArchive_ExcelImportDateMode value) {
  assert(::TSCE::CalculationEngineArchive_ExcelImportDateMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.excel_import_date_mode_ = value;
}
inline void CalculationEngineArchive::set_excel_import_date_mode(::TSCE::CalculationEngineArchive_ExcelImportDateMode value) {
  _internal_set_excel_import_date_mode(value);
  // @@protoc_insertion_point(field_set:TSCE.CalculationEngineArchive.excel_import_date_mode)
}

// optional string saved_locale_identifier = 5;
inline bool CalculationEngineArchive::_internal_has_saved_locale_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CalculationEngineArchive::has_saved_locale_identifier() const {
  return _internal_has_saved_locale_identifier();
}
inline void CalculationEngineArchive::clear_saved_locale_identifier() {
  _impl_.saved_locale_identifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CalculationEngineArchive::saved_locale_identifier() const {
  // @@protoc_insertion_point(field_get:TSCE.CalculationEngineArchive.saved_locale_identifier)
  return _internal_saved_locale_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CalculationEngineArchive::set_saved_locale_identifier(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.saved_locale_identifier_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCE.CalculationEngineArchive.saved_locale_identifier)
}
inline std::string* CalculationEngineArchive::mutable_saved_locale_identifier() {
  std::string* _s = _internal_mutable_saved_locale_identifier();
  // @@protoc_insertion_point(field_mutable:TSCE.CalculationEngineArchive.saved_locale_identifier)
  return _s;
}
inline const std::string& CalculationEngineArchive::_internal_saved_locale_identifier() const {
  return _impl_.saved_locale_identifier_.Get();
}
inline void CalculationEngineArchive::_internal_set_saved_locale_identifier(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.saved_locale_identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* CalculationEngineArchive::_internal_mutable_saved_locale_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.saved_locale_identifier_.Mutable(GetArenaForAllocation());
}
inline std::string* CalculationEngineArchive::release_saved_locale_identifier() {
  // @@protoc_insertion_point(field_release:TSCE.CalculationEngineArchive.saved_locale_identifier)
  if (!_internal_has_saved_locale_identifier()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.saved_locale_identifier_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.saved_locale_identifier_.IsDefault()) {
    _impl_.saved_locale_identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CalculationEngineArchive::set_allocated_saved_locale_identifier(std::string* saved_locale_identifier) {
  if (saved_locale_identifier != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.saved_locale_identifier_.SetAllocated(saved_locale_identifier, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.saved_locale_identifier_.IsDefault()) {
    _impl_.saved_locale_identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCE.CalculationEngineArchive.saved_locale_identifier)
}

// -------------------------------------------------------------------

// ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive

// required uint32 row_handle = 1;
inline bool ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_internal_has_row_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::has_row_handle() const {
  return _internal_has_row_handle();
}
inline void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::clear_row_handle() {
  _impl_.row_handle_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_internal_row_handle() const {
  return _impl_.row_handle_;
}
inline uint32_t ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::row_handle() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive.row_handle)
  return _internal_row_handle();
}
inline void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_internal_set_row_handle(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.row_handle_ = value;
}
inline void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::set_row_handle(uint32_t value) {
  _internal_set_row_handle(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive.row_handle)
}

// required uint32 column_handle = 2;
inline bool ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_internal_has_column_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::has_column_handle() const {
  return _internal_has_column_handle();
}
inline void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::clear_column_handle() {
  _impl_.column_handle_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_internal_column_handle() const {
  return _impl_.column_handle_;
}
inline uint32_t ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::column_handle() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive.column_handle)
  return _internal_column_handle();
}
inline void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_internal_set_column_handle(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.column_handle_ = value;
}
inline void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::set_column_handle(uint32_t value) {
  _internal_set_column_handle(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive.column_handle)
}

// required uint32 row_is_sticky = 3;
inline bool ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_internal_has_row_is_sticky() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::has_row_is_sticky() const {
  return _internal_has_row_is_sticky();
}
inline void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::clear_row_is_sticky() {
  _impl_.row_is_sticky_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_internal_row_is_sticky() const {
  return _impl_.row_is_sticky_;
}
inline uint32_t ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::row_is_sticky() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive.row_is_sticky)
  return _internal_row_is_sticky();
}
inline void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_internal_set_row_is_sticky(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.row_is_sticky_ = value;
}
inline void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::set_row_is_sticky(uint32_t value) {
  _internal_set_row_is_sticky(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive.row_is_sticky)
}

// required uint32 column_is_sticky = 4;
inline bool ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_internal_has_column_is_sticky() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::has_column_is_sticky() const {
  return _internal_has_column_is_sticky();
}
inline void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::clear_column_is_sticky() {
  _impl_.column_is_sticky_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_internal_column_is_sticky() const {
  return _impl_.column_is_sticky_;
}
inline uint32_t ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::column_is_sticky() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive.column_is_sticky)
  return _internal_column_is_sticky();
}
inline void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_internal_set_column_is_sticky(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.column_is_sticky_ = value;
}
inline void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::set_column_is_sticky(uint32_t value) {
  _internal_set_column_is_sticky(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive.column_is_sticky)
}

// -------------------------------------------------------------------

// ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive

// required uint32 row_handle = 1;
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_has_row_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::has_row_handle() const {
  return _internal_has_row_handle();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::clear_row_handle() {
  _impl_.row_handle_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_row_handle() const {
  return _impl_.row_handle_;
}
inline uint32_t ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::row_handle() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.row_handle)
  return _internal_row_handle();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_set_row_handle(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.row_handle_ = value;
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::set_row_handle(uint32_t value) {
  _internal_set_row_handle(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.row_handle)
}

// required uint32 column_handle = 2;
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_has_column_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::has_column_handle() const {
  return _internal_has_column_handle();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::clear_column_handle() {
  _impl_.column_handle_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_column_handle() const {
  return _impl_.column_handle_;
}
inline uint32_t ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::column_handle() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.column_handle)
  return _internal_column_handle();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_set_column_handle(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.column_handle_ = value;
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::set_column_handle(uint32_t value) {
  _internal_set_column_handle(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.column_handle)
}

// required uint32 row_is_sticky = 3;
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_has_row_is_sticky() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::has_row_is_sticky() const {
  return _internal_has_row_is_sticky();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::clear_row_is_sticky() {
  _impl_.row_is_sticky_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_row_is_sticky() const {
  return _impl_.row_is_sticky_;
}
inline uint32_t ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::row_is_sticky() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.row_is_sticky)
  return _internal_row_is_sticky();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_set_row_is_sticky(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.row_is_sticky_ = value;
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::set_row_is_sticky(uint32_t value) {
  _internal_set_row_is_sticky(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.row_is_sticky)
}

// required uint32 column_is_sticky = 4;
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_has_column_is_sticky() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::has_column_is_sticky() const {
  return _internal_has_column_is_sticky();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::clear_column_is_sticky() {
  _impl_.column_is_sticky_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_column_is_sticky() const {
  return _impl_.column_is_sticky_;
}
inline uint32_t ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::column_is_sticky() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.column_is_sticky)
  return _internal_column_is_sticky();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_set_column_is_sticky(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.column_is_sticky_ = value;
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::set_column_is_sticky(uint32_t value) {
  _internal_set_column_is_sticky(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.column_is_sticky)
}

// required .TSCE.CFUUIDArchive table_id = 5;
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_has_table_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.table_id_ != nullptr);
  return value;
}
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::has_table_id() const {
  return _internal_has_table_id();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::clear_table_id() {
  if (_impl_.table_id_ != nullptr) _impl_.table_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::TSCE::CFUUIDArchive& ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_table_id() const {
  const ::TSCE::CFUUIDArchive* p = _impl_.table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CFUUIDArchive&>(
      ::TSCE::_CFUUIDArchive_default_instance_);
}
inline const ::TSCE::CFUUIDArchive& ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::table_id() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.table_id)
  return _internal_table_id();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::unsafe_arena_set_allocated_table_id(
    ::TSCE::CFUUIDArchive* table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_id_);
  }
  _impl_.table_id_ = table_id;
  if (table_id) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.table_id)
}
inline ::TSCE::CFUUIDArchive* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::release_table_id() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCE::CFUUIDArchive* temp = _impl_.table_id_;
  _impl_.table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CFUUIDArchive* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::unsafe_arena_release_table_id() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.table_id)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCE::CFUUIDArchive* temp = _impl_.table_id_;
  _impl_.table_id_ = nullptr;
  return temp;
}
inline ::TSCE::CFUUIDArchive* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_mutable_table_id() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CFUUIDArchive>(GetArenaForAllocation());
    _impl_.table_id_ = p;
  }
  return _impl_.table_id_;
}
inline ::TSCE::CFUUIDArchive* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::mutable_table_id() {
  ::TSCE::CFUUIDArchive* _msg = _internal_mutable_table_id();
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.table_id)
  return _msg;
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::set_allocated_table_id(::TSCE::CFUUIDArchive* table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.table_id_;
  }
  if (table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(table_id);
    if (message_arena != submessage_arena) {
      table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.table_id_ = table_id;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.table_id)
}

// optional string AST_reference_whitespace_after_sheet_name = 6;
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_has_ast_reference_whitespace_after_sheet_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::has_ast_reference_whitespace_after_sheet_name() const {
  return _internal_has_ast_reference_whitespace_after_sheet_name();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::clear_ast_reference_whitespace_after_sheet_name() {
  _impl_.ast_reference_whitespace_after_sheet_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::ast_reference_whitespace_after_sheet_name() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_sheet_name)
  return _internal_ast_reference_whitespace_after_sheet_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::set_ast_reference_whitespace_after_sheet_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.ast_reference_whitespace_after_sheet_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_sheet_name)
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::mutable_ast_reference_whitespace_after_sheet_name() {
  std::string* _s = _internal_mutable_ast_reference_whitespace_after_sheet_name();
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_sheet_name)
  return _s;
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_ast_reference_whitespace_after_sheet_name() const {
  return _impl_.ast_reference_whitespace_after_sheet_name_.Get();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_set_ast_reference_whitespace_after_sheet_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ast_reference_whitespace_after_sheet_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_mutable_ast_reference_whitespace_after_sheet_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.ast_reference_whitespace_after_sheet_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::release_ast_reference_whitespace_after_sheet_name() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_sheet_name)
  if (!_internal_has_ast_reference_whitespace_after_sheet_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.ast_reference_whitespace_after_sheet_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ast_reference_whitespace_after_sheet_name_.IsDefault()) {
    _impl_.ast_reference_whitespace_after_sheet_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::set_allocated_ast_reference_whitespace_after_sheet_name(std::string* ast_reference_whitespace_after_sheet_name) {
  if (ast_reference_whitespace_after_sheet_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ast_reference_whitespace_after_sheet_name_.SetAllocated(ast_reference_whitespace_after_sheet_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ast_reference_whitespace_after_sheet_name_.IsDefault()) {
    _impl_.ast_reference_whitespace_after_sheet_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_sheet_name)
}

// optional string AST_reference_whitespace_before_table_name = 7;
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_has_ast_reference_whitespace_before_table_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::has_ast_reference_whitespace_before_table_name() const {
  return _internal_has_ast_reference_whitespace_before_table_name();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::clear_ast_reference_whitespace_before_table_name() {
  _impl_.ast_reference_whitespace_before_table_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::ast_reference_whitespace_before_table_name() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_table_name)
  return _internal_ast_reference_whitespace_before_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::set_ast_reference_whitespace_before_table_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.ast_reference_whitespace_before_table_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_table_name)
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::mutable_ast_reference_whitespace_before_table_name() {
  std::string* _s = _internal_mutable_ast_reference_whitespace_before_table_name();
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_table_name)
  return _s;
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_ast_reference_whitespace_before_table_name() const {
  return _impl_.ast_reference_whitespace_before_table_name_.Get();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_set_ast_reference_whitespace_before_table_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ast_reference_whitespace_before_table_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_mutable_ast_reference_whitespace_before_table_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.ast_reference_whitespace_before_table_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::release_ast_reference_whitespace_before_table_name() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_table_name)
  if (!_internal_has_ast_reference_whitespace_before_table_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.ast_reference_whitespace_before_table_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ast_reference_whitespace_before_table_name_.IsDefault()) {
    _impl_.ast_reference_whitespace_before_table_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::set_allocated_ast_reference_whitespace_before_table_name(std::string* ast_reference_whitespace_before_table_name) {
  if (ast_reference_whitespace_before_table_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.ast_reference_whitespace_before_table_name_.SetAllocated(ast_reference_whitespace_before_table_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ast_reference_whitespace_before_table_name_.IsDefault()) {
    _impl_.ast_reference_whitespace_before_table_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_table_name)
}

// optional string AST_reference_whitespace_after_table_name = 8;
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_has_ast_reference_whitespace_after_table_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::has_ast_reference_whitespace_after_table_name() const {
  return _internal_has_ast_reference_whitespace_after_table_name();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::clear_ast_reference_whitespace_after_table_name() {
  _impl_.ast_reference_whitespace_after_table_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::ast_reference_whitespace_after_table_name() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_table_name)
  return _internal_ast_reference_whitespace_after_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::set_ast_reference_whitespace_after_table_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.ast_reference_whitespace_after_table_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_table_name)
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::mutable_ast_reference_whitespace_after_table_name() {
  std::string* _s = _internal_mutable_ast_reference_whitespace_after_table_name();
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_table_name)
  return _s;
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_ast_reference_whitespace_after_table_name() const {
  return _impl_.ast_reference_whitespace_after_table_name_.Get();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_set_ast_reference_whitespace_after_table_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ast_reference_whitespace_after_table_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_mutable_ast_reference_whitespace_after_table_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.ast_reference_whitespace_after_table_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::release_ast_reference_whitespace_after_table_name() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_table_name)
  if (!_internal_has_ast_reference_whitespace_after_table_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.ast_reference_whitespace_after_table_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ast_reference_whitespace_after_table_name_.IsDefault()) {
    _impl_.ast_reference_whitespace_after_table_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::set_allocated_ast_reference_whitespace_after_table_name(std::string* ast_reference_whitespace_after_table_name) {
  if (ast_reference_whitespace_after_table_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.ast_reference_whitespace_after_table_name_.SetAllocated(ast_reference_whitespace_after_table_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ast_reference_whitespace_after_table_name_.IsDefault()) {
    _impl_.ast_reference_whitespace_after_table_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_table_name)
}

// optional string AST_reference_whitespace_before_cell_address = 9;
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_has_ast_reference_whitespace_before_cell_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::has_ast_reference_whitespace_before_cell_address() const {
  return _internal_has_ast_reference_whitespace_before_cell_address();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::clear_ast_reference_whitespace_before_cell_address() {
  _impl_.ast_reference_whitespace_before_cell_address_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::ast_reference_whitespace_before_cell_address() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_cell_address)
  return _internal_ast_reference_whitespace_before_cell_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::set_ast_reference_whitespace_before_cell_address(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.ast_reference_whitespace_before_cell_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_cell_address)
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::mutable_ast_reference_whitespace_before_cell_address() {
  std::string* _s = _internal_mutable_ast_reference_whitespace_before_cell_address();
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_cell_address)
  return _s;
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_ast_reference_whitespace_before_cell_address() const {
  return _impl_.ast_reference_whitespace_before_cell_address_.Get();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_set_ast_reference_whitespace_before_cell_address(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ast_reference_whitespace_before_cell_address_.Set(value, GetArenaForAllocation());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_mutable_ast_reference_whitespace_before_cell_address() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.ast_reference_whitespace_before_cell_address_.Mutable(GetArenaForAllocation());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::release_ast_reference_whitespace_before_cell_address() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_cell_address)
  if (!_internal_has_ast_reference_whitespace_before_cell_address()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.ast_reference_whitespace_before_cell_address_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ast_reference_whitespace_before_cell_address_.IsDefault()) {
    _impl_.ast_reference_whitespace_before_cell_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::set_allocated_ast_reference_whitespace_before_cell_address(std::string* ast_reference_whitespace_before_cell_address) {
  if (ast_reference_whitespace_before_cell_address != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.ast_reference_whitespace_before_cell_address_.SetAllocated(ast_reference_whitespace_before_cell_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ast_reference_whitespace_before_cell_address_.IsDefault()) {
    _impl_.ast_reference_whitespace_before_cell_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_cell_address)
}

// -------------------------------------------------------------------

// ASTNodeArrayArchive_ASTColumnCoordinateArchive

// required sint32 column = 1;
inline bool ASTNodeArrayArchive_ASTColumnCoordinateArchive::_internal_has_column() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTColumnCoordinateArchive::has_column() const {
  return _internal_has_column();
}
inline void ASTNodeArrayArchive_ASTColumnCoordinateArchive::clear_column() {
  _impl_.column_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t ASTNodeArrayArchive_ASTColumnCoordinateArchive::_internal_column() const {
  return _impl_.column_;
}
inline int32_t ASTNodeArrayArchive_ASTColumnCoordinateArchive::column() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive.column)
  return _internal_column();
}
inline void ASTNodeArrayArchive_ASTColumnCoordinateArchive::_internal_set_column(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.column_ = value;
}
inline void ASTNodeArrayArchive_ASTColumnCoordinateArchive::set_column(int32_t value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive.column)
}

// optional bool absolute = 2 [default = false];
inline bool ASTNodeArrayArchive_ASTColumnCoordinateArchive::_internal_has_absolute() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTColumnCoordinateArchive::has_absolute() const {
  return _internal_has_absolute();
}
inline void ASTNodeArrayArchive_ASTColumnCoordinateArchive::clear_absolute() {
  _impl_.absolute_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool ASTNodeArrayArchive_ASTColumnCoordinateArchive::_internal_absolute() const {
  return _impl_.absolute_;
}
inline bool ASTNodeArrayArchive_ASTColumnCoordinateArchive::absolute() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive.absolute)
  return _internal_absolute();
}
inline void ASTNodeArrayArchive_ASTColumnCoordinateArchive::_internal_set_absolute(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.absolute_ = value;
}
inline void ASTNodeArrayArchive_ASTColumnCoordinateArchive::set_absolute(bool value) {
  _internal_set_absolute(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive.absolute)
}

// -------------------------------------------------------------------

// ASTNodeArrayArchive_ASTRowCoordinateArchive

// required sint32 row = 1;
inline bool ASTNodeArrayArchive_ASTRowCoordinateArchive::_internal_has_row() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTRowCoordinateArchive::has_row() const {
  return _internal_has_row();
}
inline void ASTNodeArrayArchive_ASTRowCoordinateArchive::clear_row() {
  _impl_.row_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t ASTNodeArrayArchive_ASTRowCoordinateArchive::_internal_row() const {
  return _impl_.row_;
}
inline int32_t ASTNodeArrayArchive_ASTRowCoordinateArchive::row() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive.row)
  return _internal_row();
}
inline void ASTNodeArrayArchive_ASTRowCoordinateArchive::_internal_set_row(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.row_ = value;
}
inline void ASTNodeArrayArchive_ASTRowCoordinateArchive::set_row(int32_t value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive.row)
}

// optional bool absolute = 2 [default = false];
inline bool ASTNodeArrayArchive_ASTRowCoordinateArchive::_internal_has_absolute() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTRowCoordinateArchive::has_absolute() const {
  return _internal_has_absolute();
}
inline void ASTNodeArrayArchive_ASTRowCoordinateArchive::clear_absolute() {
  _impl_.absolute_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool ASTNodeArrayArchive_ASTRowCoordinateArchive::_internal_absolute() const {
  return _impl_.absolute_;
}
inline bool ASTNodeArrayArchive_ASTRowCoordinateArchive::absolute() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive.absolute)
  return _internal_absolute();
}
inline void ASTNodeArrayArchive_ASTRowCoordinateArchive::_internal_set_absolute(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.absolute_ = value;
}
inline void ASTNodeArrayArchive_ASTRowCoordinateArchive::set_absolute(bool value) {
  _internal_set_absolute(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive.absolute)
}

// -------------------------------------------------------------------

// ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive

// required .TSCE.CFUUIDArchive table_id = 1;
inline bool ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_has_table_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.table_id_ != nullptr);
  return value;
}
inline bool ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::has_table_id() const {
  return _internal_has_table_id();
}
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::clear_table_id() {
  if (_impl_.table_id_ != nullptr) _impl_.table_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::TSCE::CFUUIDArchive& ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_table_id() const {
  const ::TSCE::CFUUIDArchive* p = _impl_.table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CFUUIDArchive&>(
      ::TSCE::_CFUUIDArchive_default_instance_);
}
inline const ::TSCE::CFUUIDArchive& ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::table_id() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.table_id)
  return _internal_table_id();
}
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::unsafe_arena_set_allocated_table_id(
    ::TSCE::CFUUIDArchive* table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_id_);
  }
  _impl_.table_id_ = table_id;
  if (table_id) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.table_id)
}
inline ::TSCE::CFUUIDArchive* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::release_table_id() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCE::CFUUIDArchive* temp = _impl_.table_id_;
  _impl_.table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CFUUIDArchive* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::unsafe_arena_release_table_id() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.table_id)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCE::CFUUIDArchive* temp = _impl_.table_id_;
  _impl_.table_id_ = nullptr;
  return temp;
}
inline ::TSCE::CFUUIDArchive* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_mutable_table_id() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CFUUIDArchive>(GetArenaForAllocation());
    _impl_.table_id_ = p;
  }
  return _impl_.table_id_;
}
inline ::TSCE::CFUUIDArchive* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::mutable_table_id() {
  ::TSCE::CFUUIDArchive* _msg = _internal_mutable_table_id();
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.table_id)
  return _msg;
}
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::set_allocated_table_id(::TSCE::CFUUIDArchive* table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.table_id_;
  }
  if (table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(table_id);
    if (message_arena != submessage_arena) {
      table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.table_id_ = table_id;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.table_id)
}

// optional string AST_reference_whitespace_after_sheet_name = 2;
inline bool ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_has_ast_reference_whitespace_after_sheet_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::has_ast_reference_whitespace_after_sheet_name() const {
  return _internal_has_ast_reference_whitespace_after_sheet_name();
}
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::clear_ast_reference_whitespace_after_sheet_name() {
  _impl_.ast_reference_whitespace_after_sheet_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::ast_reference_whitespace_after_sheet_name() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_sheet_name)
  return _internal_ast_reference_whitespace_after_sheet_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::set_ast_reference_whitespace_after_sheet_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.ast_reference_whitespace_after_sheet_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_sheet_name)
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::mutable_ast_reference_whitespace_after_sheet_name() {
  std::string* _s = _internal_mutable_ast_reference_whitespace_after_sheet_name();
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_sheet_name)
  return _s;
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_ast_reference_whitespace_after_sheet_name() const {
  return _impl_.ast_reference_whitespace_after_sheet_name_.Get();
}
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_set_ast_reference_whitespace_after_sheet_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ast_reference_whitespace_after_sheet_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_mutable_ast_reference_whitespace_after_sheet_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.ast_reference_whitespace_after_sheet_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::release_ast_reference_whitespace_after_sheet_name() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_sheet_name)
  if (!_internal_has_ast_reference_whitespace_after_sheet_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.ast_reference_whitespace_after_sheet_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ast_reference_whitespace_after_sheet_name_.IsDefault()) {
    _impl_.ast_reference_whitespace_after_sheet_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::set_allocated_ast_reference_whitespace_after_sheet_name(std::string* ast_reference_whitespace_after_sheet_name) {
  if (ast_reference_whitespace_after_sheet_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ast_reference_whitespace_after_sheet_name_.SetAllocated(ast_reference_whitespace_after_sheet_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ast_reference_whitespace_after_sheet_name_.IsDefault()) {
    _impl_.ast_reference_whitespace_after_sheet_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_sheet_name)
}

// optional string AST_reference_whitespace_before_table_name = 3;
inline bool ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_has_ast_reference_whitespace_before_table_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::has_ast_reference_whitespace_before_table_name() const {
  return _internal_has_ast_reference_whitespace_before_table_name();
}
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::clear_ast_reference_whitespace_before_table_name() {
  _impl_.ast_reference_whitespace_before_table_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::ast_reference_whitespace_before_table_name() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_table_name)
  return _internal_ast_reference_whitespace_before_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::set_ast_reference_whitespace_before_table_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.ast_reference_whitespace_before_table_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_table_name)
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::mutable_ast_reference_whitespace_before_table_name() {
  std::string* _s = _internal_mutable_ast_reference_whitespace_before_table_name();
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_table_name)
  return _s;
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_ast_reference_whitespace_before_table_name() const {
  return _impl_.ast_reference_whitespace_before_table_name_.Get();
}
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_set_ast_reference_whitespace_before_table_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ast_reference_whitespace_before_table_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_mutable_ast_reference_whitespace_before_table_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.ast_reference_whitespace_before_table_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::release_ast_reference_whitespace_before_table_name() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_table_name)
  if (!_internal_has_ast_reference_whitespace_before_table_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.ast_reference_whitespace_before_table_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ast_reference_whitespace_before_table_name_.IsDefault()) {
    _impl_.ast_reference_whitespace_before_table_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::set_allocated_ast_reference_whitespace_before_table_name(std::string* ast_reference_whitespace_before_table_name) {
  if (ast_reference_whitespace_before_table_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.ast_reference_whitespace_before_table_name_.SetAllocated(ast_reference_whitespace_before_table_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ast_reference_whitespace_before_table_name_.IsDefault()) {
    _impl_.ast_reference_whitespace_before_table_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_table_name)
}

// optional string AST_reference_whitespace_after_table_name = 4;
inline bool ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_has_ast_reference_whitespace_after_table_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::has_ast_reference_whitespace_after_table_name() const {
  return _internal_has_ast_reference_whitespace_after_table_name();
}
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::clear_ast_reference_whitespace_after_table_name() {
  _impl_.ast_reference_whitespace_after_table_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::ast_reference_whitespace_after_table_name() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_table_name)
  return _internal_ast_reference_whitespace_after_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::set_ast_reference_whitespace_after_table_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.ast_reference_whitespace_after_table_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_table_name)
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::mutable_ast_reference_whitespace_after_table_name() {
  std::string* _s = _internal_mutable_ast_reference_whitespace_after_table_name();
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_table_name)
  return _s;
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_ast_reference_whitespace_after_table_name() const {
  return _impl_.ast_reference_whitespace_after_table_name_.Get();
}
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_set_ast_reference_whitespace_after_table_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ast_reference_whitespace_after_table_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_mutable_ast_reference_whitespace_after_table_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.ast_reference_whitespace_after_table_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::release_ast_reference_whitespace_after_table_name() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_table_name)
  if (!_internal_has_ast_reference_whitespace_after_table_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.ast_reference_whitespace_after_table_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ast_reference_whitespace_after_table_name_.IsDefault()) {
    _impl_.ast_reference_whitespace_after_table_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::set_allocated_ast_reference_whitespace_after_table_name(std::string* ast_reference_whitespace_after_table_name) {
  if (ast_reference_whitespace_after_table_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.ast_reference_whitespace_after_table_name_.SetAllocated(ast_reference_whitespace_after_table_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ast_reference_whitespace_after_table_name_.IsDefault()) {
    _impl_.ast_reference_whitespace_after_table_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_table_name)
}

// optional string AST_reference_whitespace_before_cell_address = 5;
inline bool ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_has_ast_reference_whitespace_before_cell_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::has_ast_reference_whitespace_before_cell_address() const {
  return _internal_has_ast_reference_whitespace_before_cell_address();
}
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::clear_ast_reference_whitespace_before_cell_address() {
  _impl_.ast_reference_whitespace_before_cell_address_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::ast_reference_whitespace_before_cell_address() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_cell_address)
  return _internal_ast_reference_whitespace_before_cell_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::set_ast_reference_whitespace_before_cell_address(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.ast_reference_whitespace_before_cell_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_cell_address)
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::mutable_ast_reference_whitespace_before_cell_address() {
  std::string* _s = _internal_mutable_ast_reference_whitespace_before_cell_address();
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_cell_address)
  return _s;
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_ast_reference_whitespace_before_cell_address() const {
  return _impl_.ast_reference_whitespace_before_cell_address_.Get();
}
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_set_ast_reference_whitespace_before_cell_address(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ast_reference_whitespace_before_cell_address_.Set(value, GetArenaForAllocation());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_mutable_ast_reference_whitespace_before_cell_address() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.ast_reference_whitespace_before_cell_address_.Mutable(GetArenaForAllocation());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::release_ast_reference_whitespace_before_cell_address() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_cell_address)
  if (!_internal_has_ast_reference_whitespace_before_cell_address()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.ast_reference_whitespace_before_cell_address_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ast_reference_whitespace_before_cell_address_.IsDefault()) {
    _impl_.ast_reference_whitespace_before_cell_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::set_allocated_ast_reference_whitespace_before_cell_address(std::string* ast_reference_whitespace_before_cell_address) {
  if (ast_reference_whitespace_before_cell_address != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.ast_reference_whitespace_before_cell_address_.SetAllocated(ast_reference_whitespace_before_cell_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ast_reference_whitespace_before_cell_address_.IsDefault()) {
    _impl_.ast_reference_whitespace_before_cell_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_cell_address)
}

// -------------------------------------------------------------------

// ASTNodeArrayArchive_ASTNodeArchive

// required .TSCE.ASTNodeArrayArchive.ASTNodeType AST_node_type = 1;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_node_type() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_node_type() const {
  return _internal_has_ast_node_type();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_node_type() {
  _impl_.ast_node_type_ = 1;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline ::TSCE::ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_node_type() const {
  return static_cast< ::TSCE::ASTNodeArrayArchive_ASTNodeType >(_impl_.ast_node_type_);
}
inline ::TSCE::ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive_ASTNodeArchive::ast_node_type() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_node_type)
  return _internal_ast_node_type();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_node_type(::TSCE::ASTNodeArrayArchive_ASTNodeType value) {
  assert(::TSCE::ASTNodeArrayArchive_ASTNodeType_IsValid(value));
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.ast_node_type_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_node_type(::TSCE::ASTNodeArrayArchive_ASTNodeType value) {
  _internal_set_ast_node_type(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_node_type)
}

// optional uint32 AST_function_node_index = 2;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_function_node_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_function_node_index() const {
  return _internal_has_ast_function_node_index();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_function_node_index() {
  _impl_.ast_function_node_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_function_node_index() const {
  return _impl_.ast_function_node_index_;
}
inline uint32_t ASTNodeArrayArchive_ASTNodeArchive::ast_function_node_index() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_function_node_index)
  return _internal_ast_function_node_index();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_function_node_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.ast_function_node_index_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_function_node_index(uint32_t value) {
  _internal_set_ast_function_node_index(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_function_node_index)
}

// optional uint32 AST_function_node_numArgs = 3;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_function_node_numargs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_function_node_numargs() const {
  return _internal_has_ast_function_node_numargs();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_function_node_numargs() {
  _impl_.ast_function_node_numargs_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_function_node_numargs() const {
  return _impl_.ast_function_node_numargs_;
}
inline uint32_t ASTNodeArrayArchive_ASTNodeArchive::ast_function_node_numargs() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_function_node_numArgs)
  return _internal_ast_function_node_numargs();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_function_node_numargs(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.ast_function_node_numargs_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_function_node_numargs(uint32_t value) {
  _internal_set_ast_function_node_numargs(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_function_node_numArgs)
}

// optional double AST_number_node_number = 4;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_number_node_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_number_node_number() const {
  return _internal_has_ast_number_node_number();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_number_node_number() {
  _impl_.ast_number_node_number_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_number_node_number() const {
  return _impl_.ast_number_node_number_;
}
inline double ASTNodeArrayArchive_ASTNodeArchive::ast_number_node_number() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_number_node_number)
  return _internal_ast_number_node_number();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_number_node_number(double value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.ast_number_node_number_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_number_node_number(double value) {
  _internal_set_ast_number_node_number(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_number_node_number)
}

// optional bool AST_boolean_node_boolean = 5;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_boolean_node_boolean() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_boolean_node_boolean() const {
  return _internal_has_ast_boolean_node_boolean();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_boolean_node_boolean() {
  _impl_.ast_boolean_node_boolean_ = false;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_boolean_node_boolean() const {
  return _impl_.ast_boolean_node_boolean_;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::ast_boolean_node_boolean() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_boolean_node_boolean)
  return _internal_ast_boolean_node_boolean();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_boolean_node_boolean(bool value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.ast_boolean_node_boolean_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_boolean_node_boolean(bool value) {
  _internal_set_ast_boolean_node_boolean(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_boolean_node_boolean)
}

// optional string AST_string_node_string = 6;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_string_node_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_string_node_string() const {
  return _internal_has_ast_string_node_string();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_string_node_string() {
  _impl_.ast_string_node_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ASTNodeArrayArchive_ASTNodeArchive::ast_string_node_string() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_string_node_string)
  return _internal_ast_string_node_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ASTNodeArrayArchive_ASTNodeArchive::set_ast_string_node_string(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.ast_string_node_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_string_node_string)
}
inline std::string* ASTNodeArrayArchive_ASTNodeArchive::mutable_ast_string_node_string() {
  std::string* _s = _internal_mutable_ast_string_node_string();
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_string_node_string)
  return _s;
}
inline const std::string& ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_string_node_string() const {
  return _impl_.ast_string_node_string_.Get();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_string_node_string(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ast_string_node_string_.Set(value, GetArenaForAllocation());
}
inline std::string* ASTNodeArrayArchive_ASTNodeArchive::_internal_mutable_ast_string_node_string() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.ast_string_node_string_.Mutable(GetArenaForAllocation());
}
inline std::string* ASTNodeArrayArchive_ASTNodeArchive::release_ast_string_node_string() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_string_node_string)
  if (!_internal_has_ast_string_node_string()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.ast_string_node_string_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ast_string_node_string_.IsDefault()) {
    _impl_.ast_string_node_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_allocated_ast_string_node_string(std::string* ast_string_node_string) {
  if (ast_string_node_string != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ast_string_node_string_.SetAllocated(ast_string_node_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ast_string_node_string_.IsDefault()) {
    _impl_.ast_string_node_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_string_node_string)
}

// optional double AST_date_node_dateNum = 7;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_date_node_datenum() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_date_node_datenum() const {
  return _internal_has_ast_date_node_datenum();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_date_node_datenum() {
  _impl_.ast_date_node_datenum_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_date_node_datenum() const {
  return _impl_.ast_date_node_datenum_;
}
inline double ASTNodeArrayArchive_ASTNodeArchive::ast_date_node_datenum() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_date_node_dateNum)
  return _internal_ast_date_node_datenum();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_date_node_datenum(double value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.ast_date_node_datenum_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_date_node_datenum(double value) {
  _internal_set_ast_date_node_datenum(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_date_node_dateNum)
}

// optional bool AST_date_node_suppress_date_format = 19;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_date_node_suppress_date_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_date_node_suppress_date_format() const {
  return _internal_has_ast_date_node_suppress_date_format();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_date_node_suppress_date_format() {
  _impl_.ast_date_node_suppress_date_format_ = false;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_date_node_suppress_date_format() const {
  return _impl_.ast_date_node_suppress_date_format_;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::ast_date_node_suppress_date_format() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_date_node_suppress_date_format)
  return _internal_ast_date_node_suppress_date_format();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_date_node_suppress_date_format(bool value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.ast_date_node_suppress_date_format_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_date_node_suppress_date_format(bool value) {
  _internal_set_ast_date_node_suppress_date_format(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_date_node_suppress_date_format)
}

// optional bool AST_date_node_suppress_time_format = 20;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_date_node_suppress_time_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_date_node_suppress_time_format() const {
  return _internal_has_ast_date_node_suppress_time_format();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_date_node_suppress_time_format() {
  _impl_.ast_date_node_suppress_time_format_ = false;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_date_node_suppress_time_format() const {
  return _impl_.ast_date_node_suppress_time_format_;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::ast_date_node_suppress_time_format() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_date_node_suppress_time_format)
  return _internal_ast_date_node_suppress_time_format();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_date_node_suppress_time_format(bool value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.ast_date_node_suppress_time_format_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_date_node_suppress_time_format(bool value) {
  _internal_set_ast_date_node_suppress_time_format(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_date_node_suppress_time_format)
}

// optional string AST_date_node_date_time_format = 21;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_date_node_date_time_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_date_node_date_time_format() const {
  return _internal_has_ast_date_node_date_time_format();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_date_node_date_time_format() {
  _impl_.ast_date_node_date_time_format_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ASTNodeArrayArchive_ASTNodeArchive::ast_date_node_date_time_format() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_date_node_date_time_format)
  return _internal_ast_date_node_date_time_format();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ASTNodeArrayArchive_ASTNodeArchive::set_ast_date_node_date_time_format(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.ast_date_node_date_time_format_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_date_node_date_time_format)
}
inline std::string* ASTNodeArrayArchive_ASTNodeArchive::mutable_ast_date_node_date_time_format() {
  std::string* _s = _internal_mutable_ast_date_node_date_time_format();
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_date_node_date_time_format)
  return _s;
}
inline const std::string& ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_date_node_date_time_format() const {
  return _impl_.ast_date_node_date_time_format_.Get();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_date_node_date_time_format(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ast_date_node_date_time_format_.Set(value, GetArenaForAllocation());
}
inline std::string* ASTNodeArrayArchive_ASTNodeArchive::_internal_mutable_ast_date_node_date_time_format() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.ast_date_node_date_time_format_.Mutable(GetArenaForAllocation());
}
inline std::string* ASTNodeArrayArchive_ASTNodeArchive::release_ast_date_node_date_time_format() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_date_node_date_time_format)
  if (!_internal_has_ast_date_node_date_time_format()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.ast_date_node_date_time_format_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ast_date_node_date_time_format_.IsDefault()) {
    _impl_.ast_date_node_date_time_format_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_allocated_ast_date_node_date_time_format(std::string* ast_date_node_date_time_format) {
  if (ast_date_node_date_time_format != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.ast_date_node_date_time_format_.SetAllocated(ast_date_node_date_time_format, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ast_date_node_date_time_format_.IsDefault()) {
    _impl_.ast_date_node_date_time_format_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_date_node_date_time_format)
}

// optional double AST_duration_node_unitNum = 8;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_duration_node_unitnum() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_duration_node_unitnum() const {
  return _internal_has_ast_duration_node_unitnum();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_duration_node_unitnum() {
  _impl_.ast_duration_node_unitnum_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_duration_node_unitnum() const {
  return _impl_.ast_duration_node_unitnum_;
}
inline double ASTNodeArrayArchive_ASTNodeArchive::ast_duration_node_unitnum() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_duration_node_unitNum)
  return _internal_ast_duration_node_unitnum();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_duration_node_unitnum(double value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.ast_duration_node_unitnum_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_duration_node_unitnum(double value) {
  _internal_set_ast_duration_node_unitnum(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_duration_node_unitNum)
}

// optional int32 AST_duration_node_unit = 9;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_duration_node_unit() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_duration_node_unit() const {
  return _internal_has_ast_duration_node_unit();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_duration_node_unit() {
  _impl_.ast_duration_node_unit_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline int32_t ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_duration_node_unit() const {
  return _impl_.ast_duration_node_unit_;
}
inline int32_t ASTNodeArrayArchive_ASTNodeArchive::ast_duration_node_unit() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_duration_node_unit)
  return _internal_ast_duration_node_unit();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_duration_node_unit(int32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.ast_duration_node_unit_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_duration_node_unit(int32_t value) {
  _internal_set_ast_duration_node_unit(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_duration_node_unit)
}

// optional uint32 AST_duration_node_style = 22;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_duration_node_style() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_duration_node_style() const {
  return _internal_has_ast_duration_node_style();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_duration_node_style() {
  _impl_.ast_duration_node_style_ = 0u;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline uint32_t ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_duration_node_style() const {
  return _impl_.ast_duration_node_style_;
}
inline uint32_t ASTNodeArrayArchive_ASTNodeArchive::ast_duration_node_style() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_duration_node_style)
  return _internal_ast_duration_node_style();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_duration_node_style(uint32_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.ast_duration_node_style_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_duration_node_style(uint32_t value) {
  _internal_set_ast_duration_node_style(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_duration_node_style)
}

// optional uint32 AST_duration_node_duration_unit_largest = 23;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_duration_node_duration_unit_largest() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_duration_node_duration_unit_largest() const {
  return _internal_has_ast_duration_node_duration_unit_largest();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_duration_node_duration_unit_largest() {
  _impl_.ast_duration_node_duration_unit_largest_ = 0u;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline uint32_t ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_duration_node_duration_unit_largest() const {
  return _impl_.ast_duration_node_duration_unit_largest_;
}
inline uint32_t ASTNodeArrayArchive_ASTNodeArchive::ast_duration_node_duration_unit_largest() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_duration_node_duration_unit_largest)
  return _internal_ast_duration_node_duration_unit_largest();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_duration_node_duration_unit_largest(uint32_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.ast_duration_node_duration_unit_largest_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_duration_node_duration_unit_largest(uint32_t value) {
  _internal_set_ast_duration_node_duration_unit_largest(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_duration_node_duration_unit_largest)
}

// optional uint32 AST_duration_node_duration_unit_smallest = 24;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_duration_node_duration_unit_smallest() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_duration_node_duration_unit_smallest() const {
  return _internal_has_ast_duration_node_duration_unit_smallest();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_duration_node_duration_unit_smallest() {
  _impl_.ast_duration_node_duration_unit_smallest_ = 0u;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline uint32_t ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_duration_node_duration_unit_smallest() const {
  return _impl_.ast_duration_node_duration_unit_smallest_;
}
inline uint32_t ASTNodeArrayArchive_ASTNodeArchive::ast_duration_node_duration_unit_smallest() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_duration_node_duration_unit_smallest)
  return _internal_ast_duration_node_duration_unit_smallest();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_duration_node_duration_unit_smallest(uint32_t value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.ast_duration_node_duration_unit_smallest_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_duration_node_duration_unit_smallest(uint32_t value) {
  _internal_set_ast_duration_node_duration_unit_smallest(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_duration_node_duration_unit_smallest)
}

// optional bool AST_duration_node_use_automatic_units = 29;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_duration_node_use_automatic_units() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_duration_node_use_automatic_units() const {
  return _internal_has_ast_duration_node_use_automatic_units();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_duration_node_use_automatic_units() {
  _impl_.ast_duration_node_use_automatic_units_ = false;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_duration_node_use_automatic_units() const {
  return _impl_.ast_duration_node_use_automatic_units_;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::ast_duration_node_use_automatic_units() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_duration_node_use_automatic_units)
  return _internal_ast_duration_node_use_automatic_units();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_duration_node_use_automatic_units(bool value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.ast_duration_node_use_automatic_units_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_duration_node_use_automatic_units(bool value) {
  _internal_set_ast_duration_node_use_automatic_units(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_duration_node_use_automatic_units)
}

// optional bool AST_token_node_boolean = 10;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_token_node_boolean() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_token_node_boolean() const {
  return _internal_has_ast_token_node_boolean();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_token_node_boolean() {
  _impl_.ast_token_node_boolean_ = false;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_token_node_boolean() const {
  return _impl_.ast_token_node_boolean_;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::ast_token_node_boolean() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_token_node_boolean)
  return _internal_ast_token_node_boolean();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_token_node_boolean(bool value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.ast_token_node_boolean_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_token_node_boolean(bool value) {
  _internal_set_ast_token_node_boolean(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_token_node_boolean)
}

// optional uint32 AST_array_node_numCol = 11;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_array_node_numcol() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_array_node_numcol() const {
  return _internal_has_ast_array_node_numcol();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_array_node_numcol() {
  _impl_.ast_array_node_numcol_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline uint32_t ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_array_node_numcol() const {
  return _impl_.ast_array_node_numcol_;
}
inline uint32_t ASTNodeArrayArchive_ASTNodeArchive::ast_array_node_numcol() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_array_node_numCol)
  return _internal_ast_array_node_numcol();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_array_node_numcol(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.ast_array_node_numcol_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_array_node_numcol(uint32_t value) {
  _internal_set_ast_array_node_numcol(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_array_node_numCol)
}

// optional uint32 AST_array_node_numRow = 12;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_array_node_numrow() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_array_node_numrow() const {
  return _internal_has_ast_array_node_numrow();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_array_node_numrow() {
  _impl_.ast_array_node_numrow_ = 0u;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline uint32_t ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_array_node_numrow() const {
  return _impl_.ast_array_node_numrow_;
}
inline uint32_t ASTNodeArrayArchive_ASTNodeArchive::ast_array_node_numrow() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_array_node_numRow)
  return _internal_ast_array_node_numrow();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_array_node_numrow(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.ast_array_node_numrow_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_array_node_numrow(uint32_t value) {
  _internal_set_ast_array_node_numrow(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_array_node_numRow)
}

// optional uint32 AST_list_node_numArgs = 13;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_list_node_numargs() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_list_node_numargs() const {
  return _internal_has_ast_list_node_numargs();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_list_node_numargs() {
  _impl_.ast_list_node_numargs_ = 0u;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline uint32_t ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_list_node_numargs() const {
  return _impl_.ast_list_node_numargs_;
}
inline uint32_t ASTNodeArrayArchive_ASTNodeArchive::ast_list_node_numargs() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_list_node_numArgs)
  return _internal_ast_list_node_numargs();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_list_node_numargs(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.ast_list_node_numargs_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_list_node_numargs(uint32_t value) {
  _internal_set_ast_list_node_numargs(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_list_node_numArgs)
}

// optional .TSCE.ASTNodeArrayArchive AST_thunk_node_array = 14;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_thunk_node_array() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ast_thunk_node_array_ != nullptr);
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_thunk_node_array() const {
  return _internal_has_ast_thunk_node_array();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_thunk_node_array() {
  if (_impl_.ast_thunk_node_array_ != nullptr) _impl_.ast_thunk_node_array_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::TSCE::ASTNodeArrayArchive& ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_thunk_node_array() const {
  const ::TSCE::ASTNodeArrayArchive* p = _impl_.ast_thunk_node_array_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ASTNodeArrayArchive&>(
      ::TSCE::_ASTNodeArrayArchive_default_instance_);
}
inline const ::TSCE::ASTNodeArrayArchive& ASTNodeArrayArchive_ASTNodeArchive::ast_thunk_node_array() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_thunk_node_array)
  return _internal_ast_thunk_node_array();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_set_allocated_ast_thunk_node_array(
    ::TSCE::ASTNodeArrayArchive* ast_thunk_node_array) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ast_thunk_node_array_);
  }
  _impl_.ast_thunk_node_array_ = ast_thunk_node_array;
  if (ast_thunk_node_array) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_thunk_node_array)
}
inline ::TSCE::ASTNodeArrayArchive* ASTNodeArrayArchive_ASTNodeArchive::release_ast_thunk_node_array() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCE::ASTNodeArrayArchive* temp = _impl_.ast_thunk_node_array_;
  _impl_.ast_thunk_node_array_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive* ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_release_ast_thunk_node_array() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_thunk_node_array)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCE::ASTNodeArrayArchive* temp = _impl_.ast_thunk_node_array_;
  _impl_.ast_thunk_node_array_ = nullptr;
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive* ASTNodeArrayArchive_ASTNodeArchive::_internal_mutable_ast_thunk_node_array() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.ast_thunk_node_array_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ASTNodeArrayArchive>(GetArenaForAllocation());
    _impl_.ast_thunk_node_array_ = p;
  }
  return _impl_.ast_thunk_node_array_;
}
inline ::TSCE::ASTNodeArrayArchive* ASTNodeArrayArchive_ASTNodeArchive::mutable_ast_thunk_node_array() {
  ::TSCE::ASTNodeArrayArchive* _msg = _internal_mutable_ast_thunk_node_array();
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_thunk_node_array)
  return _msg;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_allocated_ast_thunk_node_array(::TSCE::ASTNodeArrayArchive* ast_thunk_node_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ast_thunk_node_array_;
  }
  if (ast_thunk_node_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ast_thunk_node_array);
    if (message_arena != submessage_arena) {
      ast_thunk_node_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ast_thunk_node_array, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.ast_thunk_node_array_ = ast_thunk_node_array;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_thunk_node_array)
}

// optional .TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive AST_local_cell_reference_node_reference = 15;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_local_cell_reference_node_reference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ast_local_cell_reference_node_reference_ != nullptr);
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_local_cell_reference_node_reference() const {
  return _internal_has_ast_local_cell_reference_node_reference();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_local_cell_reference_node_reference() {
  if (_impl_.ast_local_cell_reference_node_reference_ != nullptr) _impl_.ast_local_cell_reference_node_reference_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_local_cell_reference_node_reference() const {
  const ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* p = _impl_.ast_local_cell_reference_node_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive&>(
      ::TSCE::_ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive_default_instance_);
}
inline const ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& ASTNodeArrayArchive_ASTNodeArchive::ast_local_cell_reference_node_reference() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_local_cell_reference_node_reference)
  return _internal_ast_local_cell_reference_node_reference();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_set_allocated_ast_local_cell_reference_node_reference(
    ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* ast_local_cell_reference_node_reference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ast_local_cell_reference_node_reference_);
  }
  _impl_.ast_local_cell_reference_node_reference_ = ast_local_cell_reference_node_reference;
  if (ast_local_cell_reference_node_reference) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_local_cell_reference_node_reference)
}
inline ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* ASTNodeArrayArchive_ASTNodeArchive::release_ast_local_cell_reference_node_reference() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* temp = _impl_.ast_local_cell_reference_node_reference_;
  _impl_.ast_local_cell_reference_node_reference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_release_ast_local_cell_reference_node_reference() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_local_cell_reference_node_reference)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* temp = _impl_.ast_local_cell_reference_node_reference_;
  _impl_.ast_local_cell_reference_node_reference_ = nullptr;
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* ASTNodeArrayArchive_ASTNodeArchive::_internal_mutable_ast_local_cell_reference_node_reference() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.ast_local_cell_reference_node_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive>(GetArenaForAllocation());
    _impl_.ast_local_cell_reference_node_reference_ = p;
  }
  return _impl_.ast_local_cell_reference_node_reference_;
}
inline ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* ASTNodeArrayArchive_ASTNodeArchive::mutable_ast_local_cell_reference_node_reference() {
  ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* _msg = _internal_mutable_ast_local_cell_reference_node_reference();
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_local_cell_reference_node_reference)
  return _msg;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_allocated_ast_local_cell_reference_node_reference(::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* ast_local_cell_reference_node_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ast_local_cell_reference_node_reference_;
  }
  if (ast_local_cell_reference_node_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ast_local_cell_reference_node_reference);
    if (message_arena != submessage_arena) {
      ast_local_cell_reference_node_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ast_local_cell_reference_node_reference, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.ast_local_cell_reference_node_reference_ = ast_local_cell_reference_node_reference;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_local_cell_reference_node_reference)
}

// optional .TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive AST_cross_table_cell_reference_node_reference = 16;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_cross_table_cell_reference_node_reference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ast_cross_table_cell_reference_node_reference_ != nullptr);
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_cross_table_cell_reference_node_reference() const {
  return _internal_has_ast_cross_table_cell_reference_node_reference();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_cross_table_cell_reference_node_reference() {
  if (_impl_.ast_cross_table_cell_reference_node_reference_ != nullptr) _impl_.ast_cross_table_cell_reference_node_reference_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_cross_table_cell_reference_node_reference() const {
  const ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* p = _impl_.ast_cross_table_cell_reference_node_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive&>(
      ::TSCE::_ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive_default_instance_);
}
inline const ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& ASTNodeArrayArchive_ASTNodeArchive::ast_cross_table_cell_reference_node_reference() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_cross_table_cell_reference_node_reference)
  return _internal_ast_cross_table_cell_reference_node_reference();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_set_allocated_ast_cross_table_cell_reference_node_reference(
    ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* ast_cross_table_cell_reference_node_reference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ast_cross_table_cell_reference_node_reference_);
  }
  _impl_.ast_cross_table_cell_reference_node_reference_ = ast_cross_table_cell_reference_node_reference;
  if (ast_cross_table_cell_reference_node_reference) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_cross_table_cell_reference_node_reference)
}
inline ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* ASTNodeArrayArchive_ASTNodeArchive::release_ast_cross_table_cell_reference_node_reference() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* temp = _impl_.ast_cross_table_cell_reference_node_reference_;
  _impl_.ast_cross_table_cell_reference_node_reference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_release_ast_cross_table_cell_reference_node_reference() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_cross_table_cell_reference_node_reference)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* temp = _impl_.ast_cross_table_cell_reference_node_reference_;
  _impl_.ast_cross_table_cell_reference_node_reference_ = nullptr;
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* ASTNodeArrayArchive_ASTNodeArchive::_internal_mutable_ast_cross_table_cell_reference_node_reference() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.ast_cross_table_cell_reference_node_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive>(GetArenaForAllocation());
    _impl_.ast_cross_table_cell_reference_node_reference_ = p;
  }
  return _impl_.ast_cross_table_cell_reference_node_reference_;
}
inline ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* ASTNodeArrayArchive_ASTNodeArchive::mutable_ast_cross_table_cell_reference_node_reference() {
  ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* _msg = _internal_mutable_ast_cross_table_cell_reference_node_reference();
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_cross_table_cell_reference_node_reference)
  return _msg;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_allocated_ast_cross_table_cell_reference_node_reference(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* ast_cross_table_cell_reference_node_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ast_cross_table_cell_reference_node_reference_;
  }
  if (ast_cross_table_cell_reference_node_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ast_cross_table_cell_reference_node_reference);
    if (message_arena != submessage_arena) {
      ast_cross_table_cell_reference_node_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ast_cross_table_cell_reference_node_reference, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.ast_cross_table_cell_reference_node_reference_ = ast_cross_table_cell_reference_node_reference;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_cross_table_cell_reference_node_reference)
}

// optional string AST_unknown_function_node_string = 17;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_unknown_function_node_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_unknown_function_node_string() const {
  return _internal_has_ast_unknown_function_node_string();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_unknown_function_node_string() {
  _impl_.ast_unknown_function_node_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ASTNodeArrayArchive_ASTNodeArchive::ast_unknown_function_node_string() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_unknown_function_node_string)
  return _internal_ast_unknown_function_node_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ASTNodeArrayArchive_ASTNodeArchive::set_ast_unknown_function_node_string(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.ast_unknown_function_node_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_unknown_function_node_string)
}
inline std::string* ASTNodeArrayArchive_ASTNodeArchive::mutable_ast_unknown_function_node_string() {
  std::string* _s = _internal_mutable_ast_unknown_function_node_string();
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_unknown_function_node_string)
  return _s;
}
inline const std::string& ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_unknown_function_node_string() const {
  return _impl_.ast_unknown_function_node_string_.Get();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_unknown_function_node_string(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ast_unknown_function_node_string_.Set(value, GetArenaForAllocation());
}
inline std::string* ASTNodeArrayArchive_ASTNodeArchive::_internal_mutable_ast_unknown_function_node_string() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.ast_unknown_function_node_string_.Mutable(GetArenaForAllocation());
}
inline std::string* ASTNodeArrayArchive_ASTNodeArchive::release_ast_unknown_function_node_string() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_unknown_function_node_string)
  if (!_internal_has_ast_unknown_function_node_string()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.ast_unknown_function_node_string_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ast_unknown_function_node_string_.IsDefault()) {
    _impl_.ast_unknown_function_node_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_allocated_ast_unknown_function_node_string(std::string* ast_unknown_function_node_string) {
  if (ast_unknown_function_node_string != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.ast_unknown_function_node_string_.SetAllocated(ast_unknown_function_node_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ast_unknown_function_node_string_.IsDefault()) {
    _impl_.ast_unknown_function_node_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_unknown_function_node_string)
}

// optional uint32 AST_unknown_function_node_numArgs = 18;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_unknown_function_node_numargs() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_unknown_function_node_numargs() const {
  return _internal_has_ast_unknown_function_node_numargs();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_unknown_function_node_numargs() {
  _impl_.ast_unknown_function_node_numargs_ = 0u;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline uint32_t ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_unknown_function_node_numargs() const {
  return _impl_.ast_unknown_function_node_numargs_;
}
inline uint32_t ASTNodeArrayArchive_ASTNodeArchive::ast_unknown_function_node_numargs() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_unknown_function_node_numArgs)
  return _internal_ast_unknown_function_node_numargs();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_unknown_function_node_numargs(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.ast_unknown_function_node_numargs_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_unknown_function_node_numargs(uint32_t value) {
  _internal_set_ast_unknown_function_node_numargs(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_unknown_function_node_numArgs)
}

// optional string AST_whitespace = 25;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_whitespace() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_whitespace() const {
  return _internal_has_ast_whitespace();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_whitespace() {
  _impl_.ast_whitespace_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ASTNodeArrayArchive_ASTNodeArchive::ast_whitespace() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_whitespace)
  return _internal_ast_whitespace();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ASTNodeArrayArchive_ASTNodeArchive::set_ast_whitespace(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.ast_whitespace_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_whitespace)
}
inline std::string* ASTNodeArrayArchive_ASTNodeArchive::mutable_ast_whitespace() {
  std::string* _s = _internal_mutable_ast_whitespace();
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_whitespace)
  return _s;
}
inline const std::string& ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_whitespace() const {
  return _impl_.ast_whitespace_.Get();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_whitespace(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ast_whitespace_.Set(value, GetArenaForAllocation());
}
inline std::string* ASTNodeArrayArchive_ASTNodeArchive::_internal_mutable_ast_whitespace() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.ast_whitespace_.Mutable(GetArenaForAllocation());
}
inline std::string* ASTNodeArrayArchive_ASTNodeArchive::release_ast_whitespace() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_whitespace)
  if (!_internal_has_ast_whitespace()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.ast_whitespace_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ast_whitespace_.IsDefault()) {
    _impl_.ast_whitespace_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_allocated_ast_whitespace(std::string* ast_whitespace) {
  if (ast_whitespace != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.ast_whitespace_.SetAllocated(ast_whitespace, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ast_whitespace_.IsDefault()) {
    _impl_.ast_whitespace_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_whitespace)
}

// optional .TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive AST_column = 26;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_column() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ast_column_ != nullptr);
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_column() const {
  return _internal_has_ast_column();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_column() {
  if (_impl_.ast_column_ != nullptr) _impl_.ast_column_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive& ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_column() const {
  const ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* p = _impl_.ast_column_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive&>(
      ::TSCE::_ASTNodeArrayArchive_ASTColumnCoordinateArchive_default_instance_);
}
inline const ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive& ASTNodeArrayArchive_ASTNodeArchive::ast_column() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_column)
  return _internal_ast_column();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_set_allocated_ast_column(
    ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* ast_column) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ast_column_);
  }
  _impl_.ast_column_ = ast_column;
  if (ast_column) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_column)
}
inline ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* ASTNodeArrayArchive_ASTNodeArchive::release_ast_column() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* temp = _impl_.ast_column_;
  _impl_.ast_column_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_release_ast_column() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_column)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* temp = _impl_.ast_column_;
  _impl_.ast_column_ = nullptr;
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* ASTNodeArrayArchive_ASTNodeArchive::_internal_mutable_ast_column() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.ast_column_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive>(GetArenaForAllocation());
    _impl_.ast_column_ = p;
  }
  return _impl_.ast_column_;
}
inline ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* ASTNodeArrayArchive_ASTNodeArchive::mutable_ast_column() {
  ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* _msg = _internal_mutable_ast_column();
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_column)
  return _msg;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_allocated_ast_column(::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* ast_column) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ast_column_;
  }
  if (ast_column) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ast_column);
    if (message_arena != submessage_arena) {
      ast_column = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ast_column, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.ast_column_ = ast_column;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_column)
}

// optional .TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive AST_row = 27;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_row() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ast_row_ != nullptr);
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_row() const {
  return _internal_has_ast_row();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_row() {
  if (_impl_.ast_row_ != nullptr) _impl_.ast_row_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive& ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_row() const {
  const ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* p = _impl_.ast_row_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive&>(
      ::TSCE::_ASTNodeArrayArchive_ASTRowCoordinateArchive_default_instance_);
}
inline const ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive& ASTNodeArrayArchive_ASTNodeArchive::ast_row() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_row)
  return _internal_ast_row();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_set_allocated_ast_row(
    ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* ast_row) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ast_row_);
  }
  _impl_.ast_row_ = ast_row;
  if (ast_row) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_row)
}
inline ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* ASTNodeArrayArchive_ASTNodeArchive::release_ast_row() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* temp = _impl_.ast_row_;
  _impl_.ast_row_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_release_ast_row() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_row)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* temp = _impl_.ast_row_;
  _impl_.ast_row_ = nullptr;
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* ASTNodeArrayArchive_ASTNodeArchive::_internal_mutable_ast_row() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.ast_row_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive>(GetArenaForAllocation());
    _impl_.ast_row_ = p;
  }
  return _impl_.ast_row_;
}
inline ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* ASTNodeArrayArchive_ASTNodeArchive::mutable_ast_row() {
  ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* _msg = _internal_mutable_ast_row();
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_row)
  return _msg;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_allocated_ast_row(::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* ast_row) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ast_row_;
  }
  if (ast_row) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ast_row);
    if (message_arena != submessage_arena) {
      ast_row = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ast_row, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.ast_row_ = ast_row;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_row)
}

// optional .TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive AST_cross_table_reference_extra_info = 28;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_cross_table_reference_extra_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ast_cross_table_reference_extra_info_ != nullptr);
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_cross_table_reference_extra_info() const {
  return _internal_has_ast_cross_table_reference_extra_info();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_cross_table_reference_extra_info() {
  if (_impl_.ast_cross_table_reference_extra_info_ != nullptr) _impl_.ast_cross_table_reference_extra_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_cross_table_reference_extra_info() const {
  const ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* p = _impl_.ast_cross_table_reference_extra_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive&>(
      ::TSCE::_ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive_default_instance_);
}
inline const ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& ASTNodeArrayArchive_ASTNodeArchive::ast_cross_table_reference_extra_info() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_cross_table_reference_extra_info)
  return _internal_ast_cross_table_reference_extra_info();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_set_allocated_ast_cross_table_reference_extra_info(
    ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* ast_cross_table_reference_extra_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ast_cross_table_reference_extra_info_);
  }
  _impl_.ast_cross_table_reference_extra_info_ = ast_cross_table_reference_extra_info;
  if (ast_cross_table_reference_extra_info) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_cross_table_reference_extra_info)
}
inline ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* ASTNodeArrayArchive_ASTNodeArchive::release_ast_cross_table_reference_extra_info() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* temp = _impl_.ast_cross_table_reference_extra_info_;
  _impl_.ast_cross_table_reference_extra_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_release_ast_cross_table_reference_extra_info() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_cross_table_reference_extra_info)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* temp = _impl_.ast_cross_table_reference_extra_info_;
  _impl_.ast_cross_table_reference_extra_info_ = nullptr;
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* ASTNodeArrayArchive_ASTNodeArchive::_internal_mutable_ast_cross_table_reference_extra_info() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.ast_cross_table_reference_extra_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive>(GetArenaForAllocation());
    _impl_.ast_cross_table_reference_extra_info_ = p;
  }
  return _impl_.ast_cross_table_reference_extra_info_;
}
inline ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* ASTNodeArrayArchive_ASTNodeArchive::mutable_ast_cross_table_reference_extra_info() {
  ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* _msg = _internal_mutable_ast_cross_table_reference_extra_info();
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_cross_table_reference_extra_info)
  return _msg;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_allocated_ast_cross_table_reference_extra_info(::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* ast_cross_table_reference_extra_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ast_cross_table_reference_extra_info_;
  }
  if (ast_cross_table_reference_extra_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ast_cross_table_reference_extra_info);
    if (message_arena != submessage_arena) {
      ast_cross_table_reference_extra_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ast_cross_table_reference_extra_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.ast_cross_table_reference_extra_info_ = ast_cross_table_reference_extra_info;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_cross_table_reference_extra_info)
}

// -------------------------------------------------------------------

// ASTNodeArrayArchive

// repeated .TSCE.ASTNodeArrayArchive.ASTNodeArchive AST_node = 1;
inline int ASTNodeArrayArchive::_internal_ast_node_size() const {
  return _impl_.ast_node_.size();
}
inline int ASTNodeArrayArchive::ast_node_size() const {
  return _internal_ast_node_size();
}
inline void ASTNodeArrayArchive::clear_ast_node() {
  _impl_.ast_node_.Clear();
}
inline ::TSCE::ASTNodeArrayArchive_ASTNodeArchive* ASTNodeArrayArchive::mutable_ast_node(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.AST_node)
  return _impl_.ast_node_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTNodeArchive >*
ASTNodeArrayArchive::mutable_ast_node() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.ASTNodeArrayArchive.AST_node)
  return &_impl_.ast_node_;
}
inline const ::TSCE::ASTNodeArrayArchive_ASTNodeArchive& ASTNodeArrayArchive::_internal_ast_node(int index) const {
  return _impl_.ast_node_.Get(index);
}
inline const ::TSCE::ASTNodeArrayArchive_ASTNodeArchive& ASTNodeArrayArchive::ast_node(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.AST_node)
  return _internal_ast_node(index);
}
inline ::TSCE::ASTNodeArrayArchive_ASTNodeArchive* ASTNodeArrayArchive::_internal_add_ast_node() {
  return _impl_.ast_node_.Add();
}
inline ::TSCE::ASTNodeArrayArchive_ASTNodeArchive* ASTNodeArrayArchive::add_ast_node() {
  ::TSCE::ASTNodeArrayArchive_ASTNodeArchive* _add = _internal_add_ast_node();
  // @@protoc_insertion_point(field_add:TSCE.ASTNodeArrayArchive.AST_node)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTNodeArchive >&
ASTNodeArrayArchive::ast_node() const {
  // @@protoc_insertion_point(field_list:TSCE.ASTNodeArrayArchive.AST_node)
  return _impl_.ast_node_;
}

// -------------------------------------------------------------------

// FormulaTranslationFlagsArchive

// optional bool excel_import_translation = 1 [default = false];
inline bool FormulaTranslationFlagsArchive::_internal_has_excel_import_translation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FormulaTranslationFlagsArchive::has_excel_import_translation() const {
  return _internal_has_excel_import_translation();
}
inline void FormulaTranslationFlagsArchive::clear_excel_import_translation() {
  _impl_.excel_import_translation_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool FormulaTranslationFlagsArchive::_internal_excel_import_translation() const {
  return _impl_.excel_import_translation_;
}
inline bool FormulaTranslationFlagsArchive::excel_import_translation() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaTranslationFlagsArchive.excel_import_translation)
  return _internal_excel_import_translation();
}
inline void FormulaTranslationFlagsArchive::_internal_set_excel_import_translation(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.excel_import_translation_ = value;
}
inline void FormulaTranslationFlagsArchive::set_excel_import_translation(bool value) {
  _internal_set_excel_import_translation(value);
  // @@protoc_insertion_point(field_set:TSCE.FormulaTranslationFlagsArchive.excel_import_translation)
}

// optional bool number_to_date_coercion_removal_translation = 2 [default = false];
inline bool FormulaTranslationFlagsArchive::_internal_has_number_to_date_coercion_removal_translation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FormulaTranslationFlagsArchive::has_number_to_date_coercion_removal_translation() const {
  return _internal_has_number_to_date_coercion_removal_translation();
}
inline void FormulaTranslationFlagsArchive::clear_number_to_date_coercion_removal_translation() {
  _impl_.number_to_date_coercion_removal_translation_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool FormulaTranslationFlagsArchive::_internal_number_to_date_coercion_removal_translation() const {
  return _impl_.number_to_date_coercion_removal_translation_;
}
inline bool FormulaTranslationFlagsArchive::number_to_date_coercion_removal_translation() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaTranslationFlagsArchive.number_to_date_coercion_removal_translation)
  return _internal_number_to_date_coercion_removal_translation();
}
inline void FormulaTranslationFlagsArchive::_internal_set_number_to_date_coercion_removal_translation(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.number_to_date_coercion_removal_translation_ = value;
}
inline void FormulaTranslationFlagsArchive::set_number_to_date_coercion_removal_translation(bool value) {
  _internal_set_number_to_date_coercion_removal_translation(value);
  // @@protoc_insertion_point(field_set:TSCE.FormulaTranslationFlagsArchive.number_to_date_coercion_removal_translation)
}

// -------------------------------------------------------------------

// FormulaArchive

// required .TSCE.ASTNodeArrayArchive AST_node_array = 1;
inline bool FormulaArchive::_internal_has_ast_node_array() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ast_node_array_ != nullptr);
  return value;
}
inline bool FormulaArchive::has_ast_node_array() const {
  return _internal_has_ast_node_array();
}
inline void FormulaArchive::clear_ast_node_array() {
  if (_impl_.ast_node_array_ != nullptr) _impl_.ast_node_array_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::ASTNodeArrayArchive& FormulaArchive::_internal_ast_node_array() const {
  const ::TSCE::ASTNodeArrayArchive* p = _impl_.ast_node_array_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ASTNodeArrayArchive&>(
      ::TSCE::_ASTNodeArrayArchive_default_instance_);
}
inline const ::TSCE::ASTNodeArrayArchive& FormulaArchive::ast_node_array() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaArchive.AST_node_array)
  return _internal_ast_node_array();
}
inline void FormulaArchive::unsafe_arena_set_allocated_ast_node_array(
    ::TSCE::ASTNodeArrayArchive* ast_node_array) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ast_node_array_);
  }
  _impl_.ast_node_array_ = ast_node_array;
  if (ast_node_array) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaArchive.AST_node_array)
}
inline ::TSCE::ASTNodeArrayArchive* FormulaArchive::release_ast_node_array() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::ASTNodeArrayArchive* temp = _impl_.ast_node_array_;
  _impl_.ast_node_array_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive* FormulaArchive::unsafe_arena_release_ast_node_array() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaArchive.AST_node_array)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::ASTNodeArrayArchive* temp = _impl_.ast_node_array_;
  _impl_.ast_node_array_ = nullptr;
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive* FormulaArchive::_internal_mutable_ast_node_array() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ast_node_array_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ASTNodeArrayArchive>(GetArenaForAllocation());
    _impl_.ast_node_array_ = p;
  }
  return _impl_.ast_node_array_;
}
inline ::TSCE::ASTNodeArrayArchive* FormulaArchive::mutable_ast_node_array() {
  ::TSCE::ASTNodeArrayArchive* _msg = _internal_mutable_ast_node_array();
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaArchive.AST_node_array)
  return _msg;
}
inline void FormulaArchive::set_allocated_ast_node_array(::TSCE::ASTNodeArrayArchive* ast_node_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ast_node_array_;
  }
  if (ast_node_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ast_node_array);
    if (message_arena != submessage_arena) {
      ast_node_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ast_node_array, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ast_node_array_ = ast_node_array;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaArchive.AST_node_array)
}

// optional uint32 host_column = 2;
inline bool FormulaArchive::_internal_has_host_column() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FormulaArchive::has_host_column() const {
  return _internal_has_host_column();
}
inline void FormulaArchive::clear_host_column() {
  _impl_.host_column_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t FormulaArchive::_internal_host_column() const {
  return _impl_.host_column_;
}
inline uint32_t FormulaArchive::host_column() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaArchive.host_column)
  return _internal_host_column();
}
inline void FormulaArchive::_internal_set_host_column(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.host_column_ = value;
}
inline void FormulaArchive::set_host_column(uint32_t value) {
  _internal_set_host_column(value);
  // @@protoc_insertion_point(field_set:TSCE.FormulaArchive.host_column)
}

// optional uint32 host_row = 3;
inline bool FormulaArchive::_internal_has_host_row() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FormulaArchive::has_host_row() const {
  return _internal_has_host_row();
}
inline void FormulaArchive::clear_host_row() {
  _impl_.host_row_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t FormulaArchive::_internal_host_row() const {
  return _impl_.host_row_;
}
inline uint32_t FormulaArchive::host_row() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaArchive.host_row)
  return _internal_host_row();
}
inline void FormulaArchive::_internal_set_host_row(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.host_row_ = value;
}
inline void FormulaArchive::set_host_row(uint32_t value) {
  _internal_set_host_row(value);
  // @@protoc_insertion_point(field_set:TSCE.FormulaArchive.host_row)
}

// optional bool host_column_is_negative = 4 [default = false];
inline bool FormulaArchive::_internal_has_host_column_is_negative() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FormulaArchive::has_host_column_is_negative() const {
  return _internal_has_host_column_is_negative();
}
inline void FormulaArchive::clear_host_column_is_negative() {
  _impl_.host_column_is_negative_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool FormulaArchive::_internal_host_column_is_negative() const {
  return _impl_.host_column_is_negative_;
}
inline bool FormulaArchive::host_column_is_negative() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaArchive.host_column_is_negative)
  return _internal_host_column_is_negative();
}
inline void FormulaArchive::_internal_set_host_column_is_negative(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.host_column_is_negative_ = value;
}
inline void FormulaArchive::set_host_column_is_negative(bool value) {
  _internal_set_host_column_is_negative(value);
  // @@protoc_insertion_point(field_set:TSCE.FormulaArchive.host_column_is_negative)
}

// optional bool host_row_is_negative = 5 [default = false];
inline bool FormulaArchive::_internal_has_host_row_is_negative() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FormulaArchive::has_host_row_is_negative() const {
  return _internal_has_host_row_is_negative();
}
inline void FormulaArchive::clear_host_row_is_negative() {
  _impl_.host_row_is_negative_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool FormulaArchive::_internal_host_row_is_negative() const {
  return _impl_.host_row_is_negative_;
}
inline bool FormulaArchive::host_row_is_negative() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaArchive.host_row_is_negative)
  return _internal_host_row_is_negative();
}
inline void FormulaArchive::_internal_set_host_row_is_negative(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.host_row_is_negative_ = value;
}
inline void FormulaArchive::set_host_row_is_negative(bool value) {
  _internal_set_host_row_is_negative(value);
  // @@protoc_insertion_point(field_set:TSCE.FormulaArchive.host_row_is_negative)
}

// optional .TSCE.FormulaTranslationFlagsArchive translation_flags = 6;
inline bool FormulaArchive::_internal_has_translation_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.translation_flags_ != nullptr);
  return value;
}
inline bool FormulaArchive::has_translation_flags() const {
  return _internal_has_translation_flags();
}
inline void FormulaArchive::clear_translation_flags() {
  if (_impl_.translation_flags_ != nullptr) _impl_.translation_flags_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::FormulaTranslationFlagsArchive& FormulaArchive::_internal_translation_flags() const {
  const ::TSCE::FormulaTranslationFlagsArchive* p = _impl_.translation_flags_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::FormulaTranslationFlagsArchive&>(
      ::TSCE::_FormulaTranslationFlagsArchive_default_instance_);
}
inline const ::TSCE::FormulaTranslationFlagsArchive& FormulaArchive::translation_flags() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaArchive.translation_flags)
  return _internal_translation_flags();
}
inline void FormulaArchive::unsafe_arena_set_allocated_translation_flags(
    ::TSCE::FormulaTranslationFlagsArchive* translation_flags) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.translation_flags_);
  }
  _impl_.translation_flags_ = translation_flags;
  if (translation_flags) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaArchive.translation_flags)
}
inline ::TSCE::FormulaTranslationFlagsArchive* FormulaArchive::release_translation_flags() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::FormulaTranslationFlagsArchive* temp = _impl_.translation_flags_;
  _impl_.translation_flags_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::FormulaTranslationFlagsArchive* FormulaArchive::unsafe_arena_release_translation_flags() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaArchive.translation_flags)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::FormulaTranslationFlagsArchive* temp = _impl_.translation_flags_;
  _impl_.translation_flags_ = nullptr;
  return temp;
}
inline ::TSCE::FormulaTranslationFlagsArchive* FormulaArchive::_internal_mutable_translation_flags() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.translation_flags_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::FormulaTranslationFlagsArchive>(GetArenaForAllocation());
    _impl_.translation_flags_ = p;
  }
  return _impl_.translation_flags_;
}
inline ::TSCE::FormulaTranslationFlagsArchive* FormulaArchive::mutable_translation_flags() {
  ::TSCE::FormulaTranslationFlagsArchive* _msg = _internal_mutable_translation_flags();
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaArchive.translation_flags)
  return _msg;
}
inline void FormulaArchive::set_allocated_translation_flags(::TSCE::FormulaTranslationFlagsArchive* translation_flags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.translation_flags_;
  }
  if (translation_flags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(translation_flags);
    if (message_arena != submessage_arena) {
      translation_flags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation_flags, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.translation_flags_ = translation_flags;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaArchive.translation_flags)
}

// -------------------------------------------------------------------

// FormatStructArchive

// required uint32 format_type = 1;
inline bool FormatStructArchive::_internal_has_format_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FormatStructArchive::has_format_type() const {
  return _internal_has_format_type();
}
inline void FormatStructArchive::clear_format_type() {
  _impl_.format_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t FormatStructArchive::_internal_format_type() const {
  return _impl_.format_type_;
}
inline uint32_t FormatStructArchive::format_type() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.format_type)
  return _internal_format_type();
}
inline void FormatStructArchive::_internal_set_format_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.format_type_ = value;
}
inline void FormatStructArchive::set_format_type(uint32_t value) {
  _internal_set_format_type(value);
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.format_type)
}

// optional uint32 decimal_places = 2;
inline bool FormatStructArchive::_internal_has_decimal_places() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FormatStructArchive::has_decimal_places() const {
  return _internal_has_decimal_places();
}
inline void FormatStructArchive::clear_decimal_places() {
  _impl_.decimal_places_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t FormatStructArchive::_internal_decimal_places() const {
  return _impl_.decimal_places_;
}
inline uint32_t FormatStructArchive::decimal_places() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.decimal_places)
  return _internal_decimal_places();
}
inline void FormatStructArchive::_internal_set_decimal_places(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.decimal_places_ = value;
}
inline void FormatStructArchive::set_decimal_places(uint32_t value) {
  _internal_set_decimal_places(value);
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.decimal_places)
}

// optional string currency_code = 3;
inline bool FormatStructArchive::_internal_has_currency_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FormatStructArchive::has_currency_code() const {
  return _internal_has_currency_code();
}
inline void FormatStructArchive::clear_currency_code() {
  _impl_.currency_code_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FormatStructArchive::currency_code() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.currency_code)
  return _internal_currency_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FormatStructArchive::set_currency_code(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.currency_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.currency_code)
}
inline std::string* FormatStructArchive::mutable_currency_code() {
  std::string* _s = _internal_mutable_currency_code();
  // @@protoc_insertion_point(field_mutable:TSCE.FormatStructArchive.currency_code)
  return _s;
}
inline const std::string& FormatStructArchive::_internal_currency_code() const {
  return _impl_.currency_code_.Get();
}
inline void FormatStructArchive::_internal_set_currency_code(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.currency_code_.Set(value, GetArenaForAllocation());
}
inline std::string* FormatStructArchive::_internal_mutable_currency_code() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.currency_code_.Mutable(GetArenaForAllocation());
}
inline std::string* FormatStructArchive::release_currency_code() {
  // @@protoc_insertion_point(field_release:TSCE.FormatStructArchive.currency_code)
  if (!_internal_has_currency_code()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.currency_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.currency_code_.IsDefault()) {
    _impl_.currency_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FormatStructArchive::set_allocated_currency_code(std::string* currency_code) {
  if (currency_code != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.currency_code_.SetAllocated(currency_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.currency_code_.IsDefault()) {
    _impl_.currency_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormatStructArchive.currency_code)
}

// optional uint32 negative_style = 4;
inline bool FormatStructArchive::_internal_has_negative_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FormatStructArchive::has_negative_style() const {
  return _internal_has_negative_style();
}
inline void FormatStructArchive::clear_negative_style() {
  _impl_.negative_style_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t FormatStructArchive::_internal_negative_style() const {
  return _impl_.negative_style_;
}
inline uint32_t FormatStructArchive::negative_style() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.negative_style)
  return _internal_negative_style();
}
inline void FormatStructArchive::_internal_set_negative_style(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.negative_style_ = value;
}
inline void FormatStructArchive::set_negative_style(uint32_t value) {
  _internal_set_negative_style(value);
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.negative_style)
}

// optional bool show_thousands_separator = 5;
inline bool FormatStructArchive::_internal_has_show_thousands_separator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FormatStructArchive::has_show_thousands_separator() const {
  return _internal_has_show_thousands_separator();
}
inline void FormatStructArchive::clear_show_thousands_separator() {
  _impl_.show_thousands_separator_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool FormatStructArchive::_internal_show_thousands_separator() const {
  return _impl_.show_thousands_separator_;
}
inline bool FormatStructArchive::show_thousands_separator() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.show_thousands_separator)
  return _internal_show_thousands_separator();
}
inline void FormatStructArchive::_internal_set_show_thousands_separator(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.show_thousands_separator_ = value;
}
inline void FormatStructArchive::set_show_thousands_separator(bool value) {
  _internal_set_show_thousands_separator(value);
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.show_thousands_separator)
}

// optional bool use_accounting_style = 6;
inline bool FormatStructArchive::_internal_has_use_accounting_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FormatStructArchive::has_use_accounting_style() const {
  return _internal_has_use_accounting_style();
}
inline void FormatStructArchive::clear_use_accounting_style() {
  _impl_.use_accounting_style_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool FormatStructArchive::_internal_use_accounting_style() const {
  return _impl_.use_accounting_style_;
}
inline bool FormatStructArchive::use_accounting_style() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.use_accounting_style)
  return _internal_use_accounting_style();
}
inline void FormatStructArchive::_internal_set_use_accounting_style(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.use_accounting_style_ = value;
}
inline void FormatStructArchive::set_use_accounting_style(bool value) {
  _internal_set_use_accounting_style(value);
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.use_accounting_style)
}

// optional uint32 duration_style = 7;
inline bool FormatStructArchive::_internal_has_duration_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FormatStructArchive::has_duration_style() const {
  return _internal_has_duration_style();
}
inline void FormatStructArchive::clear_duration_style() {
  _impl_.duration_style_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t FormatStructArchive::_internal_duration_style() const {
  return _impl_.duration_style_;
}
inline uint32_t FormatStructArchive::duration_style() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.duration_style)
  return _internal_duration_style();
}
inline void FormatStructArchive::_internal_set_duration_style(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.duration_style_ = value;
}
inline void FormatStructArchive::set_duration_style(uint32_t value) {
  _internal_set_duration_style(value);
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.duration_style)
}

// optional uint32 base = 8;
inline bool FormatStructArchive::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FormatStructArchive::has_base() const {
  return _internal_has_base();
}
inline void FormatStructArchive::clear_base() {
  _impl_.base_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t FormatStructArchive::_internal_base() const {
  return _impl_.base_;
}
inline uint32_t FormatStructArchive::base() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.base)
  return _internal_base();
}
inline void FormatStructArchive::_internal_set_base(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.base_ = value;
}
inline void FormatStructArchive::set_base(uint32_t value) {
  _internal_set_base(value);
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.base)
}

// optional uint32 base_places = 9;
inline bool FormatStructArchive::_internal_has_base_places() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool FormatStructArchive::has_base_places() const {
  return _internal_has_base_places();
}
inline void FormatStructArchive::clear_base_places() {
  _impl_.base_places_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t FormatStructArchive::_internal_base_places() const {
  return _impl_.base_places_;
}
inline uint32_t FormatStructArchive::base_places() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.base_places)
  return _internal_base_places();
}
inline void FormatStructArchive::_internal_set_base_places(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.base_places_ = value;
}
inline void FormatStructArchive::set_base_places(uint32_t value) {
  _internal_set_base_places(value);
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.base_places)
}

// optional bool base_use_minus_sign = 10;
inline bool FormatStructArchive::_internal_has_base_use_minus_sign() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FormatStructArchive::has_base_use_minus_sign() const {
  return _internal_has_base_use_minus_sign();
}
inline void FormatStructArchive::clear_base_use_minus_sign() {
  _impl_.base_use_minus_sign_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool FormatStructArchive::_internal_base_use_minus_sign() const {
  return _impl_.base_use_minus_sign_;
}
inline bool FormatStructArchive::base_use_minus_sign() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.base_use_minus_sign)
  return _internal_base_use_minus_sign();
}
inline void FormatStructArchive::_internal_set_base_use_minus_sign(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.base_use_minus_sign_ = value;
}
inline void FormatStructArchive::set_base_use_minus_sign(bool value) {
  _internal_set_base_use_minus_sign(value);
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.base_use_minus_sign)
}

// optional uint32 fraction_accuracy = 11;
inline bool FormatStructArchive::_internal_has_fraction_accuracy() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool FormatStructArchive::has_fraction_accuracy() const {
  return _internal_has_fraction_accuracy();
}
inline void FormatStructArchive::clear_fraction_accuracy() {
  _impl_.fraction_accuracy_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t FormatStructArchive::_internal_fraction_accuracy() const {
  return _impl_.fraction_accuracy_;
}
inline uint32_t FormatStructArchive::fraction_accuracy() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.fraction_accuracy)
  return _internal_fraction_accuracy();
}
inline void FormatStructArchive::_internal_set_fraction_accuracy(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.fraction_accuracy_ = value;
}
inline void FormatStructArchive::set_fraction_accuracy(uint32_t value) {
  _internal_set_fraction_accuracy(value);
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.fraction_accuracy)
}

// optional bool suppress_date_format = 12;
inline bool FormatStructArchive::_internal_has_suppress_date_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FormatStructArchive::has_suppress_date_format() const {
  return _internal_has_suppress_date_format();
}
inline void FormatStructArchive::clear_suppress_date_format() {
  _impl_.suppress_date_format_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool FormatStructArchive::_internal_suppress_date_format() const {
  return _impl_.suppress_date_format_;
}
inline bool FormatStructArchive::suppress_date_format() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.suppress_date_format)
  return _internal_suppress_date_format();
}
inline void FormatStructArchive::_internal_set_suppress_date_format(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.suppress_date_format_ = value;
}
inline void FormatStructArchive::set_suppress_date_format(bool value) {
  _internal_set_suppress_date_format(value);
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.suppress_date_format)
}

// optional bool suppress_time_format = 13;
inline bool FormatStructArchive::_internal_has_suppress_time_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool FormatStructArchive::has_suppress_time_format() const {
  return _internal_has_suppress_time_format();
}
inline void FormatStructArchive::clear_suppress_time_format() {
  _impl_.suppress_time_format_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool FormatStructArchive::_internal_suppress_time_format() const {
  return _impl_.suppress_time_format_;
}
inline bool FormatStructArchive::suppress_time_format() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.suppress_time_format)
  return _internal_suppress_time_format();
}
inline void FormatStructArchive::_internal_set_suppress_time_format(bool value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.suppress_time_format_ = value;
}
inline void FormatStructArchive::set_suppress_time_format(bool value) {
  _internal_set_suppress_time_format(value);
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.suppress_time_format)
}

// optional string date_time_format = 14;
inline bool FormatStructArchive::_internal_has_date_time_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FormatStructArchive::has_date_time_format() const {
  return _internal_has_date_time_format();
}
inline void FormatStructArchive::clear_date_time_format() {
  _impl_.date_time_format_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FormatStructArchive::date_time_format() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.date_time_format)
  return _internal_date_time_format();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FormatStructArchive::set_date_time_format(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.date_time_format_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.date_time_format)
}
inline std::string* FormatStructArchive::mutable_date_time_format() {
  std::string* _s = _internal_mutable_date_time_format();
  // @@protoc_insertion_point(field_mutable:TSCE.FormatStructArchive.date_time_format)
  return _s;
}
inline const std::string& FormatStructArchive::_internal_date_time_format() const {
  return _impl_.date_time_format_.Get();
}
inline void FormatStructArchive::_internal_set_date_time_format(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.date_time_format_.Set(value, GetArenaForAllocation());
}
inline std::string* FormatStructArchive::_internal_mutable_date_time_format() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.date_time_format_.Mutable(GetArenaForAllocation());
}
inline std::string* FormatStructArchive::release_date_time_format() {
  // @@protoc_insertion_point(field_release:TSCE.FormatStructArchive.date_time_format)
  if (!_internal_has_date_time_format()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.date_time_format_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.date_time_format_.IsDefault()) {
    _impl_.date_time_format_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FormatStructArchive::set_allocated_date_time_format(std::string* date_time_format) {
  if (date_time_format != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.date_time_format_.SetAllocated(date_time_format, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.date_time_format_.IsDefault()) {
    _impl_.date_time_format_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormatStructArchive.date_time_format)
}

// optional uint32 duration_unit_largest = 15;
inline bool FormatStructArchive::_internal_has_duration_unit_largest() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool FormatStructArchive::has_duration_unit_largest() const {
  return _internal_has_duration_unit_largest();
}
inline void FormatStructArchive::clear_duration_unit_largest() {
  _impl_.duration_unit_largest_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint32_t FormatStructArchive::_internal_duration_unit_largest() const {
  return _impl_.duration_unit_largest_;
}
inline uint32_t FormatStructArchive::duration_unit_largest() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.duration_unit_largest)
  return _internal_duration_unit_largest();
}
inline void FormatStructArchive::_internal_set_duration_unit_largest(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.duration_unit_largest_ = value;
}
inline void FormatStructArchive::set_duration_unit_largest(uint32_t value) {
  _internal_set_duration_unit_largest(value);
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.duration_unit_largest)
}

// optional uint32 duration_unit_smallest = 16;
inline bool FormatStructArchive::_internal_has_duration_unit_smallest() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool FormatStructArchive::has_duration_unit_smallest() const {
  return _internal_has_duration_unit_smallest();
}
inline void FormatStructArchive::clear_duration_unit_smallest() {
  _impl_.duration_unit_smallest_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t FormatStructArchive::_internal_duration_unit_smallest() const {
  return _impl_.duration_unit_smallest_;
}
inline uint32_t FormatStructArchive::duration_unit_smallest() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.duration_unit_smallest)
  return _internal_duration_unit_smallest();
}
inline void FormatStructArchive::_internal_set_duration_unit_smallest(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.duration_unit_smallest_ = value;
}
inline void FormatStructArchive::set_duration_unit_smallest(uint32_t value) {
  _internal_set_duration_unit_smallest(value);
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.duration_unit_smallest)
}

// -------------------------------------------------------------------

// RangeCoordinateArchive

// required uint32 top_left_column = 1;
inline bool RangeCoordinateArchive::_internal_has_top_left_column() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RangeCoordinateArchive::has_top_left_column() const {
  return _internal_has_top_left_column();
}
inline void RangeCoordinateArchive::clear_top_left_column() {
  _impl_.top_left_column_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t RangeCoordinateArchive::_internal_top_left_column() const {
  return _impl_.top_left_column_;
}
inline uint32_t RangeCoordinateArchive::top_left_column() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeCoordinateArchive.top_left_column)
  return _internal_top_left_column();
}
inline void RangeCoordinateArchive::_internal_set_top_left_column(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.top_left_column_ = value;
}
inline void RangeCoordinateArchive::set_top_left_column(uint32_t value) {
  _internal_set_top_left_column(value);
  // @@protoc_insertion_point(field_set:TSCE.RangeCoordinateArchive.top_left_column)
}

// required uint32 top_left_row = 2;
inline bool RangeCoordinateArchive::_internal_has_top_left_row() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RangeCoordinateArchive::has_top_left_row() const {
  return _internal_has_top_left_row();
}
inline void RangeCoordinateArchive::clear_top_left_row() {
  _impl_.top_left_row_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t RangeCoordinateArchive::_internal_top_left_row() const {
  return _impl_.top_left_row_;
}
inline uint32_t RangeCoordinateArchive::top_left_row() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeCoordinateArchive.top_left_row)
  return _internal_top_left_row();
}
inline void RangeCoordinateArchive::_internal_set_top_left_row(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.top_left_row_ = value;
}
inline void RangeCoordinateArchive::set_top_left_row(uint32_t value) {
  _internal_set_top_left_row(value);
  // @@protoc_insertion_point(field_set:TSCE.RangeCoordinateArchive.top_left_row)
}

// required uint32 bottom_right_column = 3;
inline bool RangeCoordinateArchive::_internal_has_bottom_right_column() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RangeCoordinateArchive::has_bottom_right_column() const {
  return _internal_has_bottom_right_column();
}
inline void RangeCoordinateArchive::clear_bottom_right_column() {
  _impl_.bottom_right_column_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t RangeCoordinateArchive::_internal_bottom_right_column() const {
  return _impl_.bottom_right_column_;
}
inline uint32_t RangeCoordinateArchive::bottom_right_column() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeCoordinateArchive.bottom_right_column)
  return _internal_bottom_right_column();
}
inline void RangeCoordinateArchive::_internal_set_bottom_right_column(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.bottom_right_column_ = value;
}
inline void RangeCoordinateArchive::set_bottom_right_column(uint32_t value) {
  _internal_set_bottom_right_column(value);
  // @@protoc_insertion_point(field_set:TSCE.RangeCoordinateArchive.bottom_right_column)
}

// required uint32 bottom_right_row = 4;
inline bool RangeCoordinateArchive::_internal_has_bottom_right_row() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RangeCoordinateArchive::has_bottom_right_row() const {
  return _internal_has_bottom_right_row();
}
inline void RangeCoordinateArchive::clear_bottom_right_row() {
  _impl_.bottom_right_row_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t RangeCoordinateArchive::_internal_bottom_right_row() const {
  return _impl_.bottom_right_row_;
}
inline uint32_t RangeCoordinateArchive::bottom_right_row() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeCoordinateArchive.bottom_right_row)
  return _internal_bottom_right_row();
}
inline void RangeCoordinateArchive::_internal_set_bottom_right_row(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.bottom_right_row_ = value;
}
inline void RangeCoordinateArchive::set_bottom_right_row(uint32_t value) {
  _internal_set_bottom_right_row(value);
  // @@protoc_insertion_point(field_set:TSCE.RangeCoordinateArchive.bottom_right_row)
}

// -------------------------------------------------------------------

// TectonicShiftArchive

// required uint32 grid_coordinate_offset_x = 1;
inline bool TectonicShiftArchive::_internal_has_grid_coordinate_offset_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TectonicShiftArchive::has_grid_coordinate_offset_x() const {
  return _internal_has_grid_coordinate_offset_x();
}
inline void TectonicShiftArchive::clear_grid_coordinate_offset_x() {
  _impl_.grid_coordinate_offset_x_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t TectonicShiftArchive::_internal_grid_coordinate_offset_x() const {
  return _impl_.grid_coordinate_offset_x_;
}
inline uint32_t TectonicShiftArchive::grid_coordinate_offset_x() const {
  // @@protoc_insertion_point(field_get:TSCE.TectonicShiftArchive.grid_coordinate_offset_x)
  return _internal_grid_coordinate_offset_x();
}
inline void TectonicShiftArchive::_internal_set_grid_coordinate_offset_x(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.grid_coordinate_offset_x_ = value;
}
inline void TectonicShiftArchive::set_grid_coordinate_offset_x(uint32_t value) {
  _internal_set_grid_coordinate_offset_x(value);
  // @@protoc_insertion_point(field_set:TSCE.TectonicShiftArchive.grid_coordinate_offset_x)
}

// required uint32 grid_coordinate_offset_y = 2;
inline bool TectonicShiftArchive::_internal_has_grid_coordinate_offset_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TectonicShiftArchive::has_grid_coordinate_offset_y() const {
  return _internal_has_grid_coordinate_offset_y();
}
inline void TectonicShiftArchive::clear_grid_coordinate_offset_y() {
  _impl_.grid_coordinate_offset_y_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t TectonicShiftArchive::_internal_grid_coordinate_offset_y() const {
  return _impl_.grid_coordinate_offset_y_;
}
inline uint32_t TectonicShiftArchive::grid_coordinate_offset_y() const {
  // @@protoc_insertion_point(field_get:TSCE.TectonicShiftArchive.grid_coordinate_offset_y)
  return _internal_grid_coordinate_offset_y();
}
inline void TectonicShiftArchive::_internal_set_grid_coordinate_offset_y(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.grid_coordinate_offset_y_ = value;
}
inline void TectonicShiftArchive::set_grid_coordinate_offset_y(uint32_t value) {
  _internal_set_grid_coordinate_offset_y(value);
  // @@protoc_insertion_point(field_set:TSCE.TectonicShiftArchive.grid_coordinate_offset_y)
}

// required bool grid_coordinate_offset_x_is_negative = 3;
inline bool TectonicShiftArchive::_internal_has_grid_coordinate_offset_x_is_negative() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TectonicShiftArchive::has_grid_coordinate_offset_x_is_negative() const {
  return _internal_has_grid_coordinate_offset_x_is_negative();
}
inline void TectonicShiftArchive::clear_grid_coordinate_offset_x_is_negative() {
  _impl_.grid_coordinate_offset_x_is_negative_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool TectonicShiftArchive::_internal_grid_coordinate_offset_x_is_negative() const {
  return _impl_.grid_coordinate_offset_x_is_negative_;
}
inline bool TectonicShiftArchive::grid_coordinate_offset_x_is_negative() const {
  // @@protoc_insertion_point(field_get:TSCE.TectonicShiftArchive.grid_coordinate_offset_x_is_negative)
  return _internal_grid_coordinate_offset_x_is_negative();
}
inline void TectonicShiftArchive::_internal_set_grid_coordinate_offset_x_is_negative(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.grid_coordinate_offset_x_is_negative_ = value;
}
inline void TectonicShiftArchive::set_grid_coordinate_offset_x_is_negative(bool value) {
  _internal_set_grid_coordinate_offset_x_is_negative(value);
  // @@protoc_insertion_point(field_set:TSCE.TectonicShiftArchive.grid_coordinate_offset_x_is_negative)
}

// required bool grid_coordinate_offset_y_is_negative = 4;
inline bool TectonicShiftArchive::_internal_has_grid_coordinate_offset_y_is_negative() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TectonicShiftArchive::has_grid_coordinate_offset_y_is_negative() const {
  return _internal_has_grid_coordinate_offset_y_is_negative();
}
inline void TectonicShiftArchive::clear_grid_coordinate_offset_y_is_negative() {
  _impl_.grid_coordinate_offset_y_is_negative_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool TectonicShiftArchive::_internal_grid_coordinate_offset_y_is_negative() const {
  return _impl_.grid_coordinate_offset_y_is_negative_;
}
inline bool TectonicShiftArchive::grid_coordinate_offset_y_is_negative() const {
  // @@protoc_insertion_point(field_get:TSCE.TectonicShiftArchive.grid_coordinate_offset_y_is_negative)
  return _internal_grid_coordinate_offset_y_is_negative();
}
inline void TectonicShiftArchive::_internal_set_grid_coordinate_offset_y_is_negative(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.grid_coordinate_offset_y_is_negative_ = value;
}
inline void TectonicShiftArchive::set_grid_coordinate_offset_y_is_negative(bool value) {
  _internal_set_grid_coordinate_offset_y_is_negative(value);
  // @@protoc_insertion_point(field_set:TSCE.TectonicShiftArchive.grid_coordinate_offset_y_is_negative)
}

// optional .TSCE.RangeCoordinateArchive range_for_shift = 5;
inline bool TectonicShiftArchive::_internal_has_range_for_shift() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.range_for_shift_ != nullptr);
  return value;
}
inline bool TectonicShiftArchive::has_range_for_shift() const {
  return _internal_has_range_for_shift();
}
inline void TectonicShiftArchive::clear_range_for_shift() {
  if (_impl_.range_for_shift_ != nullptr) _impl_.range_for_shift_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::RangeCoordinateArchive& TectonicShiftArchive::_internal_range_for_shift() const {
  const ::TSCE::RangeCoordinateArchive* p = _impl_.range_for_shift_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeCoordinateArchive&>(
      ::TSCE::_RangeCoordinateArchive_default_instance_);
}
inline const ::TSCE::RangeCoordinateArchive& TectonicShiftArchive::range_for_shift() const {
  // @@protoc_insertion_point(field_get:TSCE.TectonicShiftArchive.range_for_shift)
  return _internal_range_for_shift();
}
inline void TectonicShiftArchive::unsafe_arena_set_allocated_range_for_shift(
    ::TSCE::RangeCoordinateArchive* range_for_shift) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.range_for_shift_);
  }
  _impl_.range_for_shift_ = range_for_shift;
  if (range_for_shift) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.TectonicShiftArchive.range_for_shift)
}
inline ::TSCE::RangeCoordinateArchive* TectonicShiftArchive::release_range_for_shift() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::RangeCoordinateArchive* temp = _impl_.range_for_shift_;
  _impl_.range_for_shift_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* TectonicShiftArchive::unsafe_arena_release_range_for_shift() {
  // @@protoc_insertion_point(field_release:TSCE.TectonicShiftArchive.range_for_shift)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::RangeCoordinateArchive* temp = _impl_.range_for_shift_;
  _impl_.range_for_shift_ = nullptr;
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* TectonicShiftArchive::_internal_mutable_range_for_shift() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.range_for_shift_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeCoordinateArchive>(GetArenaForAllocation());
    _impl_.range_for_shift_ = p;
  }
  return _impl_.range_for_shift_;
}
inline ::TSCE::RangeCoordinateArchive* TectonicShiftArchive::mutable_range_for_shift() {
  ::TSCE::RangeCoordinateArchive* _msg = _internal_mutable_range_for_shift();
  // @@protoc_insertion_point(field_mutable:TSCE.TectonicShiftArchive.range_for_shift)
  return _msg;
}
inline void TectonicShiftArchive::set_allocated_range_for_shift(::TSCE::RangeCoordinateArchive* range_for_shift) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.range_for_shift_;
  }
  if (range_for_shift) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(range_for_shift);
    if (message_arena != submessage_arena) {
      range_for_shift = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range_for_shift, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.range_for_shift_ = range_for_shift;
  // @@protoc_insertion_point(field_set_allocated:TSCE.TectonicShiftArchive.range_for_shift)
}

// optional .TSCE.RangeCoordinateArchive range_for_deletion = 6;
inline bool TectonicShiftArchive::_internal_has_range_for_deletion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.range_for_deletion_ != nullptr);
  return value;
}
inline bool TectonicShiftArchive::has_range_for_deletion() const {
  return _internal_has_range_for_deletion();
}
inline void TectonicShiftArchive::clear_range_for_deletion() {
  if (_impl_.range_for_deletion_ != nullptr) _impl_.range_for_deletion_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::RangeCoordinateArchive& TectonicShiftArchive::_internal_range_for_deletion() const {
  const ::TSCE::RangeCoordinateArchive* p = _impl_.range_for_deletion_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeCoordinateArchive&>(
      ::TSCE::_RangeCoordinateArchive_default_instance_);
}
inline const ::TSCE::RangeCoordinateArchive& TectonicShiftArchive::range_for_deletion() const {
  // @@protoc_insertion_point(field_get:TSCE.TectonicShiftArchive.range_for_deletion)
  return _internal_range_for_deletion();
}
inline void TectonicShiftArchive::unsafe_arena_set_allocated_range_for_deletion(
    ::TSCE::RangeCoordinateArchive* range_for_deletion) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.range_for_deletion_);
  }
  _impl_.range_for_deletion_ = range_for_deletion;
  if (range_for_deletion) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.TectonicShiftArchive.range_for_deletion)
}
inline ::TSCE::RangeCoordinateArchive* TectonicShiftArchive::release_range_for_deletion() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::RangeCoordinateArchive* temp = _impl_.range_for_deletion_;
  _impl_.range_for_deletion_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* TectonicShiftArchive::unsafe_arena_release_range_for_deletion() {
  // @@protoc_insertion_point(field_release:TSCE.TectonicShiftArchive.range_for_deletion)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::RangeCoordinateArchive* temp = _impl_.range_for_deletion_;
  _impl_.range_for_deletion_ = nullptr;
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* TectonicShiftArchive::_internal_mutable_range_for_deletion() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.range_for_deletion_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeCoordinateArchive>(GetArenaForAllocation());
    _impl_.range_for_deletion_ = p;
  }
  return _impl_.range_for_deletion_;
}
inline ::TSCE::RangeCoordinateArchive* TectonicShiftArchive::mutable_range_for_deletion() {
  ::TSCE::RangeCoordinateArchive* _msg = _internal_mutable_range_for_deletion();
  // @@protoc_insertion_point(field_mutable:TSCE.TectonicShiftArchive.range_for_deletion)
  return _msg;
}
inline void TectonicShiftArchive::set_allocated_range_for_deletion(::TSCE::RangeCoordinateArchive* range_for_deletion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.range_for_deletion_;
  }
  if (range_for_deletion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(range_for_deletion);
    if (message_arena != submessage_arena) {
      range_for_deletion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range_for_deletion, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.range_for_deletion_ = range_for_deletion;
  // @@protoc_insertion_point(field_set_allocated:TSCE.TectonicShiftArchive.range_for_deletion)
}

// optional .TSCE.RangeCoordinateArchive inserted_range = 7;
inline bool TectonicShiftArchive::_internal_has_inserted_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.inserted_range_ != nullptr);
  return value;
}
inline bool TectonicShiftArchive::has_inserted_range() const {
  return _internal_has_inserted_range();
}
inline void TectonicShiftArchive::clear_inserted_range() {
  if (_impl_.inserted_range_ != nullptr) _impl_.inserted_range_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCE::RangeCoordinateArchive& TectonicShiftArchive::_internal_inserted_range() const {
  const ::TSCE::RangeCoordinateArchive* p = _impl_.inserted_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeCoordinateArchive&>(
      ::TSCE::_RangeCoordinateArchive_default_instance_);
}
inline const ::TSCE::RangeCoordinateArchive& TectonicShiftArchive::inserted_range() const {
  // @@protoc_insertion_point(field_get:TSCE.TectonicShiftArchive.inserted_range)
  return _internal_inserted_range();
}
inline void TectonicShiftArchive::unsafe_arena_set_allocated_inserted_range(
    ::TSCE::RangeCoordinateArchive* inserted_range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inserted_range_);
  }
  _impl_.inserted_range_ = inserted_range;
  if (inserted_range) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.TectonicShiftArchive.inserted_range)
}
inline ::TSCE::RangeCoordinateArchive* TectonicShiftArchive::release_inserted_range() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::RangeCoordinateArchive* temp = _impl_.inserted_range_;
  _impl_.inserted_range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* TectonicShiftArchive::unsafe_arena_release_inserted_range() {
  // @@protoc_insertion_point(field_release:TSCE.TectonicShiftArchive.inserted_range)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::RangeCoordinateArchive* temp = _impl_.inserted_range_;
  _impl_.inserted_range_ = nullptr;
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* TectonicShiftArchive::_internal_mutable_inserted_range() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.inserted_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeCoordinateArchive>(GetArenaForAllocation());
    _impl_.inserted_range_ = p;
  }
  return _impl_.inserted_range_;
}
inline ::TSCE::RangeCoordinateArchive* TectonicShiftArchive::mutable_inserted_range() {
  ::TSCE::RangeCoordinateArchive* _msg = _internal_mutable_inserted_range();
  // @@protoc_insertion_point(field_mutable:TSCE.TectonicShiftArchive.inserted_range)
  return _msg;
}
inline void TectonicShiftArchive::set_allocated_inserted_range(::TSCE::RangeCoordinateArchive* inserted_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.inserted_range_;
  }
  if (inserted_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(inserted_range);
    if (message_arena != submessage_arena) {
      inserted_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inserted_range, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.inserted_range_ = inserted_range;
  // @@protoc_insertion_point(field_set_allocated:TSCE.TectonicShiftArchive.inserted_range)
}

// required bool apply_to_absolute = 8;
inline bool TectonicShiftArchive::_internal_has_apply_to_absolute() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TectonicShiftArchive::has_apply_to_absolute() const {
  return _internal_has_apply_to_absolute();
}
inline void TectonicShiftArchive::clear_apply_to_absolute() {
  _impl_.apply_to_absolute_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool TectonicShiftArchive::_internal_apply_to_absolute() const {
  return _impl_.apply_to_absolute_;
}
inline bool TectonicShiftArchive::apply_to_absolute() const {
  // @@protoc_insertion_point(field_get:TSCE.TectonicShiftArchive.apply_to_absolute)
  return _internal_apply_to_absolute();
}
inline void TectonicShiftArchive::_internal_set_apply_to_absolute(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.apply_to_absolute_ = value;
}
inline void TectonicShiftArchive::set_apply_to_absolute(bool value) {
  _internal_set_apply_to_absolute(value);
  // @@protoc_insertion_point(field_set:TSCE.TectonicShiftArchive.apply_to_absolute)
}

// required bool inserting_after = 9;
inline bool TectonicShiftArchive::_internal_has_inserting_after() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TectonicShiftArchive::has_inserting_after() const {
  return _internal_has_inserting_after();
}
inline void TectonicShiftArchive::clear_inserting_after() {
  _impl_.inserting_after_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool TectonicShiftArchive::_internal_inserting_after() const {
  return _impl_.inserting_after_;
}
inline bool TectonicShiftArchive::inserting_after() const {
  // @@protoc_insertion_point(field_get:TSCE.TectonicShiftArchive.inserting_after)
  return _internal_inserting_after();
}
inline void TectonicShiftArchive::_internal_set_inserting_after(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.inserting_after_ = value;
}
inline void TectonicShiftArchive::set_inserting_after(bool value) {
  _internal_set_inserting_after(value);
  // @@protoc_insertion_point(field_set:TSCE.TectonicShiftArchive.inserting_after)
}

// required bool ignore_sticky_bits = 10;
inline bool TectonicShiftArchive::_internal_has_ignore_sticky_bits() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TectonicShiftArchive::has_ignore_sticky_bits() const {
  return _internal_has_ignore_sticky_bits();
}
inline void TectonicShiftArchive::clear_ignore_sticky_bits() {
  _impl_.ignore_sticky_bits_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool TectonicShiftArchive::_internal_ignore_sticky_bits() const {
  return _impl_.ignore_sticky_bits_;
}
inline bool TectonicShiftArchive::ignore_sticky_bits() const {
  // @@protoc_insertion_point(field_get:TSCE.TectonicShiftArchive.ignore_sticky_bits)
  return _internal_ignore_sticky_bits();
}
inline void TectonicShiftArchive::_internal_set_ignore_sticky_bits(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.ignore_sticky_bits_ = value;
}
inline void TectonicShiftArchive::set_ignore_sticky_bits(bool value) {
  _internal_set_ignore_sticky_bits(value);
  // @@protoc_insertion_point(field_set:TSCE.TectonicShiftArchive.ignore_sticky_bits)
}

// optional .TSCE.RangeCoordinateArchive table_range = 11;
inline bool TectonicShiftArchive::_internal_has_table_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.table_range_ != nullptr);
  return value;
}
inline bool TectonicShiftArchive::has_table_range() const {
  return _internal_has_table_range();
}
inline void TectonicShiftArchive::clear_table_range() {
  if (_impl_.table_range_ != nullptr) _impl_.table_range_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::TSCE::RangeCoordinateArchive& TectonicShiftArchive::_internal_table_range() const {
  const ::TSCE::RangeCoordinateArchive* p = _impl_.table_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeCoordinateArchive&>(
      ::TSCE::_RangeCoordinateArchive_default_instance_);
}
inline const ::TSCE::RangeCoordinateArchive& TectonicShiftArchive::table_range() const {
  // @@protoc_insertion_point(field_get:TSCE.TectonicShiftArchive.table_range)
  return _internal_table_range();
}
inline void TectonicShiftArchive::unsafe_arena_set_allocated_table_range(
    ::TSCE::RangeCoordinateArchive* table_range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_range_);
  }
  _impl_.table_range_ = table_range;
  if (table_range) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.TectonicShiftArchive.table_range)
}
inline ::TSCE::RangeCoordinateArchive* TectonicShiftArchive::release_table_range() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::RangeCoordinateArchive* temp = _impl_.table_range_;
  _impl_.table_range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* TectonicShiftArchive::unsafe_arena_release_table_range() {
  // @@protoc_insertion_point(field_release:TSCE.TectonicShiftArchive.table_range)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::RangeCoordinateArchive* temp = _impl_.table_range_;
  _impl_.table_range_ = nullptr;
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* TectonicShiftArchive::_internal_mutable_table_range() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.table_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeCoordinateArchive>(GetArenaForAllocation());
    _impl_.table_range_ = p;
  }
  return _impl_.table_range_;
}
inline ::TSCE::RangeCoordinateArchive* TectonicShiftArchive::mutable_table_range() {
  ::TSCE::RangeCoordinateArchive* _msg = _internal_mutable_table_range();
  // @@protoc_insertion_point(field_mutable:TSCE.TectonicShiftArchive.table_range)
  return _msg;
}
inline void TectonicShiftArchive::set_allocated_table_range(::TSCE::RangeCoordinateArchive* table_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.table_range_;
  }
  if (table_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(table_range);
    if (message_arena != submessage_arena) {
      table_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_range, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.table_range_ = table_range;
  // @@protoc_insertion_point(field_set_allocated:TSCE.TectonicShiftArchive.table_range)
}

// optional .TSCE.CFUUIDArchive table_id = 12;
inline bool TectonicShiftArchive::_internal_has_table_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.table_id_ != nullptr);
  return value;
}
inline bool TectonicShiftArchive::has_table_id() const {
  return _internal_has_table_id();
}
inline void TectonicShiftArchive::clear_table_id() {
  if (_impl_.table_id_ != nullptr) _impl_.table_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::TSCE::CFUUIDArchive& TectonicShiftArchive::_internal_table_id() const {
  const ::TSCE::CFUUIDArchive* p = _impl_.table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CFUUIDArchive&>(
      ::TSCE::_CFUUIDArchive_default_instance_);
}
inline const ::TSCE::CFUUIDArchive& TectonicShiftArchive::table_id() const {
  // @@protoc_insertion_point(field_get:TSCE.TectonicShiftArchive.table_id)
  return _internal_table_id();
}
inline void TectonicShiftArchive::unsafe_arena_set_allocated_table_id(
    ::TSCE::CFUUIDArchive* table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_id_);
  }
  _impl_.table_id_ = table_id;
  if (table_id) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.TectonicShiftArchive.table_id)
}
inline ::TSCE::CFUUIDArchive* TectonicShiftArchive::release_table_id() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCE::CFUUIDArchive* temp = _impl_.table_id_;
  _impl_.table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CFUUIDArchive* TectonicShiftArchive::unsafe_arena_release_table_id() {
  // @@protoc_insertion_point(field_release:TSCE.TectonicShiftArchive.table_id)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCE::CFUUIDArchive* temp = _impl_.table_id_;
  _impl_.table_id_ = nullptr;
  return temp;
}
inline ::TSCE::CFUUIDArchive* TectonicShiftArchive::_internal_mutable_table_id() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CFUUIDArchive>(GetArenaForAllocation());
    _impl_.table_id_ = p;
  }
  return _impl_.table_id_;
}
inline ::TSCE::CFUUIDArchive* TectonicShiftArchive::mutable_table_id() {
  ::TSCE::CFUUIDArchive* _msg = _internal_mutable_table_id();
  // @@protoc_insertion_point(field_mutable:TSCE.TectonicShiftArchive.table_id)
  return _msg;
}
inline void TectonicShiftArchive::set_allocated_table_id(::TSCE::CFUUIDArchive* table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.table_id_;
  }
  if (table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(table_id);
    if (message_arena != submessage_arena) {
      table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.table_id_ = table_id;
  // @@protoc_insertion_point(field_set_allocated:TSCE.TectonicShiftArchive.table_id)
}

// -------------------------------------------------------------------

// RewriteSortMappingArchive

// required .TSCE.CFUUIDArchive table_id = 1;
inline bool RewriteSortMappingArchive::_internal_has_table_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.table_id_ != nullptr);
  return value;
}
inline bool RewriteSortMappingArchive::has_table_id() const {
  return _internal_has_table_id();
}
inline void RewriteSortMappingArchive::clear_table_id() {
  if (_impl_.table_id_ != nullptr) _impl_.table_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::CFUUIDArchive& RewriteSortMappingArchive::_internal_table_id() const {
  const ::TSCE::CFUUIDArchive* p = _impl_.table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CFUUIDArchive&>(
      ::TSCE::_CFUUIDArchive_default_instance_);
}
inline const ::TSCE::CFUUIDArchive& RewriteSortMappingArchive::table_id() const {
  // @@protoc_insertion_point(field_get:TSCE.RewriteSortMappingArchive.table_id)
  return _internal_table_id();
}
inline void RewriteSortMappingArchive::unsafe_arena_set_allocated_table_id(
    ::TSCE::CFUUIDArchive* table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_id_);
  }
  _impl_.table_id_ = table_id;
  if (table_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RewriteSortMappingArchive.table_id)
}
inline ::TSCE::CFUUIDArchive* RewriteSortMappingArchive::release_table_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::CFUUIDArchive* temp = _impl_.table_id_;
  _impl_.table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CFUUIDArchive* RewriteSortMappingArchive::unsafe_arena_release_table_id() {
  // @@protoc_insertion_point(field_release:TSCE.RewriteSortMappingArchive.table_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::CFUUIDArchive* temp = _impl_.table_id_;
  _impl_.table_id_ = nullptr;
  return temp;
}
inline ::TSCE::CFUUIDArchive* RewriteSortMappingArchive::_internal_mutable_table_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CFUUIDArchive>(GetArenaForAllocation());
    _impl_.table_id_ = p;
  }
  return _impl_.table_id_;
}
inline ::TSCE::CFUUIDArchive* RewriteSortMappingArchive::mutable_table_id() {
  ::TSCE::CFUUIDArchive* _msg = _internal_mutable_table_id();
  // @@protoc_insertion_point(field_mutable:TSCE.RewriteSortMappingArchive.table_id)
  return _msg;
}
inline void RewriteSortMappingArchive::set_allocated_table_id(::TSCE::CFUUIDArchive* table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.table_id_;
  }
  if (table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(table_id);
    if (message_arena != submessage_arena) {
      table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.table_id_ = table_id;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RewriteSortMappingArchive.table_id)
}

// required .TSK.ShuffleMappingArchive shuffle_mapping = 2;
inline bool RewriteSortMappingArchive::_internal_has_shuffle_mapping() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shuffle_mapping_ != nullptr);
  return value;
}
inline bool RewriteSortMappingArchive::has_shuffle_mapping() const {
  return _internal_has_shuffle_mapping();
}
inline const ::TSK::ShuffleMappingArchive& RewriteSortMappingArchive::_internal_shuffle_mapping() const {
  const ::TSK::ShuffleMappingArchive* p = _impl_.shuffle_mapping_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::ShuffleMappingArchive&>(
      ::TSK::_ShuffleMappingArchive_default_instance_);
}
inline const ::TSK::ShuffleMappingArchive& RewriteSortMappingArchive::shuffle_mapping() const {
  // @@protoc_insertion_point(field_get:TSCE.RewriteSortMappingArchive.shuffle_mapping)
  return _internal_shuffle_mapping();
}
inline void RewriteSortMappingArchive::unsafe_arena_set_allocated_shuffle_mapping(
    ::TSK::ShuffleMappingArchive* shuffle_mapping) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shuffle_mapping_);
  }
  _impl_.shuffle_mapping_ = shuffle_mapping;
  if (shuffle_mapping) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RewriteSortMappingArchive.shuffle_mapping)
}
inline ::TSK::ShuffleMappingArchive* RewriteSortMappingArchive::release_shuffle_mapping() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::ShuffleMappingArchive* temp = _impl_.shuffle_mapping_;
  _impl_.shuffle_mapping_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::ShuffleMappingArchive* RewriteSortMappingArchive::unsafe_arena_release_shuffle_mapping() {
  // @@protoc_insertion_point(field_release:TSCE.RewriteSortMappingArchive.shuffle_mapping)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::ShuffleMappingArchive* temp = _impl_.shuffle_mapping_;
  _impl_.shuffle_mapping_ = nullptr;
  return temp;
}
inline ::TSK::ShuffleMappingArchive* RewriteSortMappingArchive::_internal_mutable_shuffle_mapping() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.shuffle_mapping_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::ShuffleMappingArchive>(GetArenaForAllocation());
    _impl_.shuffle_mapping_ = p;
  }
  return _impl_.shuffle_mapping_;
}
inline ::TSK::ShuffleMappingArchive* RewriteSortMappingArchive::mutable_shuffle_mapping() {
  ::TSK::ShuffleMappingArchive* _msg = _internal_mutable_shuffle_mapping();
  // @@protoc_insertion_point(field_mutable:TSCE.RewriteSortMappingArchive.shuffle_mapping)
  return _msg;
}
inline void RewriteSortMappingArchive::set_allocated_shuffle_mapping(::TSK::ShuffleMappingArchive* shuffle_mapping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shuffle_mapping_);
  }
  if (shuffle_mapping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shuffle_mapping));
    if (message_arena != submessage_arena) {
      shuffle_mapping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shuffle_mapping, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.shuffle_mapping_ = shuffle_mapping;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RewriteSortMappingArchive.shuffle_mapping)
}

// required bool explode_ranges = 3;
inline bool RewriteSortMappingArchive::_internal_has_explode_ranges() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RewriteSortMappingArchive::has_explode_ranges() const {
  return _internal_has_explode_ranges();
}
inline void RewriteSortMappingArchive::clear_explode_ranges() {
  _impl_.explode_ranges_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool RewriteSortMappingArchive::_internal_explode_ranges() const {
  return _impl_.explode_ranges_;
}
inline bool RewriteSortMappingArchive::explode_ranges() const {
  // @@protoc_insertion_point(field_get:TSCE.RewriteSortMappingArchive.explode_ranges)
  return _internal_explode_ranges();
}
inline void RewriteSortMappingArchive::_internal_set_explode_ranges(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.explode_ranges_ = value;
}
inline void RewriteSortMappingArchive::set_explode_ranges(bool value) {
  _internal_set_explode_ranges(value);
  // @@protoc_insertion_point(field_set:TSCE.RewriteSortMappingArchive.explode_ranges)
}

// -------------------------------------------------------------------

// RangeMovedInfoArchive

// optional .TSCE.CFUUIDArchive table_id = 1;
inline bool RangeMovedInfoArchive::_internal_has_table_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.table_id_ != nullptr);
  return value;
}
inline bool RangeMovedInfoArchive::has_table_id() const {
  return _internal_has_table_id();
}
inline void RangeMovedInfoArchive::clear_table_id() {
  if (_impl_.table_id_ != nullptr) _impl_.table_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::CFUUIDArchive& RangeMovedInfoArchive::_internal_table_id() const {
  const ::TSCE::CFUUIDArchive* p = _impl_.table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CFUUIDArchive&>(
      ::TSCE::_CFUUIDArchive_default_instance_);
}
inline const ::TSCE::CFUUIDArchive& RangeMovedInfoArchive::table_id() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeMovedInfoArchive.table_id)
  return _internal_table_id();
}
inline void RangeMovedInfoArchive::unsafe_arena_set_allocated_table_id(
    ::TSCE::CFUUIDArchive* table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_id_);
  }
  _impl_.table_id_ = table_id;
  if (table_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RangeMovedInfoArchive.table_id)
}
inline ::TSCE::CFUUIDArchive* RangeMovedInfoArchive::release_table_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::CFUUIDArchive* temp = _impl_.table_id_;
  _impl_.table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CFUUIDArchive* RangeMovedInfoArchive::unsafe_arena_release_table_id() {
  // @@protoc_insertion_point(field_release:TSCE.RangeMovedInfoArchive.table_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::CFUUIDArchive* temp = _impl_.table_id_;
  _impl_.table_id_ = nullptr;
  return temp;
}
inline ::TSCE::CFUUIDArchive* RangeMovedInfoArchive::_internal_mutable_table_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CFUUIDArchive>(GetArenaForAllocation());
    _impl_.table_id_ = p;
  }
  return _impl_.table_id_;
}
inline ::TSCE::CFUUIDArchive* RangeMovedInfoArchive::mutable_table_id() {
  ::TSCE::CFUUIDArchive* _msg = _internal_mutable_table_id();
  // @@protoc_insertion_point(field_mutable:TSCE.RangeMovedInfoArchive.table_id)
  return _msg;
}
inline void RangeMovedInfoArchive::set_allocated_table_id(::TSCE::CFUUIDArchive* table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.table_id_;
  }
  if (table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(table_id);
    if (message_arena != submessage_arena) {
      table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.table_id_ = table_id;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RangeMovedInfoArchive.table_id)
}

// optional .TSCE.RangeCoordinateArchive from_range = 2;
inline bool RangeMovedInfoArchive::_internal_has_from_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.from_range_ != nullptr);
  return value;
}
inline bool RangeMovedInfoArchive::has_from_range() const {
  return _internal_has_from_range();
}
inline void RangeMovedInfoArchive::clear_from_range() {
  if (_impl_.from_range_ != nullptr) _impl_.from_range_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::RangeCoordinateArchive& RangeMovedInfoArchive::_internal_from_range() const {
  const ::TSCE::RangeCoordinateArchive* p = _impl_.from_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeCoordinateArchive&>(
      ::TSCE::_RangeCoordinateArchive_default_instance_);
}
inline const ::TSCE::RangeCoordinateArchive& RangeMovedInfoArchive::from_range() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeMovedInfoArchive.from_range)
  return _internal_from_range();
}
inline void RangeMovedInfoArchive::unsafe_arena_set_allocated_from_range(
    ::TSCE::RangeCoordinateArchive* from_range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_range_);
  }
  _impl_.from_range_ = from_range;
  if (from_range) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RangeMovedInfoArchive.from_range)
}
inline ::TSCE::RangeCoordinateArchive* RangeMovedInfoArchive::release_from_range() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::RangeCoordinateArchive* temp = _impl_.from_range_;
  _impl_.from_range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* RangeMovedInfoArchive::unsafe_arena_release_from_range() {
  // @@protoc_insertion_point(field_release:TSCE.RangeMovedInfoArchive.from_range)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::RangeCoordinateArchive* temp = _impl_.from_range_;
  _impl_.from_range_ = nullptr;
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* RangeMovedInfoArchive::_internal_mutable_from_range() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.from_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeCoordinateArchive>(GetArenaForAllocation());
    _impl_.from_range_ = p;
  }
  return _impl_.from_range_;
}
inline ::TSCE::RangeCoordinateArchive* RangeMovedInfoArchive::mutable_from_range() {
  ::TSCE::RangeCoordinateArchive* _msg = _internal_mutable_from_range();
  // @@protoc_insertion_point(field_mutable:TSCE.RangeMovedInfoArchive.from_range)
  return _msg;
}
inline void RangeMovedInfoArchive::set_allocated_from_range(::TSCE::RangeCoordinateArchive* from_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.from_range_;
  }
  if (from_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(from_range);
    if (message_arena != submessage_arena) {
      from_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from_range, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.from_range_ = from_range;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RangeMovedInfoArchive.from_range)
}

// optional .TSCE.RangeCoordinateArchive to_range = 3;
inline bool RangeMovedInfoArchive::_internal_has_to_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.to_range_ != nullptr);
  return value;
}
inline bool RangeMovedInfoArchive::has_to_range() const {
  return _internal_has_to_range();
}
inline void RangeMovedInfoArchive::clear_to_range() {
  if (_impl_.to_range_ != nullptr) _impl_.to_range_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCE::RangeCoordinateArchive& RangeMovedInfoArchive::_internal_to_range() const {
  const ::TSCE::RangeCoordinateArchive* p = _impl_.to_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeCoordinateArchive&>(
      ::TSCE::_RangeCoordinateArchive_default_instance_);
}
inline const ::TSCE::RangeCoordinateArchive& RangeMovedInfoArchive::to_range() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeMovedInfoArchive.to_range)
  return _internal_to_range();
}
inline void RangeMovedInfoArchive::unsafe_arena_set_allocated_to_range(
    ::TSCE::RangeCoordinateArchive* to_range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_range_);
  }
  _impl_.to_range_ = to_range;
  if (to_range) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RangeMovedInfoArchive.to_range)
}
inline ::TSCE::RangeCoordinateArchive* RangeMovedInfoArchive::release_to_range() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::RangeCoordinateArchive* temp = _impl_.to_range_;
  _impl_.to_range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* RangeMovedInfoArchive::unsafe_arena_release_to_range() {
  // @@protoc_insertion_point(field_release:TSCE.RangeMovedInfoArchive.to_range)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::RangeCoordinateArchive* temp = _impl_.to_range_;
  _impl_.to_range_ = nullptr;
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* RangeMovedInfoArchive::_internal_mutable_to_range() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.to_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeCoordinateArchive>(GetArenaForAllocation());
    _impl_.to_range_ = p;
  }
  return _impl_.to_range_;
}
inline ::TSCE::RangeCoordinateArchive* RangeMovedInfoArchive::mutable_to_range() {
  ::TSCE::RangeCoordinateArchive* _msg = _internal_mutable_to_range();
  // @@protoc_insertion_point(field_mutable:TSCE.RangeMovedInfoArchive.to_range)
  return _msg;
}
inline void RangeMovedInfoArchive::set_allocated_to_range(::TSCE::RangeCoordinateArchive* to_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.to_range_;
  }
  if (to_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(to_range);
    if (message_arena != submessage_arena) {
      to_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to_range, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.to_range_ = to_range;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RangeMovedInfoArchive.to_range)
}

// optional .TSCE.RangeReferenceArchive from_range_reference = 4;
inline bool RangeMovedInfoArchive::_internal_has_from_range_reference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.from_range_reference_ != nullptr);
  return value;
}
inline bool RangeMovedInfoArchive::has_from_range_reference() const {
  return _internal_has_from_range_reference();
}
inline void RangeMovedInfoArchive::clear_from_range_reference() {
  if (_impl_.from_range_reference_ != nullptr) _impl_.from_range_reference_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::TSCE::RangeReferenceArchive& RangeMovedInfoArchive::_internal_from_range_reference() const {
  const ::TSCE::RangeReferenceArchive* p = _impl_.from_range_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeReferenceArchive&>(
      ::TSCE::_RangeReferenceArchive_default_instance_);
}
inline const ::TSCE::RangeReferenceArchive& RangeMovedInfoArchive::from_range_reference() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeMovedInfoArchive.from_range_reference)
  return _internal_from_range_reference();
}
inline void RangeMovedInfoArchive::unsafe_arena_set_allocated_from_range_reference(
    ::TSCE::RangeReferenceArchive* from_range_reference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_range_reference_);
  }
  _impl_.from_range_reference_ = from_range_reference;
  if (from_range_reference) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RangeMovedInfoArchive.from_range_reference)
}
inline ::TSCE::RangeReferenceArchive* RangeMovedInfoArchive::release_from_range_reference() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::RangeReferenceArchive* temp = _impl_.from_range_reference_;
  _impl_.from_range_reference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RangeReferenceArchive* RangeMovedInfoArchive::unsafe_arena_release_from_range_reference() {
  // @@protoc_insertion_point(field_release:TSCE.RangeMovedInfoArchive.from_range_reference)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::RangeReferenceArchive* temp = _impl_.from_range_reference_;
  _impl_.from_range_reference_ = nullptr;
  return temp;
}
inline ::TSCE::RangeReferenceArchive* RangeMovedInfoArchive::_internal_mutable_from_range_reference() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.from_range_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeReferenceArchive>(GetArenaForAllocation());
    _impl_.from_range_reference_ = p;
  }
  return _impl_.from_range_reference_;
}
inline ::TSCE::RangeReferenceArchive* RangeMovedInfoArchive::mutable_from_range_reference() {
  ::TSCE::RangeReferenceArchive* _msg = _internal_mutable_from_range_reference();
  // @@protoc_insertion_point(field_mutable:TSCE.RangeMovedInfoArchive.from_range_reference)
  return _msg;
}
inline void RangeMovedInfoArchive::set_allocated_from_range_reference(::TSCE::RangeReferenceArchive* from_range_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.from_range_reference_;
  }
  if (from_range_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(from_range_reference);
    if (message_arena != submessage_arena) {
      from_range_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from_range_reference, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.from_range_reference_ = from_range_reference;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RangeMovedInfoArchive.from_range_reference)
}

// optional .TSCE.RangeReferenceArchive to_range_reference = 5;
inline bool RangeMovedInfoArchive::_internal_has_to_range_reference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.to_range_reference_ != nullptr);
  return value;
}
inline bool RangeMovedInfoArchive::has_to_range_reference() const {
  return _internal_has_to_range_reference();
}
inline void RangeMovedInfoArchive::clear_to_range_reference() {
  if (_impl_.to_range_reference_ != nullptr) _impl_.to_range_reference_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::TSCE::RangeReferenceArchive& RangeMovedInfoArchive::_internal_to_range_reference() const {
  const ::TSCE::RangeReferenceArchive* p = _impl_.to_range_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeReferenceArchive&>(
      ::TSCE::_RangeReferenceArchive_default_instance_);
}
inline const ::TSCE::RangeReferenceArchive& RangeMovedInfoArchive::to_range_reference() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeMovedInfoArchive.to_range_reference)
  return _internal_to_range_reference();
}
inline void RangeMovedInfoArchive::unsafe_arena_set_allocated_to_range_reference(
    ::TSCE::RangeReferenceArchive* to_range_reference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_range_reference_);
  }
  _impl_.to_range_reference_ = to_range_reference;
  if (to_range_reference) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RangeMovedInfoArchive.to_range_reference)
}
inline ::TSCE::RangeReferenceArchive* RangeMovedInfoArchive::release_to_range_reference() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCE::RangeReferenceArchive* temp = _impl_.to_range_reference_;
  _impl_.to_range_reference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RangeReferenceArchive* RangeMovedInfoArchive::unsafe_arena_release_to_range_reference() {
  // @@protoc_insertion_point(field_release:TSCE.RangeMovedInfoArchive.to_range_reference)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCE::RangeReferenceArchive* temp = _impl_.to_range_reference_;
  _impl_.to_range_reference_ = nullptr;
  return temp;
}
inline ::TSCE::RangeReferenceArchive* RangeMovedInfoArchive::_internal_mutable_to_range_reference() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.to_range_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeReferenceArchive>(GetArenaForAllocation());
    _impl_.to_range_reference_ = p;
  }
  return _impl_.to_range_reference_;
}
inline ::TSCE::RangeReferenceArchive* RangeMovedInfoArchive::mutable_to_range_reference() {
  ::TSCE::RangeReferenceArchive* _msg = _internal_mutable_to_range_reference();
  // @@protoc_insertion_point(field_mutable:TSCE.RangeMovedInfoArchive.to_range_reference)
  return _msg;
}
inline void RangeMovedInfoArchive::set_allocated_to_range_reference(::TSCE::RangeReferenceArchive* to_range_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.to_range_reference_;
  }
  if (to_range_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(to_range_reference);
    if (message_arena != submessage_arena) {
      to_range_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to_range_reference, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.to_range_reference_ = to_range_reference;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RangeMovedInfoArchive.to_range_reference)
}

// -------------------------------------------------------------------

// TableResizedInfoArchive

// required .TSCE.CFUUIDArchive table_id = 1;
inline bool TableResizedInfoArchive::_internal_has_table_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.table_id_ != nullptr);
  return value;
}
inline bool TableResizedInfoArchive::has_table_id() const {
  return _internal_has_table_id();
}
inline void TableResizedInfoArchive::clear_table_id() {
  if (_impl_.table_id_ != nullptr) _impl_.table_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::CFUUIDArchive& TableResizedInfoArchive::_internal_table_id() const {
  const ::TSCE::CFUUIDArchive* p = _impl_.table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CFUUIDArchive&>(
      ::TSCE::_CFUUIDArchive_default_instance_);
}
inline const ::TSCE::CFUUIDArchive& TableResizedInfoArchive::table_id() const {
  // @@protoc_insertion_point(field_get:TSCE.TableResizedInfoArchive.table_id)
  return _internal_table_id();
}
inline void TableResizedInfoArchive::unsafe_arena_set_allocated_table_id(
    ::TSCE::CFUUIDArchive* table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_id_);
  }
  _impl_.table_id_ = table_id;
  if (table_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.TableResizedInfoArchive.table_id)
}
inline ::TSCE::CFUUIDArchive* TableResizedInfoArchive::release_table_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::CFUUIDArchive* temp = _impl_.table_id_;
  _impl_.table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CFUUIDArchive* TableResizedInfoArchive::unsafe_arena_release_table_id() {
  // @@protoc_insertion_point(field_release:TSCE.TableResizedInfoArchive.table_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::CFUUIDArchive* temp = _impl_.table_id_;
  _impl_.table_id_ = nullptr;
  return temp;
}
inline ::TSCE::CFUUIDArchive* TableResizedInfoArchive::_internal_mutable_table_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CFUUIDArchive>(GetArenaForAllocation());
    _impl_.table_id_ = p;
  }
  return _impl_.table_id_;
}
inline ::TSCE::CFUUIDArchive* TableResizedInfoArchive::mutable_table_id() {
  ::TSCE::CFUUIDArchive* _msg = _internal_mutable_table_id();
  // @@protoc_insertion_point(field_mutable:TSCE.TableResizedInfoArchive.table_id)
  return _msg;
}
inline void TableResizedInfoArchive::set_allocated_table_id(::TSCE::CFUUIDArchive* table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.table_id_;
  }
  if (table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(table_id);
    if (message_arena != submessage_arena) {
      table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.table_id_ = table_id;
  // @@protoc_insertion_point(field_set_allocated:TSCE.TableResizedInfoArchive.table_id)
}

// required .TSCE.RangeCoordinateArchive new_table_size = 2;
inline bool TableResizedInfoArchive::_internal_has_new_table_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_table_size_ != nullptr);
  return value;
}
inline bool TableResizedInfoArchive::has_new_table_size() const {
  return _internal_has_new_table_size();
}
inline void TableResizedInfoArchive::clear_new_table_size() {
  if (_impl_.new_table_size_ != nullptr) _impl_.new_table_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::RangeCoordinateArchive& TableResizedInfoArchive::_internal_new_table_size() const {
  const ::TSCE::RangeCoordinateArchive* p = _impl_.new_table_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeCoordinateArchive&>(
      ::TSCE::_RangeCoordinateArchive_default_instance_);
}
inline const ::TSCE::RangeCoordinateArchive& TableResizedInfoArchive::new_table_size() const {
  // @@protoc_insertion_point(field_get:TSCE.TableResizedInfoArchive.new_table_size)
  return _internal_new_table_size();
}
inline void TableResizedInfoArchive::unsafe_arena_set_allocated_new_table_size(
    ::TSCE::RangeCoordinateArchive* new_table_size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_table_size_);
  }
  _impl_.new_table_size_ = new_table_size;
  if (new_table_size) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.TableResizedInfoArchive.new_table_size)
}
inline ::TSCE::RangeCoordinateArchive* TableResizedInfoArchive::release_new_table_size() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::RangeCoordinateArchive* temp = _impl_.new_table_size_;
  _impl_.new_table_size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* TableResizedInfoArchive::unsafe_arena_release_new_table_size() {
  // @@protoc_insertion_point(field_release:TSCE.TableResizedInfoArchive.new_table_size)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::RangeCoordinateArchive* temp = _impl_.new_table_size_;
  _impl_.new_table_size_ = nullptr;
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* TableResizedInfoArchive::_internal_mutable_new_table_size() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.new_table_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeCoordinateArchive>(GetArenaForAllocation());
    _impl_.new_table_size_ = p;
  }
  return _impl_.new_table_size_;
}
inline ::TSCE::RangeCoordinateArchive* TableResizedInfoArchive::mutable_new_table_size() {
  ::TSCE::RangeCoordinateArchive* _msg = _internal_mutable_new_table_size();
  // @@protoc_insertion_point(field_mutable:TSCE.TableResizedInfoArchive.new_table_size)
  return _msg;
}
inline void TableResizedInfoArchive::set_allocated_new_table_size(::TSCE::RangeCoordinateArchive* new_table_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.new_table_size_;
  }
  if (new_table_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(new_table_size);
    if (message_arena != submessage_arena) {
      new_table_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_table_size, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.new_table_size_ = new_table_size;
  // @@protoc_insertion_point(field_set_allocated:TSCE.TableResizedInfoArchive.new_table_size)
}

// optional .TSCE.RangeCoordinateArchive old_table_size = 3;
inline bool TableResizedInfoArchive::_internal_has_old_table_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_table_size_ != nullptr);
  return value;
}
inline bool TableResizedInfoArchive::has_old_table_size() const {
  return _internal_has_old_table_size();
}
inline void TableResizedInfoArchive::clear_old_table_size() {
  if (_impl_.old_table_size_ != nullptr) _impl_.old_table_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCE::RangeCoordinateArchive& TableResizedInfoArchive::_internal_old_table_size() const {
  const ::TSCE::RangeCoordinateArchive* p = _impl_.old_table_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeCoordinateArchive&>(
      ::TSCE::_RangeCoordinateArchive_default_instance_);
}
inline const ::TSCE::RangeCoordinateArchive& TableResizedInfoArchive::old_table_size() const {
  // @@protoc_insertion_point(field_get:TSCE.TableResizedInfoArchive.old_table_size)
  return _internal_old_table_size();
}
inline void TableResizedInfoArchive::unsafe_arena_set_allocated_old_table_size(
    ::TSCE::RangeCoordinateArchive* old_table_size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_table_size_);
  }
  _impl_.old_table_size_ = old_table_size;
  if (old_table_size) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.TableResizedInfoArchive.old_table_size)
}
inline ::TSCE::RangeCoordinateArchive* TableResizedInfoArchive::release_old_table_size() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::RangeCoordinateArchive* temp = _impl_.old_table_size_;
  _impl_.old_table_size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* TableResizedInfoArchive::unsafe_arena_release_old_table_size() {
  // @@protoc_insertion_point(field_release:TSCE.TableResizedInfoArchive.old_table_size)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::RangeCoordinateArchive* temp = _impl_.old_table_size_;
  _impl_.old_table_size_ = nullptr;
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* TableResizedInfoArchive::_internal_mutable_old_table_size() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.old_table_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeCoordinateArchive>(GetArenaForAllocation());
    _impl_.old_table_size_ = p;
  }
  return _impl_.old_table_size_;
}
inline ::TSCE::RangeCoordinateArchive* TableResizedInfoArchive::mutable_old_table_size() {
  ::TSCE::RangeCoordinateArchive* _msg = _internal_mutable_old_table_size();
  // @@protoc_insertion_point(field_mutable:TSCE.TableResizedInfoArchive.old_table_size)
  return _msg;
}
inline void TableResizedInfoArchive::set_allocated_old_table_size(::TSCE::RangeCoordinateArchive* old_table_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.old_table_size_;
  }
  if (old_table_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(old_table_size);
    if (message_arena != submessage_arena) {
      old_table_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_table_size, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.old_table_size_ = old_table_size;
  // @@protoc_insertion_point(field_set_allocated:TSCE.TableResizedInfoArchive.old_table_size)
}

// -------------------------------------------------------------------

// CellMergeInfoArchive

// required .TSCE.CFUUIDArchive table_id = 1;
inline bool CellMergeInfoArchive::_internal_has_table_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.table_id_ != nullptr);
  return value;
}
inline bool CellMergeInfoArchive::has_table_id() const {
  return _internal_has_table_id();
}
inline void CellMergeInfoArchive::clear_table_id() {
  if (_impl_.table_id_ != nullptr) _impl_.table_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::CFUUIDArchive& CellMergeInfoArchive::_internal_table_id() const {
  const ::TSCE::CFUUIDArchive* p = _impl_.table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CFUUIDArchive&>(
      ::TSCE::_CFUUIDArchive_default_instance_);
}
inline const ::TSCE::CFUUIDArchive& CellMergeInfoArchive::table_id() const {
  // @@protoc_insertion_point(field_get:TSCE.CellMergeInfoArchive.table_id)
  return _internal_table_id();
}
inline void CellMergeInfoArchive::unsafe_arena_set_allocated_table_id(
    ::TSCE::CFUUIDArchive* table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_id_);
  }
  _impl_.table_id_ = table_id;
  if (table_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CellMergeInfoArchive.table_id)
}
inline ::TSCE::CFUUIDArchive* CellMergeInfoArchive::release_table_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::CFUUIDArchive* temp = _impl_.table_id_;
  _impl_.table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CFUUIDArchive* CellMergeInfoArchive::unsafe_arena_release_table_id() {
  // @@protoc_insertion_point(field_release:TSCE.CellMergeInfoArchive.table_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::CFUUIDArchive* temp = _impl_.table_id_;
  _impl_.table_id_ = nullptr;
  return temp;
}
inline ::TSCE::CFUUIDArchive* CellMergeInfoArchive::_internal_mutable_table_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CFUUIDArchive>(GetArenaForAllocation());
    _impl_.table_id_ = p;
  }
  return _impl_.table_id_;
}
inline ::TSCE::CFUUIDArchive* CellMergeInfoArchive::mutable_table_id() {
  ::TSCE::CFUUIDArchive* _msg = _internal_mutable_table_id();
  // @@protoc_insertion_point(field_mutable:TSCE.CellMergeInfoArchive.table_id)
  return _msg;
}
inline void CellMergeInfoArchive::set_allocated_table_id(::TSCE::CFUUIDArchive* table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.table_id_;
  }
  if (table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(table_id);
    if (message_arena != submessage_arena) {
      table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.table_id_ = table_id;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CellMergeInfoArchive.table_id)
}

// required .TSCE.RangeCoordinateArchive merged_range = 2;
inline bool CellMergeInfoArchive::_internal_has_merged_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.merged_range_ != nullptr);
  return value;
}
inline bool CellMergeInfoArchive::has_merged_range() const {
  return _internal_has_merged_range();
}
inline void CellMergeInfoArchive::clear_merged_range() {
  if (_impl_.merged_range_ != nullptr) _impl_.merged_range_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::RangeCoordinateArchive& CellMergeInfoArchive::_internal_merged_range() const {
  const ::TSCE::RangeCoordinateArchive* p = _impl_.merged_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeCoordinateArchive&>(
      ::TSCE::_RangeCoordinateArchive_default_instance_);
}
inline const ::TSCE::RangeCoordinateArchive& CellMergeInfoArchive::merged_range() const {
  // @@protoc_insertion_point(field_get:TSCE.CellMergeInfoArchive.merged_range)
  return _internal_merged_range();
}
inline void CellMergeInfoArchive::unsafe_arena_set_allocated_merged_range(
    ::TSCE::RangeCoordinateArchive* merged_range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.merged_range_);
  }
  _impl_.merged_range_ = merged_range;
  if (merged_range) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CellMergeInfoArchive.merged_range)
}
inline ::TSCE::RangeCoordinateArchive* CellMergeInfoArchive::release_merged_range() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::RangeCoordinateArchive* temp = _impl_.merged_range_;
  _impl_.merged_range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* CellMergeInfoArchive::unsafe_arena_release_merged_range() {
  // @@protoc_insertion_point(field_release:TSCE.CellMergeInfoArchive.merged_range)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::RangeCoordinateArchive* temp = _impl_.merged_range_;
  _impl_.merged_range_ = nullptr;
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* CellMergeInfoArchive::_internal_mutable_merged_range() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.merged_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeCoordinateArchive>(GetArenaForAllocation());
    _impl_.merged_range_ = p;
  }
  return _impl_.merged_range_;
}
inline ::TSCE::RangeCoordinateArchive* CellMergeInfoArchive::mutable_merged_range() {
  ::TSCE::RangeCoordinateArchive* _msg = _internal_mutable_merged_range();
  // @@protoc_insertion_point(field_mutable:TSCE.CellMergeInfoArchive.merged_range)
  return _msg;
}
inline void CellMergeInfoArchive::set_allocated_merged_range(::TSCE::RangeCoordinateArchive* merged_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.merged_range_;
  }
  if (merged_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(merged_range);
    if (message_arena != submessage_arena) {
      merged_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, merged_range, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.merged_range_ = merged_range;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CellMergeInfoArchive.merged_range)
}

// -------------------------------------------------------------------

// FormulaRewriteSpecArchive

// required .TSCE.FormulaRewriteSpecArchive.RewriteType rewrite_type = 1;
inline bool FormulaRewriteSpecArchive::_internal_has_rewrite_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FormulaRewriteSpecArchive::has_rewrite_type() const {
  return _internal_has_rewrite_type();
}
inline void FormulaRewriteSpecArchive::clear_rewrite_type() {
  _impl_.rewrite_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::TSCE::FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::_internal_rewrite_type() const {
  return static_cast< ::TSCE::FormulaRewriteSpecArchive_RewriteType >(_impl_.rewrite_type_);
}
inline ::TSCE::FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::rewrite_type() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaRewriteSpecArchive.rewrite_type)
  return _internal_rewrite_type();
}
inline void FormulaRewriteSpecArchive::_internal_set_rewrite_type(::TSCE::FormulaRewriteSpecArchive_RewriteType value) {
  assert(::TSCE::FormulaRewriteSpecArchive_RewriteType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.rewrite_type_ = value;
}
inline void FormulaRewriteSpecArchive::set_rewrite_type(::TSCE::FormulaRewriteSpecArchive_RewriteType value) {
  _internal_set_rewrite_type(value);
  // @@protoc_insertion_point(field_set:TSCE.FormulaRewriteSpecArchive.rewrite_type)
}

// optional .TSCE.TectonicShiftArchive tectonic_shift = 2;
inline bool FormulaRewriteSpecArchive::_internal_has_tectonic_shift() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tectonic_shift_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_tectonic_shift() const {
  return _internal_has_tectonic_shift();
}
inline void FormulaRewriteSpecArchive::clear_tectonic_shift() {
  if (_impl_.tectonic_shift_ != nullptr) _impl_.tectonic_shift_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::TectonicShiftArchive& FormulaRewriteSpecArchive::_internal_tectonic_shift() const {
  const ::TSCE::TectonicShiftArchive* p = _impl_.tectonic_shift_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::TectonicShiftArchive&>(
      ::TSCE::_TectonicShiftArchive_default_instance_);
}
inline const ::TSCE::TectonicShiftArchive& FormulaRewriteSpecArchive::tectonic_shift() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaRewriteSpecArchive.tectonic_shift)
  return _internal_tectonic_shift();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_tectonic_shift(
    ::TSCE::TectonicShiftArchive* tectonic_shift) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tectonic_shift_);
  }
  _impl_.tectonic_shift_ = tectonic_shift;
  if (tectonic_shift) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaRewriteSpecArchive.tectonic_shift)
}
inline ::TSCE::TectonicShiftArchive* FormulaRewriteSpecArchive::release_tectonic_shift() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::TectonicShiftArchive* temp = _impl_.tectonic_shift_;
  _impl_.tectonic_shift_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::TectonicShiftArchive* FormulaRewriteSpecArchive::unsafe_arena_release_tectonic_shift() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaRewriteSpecArchive.tectonic_shift)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::TectonicShiftArchive* temp = _impl_.tectonic_shift_;
  _impl_.tectonic_shift_ = nullptr;
  return temp;
}
inline ::TSCE::TectonicShiftArchive* FormulaRewriteSpecArchive::_internal_mutable_tectonic_shift() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tectonic_shift_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::TectonicShiftArchive>(GetArenaForAllocation());
    _impl_.tectonic_shift_ = p;
  }
  return _impl_.tectonic_shift_;
}
inline ::TSCE::TectonicShiftArchive* FormulaRewriteSpecArchive::mutable_tectonic_shift() {
  ::TSCE::TectonicShiftArchive* _msg = _internal_mutable_tectonic_shift();
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaRewriteSpecArchive.tectonic_shift)
  return _msg;
}
inline void FormulaRewriteSpecArchive::set_allocated_tectonic_shift(::TSCE::TectonicShiftArchive* tectonic_shift) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tectonic_shift_;
  }
  if (tectonic_shift) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tectonic_shift);
    if (message_arena != submessage_arena) {
      tectonic_shift = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tectonic_shift, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tectonic_shift_ = tectonic_shift;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaRewriteSpecArchive.tectonic_shift)
}

// optional .TSCE.RewriteSortMappingArchive sort_mapping = 3;
inline bool FormulaRewriteSpecArchive::_internal_has_sort_mapping() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sort_mapping_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_sort_mapping() const {
  return _internal_has_sort_mapping();
}
inline void FormulaRewriteSpecArchive::clear_sort_mapping() {
  if (_impl_.sort_mapping_ != nullptr) _impl_.sort_mapping_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::RewriteSortMappingArchive& FormulaRewriteSpecArchive::_internal_sort_mapping() const {
  const ::TSCE::RewriteSortMappingArchive* p = _impl_.sort_mapping_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RewriteSortMappingArchive&>(
      ::TSCE::_RewriteSortMappingArchive_default_instance_);
}
inline const ::TSCE::RewriteSortMappingArchive& FormulaRewriteSpecArchive::sort_mapping() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaRewriteSpecArchive.sort_mapping)
  return _internal_sort_mapping();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_sort_mapping(
    ::TSCE::RewriteSortMappingArchive* sort_mapping) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sort_mapping_);
  }
  _impl_.sort_mapping_ = sort_mapping;
  if (sort_mapping) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaRewriteSpecArchive.sort_mapping)
}
inline ::TSCE::RewriteSortMappingArchive* FormulaRewriteSpecArchive::release_sort_mapping() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::RewriteSortMappingArchive* temp = _impl_.sort_mapping_;
  _impl_.sort_mapping_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RewriteSortMappingArchive* FormulaRewriteSpecArchive::unsafe_arena_release_sort_mapping() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaRewriteSpecArchive.sort_mapping)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::RewriteSortMappingArchive* temp = _impl_.sort_mapping_;
  _impl_.sort_mapping_ = nullptr;
  return temp;
}
inline ::TSCE::RewriteSortMappingArchive* FormulaRewriteSpecArchive::_internal_mutable_sort_mapping() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.sort_mapping_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RewriteSortMappingArchive>(GetArenaForAllocation());
    _impl_.sort_mapping_ = p;
  }
  return _impl_.sort_mapping_;
}
inline ::TSCE::RewriteSortMappingArchive* FormulaRewriteSpecArchive::mutable_sort_mapping() {
  ::TSCE::RewriteSortMappingArchive* _msg = _internal_mutable_sort_mapping();
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaRewriteSpecArchive.sort_mapping)
  return _msg;
}
inline void FormulaRewriteSpecArchive::set_allocated_sort_mapping(::TSCE::RewriteSortMappingArchive* sort_mapping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sort_mapping_;
  }
  if (sort_mapping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sort_mapping);
    if (message_arena != submessage_arena) {
      sort_mapping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sort_mapping, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.sort_mapping_ = sort_mapping;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaRewriteSpecArchive.sort_mapping)
}

// optional .TSCE.RangeMovedInfoArchive range_moved_info = 4;
inline bool FormulaRewriteSpecArchive::_internal_has_range_moved_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.range_moved_info_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_range_moved_info() const {
  return _internal_has_range_moved_info();
}
inline void FormulaRewriteSpecArchive::clear_range_moved_info() {
  if (_impl_.range_moved_info_ != nullptr) _impl_.range_moved_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCE::RangeMovedInfoArchive& FormulaRewriteSpecArchive::_internal_range_moved_info() const {
  const ::TSCE::RangeMovedInfoArchive* p = _impl_.range_moved_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeMovedInfoArchive&>(
      ::TSCE::_RangeMovedInfoArchive_default_instance_);
}
inline const ::TSCE::RangeMovedInfoArchive& FormulaRewriteSpecArchive::range_moved_info() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaRewriteSpecArchive.range_moved_info)
  return _internal_range_moved_info();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_range_moved_info(
    ::TSCE::RangeMovedInfoArchive* range_moved_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.range_moved_info_);
  }
  _impl_.range_moved_info_ = range_moved_info;
  if (range_moved_info) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaRewriteSpecArchive.range_moved_info)
}
inline ::TSCE::RangeMovedInfoArchive* FormulaRewriteSpecArchive::release_range_moved_info() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::RangeMovedInfoArchive* temp = _impl_.range_moved_info_;
  _impl_.range_moved_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RangeMovedInfoArchive* FormulaRewriteSpecArchive::unsafe_arena_release_range_moved_info() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaRewriteSpecArchive.range_moved_info)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::RangeMovedInfoArchive* temp = _impl_.range_moved_info_;
  _impl_.range_moved_info_ = nullptr;
  return temp;
}
inline ::TSCE::RangeMovedInfoArchive* FormulaRewriteSpecArchive::_internal_mutable_range_moved_info() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.range_moved_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeMovedInfoArchive>(GetArenaForAllocation());
    _impl_.range_moved_info_ = p;
  }
  return _impl_.range_moved_info_;
}
inline ::TSCE::RangeMovedInfoArchive* FormulaRewriteSpecArchive::mutable_range_moved_info() {
  ::TSCE::RangeMovedInfoArchive* _msg = _internal_mutable_range_moved_info();
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaRewriteSpecArchive.range_moved_info)
  return _msg;
}
inline void FormulaRewriteSpecArchive::set_allocated_range_moved_info(::TSCE::RangeMovedInfoArchive* range_moved_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.range_moved_info_;
  }
  if (range_moved_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(range_moved_info);
    if (message_arena != submessage_arena) {
      range_moved_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range_moved_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.range_moved_info_ = range_moved_info;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaRewriteSpecArchive.range_moved_info)
}

// optional .TSCE.CFUUIDArchive deleted_owner_id = 5;
inline bool FormulaRewriteSpecArchive::_internal_has_deleted_owner_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.deleted_owner_id_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_deleted_owner_id() const {
  return _internal_has_deleted_owner_id();
}
inline void FormulaRewriteSpecArchive::clear_deleted_owner_id() {
  if (_impl_.deleted_owner_id_ != nullptr) _impl_.deleted_owner_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::TSCE::CFUUIDArchive& FormulaRewriteSpecArchive::_internal_deleted_owner_id() const {
  const ::TSCE::CFUUIDArchive* p = _impl_.deleted_owner_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CFUUIDArchive&>(
      ::TSCE::_CFUUIDArchive_default_instance_);
}
inline const ::TSCE::CFUUIDArchive& FormulaRewriteSpecArchive::deleted_owner_id() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaRewriteSpecArchive.deleted_owner_id)
  return _internal_deleted_owner_id();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_deleted_owner_id(
    ::TSCE::CFUUIDArchive* deleted_owner_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deleted_owner_id_);
  }
  _impl_.deleted_owner_id_ = deleted_owner_id;
  if (deleted_owner_id) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaRewriteSpecArchive.deleted_owner_id)
}
inline ::TSCE::CFUUIDArchive* FormulaRewriteSpecArchive::release_deleted_owner_id() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::CFUUIDArchive* temp = _impl_.deleted_owner_id_;
  _impl_.deleted_owner_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CFUUIDArchive* FormulaRewriteSpecArchive::unsafe_arena_release_deleted_owner_id() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaRewriteSpecArchive.deleted_owner_id)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::CFUUIDArchive* temp = _impl_.deleted_owner_id_;
  _impl_.deleted_owner_id_ = nullptr;
  return temp;
}
inline ::TSCE::CFUUIDArchive* FormulaRewriteSpecArchive::_internal_mutable_deleted_owner_id() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.deleted_owner_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CFUUIDArchive>(GetArenaForAllocation());
    _impl_.deleted_owner_id_ = p;
  }
  return _impl_.deleted_owner_id_;
}
inline ::TSCE::CFUUIDArchive* FormulaRewriteSpecArchive::mutable_deleted_owner_id() {
  ::TSCE::CFUUIDArchive* _msg = _internal_mutable_deleted_owner_id();
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaRewriteSpecArchive.deleted_owner_id)
  return _msg;
}
inline void FormulaRewriteSpecArchive::set_allocated_deleted_owner_id(::TSCE::CFUUIDArchive* deleted_owner_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.deleted_owner_id_;
  }
  if (deleted_owner_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(deleted_owner_id);
    if (message_arena != submessage_arena) {
      deleted_owner_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deleted_owner_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.deleted_owner_id_ = deleted_owner_id;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaRewriteSpecArchive.deleted_owner_id)
}

// optional .TSCE.TableResizedInfoArchive table_resized_info = 6;
inline bool FormulaRewriteSpecArchive::_internal_has_table_resized_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.table_resized_info_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_table_resized_info() const {
  return _internal_has_table_resized_info();
}
inline void FormulaRewriteSpecArchive::clear_table_resized_info() {
  if (_impl_.table_resized_info_ != nullptr) _impl_.table_resized_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::TSCE::TableResizedInfoArchive& FormulaRewriteSpecArchive::_internal_table_resized_info() const {
  const ::TSCE::TableResizedInfoArchive* p = _impl_.table_resized_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::TableResizedInfoArchive&>(
      ::TSCE::_TableResizedInfoArchive_default_instance_);
}
inline const ::TSCE::TableResizedInfoArchive& FormulaRewriteSpecArchive::table_resized_info() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaRewriteSpecArchive.table_resized_info)
  return _internal_table_resized_info();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_table_resized_info(
    ::TSCE::TableResizedInfoArchive* table_resized_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_resized_info_);
  }
  _impl_.table_resized_info_ = table_resized_info;
  if (table_resized_info) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaRewriteSpecArchive.table_resized_info)
}
inline ::TSCE::TableResizedInfoArchive* FormulaRewriteSpecArchive::release_table_resized_info() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCE::TableResizedInfoArchive* temp = _impl_.table_resized_info_;
  _impl_.table_resized_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::TableResizedInfoArchive* FormulaRewriteSpecArchive::unsafe_arena_release_table_resized_info() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaRewriteSpecArchive.table_resized_info)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCE::TableResizedInfoArchive* temp = _impl_.table_resized_info_;
  _impl_.table_resized_info_ = nullptr;
  return temp;
}
inline ::TSCE::TableResizedInfoArchive* FormulaRewriteSpecArchive::_internal_mutable_table_resized_info() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.table_resized_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::TableResizedInfoArchive>(GetArenaForAllocation());
    _impl_.table_resized_info_ = p;
  }
  return _impl_.table_resized_info_;
}
inline ::TSCE::TableResizedInfoArchive* FormulaRewriteSpecArchive::mutable_table_resized_info() {
  ::TSCE::TableResizedInfoArchive* _msg = _internal_mutable_table_resized_info();
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaRewriteSpecArchive.table_resized_info)
  return _msg;
}
inline void FormulaRewriteSpecArchive::set_allocated_table_resized_info(::TSCE::TableResizedInfoArchive* table_resized_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.table_resized_info_;
  }
  if (table_resized_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(table_resized_info);
    if (message_arena != submessage_arena) {
      table_resized_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_resized_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.table_resized_info_ = table_resized_info;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaRewriteSpecArchive.table_resized_info)
}

// optional .TSCE.CellMergeInfoArchive cell_merge_info = 7;
inline bool FormulaRewriteSpecArchive::_internal_has_cell_merge_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_merge_info_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_cell_merge_info() const {
  return _internal_has_cell_merge_info();
}
inline void FormulaRewriteSpecArchive::clear_cell_merge_info() {
  if (_impl_.cell_merge_info_ != nullptr) _impl_.cell_merge_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::TSCE::CellMergeInfoArchive& FormulaRewriteSpecArchive::_internal_cell_merge_info() const {
  const ::TSCE::CellMergeInfoArchive* p = _impl_.cell_merge_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellMergeInfoArchive&>(
      ::TSCE::_CellMergeInfoArchive_default_instance_);
}
inline const ::TSCE::CellMergeInfoArchive& FormulaRewriteSpecArchive::cell_merge_info() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaRewriteSpecArchive.cell_merge_info)
  return _internal_cell_merge_info();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_cell_merge_info(
    ::TSCE::CellMergeInfoArchive* cell_merge_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_merge_info_);
  }
  _impl_.cell_merge_info_ = cell_merge_info;
  if (cell_merge_info) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaRewriteSpecArchive.cell_merge_info)
}
inline ::TSCE::CellMergeInfoArchive* FormulaRewriteSpecArchive::release_cell_merge_info() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSCE::CellMergeInfoArchive* temp = _impl_.cell_merge_info_;
  _impl_.cell_merge_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CellMergeInfoArchive* FormulaRewriteSpecArchive::unsafe_arena_release_cell_merge_info() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaRewriteSpecArchive.cell_merge_info)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSCE::CellMergeInfoArchive* temp = _impl_.cell_merge_info_;
  _impl_.cell_merge_info_ = nullptr;
  return temp;
}
inline ::TSCE::CellMergeInfoArchive* FormulaRewriteSpecArchive::_internal_mutable_cell_merge_info() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.cell_merge_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellMergeInfoArchive>(GetArenaForAllocation());
    _impl_.cell_merge_info_ = p;
  }
  return _impl_.cell_merge_info_;
}
inline ::TSCE::CellMergeInfoArchive* FormulaRewriteSpecArchive::mutable_cell_merge_info() {
  ::TSCE::CellMergeInfoArchive* _msg = _internal_mutable_cell_merge_info();
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaRewriteSpecArchive.cell_merge_info)
  return _msg;
}
inline void FormulaRewriteSpecArchive::set_allocated_cell_merge_info(::TSCE::CellMergeInfoArchive* cell_merge_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cell_merge_info_;
  }
  if (cell_merge_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cell_merge_info);
    if (message_arena != submessage_arena) {
      cell_merge_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_merge_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.cell_merge_info_ = cell_merge_info;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaRewriteSpecArchive.cell_merge_info)
}

// -------------------------------------------------------------------

// CellCoordinateFormulaPairArchive

// required uint32 column = 1;
inline bool CellCoordinateFormulaPairArchive::_internal_has_column() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CellCoordinateFormulaPairArchive::has_column() const {
  return _internal_has_column();
}
inline void CellCoordinateFormulaPairArchive::clear_column() {
  _impl_.column_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CellCoordinateFormulaPairArchive::_internal_column() const {
  return _impl_.column_;
}
inline uint32_t CellCoordinateFormulaPairArchive::column() const {
  // @@protoc_insertion_point(field_get:TSCE.CellCoordinateFormulaPairArchive.column)
  return _internal_column();
}
inline void CellCoordinateFormulaPairArchive::_internal_set_column(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.column_ = value;
}
inline void CellCoordinateFormulaPairArchive::set_column(uint32_t value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:TSCE.CellCoordinateFormulaPairArchive.column)
}

// required uint32 row = 2;
inline bool CellCoordinateFormulaPairArchive::_internal_has_row() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CellCoordinateFormulaPairArchive::has_row() const {
  return _internal_has_row();
}
inline void CellCoordinateFormulaPairArchive::clear_row() {
  _impl_.row_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CellCoordinateFormulaPairArchive::_internal_row() const {
  return _impl_.row_;
}
inline uint32_t CellCoordinateFormulaPairArchive::row() const {
  // @@protoc_insertion_point(field_get:TSCE.CellCoordinateFormulaPairArchive.row)
  return _internal_row();
}
inline void CellCoordinateFormulaPairArchive::_internal_set_row(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.row_ = value;
}
inline void CellCoordinateFormulaPairArchive::set_row(uint32_t value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:TSCE.CellCoordinateFormulaPairArchive.row)
}

// optional .TSCE.FormulaArchive formula = 3;
inline bool CellCoordinateFormulaPairArchive::_internal_has_formula() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.formula_ != nullptr);
  return value;
}
inline bool CellCoordinateFormulaPairArchive::has_formula() const {
  return _internal_has_formula();
}
inline void CellCoordinateFormulaPairArchive::clear_formula() {
  if (_impl_.formula_ != nullptr) _impl_.formula_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::FormulaArchive& CellCoordinateFormulaPairArchive::_internal_formula() const {
  const ::TSCE::FormulaArchive* p = _impl_.formula_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::FormulaArchive&>(
      ::TSCE::_FormulaArchive_default_instance_);
}
inline const ::TSCE::FormulaArchive& CellCoordinateFormulaPairArchive::formula() const {
  // @@protoc_insertion_point(field_get:TSCE.CellCoordinateFormulaPairArchive.formula)
  return _internal_formula();
}
inline void CellCoordinateFormulaPairArchive::unsafe_arena_set_allocated_formula(
    ::TSCE::FormulaArchive* formula) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_);
  }
  _impl_.formula_ = formula;
  if (formula) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CellCoordinateFormulaPairArchive.formula)
}
inline ::TSCE::FormulaArchive* CellCoordinateFormulaPairArchive::release_formula() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::FormulaArchive* temp = _impl_.formula_;
  _impl_.formula_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::FormulaArchive* CellCoordinateFormulaPairArchive::unsafe_arena_release_formula() {
  // @@protoc_insertion_point(field_release:TSCE.CellCoordinateFormulaPairArchive.formula)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::FormulaArchive* temp = _impl_.formula_;
  _impl_.formula_ = nullptr;
  return temp;
}
inline ::TSCE::FormulaArchive* CellCoordinateFormulaPairArchive::_internal_mutable_formula() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.formula_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::FormulaArchive>(GetArenaForAllocation());
    _impl_.formula_ = p;
  }
  return _impl_.formula_;
}
inline ::TSCE::FormulaArchive* CellCoordinateFormulaPairArchive::mutable_formula() {
  ::TSCE::FormulaArchive* _msg = _internal_mutable_formula();
  // @@protoc_insertion_point(field_mutable:TSCE.CellCoordinateFormulaPairArchive.formula)
  return _msg;
}
inline void CellCoordinateFormulaPairArchive::set_allocated_formula(::TSCE::FormulaArchive* formula) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.formula_;
  }
  if (formula) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(formula);
    if (message_arena != submessage_arena) {
      formula = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.formula_ = formula;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CellCoordinateFormulaPairArchive.formula)
}

// -------------------------------------------------------------------

// CellCoordinateArchive

// optional fixed32 packedData = 1;
inline bool CellCoordinateArchive::_internal_has_packeddata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CellCoordinateArchive::has_packeddata() const {
  return _internal_has_packeddata();
}
inline void CellCoordinateArchive::clear_packeddata() {
  _impl_.packeddata_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CellCoordinateArchive::_internal_packeddata() const {
  return _impl_.packeddata_;
}
inline uint32_t CellCoordinateArchive::packeddata() const {
  // @@protoc_insertion_point(field_get:TSCE.CellCoordinateArchive.packedData)
  return _internal_packeddata();
}
inline void CellCoordinateArchive::_internal_set_packeddata(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.packeddata_ = value;
}
inline void CellCoordinateArchive::set_packeddata(uint32_t value) {
  _internal_set_packeddata(value);
  // @@protoc_insertion_point(field_set:TSCE.CellCoordinateArchive.packedData)
}

// optional uint32 column = 2;
inline bool CellCoordinateArchive::_internal_has_column() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CellCoordinateArchive::has_column() const {
  return _internal_has_column();
}
inline void CellCoordinateArchive::clear_column() {
  _impl_.column_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CellCoordinateArchive::_internal_column() const {
  return _impl_.column_;
}
inline uint32_t CellCoordinateArchive::column() const {
  // @@protoc_insertion_point(field_get:TSCE.CellCoordinateArchive.column)
  return _internal_column();
}
inline void CellCoordinateArchive::_internal_set_column(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.column_ = value;
}
inline void CellCoordinateArchive::set_column(uint32_t value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:TSCE.CellCoordinateArchive.column)
}

// optional uint32 row = 3;
inline bool CellCoordinateArchive::_internal_has_row() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CellCoordinateArchive::has_row() const {
  return _internal_has_row();
}
inline void CellCoordinateArchive::clear_row() {
  _impl_.row_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CellCoordinateArchive::_internal_row() const {
  return _impl_.row_;
}
inline uint32_t CellCoordinateArchive::row() const {
  // @@protoc_insertion_point(field_get:TSCE.CellCoordinateArchive.row)
  return _internal_row();
}
inline void CellCoordinateArchive::_internal_set_row(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.row_ = value;
}
inline void CellCoordinateArchive::set_row(uint32_t value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:TSCE.CellCoordinateArchive.row)
}

// -------------------------------------------------------------------

// CellCoordinateVectorArchive

// repeated .TSCE.CellCoordinateArchive cell_coordinate = 1;
inline int CellCoordinateVectorArchive::_internal_cell_coordinate_size() const {
  return _impl_.cell_coordinate_.size();
}
inline int CellCoordinateVectorArchive::cell_coordinate_size() const {
  return _internal_cell_coordinate_size();
}
inline void CellCoordinateVectorArchive::clear_cell_coordinate() {
  _impl_.cell_coordinate_.Clear();
}
inline ::TSCE::CellCoordinateArchive* CellCoordinateVectorArchive::mutable_cell_coordinate(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.CellCoordinateVectorArchive.cell_coordinate)
  return _impl_.cell_coordinate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >*
CellCoordinateVectorArchive::mutable_cell_coordinate() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.CellCoordinateVectorArchive.cell_coordinate)
  return &_impl_.cell_coordinate_;
}
inline const ::TSCE::CellCoordinateArchive& CellCoordinateVectorArchive::_internal_cell_coordinate(int index) const {
  return _impl_.cell_coordinate_.Get(index);
}
inline const ::TSCE::CellCoordinateArchive& CellCoordinateVectorArchive::cell_coordinate(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.CellCoordinateVectorArchive.cell_coordinate)
  return _internal_cell_coordinate(index);
}
inline ::TSCE::CellCoordinateArchive* CellCoordinateVectorArchive::_internal_add_cell_coordinate() {
  return _impl_.cell_coordinate_.Add();
}
inline ::TSCE::CellCoordinateArchive* CellCoordinateVectorArchive::add_cell_coordinate() {
  ::TSCE::CellCoordinateArchive* _add = _internal_add_cell_coordinate();
  // @@protoc_insertion_point(field_add:TSCE.CellCoordinateVectorArchive.cell_coordinate)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >&
CellCoordinateVectorArchive::cell_coordinate() const {
  // @@protoc_insertion_point(field_list:TSCE.CellCoordinateVectorArchive.cell_coordinate)
  return _impl_.cell_coordinate_;
}

// -------------------------------------------------------------------

// CellCoordinateObjectPairArchive

// required .TSCE.CellCoordinateArchive cell_coordinate = 1;
inline bool CellCoordinateObjectPairArchive::_internal_has_cell_coordinate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_coordinate_ != nullptr);
  return value;
}
inline bool CellCoordinateObjectPairArchive::has_cell_coordinate() const {
  return _internal_has_cell_coordinate();
}
inline void CellCoordinateObjectPairArchive::clear_cell_coordinate() {
  if (_impl_.cell_coordinate_ != nullptr) _impl_.cell_coordinate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::CellCoordinateArchive& CellCoordinateObjectPairArchive::_internal_cell_coordinate() const {
  const ::TSCE::CellCoordinateArchive* p = _impl_.cell_coordinate_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordinateArchive&>(
      ::TSCE::_CellCoordinateArchive_default_instance_);
}
inline const ::TSCE::CellCoordinateArchive& CellCoordinateObjectPairArchive::cell_coordinate() const {
  // @@protoc_insertion_point(field_get:TSCE.CellCoordinateObjectPairArchive.cell_coordinate)
  return _internal_cell_coordinate();
}
inline void CellCoordinateObjectPairArchive::unsafe_arena_set_allocated_cell_coordinate(
    ::TSCE::CellCoordinateArchive* cell_coordinate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_coordinate_);
  }
  _impl_.cell_coordinate_ = cell_coordinate;
  if (cell_coordinate) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CellCoordinateObjectPairArchive.cell_coordinate)
}
inline ::TSCE::CellCoordinateArchive* CellCoordinateObjectPairArchive::release_cell_coordinate() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellCoordinateArchive* temp = _impl_.cell_coordinate_;
  _impl_.cell_coordinate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CellCoordinateArchive* CellCoordinateObjectPairArchive::unsafe_arena_release_cell_coordinate() {
  // @@protoc_insertion_point(field_release:TSCE.CellCoordinateObjectPairArchive.cell_coordinate)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellCoordinateArchive* temp = _impl_.cell_coordinate_;
  _impl_.cell_coordinate_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordinateArchive* CellCoordinateObjectPairArchive::_internal_mutable_cell_coordinate() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.cell_coordinate_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordinateArchive>(GetArenaForAllocation());
    _impl_.cell_coordinate_ = p;
  }
  return _impl_.cell_coordinate_;
}
inline ::TSCE::CellCoordinateArchive* CellCoordinateObjectPairArchive::mutable_cell_coordinate() {
  ::TSCE::CellCoordinateArchive* _msg = _internal_mutable_cell_coordinate();
  // @@protoc_insertion_point(field_mutable:TSCE.CellCoordinateObjectPairArchive.cell_coordinate)
  return _msg;
}
inline void CellCoordinateObjectPairArchive::set_allocated_cell_coordinate(::TSCE::CellCoordinateArchive* cell_coordinate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cell_coordinate_;
  }
  if (cell_coordinate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cell_coordinate);
    if (message_arena != submessage_arena) {
      cell_coordinate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_coordinate, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cell_coordinate_ = cell_coordinate;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CellCoordinateObjectPairArchive.cell_coordinate)
}

// required .TSP.Reference object = 2;
inline bool CellCoordinateObjectPairArchive::_internal_has_object() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.object_ != nullptr);
  return value;
}
inline bool CellCoordinateObjectPairArchive::has_object() const {
  return _internal_has_object();
}
inline const ::TSP::Reference& CellCoordinateObjectPairArchive::_internal_object() const {
  const ::TSP::Reference* p = _impl_.object_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CellCoordinateObjectPairArchive::object() const {
  // @@protoc_insertion_point(field_get:TSCE.CellCoordinateObjectPairArchive.object)
  return _internal_object();
}
inline void CellCoordinateObjectPairArchive::unsafe_arena_set_allocated_object(
    ::TSP::Reference* object) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.object_);
  }
  _impl_.object_ = object;
  if (object) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CellCoordinateObjectPairArchive.object)
}
inline ::TSP::Reference* CellCoordinateObjectPairArchive::release_object() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.object_;
  _impl_.object_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CellCoordinateObjectPairArchive::unsafe_arena_release_object() {
  // @@protoc_insertion_point(field_release:TSCE.CellCoordinateObjectPairArchive.object)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.object_;
  _impl_.object_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CellCoordinateObjectPairArchive::_internal_mutable_object() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.object_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.object_ = p;
  }
  return _impl_.object_;
}
inline ::TSP::Reference* CellCoordinateObjectPairArchive::mutable_object() {
  ::TSP::Reference* _msg = _internal_mutable_object();
  // @@protoc_insertion_point(field_mutable:TSCE.CellCoordinateObjectPairArchive.object)
  return _msg;
}
inline void CellCoordinateObjectPairArchive::set_allocated_object(::TSP::Reference* object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.object_);
  }
  if (object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object));
    if (message_arena != submessage_arena) {
      object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.object_ = object;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CellCoordinateObjectPairArchive.object)
}

// -------------------------------------------------------------------

// CellCoordinateObjectMapArchive

// repeated .TSCE.CellCoordinateObjectPairArchive cell_coordinate_object_pair = 1;
inline int CellCoordinateObjectMapArchive::_internal_cell_coordinate_object_pair_size() const {
  return _impl_.cell_coordinate_object_pair_.size();
}
inline int CellCoordinateObjectMapArchive::cell_coordinate_object_pair_size() const {
  return _internal_cell_coordinate_object_pair_size();
}
inline void CellCoordinateObjectMapArchive::clear_cell_coordinate_object_pair() {
  _impl_.cell_coordinate_object_pair_.Clear();
}
inline ::TSCE::CellCoordinateObjectPairArchive* CellCoordinateObjectMapArchive::mutable_cell_coordinate_object_pair(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.CellCoordinateObjectMapArchive.cell_coordinate_object_pair)
  return _impl_.cell_coordinate_object_pair_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateObjectPairArchive >*
CellCoordinateObjectMapArchive::mutable_cell_coordinate_object_pair() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.CellCoordinateObjectMapArchive.cell_coordinate_object_pair)
  return &_impl_.cell_coordinate_object_pair_;
}
inline const ::TSCE::CellCoordinateObjectPairArchive& CellCoordinateObjectMapArchive::_internal_cell_coordinate_object_pair(int index) const {
  return _impl_.cell_coordinate_object_pair_.Get(index);
}
inline const ::TSCE::CellCoordinateObjectPairArchive& CellCoordinateObjectMapArchive::cell_coordinate_object_pair(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.CellCoordinateObjectMapArchive.cell_coordinate_object_pair)
  return _internal_cell_coordinate_object_pair(index);
}
inline ::TSCE::CellCoordinateObjectPairArchive* CellCoordinateObjectMapArchive::_internal_add_cell_coordinate_object_pair() {
  return _impl_.cell_coordinate_object_pair_.Add();
}
inline ::TSCE::CellCoordinateObjectPairArchive* CellCoordinateObjectMapArchive::add_cell_coordinate_object_pair() {
  ::TSCE::CellCoordinateObjectPairArchive* _add = _internal_add_cell_coordinate_object_pair();
  // @@protoc_insertion_point(field_add:TSCE.CellCoordinateObjectMapArchive.cell_coordinate_object_pair)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateObjectPairArchive >&
CellCoordinateObjectMapArchive::cell_coordinate_object_pair() const {
  // @@protoc_insertion_point(field_list:TSCE.CellCoordinateObjectMapArchive.cell_coordinate_object_pair)
  return _impl_.cell_coordinate_object_pair_;
}

// -------------------------------------------------------------------

// OwnerFormulaMapArchive

// repeated .TSCE.CellCoordinateFormulaPairArchive coordinate_formula_pair = 1;
inline int OwnerFormulaMapArchive::_internal_coordinate_formula_pair_size() const {
  return _impl_.coordinate_formula_pair_.size();
}
inline int OwnerFormulaMapArchive::coordinate_formula_pair_size() const {
  return _internal_coordinate_formula_pair_size();
}
inline void OwnerFormulaMapArchive::clear_coordinate_formula_pair() {
  _impl_.coordinate_formula_pair_.Clear();
}
inline ::TSCE::CellCoordinateFormulaPairArchive* OwnerFormulaMapArchive::mutable_coordinate_formula_pair(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.OwnerFormulaMapArchive.coordinate_formula_pair)
  return _impl_.coordinate_formula_pair_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateFormulaPairArchive >*
OwnerFormulaMapArchive::mutable_coordinate_formula_pair() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.OwnerFormulaMapArchive.coordinate_formula_pair)
  return &_impl_.coordinate_formula_pair_;
}
inline const ::TSCE::CellCoordinateFormulaPairArchive& OwnerFormulaMapArchive::_internal_coordinate_formula_pair(int index) const {
  return _impl_.coordinate_formula_pair_.Get(index);
}
inline const ::TSCE::CellCoordinateFormulaPairArchive& OwnerFormulaMapArchive::coordinate_formula_pair(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.OwnerFormulaMapArchive.coordinate_formula_pair)
  return _internal_coordinate_formula_pair(index);
}
inline ::TSCE::CellCoordinateFormulaPairArchive* OwnerFormulaMapArchive::_internal_add_coordinate_formula_pair() {
  return _impl_.coordinate_formula_pair_.Add();
}
inline ::TSCE::CellCoordinateFormulaPairArchive* OwnerFormulaMapArchive::add_coordinate_formula_pair() {
  ::TSCE::CellCoordinateFormulaPairArchive* _add = _internal_add_coordinate_formula_pair();
  // @@protoc_insertion_point(field_add:TSCE.OwnerFormulaMapArchive.coordinate_formula_pair)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateFormulaPairArchive >&
OwnerFormulaMapArchive::coordinate_formula_pair() const {
  // @@protoc_insertion_point(field_list:TSCE.OwnerFormulaMapArchive.coordinate_formula_pair)
  return _impl_.coordinate_formula_pair_;
}

// -------------------------------------------------------------------

// FormulaRewriteCommandArchive

// optional .TSP.Reference table_rewrite_command = 1;
inline bool FormulaRewriteCommandArchive::_internal_has_table_rewrite_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.table_rewrite_command_ != nullptr);
  return value;
}
inline bool FormulaRewriteCommandArchive::has_table_rewrite_command() const {
  return _internal_has_table_rewrite_command();
}
inline const ::TSP::Reference& FormulaRewriteCommandArchive::_internal_table_rewrite_command() const {
  const ::TSP::Reference* p = _impl_.table_rewrite_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& FormulaRewriteCommandArchive::table_rewrite_command() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaRewriteCommandArchive.table_rewrite_command)
  return _internal_table_rewrite_command();
}
inline void FormulaRewriteCommandArchive::unsafe_arena_set_allocated_table_rewrite_command(
    ::TSP::Reference* table_rewrite_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_rewrite_command_);
  }
  _impl_.table_rewrite_command_ = table_rewrite_command;
  if (table_rewrite_command) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaRewriteCommandArchive.table_rewrite_command)
}
inline ::TSP::Reference* FormulaRewriteCommandArchive::release_table_rewrite_command() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.table_rewrite_command_;
  _impl_.table_rewrite_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* FormulaRewriteCommandArchive::unsafe_arena_release_table_rewrite_command() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaRewriteCommandArchive.table_rewrite_command)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.table_rewrite_command_;
  _impl_.table_rewrite_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* FormulaRewriteCommandArchive::_internal_mutable_table_rewrite_command() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.table_rewrite_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.table_rewrite_command_ = p;
  }
  return _impl_.table_rewrite_command_;
}
inline ::TSP::Reference* FormulaRewriteCommandArchive::mutable_table_rewrite_command() {
  ::TSP::Reference* _msg = _internal_mutable_table_rewrite_command();
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaRewriteCommandArchive.table_rewrite_command)
  return _msg;
}
inline void FormulaRewriteCommandArchive::set_allocated_table_rewrite_command(::TSP::Reference* table_rewrite_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_rewrite_command_);
  }
  if (table_rewrite_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_rewrite_command));
    if (message_arena != submessage_arena) {
      table_rewrite_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_rewrite_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.table_rewrite_command_ = table_rewrite_command;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaRewriteCommandArchive.table_rewrite_command)
}

// optional .TSK.CommandArchive super = 2;
inline bool FormulaRewriteCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool FormulaRewriteCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& FormulaRewriteCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& FormulaRewriteCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaRewriteCommandArchive.super)
  return _internal_super();
}
inline void FormulaRewriteCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaRewriteCommandArchive.super)
}
inline ::TSK::CommandArchive* FormulaRewriteCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* FormulaRewriteCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaRewriteCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* FormulaRewriteCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* FormulaRewriteCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaRewriteCommandArchive.super)
  return _msg;
}
inline void FormulaRewriteCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaRewriteCommandArchive.super)
}

// -------------------------------------------------------------------

// NumberTrackedReferencePairArchive

// required uint32 number = 1;
inline bool NumberTrackedReferencePairArchive::_internal_has_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NumberTrackedReferencePairArchive::has_number() const {
  return _internal_has_number();
}
inline void NumberTrackedReferencePairArchive::clear_number() {
  _impl_.number_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t NumberTrackedReferencePairArchive::_internal_number() const {
  return _impl_.number_;
}
inline uint32_t NumberTrackedReferencePairArchive::number() const {
  // @@protoc_insertion_point(field_get:TSCE.NumberTrackedReferencePairArchive.number)
  return _internal_number();
}
inline void NumberTrackedReferencePairArchive::_internal_set_number(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.number_ = value;
}
inline void NumberTrackedReferencePairArchive::set_number(uint32_t value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:TSCE.NumberTrackedReferencePairArchive.number)
}

// optional .TSP.Reference tracked_reference = 2;
inline bool NumberTrackedReferencePairArchive::_internal_has_tracked_reference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tracked_reference_ != nullptr);
  return value;
}
inline bool NumberTrackedReferencePairArchive::has_tracked_reference() const {
  return _internal_has_tracked_reference();
}
inline const ::TSP::Reference& NumberTrackedReferencePairArchive::_internal_tracked_reference() const {
  const ::TSP::Reference* p = _impl_.tracked_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& NumberTrackedReferencePairArchive::tracked_reference() const {
  // @@protoc_insertion_point(field_get:TSCE.NumberTrackedReferencePairArchive.tracked_reference)
  return _internal_tracked_reference();
}
inline void NumberTrackedReferencePairArchive::unsafe_arena_set_allocated_tracked_reference(
    ::TSP::Reference* tracked_reference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tracked_reference_);
  }
  _impl_.tracked_reference_ = tracked_reference;
  if (tracked_reference) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.NumberTrackedReferencePairArchive.tracked_reference)
}
inline ::TSP::Reference* NumberTrackedReferencePairArchive::release_tracked_reference() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.tracked_reference_;
  _impl_.tracked_reference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* NumberTrackedReferencePairArchive::unsafe_arena_release_tracked_reference() {
  // @@protoc_insertion_point(field_release:TSCE.NumberTrackedReferencePairArchive.tracked_reference)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.tracked_reference_;
  _impl_.tracked_reference_ = nullptr;
  return temp;
}
inline ::TSP::Reference* NumberTrackedReferencePairArchive::_internal_mutable_tracked_reference() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tracked_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.tracked_reference_ = p;
  }
  return _impl_.tracked_reference_;
}
inline ::TSP::Reference* NumberTrackedReferencePairArchive::mutable_tracked_reference() {
  ::TSP::Reference* _msg = _internal_mutable_tracked_reference();
  // @@protoc_insertion_point(field_mutable:TSCE.NumberTrackedReferencePairArchive.tracked_reference)
  return _msg;
}
inline void NumberTrackedReferencePairArchive::set_allocated_tracked_reference(::TSP::Reference* tracked_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tracked_reference_);
  }
  if (tracked_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tracked_reference));
    if (message_arena != submessage_arena) {
      tracked_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracked_reference, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tracked_reference_ = tracked_reference;
  // @@protoc_insertion_point(field_set_allocated:TSCE.NumberTrackedReferencePairArchive.tracked_reference)
}

// -------------------------------------------------------------------

// NumberToTrackedReferenceMapArchive

// repeated .TSCE.NumberTrackedReferencePairArchive number_tracked_reference_pair = 1;
inline int NumberToTrackedReferenceMapArchive::_internal_number_tracked_reference_pair_size() const {
  return _impl_.number_tracked_reference_pair_.size();
}
inline int NumberToTrackedReferenceMapArchive::number_tracked_reference_pair_size() const {
  return _internal_number_tracked_reference_pair_size();
}
inline void NumberToTrackedReferenceMapArchive::clear_number_tracked_reference_pair() {
  _impl_.number_tracked_reference_pair_.Clear();
}
inline ::TSCE::NumberTrackedReferencePairArchive* NumberToTrackedReferenceMapArchive::mutable_number_tracked_reference_pair(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.NumberToTrackedReferenceMapArchive.number_tracked_reference_pair)
  return _impl_.number_tracked_reference_pair_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::NumberTrackedReferencePairArchive >*
NumberToTrackedReferenceMapArchive::mutable_number_tracked_reference_pair() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.NumberToTrackedReferenceMapArchive.number_tracked_reference_pair)
  return &_impl_.number_tracked_reference_pair_;
}
inline const ::TSCE::NumberTrackedReferencePairArchive& NumberToTrackedReferenceMapArchive::_internal_number_tracked_reference_pair(int index) const {
  return _impl_.number_tracked_reference_pair_.Get(index);
}
inline const ::TSCE::NumberTrackedReferencePairArchive& NumberToTrackedReferenceMapArchive::number_tracked_reference_pair(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.NumberToTrackedReferenceMapArchive.number_tracked_reference_pair)
  return _internal_number_tracked_reference_pair(index);
}
inline ::TSCE::NumberTrackedReferencePairArchive* NumberToTrackedReferenceMapArchive::_internal_add_number_tracked_reference_pair() {
  return _impl_.number_tracked_reference_pair_.Add();
}
inline ::TSCE::NumberTrackedReferencePairArchive* NumberToTrackedReferenceMapArchive::add_number_tracked_reference_pair() {
  ::TSCE::NumberTrackedReferencePairArchive* _add = _internal_add_number_tracked_reference_pair();
  // @@protoc_insertion_point(field_add:TSCE.NumberToTrackedReferenceMapArchive.number_tracked_reference_pair)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::NumberTrackedReferencePairArchive >&
NumberToTrackedReferenceMapArchive::number_tracked_reference_pair() const {
  // @@protoc_insertion_point(field_list:TSCE.NumberToTrackedReferenceMapArchive.number_tracked_reference_pair)
  return _impl_.number_tracked_reference_pair_;
}

// -------------------------------------------------------------------

// TrackedReferencesRewriteCommandArchive

// optional .TSCE.NumberToTrackedReferenceMapArchive references_in_reference_tracker = 1 [deprecated = true];
inline bool TrackedReferencesRewriteCommandArchive::_internal_has_references_in_reference_tracker() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.references_in_reference_tracker_ != nullptr);
  return value;
}
inline bool TrackedReferencesRewriteCommandArchive::has_references_in_reference_tracker() const {
  return _internal_has_references_in_reference_tracker();
}
inline void TrackedReferencesRewriteCommandArchive::clear_references_in_reference_tracker() {
  if (_impl_.references_in_reference_tracker_ != nullptr) _impl_.references_in_reference_tracker_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::NumberToTrackedReferenceMapArchive& TrackedReferencesRewriteCommandArchive::_internal_references_in_reference_tracker() const {
  const ::TSCE::NumberToTrackedReferenceMapArchive* p = _impl_.references_in_reference_tracker_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::NumberToTrackedReferenceMapArchive&>(
      ::TSCE::_NumberToTrackedReferenceMapArchive_default_instance_);
}
inline const ::TSCE::NumberToTrackedReferenceMapArchive& TrackedReferencesRewriteCommandArchive::references_in_reference_tracker() const {
  // @@protoc_insertion_point(field_get:TSCE.TrackedReferencesRewriteCommandArchive.references_in_reference_tracker)
  return _internal_references_in_reference_tracker();
}
inline void TrackedReferencesRewriteCommandArchive::unsafe_arena_set_allocated_references_in_reference_tracker(
    ::TSCE::NumberToTrackedReferenceMapArchive* references_in_reference_tracker) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.references_in_reference_tracker_);
  }
  _impl_.references_in_reference_tracker_ = references_in_reference_tracker;
  if (references_in_reference_tracker) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.TrackedReferencesRewriteCommandArchive.references_in_reference_tracker)
}
inline ::TSCE::NumberToTrackedReferenceMapArchive* TrackedReferencesRewriteCommandArchive::release_references_in_reference_tracker() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::NumberToTrackedReferenceMapArchive* temp = _impl_.references_in_reference_tracker_;
  _impl_.references_in_reference_tracker_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::NumberToTrackedReferenceMapArchive* TrackedReferencesRewriteCommandArchive::unsafe_arena_release_references_in_reference_tracker() {
  // @@protoc_insertion_point(field_release:TSCE.TrackedReferencesRewriteCommandArchive.references_in_reference_tracker)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::NumberToTrackedReferenceMapArchive* temp = _impl_.references_in_reference_tracker_;
  _impl_.references_in_reference_tracker_ = nullptr;
  return temp;
}
inline ::TSCE::NumberToTrackedReferenceMapArchive* TrackedReferencesRewriteCommandArchive::_internal_mutable_references_in_reference_tracker() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.references_in_reference_tracker_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::NumberToTrackedReferenceMapArchive>(GetArenaForAllocation());
    _impl_.references_in_reference_tracker_ = p;
  }
  return _impl_.references_in_reference_tracker_;
}
inline ::TSCE::NumberToTrackedReferenceMapArchive* TrackedReferencesRewriteCommandArchive::mutable_references_in_reference_tracker() {
  ::TSCE::NumberToTrackedReferenceMapArchive* _msg = _internal_mutable_references_in_reference_tracker();
  // @@protoc_insertion_point(field_mutable:TSCE.TrackedReferencesRewriteCommandArchive.references_in_reference_tracker)
  return _msg;
}
inline void TrackedReferencesRewriteCommandArchive::set_allocated_references_in_reference_tracker(::TSCE::NumberToTrackedReferenceMapArchive* references_in_reference_tracker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.references_in_reference_tracker_;
  }
  if (references_in_reference_tracker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(references_in_reference_tracker);
    if (message_arena != submessage_arena) {
      references_in_reference_tracker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, references_in_reference_tracker, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.references_in_reference_tracker_ = references_in_reference_tracker;
  // @@protoc_insertion_point(field_set_allocated:TSCE.TrackedReferencesRewriteCommandArchive.references_in_reference_tracker)
}

// optional .TSCE.NumberToTrackedReferenceMapArchive original_tracked_reference_copies = 2 [deprecated = true];
inline bool TrackedReferencesRewriteCommandArchive::_internal_has_original_tracked_reference_copies() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.original_tracked_reference_copies_ != nullptr);
  return value;
}
inline bool TrackedReferencesRewriteCommandArchive::has_original_tracked_reference_copies() const {
  return _internal_has_original_tracked_reference_copies();
}
inline void TrackedReferencesRewriteCommandArchive::clear_original_tracked_reference_copies() {
  if (_impl_.original_tracked_reference_copies_ != nullptr) _impl_.original_tracked_reference_copies_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::NumberToTrackedReferenceMapArchive& TrackedReferencesRewriteCommandArchive::_internal_original_tracked_reference_copies() const {
  const ::TSCE::NumberToTrackedReferenceMapArchive* p = _impl_.original_tracked_reference_copies_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::NumberToTrackedReferenceMapArchive&>(
      ::TSCE::_NumberToTrackedReferenceMapArchive_default_instance_);
}
inline const ::TSCE::NumberToTrackedReferenceMapArchive& TrackedReferencesRewriteCommandArchive::original_tracked_reference_copies() const {
  // @@protoc_insertion_point(field_get:TSCE.TrackedReferencesRewriteCommandArchive.original_tracked_reference_copies)
  return _internal_original_tracked_reference_copies();
}
inline void TrackedReferencesRewriteCommandArchive::unsafe_arena_set_allocated_original_tracked_reference_copies(
    ::TSCE::NumberToTrackedReferenceMapArchive* original_tracked_reference_copies) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.original_tracked_reference_copies_);
  }
  _impl_.original_tracked_reference_copies_ = original_tracked_reference_copies;
  if (original_tracked_reference_copies) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.TrackedReferencesRewriteCommandArchive.original_tracked_reference_copies)
}
inline ::TSCE::NumberToTrackedReferenceMapArchive* TrackedReferencesRewriteCommandArchive::release_original_tracked_reference_copies() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::NumberToTrackedReferenceMapArchive* temp = _impl_.original_tracked_reference_copies_;
  _impl_.original_tracked_reference_copies_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::NumberToTrackedReferenceMapArchive* TrackedReferencesRewriteCommandArchive::unsafe_arena_release_original_tracked_reference_copies() {
  // @@protoc_insertion_point(field_release:TSCE.TrackedReferencesRewriteCommandArchive.original_tracked_reference_copies)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::NumberToTrackedReferenceMapArchive* temp = _impl_.original_tracked_reference_copies_;
  _impl_.original_tracked_reference_copies_ = nullptr;
  return temp;
}
inline ::TSCE::NumberToTrackedReferenceMapArchive* TrackedReferencesRewriteCommandArchive::_internal_mutable_original_tracked_reference_copies() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.original_tracked_reference_copies_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::NumberToTrackedReferenceMapArchive>(GetArenaForAllocation());
    _impl_.original_tracked_reference_copies_ = p;
  }
  return _impl_.original_tracked_reference_copies_;
}
inline ::TSCE::NumberToTrackedReferenceMapArchive* TrackedReferencesRewriteCommandArchive::mutable_original_tracked_reference_copies() {
  ::TSCE::NumberToTrackedReferenceMapArchive* _msg = _internal_mutable_original_tracked_reference_copies();
  // @@protoc_insertion_point(field_mutable:TSCE.TrackedReferencesRewriteCommandArchive.original_tracked_reference_copies)
  return _msg;
}
inline void TrackedReferencesRewriteCommandArchive::set_allocated_original_tracked_reference_copies(::TSCE::NumberToTrackedReferenceMapArchive* original_tracked_reference_copies) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.original_tracked_reference_copies_;
  }
  if (original_tracked_reference_copies) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(original_tracked_reference_copies);
    if (message_arena != submessage_arena) {
      original_tracked_reference_copies = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_tracked_reference_copies, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.original_tracked_reference_copies_ = original_tracked_reference_copies;
  // @@protoc_insertion_point(field_set_allocated:TSCE.TrackedReferencesRewriteCommandArchive.original_tracked_reference_copies)
}

// optional .TSCE.FormulaRewriteSpecArchive rewrite_spec = 3;
inline bool TrackedReferencesRewriteCommandArchive::_internal_has_rewrite_spec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rewrite_spec_ != nullptr);
  return value;
}
inline bool TrackedReferencesRewriteCommandArchive::has_rewrite_spec() const {
  return _internal_has_rewrite_spec();
}
inline void TrackedReferencesRewriteCommandArchive::clear_rewrite_spec() {
  if (_impl_.rewrite_spec_ != nullptr) _impl_.rewrite_spec_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCE::FormulaRewriteSpecArchive& TrackedReferencesRewriteCommandArchive::_internal_rewrite_spec() const {
  const ::TSCE::FormulaRewriteSpecArchive* p = _impl_.rewrite_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::FormulaRewriteSpecArchive&>(
      ::TSCE::_FormulaRewriteSpecArchive_default_instance_);
}
inline const ::TSCE::FormulaRewriteSpecArchive& TrackedReferencesRewriteCommandArchive::rewrite_spec() const {
  // @@protoc_insertion_point(field_get:TSCE.TrackedReferencesRewriteCommandArchive.rewrite_spec)
  return _internal_rewrite_spec();
}
inline void TrackedReferencesRewriteCommandArchive::unsafe_arena_set_allocated_rewrite_spec(
    ::TSCE::FormulaRewriteSpecArchive* rewrite_spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rewrite_spec_);
  }
  _impl_.rewrite_spec_ = rewrite_spec;
  if (rewrite_spec) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.TrackedReferencesRewriteCommandArchive.rewrite_spec)
}
inline ::TSCE::FormulaRewriteSpecArchive* TrackedReferencesRewriteCommandArchive::release_rewrite_spec() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::FormulaRewriteSpecArchive* temp = _impl_.rewrite_spec_;
  _impl_.rewrite_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::FormulaRewriteSpecArchive* TrackedReferencesRewriteCommandArchive::unsafe_arena_release_rewrite_spec() {
  // @@protoc_insertion_point(field_release:TSCE.TrackedReferencesRewriteCommandArchive.rewrite_spec)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::FormulaRewriteSpecArchive* temp = _impl_.rewrite_spec_;
  _impl_.rewrite_spec_ = nullptr;
  return temp;
}
inline ::TSCE::FormulaRewriteSpecArchive* TrackedReferencesRewriteCommandArchive::_internal_mutable_rewrite_spec() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.rewrite_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::FormulaRewriteSpecArchive>(GetArenaForAllocation());
    _impl_.rewrite_spec_ = p;
  }
  return _impl_.rewrite_spec_;
}
inline ::TSCE::FormulaRewriteSpecArchive* TrackedReferencesRewriteCommandArchive::mutable_rewrite_spec() {
  ::TSCE::FormulaRewriteSpecArchive* _msg = _internal_mutable_rewrite_spec();
  // @@protoc_insertion_point(field_mutable:TSCE.TrackedReferencesRewriteCommandArchive.rewrite_spec)
  return _msg;
}
inline void TrackedReferencesRewriteCommandArchive::set_allocated_rewrite_spec(::TSCE::FormulaRewriteSpecArchive* rewrite_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rewrite_spec_;
  }
  if (rewrite_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rewrite_spec);
    if (message_arena != submessage_arena) {
      rewrite_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rewrite_spec, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.rewrite_spec_ = rewrite_spec;
  // @@protoc_insertion_point(field_set_allocated:TSCE.TrackedReferencesRewriteCommandArchive.rewrite_spec)
}

// required .TSP.Reference reference_tracker = 4;
inline bool TrackedReferencesRewriteCommandArchive::_internal_has_reference_tracker() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reference_tracker_ != nullptr);
  return value;
}
inline bool TrackedReferencesRewriteCommandArchive::has_reference_tracker() const {
  return _internal_has_reference_tracker();
}
inline const ::TSP::Reference& TrackedReferencesRewriteCommandArchive::_internal_reference_tracker() const {
  const ::TSP::Reference* p = _impl_.reference_tracker_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TrackedReferencesRewriteCommandArchive::reference_tracker() const {
  // @@protoc_insertion_point(field_get:TSCE.TrackedReferencesRewriteCommandArchive.reference_tracker)
  return _internal_reference_tracker();
}
inline void TrackedReferencesRewriteCommandArchive::unsafe_arena_set_allocated_reference_tracker(
    ::TSP::Reference* reference_tracker) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reference_tracker_);
  }
  _impl_.reference_tracker_ = reference_tracker;
  if (reference_tracker) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.TrackedReferencesRewriteCommandArchive.reference_tracker)
}
inline ::TSP::Reference* TrackedReferencesRewriteCommandArchive::release_reference_tracker() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.reference_tracker_;
  _impl_.reference_tracker_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* TrackedReferencesRewriteCommandArchive::unsafe_arena_release_reference_tracker() {
  // @@protoc_insertion_point(field_release:TSCE.TrackedReferencesRewriteCommandArchive.reference_tracker)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.reference_tracker_;
  _impl_.reference_tracker_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TrackedReferencesRewriteCommandArchive::_internal_mutable_reference_tracker() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.reference_tracker_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.reference_tracker_ = p;
  }
  return _impl_.reference_tracker_;
}
inline ::TSP::Reference* TrackedReferencesRewriteCommandArchive::mutable_reference_tracker() {
  ::TSP::Reference* _msg = _internal_mutable_reference_tracker();
  // @@protoc_insertion_point(field_mutable:TSCE.TrackedReferencesRewriteCommandArchive.reference_tracker)
  return _msg;
}
inline void TrackedReferencesRewriteCommandArchive::set_allocated_reference_tracker(::TSP::Reference* reference_tracker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reference_tracker_);
  }
  if (reference_tracker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_tracker));
    if (message_arena != submessage_arena) {
      reference_tracker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference_tracker, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.reference_tracker_ = reference_tracker;
  // @@protoc_insertion_point(field_set_allocated:TSCE.TrackedReferencesRewriteCommandArchive.reference_tracker)
}

// required .TSK.CommandArchive super = 5;
inline bool TrackedReferencesRewriteCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool TrackedReferencesRewriteCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& TrackedReferencesRewriteCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& TrackedReferencesRewriteCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCE.TrackedReferencesRewriteCommandArchive.super)
  return _internal_super();
}
inline void TrackedReferencesRewriteCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.TrackedReferencesRewriteCommandArchive.super)
}
inline ::TSK::CommandArchive* TrackedReferencesRewriteCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* TrackedReferencesRewriteCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCE.TrackedReferencesRewriteCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* TrackedReferencesRewriteCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* TrackedReferencesRewriteCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCE.TrackedReferencesRewriteCommandArchive.super)
  return _msg;
}
inline void TrackedReferencesRewriteCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCE.TrackedReferencesRewriteCommandArchive.super)
}

// -------------------------------------------------------------------

// TrackedReferenceArchive

// required .TSCE.ASTNodeArrayArchive ast = 1;
inline bool TrackedReferenceArchive::_internal_has_ast() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ast_ != nullptr);
  return value;
}
inline bool TrackedReferenceArchive::has_ast() const {
  return _internal_has_ast();
}
inline void TrackedReferenceArchive::clear_ast() {
  if (_impl_.ast_ != nullptr) _impl_.ast_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::ASTNodeArrayArchive& TrackedReferenceArchive::_internal_ast() const {
  const ::TSCE::ASTNodeArrayArchive* p = _impl_.ast_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ASTNodeArrayArchive&>(
      ::TSCE::_ASTNodeArrayArchive_default_instance_);
}
inline const ::TSCE::ASTNodeArrayArchive& TrackedReferenceArchive::ast() const {
  // @@protoc_insertion_point(field_get:TSCE.TrackedReferenceArchive.ast)
  return _internal_ast();
}
inline void TrackedReferenceArchive::unsafe_arena_set_allocated_ast(
    ::TSCE::ASTNodeArrayArchive* ast) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ast_);
  }
  _impl_.ast_ = ast;
  if (ast) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.TrackedReferenceArchive.ast)
}
inline ::TSCE::ASTNodeArrayArchive* TrackedReferenceArchive::release_ast() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::ASTNodeArrayArchive* temp = _impl_.ast_;
  _impl_.ast_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive* TrackedReferenceArchive::unsafe_arena_release_ast() {
  // @@protoc_insertion_point(field_release:TSCE.TrackedReferenceArchive.ast)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::ASTNodeArrayArchive* temp = _impl_.ast_;
  _impl_.ast_ = nullptr;
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive* TrackedReferenceArchive::_internal_mutable_ast() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ast_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ASTNodeArrayArchive>(GetArenaForAllocation());
    _impl_.ast_ = p;
  }
  return _impl_.ast_;
}
inline ::TSCE::ASTNodeArrayArchive* TrackedReferenceArchive::mutable_ast() {
  ::TSCE::ASTNodeArrayArchive* _msg = _internal_mutable_ast();
  // @@protoc_insertion_point(field_mutable:TSCE.TrackedReferenceArchive.ast)
  return _msg;
}
inline void TrackedReferenceArchive::set_allocated_ast(::TSCE::ASTNodeArrayArchive* ast) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ast_;
  }
  if (ast) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ast);
    if (message_arena != submessage_arena) {
      ast = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ast, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ast_ = ast;
  // @@protoc_insertion_point(field_set_allocated:TSCE.TrackedReferenceArchive.ast)
}

// required uint32 formula_id = 2;
inline bool TrackedReferenceArchive::_internal_has_formula_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrackedReferenceArchive::has_formula_id() const {
  return _internal_has_formula_id();
}
inline void TrackedReferenceArchive::clear_formula_id() {
  _impl_.formula_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t TrackedReferenceArchive::_internal_formula_id() const {
  return _impl_.formula_id_;
}
inline uint32_t TrackedReferenceArchive::formula_id() const {
  // @@protoc_insertion_point(field_get:TSCE.TrackedReferenceArchive.formula_id)
  return _internal_formula_id();
}
inline void TrackedReferenceArchive::_internal_set_formula_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.formula_id_ = value;
}
inline void TrackedReferenceArchive::set_formula_id(uint32_t value) {
  _internal_set_formula_id(value);
  // @@protoc_insertion_point(field_set:TSCE.TrackedReferenceArchive.formula_id)
}

// -------------------------------------------------------------------

// ReferenceTrackerArchive

// required .TSCE.CFUUIDArchive uuid = 1;
inline bool ReferenceTrackerArchive::_internal_has_uuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.uuid_ != nullptr);
  return value;
}
inline bool ReferenceTrackerArchive::has_uuid() const {
  return _internal_has_uuid();
}
inline void ReferenceTrackerArchive::clear_uuid() {
  if (_impl_.uuid_ != nullptr) _impl_.uuid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::CFUUIDArchive& ReferenceTrackerArchive::_internal_uuid() const {
  const ::TSCE::CFUUIDArchive* p = _impl_.uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CFUUIDArchive&>(
      ::TSCE::_CFUUIDArchive_default_instance_);
}
inline const ::TSCE::CFUUIDArchive& ReferenceTrackerArchive::uuid() const {
  // @@protoc_insertion_point(field_get:TSCE.ReferenceTrackerArchive.uuid)
  return _internal_uuid();
}
inline void ReferenceTrackerArchive::unsafe_arena_set_allocated_uuid(
    ::TSCE::CFUUIDArchive* uuid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uuid_);
  }
  _impl_.uuid_ = uuid;
  if (uuid) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ReferenceTrackerArchive.uuid)
}
inline ::TSCE::CFUUIDArchive* ReferenceTrackerArchive::release_uuid() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::CFUUIDArchive* temp = _impl_.uuid_;
  _impl_.uuid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CFUUIDArchive* ReferenceTrackerArchive::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_release:TSCE.ReferenceTrackerArchive.uuid)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::CFUUIDArchive* temp = _impl_.uuid_;
  _impl_.uuid_ = nullptr;
  return temp;
}
inline ::TSCE::CFUUIDArchive* ReferenceTrackerArchive::_internal_mutable_uuid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CFUUIDArchive>(GetArenaForAllocation());
    _impl_.uuid_ = p;
  }
  return _impl_.uuid_;
}
inline ::TSCE::CFUUIDArchive* ReferenceTrackerArchive::mutable_uuid() {
  ::TSCE::CFUUIDArchive* _msg = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:TSCE.ReferenceTrackerArchive.uuid)
  return _msg;
}
inline void ReferenceTrackerArchive::set_allocated_uuid(::TSCE::CFUUIDArchive* uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.uuid_;
  }
  if (uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(uuid);
    if (message_arena != submessage_arena) {
      uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.uuid_ = uuid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ReferenceTrackerArchive.uuid)
}

// repeated .TSP.Reference tracked_reference = 2 [deprecated = true];
inline int ReferenceTrackerArchive::_internal_tracked_reference_size() const {
  return _impl_.tracked_reference_.size();
}
inline int ReferenceTrackerArchive::tracked_reference_size() const {
  return _internal_tracked_reference_size();
}
inline ::TSP::Reference* ReferenceTrackerArchive::mutable_tracked_reference(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.ReferenceTrackerArchive.tracked_reference)
  return _impl_.tracked_reference_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ReferenceTrackerArchive::mutable_tracked_reference() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.ReferenceTrackerArchive.tracked_reference)
  return &_impl_.tracked_reference_;
}
inline const ::TSP::Reference& ReferenceTrackerArchive::_internal_tracked_reference(int index) const {
  return _impl_.tracked_reference_.Get(index);
}
inline const ::TSP::Reference& ReferenceTrackerArchive::tracked_reference(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.ReferenceTrackerArchive.tracked_reference)
  return _internal_tracked_reference(index);
}
inline ::TSP::Reference* ReferenceTrackerArchive::_internal_add_tracked_reference() {
  return _impl_.tracked_reference_.Add();
}
inline ::TSP::Reference* ReferenceTrackerArchive::add_tracked_reference() {
  ::TSP::Reference* _add = _internal_add_tracked_reference();
  // @@protoc_insertion_point(field_add:TSCE.ReferenceTrackerArchive.tracked_reference)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ReferenceTrackerArchive::tracked_reference() const {
  // @@protoc_insertion_point(field_list:TSCE.ReferenceTrackerArchive.tracked_reference)
  return _impl_.tracked_reference_;
}

// repeated .TSCE.TrackedReferenceArchive contained_tracked_reference = 3;
inline int ReferenceTrackerArchive::_internal_contained_tracked_reference_size() const {
  return _impl_.contained_tracked_reference_.size();
}
inline int ReferenceTrackerArchive::contained_tracked_reference_size() const {
  return _internal_contained_tracked_reference_size();
}
inline void ReferenceTrackerArchive::clear_contained_tracked_reference() {
  _impl_.contained_tracked_reference_.Clear();
}
inline ::TSCE::TrackedReferenceArchive* ReferenceTrackerArchive::mutable_contained_tracked_reference(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.ReferenceTrackerArchive.contained_tracked_reference)
  return _impl_.contained_tracked_reference_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::TrackedReferenceArchive >*
ReferenceTrackerArchive::mutable_contained_tracked_reference() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.ReferenceTrackerArchive.contained_tracked_reference)
  return &_impl_.contained_tracked_reference_;
}
inline const ::TSCE::TrackedReferenceArchive& ReferenceTrackerArchive::_internal_contained_tracked_reference(int index) const {
  return _impl_.contained_tracked_reference_.Get(index);
}
inline const ::TSCE::TrackedReferenceArchive& ReferenceTrackerArchive::contained_tracked_reference(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.ReferenceTrackerArchive.contained_tracked_reference)
  return _internal_contained_tracked_reference(index);
}
inline ::TSCE::TrackedReferenceArchive* ReferenceTrackerArchive::_internal_add_contained_tracked_reference() {
  return _impl_.contained_tracked_reference_.Add();
}
inline ::TSCE::TrackedReferenceArchive* ReferenceTrackerArchive::add_contained_tracked_reference() {
  ::TSCE::TrackedReferenceArchive* _add = _internal_add_contained_tracked_reference();
  // @@protoc_insertion_point(field_add:TSCE.ReferenceTrackerArchive.contained_tracked_reference)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::TrackedReferenceArchive >&
ReferenceTrackerArchive::contained_tracked_reference() const {
  // @@protoc_insertion_point(field_list:TSCE.ReferenceTrackerArchive.contained_tracked_reference)
  return _impl_.contained_tracked_reference_;
}

// -------------------------------------------------------------------

// BooleanCellValueArchive

// required bool value = 1;
inline bool BooleanCellValueArchive::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BooleanCellValueArchive::has_value() const {
  return _internal_has_value();
}
inline void BooleanCellValueArchive::clear_value() {
  _impl_.value_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool BooleanCellValueArchive::_internal_value() const {
  return _impl_.value_;
}
inline bool BooleanCellValueArchive::value() const {
  // @@protoc_insertion_point(field_get:TSCE.BooleanCellValueArchive.value)
  return _internal_value();
}
inline void BooleanCellValueArchive::_internal_set_value(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.value_ = value;
}
inline void BooleanCellValueArchive::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TSCE.BooleanCellValueArchive.value)
}

// -------------------------------------------------------------------

// DateCellValueArchive

// required double value = 1;
inline bool DateCellValueArchive::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DateCellValueArchive::has_value() const {
  return _internal_has_value();
}
inline void DateCellValueArchive::clear_value() {
  _impl_.value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double DateCellValueArchive::_internal_value() const {
  return _impl_.value_;
}
inline double DateCellValueArchive::value() const {
  // @@protoc_insertion_point(field_get:TSCE.DateCellValueArchive.value)
  return _internal_value();
}
inline void DateCellValueArchive::_internal_set_value(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_ = value;
}
inline void DateCellValueArchive::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TSCE.DateCellValueArchive.value)
}

// required .TSK.FormatStructArchive format = 2;
inline bool DateCellValueArchive::_internal_has_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.format_ != nullptr);
  return value;
}
inline bool DateCellValueArchive::has_format() const {
  return _internal_has_format();
}
inline const ::TSK::FormatStructArchive& DateCellValueArchive::_internal_format() const {
  const ::TSK::FormatStructArchive* p = _impl_.format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& DateCellValueArchive::format() const {
  // @@protoc_insertion_point(field_get:TSCE.DateCellValueArchive.format)
  return _internal_format();
}
inline void DateCellValueArchive::unsafe_arena_set_allocated_format(
    ::TSK::FormatStructArchive* format) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.format_);
  }
  _impl_.format_ = format;
  if (format) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.DateCellValueArchive.format)
}
inline ::TSK::FormatStructArchive* DateCellValueArchive::release_format() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::FormatStructArchive* temp = _impl_.format_;
  _impl_.format_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* DateCellValueArchive::unsafe_arena_release_format() {
  // @@protoc_insertion_point(field_release:TSCE.DateCellValueArchive.format)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::FormatStructArchive* temp = _impl_.format_;
  _impl_.format_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* DateCellValueArchive::_internal_mutable_format() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    _impl_.format_ = p;
  }
  return _impl_.format_;
}
inline ::TSK::FormatStructArchive* DateCellValueArchive::mutable_format() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_format();
  // @@protoc_insertion_point(field_mutable:TSCE.DateCellValueArchive.format)
  return _msg;
}
inline void DateCellValueArchive::set_allocated_format(::TSK::FormatStructArchive* format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.format_);
  }
  if (format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format));
    if (message_arena != submessage_arena) {
      format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, format, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.format_ = format;
  // @@protoc_insertion_point(field_set_allocated:TSCE.DateCellValueArchive.format)
}

// optional bool format_is_implicit = 3 [default = true];
inline bool DateCellValueArchive::_internal_has_format_is_implicit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DateCellValueArchive::has_format_is_implicit() const {
  return _internal_has_format_is_implicit();
}
inline void DateCellValueArchive::clear_format_is_implicit() {
  _impl_.format_is_implicit_ = true;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool DateCellValueArchive::_internal_format_is_implicit() const {
  return _impl_.format_is_implicit_;
}
inline bool DateCellValueArchive::format_is_implicit() const {
  // @@protoc_insertion_point(field_get:TSCE.DateCellValueArchive.format_is_implicit)
  return _internal_format_is_implicit();
}
inline void DateCellValueArchive::_internal_set_format_is_implicit(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.format_is_implicit_ = value;
}
inline void DateCellValueArchive::set_format_is_implicit(bool value) {
  _internal_set_format_is_implicit(value);
  // @@protoc_insertion_point(field_set:TSCE.DateCellValueArchive.format_is_implicit)
}

// -------------------------------------------------------------------

// NumberCellValueArchive

// required double value = 1;
inline bool NumberCellValueArchive::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NumberCellValueArchive::has_value() const {
  return _internal_has_value();
}
inline void NumberCellValueArchive::clear_value() {
  _impl_.value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double NumberCellValueArchive::_internal_value() const {
  return _impl_.value_;
}
inline double NumberCellValueArchive::value() const {
  // @@protoc_insertion_point(field_get:TSCE.NumberCellValueArchive.value)
  return _internal_value();
}
inline void NumberCellValueArchive::_internal_set_value(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_ = value;
}
inline void NumberCellValueArchive::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TSCE.NumberCellValueArchive.value)
}

// required int32 unit = 2;
inline bool NumberCellValueArchive::_internal_has_unit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NumberCellValueArchive::has_unit() const {
  return _internal_has_unit();
}
inline void NumberCellValueArchive::clear_unit() {
  _impl_.unit_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t NumberCellValueArchive::_internal_unit() const {
  return _impl_.unit_;
}
inline int32_t NumberCellValueArchive::unit() const {
  // @@protoc_insertion_point(field_get:TSCE.NumberCellValueArchive.unit)
  return _internal_unit();
}
inline void NumberCellValueArchive::_internal_set_unit(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.unit_ = value;
}
inline void NumberCellValueArchive::set_unit(int32_t value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:TSCE.NumberCellValueArchive.unit)
}

// required .TSK.FormatStructArchive format = 3;
inline bool NumberCellValueArchive::_internal_has_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.format_ != nullptr);
  return value;
}
inline bool NumberCellValueArchive::has_format() const {
  return _internal_has_format();
}
inline const ::TSK::FormatStructArchive& NumberCellValueArchive::_internal_format() const {
  const ::TSK::FormatStructArchive* p = _impl_.format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& NumberCellValueArchive::format() const {
  // @@protoc_insertion_point(field_get:TSCE.NumberCellValueArchive.format)
  return _internal_format();
}
inline void NumberCellValueArchive::unsafe_arena_set_allocated_format(
    ::TSK::FormatStructArchive* format) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.format_);
  }
  _impl_.format_ = format;
  if (format) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.NumberCellValueArchive.format)
}
inline ::TSK::FormatStructArchive* NumberCellValueArchive::release_format() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::FormatStructArchive* temp = _impl_.format_;
  _impl_.format_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* NumberCellValueArchive::unsafe_arena_release_format() {
  // @@protoc_insertion_point(field_release:TSCE.NumberCellValueArchive.format)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::FormatStructArchive* temp = _impl_.format_;
  _impl_.format_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* NumberCellValueArchive::_internal_mutable_format() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    _impl_.format_ = p;
  }
  return _impl_.format_;
}
inline ::TSK::FormatStructArchive* NumberCellValueArchive::mutable_format() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_format();
  // @@protoc_insertion_point(field_mutable:TSCE.NumberCellValueArchive.format)
  return _msg;
}
inline void NumberCellValueArchive::set_allocated_format(::TSK::FormatStructArchive* format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.format_);
  }
  if (format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format));
    if (message_arena != submessage_arena) {
      format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, format, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.format_ = format;
  // @@protoc_insertion_point(field_set_allocated:TSCE.NumberCellValueArchive.format)
}

// optional bool format_is_implicit = 4 [default = true];
inline bool NumberCellValueArchive::_internal_has_format_is_implicit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NumberCellValueArchive::has_format_is_implicit() const {
  return _internal_has_format_is_implicit();
}
inline void NumberCellValueArchive::clear_format_is_implicit() {
  _impl_.format_is_implicit_ = true;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool NumberCellValueArchive::_internal_format_is_implicit() const {
  return _impl_.format_is_implicit_;
}
inline bool NumberCellValueArchive::format_is_implicit() const {
  // @@protoc_insertion_point(field_get:TSCE.NumberCellValueArchive.format_is_implicit)
  return _internal_format_is_implicit();
}
inline void NumberCellValueArchive::_internal_set_format_is_implicit(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.format_is_implicit_ = value;
}
inline void NumberCellValueArchive::set_format_is_implicit(bool value) {
  _internal_set_format_is_implicit(value);
  // @@protoc_insertion_point(field_set:TSCE.NumberCellValueArchive.format_is_implicit)
}

// -------------------------------------------------------------------

// StringCellValueArchive

// required string value = 1;
inline bool StringCellValueArchive::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StringCellValueArchive::has_value() const {
  return _internal_has_value();
}
inline void StringCellValueArchive::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StringCellValueArchive::value() const {
  // @@protoc_insertion_point(field_get:TSCE.StringCellValueArchive.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringCellValueArchive::set_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCE.StringCellValueArchive.value)
}
inline std::string* StringCellValueArchive::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:TSCE.StringCellValueArchive.value)
  return _s;
}
inline const std::string& StringCellValueArchive::_internal_value() const {
  return _impl_.value_.Get();
}
inline void StringCellValueArchive::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* StringCellValueArchive::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* StringCellValueArchive::release_value() {
  // @@protoc_insertion_point(field_release:TSCE.StringCellValueArchive.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StringCellValueArchive::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCE.StringCellValueArchive.value)
}

// required .TSK.FormatStructArchive format = 2;
inline bool StringCellValueArchive::_internal_has_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.format_ != nullptr);
  return value;
}
inline bool StringCellValueArchive::has_format() const {
  return _internal_has_format();
}
inline const ::TSK::FormatStructArchive& StringCellValueArchive::_internal_format() const {
  const ::TSK::FormatStructArchive* p = _impl_.format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& StringCellValueArchive::format() const {
  // @@protoc_insertion_point(field_get:TSCE.StringCellValueArchive.format)
  return _internal_format();
}
inline void StringCellValueArchive::unsafe_arena_set_allocated_format(
    ::TSK::FormatStructArchive* format) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.format_);
  }
  _impl_.format_ = format;
  if (format) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.StringCellValueArchive.format)
}
inline ::TSK::FormatStructArchive* StringCellValueArchive::release_format() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::FormatStructArchive* temp = _impl_.format_;
  _impl_.format_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* StringCellValueArchive::unsafe_arena_release_format() {
  // @@protoc_insertion_point(field_release:TSCE.StringCellValueArchive.format)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::FormatStructArchive* temp = _impl_.format_;
  _impl_.format_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* StringCellValueArchive::_internal_mutable_format() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    _impl_.format_ = p;
  }
  return _impl_.format_;
}
inline ::TSK::FormatStructArchive* StringCellValueArchive::mutable_format() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_format();
  // @@protoc_insertion_point(field_mutable:TSCE.StringCellValueArchive.format)
  return _msg;
}
inline void StringCellValueArchive::set_allocated_format(::TSK::FormatStructArchive* format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.format_);
  }
  if (format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format));
    if (message_arena != submessage_arena) {
      format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, format, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.format_ = format;
  // @@protoc_insertion_point(field_set_allocated:TSCE.StringCellValueArchive.format)
}

// optional bool format_is_implicit = 3 [default = true];
inline bool StringCellValueArchive::_internal_has_format_is_implicit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StringCellValueArchive::has_format_is_implicit() const {
  return _internal_has_format_is_implicit();
}
inline void StringCellValueArchive::clear_format_is_implicit() {
  _impl_.format_is_implicit_ = true;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool StringCellValueArchive::_internal_format_is_implicit() const {
  return _impl_.format_is_implicit_;
}
inline bool StringCellValueArchive::format_is_implicit() const {
  // @@protoc_insertion_point(field_get:TSCE.StringCellValueArchive.format_is_implicit)
  return _internal_format_is_implicit();
}
inline void StringCellValueArchive::_internal_set_format_is_implicit(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.format_is_implicit_ = value;
}
inline void StringCellValueArchive::set_format_is_implicit(bool value) {
  _internal_set_format_is_implicit(value);
  // @@protoc_insertion_point(field_set:TSCE.StringCellValueArchive.format_is_implicit)
}

// -------------------------------------------------------------------

// CellValueArchive

// required .TSCE.CellValueArchive.CellValueType cell_value_type = 1;
inline bool CellValueArchive::_internal_has_cell_value_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CellValueArchive::has_cell_value_type() const {
  return _internal_has_cell_value_type();
}
inline void CellValueArchive::clear_cell_value_type() {
  _impl_.cell_value_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::TSCE::CellValueArchive_CellValueType CellValueArchive::_internal_cell_value_type() const {
  return static_cast< ::TSCE::CellValueArchive_CellValueType >(_impl_.cell_value_type_);
}
inline ::TSCE::CellValueArchive_CellValueType CellValueArchive::cell_value_type() const {
  // @@protoc_insertion_point(field_get:TSCE.CellValueArchive.cell_value_type)
  return _internal_cell_value_type();
}
inline void CellValueArchive::_internal_set_cell_value_type(::TSCE::CellValueArchive_CellValueType value) {
  assert(::TSCE::CellValueArchive_CellValueType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.cell_value_type_ = value;
}
inline void CellValueArchive::set_cell_value_type(::TSCE::CellValueArchive_CellValueType value) {
  _internal_set_cell_value_type(value);
  // @@protoc_insertion_point(field_set:TSCE.CellValueArchive.cell_value_type)
}

// optional .TSCE.BooleanCellValueArchive boolean_value = 2;
inline bool CellValueArchive::_internal_has_boolean_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.boolean_value_ != nullptr);
  return value;
}
inline bool CellValueArchive::has_boolean_value() const {
  return _internal_has_boolean_value();
}
inline void CellValueArchive::clear_boolean_value() {
  if (_impl_.boolean_value_ != nullptr) _impl_.boolean_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::BooleanCellValueArchive& CellValueArchive::_internal_boolean_value() const {
  const ::TSCE::BooleanCellValueArchive* p = _impl_.boolean_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::BooleanCellValueArchive&>(
      ::TSCE::_BooleanCellValueArchive_default_instance_);
}
inline const ::TSCE::BooleanCellValueArchive& CellValueArchive::boolean_value() const {
  // @@protoc_insertion_point(field_get:TSCE.CellValueArchive.boolean_value)
  return _internal_boolean_value();
}
inline void CellValueArchive::unsafe_arena_set_allocated_boolean_value(
    ::TSCE::BooleanCellValueArchive* boolean_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.boolean_value_);
  }
  _impl_.boolean_value_ = boolean_value;
  if (boolean_value) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CellValueArchive.boolean_value)
}
inline ::TSCE::BooleanCellValueArchive* CellValueArchive::release_boolean_value() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::BooleanCellValueArchive* temp = _impl_.boolean_value_;
  _impl_.boolean_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::BooleanCellValueArchive* CellValueArchive::unsafe_arena_release_boolean_value() {
  // @@protoc_insertion_point(field_release:TSCE.CellValueArchive.boolean_value)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCE::BooleanCellValueArchive* temp = _impl_.boolean_value_;
  _impl_.boolean_value_ = nullptr;
  return temp;
}
inline ::TSCE::BooleanCellValueArchive* CellValueArchive::_internal_mutable_boolean_value() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.boolean_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::BooleanCellValueArchive>(GetArenaForAllocation());
    _impl_.boolean_value_ = p;
  }
  return _impl_.boolean_value_;
}
inline ::TSCE::BooleanCellValueArchive* CellValueArchive::mutable_boolean_value() {
  ::TSCE::BooleanCellValueArchive* _msg = _internal_mutable_boolean_value();
  // @@protoc_insertion_point(field_mutable:TSCE.CellValueArchive.boolean_value)
  return _msg;
}
inline void CellValueArchive::set_allocated_boolean_value(::TSCE::BooleanCellValueArchive* boolean_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.boolean_value_;
  }
  if (boolean_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(boolean_value);
    if (message_arena != submessage_arena) {
      boolean_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boolean_value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.boolean_value_ = boolean_value;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CellValueArchive.boolean_value)
}

// optional .TSCE.DateCellValueArchive date_value = 3;
inline bool CellValueArchive::_internal_has_date_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.date_value_ != nullptr);
  return value;
}
inline bool CellValueArchive::has_date_value() const {
  return _internal_has_date_value();
}
inline void CellValueArchive::clear_date_value() {
  if (_impl_.date_value_ != nullptr) _impl_.date_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::DateCellValueArchive& CellValueArchive::_internal_date_value() const {
  const ::TSCE::DateCellValueArchive* p = _impl_.date_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::DateCellValueArchive&>(
      ::TSCE::_DateCellValueArchive_default_instance_);
}
inline const ::TSCE::DateCellValueArchive& CellValueArchive::date_value() const {
  // @@protoc_insertion_point(field_get:TSCE.CellValueArchive.date_value)
  return _internal_date_value();
}
inline void CellValueArchive::unsafe_arena_set_allocated_date_value(
    ::TSCE::DateCellValueArchive* date_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.date_value_);
  }
  _impl_.date_value_ = date_value;
  if (date_value) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CellValueArchive.date_value)
}
inline ::TSCE::DateCellValueArchive* CellValueArchive::release_date_value() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::DateCellValueArchive* temp = _impl_.date_value_;
  _impl_.date_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::DateCellValueArchive* CellValueArchive::unsafe_arena_release_date_value() {
  // @@protoc_insertion_point(field_release:TSCE.CellValueArchive.date_value)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::DateCellValueArchive* temp = _impl_.date_value_;
  _impl_.date_value_ = nullptr;
  return temp;
}
inline ::TSCE::DateCellValueArchive* CellValueArchive::_internal_mutable_date_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.date_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::DateCellValueArchive>(GetArenaForAllocation());
    _impl_.date_value_ = p;
  }
  return _impl_.date_value_;
}
inline ::TSCE::DateCellValueArchive* CellValueArchive::mutable_date_value() {
  ::TSCE::DateCellValueArchive* _msg = _internal_mutable_date_value();
  // @@protoc_insertion_point(field_mutable:TSCE.CellValueArchive.date_value)
  return _msg;
}
inline void CellValueArchive::set_allocated_date_value(::TSCE::DateCellValueArchive* date_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.date_value_;
  }
  if (date_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(date_value);
    if (message_arena != submessage_arena) {
      date_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date_value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.date_value_ = date_value;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CellValueArchive.date_value)
}

// optional .TSCE.NumberCellValueArchive number_value = 4;
inline bool CellValueArchive::_internal_has_number_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.number_value_ != nullptr);
  return value;
}
inline bool CellValueArchive::has_number_value() const {
  return _internal_has_number_value();
}
inline void CellValueArchive::clear_number_value() {
  if (_impl_.number_value_ != nullptr) _impl_.number_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCE::NumberCellValueArchive& CellValueArchive::_internal_number_value() const {
  const ::TSCE::NumberCellValueArchive* p = _impl_.number_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::NumberCellValueArchive&>(
      ::TSCE::_NumberCellValueArchive_default_instance_);
}
inline const ::TSCE::NumberCellValueArchive& CellValueArchive::number_value() const {
  // @@protoc_insertion_point(field_get:TSCE.CellValueArchive.number_value)
  return _internal_number_value();
}
inline void CellValueArchive::unsafe_arena_set_allocated_number_value(
    ::TSCE::NumberCellValueArchive* number_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.number_value_);
  }
  _impl_.number_value_ = number_value;
  if (number_value) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CellValueArchive.number_value)
}
inline ::TSCE::NumberCellValueArchive* CellValueArchive::release_number_value() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::NumberCellValueArchive* temp = _impl_.number_value_;
  _impl_.number_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::NumberCellValueArchive* CellValueArchive::unsafe_arena_release_number_value() {
  // @@protoc_insertion_point(field_release:TSCE.CellValueArchive.number_value)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::NumberCellValueArchive* temp = _impl_.number_value_;
  _impl_.number_value_ = nullptr;
  return temp;
}
inline ::TSCE::NumberCellValueArchive* CellValueArchive::_internal_mutable_number_value() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.number_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::NumberCellValueArchive>(GetArenaForAllocation());
    _impl_.number_value_ = p;
  }
  return _impl_.number_value_;
}
inline ::TSCE::NumberCellValueArchive* CellValueArchive::mutable_number_value() {
  ::TSCE::NumberCellValueArchive* _msg = _internal_mutable_number_value();
  // @@protoc_insertion_point(field_mutable:TSCE.CellValueArchive.number_value)
  return _msg;
}
inline void CellValueArchive::set_allocated_number_value(::TSCE::NumberCellValueArchive* number_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.number_value_;
  }
  if (number_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(number_value);
    if (message_arena != submessage_arena) {
      number_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, number_value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.number_value_ = number_value;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CellValueArchive.number_value)
}

// optional .TSCE.StringCellValueArchive string_value = 5;
inline bool CellValueArchive::_internal_has_string_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.string_value_ != nullptr);
  return value;
}
inline bool CellValueArchive::has_string_value() const {
  return _internal_has_string_value();
}
inline void CellValueArchive::clear_string_value() {
  if (_impl_.string_value_ != nullptr) _impl_.string_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::TSCE::StringCellValueArchive& CellValueArchive::_internal_string_value() const {
  const ::TSCE::StringCellValueArchive* p = _impl_.string_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::StringCellValueArchive&>(
      ::TSCE::_StringCellValueArchive_default_instance_);
}
inline const ::TSCE::StringCellValueArchive& CellValueArchive::string_value() const {
  // @@protoc_insertion_point(field_get:TSCE.CellValueArchive.string_value)
  return _internal_string_value();
}
inline void CellValueArchive::unsafe_arena_set_allocated_string_value(
    ::TSCE::StringCellValueArchive* string_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.string_value_);
  }
  _impl_.string_value_ = string_value;
  if (string_value) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CellValueArchive.string_value)
}
inline ::TSCE::StringCellValueArchive* CellValueArchive::release_string_value() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::StringCellValueArchive* temp = _impl_.string_value_;
  _impl_.string_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::StringCellValueArchive* CellValueArchive::unsafe_arena_release_string_value() {
  // @@protoc_insertion_point(field_release:TSCE.CellValueArchive.string_value)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::StringCellValueArchive* temp = _impl_.string_value_;
  _impl_.string_value_ = nullptr;
  return temp;
}
inline ::TSCE::StringCellValueArchive* CellValueArchive::_internal_mutable_string_value() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.string_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::StringCellValueArchive>(GetArenaForAllocation());
    _impl_.string_value_ = p;
  }
  return _impl_.string_value_;
}
inline ::TSCE::StringCellValueArchive* CellValueArchive::mutable_string_value() {
  ::TSCE::StringCellValueArchive* _msg = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:TSCE.CellValueArchive.string_value)
  return _msg;
}
inline void CellValueArchive::set_allocated_string_value(::TSCE::StringCellValueArchive* string_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.string_value_;
  }
  if (string_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(string_value);
    if (message_arena != submessage_arena) {
      string_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string_value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.string_value_ = string_value;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CellValueArchive.string_value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSCE

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TSCE::ReferenceArchive_ReferenceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCE::ReferenceArchive_ReferenceType>() {
  return ::TSCE::ReferenceArchive_ReferenceType_descriptor();
}
template <> struct is_proto_enum< ::TSCE::SpanningDependenciesArchive_RangeContext> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCE::SpanningDependenciesArchive_RangeContext>() {
  return ::TSCE::SpanningDependenciesArchive_RangeContext_descriptor();
}
template <> struct is_proto_enum< ::TSCE::CalculationEngineArchive_ExcelImportDateMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCE::CalculationEngineArchive_ExcelImportDateMode>() {
  return ::TSCE::CalculationEngineArchive_ExcelImportDateMode_descriptor();
}
template <> struct is_proto_enum< ::TSCE::ASTNodeArrayArchive_ASTNodeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCE::ASTNodeArrayArchive_ASTNodeType>() {
  return ::TSCE::ASTNodeArrayArchive_ASTNodeType_descriptor();
}
template <> struct is_proto_enum< ::TSCE::FormulaRewriteSpecArchive_RewriteType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCE::FormulaRewriteSpecArchive_RewriteType>() {
  return ::TSCE::FormulaRewriteSpecArchive_RewriteType_descriptor();
}
template <> struct is_proto_enum< ::TSCE::CellValueArchive_CellValueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCE::CellValueArchive_CellValueType>() {
  return ::TSCE::CellValueArchive_CellValueType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TSCEArchives_2eproto
