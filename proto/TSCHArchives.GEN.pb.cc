// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCHArchives.GEN.proto

#include "TSCHArchives.GEN.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace TSCH {
namespace Generated {
PROTOBUF_CONSTEXPR ChartStyleArchive::ChartStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tschchartinfoarea3dlightingpackage_)*/nullptr
  , /*decltype(_impl_.tschchartinfobar3dlightingpackage_)*/nullptr
  , /*decltype(_impl_.tschchartinfocolumn3dlightingpackage_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefault3dlightingpackage_)*/nullptr
  , /*decltype(_impl_.tschchartinfoline3dlightingpackage_)*/nullptr
  , /*decltype(_impl_.tschchartinfopie3dlightingpackage_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefaultbackgroundfill_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefaultbackgroundstroke_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefaultbordershadow_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefaultborderstroke_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefaultgridbackgroundfill_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefaulttitlecolor_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefault3dchartopacity_)*/0
  , /*decltype(_impl_.tschchartinfodefaultborderopacity_)*/0
  , /*decltype(_impl_.tschchartinfodefaultgridbackgroundopacity_)*/0
  , /*decltype(_impl_.tschchartinfodefaultcombinelayers_)*/false
  , /*decltype(_impl_.tschchartinfodefaultshowborder_)*/false
  , /*decltype(_impl_.tschchartinfodefaultinterbargap_)*/0
  , /*decltype(_impl_.tschchartinfodefaultintersetgap_)*/0
  , /*decltype(_impl_.tschchartinfodefaulttitleparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartinfodefaultdatasetnameparagraphstyleindex_)*/0} {}
struct ChartStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartStyleArchiveDefaultTypeInternal() {}
  union {
    ChartStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartStyleArchiveDefaultTypeInternal _ChartStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartNonStyleArchive::ChartNonStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tschchartinfodefaulttitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tschchartinfodefault3drotation_)*/nullptr
  , /*decltype(_impl_.tschchartinfoarea3dscale_)*/nullptr
  , /*decltype(_impl_.tschchartinfobar3dscale_)*/nullptr
  , /*decltype(_impl_.tschchartinfocolumn3dscale_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefault3dscale_)*/nullptr
  , /*decltype(_impl_.tschchartinfoline3dscale_)*/nullptr
  , /*decltype(_impl_.tschchartinfopie3dscale_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefault3dviewport_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefault3dbarshape_)*/0
  , /*decltype(_impl_.tschchartinfodefault3dintersetdepthgap_)*/0
  , /*decltype(_impl_.tschchartinfodefault3dbeveledges_)*/false
  , /*decltype(_impl_.tschchartinfodefaultshowlegend_)*/false
  , /*decltype(_impl_.tschchartinfodefaultshowtitle_)*/false
  , /*decltype(_impl_.tschchartinfodefaultskiphiddendata_)*/false
  , /*decltype(_impl_.tschchartinfodefaultpiestartangle_)*/0
  , /*decltype(_impl_.tschchartinfodefaultdatasetnamelocation_)*/0
  , /*decltype(_impl_.tschchartinfodefaultmultidatacontroltype_)*/0} {}
struct ChartNonStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartNonStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartNonStyleArchiveDefaultTypeInternal() {}
  union {
    ChartNonStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartNonStyleArchiveDefaultTypeInternal _ChartNonStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR LegendStyleArchive::LegendStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tschlegendmodeldefaultfill_)*/nullptr
  , /*decltype(_impl_.tschlegendmodeldefaultshadow_)*/nullptr
  , /*decltype(_impl_.tschlegendmodeldefaultstroke_)*/nullptr
  , /*decltype(_impl_.tschlegendmodeldefaultlabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschlegendmodeldefaultopacity_)*/0} {}
struct LegendStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LegendStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LegendStyleArchiveDefaultTypeInternal() {}
  union {
    LegendStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LegendStyleArchiveDefaultTypeInternal _LegendStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR LegendNonStyleArchive::LegendNonStyleArchive(
    ::_pbi::ConstantInitialized) {}
struct LegendNonStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LegendNonStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LegendNonStyleArchiveDefaultTypeInternal() {}
  union {
    LegendNonStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LegendNonStyleArchiveDefaultTypeInternal _LegendNonStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartAxisStyleArchive::ChartAxisStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tschchartaxiscategory3dgridlinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartaxisvalue3dgridlinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartaxiscategorymajorgridlineshadow_)*/nullptr
  , /*decltype(_impl_.tschchartaxisvaluemajorgridlineshadow_)*/nullptr
  , /*decltype(_impl_.tschchartaxiscategorymajorgridlinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartaxisvaluemajorgridlinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartaxiscategoryminorgridlineshadow_)*/nullptr
  , /*decltype(_impl_.tschchartaxisvalueminorgridlineshadow_)*/nullptr
  , /*decltype(_impl_.tschchartaxiscategoryminorgridlinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartaxisvalueminorgridlinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartaxiscategory3dgridlineopacity_)*/0
  , /*decltype(_impl_.tschchartaxisvalue3dgridlineopacity_)*/0
  , /*decltype(_impl_.tschchartaxiscategoryhorizontalspacing_)*/0
  , /*decltype(_impl_.tschchartaxiscategorylabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartaxisdefaultlabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartaxisvaluelabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartaxiscategorylabelsorientation_)*/0
  , /*decltype(_impl_.tschchartaxisdefaultlabelsorientation_)*/0
  , /*decltype(_impl_.tschchartaxisvaluelabelsorientation_)*/0
  , /*decltype(_impl_.tschchartaxiscategorymajorgridlineopacity_)*/0
  , /*decltype(_impl_.tschchartaxisvaluemajorgridlineopacity_)*/0
  , /*decltype(_impl_.tschchartaxiscategoryminorgridlineopacity_)*/0
  , /*decltype(_impl_.tschchartaxisvalueminorgridlineopacity_)*/0
  , /*decltype(_impl_.tschchartaxiscategoryshowaxis_)*/false
  , /*decltype(_impl_.tschchartaxisvalueshowaxis_)*/false
  , /*decltype(_impl_.tschchartaxiscategoryshowlastlabel_)*/false
  , /*decltype(_impl_.tschchartaxiscategoryshowmajorgridlines_)*/false
  , /*decltype(_impl_.tschchartaxisvalueshowmajorgridlines_)*/false
  , /*decltype(_impl_.tschchartaxiscategoryshowmajortickmarks_)*/false
  , /*decltype(_impl_.tschchartaxisvalueshowmajortickmarks_)*/false
  , /*decltype(_impl_.tschchartaxisvalueshowminimumlabel_)*/false
  , /*decltype(_impl_.tschchartaxiscategoryshowminorgridlines_)*/false
  , /*decltype(_impl_.tschchartaxisvalueshowminorgridlines_)*/false
  , /*decltype(_impl_.tschchartaxiscategoryshowminortickmarks_)*/false
  , /*decltype(_impl_.tschchartaxisvalueshowminortickmarks_)*/false
  , /*decltype(_impl_.tschchartaxiscategorytickmarklocation_)*/0
  , /*decltype(_impl_.tschchartaxisvaluetickmarklocation_)*/0
  , /*decltype(_impl_.tschchartaxiscategorytitleparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartaxisdefaulttitleparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartaxisvaluetitleparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartaxiscategoryverticalspacing_)*/0} {}
struct ChartAxisStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartAxisStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartAxisStyleArchiveDefaultTypeInternal() {}
  union {
    ChartAxisStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartAxisStyleArchiveDefaultTypeInternal _ChartAxisStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartAxisNonStyleArchive::ChartAxisNonStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tschchartaxiscategorytitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tschchartaxisvaluetitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tschchartaxisdefaultnumberformat_)*/nullptr
  , /*decltype(_impl_.tschchartaxisdefaultusermax_)*/nullptr
  , /*decltype(_impl_.tschchartaxisdefaultusermin_)*/nullptr
  , /*decltype(_impl_.tschchartaxisdefault3dlabelposition_)*/0
  , /*decltype(_impl_.tschchartaxisdefaultnumberformattype_)*/0
  , /*decltype(_impl_.tschchartaxisvaluenumberofdecades_)*/0
  , /*decltype(_impl_.tschchartaxisvaluenumberofmajorgridlines_)*/0
  , /*decltype(_impl_.tschchartaxisvaluenumberofminorgridlines_)*/0
  , /*decltype(_impl_.tschchartaxisvaluescale_)*/0
  , /*decltype(_impl_.tschchartaxiscategoryplottoedges_)*/false
  , /*decltype(_impl_.tschchartaxiscategoryshowlabels_)*/false
  , /*decltype(_impl_.tschchartaxisdefaultshowlabels_)*/false
  , /*decltype(_impl_.tschchartaxisvalueshowlabels_)*/false
  , /*decltype(_impl_.tschchartaxiscategoryshowserieslabels_)*/false
  , /*decltype(_impl_.tschchartaxismultidatashowserieslabels_)*/false
  , /*decltype(_impl_.tschchartaxiscategoryshowtitle_)*/false
  , /*decltype(_impl_.tschchartaxisvalueshowtitle_)*/false} {}
struct ChartAxisNonStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartAxisNonStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartAxisNonStyleArchiveDefaultTypeInternal() {}
  union {
    ChartAxisNonStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartAxisNonStyleArchiveDefaultTypeInternal _ChartAxisNonStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartSeriesStyleArchive::ChartSeriesStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarlineend_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarlineendscatterx_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarstroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarstrokescatterx_)*/nullptr
  , /*decltype(_impl_.tschchartseries3dareafill_)*/nullptr
  , /*decltype(_impl_.tschchartseries3dbarfill_)*/nullptr
  , /*decltype(_impl_.tschchartseries3dcolumnfill_)*/nullptr
  , /*decltype(_impl_.tschchartseries3dlinefill_)*/nullptr
  , /*decltype(_impl_.tschchartseries3dpiefill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesareafill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesbarfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriescolumnfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaultfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedareafill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedcolumnfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriespiefill_)*/nullptr
  , /*decltype(_impl_.tschchartseries3dareashadow_)*/nullptr
  , /*decltype(_impl_.tschchartseries3dbarshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseries3dcolumnshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseries3dlineshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseries3dpieshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesareashadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesbarshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesbubbleshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaultshadow_)*/nullptr
  , /*decltype(_impl_.tschchartserieslineshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedareashadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedcolumnshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedlineshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriespieshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesscattershadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesareastroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesbarstroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesbubblestroke_)*/nullptr
  , /*decltype(_impl_.tschchartserieslinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedareastroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedcolumnstroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedlinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriespiestroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesscatterstroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesareasymbolfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesbubblesymbolfill_)*/nullptr
  , /*decltype(_impl_.tschchartserieslinesymbolfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedareasymbolfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedlinesymbolfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesscattersymbolfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesareasymbolstroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesbubblesymbolstroke_)*/nullptr
  , /*decltype(_impl_.tschchartserieslinesymbolstroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedareasymbolstroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedlinesymbolstroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesscattersymbolstroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaulttrendlineshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaulttrendlinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesarealabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesbarlabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesdefaultlabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartserieslinelabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesmixedlabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriespielabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesdefaultopacity_)*/0
  , /*decltype(_impl_.tschchartseriesareaoutsidelabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesbaroutsidelabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesdefaultoutsidelabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesmixedoutsidelabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriespieoutsidelabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesareasymbolfilluseseriesfill_)*/false
  , /*decltype(_impl_.tschchartserieslinesymbolfilluseseriesfill_)*/false
  , /*decltype(_impl_.tschchartseriesmixedareasymbolfilluseseriesfill_)*/false
  , /*decltype(_impl_.tschchartseriesmixedlinesymbolfilluseseriesfill_)*/false
  , /*decltype(_impl_.tschchartseriesareasymbolfilluseseriesstroke_)*/false
  , /*decltype(_impl_.tschchartseriesbubblesymbolfilluseseriesstroke_)*/false
  , /*decltype(_impl_.tschchartserieslinesymbolfilluseseriesstroke_)*/false
  , /*decltype(_impl_.tschchartseriesmixedareasymbolfilluseseriesstroke_)*/false
  , /*decltype(_impl_.tschchartseriesmixedlinesymbolfilluseseriesstroke_)*/false
  , /*decltype(_impl_.tschchartseriesscattersymbolfilluseseriesstroke_)*/false
  , /*decltype(_impl_.tschchartseriesareasymbolsize_)*/0
  , /*decltype(_impl_.tschchartserieslinesymbolsize_)*/0
  , /*decltype(_impl_.tschchartseriesmixedareasymbolsize_)*/0
  , /*decltype(_impl_.tschchartseriesmixedlinesymbolsize_)*/0
  , /*decltype(_impl_.tschchartseriesscattersymbolsize_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlineequationopacity_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlineequationparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlinersquaredopacity_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesareavaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartseriesbarvaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartseriesbubblevaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartseriesdefaultvaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartserieslinevaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartseriesmixedareavaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartseriesmixedcolumnvaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartseriesmixedlinevaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartseriesscattervaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartseriesstackedareavaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartseriesstackedbarvaluelabelposition_)*/0} {}
struct ChartSeriesStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartSeriesStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartSeriesStyleArchiveDefaultTypeInternal() {}
  union {
    ChartSeriesStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartSeriesStyleArchiveDefaultTypeInternal _ChartSeriesStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartSeriesNonStyleArchive::ChartSeriesNonStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tschchartseriesdefaulttrendlinelabelstring_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarcustompositivedata_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaultnumberformat_)*/nullptr
  , /*decltype(_impl_.tschchartseriespienumberformat_)*/nullptr
  , /*decltype(_impl_.tschchartseriesstackedpercentnumberformat_)*/nullptr
  , /*decltype(_impl_.tschchartseriesbubbleadjustmentscale_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarfixedvalue_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarfixedvaluescatterx_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarpercentvalue_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarpercentvaluescatterx_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarsetting_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarsettingscatterx_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarstddevvalue_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarstddevvaluescatterx_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbartype_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbartypescatterx_)*/0
  , /*decltype(_impl_.tschchartseriespielabelexplosion_)*/0
  , /*decltype(_impl_.tschchartseriesbubblelinetype_)*/0
  , /*decltype(_impl_.tschchartserieslinelinetype_)*/0
  , /*decltype(_impl_.tschchartseriesmixedlinelinetype_)*/0
  , /*decltype(_impl_.tschchartseriesscatterlinetype_)*/0
  , /*decltype(_impl_.tschchartseriesdefaultnumberformattype_)*/0
  , /*decltype(_impl_.tschchartseriespienumberformattype_)*/0
  , /*decltype(_impl_.tschchartseriesdefaultseriestype_)*/0
  , /*decltype(_impl_.tschchartseriesdefaultshowerrorbar_)*/false
  , /*decltype(_impl_.tschchartseriesdefaultshowerrorbarscatterx_)*/false
  , /*decltype(_impl_.tschchartseriesscattershowline_)*/false
  , /*decltype(_impl_.tschchartseriesbubbleshownegativedata_)*/false
  , /*decltype(_impl_.tschchartseriespieshowserieslabels_)*/false
  , /*decltype(_impl_.tschchartseriesareashowsymbol_)*/false
  , /*decltype(_impl_.tschchartserieslineshowsymbol_)*/false
  , /*decltype(_impl_.tschchartseriesmixedareashowsymbol_)*/false
  , /*decltype(_impl_.tschchartseriesmixedlineshowsymbol_)*/false
  , /*decltype(_impl_.tschchartseriesscattershowsymbol_)*/false
  , /*decltype(_impl_.tschchartseriesdefaultshowtrendline_)*/false
  , /*decltype(_impl_.tschchartseriesareashowvaluelabels_)*/false
  , /*decltype(_impl_.tschchartseriesbarshowvaluelabels_)*/false
  , /*decltype(_impl_.tschchartseriesbubbleshowvaluelabels_)*/false
  , /*decltype(_impl_.tschchartseriesdefaultshowvaluelabels_)*/false
  , /*decltype(_impl_.tschchartserieslineshowvaluelabels_)*/false
  , /*decltype(_impl_.tschchartseriesbubblesizedimension_)*/0
  , /*decltype(_impl_.tschchartseriesareasymboltype_)*/0
  , /*decltype(_impl_.tschchartseriesmixedshowvaluelabels_)*/false
  , /*decltype(_impl_.tschchartseriespieshowvaluelabels_)*/false
  , /*decltype(_impl_.tschchartseriesscattershowvaluelabels_)*/false
  , /*decltype(_impl_.tschchartseriesdefaulttrendlineshowequation_)*/false
  , /*decltype(_impl_.tschchartserieslinesymboltype_)*/0
  , /*decltype(_impl_.tschchartseriesmixedareasymboltype_)*/0
  , /*decltype(_impl_.tschchartseriesmixedlinesymboltype_)*/0
  , /*decltype(_impl_.tschchartseriesscattersymboltype_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlineequationoffsetx_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlineequationoffsety_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlineorder_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlineperiod_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlinersquaredoffsetx_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlinersquaredoffsety_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlinetype_)*/0
  , /*decltype(_impl_.tschchartseriespiewedgeexplosion_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlineshowlabel_)*/false
  , /*decltype(_impl_.tschchartseriesdefaulttrendlineshowr2value_)*/false
  , /*decltype(_impl_.tschchartseriesbubbleshowserieslabels_)*/false
  , /*decltype(_impl_.tschchartseriesscattershowserieslabels_)*/false
  , /*decltype(_impl_.tschchartseriesdefaultyaxisordinal_)*/0
  , /*decltype(_impl_.tschchartseriesbubblevaluelabelsaxis_)*/0
  , /*decltype(_impl_.tschchartseriesscattervaluelabelsaxis_)*/0} {}
struct ChartSeriesNonStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartSeriesNonStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartSeriesNonStyleArchiveDefaultTypeInternal() {}
  union {
    ChartSeriesNonStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartSeriesNonStyleArchiveDefaultTypeInternal _ChartSeriesNonStyleArchive_default_instance_;
}  // namespace Generated
}  // namespace TSCH
static ::_pb::Metadata file_level_metadata_TSCHArchives_2eGEN_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_TSCHArchives_2eGEN_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_TSCHArchives_2eGEN_2eproto = nullptr;

const uint32_t TableStruct_TSCHArchives_2eGEN_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefault3dchartopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfoarea3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfobar3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfocolumn3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefault3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfoline3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfopie3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaultbackgroundfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaultbackgroundstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaultborderopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaultbordershadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaultborderstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaultcombinelayers_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaultgridbackgroundfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaultgridbackgroundopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaultinterbargap_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaultintersetgap_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaultshowborder_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaulttitlecolor_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaulttitleparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaultdatasetnameparagraphstyleindex_),
  12,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  13,
  8,
  9,
  15,
  10,
  14,
  17,
  18,
  16,
  11,
  19,
  20,
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefault3dbarshape_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefault3dbeveledges_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefault3dintersetdepthgap_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefault3drotation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfoarea3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfobar3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfocolumn3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefault3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfoline3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfopie3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefault3dviewport_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefaultpiestartangle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefaultshowlegend_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefaultshowtitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefaultskiphiddendata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefaulttitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefaultdatasetnamelocation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefaultmultidatacontroltype_),
  9,
  11,
  10,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  15,
  12,
  13,
  14,
  0,
  16,
  17,
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendStyleArchive, _impl_.tschlegendmodeldefaultfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendStyleArchive, _impl_.tschlegendmodeldefaultlabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendStyleArchive, _impl_.tschlegendmodeldefaultopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendStyleArchive, _impl_.tschlegendmodeldefaultshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendStyleArchive, _impl_.tschlegendmodeldefaultstroke_),
  0,
  3,
  4,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendNonStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategory3dgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvalue3dgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategory3dgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvalue3dgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryhorizontalspacing_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategorylabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisdefaultlabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvaluelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategorylabelsorientation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisdefaultlabelsorientation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvaluelabelsorientation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategorymajorgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvaluemajorgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategorymajorgridlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvaluemajorgridlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategorymajorgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvaluemajorgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryminorgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvalueminorgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryminorgridlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvalueminorgridlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryminorgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvalueminorgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryshowaxis_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvalueshowaxis_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryshowlastlabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryshowmajorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvalueshowmajorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryshowmajortickmarks_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvalueshowmajortickmarks_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvalueshowminimumlabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryshowminorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvalueshowminorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryshowminortickmarks_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvalueshowminortickmarks_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategorytickmarklocation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvaluetickmarklocation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategorytitleparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisdefaulttitleparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvaluetitleparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryverticalspacing_),
  10,
  11,
  0,
  1,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  2,
  3,
  4,
  5,
  21,
  22,
  6,
  7,
  8,
  9,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisdefault3dlabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisdefaultnumberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisdefaultnumberformattype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisvaluenumberofdecades_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisvaluenumberofmajorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisvaluenumberofminorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxiscategoryplottoedges_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisvaluescale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxiscategoryshowlabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisdefaultshowlabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisvalueshowlabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxiscategoryshowserieslabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxismultidatashowserieslabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxiscategoryshowtitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisvalueshowtitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxiscategorytitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisvaluetitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisdefaultusermax_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisdefaultusermin_),
  5,
  2,
  6,
  7,
  8,
  9,
  11,
  10,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  0,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulterrorbarlineend_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulterrorbarlineendscatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulterrorbarshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulterrorbarstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulterrorbarstrokescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseries3dareafill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseries3dbarfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseries3dcolumnfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseries3dlinefill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseries3dpiefill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesareafill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesbarfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriescolumnfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaultfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedareafill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedcolumnfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriespiefill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesarealabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesbarlabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaultlabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartserieslinelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedlabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriespielabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaultopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesareaoutsidelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesbaroutsidelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaultoutsidelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedoutsidelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriespieoutsidelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseries3dareashadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseries3dbarshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseries3dcolumnshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseries3dlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseries3dpieshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesareashadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesbarshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesbubbleshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaultshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartserieslineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedareashadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedcolumnshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriespieshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesscattershadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesareastroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesbarstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesbubblestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartserieslinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedareastroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedcolumnstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriespiestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesscatterstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesareasymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesbubblesymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartserieslinesymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedareasymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedlinesymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesscattersymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesareasymbolfilluseseriesfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartserieslinesymbolfilluseseriesfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedareasymbolfilluseseriesfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedlinesymbolfilluseseriesfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesareasymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesbubblesymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartserieslinesymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedareasymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedlinesymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesscattersymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesareasymbolsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartserieslinesymbolsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedareasymbolsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedlinesymbolsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesscattersymbolsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesareasymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesbubblesymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartserieslinesymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedareasymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedlinesymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesscattersymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulttrendlineequationopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulttrendlineequationparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulttrendlinersquaredopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulttrendlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulttrendlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesareavaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesbarvaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesbubblevaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaultvaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartserieslinevaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedareavaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedcolumnvaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedlinevaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesscattervaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesstackedareavaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesstackedbarvaluelabelposition_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  64,
  65,
  66,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  67,
  68,
  69,
  70,
  71,
  72,
  73,
  74,
  75,
  76,
  77,
  78,
  79,
  80,
  81,
  47,
  48,
  49,
  50,
  51,
  52,
  82,
  83,
  84,
  85,
  53,
  54,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesbubbleadjustmentscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarcustomnegativedata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarcustompositivedata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarfixedvalue_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarfixedvaluescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarpercentvalue_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarpercentvaluescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarsetting_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarsettingscatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarstddevvalue_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarstddevvaluescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbartype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbartypescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriespielabelexplosion_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesbubblelinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartserieslinelinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesmixedlinelinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesscatterlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaultnumberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriespienumberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaultnumberformattype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriespienumberformattype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesstackedpercentnumberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaultseriestype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaultshowerrorbar_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaultshowerrorbarscatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesscattershowline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesbubbleshownegativedata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriespieshowserieslabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesareashowsymbol_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartserieslineshowsymbol_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesmixedareashowsymbol_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesmixedlineshowsymbol_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesscattershowsymbol_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaultshowtrendline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesareashowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesbarshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesbubbleshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaultshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartserieslineshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesmixedshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriespieshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesscattershowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesbubblesizedimension_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesareasymboltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartserieslinesymboltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesmixedareasymboltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesmixedlinesymboltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesscattersymboltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlineequationoffsetx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlineequationoffsety_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlinelabelstring_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlineorder_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlineperiod_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlinersquaredoffsetx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlinersquaredoffsety_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlineshowequation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlineshowlabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlineshowr2value_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriespiewedgeexplosion_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaultyaxisordinal_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesbubbleshowserieslabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesbubblevaluelabelsaxis_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesscattershowserieslabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesscattervaluelabelsaxis_),
  8,
  1,
  2,
  3,
  4,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  5,
  6,
  24,
  25,
  7,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  45,
  46,
  47,
  43,
  44,
  49,
  50,
  51,
  52,
  53,
  54,
  0,
  55,
  56,
  57,
  58,
  48,
  61,
  62,
  59,
  60,
  65,
  63,
  66,
  64,
  67,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 27, -1, sizeof(::TSCH::Generated::ChartStyleArchive)},
  { 48, 72, -1, sizeof(::TSCH::Generated::ChartNonStyleArchive)},
  { 90, 101, -1, sizeof(::TSCH::Generated::LegendStyleArchive)},
  { 106, -1, -1, sizeof(::TSCH::Generated::LegendNonStyleArchive)},
  { 112, 159, -1, sizeof(::TSCH::Generated::ChartAxisStyleArchive)},
  { 200, 225, -1, sizeof(::TSCH::Generated::ChartAxisNonStyleArchive)},
  { 244, 347, -1, sizeof(::TSCH::Generated::ChartSeriesStyleArchive)},
  { 444, 518, -1, sizeof(::TSCH::Generated::ChartSeriesNonStyleArchive)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::TSCH::Generated::_ChartStyleArchive_default_instance_._instance,
  &::TSCH::Generated::_ChartNonStyleArchive_default_instance_._instance,
  &::TSCH::Generated::_LegendStyleArchive_default_instance_._instance,
  &::TSCH::Generated::_LegendNonStyleArchive_default_instance_._instance,
  &::TSCH::Generated::_ChartAxisStyleArchive_default_instance_._instance,
  &::TSCH::Generated::_ChartAxisNonStyleArchive_default_instance_._instance,
  &::TSCH::Generated::_ChartSeriesStyleArchive_default_instance_._instance,
  &::TSCH::Generated::_ChartSeriesNonStyleArchive_default_instance_._instance,
};

const char descriptor_table_protodef_TSCHArchives_2eGEN_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026TSCHArchives.GEN.proto\022\016TSCH.Generated"
  "\032\021TSPMessages.proto\032\021TSKArchives.proto\032\021"
  "TSDArchives.proto\032\021TSSArchives.proto\032\031TS"
  "CHArchives.Common.proto\032\024TSCH3DArchives."
  "proto\"\335\n\n\021ChartStyleArchive\022*\n\"tschchart"
  "infodefault3dchartopacity\030\001 \001(\002\022O\n\"tschc"
  "hartinfoarea3dlightingpackage\030\002 \001(\0132#.TS"
  "CH.Chart3DLightingPackageArchive\022N\n!tsch"
  "chartinfobar3dlightingpackage\030\003 \001(\0132#.TS"
  "CH.Chart3DLightingPackageArchive\022Q\n$tsch"
  "chartinfocolumn3dlightingpackage\030\004 \001(\0132#"
  ".TSCH.Chart3DLightingPackageArchive\022R\n%t"
  "schchartinfodefault3dlightingpackage\030\005 \001"
  "(\0132#.TSCH.Chart3DLightingPackageArchive\022"
  "O\n\"tschchartinfoline3dlightingpackage\030\006 "
  "\001(\0132#.TSCH.Chart3DLightingPackageArchive"
  "\022N\n!tschchartinfopie3dlightingpackage\030\007 "
  "\001(\0132#.TSCH.Chart3DLightingPackageArchive"
  "\022<\n\"tschchartinfodefaultbackgroundfill\030\010"
  " \001(\0132\020.TSD.FillArchive\022@\n$tschchartinfod"
  "efaultbackgroundstroke\030\t \001(\0132\022.TSD.Strok"
  "eArchive\022)\n!tschchartinfodefaultborderop"
  "acity\030\n \001(\002\022<\n tschchartinfodefaultborde"
  "rshadow\030\013 \001(\0132\022.TSD.ShadowArchive\022<\n tsc"
  "hchartinfodefaultborderstroke\030\014 \001(\0132\022.TS"
  "D.StrokeArchive\022)\n!tschchartinfodefaultc"
  "ombinelayers\030\r \001(\010\022@\n&tschchartinfodefau"
  "ltgridbackgroundfill\030\016 \001(\0132\020.TSD.FillArc"
  "hive\0221\n)tschchartinfodefaultgridbackgrou"
  "ndopacity\030\017 \001(\002\022\'\n\037tschchartinfodefaulti"
  "nterbargap\030\020 \001(\002\022\'\n\037tschchartinfodefault"
  "intersetgap\030\021 \001(\002\022&\n\036tschchartinfodefaul"
  "tshowborder\030\022 \001(\010\0222\n\036tschchartinfodefaul"
  "ttitlecolor\030\023 \001(\0132\n.TSP.Color\0224\n,tschcha"
  "rtinfodefaulttitleparagraphstyleindex\030\024 "
  "\001(\005\022:\n2tschchartinfodefaultdatasetnamepa"
  "ragraphstyleindex\030\025 \001(\0052L\n\007current\022\027.TSC"
  "H.ChartStyleArchive\030\220N \001(\0132!.TSCH.Genera"
  "ted.ChartStyleArchive\"\227\010\n\024ChartNonStyleA"
  "rchive\022&\n\036tschchartinfodefault3dbarshape"
  "\030\001 \001(\005\022(\n tschchartinfodefault3dbeveledg"
  "es\030\002 \001(\010\022.\n&tschchartinfodefault3dinters"
  "etdepthgap\030\003 \001(\002\022B\n\036tschchartinfodefault"
  "3drotation\030\004 \001(\0132\032.TSCH.Chart3DVectorArc"
  "hive\022<\n\030tschchartinfoarea3dscale\030\005 \001(\0132\032"
  ".TSCH.Chart3DVectorArchive\022;\n\027tschcharti"
  "nfobar3dscale\030\006 \001(\0132\032.TSCH.Chart3DVector"
  "Archive\022>\n\032tschchartinfocolumn3dscale\030\007 "
  "\001(\0132\032.TSCH.Chart3DVectorArchive\022\?\n\033tschc"
  "hartinfodefault3dscale\030\010 \001(\0132\032.TSCH.Char"
  "t3DVectorArchive\022<\n\030tschchartinfoline3ds"
  "cale\030\t \001(\0132\032.TSCH.Chart3DVectorArchive\022;"
  "\n\027tschchartinfopie3dscale\030\n \001(\0132\032.TSCH.C"
  "hart3DVectorArchive\022B\n\036tschchartinfodefa"
  "ult3dviewport\030\013 \001(\0132\032.TSCH.Chart3DVector"
  "Archive\022)\n!tschchartinfodefaultpiestarta"
  "ngle\030\023 \001(\002\022&\n\036tschchartinfodefaultshowle"
  "gend\030\024 \001(\010\022%\n\035tschchartinfodefaultshowti"
  "tle\030\025 \001(\010\022*\n\"tschchartinfodefaultskiphid"
  "dendata\030\026 \001(\010\022!\n\031tschchartinfodefaulttit"
  "le\030\027 \001(\t\022/\n\'tschchartinfodefaultdatasetn"
  "amelocation\030\030 \001(\005\0220\n(tschchartinfodefaul"
  "tmultidatacontroltype\030\031 \001(\0052R\n\007current\022\032"
  ".TSCH.ChartNonStyleArchive\030\220N \001(\0132$.TSCH"
  ".Generated.ChartNonStyleArchive\"\355\002\n\022Lege"
  "ndStyleArchive\0224\n\032tschlegendmodeldefault"
  "fill\030\001 \001(\0132\020.TSD.FillArchive\0226\n.tschlege"
  "ndmodeldefaultlabelparagraphstyleindex\030\002"
  " \001(\005\022%\n\035tschlegendmodeldefaultopacity\030\003 "
  "\001(\002\0228\n\034tschlegendmodeldefaultshadow\030\004 \001("
  "\0132\022.TSD.ShadowArchive\0228\n\034tschlegendmodel"
  "defaultstroke\030\005 \001(\0132\022.TSD.StrokeArchive2"
  "N\n\007current\022\030.TSCH.LegendStyleArchive\030\220N "
  "\001(\0132\".TSCH.Generated.LegendStyleArchive\""
  "m\n\025LegendNonStyleArchive2T\n\007current\022\033.TS"
  "CH.LegendNonStyleArchive\030\220N \001(\0132%.TSCH.G"
  "enerated.LegendNonStyleArchive\"\335\021\n\025Chart"
  "AxisStyleArchive\022.\n&tschchartaxiscategor"
  "y3dgridlineopacity\030\001 \001(\002\022+\n#tschchartaxi"
  "svalue3dgridlineopacity\030\002 \001(\002\022A\n%tschcha"
  "rtaxiscategory3dgridlinestroke\030\003 \001(\0132\022.T"
  "SD.StrokeArchive\022>\n\"tschchartaxisvalue3d"
  "gridlinestroke\030\004 \001(\0132\022.TSD.StrokeArchive"
  "\022.\n&tschchartaxiscategoryhorizontalspaci"
  "ng\030\005 \001(\005\0225\n-tschchartaxiscategorylabelpa"
  "ragraphstyleindex\030\006 \001(\005\0224\n,tschchartaxis"
  "defaultlabelparagraphstyleindex\030\007 \001(\005\0222\n"
  "*tschchartaxisvaluelabelparagraphstylein"
  "dex\030\010 \001(\005\022.\n&tschchartaxiscategorylabels"
  "orientation\030\t \001(\002\022-\n%tschchartaxisdefaul"
  "tlabelsorientation\030\n \001(\002\022+\n#tschchartaxi"
  "svaluelabelsorientation\030\013 \001(\002\0221\n)tschcha"
  "rtaxiscategorymajorgridlineopacity\030\014 \001(\002"
  "\022.\n&tschchartaxisvaluemajorgridlineopaci"
  "ty\030\r \001(\002\022D\n(tschchartaxiscategorymajorgr"
  "idlineshadow\030\016 \001(\0132\022.TSD.ShadowArchive\022A"
  "\n%tschchartaxisvaluemajorgridlineshadow\030"
  "\017 \001(\0132\022.TSD.ShadowArchive\022D\n(tschchartax"
  "iscategorymajorgridlinestroke\030\020 \001(\0132\022.TS"
  "D.StrokeArchive\022A\n%tschchartaxisvaluemaj"
  "orgridlinestroke\030\021 \001(\0132\022.TSD.StrokeArchi"
  "ve\0221\n)tschchartaxiscategoryminorgridline"
  "opacity\030\022 \001(\002\022.\n&tschchartaxisvalueminor"
  "gridlineopacity\030\023 \001(\002\022D\n(tschchartaxisca"
  "tegoryminorgridlineshadow\030\024 \001(\0132\022.TSD.Sh"
  "adowArchive\022A\n%tschchartaxisvalueminorgr"
  "idlineshadow\030\025 \001(\0132\022.TSD.ShadowArchive\022D"
  "\n(tschchartaxiscategoryminorgridlinestro"
  "ke\030\026 \001(\0132\022.TSD.StrokeArchive\022A\n%tschchar"
  "taxisvalueminorgridlinestroke\030\027 \001(\0132\022.TS"
  "D.StrokeArchive\022%\n\035tschchartaxiscategory"
  "showaxis\030\030 \001(\010\022\"\n\032tschchartaxisvalueshow"
  "axis\030\031 \001(\010\022*\n\"tschchartaxiscategoryshowl"
  "astlabel\030\032 \001(\010\022/\n\'tschchartaxiscategorys"
  "howmajorgridlines\030\033 \001(\010\022,\n$tschchartaxis"
  "valueshowmajorgridlines\030\034 \001(\010\022/\n\'tschcha"
  "rtaxiscategoryshowmajortickmarks\030\035 \001(\010\022,"
  "\n$tschchartaxisvalueshowmajortickmarks\030\036"
  " \001(\010\022*\n\"tschchartaxisvalueshowminimumlab"
  "el\030\037 \001(\010\022/\n\'tschchartaxiscategoryshowmin"
  "orgridlines\030  \001(\010\022,\n$tschchartaxisvalues"
  "howminorgridlines\030! \001(\010\022/\n\'tschchartaxis"
  "categoryshowminortickmarks\030\" \001(\010\022,\n$tsch"
  "chartaxisvalueshowminortickmarks\030# \001(\010\022-"
  "\n%tschchartaxiscategorytickmarklocation\030"
  "$ \001(\005\022*\n\"tschchartaxisvaluetickmarklocat"
  "ion\030% \001(\005\0225\n-tschchartaxiscategorytitlep"
  "aragraphstyleindex\030& \001(\005\0224\n,tschchartaxi"
  "sdefaulttitleparagraphstyleindex\030\' \001(\005\0222"
  "\n*tschchartaxisvaluetitleparagraphstylei"
  "ndex\030( \001(\005\022,\n$tschchartaxiscategoryverti"
  "calspacing\030) \001(\0052T\n\007current\022\033.TSCH.Chart"
  "AxisStyleArchive\030\220N \001(\0132%.TSCH.Generated"
  ".ChartAxisStyleArchive\"\347\007\n\030ChartAxisNonS"
  "tyleArchive\022+\n#tschchartaxisdefault3dlab"
  "elposition\030\001 \001(\005\022B\n tschchartaxisdefault"
  "numberformat\030\002 \001(\0132\030.TSK.FormatStructArc"
  "hive\022,\n$tschchartaxisdefaultnumberformat"
  "type\030\003 \001(\005\022)\n!tschchartaxisvaluenumberof"
  "decades\030\004 \001(\005\0220\n(tschchartaxisvaluenumbe"
  "rofmajorgridlines\030\005 \001(\005\0220\n(tschchartaxis"
  "valuenumberofminorgridlines\030\006 \001(\005\022(\n tsc"
  "hchartaxiscategoryplottoedges\030\007 \001(\010\022\037\n\027t"
  "schchartaxisvaluescale\030\010 \001(\005\022\'\n\037tschchar"
  "taxiscategoryshowlabels\030\t \001(\010\022&\n\036tschcha"
  "rtaxisdefaultshowlabels\030\n \001(\010\022$\n\034tschcha"
  "rtaxisvalueshowlabels\030\013 \001(\010\022-\n%tschchart"
  "axiscategoryshowserieslabels\030\014 \001(\010\022.\n&ts"
  "chchartaxismultidatashowserieslabels\030\023 \001"
  "(\010\022&\n\036tschchartaxiscategoryshowtitle\030\r \001"
  "(\010\022#\n\033tschchartaxisvalueshowtitle\030\016 \001(\010\022"
  "\"\n\032tschchartaxiscategorytitle\030\017 \001(\t\022\037\n\027t"
  "schchartaxisvaluetitle\030\020 \001(\t\022F\n\033tschchar"
  "taxisdefaultusermax\030\021 \001(\0132!.TSCH.ChartsN"
  "SNumberDoubleArchive\022F\n\033tschchartaxisdef"
  "aultusermin\030\022 \001(\0132!.TSCH.ChartsNSNumberD"
  "oubleArchive2Z\n\007current\022\036.TSCH.ChartAxis"
  "NonStyleArchive\030\220N \001(\0132(.TSCH.Generated."
  "ChartAxisNonStyleArchive\"\307+\n\027ChartSeries"
  "StyleArchive\022B\n%tschchartseriesdefaulter"
  "rorbarlineend\030\001 \001(\0132\023.TSD.LineEndArchive"
  "\022J\n-tschchartseriesdefaulterrorbarlineen"
  "dscatterx\030\002 \001(\0132\023.TSD.LineEndArchive\022@\n$"
  "tschchartseriesdefaulterrorbarshadow\030\003 \001"
  "(\0132\022.TSD.ShadowArchive\022@\n$tschchartserie"
  "sdefaulterrorbarstroke\030\004 \001(\0132\022.TSD.Strok"
  "eArchive\022H\n,tschchartseriesdefaulterrorb"
  "arstrokescatterx\030\005 \001(\0132\022.TSD.StrokeArchi"
  "ve\0223\n\031tschchartseries3dareafill\030\006 \001(\0132\020."
  "TSD.FillArchive\0222\n\030tschchartseries3dbarf"
  "ill\030\007 \001(\0132\020.TSD.FillArchive\0225\n\033tschchart"
  "series3dcolumnfill\030\010 \001(\0132\020.TSD.FillArchi"
  "ve\0223\n\031tschchartseries3dlinefill\030\t \001(\0132\020."
  "TSD.FillArchive\0222\n\030tschchartseries3dpief"
  "ill\030\n \001(\0132\020.TSD.FillArchive\0221\n\027tschchart"
  "seriesareafill\030\013 \001(\0132\020.TSD.FillArchive\0220"
  "\n\026tschchartseriesbarfill\030\014 \001(\0132\020.TSD.Fil"
  "lArchive\0223\n\031tschchartseriescolumnfill\030\r "
  "\001(\0132\020.TSD.FillArchive\0224\n\032tschchartseries"
  "defaultfill\030\016 \001(\0132\020.TSD.FillArchive\0226\n\034t"
  "schchartseriesmixedareafill\030\017 \001(\0132\020.TSD."
  "FillArchive\0228\n\036tschchartseriesmixedcolum"
  "nfill\030\020 \001(\0132\020.TSD.FillArchive\0220\n\026tschcha"
  "rtseriespiefill\030\021 \001(\0132\020.TSD.FillArchive\022"
  "3\n+tschchartseriesarealabelparagraphstyl"
  "eindex\030\022 \001(\005\0222\n*tschchartseriesbarlabelp"
  "aragraphstyleindex\030\023 \001(\005\0226\n.tschchartser"
  "iesdefaultlabelparagraphstyleindex\030\024 \001(\005"
  "\0223\n+tschchartserieslinelabelparagraphsty"
  "leindex\030\025 \001(\005\0224\n,tschchartseriesmixedlab"
  "elparagraphstyleindex\030\026 \001(\005\0222\n*tschchart"
  "seriespielabelparagraphstyleindex\030\027 \001(\005\022"
  "%\n\035tschchartseriesdefaultopacity\030\030 \001(\002\022:"
  "\n2tschchartseriesareaoutsidelabelparagra"
  "phstyleindex\030\031 \001(\005\0229\n1tschchartseriesbar"
  "outsidelabelparagraphstyleindex\030\032 \001(\005\022=\n"
  "5tschchartseriesdefaultoutsidelabelparag"
  "raphstyleindex\030\033 \001(\005\022;\n3tschchartseriesm"
  "ixedoutsidelabelparagraphstyleindex\030\034 \001("
  "\005\0229\n1tschchartseriespieoutsidelabelparag"
  "raphstyleindex\030\035 \001(\005\0227\n\033tschchartseries3"
  "dareashadow\030\036 \001(\0132\022.TSD.ShadowArchive\0226\n"
  "\032tschchartseries3dbarshadow\030\037 \001(\0132\022.TSD."
  "ShadowArchive\0229\n\035tschchartseries3dcolumn"
  "shadow\030  \001(\0132\022.TSD.ShadowArchive\0227\n\033tsch"
  "chartseries3dlineshadow\030! \001(\0132\022.TSD.Shad"
  "owArchive\0226\n\032tschchartseries3dpieshadow\030"
  "\" \001(\0132\022.TSD.ShadowArchive\0225\n\031tschchartse"
  "riesareashadow\030# \001(\0132\022.TSD.ShadowArchive"
  "\0224\n\030tschchartseriesbarshadow\030$ \001(\0132\022.TSD"
  ".ShadowArchive\0227\n\033tschchartseriesbubbles"
  "hadow\030% \001(\0132\022.TSD.ShadowArchive\0228\n\034tschc"
  "hartseriesdefaultshadow\030& \001(\0132\022.TSD.Shad"
  "owArchive\0225\n\031tschchartserieslineshadow\030\'"
  " \001(\0132\022.TSD.ShadowArchive\022:\n\036tschchartser"
  "iesmixedareashadow\030( \001(\0132\022.TSD.ShadowArc"
  "hive\022<\n tschchartseriesmixedcolumnshadow"
  "\030) \001(\0132\022.TSD.ShadowArchive\022:\n\036tschcharts"
  "eriesmixedlineshadow\030* \001(\0132\022.TSD.ShadowA"
  "rchive\0224\n\030tschchartseriespieshadow\030+ \001(\013"
  "2\022.TSD.ShadowArchive\0228\n\034tschchartseriess"
  "cattershadow\030, \001(\0132\022.TSD.ShadowArchive\0225"
  "\n\031tschchartseriesareastroke\030- \001(\0132\022.TSD."
  "StrokeArchive\0224\n\030tschchartseriesbarstrok"
  "e\030. \001(\0132\022.TSD.StrokeArchive\0227\n\033tschchart"
  "seriesbubblestroke\030/ \001(\0132\022.TSD.StrokeArc"
  "hive\0225\n\031tschchartserieslinestroke\0300 \001(\0132"
  "\022.TSD.StrokeArchive\022:\n\036tschchartseriesmi"
  "xedareastroke\0301 \001(\0132\022.TSD.StrokeArchive\022"
  "<\n tschchartseriesmixedcolumnstroke\0302 \001("
  "\0132\022.TSD.StrokeArchive\022:\n\036tschchartseries"
  "mixedlinestroke\0303 \001(\0132\022.TSD.StrokeArchiv"
  "e\0224\n\030tschchartseriespiestroke\0304 \001(\0132\022.TS"
  "D.StrokeArchive\0228\n\034tschchartseriesscatte"
  "rstroke\0305 \001(\0132\022.TSD.StrokeArchive\0227\n\035tsc"
  "hchartseriesareasymbolfill\0306 \001(\0132\020.TSD.F"
  "illArchive\0229\n\037tschchartseriesbubblesymbo"
  "lfill\0307 \001(\0132\020.TSD.FillArchive\0227\n\035tschcha"
  "rtserieslinesymbolfill\0308 \001(\0132\020.TSD.FillA"
  "rchive\022<\n\"tschchartseriesmixedareasymbol"
  "fill\0309 \001(\0132\020.TSD.FillArchive\022<\n\"tschchar"
  "tseriesmixedlinesymbolfill\030: \001(\0132\020.TSD.F"
  "illArchive\022:\n tschchartseriesscattersymb"
  "olfill\030; \001(\0132\020.TSD.FillArchive\0222\n*tschch"
  "artseriesareasymbolfilluseseriesfill\030< \001"
  "(\010\0222\n*tschchartserieslinesymbolfillusese"
  "riesfill\030= \001(\010\0227\n/tschchartseriesmixedar"
  "easymbolfilluseseriesfill\030> \001(\010\0227\n/tschc"
  "hartseriesmixedlinesymbolfilluseseriesfi"
  "ll\030\? \001(\010\0224\n,tschchartseriesareasymbolfil"
  "luseseriesstroke\030@ \001(\010\0226\n.tschchartserie"
  "sbubblesymbolfilluseseriesstroke\030A \001(\010\0224"
  "\n,tschchartserieslinesymbolfilluseseries"
  "stroke\030B \001(\010\0229\n1tschchartseriesmixedarea"
  "symbolfilluseseriesstroke\030C \001(\010\0229\n1tschc"
  "hartseriesmixedlinesymbolfilluseseriesst"
  "roke\030D \001(\010\0227\n/tschchartseriesscattersymb"
  "olfilluseseriesstroke\030E \001(\010\022%\n\035tschchart"
  "seriesareasymbolsize\030F \001(\002\022%\n\035tschcharts"
  "erieslinesymbolsize\030G \001(\002\022*\n\"tschchartse"
  "riesmixedareasymbolsize\030H \001(\002\022*\n\"tschcha"
  "rtseriesmixedlinesymbolsize\030I \001(\002\022(\n tsc"
  "hchartseriesscattersymbolsize\030J \001(\002\022;\n\037t"
  "schchartseriesareasymbolstroke\030K \001(\0132\022.T"
  "SD.StrokeArchive\022=\n!tschchartseriesbubbl"
  "esymbolstroke\030L \001(\0132\022.TSD.StrokeArchive\022"
  ";\n\037tschchartserieslinesymbolstroke\030M \001(\013"
  "2\022.TSD.StrokeArchive\022@\n$tschchartseriesm"
  "ixedareasymbolstroke\030N \001(\0132\022.TSD.StrokeA"
  "rchive\022@\n$tschchartseriesmixedlinesymbol"
  "stroke\030O \001(\0132\022.TSD.StrokeArchive\022>\n\"tsch"
  "chartseriesscattersymbolstroke\030P \001(\0132\022.T"
  "SD.StrokeArchive\0226\n.tschchartseriesdefau"
  "lttrendlineequationopacity\030Q \001(\002\022B\n:tsch"
  "chartseriesdefaulttrendlineequationparag"
  "raphstyleindex\030R \001(\005\0226\n.tschchartseriesd"
  "efaulttrendlinersquaredopacity\030S \001(\002\022B\n:"
  "tschchartseriesdefaulttrendlinersquaredp"
  "aragraphstyleindex\030T \001(\005\022A\n%tschchartser"
  "iesdefaulttrendlineshadow\030U \001(\0132\022.TSD.Sh"
  "adowArchive\022A\n%tschchartseriesdefaulttre"
  "ndlinestroke\030V \001(\0132\022.TSD.StrokeArchive\022-"
  "\n%tschchartseriesareavaluelabelposition\030"
  "W \001(\005\022,\n$tschchartseriesbarvaluelabelpos"
  "ition\030X \001(\005\022/\n\'tschchartseriesbubblevalu"
  "elabelposition\030Y \001(\005\0220\n(tschchartseriesd"
  "efaultvaluelabelposition\030Z \001(\005\022-\n%tschch"
  "artserieslinevaluelabelposition\030[ \001(\005\0222\n"
  "*tschchartseriesmixedareavaluelabelposit"
  "ion\030\\ \001(\005\0224\n,tschchartseriesmixedcolumnv"
  "aluelabelposition\030] \001(\005\0222\n*tschchartseri"
  "esmixedlinevaluelabelposition\030^ \001(\005\0220\n(t"
  "schchartseriesscattervaluelabelposition\030"
  "_ \001(\005\0224\n,tschchartseriesstackedareavalue"
  "labelposition\030` \001(\005\0223\n+tschchartseriesst"
  "ackedbarvaluelabelposition\030a \001(\0052X\n\007curr"
  "ent\022\035.TSCH.ChartSeriesStyleArchive\030\220N \001("
  "\0132\'.TSCH.Generated.ChartSeriesStyleArchi"
  "ve\"\223\034\n\032ChartSeriesNonStyleArchive\022,\n$tsc"
  "hchartseriesbubbleadjustmentscale\030\001 \001(\002\022"
  "d\n0tschchartseriesdefaulterrorbarcustomn"
  "egativedata\030\002 \001(\0132*.TSCH.ChartsNSArrayOf"
  "NSNumberDoubleArchive\022l\n8tschchartseries"
  "defaulterrorbarcustomnegativedatascatter"
  "x\030\003 \001(\0132*.TSCH.ChartsNSArrayOfNSNumberDo"
  "ubleArchive\022d\n0tschchartseriesdefaulterr"
  "orbarcustompositivedata\030\004 \001(\0132*.TSCH.Cha"
  "rtsNSArrayOfNSNumberDoubleArchive\022l\n8tsc"
  "hchartseriesdefaulterrorbarcustompositiv"
  "edatascatterx\030\005 \001(\0132*.TSCH.ChartsNSArray"
  "OfNSNumberDoubleArchive\0220\n(tschchartseri"
  "esdefaulterrorbarfixedvalue\030\006 \001(\002\0228\n0tsc"
  "hchartseriesdefaulterrorbarfixedvaluesca"
  "tterx\030\007 \001(\002\0222\n*tschchartseriesdefaulterr"
  "orbarpercentvalue\030\010 \001(\002\022:\n2tschchartseri"
  "esdefaulterrorbarpercentvaluescatterx\030\t "
  "\001(\002\022-\n%tschchartseriesdefaulterrorbarset"
  "ting\030\n \001(\005\0225\n-tschchartseriesdefaulterro"
  "rbarsettingscatterx\030\013 \001(\005\0221\n)tschchartse"
  "riesdefaulterrorbarstddevvalue\030\014 \001(\002\0229\n1"
  "tschchartseriesdefaulterrorbarstddevvalu"
  "escatterx\030\r \001(\002\022*\n\"tschchartseriesdefaul"
  "terrorbartype\030\016 \001(\005\0222\n*tschchartseriesde"
  "faulterrorbartypescatterx\030\017 \001(\005\022(\n tschc"
  "hartseriespielabelexplosion\030\020 \001(\002\022%\n\035tsc"
  "hchartseriesbubblelinetype\030\021 \001(\005\022#\n\033tsch"
  "chartserieslinelinetype\030\022 \001(\005\022(\n tschcha"
  "rtseriesmixedlinelinetype\030\023 \001(\005\022&\n\036tschc"
  "hartseriesscatterlinetype\030\024 \001(\005\022D\n\"tschc"
  "hartseriesdefaultnumberformat\030\025 \001(\0132\030.TS"
  "K.FormatStructArchive\022@\n\036tschchartseries"
  "pienumberformat\030\026 \001(\0132\030.TSK.FormatStruct"
  "Archive\022.\n&tschchartseriesdefaultnumberf"
  "ormattype\030\027 \001(\005\022*\n\"tschchartseriespienum"
  "berformattype\030\030 \001(\005\022K\n)tschchartseriesst"
  "ackedpercentnumberformat\030\031 \001(\0132\030.TSK.For"
  "matStructArchive\022(\n tschchartseriesdefau"
  "ltseriestype\030\032 \001(\005\022*\n\"tschchartseriesdef"
  "aultshowerrorbar\030\033 \001(\010\0222\n*tschchartserie"
  "sdefaultshowerrorbarscatterx\030\034 \001(\010\022&\n\036ts"
  "chchartseriesscattershowline\030\035 \001(\010\022-\n%ts"
  "chchartseriesbubbleshownegativedata\030\036 \001("
  "\010\022*\n\"tschchartseriespieshowserieslabels\030"
  "\037 \001(\010\022%\n\035tschchartseriesareashowsymbol\030 "
  " \001(\010\022%\n\035tschchartserieslineshowsymbol\030! "
  "\001(\010\022*\n\"tschchartseriesmixedareashowsymbo"
  "l\030\" \001(\010\022*\n\"tschchartseriesmixedlineshows"
  "ymbol\030# \001(\010\022(\n tschchartseriesscattersho"
  "wsymbol\030$ \001(\010\022+\n#tschchartseriesdefaults"
  "howtrendline\030% \001(\010\022*\n\"tschchartseriesare"
  "ashowvaluelabels\030& \001(\010\022)\n!tschchartserie"
  "sbarshowvaluelabels\030\' \001(\010\022,\n$tschchartse"
  "riesbubbleshowvaluelabels\030( \001(\010\022-\n%tschc"
  "hartseriesdefaultshowvaluelabels\030) \001(\010\022*"
  "\n\"tschchartserieslineshowvaluelabels\030* \001"
  "(\010\022+\n#tschchartseriesmixedshowvaluelabel"
  "s\030+ \001(\010\022)\n!tschchartseriespieshowvaluela"
  "bels\030, \001(\010\022-\n%tschchartseriesscattershow"
  "valuelabels\030- \001(\010\022*\n\"tschchartseriesbubb"
  "lesizedimension\030. \001(\005\022%\n\035tschchartseries"
  "areasymboltype\030/ \001(\005\022%\n\035tschchartseriesl"
  "inesymboltype\0300 \001(\005\022*\n\"tschchartseriesmi"
  "xedareasymboltype\0301 \001(\005\022*\n\"tschchartseri"
  "esmixedlinesymboltype\0302 \001(\005\022(\n tschchart"
  "seriesscattersymboltype\0303 \001(\005\0226\n.tschcha"
  "rtseriesdefaulttrendlineequationoffsetx\030"
  "4 \001(\002\0226\n.tschchartseriesdefaulttrendline"
  "equationoffsety\0305 \001(\002\0222\n*tschchartseries"
  "defaulttrendlinelabelstring\0306 \001(\t\022,\n$tsc"
  "hchartseriesdefaulttrendlineorder\0307 \001(\005\022"
  "-\n%tschchartseriesdefaulttrendlineperiod"
  "\0308 \001(\005\0226\n.tschchartseriesdefaulttrendlin"
  "ersquaredoffsetx\0309 \001(\002\0226\n.tschchartserie"
  "sdefaulttrendlinersquaredoffsety\030: \001(\002\0223"
  "\n+tschchartseriesdefaulttrendlineshowequ"
  "ation\030; \001(\010\0220\n(tschchartseriesdefaulttre"
  "ndlineshowlabel\030< \001(\010\0222\n*tschchartseries"
  "defaulttrendlineshowr2value\030= \001(\010\022+\n#tsc"
  "hchartseriesdefaulttrendlinetype\030> \001(\005\022("
  "\n tschchartseriespiewedgeexplosion\030\? \001(\002"
  "\022*\n\"tschchartseriesdefaultyaxisordinal\030@"
  " \001(\005\022-\n%tschchartseriesbubbleshowseriesl"
  "abels\030A \001(\010\022,\n$tschchartseriesbubblevalu"
  "elabelsaxis\030B \001(\005\022.\n&tschchartseriesscat"
  "tershowserieslabels\030C \001(\010\022-\n%tschchartse"
  "riesscattervaluelabelsaxis\030D \001(\0052^\n\007curr"
  "ent\022 .TSCH.ChartSeriesNonStyleArchive\030\220N"
  " \001(\0132*.TSCH.Generated.ChartSeriesNonStyl"
  "eArchive"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_TSCHArchives_2eGEN_2eproto_deps[6] = {
  &::descriptor_table_TSCH3DArchives_2eproto,
  &::descriptor_table_TSCHArchives_2eCommon_2eproto,
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
};
static ::_pbi::once_flag descriptor_table_TSCHArchives_2eGEN_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TSCHArchives_2eGEN_2eproto = {
    false, false, 15528, descriptor_table_protodef_TSCHArchives_2eGEN_2eproto,
    "TSCHArchives.GEN.proto",
    &descriptor_table_TSCHArchives_2eGEN_2eproto_once, descriptor_table_TSCHArchives_2eGEN_2eproto_deps, 6, 8,
    schemas, file_default_instances, TableStruct_TSCHArchives_2eGEN_2eproto::offsets,
    file_level_metadata_TSCHArchives_2eGEN_2eproto, file_level_enum_descriptors_TSCHArchives_2eGEN_2eproto,
    file_level_service_descriptors_TSCHArchives_2eGEN_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TSCHArchives_2eGEN_2eproto_getter() {
  return &descriptor_table_TSCHArchives_2eGEN_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TSCHArchives_2eGEN_2eproto(&descriptor_table_TSCHArchives_2eGEN_2eproto);
namespace TSCH {
namespace Generated {

// ===================================================================

class ChartStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartStyleArchive>()._impl_._has_bits_);
  static void set_has_tschchartinfodefault3dchartopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfoarea3dlightingpackage(const ChartStyleArchive* msg);
  static void set_has_tschchartinfoarea3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfobar3dlightingpackage(const ChartStyleArchive* msg);
  static void set_has_tschchartinfobar3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfocolumn3dlightingpackage(const ChartStyleArchive* msg);
  static void set_has_tschchartinfocolumn3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfodefault3dlightingpackage(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefault3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfoline3dlightingpackage(const ChartStyleArchive* msg);
  static void set_has_tschchartinfoline3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfopie3dlightingpackage(const ChartStyleArchive* msg);
  static void set_has_tschchartinfopie3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSD::FillArchive& tschchartinfodefaultbackgroundfill(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaultbackgroundfill(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSD::StrokeArchive& tschchartinfodefaultbackgroundstroke(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaultbackgroundstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tschchartinfodefaultborderopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSD::ShadowArchive& tschchartinfodefaultbordershadow(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaultbordershadow(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSD::StrokeArchive& tschchartinfodefaultborderstroke(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaultborderstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tschchartinfodefaultcombinelayers(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSD::FillArchive& tschchartinfodefaultgridbackgroundfill(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaultgridbackgroundfill(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tschchartinfodefaultgridbackgroundopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tschchartinfodefaultinterbargap(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tschchartinfodefaultintersetgap(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_tschchartinfodefaultshowborder(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TSP::Color& tschchartinfodefaulttitlecolor(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaulttitlecolor(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tschchartinfodefaulttitleparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_tschchartinfodefaultdatasetnameparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

const ::TSCH::Chart3DLightingPackageArchive&
ChartStyleArchive::_Internal::tschchartinfoarea3dlightingpackage(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfoarea3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartStyleArchive::_Internal::tschchartinfobar3dlightingpackage(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfobar3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartStyleArchive::_Internal::tschchartinfocolumn3dlightingpackage(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfocolumn3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartStyleArchive::_Internal::tschchartinfodefault3dlightingpackage(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefault3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartStyleArchive::_Internal::tschchartinfoline3dlightingpackage(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfoline3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartStyleArchive::_Internal::tschchartinfopie3dlightingpackage(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfopie3dlightingpackage_;
}
const ::TSD::FillArchive&
ChartStyleArchive::_Internal::tschchartinfodefaultbackgroundfill(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefaultbackgroundfill_;
}
const ::TSD::StrokeArchive&
ChartStyleArchive::_Internal::tschchartinfodefaultbackgroundstroke(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefaultbackgroundstroke_;
}
const ::TSD::ShadowArchive&
ChartStyleArchive::_Internal::tschchartinfodefaultbordershadow(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefaultbordershadow_;
}
const ::TSD::StrokeArchive&
ChartStyleArchive::_Internal::tschchartinfodefaultborderstroke(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefaultborderstroke_;
}
const ::TSD::FillArchive&
ChartStyleArchive::_Internal::tschchartinfodefaultgridbackgroundfill(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefaultgridbackgroundfill_;
}
const ::TSP::Color&
ChartStyleArchive::_Internal::tschchartinfodefaulttitlecolor(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefaulttitlecolor_;
}
void ChartStyleArchive::clear_tschchartinfoarea3dlightingpackage() {
  if (_impl_.tschchartinfoarea3dlightingpackage_ != nullptr) _impl_.tschchartinfoarea3dlightingpackage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ChartStyleArchive::clear_tschchartinfobar3dlightingpackage() {
  if (_impl_.tschchartinfobar3dlightingpackage_ != nullptr) _impl_.tschchartinfobar3dlightingpackage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ChartStyleArchive::clear_tschchartinfocolumn3dlightingpackage() {
  if (_impl_.tschchartinfocolumn3dlightingpackage_ != nullptr) _impl_.tschchartinfocolumn3dlightingpackage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ChartStyleArchive::clear_tschchartinfodefault3dlightingpackage() {
  if (_impl_.tschchartinfodefault3dlightingpackage_ != nullptr) _impl_.tschchartinfodefault3dlightingpackage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ChartStyleArchive::clear_tschchartinfoline3dlightingpackage() {
  if (_impl_.tschchartinfoline3dlightingpackage_ != nullptr) _impl_.tschchartinfoline3dlightingpackage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ChartStyleArchive::clear_tschchartinfopie3dlightingpackage() {
  if (_impl_.tschchartinfopie3dlightingpackage_ != nullptr) _impl_.tschchartinfopie3dlightingpackage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ChartStyleArchive::clear_tschchartinfodefaultbackgroundfill() {
  if (_impl_.tschchartinfodefaultbackgroundfill_ != nullptr) _impl_.tschchartinfodefaultbackgroundfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ChartStyleArchive::clear_tschchartinfodefaultbackgroundstroke() {
  if (_impl_.tschchartinfodefaultbackgroundstroke_ != nullptr) _impl_.tschchartinfodefaultbackgroundstroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void ChartStyleArchive::clear_tschchartinfodefaultbordershadow() {
  if (_impl_.tschchartinfodefaultbordershadow_ != nullptr) _impl_.tschchartinfodefaultbordershadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void ChartStyleArchive::clear_tschchartinfodefaultborderstroke() {
  if (_impl_.tschchartinfodefaultborderstroke_ != nullptr) _impl_.tschchartinfodefaultborderstroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void ChartStyleArchive::clear_tschchartinfodefaultgridbackgroundfill() {
  if (_impl_.tschchartinfodefaultgridbackgroundfill_ != nullptr) _impl_.tschchartinfodefaultgridbackgroundfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void ChartStyleArchive::clear_tschchartinfodefaulttitlecolor() {
  if (_impl_.tschchartinfodefaulttitlecolor_ != nullptr) _impl_.tschchartinfodefaulttitlecolor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
ChartStyleArchive::ChartStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.ChartStyleArchive)
}
ChartStyleArchive::ChartStyleArchive(const ChartStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartinfoarea3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfobar3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfocolumn3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfodefault3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfoline3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfopie3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfodefaultbackgroundfill_){nullptr}
    , decltype(_impl_.tschchartinfodefaultbackgroundstroke_){nullptr}
    , decltype(_impl_.tschchartinfodefaultbordershadow_){nullptr}
    , decltype(_impl_.tschchartinfodefaultborderstroke_){nullptr}
    , decltype(_impl_.tschchartinfodefaultgridbackgroundfill_){nullptr}
    , decltype(_impl_.tschchartinfodefaulttitlecolor_){nullptr}
    , decltype(_impl_.tschchartinfodefault3dchartopacity_){}
    , decltype(_impl_.tschchartinfodefaultborderopacity_){}
    , decltype(_impl_.tschchartinfodefaultgridbackgroundopacity_){}
    , decltype(_impl_.tschchartinfodefaultcombinelayers_){}
    , decltype(_impl_.tschchartinfodefaultshowborder_){}
    , decltype(_impl_.tschchartinfodefaultinterbargap_){}
    , decltype(_impl_.tschchartinfodefaultintersetgap_){}
    , decltype(_impl_.tschchartinfodefaulttitleparagraphstyleindex_){}
    , decltype(_impl_.tschchartinfodefaultdatasetnameparagraphstyleindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tschchartinfoarea3dlightingpackage()) {
    _this->_impl_.tschchartinfoarea3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from._impl_.tschchartinfoarea3dlightingpackage_);
  }
  if (from._internal_has_tschchartinfobar3dlightingpackage()) {
    _this->_impl_.tschchartinfobar3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from._impl_.tschchartinfobar3dlightingpackage_);
  }
  if (from._internal_has_tschchartinfocolumn3dlightingpackage()) {
    _this->_impl_.tschchartinfocolumn3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from._impl_.tschchartinfocolumn3dlightingpackage_);
  }
  if (from._internal_has_tschchartinfodefault3dlightingpackage()) {
    _this->_impl_.tschchartinfodefault3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from._impl_.tschchartinfodefault3dlightingpackage_);
  }
  if (from._internal_has_tschchartinfoline3dlightingpackage()) {
    _this->_impl_.tschchartinfoline3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from._impl_.tschchartinfoline3dlightingpackage_);
  }
  if (from._internal_has_tschchartinfopie3dlightingpackage()) {
    _this->_impl_.tschchartinfopie3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from._impl_.tschchartinfopie3dlightingpackage_);
  }
  if (from._internal_has_tschchartinfodefaultbackgroundfill()) {
    _this->_impl_.tschchartinfodefaultbackgroundfill_ = new ::TSD::FillArchive(*from._impl_.tschchartinfodefaultbackgroundfill_);
  }
  if (from._internal_has_tschchartinfodefaultbackgroundstroke()) {
    _this->_impl_.tschchartinfodefaultbackgroundstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartinfodefaultbackgroundstroke_);
  }
  if (from._internal_has_tschchartinfodefaultbordershadow()) {
    _this->_impl_.tschchartinfodefaultbordershadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartinfodefaultbordershadow_);
  }
  if (from._internal_has_tschchartinfodefaultborderstroke()) {
    _this->_impl_.tschchartinfodefaultborderstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartinfodefaultborderstroke_);
  }
  if (from._internal_has_tschchartinfodefaultgridbackgroundfill()) {
    _this->_impl_.tschchartinfodefaultgridbackgroundfill_ = new ::TSD::FillArchive(*from._impl_.tschchartinfodefaultgridbackgroundfill_);
  }
  if (from._internal_has_tschchartinfodefaulttitlecolor()) {
    _this->_impl_.tschchartinfodefaulttitlecolor_ = new ::TSP::Color(*from._impl_.tschchartinfodefaulttitlecolor_);
  }
  ::memcpy(&_impl_.tschchartinfodefault3dchartopacity_, &from._impl_.tschchartinfodefault3dchartopacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tschchartinfodefaultdatasetnameparagraphstyleindex_) -
    reinterpret_cast<char*>(&_impl_.tschchartinfodefault3dchartopacity_)) + sizeof(_impl_.tschchartinfodefaultdatasetnameparagraphstyleindex_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.ChartStyleArchive)
}

inline void ChartStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartinfoarea3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfobar3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfocolumn3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfodefault3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfoline3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfopie3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfodefaultbackgroundfill_){nullptr}
    , decltype(_impl_.tschchartinfodefaultbackgroundstroke_){nullptr}
    , decltype(_impl_.tschchartinfodefaultbordershadow_){nullptr}
    , decltype(_impl_.tschchartinfodefaultborderstroke_){nullptr}
    , decltype(_impl_.tschchartinfodefaultgridbackgroundfill_){nullptr}
    , decltype(_impl_.tschchartinfodefaulttitlecolor_){nullptr}
    , decltype(_impl_.tschchartinfodefault3dchartopacity_){0}
    , decltype(_impl_.tschchartinfodefaultborderopacity_){0}
    , decltype(_impl_.tschchartinfodefaultgridbackgroundopacity_){0}
    , decltype(_impl_.tschchartinfodefaultcombinelayers_){false}
    , decltype(_impl_.tschchartinfodefaultshowborder_){false}
    , decltype(_impl_.tschchartinfodefaultinterbargap_){0}
    , decltype(_impl_.tschchartinfodefaultintersetgap_){0}
    , decltype(_impl_.tschchartinfodefaulttitleparagraphstyleindex_){0}
    , decltype(_impl_.tschchartinfodefaultdatasetnameparagraphstyleindex_){0}
  };
}

ChartStyleArchive::~ChartStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.ChartStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tschchartinfoarea3dlightingpackage_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfobar3dlightingpackage_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfocolumn3dlightingpackage_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefault3dlightingpackage_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfoline3dlightingpackage_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfopie3dlightingpackage_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefaultbackgroundfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefaultbackgroundstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefaultbordershadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefaultborderstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefaultgridbackgroundfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefaulttitlecolor_;
}

void ChartStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.ChartStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.tschchartinfoarea3dlightingpackage_ != nullptr);
      _impl_.tschchartinfoarea3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tschchartinfobar3dlightingpackage_ != nullptr);
      _impl_.tschchartinfobar3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tschchartinfocolumn3dlightingpackage_ != nullptr);
      _impl_.tschchartinfocolumn3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefault3dlightingpackage_ != nullptr);
      _impl_.tschchartinfodefault3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.tschchartinfoline3dlightingpackage_ != nullptr);
      _impl_.tschchartinfoline3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.tschchartinfopie3dlightingpackage_ != nullptr);
      _impl_.tschchartinfopie3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefaultbackgroundfill_ != nullptr);
      _impl_.tschchartinfodefaultbackgroundfill_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefaultbackgroundstroke_ != nullptr);
      _impl_.tschchartinfodefaultbackgroundstroke_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefaultbordershadow_ != nullptr);
      _impl_.tschchartinfodefaultbordershadow_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefaultborderstroke_ != nullptr);
      _impl_.tschchartinfodefaultborderstroke_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefaultgridbackgroundfill_ != nullptr);
      _impl_.tschchartinfodefaultgridbackgroundfill_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefaulttitlecolor_ != nullptr);
      _impl_.tschchartinfodefaulttitlecolor_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f000u) {
    ::memset(&_impl_.tschchartinfodefault3dchartopacity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartinfodefaultcombinelayers_) -
        reinterpret_cast<char*>(&_impl_.tschchartinfodefault3dchartopacity_)) + sizeof(_impl_.tschchartinfodefaultcombinelayers_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&_impl_.tschchartinfodefaultshowborder_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartinfodefaultdatasetnameparagraphstyleindex_) -
        reinterpret_cast<char*>(&_impl_.tschchartinfodefaultshowborder_)) + sizeof(_impl_.tschchartinfodefaultdatasetnameparagraphstyleindex_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float tschchartinfodefault3dchartopacity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_tschchartinfodefault3dchartopacity(&has_bits);
          _impl_.tschchartinfodefault3dchartopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfoarea3dlightingpackage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfobar3dlightingpackage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfocolumn3dlightingpackage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefault3dlightingpackage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfoline3dlightingpackage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfopie3dlightingpackage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultbackgroundfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultbackgroundstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultborderopacity = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_tschchartinfodefaultborderopacity(&has_bits);
          _impl_.tschchartinfodefaultborderopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultbordershadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultborderstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultcombinelayers = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_tschchartinfodefaultcombinelayers(&has_bits);
          _impl_.tschchartinfodefaultcombinelayers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultgridbackgroundfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultgridbackgroundopacity = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_tschchartinfodefaultgridbackgroundopacity(&has_bits);
          _impl_.tschchartinfodefaultgridbackgroundopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultinterbargap = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _Internal::set_has_tschchartinfodefaultinterbargap(&has_bits);
          _impl_.tschchartinfodefaultinterbargap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultintersetgap = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _Internal::set_has_tschchartinfodefaultintersetgap(&has_bits);
          _impl_.tschchartinfodefaultintersetgap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultshowborder = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_tschchartinfodefaultshowborder(&has_bits);
          _impl_.tschchartinfodefaultshowborder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Color tschchartinfodefaulttitlecolor = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaulttitlecolor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartinfodefaulttitleparagraphstyleindex = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_tschchartinfodefaulttitleparagraphstyleindex(&has_bits);
          _impl_.tschchartinfodefaulttitleparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartinfodefaultdatasetnameparagraphstyleindex = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_tschchartinfodefaultdatasetnameparagraphstyleindex(&has_bits);
          _impl_.tschchartinfodefaultdatasetnameparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.ChartStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float tschchartinfodefault3dchartopacity = 1;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_tschchartinfodefault3dchartopacity(), target);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tschchartinfoarea3dlightingpackage(this),
        _Internal::tschchartinfoarea3dlightingpackage(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::tschchartinfobar3dlightingpackage(this),
        _Internal::tschchartinfobar3dlightingpackage(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::tschchartinfocolumn3dlightingpackage(this),
        _Internal::tschchartinfocolumn3dlightingpackage(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::tschchartinfodefault3dlightingpackage(this),
        _Internal::tschchartinfodefault3dlightingpackage(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::tschchartinfoline3dlightingpackage(this),
        _Internal::tschchartinfoline3dlightingpackage(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::tschchartinfopie3dlightingpackage(this),
        _Internal::tschchartinfopie3dlightingpackage(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::tschchartinfodefaultbackgroundfill(this),
        _Internal::tschchartinfodefaultbackgroundfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::tschchartinfodefaultbackgroundstroke(this),
        _Internal::tschchartinfodefaultbackgroundstroke(this).GetCachedSize(), target, stream);
  }

  // optional float tschchartinfodefaultborderopacity = 10;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_tschchartinfodefaultborderopacity(), target);
  }

  // optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::tschchartinfodefaultbordershadow(this),
        _Internal::tschchartinfodefaultbordershadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::tschchartinfodefaultborderstroke(this),
        _Internal::tschchartinfodefaultborderstroke(this).GetCachedSize(), target, stream);
  }

  // optional bool tschchartinfodefaultcombinelayers = 13;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_tschchartinfodefaultcombinelayers(), target);
  }

  // optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::tschchartinfodefaultgridbackgroundfill(this),
        _Internal::tschchartinfodefaultgridbackgroundfill(this).GetCachedSize(), target, stream);
  }

  // optional float tschchartinfodefaultgridbackgroundopacity = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_tschchartinfodefaultgridbackgroundopacity(), target);
  }

  // optional float tschchartinfodefaultinterbargap = 16;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_tschchartinfodefaultinterbargap(), target);
  }

  // optional float tschchartinfodefaultintersetgap = 17;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_tschchartinfodefaultintersetgap(), target);
  }

  // optional bool tschchartinfodefaultshowborder = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_tschchartinfodefaultshowborder(), target);
  }

  // optional .TSP.Color tschchartinfodefaulttitlecolor = 19;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::tschchartinfodefaulttitlecolor(this),
        _Internal::tschchartinfodefaulttitlecolor(this).GetCachedSize(), target, stream);
  }

  // optional int32 tschchartinfodefaulttitleparagraphstyleindex = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_tschchartinfodefaulttitleparagraphstyleindex(), target);
  }

  // optional int32 tschchartinfodefaultdatasetnameparagraphstyleindex = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_tschchartinfodefaultdatasetnameparagraphstyleindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.ChartStyleArchive)
  return target;
}

size_t ChartStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.ChartStyleArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfoarea3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfobar3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfocolumn3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefault3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfoline3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfopie3dlightingpackage_);
    }

    // optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefaultbackgroundfill_);
    }

    // optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefaultbackgroundstroke_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefaultbordershadow_);
    }

    // optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefaultborderstroke_);
    }

    // optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefaultgridbackgroundfill_);
    }

    // optional .TSP.Color tschchartinfodefaulttitlecolor = 19;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefaulttitlecolor_);
    }

    // optional float tschchartinfodefault3dchartopacity = 1;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartinfodefaultborderopacity = 10;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartinfodefaultgridbackgroundopacity = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional bool tschchartinfodefaultcombinelayers = 13;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional bool tschchartinfodefaultshowborder = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional float tschchartinfodefaultinterbargap = 16;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartinfodefaultintersetgap = 17;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartinfodefaulttitleparagraphstyleindex = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodefaulttitleparagraphstyleindex());
    }

    // optional int32 tschchartinfodefaultdatasetnameparagraphstyleindex = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodefaultdatasetnameparagraphstyleindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartStyleArchive::GetClassData() const { return &_class_data_; }


void ChartStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartStyleArchive*>(&to_msg);
  auto& from = static_cast<const ChartStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.ChartStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_tschchartinfoarea3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(
          from._internal_tschchartinfoarea3dlightingpackage());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tschchartinfobar3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(
          from._internal_tschchartinfobar3dlightingpackage());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tschchartinfocolumn3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(
          from._internal_tschchartinfocolumn3dlightingpackage());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tschchartinfodefault3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(
          from._internal_tschchartinfodefault3dlightingpackage());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_tschchartinfoline3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(
          from._internal_tschchartinfoline3dlightingpackage());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_tschchartinfopie3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(
          from._internal_tschchartinfopie3dlightingpackage());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_tschchartinfodefaultbackgroundfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartinfodefaultbackgroundfill());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_tschchartinfodefaultbackgroundstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartinfodefaultbackgroundstroke());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_tschchartinfodefaultbordershadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartinfodefaultbordershadow());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_tschchartinfodefaultborderstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartinfodefaultborderstroke());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_tschchartinfodefaultgridbackgroundfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartinfodefaultgridbackgroundfill());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_tschchartinfodefaulttitlecolor()->::TSP::Color::MergeFrom(
          from._internal_tschchartinfodefaulttitlecolor());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.tschchartinfodefault3dchartopacity_ = from._impl_.tschchartinfodefault3dchartopacity_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tschchartinfodefaultborderopacity_ = from._impl_.tschchartinfodefaultborderopacity_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.tschchartinfodefaultgridbackgroundopacity_ = from._impl_.tschchartinfodefaultgridbackgroundopacity_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.tschchartinfodefaultcombinelayers_ = from._impl_.tschchartinfodefaultcombinelayers_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.tschchartinfodefaultshowborder_ = from._impl_.tschchartinfodefaultshowborder_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.tschchartinfodefaultinterbargap_ = from._impl_.tschchartinfodefaultinterbargap_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.tschchartinfodefaultintersetgap_ = from._impl_.tschchartinfodefaultintersetgap_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.tschchartinfodefaulttitleparagraphstyleindex_ = from._impl_.tschchartinfodefaulttitleparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.tschchartinfodefaultdatasetnameparagraphstyleindex_ = from._impl_.tschchartinfodefaultdatasetnameparagraphstyleindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartStyleArchive::CopyFrom(const ChartStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.ChartStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartStyleArchive::IsInitialized() const {
  if (_internal_has_tschchartinfoarea3dlightingpackage()) {
    if (!_impl_.tschchartinfoarea3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfobar3dlightingpackage()) {
    if (!_impl_.tschchartinfobar3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfocolumn3dlightingpackage()) {
    if (!_impl_.tschchartinfocolumn3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefault3dlightingpackage()) {
    if (!_impl_.tschchartinfodefault3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfoline3dlightingpackage()) {
    if (!_impl_.tschchartinfoline3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfopie3dlightingpackage()) {
    if (!_impl_.tschchartinfopie3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultbackgroundfill()) {
    if (!_impl_.tschchartinfodefaultbackgroundfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultbackgroundstroke()) {
    if (!_impl_.tschchartinfodefaultbackgroundstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultbordershadow()) {
    if (!_impl_.tschchartinfodefaultbordershadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultborderstroke()) {
    if (!_impl_.tschchartinfodefaultborderstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultgridbackgroundfill()) {
    if (!_impl_.tschchartinfodefaultgridbackgroundfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaulttitlecolor()) {
    if (!_impl_.tschchartinfodefaulttitlecolor_->IsInitialized()) return false;
  }
  return true;
}

void ChartStyleArchive::InternalSwap(ChartStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartStyleArchive, _impl_.tschchartinfodefaultdatasetnameparagraphstyleindex_)
      + sizeof(ChartStyleArchive::_impl_.tschchartinfodefaultdatasetnameparagraphstyleindex_)
      - PROTOBUF_FIELD_OFFSET(ChartStyleArchive, _impl_.tschchartinfoarea3dlightingpackage_)>(
          reinterpret_cast<char*>(&_impl_.tschchartinfoarea3dlightingpackage_),
          reinterpret_cast<char*>(&other->_impl_.tschchartinfoarea3dlightingpackage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[0]);
}

// ===================================================================

class ChartNonStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartNonStyleArchive>()._impl_._has_bits_);
  static void set_has_tschchartinfodefault3dbarshape(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tschchartinfodefault3dbeveledges(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tschchartinfodefault3dintersetdepthgap(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfodefault3drotation(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfodefault3drotation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfoarea3dscale(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfoarea3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfobar3dscale(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfobar3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfocolumn3dscale(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfocolumn3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfodefault3dscale(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfodefault3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfoline3dscale(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfoline3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfopie3dscale(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfopie3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfodefault3dviewport(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfodefault3dviewport(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tschchartinfodefaultpiestartangle(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tschchartinfodefaultshowlegend(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tschchartinfodefaultshowtitle(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_tschchartinfodefaultskiphiddendata(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tschchartinfodefaulttitle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschchartinfodefaultdatasetnamelocation(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tschchartinfodefaultmultidatacontroltype(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfodefault3drotation(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefault3drotation_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfoarea3dscale(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.tschchartinfoarea3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfobar3dscale(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.tschchartinfobar3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfocolumn3dscale(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.tschchartinfocolumn3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfodefault3dscale(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefault3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfoline3dscale(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.tschchartinfoline3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfopie3dscale(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.tschchartinfopie3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfodefault3dviewport(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefault3dviewport_;
}
void ChartNonStyleArchive::clear_tschchartinfodefault3drotation() {
  if (_impl_.tschchartinfodefault3drotation_ != nullptr) _impl_.tschchartinfodefault3drotation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ChartNonStyleArchive::clear_tschchartinfoarea3dscale() {
  if (_impl_.tschchartinfoarea3dscale_ != nullptr) _impl_.tschchartinfoarea3dscale_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ChartNonStyleArchive::clear_tschchartinfobar3dscale() {
  if (_impl_.tschchartinfobar3dscale_ != nullptr) _impl_.tschchartinfobar3dscale_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ChartNonStyleArchive::clear_tschchartinfocolumn3dscale() {
  if (_impl_.tschchartinfocolumn3dscale_ != nullptr) _impl_.tschchartinfocolumn3dscale_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ChartNonStyleArchive::clear_tschchartinfodefault3dscale() {
  if (_impl_.tschchartinfodefault3dscale_ != nullptr) _impl_.tschchartinfodefault3dscale_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ChartNonStyleArchive::clear_tschchartinfoline3dscale() {
  if (_impl_.tschchartinfoline3dscale_ != nullptr) _impl_.tschchartinfoline3dscale_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ChartNonStyleArchive::clear_tschchartinfopie3dscale() {
  if (_impl_.tschchartinfopie3dscale_ != nullptr) _impl_.tschchartinfopie3dscale_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void ChartNonStyleArchive::clear_tschchartinfodefault3dviewport() {
  if (_impl_.tschchartinfodefault3dviewport_ != nullptr) _impl_.tschchartinfodefault3dviewport_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
ChartNonStyleArchive::ChartNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.ChartNonStyleArchive)
}
ChartNonStyleArchive::ChartNonStyleArchive(const ChartNonStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartNonStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartinfodefaulttitle_){}
    , decltype(_impl_.tschchartinfodefault3drotation_){nullptr}
    , decltype(_impl_.tschchartinfoarea3dscale_){nullptr}
    , decltype(_impl_.tschchartinfobar3dscale_){nullptr}
    , decltype(_impl_.tschchartinfocolumn3dscale_){nullptr}
    , decltype(_impl_.tschchartinfodefault3dscale_){nullptr}
    , decltype(_impl_.tschchartinfoline3dscale_){nullptr}
    , decltype(_impl_.tschchartinfopie3dscale_){nullptr}
    , decltype(_impl_.tschchartinfodefault3dviewport_){nullptr}
    , decltype(_impl_.tschchartinfodefault3dbarshape_){}
    , decltype(_impl_.tschchartinfodefault3dintersetdepthgap_){}
    , decltype(_impl_.tschchartinfodefault3dbeveledges_){}
    , decltype(_impl_.tschchartinfodefaultshowlegend_){}
    , decltype(_impl_.tschchartinfodefaultshowtitle_){}
    , decltype(_impl_.tschchartinfodefaultskiphiddendata_){}
    , decltype(_impl_.tschchartinfodefaultpiestartangle_){}
    , decltype(_impl_.tschchartinfodefaultdatasetnamelocation_){}
    , decltype(_impl_.tschchartinfodefaultmultidatacontroltype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tschchartinfodefaulttitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartinfodefaulttitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tschchartinfodefaulttitle()) {
    _this->_impl_.tschchartinfodefaulttitle_.Set(from._internal_tschchartinfodefaulttitle(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_tschchartinfodefault3drotation()) {
    _this->_impl_.tschchartinfodefault3drotation_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.tschchartinfodefault3drotation_);
  }
  if (from._internal_has_tschchartinfoarea3dscale()) {
    _this->_impl_.tschchartinfoarea3dscale_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.tschchartinfoarea3dscale_);
  }
  if (from._internal_has_tschchartinfobar3dscale()) {
    _this->_impl_.tschchartinfobar3dscale_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.tschchartinfobar3dscale_);
  }
  if (from._internal_has_tschchartinfocolumn3dscale()) {
    _this->_impl_.tschchartinfocolumn3dscale_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.tschchartinfocolumn3dscale_);
  }
  if (from._internal_has_tschchartinfodefault3dscale()) {
    _this->_impl_.tschchartinfodefault3dscale_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.tschchartinfodefault3dscale_);
  }
  if (from._internal_has_tschchartinfoline3dscale()) {
    _this->_impl_.tschchartinfoline3dscale_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.tschchartinfoline3dscale_);
  }
  if (from._internal_has_tschchartinfopie3dscale()) {
    _this->_impl_.tschchartinfopie3dscale_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.tschchartinfopie3dscale_);
  }
  if (from._internal_has_tschchartinfodefault3dviewport()) {
    _this->_impl_.tschchartinfodefault3dviewport_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.tschchartinfodefault3dviewport_);
  }
  ::memcpy(&_impl_.tschchartinfodefault3dbarshape_, &from._impl_.tschchartinfodefault3dbarshape_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tschchartinfodefaultmultidatacontroltype_) -
    reinterpret_cast<char*>(&_impl_.tschchartinfodefault3dbarshape_)) + sizeof(_impl_.tschchartinfodefaultmultidatacontroltype_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.ChartNonStyleArchive)
}

inline void ChartNonStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartinfodefaulttitle_){}
    , decltype(_impl_.tschchartinfodefault3drotation_){nullptr}
    , decltype(_impl_.tschchartinfoarea3dscale_){nullptr}
    , decltype(_impl_.tschchartinfobar3dscale_){nullptr}
    , decltype(_impl_.tschchartinfocolumn3dscale_){nullptr}
    , decltype(_impl_.tschchartinfodefault3dscale_){nullptr}
    , decltype(_impl_.tschchartinfoline3dscale_){nullptr}
    , decltype(_impl_.tschchartinfopie3dscale_){nullptr}
    , decltype(_impl_.tschchartinfodefault3dviewport_){nullptr}
    , decltype(_impl_.tschchartinfodefault3dbarshape_){0}
    , decltype(_impl_.tschchartinfodefault3dintersetdepthgap_){0}
    , decltype(_impl_.tschchartinfodefault3dbeveledges_){false}
    , decltype(_impl_.tschchartinfodefaultshowlegend_){false}
    , decltype(_impl_.tschchartinfodefaultshowtitle_){false}
    , decltype(_impl_.tschchartinfodefaultskiphiddendata_){false}
    , decltype(_impl_.tschchartinfodefaultpiestartangle_){0}
    , decltype(_impl_.tschchartinfodefaultdatasetnamelocation_){0}
    , decltype(_impl_.tschchartinfodefaultmultidatacontroltype_){0}
  };
  _impl_.tschchartinfodefaulttitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartinfodefaulttitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChartNonStyleArchive::~ChartNonStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.ChartNonStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartNonStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tschchartinfodefaulttitle_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefault3drotation_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfoarea3dscale_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfobar3dscale_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfocolumn3dscale_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefault3dscale_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfoline3dscale_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfopie3dscale_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefault3dviewport_;
}

void ChartNonStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartNonStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.ChartNonStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.tschchartinfodefaulttitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefault3drotation_ != nullptr);
      _impl_.tschchartinfodefault3drotation_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tschchartinfoarea3dscale_ != nullptr);
      _impl_.tschchartinfoarea3dscale_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.tschchartinfobar3dscale_ != nullptr);
      _impl_.tschchartinfobar3dscale_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.tschchartinfocolumn3dscale_ != nullptr);
      _impl_.tschchartinfocolumn3dscale_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefault3dscale_ != nullptr);
      _impl_.tschchartinfodefault3dscale_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.tschchartinfoline3dscale_ != nullptr);
      _impl_.tschchartinfoline3dscale_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.tschchartinfopie3dscale_ != nullptr);
      _impl_.tschchartinfopie3dscale_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(_impl_.tschchartinfodefault3dviewport_ != nullptr);
    _impl_.tschchartinfodefault3dviewport_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&_impl_.tschchartinfodefault3dbarshape_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartinfodefaultpiestartangle_) -
        reinterpret_cast<char*>(&_impl_.tschchartinfodefault3dbarshape_)) + sizeof(_impl_.tschchartinfodefaultpiestartangle_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&_impl_.tschchartinfodefaultdatasetnamelocation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartinfodefaultmultidatacontroltype_) -
        reinterpret_cast<char*>(&_impl_.tschchartinfodefaultdatasetnamelocation_)) + sizeof(_impl_.tschchartinfodefaultmultidatacontroltype_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartNonStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 tschchartinfodefault3dbarshape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tschchartinfodefault3dbarshape(&has_bits);
          _impl_.tschchartinfodefault3dbarshape_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfodefault3dbeveledges = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tschchartinfodefault3dbeveledges(&has_bits);
          _impl_.tschchartinfodefault3dbeveledges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfodefault3dintersetdepthgap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_tschchartinfodefault3dintersetdepthgap(&has_bits);
          _impl_.tschchartinfodefault3dintersetdepthgap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefault3drotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfoarea3dscale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfobar3dscale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfocolumn3dscale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefault3dscale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfoline3dscale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfopie3dscale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefault3dviewport(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultpiestartangle = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _Internal::set_has_tschchartinfodefaultpiestartangle(&has_bits);
          _impl_.tschchartinfodefaultpiestartangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultshowlegend = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_tschchartinfodefaultshowlegend(&has_bits);
          _impl_.tschchartinfodefaultshowlegend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultshowtitle = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_tschchartinfodefaultshowtitle(&has_bits);
          _impl_.tschchartinfodefaultshowtitle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultskiphiddendata = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_tschchartinfodefaultskiphiddendata(&has_bits);
          _impl_.tschchartinfodefaultskiphiddendata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tschchartinfodefaulttitle = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_tschchartinfodefaulttitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaulttitle");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartinfodefaultdatasetnamelocation = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_tschchartinfodefaultdatasetnamelocation(&has_bits);
          _impl_.tschchartinfodefaultdatasetnamelocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartinfodefaultmultidatacontroltype = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_tschchartinfodefaultmultidatacontroltype(&has_bits);
          _impl_.tschchartinfodefaultmultidatacontroltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartNonStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.ChartNonStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 tschchartinfodefault3dbarshape = 1;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_tschchartinfodefault3dbarshape(), target);
  }

  // optional bool tschchartinfodefault3dbeveledges = 2;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_tschchartinfodefault3dbeveledges(), target);
  }

  // optional float tschchartinfodefault3dintersetdepthgap = 3;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_tschchartinfodefault3dintersetdepthgap(), target);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::tschchartinfodefault3drotation(this),
        _Internal::tschchartinfodefault3drotation(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::tschchartinfoarea3dscale(this),
        _Internal::tschchartinfoarea3dscale(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::tschchartinfobar3dscale(this),
        _Internal::tschchartinfobar3dscale(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::tschchartinfocolumn3dscale(this),
        _Internal::tschchartinfocolumn3dscale(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::tschchartinfodefault3dscale(this),
        _Internal::tschchartinfodefault3dscale(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::tschchartinfoline3dscale(this),
        _Internal::tschchartinfoline3dscale(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::tschchartinfopie3dscale(this),
        _Internal::tschchartinfopie3dscale(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::tschchartinfodefault3dviewport(this),
        _Internal::tschchartinfodefault3dviewport(this).GetCachedSize(), target, stream);
  }

  // optional float tschchartinfodefaultpiestartangle = 19;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(19, this->_internal_tschchartinfodefaultpiestartangle(), target);
  }

  // optional bool tschchartinfodefaultshowlegend = 20;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_tschchartinfodefaultshowlegend(), target);
  }

  // optional bool tschchartinfodefaultshowtitle = 21;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_tschchartinfodefaultshowtitle(), target);
  }

  // optional bool tschchartinfodefaultskiphiddendata = 22;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_tschchartinfodefaultskiphiddendata(), target);
  }

  // optional string tschchartinfodefaulttitle = 23;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschchartinfodefaulttitle().data(), static_cast<int>(this->_internal_tschchartinfodefaulttitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaulttitle");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_tschchartinfodefaulttitle(), target);
  }

  // optional int32 tschchartinfodefaultdatasetnamelocation = 24;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_tschchartinfodefaultdatasetnamelocation(), target);
  }

  // optional int32 tschchartinfodefaultmultidatacontroltype = 25;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_tschchartinfodefaultmultidatacontroltype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.ChartNonStyleArchive)
  return target;
}

size_t ChartNonStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.ChartNonStyleArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string tschchartinfodefaulttitle = 23;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tschchartinfodefaulttitle());
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefault3drotation_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfoarea3dscale_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfobar3dscale_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfocolumn3dscale_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefault3dscale_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfoline3dscale_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfopie3dscale_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefault3dviewport_);
    }

    // optional int32 tschchartinfodefault3dbarshape = 1;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartinfodefault3dbarshape());
    }

    // optional float tschchartinfodefault3dintersetdepthgap = 3;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional bool tschchartinfodefault3dbeveledges = 2;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartinfodefaultshowlegend = 20;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfodefaultshowtitle = 21;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfodefaultskiphiddendata = 22;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional float tschchartinfodefaultpiestartangle = 19;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional int32 tschchartinfodefaultdatasetnamelocation = 24;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodefaultdatasetnamelocation());
    }

    // optional int32 tschchartinfodefaultmultidatacontroltype = 25;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodefaultmultidatacontroltype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartNonStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartNonStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartNonStyleArchive::GetClassData() const { return &_class_data_; }


void ChartNonStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartNonStyleArchive*>(&to_msg);
  auto& from = static_cast<const ChartNonStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.ChartNonStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tschchartinfodefaulttitle(from._internal_tschchartinfodefaulttitle());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tschchartinfodefault3drotation()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_tschchartinfodefault3drotation());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tschchartinfoarea3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_tschchartinfoarea3dscale());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tschchartinfobar3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_tschchartinfobar3dscale());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_tschchartinfocolumn3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_tschchartinfocolumn3dscale());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_tschchartinfodefault3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_tschchartinfodefault3dscale());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_tschchartinfoline3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_tschchartinfoline3dscale());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_tschchartinfopie3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_tschchartinfopie3dscale());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_tschchartinfodefault3dviewport()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_tschchartinfodefault3dviewport());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.tschchartinfodefault3dbarshape_ = from._impl_.tschchartinfodefault3dbarshape_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.tschchartinfodefault3dintersetdepthgap_ = from._impl_.tschchartinfodefault3dintersetdepthgap_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.tschchartinfodefault3dbeveledges_ = from._impl_.tschchartinfodefault3dbeveledges_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.tschchartinfodefaultshowlegend_ = from._impl_.tschchartinfodefaultshowlegend_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tschchartinfodefaultshowtitle_ = from._impl_.tschchartinfodefaultshowtitle_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.tschchartinfodefaultskiphiddendata_ = from._impl_.tschchartinfodefaultskiphiddendata_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.tschchartinfodefaultpiestartangle_ = from._impl_.tschchartinfodefaultpiestartangle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.tschchartinfodefaultdatasetnamelocation_ = from._impl_.tschchartinfodefaultdatasetnamelocation_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.tschchartinfodefaultmultidatacontroltype_ = from._impl_.tschchartinfodefaultmultidatacontroltype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartNonStyleArchive::CopyFrom(const ChartNonStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.ChartNonStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartNonStyleArchive::IsInitialized() const {
  if (_internal_has_tschchartinfodefault3drotation()) {
    if (!_impl_.tschchartinfodefault3drotation_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfoarea3dscale()) {
    if (!_impl_.tschchartinfoarea3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfobar3dscale()) {
    if (!_impl_.tschchartinfobar3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfocolumn3dscale()) {
    if (!_impl_.tschchartinfocolumn3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefault3dscale()) {
    if (!_impl_.tschchartinfodefault3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfoline3dscale()) {
    if (!_impl_.tschchartinfoline3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfopie3dscale()) {
    if (!_impl_.tschchartinfopie3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefault3dviewport()) {
    if (!_impl_.tschchartinfodefault3dviewport_->IsInitialized()) return false;
  }
  return true;
}

void ChartNonStyleArchive::InternalSwap(ChartNonStyleArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tschchartinfodefaulttitle_, lhs_arena,
      &other->_impl_.tschchartinfodefaulttitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartNonStyleArchive, _impl_.tschchartinfodefaultmultidatacontroltype_)
      + sizeof(ChartNonStyleArchive::_impl_.tschchartinfodefaultmultidatacontroltype_)
      - PROTOBUF_FIELD_OFFSET(ChartNonStyleArchive, _impl_.tschchartinfodefault3drotation_)>(
          reinterpret_cast<char*>(&_impl_.tschchartinfodefault3drotation_),
          reinterpret_cast<char*>(&other->_impl_.tschchartinfodefault3drotation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartNonStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[1]);
}

// ===================================================================

class LegendStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<LegendStyleArchive>()._impl_._has_bits_);
  static const ::TSD::FillArchive& tschlegendmodeldefaultfill(const LegendStyleArchive* msg);
  static void set_has_tschlegendmodeldefaultfill(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschlegendmodeldefaultlabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tschlegendmodeldefaultopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::ShadowArchive& tschlegendmodeldefaultshadow(const LegendStyleArchive* msg);
  static void set_has_tschlegendmodeldefaultshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::StrokeArchive& tschlegendmodeldefaultstroke(const LegendStyleArchive* msg);
  static void set_has_tschlegendmodeldefaultstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSD::FillArchive&
LegendStyleArchive::_Internal::tschlegendmodeldefaultfill(const LegendStyleArchive* msg) {
  return *msg->_impl_.tschlegendmodeldefaultfill_;
}
const ::TSD::ShadowArchive&
LegendStyleArchive::_Internal::tschlegendmodeldefaultshadow(const LegendStyleArchive* msg) {
  return *msg->_impl_.tschlegendmodeldefaultshadow_;
}
const ::TSD::StrokeArchive&
LegendStyleArchive::_Internal::tschlegendmodeldefaultstroke(const LegendStyleArchive* msg) {
  return *msg->_impl_.tschlegendmodeldefaultstroke_;
}
void LegendStyleArchive::clear_tschlegendmodeldefaultfill() {
  if (_impl_.tschlegendmodeldefaultfill_ != nullptr) _impl_.tschlegendmodeldefaultfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LegendStyleArchive::clear_tschlegendmodeldefaultshadow() {
  if (_impl_.tschlegendmodeldefaultshadow_ != nullptr) _impl_.tschlegendmodeldefaultshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void LegendStyleArchive::clear_tschlegendmodeldefaultstroke() {
  if (_impl_.tschlegendmodeldefaultstroke_ != nullptr) _impl_.tschlegendmodeldefaultstroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
LegendStyleArchive::LegendStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.LegendStyleArchive)
}
LegendStyleArchive::LegendStyleArchive(const LegendStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LegendStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschlegendmodeldefaultfill_){nullptr}
    , decltype(_impl_.tschlegendmodeldefaultshadow_){nullptr}
    , decltype(_impl_.tschlegendmodeldefaultstroke_){nullptr}
    , decltype(_impl_.tschlegendmodeldefaultlabelparagraphstyleindex_){}
    , decltype(_impl_.tschlegendmodeldefaultopacity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tschlegendmodeldefaultfill()) {
    _this->_impl_.tschlegendmodeldefaultfill_ = new ::TSD::FillArchive(*from._impl_.tschlegendmodeldefaultfill_);
  }
  if (from._internal_has_tschlegendmodeldefaultshadow()) {
    _this->_impl_.tschlegendmodeldefaultshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschlegendmodeldefaultshadow_);
  }
  if (from._internal_has_tschlegendmodeldefaultstroke()) {
    _this->_impl_.tschlegendmodeldefaultstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschlegendmodeldefaultstroke_);
  }
  ::memcpy(&_impl_.tschlegendmodeldefaultlabelparagraphstyleindex_, &from._impl_.tschlegendmodeldefaultlabelparagraphstyleindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tschlegendmodeldefaultopacity_) -
    reinterpret_cast<char*>(&_impl_.tschlegendmodeldefaultlabelparagraphstyleindex_)) + sizeof(_impl_.tschlegendmodeldefaultopacity_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.LegendStyleArchive)
}

inline void LegendStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschlegendmodeldefaultfill_){nullptr}
    , decltype(_impl_.tschlegendmodeldefaultshadow_){nullptr}
    , decltype(_impl_.tschlegendmodeldefaultstroke_){nullptr}
    , decltype(_impl_.tschlegendmodeldefaultlabelparagraphstyleindex_){0}
    , decltype(_impl_.tschlegendmodeldefaultopacity_){0}
  };
}

LegendStyleArchive::~LegendStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.LegendStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LegendStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tschlegendmodeldefaultfill_;
  if (this != internal_default_instance()) delete _impl_.tschlegendmodeldefaultshadow_;
  if (this != internal_default_instance()) delete _impl_.tschlegendmodeldefaultstroke_;
}

void LegendStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LegendStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.LegendStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.tschlegendmodeldefaultfill_ != nullptr);
      _impl_.tschlegendmodeldefaultfill_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tschlegendmodeldefaultshadow_ != nullptr);
      _impl_.tschlegendmodeldefaultshadow_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tschlegendmodeldefaultstroke_ != nullptr);
      _impl_.tschlegendmodeldefaultstroke_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.tschlegendmodeldefaultlabelparagraphstyleindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschlegendmodeldefaultopacity_) -
        reinterpret_cast<char*>(&_impl_.tschlegendmodeldefaultlabelparagraphstyleindex_)) + sizeof(_impl_.tschlegendmodeldefaultopacity_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LegendStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.FillArchive tschlegendmodeldefaultfill = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschlegendmodeldefaultfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tschlegendmodeldefaultlabelparagraphstyleindex(&has_bits);
          _impl_.tschlegendmodeldefaultlabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschlegendmodeldefaultopacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_tschlegendmodeldefaultopacity(&has_bits);
          _impl_.tschlegendmodeldefaultopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschlegendmodeldefaultshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschlegendmodeldefaultstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LegendStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.LegendStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.FillArchive tschlegendmodeldefaultfill = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tschlegendmodeldefaultfill(this),
        _Internal::tschlegendmodeldefaultfill(this).GetCachedSize(), target, stream);
  }

  // optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_tschlegendmodeldefaultlabelparagraphstyleindex(), target);
  }

  // optional float tschlegendmodeldefaultopacity = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_tschlegendmodeldefaultopacity(), target);
  }

  // optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::tschlegendmodeldefaultshadow(this),
        _Internal::tschlegendmodeldefaultshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::tschlegendmodeldefaultstroke(this),
        _Internal::tschlegendmodeldefaultstroke(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.LegendStyleArchive)
  return target;
}

size_t LegendStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.LegendStyleArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSD.FillArchive tschlegendmodeldefaultfill = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschlegendmodeldefaultfill_);
    }

    // optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschlegendmodeldefaultshadow_);
    }

    // optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschlegendmodeldefaultstroke_);
    }

    // optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschlegendmodeldefaultlabelparagraphstyleindex());
    }

    // optional float tschlegendmodeldefaultopacity = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LegendStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LegendStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LegendStyleArchive::GetClassData() const { return &_class_data_; }


void LegendStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LegendStyleArchive*>(&to_msg);
  auto& from = static_cast<const LegendStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.LegendStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_tschlegendmodeldefaultfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschlegendmodeldefaultfill());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tschlegendmodeldefaultshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschlegendmodeldefaultshadow());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tschlegendmodeldefaultstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschlegendmodeldefaultstroke());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tschlegendmodeldefaultlabelparagraphstyleindex_ = from._impl_.tschlegendmodeldefaultlabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tschlegendmodeldefaultopacity_ = from._impl_.tschlegendmodeldefaultopacity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LegendStyleArchive::CopyFrom(const LegendStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.LegendStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegendStyleArchive::IsInitialized() const {
  if (_internal_has_tschlegendmodeldefaultfill()) {
    if (!_impl_.tschlegendmodeldefaultfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschlegendmodeldefaultshadow()) {
    if (!_impl_.tschlegendmodeldefaultshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschlegendmodeldefaultstroke()) {
    if (!_impl_.tschlegendmodeldefaultstroke_->IsInitialized()) return false;
  }
  return true;
}

void LegendStyleArchive::InternalSwap(LegendStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LegendStyleArchive, _impl_.tschlegendmodeldefaultopacity_)
      + sizeof(LegendStyleArchive::_impl_.tschlegendmodeldefaultopacity_)
      - PROTOBUF_FIELD_OFFSET(LegendStyleArchive, _impl_.tschlegendmodeldefaultfill_)>(
          reinterpret_cast<char*>(&_impl_.tschlegendmodeldefaultfill_),
          reinterpret_cast<char*>(&other->_impl_.tschlegendmodeldefaultfill_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LegendStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[2]);
}

// ===================================================================

class LegendNonStyleArchive::_Internal {
 public:
};

LegendNonStyleArchive::LegendNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.LegendNonStyleArchive)
}
LegendNonStyleArchive::LegendNonStyleArchive(const LegendNonStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  LegendNonStyleArchive* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.LegendNonStyleArchive)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LegendNonStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LegendNonStyleArchive::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata LegendNonStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[3]);
}

// ===================================================================

class ChartAxisStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartAxisStyleArchive>()._impl_._has_bits_);
  static void set_has_tschchartaxiscategory3dgridlineopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tschchartaxisvalue3dgridlineopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSD::StrokeArchive& tschchartaxiscategory3dgridlinestroke(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxiscategory3dgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::StrokeArchive& tschchartaxisvalue3dgridlinestroke(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxisvalue3dgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tschchartaxiscategoryhorizontalspacing(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tschchartaxiscategorylabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_tschchartaxisdefaultlabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tschchartaxisvaluelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tschchartaxiscategorylabelsorientation(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tschchartaxisdefaultlabelsorientation(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tschchartaxisvaluelabelsorientation(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_tschchartaxiscategorymajorgridlineopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_tschchartaxisvaluemajorgridlineopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::TSD::ShadowArchive& tschchartaxiscategorymajorgridlineshadow(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxiscategorymajorgridlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::ShadowArchive& tschchartaxisvaluemajorgridlineshadow(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxisvaluemajorgridlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSD::StrokeArchive& tschchartaxiscategorymajorgridlinestroke(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxiscategorymajorgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::StrokeArchive& tschchartaxisvaluemajorgridlinestroke(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxisvaluemajorgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tschchartaxiscategoryminorgridlineopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_tschchartaxisvalueminorgridlineopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::TSD::ShadowArchive& tschchartaxiscategoryminorgridlineshadow(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxiscategoryminorgridlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSD::ShadowArchive& tschchartaxisvalueminorgridlineshadow(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxisvalueminorgridlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSD::StrokeArchive& tschchartaxiscategoryminorgridlinestroke(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxiscategoryminorgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSD::StrokeArchive& tschchartaxisvalueminorgridlinestroke(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxisvalueminorgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tschchartaxiscategoryshowaxis(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_tschchartaxisvalueshowaxis(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_tschchartaxiscategoryshowlastlabel(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_tschchartaxiscategoryshowmajorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_tschchartaxisvalueshowmajorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_tschchartaxiscategoryshowmajortickmarks(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_tschchartaxisvalueshowmajortickmarks(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_tschchartaxisvalueshowminimumlabel(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_tschchartaxiscategoryshowminorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_tschchartaxisvalueshowminorgridlines(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_tschchartaxiscategoryshowminortickmarks(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_tschchartaxisvalueshowminortickmarks(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_tschchartaxiscategorytickmarklocation(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_tschchartaxisvaluetickmarklocation(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_tschchartaxiscategorytitleparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_tschchartaxisdefaulttitleparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_tschchartaxisvaluetitleparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_tschchartaxiscategoryverticalspacing(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
};

const ::TSD::StrokeArchive&
ChartAxisStyleArchive::_Internal::tschchartaxiscategory3dgridlinestroke(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.tschchartaxiscategory3dgridlinestroke_;
}
const ::TSD::StrokeArchive&
ChartAxisStyleArchive::_Internal::tschchartaxisvalue3dgridlinestroke(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.tschchartaxisvalue3dgridlinestroke_;
}
const ::TSD::ShadowArchive&
ChartAxisStyleArchive::_Internal::tschchartaxiscategorymajorgridlineshadow(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.tschchartaxiscategorymajorgridlineshadow_;
}
const ::TSD::ShadowArchive&
ChartAxisStyleArchive::_Internal::tschchartaxisvaluemajorgridlineshadow(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.tschchartaxisvaluemajorgridlineshadow_;
}
const ::TSD::StrokeArchive&
ChartAxisStyleArchive::_Internal::tschchartaxiscategorymajorgridlinestroke(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.tschchartaxiscategorymajorgridlinestroke_;
}
const ::TSD::StrokeArchive&
ChartAxisStyleArchive::_Internal::tschchartaxisvaluemajorgridlinestroke(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.tschchartaxisvaluemajorgridlinestroke_;
}
const ::TSD::ShadowArchive&
ChartAxisStyleArchive::_Internal::tschchartaxiscategoryminorgridlineshadow(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.tschchartaxiscategoryminorgridlineshadow_;
}
const ::TSD::ShadowArchive&
ChartAxisStyleArchive::_Internal::tschchartaxisvalueminorgridlineshadow(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.tschchartaxisvalueminorgridlineshadow_;
}
const ::TSD::StrokeArchive&
ChartAxisStyleArchive::_Internal::tschchartaxiscategoryminorgridlinestroke(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.tschchartaxiscategoryminorgridlinestroke_;
}
const ::TSD::StrokeArchive&
ChartAxisStyleArchive::_Internal::tschchartaxisvalueminorgridlinestroke(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.tschchartaxisvalueminorgridlinestroke_;
}
void ChartAxisStyleArchive::clear_tschchartaxiscategory3dgridlinestroke() {
  if (_impl_.tschchartaxiscategory3dgridlinestroke_ != nullptr) _impl_.tschchartaxiscategory3dgridlinestroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ChartAxisStyleArchive::clear_tschchartaxisvalue3dgridlinestroke() {
  if (_impl_.tschchartaxisvalue3dgridlinestroke_ != nullptr) _impl_.tschchartaxisvalue3dgridlinestroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ChartAxisStyleArchive::clear_tschchartaxiscategorymajorgridlineshadow() {
  if (_impl_.tschchartaxiscategorymajorgridlineshadow_ != nullptr) _impl_.tschchartaxiscategorymajorgridlineshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ChartAxisStyleArchive::clear_tschchartaxisvaluemajorgridlineshadow() {
  if (_impl_.tschchartaxisvaluemajorgridlineshadow_ != nullptr) _impl_.tschchartaxisvaluemajorgridlineshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ChartAxisStyleArchive::clear_tschchartaxiscategorymajorgridlinestroke() {
  if (_impl_.tschchartaxiscategorymajorgridlinestroke_ != nullptr) _impl_.tschchartaxiscategorymajorgridlinestroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ChartAxisStyleArchive::clear_tschchartaxisvaluemajorgridlinestroke() {
  if (_impl_.tschchartaxisvaluemajorgridlinestroke_ != nullptr) _impl_.tschchartaxisvaluemajorgridlinestroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ChartAxisStyleArchive::clear_tschchartaxiscategoryminorgridlineshadow() {
  if (_impl_.tschchartaxiscategoryminorgridlineshadow_ != nullptr) _impl_.tschchartaxiscategoryminorgridlineshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ChartAxisStyleArchive::clear_tschchartaxisvalueminorgridlineshadow() {
  if (_impl_.tschchartaxisvalueminorgridlineshadow_ != nullptr) _impl_.tschchartaxisvalueminorgridlineshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void ChartAxisStyleArchive::clear_tschchartaxiscategoryminorgridlinestroke() {
  if (_impl_.tschchartaxiscategoryminorgridlinestroke_ != nullptr) _impl_.tschchartaxiscategoryminorgridlinestroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void ChartAxisStyleArchive::clear_tschchartaxisvalueminorgridlinestroke() {
  if (_impl_.tschchartaxisvalueminorgridlinestroke_ != nullptr) _impl_.tschchartaxisvalueminorgridlinestroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
ChartAxisStyleArchive::ChartAxisStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.ChartAxisStyleArchive)
}
ChartAxisStyleArchive::ChartAxisStyleArchive(const ChartAxisStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartAxisStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartaxiscategory3dgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxisvalue3dgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxiscategorymajorgridlineshadow_){nullptr}
    , decltype(_impl_.tschchartaxisvaluemajorgridlineshadow_){nullptr}
    , decltype(_impl_.tschchartaxiscategorymajorgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxisvaluemajorgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxiscategoryminorgridlineshadow_){nullptr}
    , decltype(_impl_.tschchartaxisvalueminorgridlineshadow_){nullptr}
    , decltype(_impl_.tschchartaxiscategoryminorgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxisvalueminorgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxiscategory3dgridlineopacity_){}
    , decltype(_impl_.tschchartaxisvalue3dgridlineopacity_){}
    , decltype(_impl_.tschchartaxiscategoryhorizontalspacing_){}
    , decltype(_impl_.tschchartaxiscategorylabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartaxisdefaultlabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartaxisvaluelabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartaxiscategorylabelsorientation_){}
    , decltype(_impl_.tschchartaxisdefaultlabelsorientation_){}
    , decltype(_impl_.tschchartaxisvaluelabelsorientation_){}
    , decltype(_impl_.tschchartaxiscategorymajorgridlineopacity_){}
    , decltype(_impl_.tschchartaxisvaluemajorgridlineopacity_){}
    , decltype(_impl_.tschchartaxiscategoryminorgridlineopacity_){}
    , decltype(_impl_.tschchartaxisvalueminorgridlineopacity_){}
    , decltype(_impl_.tschchartaxiscategoryshowaxis_){}
    , decltype(_impl_.tschchartaxisvalueshowaxis_){}
    , decltype(_impl_.tschchartaxiscategoryshowlastlabel_){}
    , decltype(_impl_.tschchartaxiscategoryshowmajorgridlines_){}
    , decltype(_impl_.tschchartaxisvalueshowmajorgridlines_){}
    , decltype(_impl_.tschchartaxiscategoryshowmajortickmarks_){}
    , decltype(_impl_.tschchartaxisvalueshowmajortickmarks_){}
    , decltype(_impl_.tschchartaxisvalueshowminimumlabel_){}
    , decltype(_impl_.tschchartaxiscategoryshowminorgridlines_){}
    , decltype(_impl_.tschchartaxisvalueshowminorgridlines_){}
    , decltype(_impl_.tschchartaxiscategoryshowminortickmarks_){}
    , decltype(_impl_.tschchartaxisvalueshowminortickmarks_){}
    , decltype(_impl_.tschchartaxiscategorytickmarklocation_){}
    , decltype(_impl_.tschchartaxisvaluetickmarklocation_){}
    , decltype(_impl_.tschchartaxiscategorytitleparagraphstyleindex_){}
    , decltype(_impl_.tschchartaxisdefaulttitleparagraphstyleindex_){}
    , decltype(_impl_.tschchartaxisvaluetitleparagraphstyleindex_){}
    , decltype(_impl_.tschchartaxiscategoryverticalspacing_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tschchartaxiscategory3dgridlinestroke()) {
    _this->_impl_.tschchartaxiscategory3dgridlinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartaxiscategory3dgridlinestroke_);
  }
  if (from._internal_has_tschchartaxisvalue3dgridlinestroke()) {
    _this->_impl_.tschchartaxisvalue3dgridlinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartaxisvalue3dgridlinestroke_);
  }
  if (from._internal_has_tschchartaxiscategorymajorgridlineshadow()) {
    _this->_impl_.tschchartaxiscategorymajorgridlineshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartaxiscategorymajorgridlineshadow_);
  }
  if (from._internal_has_tschchartaxisvaluemajorgridlineshadow()) {
    _this->_impl_.tschchartaxisvaluemajorgridlineshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartaxisvaluemajorgridlineshadow_);
  }
  if (from._internal_has_tschchartaxiscategorymajorgridlinestroke()) {
    _this->_impl_.tschchartaxiscategorymajorgridlinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartaxiscategorymajorgridlinestroke_);
  }
  if (from._internal_has_tschchartaxisvaluemajorgridlinestroke()) {
    _this->_impl_.tschchartaxisvaluemajorgridlinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartaxisvaluemajorgridlinestroke_);
  }
  if (from._internal_has_tschchartaxiscategoryminorgridlineshadow()) {
    _this->_impl_.tschchartaxiscategoryminorgridlineshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartaxiscategoryminorgridlineshadow_);
  }
  if (from._internal_has_tschchartaxisvalueminorgridlineshadow()) {
    _this->_impl_.tschchartaxisvalueminorgridlineshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartaxisvalueminorgridlineshadow_);
  }
  if (from._internal_has_tschchartaxiscategoryminorgridlinestroke()) {
    _this->_impl_.tschchartaxiscategoryminorgridlinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartaxiscategoryminorgridlinestroke_);
  }
  if (from._internal_has_tschchartaxisvalueminorgridlinestroke()) {
    _this->_impl_.tschchartaxisvalueminorgridlinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartaxisvalueminorgridlinestroke_);
  }
  ::memcpy(&_impl_.tschchartaxiscategory3dgridlineopacity_, &from._impl_.tschchartaxiscategory3dgridlineopacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tschchartaxiscategoryverticalspacing_) -
    reinterpret_cast<char*>(&_impl_.tschchartaxiscategory3dgridlineopacity_)) + sizeof(_impl_.tschchartaxiscategoryverticalspacing_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.ChartAxisStyleArchive)
}

inline void ChartAxisStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartaxiscategory3dgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxisvalue3dgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxiscategorymajorgridlineshadow_){nullptr}
    , decltype(_impl_.tschchartaxisvaluemajorgridlineshadow_){nullptr}
    , decltype(_impl_.tschchartaxiscategorymajorgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxisvaluemajorgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxiscategoryminorgridlineshadow_){nullptr}
    , decltype(_impl_.tschchartaxisvalueminorgridlineshadow_){nullptr}
    , decltype(_impl_.tschchartaxiscategoryminorgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxisvalueminorgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxiscategory3dgridlineopacity_){0}
    , decltype(_impl_.tschchartaxisvalue3dgridlineopacity_){0}
    , decltype(_impl_.tschchartaxiscategoryhorizontalspacing_){0}
    , decltype(_impl_.tschchartaxiscategorylabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartaxisdefaultlabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartaxisvaluelabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartaxiscategorylabelsorientation_){0}
    , decltype(_impl_.tschchartaxisdefaultlabelsorientation_){0}
    , decltype(_impl_.tschchartaxisvaluelabelsorientation_){0}
    , decltype(_impl_.tschchartaxiscategorymajorgridlineopacity_){0}
    , decltype(_impl_.tschchartaxisvaluemajorgridlineopacity_){0}
    , decltype(_impl_.tschchartaxiscategoryminorgridlineopacity_){0}
    , decltype(_impl_.tschchartaxisvalueminorgridlineopacity_){0}
    , decltype(_impl_.tschchartaxiscategoryshowaxis_){false}
    , decltype(_impl_.tschchartaxisvalueshowaxis_){false}
    , decltype(_impl_.tschchartaxiscategoryshowlastlabel_){false}
    , decltype(_impl_.tschchartaxiscategoryshowmajorgridlines_){false}
    , decltype(_impl_.tschchartaxisvalueshowmajorgridlines_){false}
    , decltype(_impl_.tschchartaxiscategoryshowmajortickmarks_){false}
    , decltype(_impl_.tschchartaxisvalueshowmajortickmarks_){false}
    , decltype(_impl_.tschchartaxisvalueshowminimumlabel_){false}
    , decltype(_impl_.tschchartaxiscategoryshowminorgridlines_){false}
    , decltype(_impl_.tschchartaxisvalueshowminorgridlines_){false}
    , decltype(_impl_.tschchartaxiscategoryshowminortickmarks_){false}
    , decltype(_impl_.tschchartaxisvalueshowminortickmarks_){false}
    , decltype(_impl_.tschchartaxiscategorytickmarklocation_){0}
    , decltype(_impl_.tschchartaxisvaluetickmarklocation_){0}
    , decltype(_impl_.tschchartaxiscategorytitleparagraphstyleindex_){0}
    , decltype(_impl_.tschchartaxisdefaulttitleparagraphstyleindex_){0}
    , decltype(_impl_.tschchartaxisvaluetitleparagraphstyleindex_){0}
    , decltype(_impl_.tschchartaxiscategoryverticalspacing_){0}
  };
}

ChartAxisStyleArchive::~ChartAxisStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.ChartAxisStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartAxisStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tschchartaxiscategory3dgridlinestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisvalue3dgridlinestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxiscategorymajorgridlineshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisvaluemajorgridlineshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxiscategorymajorgridlinestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisvaluemajorgridlinestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxiscategoryminorgridlineshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisvalueminorgridlineshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxiscategoryminorgridlinestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisvalueminorgridlinestroke_;
}

void ChartAxisStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartAxisStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.ChartAxisStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.tschchartaxiscategory3dgridlinestroke_ != nullptr);
      _impl_.tschchartaxiscategory3dgridlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisvalue3dgridlinestroke_ != nullptr);
      _impl_.tschchartaxisvalue3dgridlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tschchartaxiscategorymajorgridlineshadow_ != nullptr);
      _impl_.tschchartaxiscategorymajorgridlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisvaluemajorgridlineshadow_ != nullptr);
      _impl_.tschchartaxisvaluemajorgridlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.tschchartaxiscategorymajorgridlinestroke_ != nullptr);
      _impl_.tschchartaxiscategorymajorgridlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisvaluemajorgridlinestroke_ != nullptr);
      _impl_.tschchartaxisvaluemajorgridlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.tschchartaxiscategoryminorgridlineshadow_ != nullptr);
      _impl_.tschchartaxiscategoryminorgridlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisvalueminorgridlineshadow_ != nullptr);
      _impl_.tschchartaxisvalueminorgridlineshadow_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.tschchartaxiscategoryminorgridlinestroke_ != nullptr);
      _impl_.tschchartaxiscategoryminorgridlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisvalueminorgridlinestroke_ != nullptr);
      _impl_.tschchartaxisvalueminorgridlinestroke_->Clear();
    }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&_impl_.tschchartaxiscategory3dgridlineopacity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartaxisvaluelabelparagraphstyleindex_) -
        reinterpret_cast<char*>(&_impl_.tschchartaxiscategory3dgridlineopacity_)) + sizeof(_impl_.tschchartaxisvaluelabelparagraphstyleindex_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.tschchartaxiscategorylabelsorientation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartaxiscategoryshowaxis_) -
        reinterpret_cast<char*>(&_impl_.tschchartaxiscategorylabelsorientation_)) + sizeof(_impl_.tschchartaxiscategoryshowaxis_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.tschchartaxisvalueshowaxis_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartaxiscategoryshowminorgridlines_) -
        reinterpret_cast<char*>(&_impl_.tschchartaxisvalueshowaxis_)) + sizeof(_impl_.tschchartaxiscategoryshowminorgridlines_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.tschchartaxisvalueshowminorgridlines_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartaxisvaluetitleparagraphstyleindex_) -
        reinterpret_cast<char*>(&_impl_.tschchartaxisvalueshowminorgridlines_)) + sizeof(_impl_.tschchartaxisvaluetitleparagraphstyleindex_));
  }
  _impl_.tschchartaxiscategoryverticalspacing_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartAxisStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float tschchartaxiscategory3dgridlineopacity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_tschchartaxiscategory3dgridlineopacity(&_impl_._has_bits_);
          _impl_.tschchartaxiscategory3dgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxisvalue3dgridlineopacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_tschchartaxisvalue3dgridlineopacity(&_impl_._has_bits_);
          _impl_.tschchartaxisvalue3dgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxiscategory3dgridlinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisvalue3dgridlinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxiscategoryhorizontalspacing = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_tschchartaxiscategoryhorizontalspacing(&_impl_._has_bits_);
          _impl_.tschchartaxiscategoryhorizontalspacing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxiscategorylabelparagraphstyleindex = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_tschchartaxiscategorylabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartaxiscategorylabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_tschchartaxisdefaultlabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartaxisdefaultlabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluelabelparagraphstyleindex = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_tschchartaxisvaluelabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartaxisvaluelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxiscategorylabelsorientation = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_tschchartaxiscategorylabelsorientation(&_impl_._has_bits_);
          _impl_.tschchartaxiscategorylabelsorientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxisdefaultlabelsorientation = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_tschchartaxisdefaultlabelsorientation(&_impl_._has_bits_);
          _impl_.tschchartaxisdefaultlabelsorientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxisvaluelabelsorientation = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_tschchartaxisvaluelabelsorientation(&_impl_._has_bits_);
          _impl_.tschchartaxisvaluelabelsorientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxiscategorymajorgridlineopacity = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_tschchartaxiscategorymajorgridlineopacity(&_impl_._has_bits_);
          _impl_.tschchartaxiscategorymajorgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxisvaluemajorgridlineopacity = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_tschchartaxisvaluemajorgridlineopacity(&_impl_._has_bits_);
          _impl_.tschchartaxisvaluemajorgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxiscategorymajorgridlineshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisvaluemajorgridlineshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxiscategorymajorgridlinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisvaluemajorgridlinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxiscategoryminorgridlineopacity = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _Internal::set_has_tschchartaxiscategoryminorgridlineopacity(&_impl_._has_bits_);
          _impl_.tschchartaxiscategoryminorgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxisvalueminorgridlineopacity = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _Internal::set_has_tschchartaxisvalueminorgridlineopacity(&_impl_._has_bits_);
          _impl_.tschchartaxisvalueminorgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxiscategoryminorgridlineshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisvalueminorgridlineshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxiscategoryminorgridlinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisvalueminorgridlinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowaxis = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_tschchartaxiscategoryshowaxis(&_impl_._has_bits_);
          _impl_.tschchartaxiscategoryshowaxis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowaxis = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_tschchartaxisvalueshowaxis(&_impl_._has_bits_);
          _impl_.tschchartaxisvalueshowaxis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowlastlabel = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_tschchartaxiscategoryshowlastlabel(&_impl_._has_bits_);
          _impl_.tschchartaxiscategoryshowlastlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowmajorgridlines = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_tschchartaxiscategoryshowmajorgridlines(&_impl_._has_bits_);
          _impl_.tschchartaxiscategoryshowmajorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowmajorgridlines = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_tschchartaxisvalueshowmajorgridlines(&_impl_._has_bits_);
          _impl_.tschchartaxisvalueshowmajorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowmajortickmarks = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_tschchartaxiscategoryshowmajortickmarks(&_impl_._has_bits_);
          _impl_.tschchartaxiscategoryshowmajortickmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowmajortickmarks = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_tschchartaxisvalueshowmajortickmarks(&_impl_._has_bits_);
          _impl_.tschchartaxisvalueshowmajortickmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowminimumlabel = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_tschchartaxisvalueshowminimumlabel(&_impl_._has_bits_);
          _impl_.tschchartaxisvalueshowminimumlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowminorgridlines = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_tschchartaxiscategoryshowminorgridlines(&_impl_._has_bits_);
          _impl_.tschchartaxiscategoryshowminorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowminorgridlines = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tschchartaxisvalueshowminorgridlines(&_impl_._has_bits_);
          _impl_.tschchartaxisvalueshowminorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowminortickmarks = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tschchartaxiscategoryshowminortickmarks(&_impl_._has_bits_);
          _impl_.tschchartaxiscategoryshowminortickmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowminortickmarks = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tschchartaxisvalueshowminortickmarks(&_impl_._has_bits_);
          _impl_.tschchartaxisvalueshowminortickmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxiscategorytickmarklocation = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_tschchartaxiscategorytickmarklocation(&_impl_._has_bits_);
          _impl_.tschchartaxiscategorytickmarklocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluetickmarklocation = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_tschchartaxisvaluetickmarklocation(&_impl_._has_bits_);
          _impl_.tschchartaxisvaluetickmarklocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxiscategorytitleparagraphstyleindex = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_tschchartaxiscategorytitleparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartaxiscategorytitleparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_tschchartaxisdefaulttitleparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartaxisdefaulttitleparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluetitleparagraphstyleindex = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_tschchartaxisvaluetitleparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartaxisvaluetitleparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxiscategoryverticalspacing = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_tschchartaxiscategoryverticalspacing(&_impl_._has_bits_);
          _impl_.tschchartaxiscategoryverticalspacing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartAxisStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.ChartAxisStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float tschchartaxiscategory3dgridlineopacity = 1;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_tschchartaxiscategory3dgridlineopacity(), target);
  }

  // optional float tschchartaxisvalue3dgridlineopacity = 2;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_tschchartaxisvalue3dgridlineopacity(), target);
  }

  // optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::tschchartaxiscategory3dgridlinestroke(this),
        _Internal::tschchartaxiscategory3dgridlinestroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::tschchartaxisvalue3dgridlinestroke(this),
        _Internal::tschchartaxisvalue3dgridlinestroke(this).GetCachedSize(), target, stream);
  }

  // optional int32 tschchartaxiscategoryhorizontalspacing = 5;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_tschchartaxiscategoryhorizontalspacing(), target);
  }

  // optional int32 tschchartaxiscategorylabelparagraphstyleindex = 6;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_tschchartaxiscategorylabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 7;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_tschchartaxisdefaultlabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxisvaluelabelparagraphstyleindex = 8;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_tschchartaxisvaluelabelparagraphstyleindex(), target);
  }

  // optional float tschchartaxiscategorylabelsorientation = 9;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_tschchartaxiscategorylabelsorientation(), target);
  }

  // optional float tschchartaxisdefaultlabelsorientation = 10;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_tschchartaxisdefaultlabelsorientation(), target);
  }

  // optional float tschchartaxisvaluelabelsorientation = 11;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_tschchartaxisvaluelabelsorientation(), target);
  }

  // optional float tschchartaxiscategorymajorgridlineopacity = 12;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_tschchartaxiscategorymajorgridlineopacity(), target);
  }

  // optional float tschchartaxisvaluemajorgridlineopacity = 13;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_tschchartaxisvaluemajorgridlineopacity(), target);
  }

  // optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 14;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::tschchartaxiscategorymajorgridlineshadow(this),
        _Internal::tschchartaxiscategorymajorgridlineshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 15;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::tschchartaxisvaluemajorgridlineshadow(this),
        _Internal::tschchartaxisvaluemajorgridlineshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 16;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::tschchartaxiscategorymajorgridlinestroke(this),
        _Internal::tschchartaxiscategorymajorgridlinestroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 17;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::tschchartaxisvaluemajorgridlinestroke(this),
        _Internal::tschchartaxisvaluemajorgridlinestroke(this).GetCachedSize(), target, stream);
  }

  // optional float tschchartaxiscategoryminorgridlineopacity = 18;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_tschchartaxiscategoryminorgridlineopacity(), target);
  }

  // optional float tschchartaxisvalueminorgridlineopacity = 19;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(19, this->_internal_tschchartaxisvalueminorgridlineopacity(), target);
  }

  // optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 20;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::tschchartaxiscategoryminorgridlineshadow(this),
        _Internal::tschchartaxiscategoryminorgridlineshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 21;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::tschchartaxisvalueminorgridlineshadow(this),
        _Internal::tschchartaxisvalueminorgridlineshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 22;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::tschchartaxiscategoryminorgridlinestroke(this),
        _Internal::tschchartaxiscategoryminorgridlinestroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 23;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::tschchartaxisvalueminorgridlinestroke(this),
        _Internal::tschchartaxisvalueminorgridlinestroke(this).GetCachedSize(), target, stream);
  }

  // optional bool tschchartaxiscategoryshowaxis = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(24, this->_internal_tschchartaxiscategoryshowaxis(), target);
  }

  // optional bool tschchartaxisvalueshowaxis = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(25, this->_internal_tschchartaxisvalueshowaxis(), target);
  }

  // optional bool tschchartaxiscategoryshowlastlabel = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(26, this->_internal_tschchartaxiscategoryshowlastlabel(), target);
  }

  // optional bool tschchartaxiscategoryshowmajorgridlines = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(27, this->_internal_tschchartaxiscategoryshowmajorgridlines(), target);
  }

  // optional bool tschchartaxisvalueshowmajorgridlines = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(28, this->_internal_tschchartaxisvalueshowmajorgridlines(), target);
  }

  // optional bool tschchartaxiscategoryshowmajortickmarks = 29;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(29, this->_internal_tschchartaxiscategoryshowmajortickmarks(), target);
  }

  // optional bool tschchartaxisvalueshowmajortickmarks = 30;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(30, this->_internal_tschchartaxisvalueshowmajortickmarks(), target);
  }

  // optional bool tschchartaxisvalueshowminimumlabel = 31;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(31, this->_internal_tschchartaxisvalueshowminimumlabel(), target);
  }

  // optional bool tschchartaxiscategoryshowminorgridlines = 32;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(32, this->_internal_tschchartaxiscategoryshowminorgridlines(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool tschchartaxisvalueshowminorgridlines = 33;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(33, this->_internal_tschchartaxisvalueshowminorgridlines(), target);
  }

  // optional bool tschchartaxiscategoryshowminortickmarks = 34;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(34, this->_internal_tschchartaxiscategoryshowminortickmarks(), target);
  }

  // optional bool tschchartaxisvalueshowminortickmarks = 35;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(35, this->_internal_tschchartaxisvalueshowminortickmarks(), target);
  }

  // optional int32 tschchartaxiscategorytickmarklocation = 36;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(36, this->_internal_tschchartaxiscategorytickmarklocation(), target);
  }

  // optional int32 tschchartaxisvaluetickmarklocation = 37;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(37, this->_internal_tschchartaxisvaluetickmarklocation(), target);
  }

  // optional int32 tschchartaxiscategorytitleparagraphstyleindex = 38;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(38, this->_internal_tschchartaxiscategorytitleparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 39;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(39, this->_internal_tschchartaxisdefaulttitleparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxisvaluetitleparagraphstyleindex = 40;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(40, this->_internal_tschchartaxisvaluetitleparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxiscategoryverticalspacing = 41;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(41, this->_internal_tschchartaxiscategoryverticalspacing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.ChartAxisStyleArchive)
  return target;
}

size_t ChartAxisStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.ChartAxisStyleArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxiscategory3dgridlinestroke_);
    }

    // optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisvalue3dgridlinestroke_);
    }

    // optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 14;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxiscategorymajorgridlineshadow_);
    }

    // optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 15;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisvaluemajorgridlineshadow_);
    }

    // optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 16;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxiscategorymajorgridlinestroke_);
    }

    // optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 17;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisvaluemajorgridlinestroke_);
    }

    // optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 20;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxiscategoryminorgridlineshadow_);
    }

    // optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 21;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisvalueminorgridlineshadow_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 22;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxiscategoryminorgridlinestroke_);
    }

    // optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 23;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisvalueminorgridlinestroke_);
    }

    // optional float tschchartaxiscategory3dgridlineopacity = 1;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float tschchartaxisvalue3dgridlineopacity = 2;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional int32 tschchartaxiscategoryhorizontalspacing = 5;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartaxiscategoryhorizontalspacing());
    }

    // optional int32 tschchartaxiscategorylabelparagraphstyleindex = 6;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartaxiscategorylabelparagraphstyleindex());
    }

    // optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 7;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartaxisdefaultlabelparagraphstyleindex());
    }

    // optional int32 tschchartaxisvaluelabelparagraphstyleindex = 8;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartaxisvaluelabelparagraphstyleindex());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float tschchartaxiscategorylabelsorientation = 9;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartaxisdefaultlabelsorientation = 10;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartaxisvaluelabelsorientation = 11;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartaxiscategorymajorgridlineopacity = 12;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartaxisvaluemajorgridlineopacity = 13;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartaxiscategoryminorgridlineopacity = 18;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartaxisvalueminorgridlineopacity = 19;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional bool tschchartaxiscategoryshowaxis = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool tschchartaxisvalueshowaxis = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowlastlabel = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowmajorgridlines = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisvalueshowmajorgridlines = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowmajortickmarks = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisvalueshowmajortickmarks = 30;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisvalueshowminimumlabel = 31;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowminorgridlines = 32;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool tschchartaxisvalueshowminorgridlines = 33;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowminortickmarks = 34;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisvalueshowminortickmarks = 35;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartaxiscategorytickmarklocation = 36;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxiscategorytickmarklocation());
    }

    // optional int32 tschchartaxisvaluetickmarklocation = 37;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisvaluetickmarklocation());
    }

    // optional int32 tschchartaxiscategorytitleparagraphstyleindex = 38;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxiscategorytitleparagraphstyleindex());
    }

    // optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 39;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisdefaulttitleparagraphstyleindex());
    }

    // optional int32 tschchartaxisvaluetitleparagraphstyleindex = 40;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisvaluetitleparagraphstyleindex());
    }

  }
  // optional int32 tschchartaxiscategoryverticalspacing = 41;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_tschchartaxiscategoryverticalspacing());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartAxisStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartAxisStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartAxisStyleArchive::GetClassData() const { return &_class_data_; }


void ChartAxisStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartAxisStyleArchive*>(&to_msg);
  auto& from = static_cast<const ChartAxisStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.ChartAxisStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_tschchartaxiscategory3dgridlinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartaxiscategory3dgridlinestroke());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tschchartaxisvalue3dgridlinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartaxisvalue3dgridlinestroke());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tschchartaxiscategorymajorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartaxiscategorymajorgridlineshadow());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tschchartaxisvaluemajorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartaxisvaluemajorgridlineshadow());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_tschchartaxiscategorymajorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartaxiscategorymajorgridlinestroke());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_tschchartaxisvaluemajorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartaxisvaluemajorgridlinestroke());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_tschchartaxiscategoryminorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartaxiscategoryminorgridlineshadow());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_tschchartaxisvalueminorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartaxisvalueminorgridlineshadow());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_tschchartaxiscategoryminorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartaxiscategoryminorgridlinestroke());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_tschchartaxisvalueminorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartaxisvalueminorgridlinestroke());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.tschchartaxiscategory3dgridlineopacity_ = from._impl_.tschchartaxiscategory3dgridlineopacity_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.tschchartaxisvalue3dgridlineopacity_ = from._impl_.tschchartaxisvalue3dgridlineopacity_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.tschchartaxiscategoryhorizontalspacing_ = from._impl_.tschchartaxiscategoryhorizontalspacing_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tschchartaxiscategorylabelparagraphstyleindex_ = from._impl_.tschchartaxiscategorylabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.tschchartaxisdefaultlabelparagraphstyleindex_ = from._impl_.tschchartaxisdefaultlabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.tschchartaxisvaluelabelparagraphstyleindex_ = from._impl_.tschchartaxisvaluelabelparagraphstyleindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.tschchartaxiscategorylabelsorientation_ = from._impl_.tschchartaxiscategorylabelsorientation_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.tschchartaxisdefaultlabelsorientation_ = from._impl_.tschchartaxisdefaultlabelsorientation_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.tschchartaxisvaluelabelsorientation_ = from._impl_.tschchartaxisvaluelabelsorientation_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.tschchartaxiscategorymajorgridlineopacity_ = from._impl_.tschchartaxiscategorymajorgridlineopacity_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.tschchartaxisvaluemajorgridlineopacity_ = from._impl_.tschchartaxisvaluemajorgridlineopacity_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.tschchartaxiscategoryminorgridlineopacity_ = from._impl_.tschchartaxiscategoryminorgridlineopacity_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.tschchartaxisvalueminorgridlineopacity_ = from._impl_.tschchartaxisvalueminorgridlineopacity_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.tschchartaxiscategoryshowaxis_ = from._impl_.tschchartaxiscategoryshowaxis_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.tschchartaxisvalueshowaxis_ = from._impl_.tschchartaxisvalueshowaxis_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.tschchartaxiscategoryshowlastlabel_ = from._impl_.tschchartaxiscategoryshowlastlabel_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.tschchartaxiscategoryshowmajorgridlines_ = from._impl_.tschchartaxiscategoryshowmajorgridlines_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.tschchartaxisvalueshowmajorgridlines_ = from._impl_.tschchartaxisvalueshowmajorgridlines_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.tschchartaxiscategoryshowmajortickmarks_ = from._impl_.tschchartaxiscategoryshowmajortickmarks_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.tschchartaxisvalueshowmajortickmarks_ = from._impl_.tschchartaxisvalueshowmajortickmarks_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.tschchartaxisvalueshowminimumlabel_ = from._impl_.tschchartaxisvalueshowminimumlabel_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.tschchartaxiscategoryshowminorgridlines_ = from._impl_.tschchartaxiscategoryshowminorgridlines_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tschchartaxisvalueshowminorgridlines_ = from._impl_.tschchartaxisvalueshowminorgridlines_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tschchartaxiscategoryshowminortickmarks_ = from._impl_.tschchartaxiscategoryshowminortickmarks_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tschchartaxisvalueshowminortickmarks_ = from._impl_.tschchartaxisvalueshowminortickmarks_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tschchartaxiscategorytickmarklocation_ = from._impl_.tschchartaxiscategorytickmarklocation_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tschchartaxisvaluetickmarklocation_ = from._impl_.tschchartaxisvaluetickmarklocation_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tschchartaxiscategorytitleparagraphstyleindex_ = from._impl_.tschchartaxiscategorytitleparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.tschchartaxisdefaulttitleparagraphstyleindex_ = from._impl_.tschchartaxisdefaulttitleparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.tschchartaxisvaluetitleparagraphstyleindex_ = from._impl_.tschchartaxisvaluetitleparagraphstyleindex_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_tschchartaxiscategoryverticalspacing(from._internal_tschchartaxiscategoryverticalspacing());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartAxisStyleArchive::CopyFrom(const ChartAxisStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.ChartAxisStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartAxisStyleArchive::IsInitialized() const {
  if (_internal_has_tschchartaxiscategory3dgridlinestroke()) {
    if (!_impl_.tschchartaxiscategory3dgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisvalue3dgridlinestroke()) {
    if (!_impl_.tschchartaxisvalue3dgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxiscategorymajorgridlineshadow()) {
    if (!_impl_.tschchartaxiscategorymajorgridlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisvaluemajorgridlineshadow()) {
    if (!_impl_.tschchartaxisvaluemajorgridlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxiscategorymajorgridlinestroke()) {
    if (!_impl_.tschchartaxiscategorymajorgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisvaluemajorgridlinestroke()) {
    if (!_impl_.tschchartaxisvaluemajorgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxiscategoryminorgridlineshadow()) {
    if (!_impl_.tschchartaxiscategoryminorgridlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisvalueminorgridlineshadow()) {
    if (!_impl_.tschchartaxisvalueminorgridlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxiscategoryminorgridlinestroke()) {
    if (!_impl_.tschchartaxiscategoryminorgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisvalueminorgridlinestroke()) {
    if (!_impl_.tschchartaxisvalueminorgridlinestroke_->IsInitialized()) return false;
  }
  return true;
}

void ChartAxisStyleArchive::InternalSwap(ChartAxisStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartAxisStyleArchive, _impl_.tschchartaxiscategoryverticalspacing_)
      + sizeof(ChartAxisStyleArchive::_impl_.tschchartaxiscategoryverticalspacing_)
      - PROTOBUF_FIELD_OFFSET(ChartAxisStyleArchive, _impl_.tschchartaxiscategory3dgridlinestroke_)>(
          reinterpret_cast<char*>(&_impl_.tschchartaxiscategory3dgridlinestroke_),
          reinterpret_cast<char*>(&other->_impl_.tschchartaxiscategory3dgridlinestroke_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartAxisStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[4]);
}

// ===================================================================

class ChartAxisNonStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartAxisNonStyleArchive>()._impl_._has_bits_);
  static void set_has_tschchartaxisdefault3dlabelposition(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSK::FormatStructArchive& tschchartaxisdefaultnumberformat(const ChartAxisNonStyleArchive* msg);
  static void set_has_tschchartaxisdefaultnumberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tschchartaxisdefaultnumberformattype(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tschchartaxisvaluenumberofdecades(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tschchartaxisvaluenumberofmajorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tschchartaxisvaluenumberofminorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tschchartaxiscategoryplottoedges(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tschchartaxisvaluescale(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tschchartaxiscategoryshowlabels(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tschchartaxisdefaultshowlabels(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_tschchartaxisvalueshowlabels(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tschchartaxiscategoryshowserieslabels(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tschchartaxismultidatashowserieslabels(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tschchartaxiscategoryshowtitle(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tschchartaxisvalueshowtitle(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_tschchartaxiscategorytitle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschchartaxisvaluetitle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCH::ChartsNSNumberDoubleArchive& tschchartaxisdefaultusermax(const ChartAxisNonStyleArchive* msg);
  static void set_has_tschchartaxisdefaultusermax(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCH::ChartsNSNumberDoubleArchive& tschchartaxisdefaultusermin(const ChartAxisNonStyleArchive* msg);
  static void set_has_tschchartaxisdefaultusermin(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TSK::FormatStructArchive&
ChartAxisNonStyleArchive::_Internal::tschchartaxisdefaultnumberformat(const ChartAxisNonStyleArchive* msg) {
  return *msg->_impl_.tschchartaxisdefaultnumberformat_;
}
const ::TSCH::ChartsNSNumberDoubleArchive&
ChartAxisNonStyleArchive::_Internal::tschchartaxisdefaultusermax(const ChartAxisNonStyleArchive* msg) {
  return *msg->_impl_.tschchartaxisdefaultusermax_;
}
const ::TSCH::ChartsNSNumberDoubleArchive&
ChartAxisNonStyleArchive::_Internal::tschchartaxisdefaultusermin(const ChartAxisNonStyleArchive* msg) {
  return *msg->_impl_.tschchartaxisdefaultusermin_;
}
void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultnumberformat() {
  if (_impl_.tschchartaxisdefaultnumberformat_ != nullptr) _impl_.tschchartaxisdefaultnumberformat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultusermax() {
  if (_impl_.tschchartaxisdefaultusermax_ != nullptr) _impl_.tschchartaxisdefaultusermax_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultusermin() {
  if (_impl_.tschchartaxisdefaultusermin_ != nullptr) _impl_.tschchartaxisdefaultusermin_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
ChartAxisNonStyleArchive::ChartAxisNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.ChartAxisNonStyleArchive)
}
ChartAxisNonStyleArchive::ChartAxisNonStyleArchive(const ChartAxisNonStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartAxisNonStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartaxiscategorytitle_){}
    , decltype(_impl_.tschchartaxisvaluetitle_){}
    , decltype(_impl_.tschchartaxisdefaultnumberformat_){nullptr}
    , decltype(_impl_.tschchartaxisdefaultusermax_){nullptr}
    , decltype(_impl_.tschchartaxisdefaultusermin_){nullptr}
    , decltype(_impl_.tschchartaxisdefault3dlabelposition_){}
    , decltype(_impl_.tschchartaxisdefaultnumberformattype_){}
    , decltype(_impl_.tschchartaxisvaluenumberofdecades_){}
    , decltype(_impl_.tschchartaxisvaluenumberofmajorgridlines_){}
    , decltype(_impl_.tschchartaxisvaluenumberofminorgridlines_){}
    , decltype(_impl_.tschchartaxisvaluescale_){}
    , decltype(_impl_.tschchartaxiscategoryplottoedges_){}
    , decltype(_impl_.tschchartaxiscategoryshowlabels_){}
    , decltype(_impl_.tschchartaxisdefaultshowlabels_){}
    , decltype(_impl_.tschchartaxisvalueshowlabels_){}
    , decltype(_impl_.tschchartaxiscategoryshowserieslabels_){}
    , decltype(_impl_.tschchartaxismultidatashowserieslabels_){}
    , decltype(_impl_.tschchartaxiscategoryshowtitle_){}
    , decltype(_impl_.tschchartaxisvalueshowtitle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tschchartaxiscategorytitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartaxiscategorytitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tschchartaxiscategorytitle()) {
    _this->_impl_.tschchartaxiscategorytitle_.Set(from._internal_tschchartaxiscategorytitle(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tschchartaxisvaluetitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartaxisvaluetitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tschchartaxisvaluetitle()) {
    _this->_impl_.tschchartaxisvaluetitle_.Set(from._internal_tschchartaxisvaluetitle(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_tschchartaxisdefaultnumberformat()) {
    _this->_impl_.tschchartaxisdefaultnumberformat_ = new ::TSK::FormatStructArchive(*from._impl_.tschchartaxisdefaultnumberformat_);
  }
  if (from._internal_has_tschchartaxisdefaultusermax()) {
    _this->_impl_.tschchartaxisdefaultusermax_ = new ::TSCH::ChartsNSNumberDoubleArchive(*from._impl_.tschchartaxisdefaultusermax_);
  }
  if (from._internal_has_tschchartaxisdefaultusermin()) {
    _this->_impl_.tschchartaxisdefaultusermin_ = new ::TSCH::ChartsNSNumberDoubleArchive(*from._impl_.tschchartaxisdefaultusermin_);
  }
  ::memcpy(&_impl_.tschchartaxisdefault3dlabelposition_, &from._impl_.tschchartaxisdefault3dlabelposition_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tschchartaxisvalueshowtitle_) -
    reinterpret_cast<char*>(&_impl_.tschchartaxisdefault3dlabelposition_)) + sizeof(_impl_.tschchartaxisvalueshowtitle_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.ChartAxisNonStyleArchive)
}

inline void ChartAxisNonStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartaxiscategorytitle_){}
    , decltype(_impl_.tschchartaxisvaluetitle_){}
    , decltype(_impl_.tschchartaxisdefaultnumberformat_){nullptr}
    , decltype(_impl_.tschchartaxisdefaultusermax_){nullptr}
    , decltype(_impl_.tschchartaxisdefaultusermin_){nullptr}
    , decltype(_impl_.tschchartaxisdefault3dlabelposition_){0}
    , decltype(_impl_.tschchartaxisdefaultnumberformattype_){0}
    , decltype(_impl_.tschchartaxisvaluenumberofdecades_){0}
    , decltype(_impl_.tschchartaxisvaluenumberofmajorgridlines_){0}
    , decltype(_impl_.tschchartaxisvaluenumberofminorgridlines_){0}
    , decltype(_impl_.tschchartaxisvaluescale_){0}
    , decltype(_impl_.tschchartaxiscategoryplottoedges_){false}
    , decltype(_impl_.tschchartaxiscategoryshowlabels_){false}
    , decltype(_impl_.tschchartaxisdefaultshowlabels_){false}
    , decltype(_impl_.tschchartaxisvalueshowlabels_){false}
    , decltype(_impl_.tschchartaxiscategoryshowserieslabels_){false}
    , decltype(_impl_.tschchartaxismultidatashowserieslabels_){false}
    , decltype(_impl_.tschchartaxiscategoryshowtitle_){false}
    , decltype(_impl_.tschchartaxisvalueshowtitle_){false}
  };
  _impl_.tschchartaxiscategorytitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartaxiscategorytitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tschchartaxisvaluetitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartaxisvaluetitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChartAxisNonStyleArchive::~ChartAxisNonStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.ChartAxisNonStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartAxisNonStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tschchartaxiscategorytitle_.Destroy();
  _impl_.tschchartaxisvaluetitle_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tschchartaxisdefaultnumberformat_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisdefaultusermax_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisdefaultusermin_;
}

void ChartAxisNonStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartAxisNonStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.ChartAxisNonStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.tschchartaxiscategorytitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.tschchartaxisvaluetitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisdefaultnumberformat_ != nullptr);
      _impl_.tschchartaxisdefaultnumberformat_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisdefaultusermax_ != nullptr);
      _impl_.tschchartaxisdefaultusermax_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisdefaultusermin_ != nullptr);
      _impl_.tschchartaxisdefaultusermin_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.tschchartaxisdefault3dlabelposition_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartaxisvaluenumberofdecades_) -
        reinterpret_cast<char*>(&_impl_.tschchartaxisdefault3dlabelposition_)) + sizeof(_impl_.tschchartaxisvaluenumberofdecades_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.tschchartaxisvaluenumberofmajorgridlines_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartaxiscategoryshowserieslabels_) -
        reinterpret_cast<char*>(&_impl_.tschchartaxisvaluenumberofmajorgridlines_)) + sizeof(_impl_.tschchartaxiscategoryshowserieslabels_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&_impl_.tschchartaxismultidatashowserieslabels_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartaxisvalueshowtitle_) -
        reinterpret_cast<char*>(&_impl_.tschchartaxismultidatashowserieslabels_)) + sizeof(_impl_.tschchartaxisvalueshowtitle_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartAxisNonStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 tschchartaxisdefault3dlabelposition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tschchartaxisdefault3dlabelposition(&has_bits);
          _impl_.tschchartaxisdefault3dlabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartaxisdefaultnumberformat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisdefaultnumberformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisdefaultnumberformattype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tschchartaxisdefaultnumberformattype(&has_bits);
          _impl_.tschchartaxisdefaultnumberformattype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluenumberofdecades = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_tschchartaxisvaluenumberofdecades(&has_bits);
          _impl_.tschchartaxisvaluenumberofdecades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluenumberofmajorgridlines = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_tschchartaxisvaluenumberofmajorgridlines(&has_bits);
          _impl_.tschchartaxisvaluenumberofmajorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluenumberofminorgridlines = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_tschchartaxisvaluenumberofminorgridlines(&has_bits);
          _impl_.tschchartaxisvaluenumberofminorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryplottoedges = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_tschchartaxiscategoryplottoedges(&has_bits);
          _impl_.tschchartaxiscategoryplottoedges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluescale = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_tschchartaxisvaluescale(&has_bits);
          _impl_.tschchartaxisvaluescale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowlabels = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_tschchartaxiscategoryshowlabels(&has_bits);
          _impl_.tschchartaxiscategoryshowlabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisdefaultshowlabels = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_tschchartaxisdefaultshowlabels(&has_bits);
          _impl_.tschchartaxisdefaultshowlabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowlabels = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_tschchartaxisvalueshowlabels(&has_bits);
          _impl_.tschchartaxisvalueshowlabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowserieslabels = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_tschchartaxiscategoryshowserieslabels(&has_bits);
          _impl_.tschchartaxiscategoryshowserieslabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowtitle = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_tschchartaxiscategoryshowtitle(&has_bits);
          _impl_.tschchartaxiscategoryshowtitle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowtitle = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_tschchartaxisvalueshowtitle(&has_bits);
          _impl_.tschchartaxisvalueshowtitle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tschchartaxiscategorytitle = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_tschchartaxiscategorytitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategorytitle");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string tschchartaxisvaluetitle = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_tschchartaxisvaluetitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluetitle");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisdefaultusermax(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisdefaultusermin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxismultidatashowserieslabels = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_tschchartaxismultidatashowserieslabels(&has_bits);
          _impl_.tschchartaxismultidatashowserieslabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartAxisNonStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.ChartAxisNonStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 tschchartaxisdefault3dlabelposition = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_tschchartaxisdefault3dlabelposition(), target);
  }

  // optional .TSK.FormatStructArchive tschchartaxisdefaultnumberformat = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tschchartaxisdefaultnumberformat(this),
        _Internal::tschchartaxisdefaultnumberformat(this).GetCachedSize(), target, stream);
  }

  // optional int32 tschchartaxisdefaultnumberformattype = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_tschchartaxisdefaultnumberformattype(), target);
  }

  // optional int32 tschchartaxisvaluenumberofdecades = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_tschchartaxisvaluenumberofdecades(), target);
  }

  // optional int32 tschchartaxisvaluenumberofmajorgridlines = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_tschchartaxisvaluenumberofmajorgridlines(), target);
  }

  // optional int32 tschchartaxisvaluenumberofminorgridlines = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_tschchartaxisvaluenumberofminorgridlines(), target);
  }

  // optional bool tschchartaxiscategoryplottoedges = 7;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_tschchartaxiscategoryplottoedges(), target);
  }

  // optional int32 tschchartaxisvaluescale = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_tschchartaxisvaluescale(), target);
  }

  // optional bool tschchartaxiscategoryshowlabels = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_tschchartaxiscategoryshowlabels(), target);
  }

  // optional bool tschchartaxisdefaultshowlabels = 10;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_tschchartaxisdefaultshowlabels(), target);
  }

  // optional bool tschchartaxisvalueshowlabels = 11;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_tschchartaxisvalueshowlabels(), target);
  }

  // optional bool tschchartaxiscategoryshowserieslabels = 12;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_tschchartaxiscategoryshowserieslabels(), target);
  }

  // optional bool tschchartaxiscategoryshowtitle = 13;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_tschchartaxiscategoryshowtitle(), target);
  }

  // optional bool tschchartaxisvalueshowtitle = 14;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_tschchartaxisvalueshowtitle(), target);
  }

  // optional string tschchartaxiscategorytitle = 15;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschchartaxiscategorytitle().data(), static_cast<int>(this->_internal_tschchartaxiscategorytitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategorytitle");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_tschchartaxiscategorytitle(), target);
  }

  // optional string tschchartaxisvaluetitle = 16;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschchartaxisvaluetitle().data(), static_cast<int>(this->_internal_tschchartaxisvaluetitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluetitle");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_tschchartaxisvaluetitle(), target);
  }

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 17;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::tschchartaxisdefaultusermax(this),
        _Internal::tschchartaxisdefaultusermax(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 18;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::tschchartaxisdefaultusermin(this),
        _Internal::tschchartaxisdefaultusermin(this).GetCachedSize(), target, stream);
  }

  // optional bool tschchartaxismultidatashowserieslabels = 19;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_tschchartaxismultidatashowserieslabels(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.ChartAxisNonStyleArchive)
  return target;
}

size_t ChartAxisNonStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.ChartAxisNonStyleArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string tschchartaxiscategorytitle = 15;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tschchartaxiscategorytitle());
    }

    // optional string tschchartaxisvaluetitle = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tschchartaxisvaluetitle());
    }

    // optional .TSK.FormatStructArchive tschchartaxisdefaultnumberformat = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisdefaultnumberformat_);
    }

    // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 17;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisdefaultusermax_);
    }

    // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 18;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisdefaultusermin_);
    }

    // optional int32 tschchartaxisdefault3dlabelposition = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartaxisdefault3dlabelposition());
    }

    // optional int32 tschchartaxisdefaultnumberformattype = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartaxisdefaultnumberformattype());
    }

    // optional int32 tschchartaxisvaluenumberofdecades = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartaxisvaluenumberofdecades());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 tschchartaxisvaluenumberofmajorgridlines = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartaxisvaluenumberofmajorgridlines());
    }

    // optional int32 tschchartaxisvaluenumberofminorgridlines = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartaxisvaluenumberofminorgridlines());
    }

    // optional int32 tschchartaxisvaluescale = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartaxisvaluescale());
    }

    // optional bool tschchartaxiscategoryplottoedges = 7;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxiscategoryshowlabels = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxisdefaultshowlabels = 10;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxisvalueshowlabels = 11;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxiscategoryshowserieslabels = 12;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional bool tschchartaxismultidatashowserieslabels = 19;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowtitle = 13;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxisvalueshowtitle = 14;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartAxisNonStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartAxisNonStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartAxisNonStyleArchive::GetClassData() const { return &_class_data_; }


void ChartAxisNonStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartAxisNonStyleArchive*>(&to_msg);
  auto& from = static_cast<const ChartAxisNonStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.ChartAxisNonStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tschchartaxiscategorytitle(from._internal_tschchartaxiscategorytitle());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_tschchartaxisvaluetitle(from._internal_tschchartaxisvaluetitle());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tschchartaxisdefaultnumberformat()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_tschchartaxisdefaultnumberformat());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tschchartaxisdefaultusermax()->::TSCH::ChartsNSNumberDoubleArchive::MergeFrom(
          from._internal_tschchartaxisdefaultusermax());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_tschchartaxisdefaultusermin()->::TSCH::ChartsNSNumberDoubleArchive::MergeFrom(
          from._internal_tschchartaxisdefaultusermin());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tschchartaxisdefault3dlabelposition_ = from._impl_.tschchartaxisdefault3dlabelposition_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.tschchartaxisdefaultnumberformattype_ = from._impl_.tschchartaxisdefaultnumberformattype_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.tschchartaxisvaluenumberofdecades_ = from._impl_.tschchartaxisvaluenumberofdecades_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.tschchartaxisvaluenumberofmajorgridlines_ = from._impl_.tschchartaxisvaluenumberofmajorgridlines_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.tschchartaxisvaluenumberofminorgridlines_ = from._impl_.tschchartaxisvaluenumberofminorgridlines_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.tschchartaxisvaluescale_ = from._impl_.tschchartaxisvaluescale_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.tschchartaxiscategoryplottoedges_ = from._impl_.tschchartaxiscategoryplottoedges_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.tschchartaxiscategoryshowlabels_ = from._impl_.tschchartaxiscategoryshowlabels_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tschchartaxisdefaultshowlabels_ = from._impl_.tschchartaxisdefaultshowlabels_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.tschchartaxisvalueshowlabels_ = from._impl_.tschchartaxisvalueshowlabels_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.tschchartaxiscategoryshowserieslabels_ = from._impl_.tschchartaxiscategoryshowserieslabels_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.tschchartaxismultidatashowserieslabels_ = from._impl_.tschchartaxismultidatashowserieslabels_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.tschchartaxiscategoryshowtitle_ = from._impl_.tschchartaxiscategoryshowtitle_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.tschchartaxisvalueshowtitle_ = from._impl_.tschchartaxisvalueshowtitle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartAxisNonStyleArchive::CopyFrom(const ChartAxisNonStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.ChartAxisNonStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartAxisNonStyleArchive::IsInitialized() const {
  if (_internal_has_tschchartaxisdefaultnumberformat()) {
    if (!_impl_.tschchartaxisdefaultnumberformat_->IsInitialized()) return false;
  }
  return true;
}

void ChartAxisNonStyleArchive::InternalSwap(ChartAxisNonStyleArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tschchartaxiscategorytitle_, lhs_arena,
      &other->_impl_.tschchartaxiscategorytitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tschchartaxisvaluetitle_, lhs_arena,
      &other->_impl_.tschchartaxisvaluetitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartAxisNonStyleArchive, _impl_.tschchartaxisvalueshowtitle_)
      + sizeof(ChartAxisNonStyleArchive::_impl_.tschchartaxisvalueshowtitle_)
      - PROTOBUF_FIELD_OFFSET(ChartAxisNonStyleArchive, _impl_.tschchartaxisdefaultnumberformat_)>(
          reinterpret_cast<char*>(&_impl_.tschchartaxisdefaultnumberformat_),
          reinterpret_cast<char*>(&other->_impl_.tschchartaxisdefaultnumberformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartAxisNonStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[5]);
}

// ===================================================================

class ChartSeriesStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartSeriesStyleArchive>()._impl_._has_bits_);
  static const ::TSD::LineEndArchive& tschchartseriesdefaulterrorbarlineend(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarlineend(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::LineEndArchive& tschchartseriesdefaulterrorbarlineendscatterx(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarlineendscatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesdefaulterrorbarshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesdefaulterrorbarstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesdefaulterrorbarstrokescatterx(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarstrokescatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::FillArchive& tschchartseries3dareafill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dareafill(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSD::FillArchive& tschchartseries3dbarfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dbarfill(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSD::FillArchive& tschchartseries3dcolumnfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dcolumnfill(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSD::FillArchive& tschchartseries3dlinefill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dlinefill(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSD::FillArchive& tschchartseries3dpiefill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dpiefill(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSD::FillArchive& tschchartseriesareafill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesareafill(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSD::FillArchive& tschchartseriesbarfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbarfill(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSD::FillArchive& tschchartseriescolumnfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriescolumnfill(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSD::FillArchive& tschchartseriesdefaultfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaultfill(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSD::FillArchive& tschchartseriesmixedareafill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedareafill(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSD::FillArchive& tschchartseriesmixedcolumnfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedcolumnfill(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSD::FillArchive& tschchartseriespiefill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriespiefill(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tschchartseriesarealabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_tschchartseriesbarlabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_tschchartseriesdefaultlabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_tschchartserieslinelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_tschchartseriesmixedlabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_tschchartseriespielabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_tschchartseriesdefaultopacity(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_tschchartseriesareaoutsidelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_tschchartseriesbaroutsidelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_tschchartseriesdefaultoutsidelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_tschchartseriesmixedoutsidelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static void set_has_tschchartseriespieoutsidelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static const ::TSD::ShadowArchive& tschchartseries3dareashadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dareashadow(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSD::ShadowArchive& tschchartseries3dbarshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dbarshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::TSD::ShadowArchive& tschchartseries3dcolumnshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dcolumnshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::TSD::ShadowArchive& tschchartseries3dlineshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::TSD::ShadowArchive& tschchartseries3dpieshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dpieshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesareashadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesareashadow(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesbarshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbarshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesbubbleshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbubbleshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesdefaultshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaultshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::TSD::ShadowArchive& tschchartserieslineshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartserieslineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesmixedareashadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedareashadow(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesmixedcolumnshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedcolumnshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesmixedlineshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::TSD::ShadowArchive& tschchartseriespieshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriespieshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesscattershadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesscattershadow(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesareastroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesareastroke(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesbarstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbarstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesbubblestroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbubblestroke(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::TSD::StrokeArchive& tschchartserieslinestroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartserieslinestroke(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesmixedareastroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedareastroke(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesmixedcolumnstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedcolumnstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesmixedlinestroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedlinestroke(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::TSD::StrokeArchive& tschchartseriespiestroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriespiestroke(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesscatterstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesscatterstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::TSD::FillArchive& tschchartseriesareasymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesareasymbolfill(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static const ::TSD::FillArchive& tschchartseriesbubblesymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbubblesymbolfill(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static const ::TSD::FillArchive& tschchartserieslinesymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartserieslinesymbolfill(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static const ::TSD::FillArchive& tschchartseriesmixedareasymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedareasymbolfill(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static const ::TSD::FillArchive& tschchartseriesmixedlinesymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedlinesymbolfill(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static const ::TSD::FillArchive& tschchartseriesscattersymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesscattersymbolfill(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_tschchartseriesareasymbolfilluseseriesfill(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static void set_has_tschchartserieslinesymbolfilluseseriesfill(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static void set_has_tschchartseriesmixedareasymbolfilluseseriesfill(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static void set_has_tschchartseriesmixedlinesymbolfilluseseriesfill(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static void set_has_tschchartseriesareasymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static void set_has_tschchartseriesbubblesymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static void set_has_tschchartserieslinesymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static void set_has_tschchartseriesmixedareasymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static void set_has_tschchartseriesmixedlinesymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static void set_has_tschchartseriesscattersymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static void set_has_tschchartseriesareasymbolsize(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static void set_has_tschchartserieslinesymbolsize(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static void set_has_tschchartseriesmixedareasymbolsize(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
  static void set_has_tschchartseriesmixedlinesymbolsize(HasBits* has_bits) {
    (*has_bits)[2] |= 65536u;
  }
  static void set_has_tschchartseriesscattersymbolsize(HasBits* has_bits) {
    (*has_bits)[2] |= 131072u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesareasymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesareasymbolstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesbubblesymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbubblesymbolstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static const ::TSD::StrokeArchive& tschchartserieslinesymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartserieslinesymbolstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesmixedareasymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedareasymbolstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesmixedlinesymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedlinesymbolstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesscattersymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesscattersymbolstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_tschchartseriesdefaulttrendlineequationopacity(HasBits* has_bits) {
    (*has_bits)[2] |= 262144u;
  }
  static void set_has_tschchartseriesdefaulttrendlineequationparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 524288u;
  }
  static void set_has_tschchartseriesdefaulttrendlinersquaredopacity(HasBits* has_bits) {
    (*has_bits)[2] |= 1048576u;
  }
  static void set_has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 2097152u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesdefaulttrendlineshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulttrendlineshadow(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesdefaulttrendlinestroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulttrendlinestroke(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_tschchartseriesareavaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 4194304u;
  }
  static void set_has_tschchartseriesbarvaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 8388608u;
  }
  static void set_has_tschchartseriesbubblevaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 16777216u;
  }
  static void set_has_tschchartseriesdefaultvaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 33554432u;
  }
  static void set_has_tschchartserieslinevaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 67108864u;
  }
  static void set_has_tschchartseriesmixedareavaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 134217728u;
  }
  static void set_has_tschchartseriesmixedcolumnvaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 268435456u;
  }
  static void set_has_tschchartseriesmixedlinevaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 536870912u;
  }
  static void set_has_tschchartseriesscattervaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 1073741824u;
  }
  static void set_has_tschchartseriesstackedareavaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 2147483648u;
  }
  static void set_has_tschchartseriesstackedbarvaluelabelposition(HasBits* has_bits) {
    (*has_bits)[3] |= 1u;
  }
};

const ::TSD::LineEndArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulterrorbarlineend(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulterrorbarlineend_;
}
const ::TSD::LineEndArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulterrorbarlineendscatterx(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulterrorbarlineendscatterx_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulterrorbarshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulterrorbarshadow_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulterrorbarstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulterrorbarstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulterrorbarstrokescatterx(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulterrorbarstrokescatterx_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dareafill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseries3dareafill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dbarfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseries3dbarfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dcolumnfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseries3dcolumnfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dlinefill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseries3dlinefill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dpiefill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseries3dpiefill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesareafill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesareafill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbarfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesbarfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriescolumnfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriescolumnfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaultfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaultfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedareafill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedareafill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedcolumnfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedcolumnfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriespiefill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriespiefill_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dareashadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseries3dareashadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dbarshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseries3dbarshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dcolumnshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseries3dcolumnshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dlineshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseries3dlineshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dpieshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseries3dpieshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesareashadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesareashadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbarshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesbarshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbubbleshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesbubbleshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaultshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaultshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartserieslineshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartserieslineshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedareashadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedareashadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedcolumnshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedcolumnshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedlineshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedlineshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriespieshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriespieshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesscattershadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesscattershadow_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesareastroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesareastroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbarstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesbarstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbubblestroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesbubblestroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartserieslinestroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartserieslinestroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedareastroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedareastroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedcolumnstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedcolumnstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedlinestroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedlinestroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriespiestroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriespiestroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesscatterstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesscatterstroke_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesareasymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesareasymbolfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbubblesymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesbubblesymbolfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartserieslinesymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartserieslinesymbolfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedareasymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedareasymbolfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedlinesymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedlinesymbolfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesscattersymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesscattersymbolfill_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesareasymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesareasymbolstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbubblesymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesbubblesymbolstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartserieslinesymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartserieslinesymbolstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedareasymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedareasymbolstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedlinesymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedlinesymbolstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesscattersymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesscattersymbolstroke_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulttrendlineshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulttrendlineshadow_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulttrendlinestroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulttrendlinestroke_;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarlineend() {
  if (_impl_.tschchartseriesdefaulterrorbarlineend_ != nullptr) _impl_.tschchartseriesdefaulterrorbarlineend_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarlineendscatterx() {
  if (_impl_.tschchartseriesdefaulterrorbarlineendscatterx_ != nullptr) _impl_.tschchartseriesdefaulterrorbarlineendscatterx_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarshadow() {
  if (_impl_.tschchartseriesdefaulterrorbarshadow_ != nullptr) _impl_.tschchartseriesdefaulterrorbarshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarstroke() {
  if (_impl_.tschchartseriesdefaulterrorbarstroke_ != nullptr) _impl_.tschchartseriesdefaulterrorbarstroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarstrokescatterx() {
  if (_impl_.tschchartseriesdefaulterrorbarstrokescatterx_ != nullptr) _impl_.tschchartseriesdefaulterrorbarstrokescatterx_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dareafill() {
  if (_impl_.tschchartseries3dareafill_ != nullptr) _impl_.tschchartseries3dareafill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dbarfill() {
  if (_impl_.tschchartseries3dbarfill_ != nullptr) _impl_.tschchartseries3dbarfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dcolumnfill() {
  if (_impl_.tschchartseries3dcolumnfill_ != nullptr) _impl_.tschchartseries3dcolumnfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dlinefill() {
  if (_impl_.tschchartseries3dlinefill_ != nullptr) _impl_.tschchartseries3dlinefill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dpiefill() {
  if (_impl_.tschchartseries3dpiefill_ != nullptr) _impl_.tschchartseries3dpiefill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesareafill() {
  if (_impl_.tschchartseriesareafill_ != nullptr) _impl_.tschchartseriesareafill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbarfill() {
  if (_impl_.tschchartseriesbarfill_ != nullptr) _impl_.tschchartseriesbarfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void ChartSeriesStyleArchive::clear_tschchartseriescolumnfill() {
  if (_impl_.tschchartseriescolumnfill_ != nullptr) _impl_.tschchartseriescolumnfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaultfill() {
  if (_impl_.tschchartseriesdefaultfill_ != nullptr) _impl_.tschchartseriesdefaultfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedareafill() {
  if (_impl_.tschchartseriesmixedareafill_ != nullptr) _impl_.tschchartseriesmixedareafill_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedcolumnfill() {
  if (_impl_.tschchartseriesmixedcolumnfill_ != nullptr) _impl_.tschchartseriesmixedcolumnfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriespiefill() {
  if (_impl_.tschchartseriespiefill_ != nullptr) _impl_.tschchartseriespiefill_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dareashadow() {
  if (_impl_.tschchartseries3dareashadow_ != nullptr) _impl_.tschchartseries3dareashadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dbarshadow() {
  if (_impl_.tschchartseries3dbarshadow_ != nullptr) _impl_.tschchartseries3dbarshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dcolumnshadow() {
  if (_impl_.tschchartseries3dcolumnshadow_ != nullptr) _impl_.tschchartseries3dcolumnshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dlineshadow() {
  if (_impl_.tschchartseries3dlineshadow_ != nullptr) _impl_.tschchartseries3dlineshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dpieshadow() {
  if (_impl_.tschchartseries3dpieshadow_ != nullptr) _impl_.tschchartseries3dpieshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00200000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesareashadow() {
  if (_impl_.tschchartseriesareashadow_ != nullptr) _impl_.tschchartseriesareashadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00400000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbarshadow() {
  if (_impl_.tschchartseriesbarshadow_ != nullptr) _impl_.tschchartseriesbarshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00800000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbubbleshadow() {
  if (_impl_.tschchartseriesbubbleshadow_ != nullptr) _impl_.tschchartseriesbubbleshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x01000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaultshadow() {
  if (_impl_.tschchartseriesdefaultshadow_ != nullptr) _impl_.tschchartseriesdefaultshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x02000000u;
}
void ChartSeriesStyleArchive::clear_tschchartserieslineshadow() {
  if (_impl_.tschchartserieslineshadow_ != nullptr) _impl_.tschchartserieslineshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x04000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedareashadow() {
  if (_impl_.tschchartseriesmixedareashadow_ != nullptr) _impl_.tschchartseriesmixedareashadow_->Clear();
  _impl_._has_bits_[0] &= ~0x08000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedcolumnshadow() {
  if (_impl_.tschchartseriesmixedcolumnshadow_ != nullptr) _impl_.tschchartseriesmixedcolumnshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x10000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedlineshadow() {
  if (_impl_.tschchartseriesmixedlineshadow_ != nullptr) _impl_.tschchartseriesmixedlineshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x20000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriespieshadow() {
  if (_impl_.tschchartseriespieshadow_ != nullptr) _impl_.tschchartseriespieshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x40000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesscattershadow() {
  if (_impl_.tschchartseriesscattershadow_ != nullptr) _impl_.tschchartseriesscattershadow_->Clear();
  _impl_._has_bits_[0] &= ~0x80000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesareastroke() {
  if (_impl_.tschchartseriesareastroke_ != nullptr) _impl_.tschchartseriesareastroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000001u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbarstroke() {
  if (_impl_.tschchartseriesbarstroke_ != nullptr) _impl_.tschchartseriesbarstroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000002u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbubblestroke() {
  if (_impl_.tschchartseriesbubblestroke_ != nullptr) _impl_.tschchartseriesbubblestroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000004u;
}
void ChartSeriesStyleArchive::clear_tschchartserieslinestroke() {
  if (_impl_.tschchartserieslinestroke_ != nullptr) _impl_.tschchartserieslinestroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000008u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedareastroke() {
  if (_impl_.tschchartseriesmixedareastroke_ != nullptr) _impl_.tschchartseriesmixedareastroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000010u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedcolumnstroke() {
  if (_impl_.tschchartseriesmixedcolumnstroke_ != nullptr) _impl_.tschchartseriesmixedcolumnstroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000020u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinestroke() {
  if (_impl_.tschchartseriesmixedlinestroke_ != nullptr) _impl_.tschchartseriesmixedlinestroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000040u;
}
void ChartSeriesStyleArchive::clear_tschchartseriespiestroke() {
  if (_impl_.tschchartseriespiestroke_ != nullptr) _impl_.tschchartseriespiestroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000080u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesscatterstroke() {
  if (_impl_.tschchartseriesscatterstroke_ != nullptr) _impl_.tschchartseriesscatterstroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000100u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesareasymbolfill() {
  if (_impl_.tschchartseriesareasymbolfill_ != nullptr) _impl_.tschchartseriesareasymbolfill_->Clear();
  _impl_._has_bits_[1] &= ~0x00000200u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbubblesymbolfill() {
  if (_impl_.tschchartseriesbubblesymbolfill_ != nullptr) _impl_.tschchartseriesbubblesymbolfill_->Clear();
  _impl_._has_bits_[1] &= ~0x00000400u;
}
void ChartSeriesStyleArchive::clear_tschchartserieslinesymbolfill() {
  if (_impl_.tschchartserieslinesymbolfill_ != nullptr) _impl_.tschchartserieslinesymbolfill_->Clear();
  _impl_._has_bits_[1] &= ~0x00000800u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedareasymbolfill() {
  if (_impl_.tschchartseriesmixedareasymbolfill_ != nullptr) _impl_.tschchartseriesmixedareasymbolfill_->Clear();
  _impl_._has_bits_[1] &= ~0x00001000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinesymbolfill() {
  if (_impl_.tschchartseriesmixedlinesymbolfill_ != nullptr) _impl_.tschchartseriesmixedlinesymbolfill_->Clear();
  _impl_._has_bits_[1] &= ~0x00002000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesscattersymbolfill() {
  if (_impl_.tschchartseriesscattersymbolfill_ != nullptr) _impl_.tschchartseriesscattersymbolfill_->Clear();
  _impl_._has_bits_[1] &= ~0x00004000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesareasymbolstroke() {
  if (_impl_.tschchartseriesareasymbolstroke_ != nullptr) _impl_.tschchartseriesareasymbolstroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00008000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbubblesymbolstroke() {
  if (_impl_.tschchartseriesbubblesymbolstroke_ != nullptr) _impl_.tschchartseriesbubblesymbolstroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00010000u;
}
void ChartSeriesStyleArchive::clear_tschchartserieslinesymbolstroke() {
  if (_impl_.tschchartserieslinesymbolstroke_ != nullptr) _impl_.tschchartserieslinesymbolstroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00020000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedareasymbolstroke() {
  if (_impl_.tschchartseriesmixedareasymbolstroke_ != nullptr) _impl_.tschchartseriesmixedareasymbolstroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00040000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinesymbolstroke() {
  if (_impl_.tschchartseriesmixedlinesymbolstroke_ != nullptr) _impl_.tschchartseriesmixedlinesymbolstroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00080000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesscattersymbolstroke() {
  if (_impl_.tschchartseriesscattersymbolstroke_ != nullptr) _impl_.tschchartseriesscattersymbolstroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00100000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulttrendlineshadow() {
  if (_impl_.tschchartseriesdefaulttrendlineshadow_ != nullptr) _impl_.tschchartseriesdefaulttrendlineshadow_->Clear();
  _impl_._has_bits_[1] &= ~0x00200000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulttrendlinestroke() {
  if (_impl_.tschchartseriesdefaulttrendlinestroke_ != nullptr) _impl_.tschchartseriesdefaulttrendlinestroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00400000u;
}
ChartSeriesStyleArchive::ChartSeriesStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.ChartSeriesStyleArchive)
}
ChartSeriesStyleArchive::ChartSeriesStyleArchive(const ChartSeriesStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartSeriesStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartseriesdefaulterrorbarlineend_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarlineendscatterx_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarshadow_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarstroke_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarstrokescatterx_){nullptr}
    , decltype(_impl_.tschchartseries3dareafill_){nullptr}
    , decltype(_impl_.tschchartseries3dbarfill_){nullptr}
    , decltype(_impl_.tschchartseries3dcolumnfill_){nullptr}
    , decltype(_impl_.tschchartseries3dlinefill_){nullptr}
    , decltype(_impl_.tschchartseries3dpiefill_){nullptr}
    , decltype(_impl_.tschchartseriesareafill_){nullptr}
    , decltype(_impl_.tschchartseriesbarfill_){nullptr}
    , decltype(_impl_.tschchartseriescolumnfill_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultfill_){nullptr}
    , decltype(_impl_.tschchartseriesmixedareafill_){nullptr}
    , decltype(_impl_.tschchartseriesmixedcolumnfill_){nullptr}
    , decltype(_impl_.tschchartseriespiefill_){nullptr}
    , decltype(_impl_.tschchartseries3dareashadow_){nullptr}
    , decltype(_impl_.tschchartseries3dbarshadow_){nullptr}
    , decltype(_impl_.tschchartseries3dcolumnshadow_){nullptr}
    , decltype(_impl_.tschchartseries3dlineshadow_){nullptr}
    , decltype(_impl_.tschchartseries3dpieshadow_){nullptr}
    , decltype(_impl_.tschchartseriesareashadow_){nullptr}
    , decltype(_impl_.tschchartseriesbarshadow_){nullptr}
    , decltype(_impl_.tschchartseriesbubbleshadow_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultshadow_){nullptr}
    , decltype(_impl_.tschchartserieslineshadow_){nullptr}
    , decltype(_impl_.tschchartseriesmixedareashadow_){nullptr}
    , decltype(_impl_.tschchartseriesmixedcolumnshadow_){nullptr}
    , decltype(_impl_.tschchartseriesmixedlineshadow_){nullptr}
    , decltype(_impl_.tschchartseriespieshadow_){nullptr}
    , decltype(_impl_.tschchartseriesscattershadow_){nullptr}
    , decltype(_impl_.tschchartseriesareastroke_){nullptr}
    , decltype(_impl_.tschchartseriesbarstroke_){nullptr}
    , decltype(_impl_.tschchartseriesbubblestroke_){nullptr}
    , decltype(_impl_.tschchartserieslinestroke_){nullptr}
    , decltype(_impl_.tschchartseriesmixedareastroke_){nullptr}
    , decltype(_impl_.tschchartseriesmixedcolumnstroke_){nullptr}
    , decltype(_impl_.tschchartseriesmixedlinestroke_){nullptr}
    , decltype(_impl_.tschchartseriespiestroke_){nullptr}
    , decltype(_impl_.tschchartseriesscatterstroke_){nullptr}
    , decltype(_impl_.tschchartseriesareasymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesbubblesymbolfill_){nullptr}
    , decltype(_impl_.tschchartserieslinesymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesmixedareasymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesmixedlinesymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesscattersymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesareasymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesbubblesymbolstroke_){nullptr}
    , decltype(_impl_.tschchartserieslinesymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesmixedareasymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesmixedlinesymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesscattersymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulttrendlineshadow_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulttrendlinestroke_){nullptr}
    , decltype(_impl_.tschchartseriesarealabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesbarlabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesdefaultlabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartserieslinelabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesmixedlabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriespielabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesdefaultopacity_){}
    , decltype(_impl_.tschchartseriesareaoutsidelabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesbaroutsidelabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesdefaultoutsidelabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesmixedoutsidelabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriespieoutsidelabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesareasymbolfilluseseriesfill_){}
    , decltype(_impl_.tschchartserieslinesymbolfilluseseriesfill_){}
    , decltype(_impl_.tschchartseriesmixedareasymbolfilluseseriesfill_){}
    , decltype(_impl_.tschchartseriesmixedlinesymbolfilluseseriesfill_){}
    , decltype(_impl_.tschchartseriesareasymbolfilluseseriesstroke_){}
    , decltype(_impl_.tschchartseriesbubblesymbolfilluseseriesstroke_){}
    , decltype(_impl_.tschchartserieslinesymbolfilluseseriesstroke_){}
    , decltype(_impl_.tschchartseriesmixedareasymbolfilluseseriesstroke_){}
    , decltype(_impl_.tschchartseriesmixedlinesymbolfilluseseriesstroke_){}
    , decltype(_impl_.tschchartseriesscattersymbolfilluseseriesstroke_){}
    , decltype(_impl_.tschchartseriesareasymbolsize_){}
    , decltype(_impl_.tschchartserieslinesymbolsize_){}
    , decltype(_impl_.tschchartseriesmixedareasymbolsize_){}
    , decltype(_impl_.tschchartseriesmixedlinesymbolsize_){}
    , decltype(_impl_.tschchartseriesscattersymbolsize_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlineequationopacity_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlineequationparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlinersquaredopacity_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesareavaluelabelposition_){}
    , decltype(_impl_.tschchartseriesbarvaluelabelposition_){}
    , decltype(_impl_.tschchartseriesbubblevaluelabelposition_){}
    , decltype(_impl_.tschchartseriesdefaultvaluelabelposition_){}
    , decltype(_impl_.tschchartserieslinevaluelabelposition_){}
    , decltype(_impl_.tschchartseriesmixedareavaluelabelposition_){}
    , decltype(_impl_.tschchartseriesmixedcolumnvaluelabelposition_){}
    , decltype(_impl_.tschchartseriesmixedlinevaluelabelposition_){}
    , decltype(_impl_.tschchartseriesscattervaluelabelposition_){}
    , decltype(_impl_.tschchartseriesstackedareavaluelabelposition_){}
    , decltype(_impl_.tschchartseriesstackedbarvaluelabelposition_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tschchartseriesdefaulterrorbarlineend()) {
    _this->_impl_.tschchartseriesdefaulterrorbarlineend_ = new ::TSD::LineEndArchive(*from._impl_.tschchartseriesdefaulterrorbarlineend_);
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarlineendscatterx()) {
    _this->_impl_.tschchartseriesdefaulterrorbarlineendscatterx_ = new ::TSD::LineEndArchive(*from._impl_.tschchartseriesdefaulterrorbarlineendscatterx_);
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarshadow()) {
    _this->_impl_.tschchartseriesdefaulterrorbarshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesdefaulterrorbarshadow_);
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarstroke()) {
    _this->_impl_.tschchartseriesdefaulterrorbarstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesdefaulterrorbarstroke_);
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarstrokescatterx()) {
    _this->_impl_.tschchartseriesdefaulterrorbarstrokescatterx_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesdefaulterrorbarstrokescatterx_);
  }
  if (from._internal_has_tschchartseries3dareafill()) {
    _this->_impl_.tschchartseries3dareafill_ = new ::TSD::FillArchive(*from._impl_.tschchartseries3dareafill_);
  }
  if (from._internal_has_tschchartseries3dbarfill()) {
    _this->_impl_.tschchartseries3dbarfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseries3dbarfill_);
  }
  if (from._internal_has_tschchartseries3dcolumnfill()) {
    _this->_impl_.tschchartseries3dcolumnfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseries3dcolumnfill_);
  }
  if (from._internal_has_tschchartseries3dlinefill()) {
    _this->_impl_.tschchartseries3dlinefill_ = new ::TSD::FillArchive(*from._impl_.tschchartseries3dlinefill_);
  }
  if (from._internal_has_tschchartseries3dpiefill()) {
    _this->_impl_.tschchartseries3dpiefill_ = new ::TSD::FillArchive(*from._impl_.tschchartseries3dpiefill_);
  }
  if (from._internal_has_tschchartseriesareafill()) {
    _this->_impl_.tschchartseriesareafill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesareafill_);
  }
  if (from._internal_has_tschchartseriesbarfill()) {
    _this->_impl_.tschchartseriesbarfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesbarfill_);
  }
  if (from._internal_has_tschchartseriescolumnfill()) {
    _this->_impl_.tschchartseriescolumnfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriescolumnfill_);
  }
  if (from._internal_has_tschchartseriesdefaultfill()) {
    _this->_impl_.tschchartseriesdefaultfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesdefaultfill_);
  }
  if (from._internal_has_tschchartseriesmixedareafill()) {
    _this->_impl_.tschchartseriesmixedareafill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesmixedareafill_);
  }
  if (from._internal_has_tschchartseriesmixedcolumnfill()) {
    _this->_impl_.tschchartseriesmixedcolumnfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesmixedcolumnfill_);
  }
  if (from._internal_has_tschchartseriespiefill()) {
    _this->_impl_.tschchartseriespiefill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriespiefill_);
  }
  if (from._internal_has_tschchartseries3dareashadow()) {
    _this->_impl_.tschchartseries3dareashadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseries3dareashadow_);
  }
  if (from._internal_has_tschchartseries3dbarshadow()) {
    _this->_impl_.tschchartseries3dbarshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseries3dbarshadow_);
  }
  if (from._internal_has_tschchartseries3dcolumnshadow()) {
    _this->_impl_.tschchartseries3dcolumnshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseries3dcolumnshadow_);
  }
  if (from._internal_has_tschchartseries3dlineshadow()) {
    _this->_impl_.tschchartseries3dlineshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseries3dlineshadow_);
  }
  if (from._internal_has_tschchartseries3dpieshadow()) {
    _this->_impl_.tschchartseries3dpieshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseries3dpieshadow_);
  }
  if (from._internal_has_tschchartseriesareashadow()) {
    _this->_impl_.tschchartseriesareashadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesareashadow_);
  }
  if (from._internal_has_tschchartseriesbarshadow()) {
    _this->_impl_.tschchartseriesbarshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesbarshadow_);
  }
  if (from._internal_has_tschchartseriesbubbleshadow()) {
    _this->_impl_.tschchartseriesbubbleshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesbubbleshadow_);
  }
  if (from._internal_has_tschchartseriesdefaultshadow()) {
    _this->_impl_.tschchartseriesdefaultshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesdefaultshadow_);
  }
  if (from._internal_has_tschchartserieslineshadow()) {
    _this->_impl_.tschchartserieslineshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartserieslineshadow_);
  }
  if (from._internal_has_tschchartseriesmixedareashadow()) {
    _this->_impl_.tschchartseriesmixedareashadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesmixedareashadow_);
  }
  if (from._internal_has_tschchartseriesmixedcolumnshadow()) {
    _this->_impl_.tschchartseriesmixedcolumnshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesmixedcolumnshadow_);
  }
  if (from._internal_has_tschchartseriesmixedlineshadow()) {
    _this->_impl_.tschchartseriesmixedlineshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesmixedlineshadow_);
  }
  if (from._internal_has_tschchartseriespieshadow()) {
    _this->_impl_.tschchartseriespieshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriespieshadow_);
  }
  if (from._internal_has_tschchartseriesscattershadow()) {
    _this->_impl_.tschchartseriesscattershadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesscattershadow_);
  }
  if (from._internal_has_tschchartseriesareastroke()) {
    _this->_impl_.tschchartseriesareastroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesareastroke_);
  }
  if (from._internal_has_tschchartseriesbarstroke()) {
    _this->_impl_.tschchartseriesbarstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesbarstroke_);
  }
  if (from._internal_has_tschchartseriesbubblestroke()) {
    _this->_impl_.tschchartseriesbubblestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesbubblestroke_);
  }
  if (from._internal_has_tschchartserieslinestroke()) {
    _this->_impl_.tschchartserieslinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartserieslinestroke_);
  }
  if (from._internal_has_tschchartseriesmixedareastroke()) {
    _this->_impl_.tschchartseriesmixedareastroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesmixedareastroke_);
  }
  if (from._internal_has_tschchartseriesmixedcolumnstroke()) {
    _this->_impl_.tschchartseriesmixedcolumnstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesmixedcolumnstroke_);
  }
  if (from._internal_has_tschchartseriesmixedlinestroke()) {
    _this->_impl_.tschchartseriesmixedlinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesmixedlinestroke_);
  }
  if (from._internal_has_tschchartseriespiestroke()) {
    _this->_impl_.tschchartseriespiestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriespiestroke_);
  }
  if (from._internal_has_tschchartseriesscatterstroke()) {
    _this->_impl_.tschchartseriesscatterstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesscatterstroke_);
  }
  if (from._internal_has_tschchartseriesareasymbolfill()) {
    _this->_impl_.tschchartseriesareasymbolfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesareasymbolfill_);
  }
  if (from._internal_has_tschchartseriesbubblesymbolfill()) {
    _this->_impl_.tschchartseriesbubblesymbolfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesbubblesymbolfill_);
  }
  if (from._internal_has_tschchartserieslinesymbolfill()) {
    _this->_impl_.tschchartserieslinesymbolfill_ = new ::TSD::FillArchive(*from._impl_.tschchartserieslinesymbolfill_);
  }
  if (from._internal_has_tschchartseriesmixedareasymbolfill()) {
    _this->_impl_.tschchartseriesmixedareasymbolfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesmixedareasymbolfill_);
  }
  if (from._internal_has_tschchartseriesmixedlinesymbolfill()) {
    _this->_impl_.tschchartseriesmixedlinesymbolfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesmixedlinesymbolfill_);
  }
  if (from._internal_has_tschchartseriesscattersymbolfill()) {
    _this->_impl_.tschchartseriesscattersymbolfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesscattersymbolfill_);
  }
  if (from._internal_has_tschchartseriesareasymbolstroke()) {
    _this->_impl_.tschchartseriesareasymbolstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesareasymbolstroke_);
  }
  if (from._internal_has_tschchartseriesbubblesymbolstroke()) {
    _this->_impl_.tschchartseriesbubblesymbolstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesbubblesymbolstroke_);
  }
  if (from._internal_has_tschchartserieslinesymbolstroke()) {
    _this->_impl_.tschchartserieslinesymbolstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartserieslinesymbolstroke_);
  }
  if (from._internal_has_tschchartseriesmixedareasymbolstroke()) {
    _this->_impl_.tschchartseriesmixedareasymbolstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesmixedareasymbolstroke_);
  }
  if (from._internal_has_tschchartseriesmixedlinesymbolstroke()) {
    _this->_impl_.tschchartseriesmixedlinesymbolstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesmixedlinesymbolstroke_);
  }
  if (from._internal_has_tschchartseriesscattersymbolstroke()) {
    _this->_impl_.tschchartseriesscattersymbolstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesscattersymbolstroke_);
  }
  if (from._internal_has_tschchartseriesdefaulttrendlineshadow()) {
    _this->_impl_.tschchartseriesdefaulttrendlineshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesdefaulttrendlineshadow_);
  }
  if (from._internal_has_tschchartseriesdefaulttrendlinestroke()) {
    _this->_impl_.tschchartseriesdefaulttrendlinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesdefaulttrendlinestroke_);
  }
  ::memcpy(&_impl_.tschchartseriesarealabelparagraphstyleindex_, &from._impl_.tschchartseriesarealabelparagraphstyleindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tschchartseriesstackedbarvaluelabelposition_) -
    reinterpret_cast<char*>(&_impl_.tschchartseriesarealabelparagraphstyleindex_)) + sizeof(_impl_.tschchartseriesstackedbarvaluelabelposition_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.ChartSeriesStyleArchive)
}

inline void ChartSeriesStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartseriesdefaulterrorbarlineend_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarlineendscatterx_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarshadow_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarstroke_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarstrokescatterx_){nullptr}
    , decltype(_impl_.tschchartseries3dareafill_){nullptr}
    , decltype(_impl_.tschchartseries3dbarfill_){nullptr}
    , decltype(_impl_.tschchartseries3dcolumnfill_){nullptr}
    , decltype(_impl_.tschchartseries3dlinefill_){nullptr}
    , decltype(_impl_.tschchartseries3dpiefill_){nullptr}
    , decltype(_impl_.tschchartseriesareafill_){nullptr}
    , decltype(_impl_.tschchartseriesbarfill_){nullptr}
    , decltype(_impl_.tschchartseriescolumnfill_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultfill_){nullptr}
    , decltype(_impl_.tschchartseriesmixedareafill_){nullptr}
    , decltype(_impl_.tschchartseriesmixedcolumnfill_){nullptr}
    , decltype(_impl_.tschchartseriespiefill_){nullptr}
    , decltype(_impl_.tschchartseries3dareashadow_){nullptr}
    , decltype(_impl_.tschchartseries3dbarshadow_){nullptr}
    , decltype(_impl_.tschchartseries3dcolumnshadow_){nullptr}
    , decltype(_impl_.tschchartseries3dlineshadow_){nullptr}
    , decltype(_impl_.tschchartseries3dpieshadow_){nullptr}
    , decltype(_impl_.tschchartseriesareashadow_){nullptr}
    , decltype(_impl_.tschchartseriesbarshadow_){nullptr}
    , decltype(_impl_.tschchartseriesbubbleshadow_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultshadow_){nullptr}
    , decltype(_impl_.tschchartserieslineshadow_){nullptr}
    , decltype(_impl_.tschchartseriesmixedareashadow_){nullptr}
    , decltype(_impl_.tschchartseriesmixedcolumnshadow_){nullptr}
    , decltype(_impl_.tschchartseriesmixedlineshadow_){nullptr}
    , decltype(_impl_.tschchartseriespieshadow_){nullptr}
    , decltype(_impl_.tschchartseriesscattershadow_){nullptr}
    , decltype(_impl_.tschchartseriesareastroke_){nullptr}
    , decltype(_impl_.tschchartseriesbarstroke_){nullptr}
    , decltype(_impl_.tschchartseriesbubblestroke_){nullptr}
    , decltype(_impl_.tschchartserieslinestroke_){nullptr}
    , decltype(_impl_.tschchartseriesmixedareastroke_){nullptr}
    , decltype(_impl_.tschchartseriesmixedcolumnstroke_){nullptr}
    , decltype(_impl_.tschchartseriesmixedlinestroke_){nullptr}
    , decltype(_impl_.tschchartseriespiestroke_){nullptr}
    , decltype(_impl_.tschchartseriesscatterstroke_){nullptr}
    , decltype(_impl_.tschchartseriesareasymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesbubblesymbolfill_){nullptr}
    , decltype(_impl_.tschchartserieslinesymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesmixedareasymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesmixedlinesymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesscattersymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesareasymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesbubblesymbolstroke_){nullptr}
    , decltype(_impl_.tschchartserieslinesymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesmixedareasymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesmixedlinesymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesscattersymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulttrendlineshadow_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulttrendlinestroke_){nullptr}
    , decltype(_impl_.tschchartseriesarealabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesbarlabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesdefaultlabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartserieslinelabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesmixedlabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriespielabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesdefaultopacity_){0}
    , decltype(_impl_.tschchartseriesareaoutsidelabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesbaroutsidelabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesdefaultoutsidelabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesmixedoutsidelabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriespieoutsidelabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesareasymbolfilluseseriesfill_){false}
    , decltype(_impl_.tschchartserieslinesymbolfilluseseriesfill_){false}
    , decltype(_impl_.tschchartseriesmixedareasymbolfilluseseriesfill_){false}
    , decltype(_impl_.tschchartseriesmixedlinesymbolfilluseseriesfill_){false}
    , decltype(_impl_.tschchartseriesareasymbolfilluseseriesstroke_){false}
    , decltype(_impl_.tschchartseriesbubblesymbolfilluseseriesstroke_){false}
    , decltype(_impl_.tschchartserieslinesymbolfilluseseriesstroke_){false}
    , decltype(_impl_.tschchartseriesmixedareasymbolfilluseseriesstroke_){false}
    , decltype(_impl_.tschchartseriesmixedlinesymbolfilluseseriesstroke_){false}
    , decltype(_impl_.tschchartseriesscattersymbolfilluseseriesstroke_){false}
    , decltype(_impl_.tschchartseriesareasymbolsize_){0}
    , decltype(_impl_.tschchartserieslinesymbolsize_){0}
    , decltype(_impl_.tschchartseriesmixedareasymbolsize_){0}
    , decltype(_impl_.tschchartseriesmixedlinesymbolsize_){0}
    , decltype(_impl_.tschchartseriesscattersymbolsize_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlineequationopacity_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlineequationparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlinersquaredopacity_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesareavaluelabelposition_){0}
    , decltype(_impl_.tschchartseriesbarvaluelabelposition_){0}
    , decltype(_impl_.tschchartseriesbubblevaluelabelposition_){0}
    , decltype(_impl_.tschchartseriesdefaultvaluelabelposition_){0}
    , decltype(_impl_.tschchartserieslinevaluelabelposition_){0}
    , decltype(_impl_.tschchartseriesmixedareavaluelabelposition_){0}
    , decltype(_impl_.tschchartseriesmixedcolumnvaluelabelposition_){0}
    , decltype(_impl_.tschchartseriesmixedlinevaluelabelposition_){0}
    , decltype(_impl_.tschchartseriesscattervaluelabelposition_){0}
    , decltype(_impl_.tschchartseriesstackedareavaluelabelposition_){0}
    , decltype(_impl_.tschchartseriesstackedbarvaluelabelposition_){0}
  };
}

ChartSeriesStyleArchive::~ChartSeriesStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.ChartSeriesStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartSeriesStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulterrorbarlineend_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulterrorbarlineendscatterx_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulterrorbarshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulterrorbarstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulterrorbarstrokescatterx_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries3dareafill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries3dbarfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries3dcolumnfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries3dlinefill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries3dpiefill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesareafill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesbarfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriescolumnfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaultfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedareafill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedcolumnfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriespiefill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries3dareashadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries3dbarshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries3dcolumnshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries3dlineshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries3dpieshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesareashadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesbarshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesbubbleshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaultshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartserieslineshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedareashadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedcolumnshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedlineshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriespieshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesscattershadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesareastroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesbarstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesbubblestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartserieslinestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedareastroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedcolumnstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedlinestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriespiestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesscatterstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesareasymbolfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesbubblesymbolfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartserieslinesymbolfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedareasymbolfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedlinesymbolfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesscattersymbolfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesareasymbolstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesbubblesymbolstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartserieslinesymbolstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedareasymbolstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedlinesymbolstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesscattersymbolstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulttrendlineshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulttrendlinestroke_;
}

void ChartSeriesStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartSeriesStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.ChartSeriesStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulterrorbarlineend_ != nullptr);
      _impl_.tschchartseriesdefaulterrorbarlineend_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulterrorbarlineendscatterx_ != nullptr);
      _impl_.tschchartseriesdefaulterrorbarlineendscatterx_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulterrorbarshadow_ != nullptr);
      _impl_.tschchartseriesdefaulterrorbarshadow_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulterrorbarstroke_ != nullptr);
      _impl_.tschchartseriesdefaulterrorbarstroke_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulterrorbarstrokescatterx_ != nullptr);
      _impl_.tschchartseriesdefaulterrorbarstrokescatterx_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.tschchartseries3dareafill_ != nullptr);
      _impl_.tschchartseries3dareafill_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.tschchartseries3dbarfill_ != nullptr);
      _impl_.tschchartseries3dbarfill_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.tschchartseries3dcolumnfill_ != nullptr);
      _impl_.tschchartseries3dcolumnfill_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.tschchartseries3dlinefill_ != nullptr);
      _impl_.tschchartseries3dlinefill_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.tschchartseries3dpiefill_ != nullptr);
      _impl_.tschchartseries3dpiefill_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesareafill_ != nullptr);
      _impl_.tschchartseriesareafill_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesbarfill_ != nullptr);
      _impl_.tschchartseriesbarfill_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriescolumnfill_ != nullptr);
      _impl_.tschchartseriescolumnfill_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaultfill_ != nullptr);
      _impl_.tschchartseriesdefaultfill_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedareafill_ != nullptr);
      _impl_.tschchartseriesmixedareafill_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedcolumnfill_ != nullptr);
      _impl_.tschchartseriesmixedcolumnfill_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriespiefill_ != nullptr);
      _impl_.tschchartseriespiefill_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.tschchartseries3dareashadow_ != nullptr);
      _impl_.tschchartseries3dareashadow_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.tschchartseries3dbarshadow_ != nullptr);
      _impl_.tschchartseries3dbarshadow_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.tschchartseries3dcolumnshadow_ != nullptr);
      _impl_.tschchartseries3dcolumnshadow_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.tschchartseries3dlineshadow_ != nullptr);
      _impl_.tschchartseries3dlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.tschchartseries3dpieshadow_ != nullptr);
      _impl_.tschchartseries3dpieshadow_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesareashadow_ != nullptr);
      _impl_.tschchartseriesareashadow_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesbarshadow_ != nullptr);
      _impl_.tschchartseriesbarshadow_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesbubbleshadow_ != nullptr);
      _impl_.tschchartseriesbubbleshadow_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaultshadow_ != nullptr);
      _impl_.tschchartseriesdefaultshadow_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(_impl_.tschchartserieslineshadow_ != nullptr);
      _impl_.tschchartserieslineshadow_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedareashadow_ != nullptr);
      _impl_.tschchartseriesmixedareashadow_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedcolumnshadow_ != nullptr);
      _impl_.tschchartseriesmixedcolumnshadow_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedlineshadow_ != nullptr);
      _impl_.tschchartseriesmixedlineshadow_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriespieshadow_ != nullptr);
      _impl_.tschchartseriespieshadow_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesscattershadow_ != nullptr);
      _impl_.tschchartseriesscattershadow_->Clear();
    }
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesareastroke_ != nullptr);
      _impl_.tschchartseriesareastroke_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesbarstroke_ != nullptr);
      _impl_.tschchartseriesbarstroke_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesbubblestroke_ != nullptr);
      _impl_.tschchartseriesbubblestroke_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.tschchartserieslinestroke_ != nullptr);
      _impl_.tschchartserieslinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedareastroke_ != nullptr);
      _impl_.tschchartseriesmixedareastroke_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedcolumnstroke_ != nullptr);
      _impl_.tschchartseriesmixedcolumnstroke_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedlinestroke_ != nullptr);
      _impl_.tschchartseriesmixedlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.tschchartseriespiestroke_ != nullptr);
      _impl_.tschchartseriespiestroke_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesscatterstroke_ != nullptr);
      _impl_.tschchartseriesscatterstroke_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesareasymbolfill_ != nullptr);
      _impl_.tschchartseriesareasymbolfill_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesbubblesymbolfill_ != nullptr);
      _impl_.tschchartseriesbubblesymbolfill_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.tschchartserieslinesymbolfill_ != nullptr);
      _impl_.tschchartserieslinesymbolfill_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedareasymbolfill_ != nullptr);
      _impl_.tschchartseriesmixedareasymbolfill_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedlinesymbolfill_ != nullptr);
      _impl_.tschchartseriesmixedlinesymbolfill_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesscattersymbolfill_ != nullptr);
      _impl_.tschchartseriesscattersymbolfill_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesareasymbolstroke_ != nullptr);
      _impl_.tschchartseriesareasymbolstroke_->Clear();
    }
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesbubblesymbolstroke_ != nullptr);
      _impl_.tschchartseriesbubblesymbolstroke_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.tschchartserieslinesymbolstroke_ != nullptr);
      _impl_.tschchartserieslinesymbolstroke_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedareasymbolstroke_ != nullptr);
      _impl_.tschchartseriesmixedareasymbolstroke_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedlinesymbolstroke_ != nullptr);
      _impl_.tschchartseriesmixedlinesymbolstroke_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesscattersymbolstroke_ != nullptr);
      _impl_.tschchartseriesscattersymbolstroke_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulttrendlineshadow_ != nullptr);
      _impl_.tschchartseriesdefaulttrendlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulttrendlinestroke_ != nullptr);
      _impl_.tschchartseriesdefaulttrendlinestroke_->Clear();
    }
  }
  _impl_.tschchartseriesarealabelparagraphstyleindex_ = 0;
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.tschchartseriesbarlabelparagraphstyleindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesbaroutsidelabelparagraphstyleindex_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesbarlabelparagraphstyleindex_)) + sizeof(_impl_.tschchartseriesbaroutsidelabelparagraphstyleindex_));
  }
  cached_has_bits = _impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.tschchartseriesdefaultoutsidelabelparagraphstyleindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesareasymbolfilluseseriesstroke_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesdefaultoutsidelabelparagraphstyleindex_)) + sizeof(_impl_.tschchartseriesareasymbolfilluseseriesstroke_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.tschchartseriesbubblesymbolfilluseseriesstroke_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesmixedareasymbolsize_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesbubblesymbolfilluseseriesstroke_)) + sizeof(_impl_.tschchartseriesmixedareasymbolsize_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.tschchartseriesmixedlinesymbolsize_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesbarvaluelabelposition_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesmixedlinesymbolsize_)) + sizeof(_impl_.tschchartseriesbarvaluelabelposition_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.tschchartseriesbubblevaluelabelposition_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesstackedareavaluelabelposition_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesbubblevaluelabelposition_)) + sizeof(_impl_.tschchartseriesstackedareavaluelabelposition_));
  }
  _impl_.tschchartseriesstackedbarvaluelabelposition_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSeriesStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarlineend(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarlineendscatterx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarstrokescatterx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseries3dareafill = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dareafill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseries3dbarfill = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dbarfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseries3dcolumnfill = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dcolumnfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseries3dlinefill = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dlinefill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseries3dpiefill = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dpiefill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesareafill = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesareafill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesbarfill = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbarfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriescolumnfill = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriescolumnfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesdefaultfill = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaultfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesmixedareafill = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedareafill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedcolumnfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriespiefill = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriespiefill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesarealabelparagraphstyleindex = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_tschchartseriesarealabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesarealabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbarlabelparagraphstyleindex = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_tschchartseriesbarlabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesbarlabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_tschchartseriesdefaultlabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultlabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartserieslinelabelparagraphstyleindex = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_tschchartserieslinelabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartserieslinelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedlabelparagraphstyleindex = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_tschchartseriesmixedlabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedlabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriespielabelparagraphstyleindex = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_tschchartseriespielabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriespielabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaultopacity = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 197)) {
          _Internal::set_has_tschchartseriesdefaultopacity(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_tschchartseriesareaoutsidelabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesareaoutsidelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_tschchartseriesbaroutsidelabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesbaroutsidelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_tschchartseriesdefaultoutsidelabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultoutsidelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_tschchartseriesmixedoutsidelabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedoutsidelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_tschchartseriespieoutsidelabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriespieoutsidelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseries3dareashadow = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dareashadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseries3dbarshadow = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dbarshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dcolumnshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseries3dlineshadow = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dlineshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseries3dpieshadow = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dpieshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesareashadow = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesareashadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesbarshadow = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbarshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbubbleshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaultshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartserieslineshadow = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieslineshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedareashadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedcolumnshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedlineshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriespieshadow = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriespieshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesscattershadow = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesscattershadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesareastroke = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesareastroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesbarstroke = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbarstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesbubblestroke = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbubblestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartserieslinestroke = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieslinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedareastroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedcolumnstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedlinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriespiestroke = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriespiestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesscatterstroke = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesscatterstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesareasymbolfill = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesareasymbolfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbubblesymbolfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartserieslinesymbolfill = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieslinesymbolfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedareasymbolfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedlinesymbolfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesscattersymbolfill = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesscattersymbolfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesareasymbolfilluseseriesfill = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_tschchartseriesareasymbolfilluseseriesfill(&_impl_._has_bits_);
          _impl_.tschchartseriesareasymbolfilluseseriesfill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartserieslinesymbolfilluseseriesfill = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_tschchartserieslinesymbolfilluseseriesfill(&_impl_._has_bits_);
          _impl_.tschchartserieslinesymbolfilluseseriesfill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_tschchartseriesmixedareasymbolfilluseseriesfill(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedareasymbolfilluseseriesfill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_tschchartseriesmixedlinesymbolfilluseseriesfill(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedlinesymbolfilluseseriesfill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesareasymbolfilluseseriesstroke = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_tschchartseriesareasymbolfilluseseriesstroke(&_impl_._has_bits_);
          _impl_.tschchartseriesareasymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tschchartseriesbubblesymbolfilluseseriesstroke(&_impl_._has_bits_);
          _impl_.tschchartseriesbubblesymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartserieslinesymbolfilluseseriesstroke = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tschchartserieslinesymbolfilluseseriesstroke(&_impl_._has_bits_);
          _impl_.tschchartserieslinesymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tschchartseriesmixedareasymbolfilluseseriesstroke(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedareasymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_tschchartseriesmixedlinesymbolfilluseseriesstroke(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedlinesymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesscattersymbolfilluseseriesstroke = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_tschchartseriesscattersymbolfilluseseriesstroke(&_impl_._has_bits_);
          _impl_.tschchartseriesscattersymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesareasymbolsize = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_tschchartseriesareasymbolsize(&_impl_._has_bits_);
          _impl_.tschchartseriesareasymbolsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartserieslinesymbolsize = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_tschchartserieslinesymbolsize(&_impl_._has_bits_);
          _impl_.tschchartserieslinesymbolsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesmixedareasymbolsize = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_tschchartseriesmixedareasymbolsize(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedareasymbolsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesmixedlinesymbolsize = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_tschchartseriesmixedlinesymbolsize(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedlinesymbolsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesscattersymbolsize = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_tschchartseriesscattersymbolsize(&_impl_._has_bits_);
          _impl_.tschchartseriesscattersymbolsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesareasymbolstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbubblesymbolstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieslinesymbolstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedareasymbolstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedlinesymbolstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesscattersymbolstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulttrendlineequationopacity = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineequationopacity(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlineequationopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineequationparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlineequationparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulttrendlinersquaredopacity = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _Internal::set_has_tschchartseriesdefaulttrendlinersquaredopacity(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlinersquaredopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulttrendlineshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulttrendlinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesareavaluelabelposition = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_tschchartseriesareavaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesareavaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbarvaluelabelposition = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_tschchartseriesbarvaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesbarvaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbubblevaluelabelposition = 89;
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_tschchartseriesbubblevaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesbubblevaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultvaluelabelposition = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_tschchartseriesdefaultvaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultvaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartserieslinevaluelabelposition = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_tschchartserieslinevaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartserieslinevaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedareavaluelabelposition = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_tschchartseriesmixedareavaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedareavaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedcolumnvaluelabelposition = 93;
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_tschchartseriesmixedcolumnvaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedcolumnvaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedlinevaluelabelposition = 94;
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_tschchartseriesmixedlinevaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedlinevaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesscattervaluelabelposition = 95;
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_tschchartseriesscattervaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesscattervaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesstackedareavaluelabelposition = 96;
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_tschchartseriesstackedareavaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesstackedareavaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesstackedbarvaluelabelposition = 97;
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tschchartseriesstackedbarvaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesstackedbarvaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartSeriesStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.ChartSeriesStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tschchartseriesdefaulterrorbarlineend(this),
        _Internal::tschchartseriesdefaulterrorbarlineend(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tschchartseriesdefaulterrorbarlineendscatterx(this),
        _Internal::tschchartseriesdefaulterrorbarlineendscatterx(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::tschchartseriesdefaulterrorbarshadow(this),
        _Internal::tschchartseriesdefaulterrorbarshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::tschchartseriesdefaulterrorbarstroke(this),
        _Internal::tschchartseriesdefaulterrorbarstroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::tschchartseriesdefaulterrorbarstrokescatterx(this),
        _Internal::tschchartseriesdefaulterrorbarstrokescatterx(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseries3dareafill = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::tschchartseries3dareafill(this),
        _Internal::tschchartseries3dareafill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseries3dbarfill = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::tschchartseries3dbarfill(this),
        _Internal::tschchartseries3dbarfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseries3dcolumnfill = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::tschchartseries3dcolumnfill(this),
        _Internal::tschchartseries3dcolumnfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseries3dlinefill = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::tschchartseries3dlinefill(this),
        _Internal::tschchartseries3dlinefill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseries3dpiefill = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::tschchartseries3dpiefill(this),
        _Internal::tschchartseries3dpiefill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesareafill = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::tschchartseriesareafill(this),
        _Internal::tschchartseriesareafill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesbarfill = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::tschchartseriesbarfill(this),
        _Internal::tschchartseriesbarfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriescolumnfill = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::tschchartseriescolumnfill(this),
        _Internal::tschchartseriescolumnfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesdefaultfill = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::tschchartseriesdefaultfill(this),
        _Internal::tschchartseriesdefaultfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesmixedareafill = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::tschchartseriesmixedareafill(this),
        _Internal::tschchartseriesmixedareafill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::tschchartseriesmixedcolumnfill(this),
        _Internal::tschchartseriesmixedcolumnfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriespiefill = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::tschchartseriespiefill(this),
        _Internal::tschchartseriespiefill(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 tschchartseriesarealabelparagraphstyleindex = 18;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_tschchartseriesarealabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesbarlabelparagraphstyleindex = 19;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_tschchartseriesbarlabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 20;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_tschchartseriesdefaultlabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartserieslinelabelparagraphstyleindex = 21;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_tschchartserieslinelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesmixedlabelparagraphstyleindex = 22;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_tschchartseriesmixedlabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriespielabelparagraphstyleindex = 23;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(23, this->_internal_tschchartseriespielabelparagraphstyleindex(), target);
  }

  // optional float tschchartseriesdefaultopacity = 24;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(24, this->_internal_tschchartseriesdefaultopacity(), target);
  }

  // optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 25;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_tschchartseriesareaoutsidelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 26;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(26, this->_internal_tschchartseriesbaroutsidelabelparagraphstyleindex(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 27;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(27, this->_internal_tschchartseriesdefaultoutsidelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 28;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(28, this->_internal_tschchartseriesmixedoutsidelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 29;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(29, this->_internal_tschchartseriespieoutsidelabelparagraphstyleindex(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.ShadowArchive tschchartseries3dareashadow = 30;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::tschchartseries3dareashadow(this),
        _Internal::tschchartseries3dareashadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseries3dbarshadow = 31;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::tschchartseries3dbarshadow(this),
        _Internal::tschchartseries3dbarshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 32;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::tschchartseries3dcolumnshadow(this),
        _Internal::tschchartseries3dcolumnshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseries3dlineshadow = 33;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::tschchartseries3dlineshadow(this),
        _Internal::tschchartseries3dlineshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseries3dpieshadow = 34;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::tschchartseries3dpieshadow(this),
        _Internal::tschchartseries3dpieshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesareashadow = 35;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::tschchartseriesareashadow(this),
        _Internal::tschchartseriesareashadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesbarshadow = 36;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, _Internal::tschchartseriesbarshadow(this),
        _Internal::tschchartseriesbarshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 37;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(37, _Internal::tschchartseriesbubbleshadow(this),
        _Internal::tschchartseriesbubbleshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 38;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(38, _Internal::tschchartseriesdefaultshadow(this),
        _Internal::tschchartseriesdefaultshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartserieslineshadow = 39;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, _Internal::tschchartserieslineshadow(this),
        _Internal::tschchartserieslineshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 40;
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::tschchartseriesmixedareashadow(this),
        _Internal::tschchartseriesmixedareashadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 41;
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, _Internal::tschchartseriesmixedcolumnshadow(this),
        _Internal::tschchartseriesmixedcolumnshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 42;
  if (cached_has_bits & 0x20000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, _Internal::tschchartseriesmixedlineshadow(this),
        _Internal::tschchartseriesmixedlineshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriespieshadow = 43;
  if (cached_has_bits & 0x40000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(43, _Internal::tschchartseriespieshadow(this),
        _Internal::tschchartseriespieshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesscattershadow = 44;
  if (cached_has_bits & 0x80000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(44, _Internal::tschchartseriesscattershadow(this),
        _Internal::tschchartseriesscattershadow(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .TSD.StrokeArchive tschchartseriesareastroke = 45;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(45, _Internal::tschchartseriesareastroke(this),
        _Internal::tschchartseriesareastroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesbarstroke = 46;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(46, _Internal::tschchartseriesbarstroke(this),
        _Internal::tschchartseriesbarstroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesbubblestroke = 47;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(47, _Internal::tschchartseriesbubblestroke(this),
        _Internal::tschchartseriesbubblestroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartserieslinestroke = 48;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(48, _Internal::tschchartserieslinestroke(this),
        _Internal::tschchartserieslinestroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 49;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(49, _Internal::tschchartseriesmixedareastroke(this),
        _Internal::tschchartseriesmixedareastroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 50;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, _Internal::tschchartseriesmixedcolumnstroke(this),
        _Internal::tschchartseriesmixedcolumnstroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 51;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(51, _Internal::tschchartseriesmixedlinestroke(this),
        _Internal::tschchartseriesmixedlinestroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriespiestroke = 52;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(52, _Internal::tschchartseriespiestroke(this),
        _Internal::tschchartseriespiestroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesscatterstroke = 53;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(53, _Internal::tschchartseriesscatterstroke(this),
        _Internal::tschchartseriesscatterstroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesareasymbolfill = 54;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(54, _Internal::tschchartseriesareasymbolfill(this),
        _Internal::tschchartseriesareasymbolfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 55;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(55, _Internal::tschchartseriesbubblesymbolfill(this),
        _Internal::tschchartseriesbubblesymbolfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartserieslinesymbolfill = 56;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(56, _Internal::tschchartserieslinesymbolfill(this),
        _Internal::tschchartserieslinesymbolfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 57;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(57, _Internal::tschchartseriesmixedareasymbolfill(this),
        _Internal::tschchartseriesmixedareasymbolfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 58;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(58, _Internal::tschchartseriesmixedlinesymbolfill(this),
        _Internal::tschchartseriesmixedlinesymbolfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesscattersymbolfill = 59;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(59, _Internal::tschchartseriesscattersymbolfill(this),
        _Internal::tschchartseriesscattersymbolfill(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional bool tschchartseriesareasymbolfilluseseriesfill = 60;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(60, this->_internal_tschchartseriesareasymbolfilluseseriesfill(), target);
  }

  // optional bool tschchartserieslinesymbolfilluseseriesfill = 61;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(61, this->_internal_tschchartserieslinesymbolfilluseseriesfill(), target);
  }

  // optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 62;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(62, this->_internal_tschchartseriesmixedareasymbolfilluseseriesfill(), target);
  }

  // optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 63;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(63, this->_internal_tschchartseriesmixedlinesymbolfilluseseriesfill(), target);
  }

  // optional bool tschchartseriesareasymbolfilluseseriesstroke = 64;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(64, this->_internal_tschchartseriesareasymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 65;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(65, this->_internal_tschchartseriesbubblesymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartserieslinesymbolfilluseseriesstroke = 66;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(66, this->_internal_tschchartserieslinesymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 67;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(67, this->_internal_tschchartseriesmixedareasymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 68;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(68, this->_internal_tschchartseriesmixedlinesymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartseriesscattersymbolfilluseseriesstroke = 69;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(69, this->_internal_tschchartseriesscattersymbolfilluseseriesstroke(), target);
  }

  // optional float tschchartseriesareasymbolsize = 70;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(70, this->_internal_tschchartseriesareasymbolsize(), target);
  }

  // optional float tschchartserieslinesymbolsize = 71;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(71, this->_internal_tschchartserieslinesymbolsize(), target);
  }

  // optional float tschchartseriesmixedareasymbolsize = 72;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(72, this->_internal_tschchartseriesmixedareasymbolsize(), target);
  }

  // optional float tschchartseriesmixedlinesymbolsize = 73;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(73, this->_internal_tschchartseriesmixedlinesymbolsize(), target);
  }

  // optional float tschchartseriesscattersymbolsize = 74;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(74, this->_internal_tschchartseriesscattersymbolsize(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 75;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(75, _Internal::tschchartseriesareasymbolstroke(this),
        _Internal::tschchartseriesareasymbolstroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 76;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(76, _Internal::tschchartseriesbubblesymbolstroke(this),
        _Internal::tschchartseriesbubblesymbolstroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 77;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(77, _Internal::tschchartserieslinesymbolstroke(this),
        _Internal::tschchartserieslinesymbolstroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 78;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(78, _Internal::tschchartseriesmixedareasymbolstroke(this),
        _Internal::tschchartseriesmixedareasymbolstroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 79;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(79, _Internal::tschchartseriesmixedlinesymbolstroke(this),
        _Internal::tschchartseriesmixedlinesymbolstroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 80;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(80, _Internal::tschchartseriesscattersymbolstroke(this),
        _Internal::tschchartseriesscattersymbolstroke(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional float tschchartseriesdefaulttrendlineequationopacity = 81;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(81, this->_internal_tschchartseriesdefaulttrendlineequationopacity(), target);
  }

  // optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 82;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(82, this->_internal_tschchartseriesdefaulttrendlineequationparagraphstyleindex(), target);
  }

  // optional float tschchartseriesdefaulttrendlinersquaredopacity = 83;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(83, this->_internal_tschchartseriesdefaulttrendlinersquaredopacity(), target);
  }

  // optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 84;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(84, this->_internal_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 85;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(85, _Internal::tschchartseriesdefaulttrendlineshadow(this),
        _Internal::tschchartseriesdefaulttrendlineshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 86;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(86, _Internal::tschchartseriesdefaulttrendlinestroke(this),
        _Internal::tschchartseriesdefaulttrendlinestroke(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional int32 tschchartseriesareavaluelabelposition = 87;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(87, this->_internal_tschchartseriesareavaluelabelposition(), target);
  }

  // optional int32 tschchartseriesbarvaluelabelposition = 88;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(88, this->_internal_tschchartseriesbarvaluelabelposition(), target);
  }

  // optional int32 tschchartseriesbubblevaluelabelposition = 89;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(89, this->_internal_tschchartseriesbubblevaluelabelposition(), target);
  }

  // optional int32 tschchartseriesdefaultvaluelabelposition = 90;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(90, this->_internal_tschchartseriesdefaultvaluelabelposition(), target);
  }

  // optional int32 tschchartserieslinevaluelabelposition = 91;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(91, this->_internal_tschchartserieslinevaluelabelposition(), target);
  }

  // optional int32 tschchartseriesmixedareavaluelabelposition = 92;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(92, this->_internal_tschchartseriesmixedareavaluelabelposition(), target);
  }

  // optional int32 tschchartseriesmixedcolumnvaluelabelposition = 93;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(93, this->_internal_tschchartseriesmixedcolumnvaluelabelposition(), target);
  }

  // optional int32 tschchartseriesmixedlinevaluelabelposition = 94;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(94, this->_internal_tschchartseriesmixedlinevaluelabelposition(), target);
  }

  // optional int32 tschchartseriesscattervaluelabelposition = 95;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(95, this->_internal_tschchartseriesscattervaluelabelposition(), target);
  }

  // optional int32 tschchartseriesstackedareavaluelabelposition = 96;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(96, this->_internal_tschchartseriesstackedareavaluelabelposition(), target);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional int32 tschchartseriesstackedbarvaluelabelposition = 97;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(97, this->_internal_tschchartseriesstackedbarvaluelabelposition(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.ChartSeriesStyleArchive)
  return target;
}

size_t ChartSeriesStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.ChartSeriesStyleArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulterrorbarlineend_);
    }

    // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulterrorbarlineendscatterx_);
    }

    // optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulterrorbarshadow_);
    }

    // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulterrorbarstroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulterrorbarstrokescatterx_);
    }

    // optional .TSD.FillArchive tschchartseries3dareafill = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries3dareafill_);
    }

    // optional .TSD.FillArchive tschchartseries3dbarfill = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries3dbarfill_);
    }

    // optional .TSD.FillArchive tschchartseries3dcolumnfill = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries3dcolumnfill_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSD.FillArchive tschchartseries3dlinefill = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries3dlinefill_);
    }

    // optional .TSD.FillArchive tschchartseries3dpiefill = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries3dpiefill_);
    }

    // optional .TSD.FillArchive tschchartseriesareafill = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesareafill_);
    }

    // optional .TSD.FillArchive tschchartseriesbarfill = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesbarfill_);
    }

    // optional .TSD.FillArchive tschchartseriescolumnfill = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriescolumnfill_);
    }

    // optional .TSD.FillArchive tschchartseriesdefaultfill = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaultfill_);
    }

    // optional .TSD.FillArchive tschchartseriesmixedareafill = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedareafill_);
    }

    // optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedcolumnfill_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TSD.FillArchive tschchartseriespiefill = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriespiefill_);
    }

    // optional .TSD.ShadowArchive tschchartseries3dareashadow = 30;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries3dareashadow_);
    }

    // optional .TSD.ShadowArchive tschchartseries3dbarshadow = 31;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries3dbarshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 32;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries3dcolumnshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseries3dlineshadow = 33;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries3dlineshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseries3dpieshadow = 34;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries3dpieshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesareashadow = 35;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesareashadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesbarshadow = 36;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesbarshadow_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 37;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesbubbleshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 38;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaultshadow_);
    }

    // optional .TSD.ShadowArchive tschchartserieslineshadow = 39;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartserieslineshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 40;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedareashadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 41;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedcolumnshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 42;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedlineshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriespieshadow = 43;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriespieshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesscattershadow = 44;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesscattershadow_);
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSD.StrokeArchive tschchartseriesareastroke = 45;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesareastroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesbarstroke = 46;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesbarstroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesbubblestroke = 47;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesbubblestroke_);
    }

    // optional .TSD.StrokeArchive tschchartserieslinestroke = 48;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartserieslinestroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 49;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedareastroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 50;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedcolumnstroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 51;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedlinestroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriespiestroke = 52;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriespiestroke_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSD.StrokeArchive tschchartseriesscatterstroke = 53;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesscatterstroke_);
    }

    // optional .TSD.FillArchive tschchartseriesareasymbolfill = 54;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesareasymbolfill_);
    }

    // optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 55;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesbubblesymbolfill_);
    }

    // optional .TSD.FillArchive tschchartserieslinesymbolfill = 56;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartserieslinesymbolfill_);
    }

    // optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 57;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedareasymbolfill_);
    }

    // optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 58;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedlinesymbolfill_);
    }

    // optional .TSD.FillArchive tschchartseriesscattersymbolfill = 59;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesscattersymbolfill_);
    }

    // optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 75;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesareasymbolstroke_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 76;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesbubblesymbolstroke_);
    }

    // optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 77;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartserieslinesymbolstroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 78;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedareasymbolstroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 79;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedlinesymbolstroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 80;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesscattersymbolstroke_);
    }

    // optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 85;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulttrendlineshadow_);
    }

    // optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 86;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulttrendlinestroke_);
    }

    // optional int32 tschchartseriesarealabelparagraphstyleindex = 18;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesarealabelparagraphstyleindex());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 tschchartseriesbarlabelparagraphstyleindex = 19;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbarlabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 20;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultlabelparagraphstyleindex());
    }

    // optional int32 tschchartserieslinelabelparagraphstyleindex = 21;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartserieslinelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesmixedlabelparagraphstyleindex = 22;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedlabelparagraphstyleindex());
    }

    // optional int32 tschchartseriespielabelparagraphstyleindex = 23;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriespielabelparagraphstyleindex());
    }

    // optional float tschchartseriesdefaultopacity = 24;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 25;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesareaoutsidelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 26;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbaroutsidelabelparagraphstyleindex());
    }

  }
  cached_has_bits = _impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 27;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultoutsidelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 28;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedoutsidelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 29;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriespieoutsidelabelparagraphstyleindex());
    }

    // optional bool tschchartseriesareasymbolfilluseseriesfill = 60;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartserieslinesymbolfilluseseriesfill = 61;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 62;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 63;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesareasymbolfilluseseriesstroke = 64;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 65;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartserieslinesymbolfilluseseriesstroke = 66;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 67;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 68;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesscattersymbolfilluseseriesstroke = 69;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional float tschchartseriesareasymbolsize = 70;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartserieslinesymbolsize = 71;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesmixedareasymbolsize = 72;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float tschchartseriesmixedlinesymbolsize = 73;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesscattersymbolsize = 74;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulttrendlineequationopacity = 81;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 82;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulttrendlineequationparagraphstyleindex());
    }

    // optional float tschchartseriesdefaulttrendlinersquaredopacity = 83;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 84;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex());
    }

    // optional int32 tschchartseriesareavaluelabelposition = 87;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesareavaluelabelposition());
    }

    // optional int32 tschchartseriesbarvaluelabelposition = 88;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbarvaluelabelposition());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 tschchartseriesbubblevaluelabelposition = 89;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbubblevaluelabelposition());
    }

    // optional int32 tschchartseriesdefaultvaluelabelposition = 90;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultvaluelabelposition());
    }

    // optional int32 tschchartserieslinevaluelabelposition = 91;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartserieslinevaluelabelposition());
    }

    // optional int32 tschchartseriesmixedareavaluelabelposition = 92;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedareavaluelabelposition());
    }

    // optional int32 tschchartseriesmixedcolumnvaluelabelposition = 93;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedcolumnvaluelabelposition());
    }

    // optional int32 tschchartseriesmixedlinevaluelabelposition = 94;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedlinevaluelabelposition());
    }

    // optional int32 tschchartseriesscattervaluelabelposition = 95;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesscattervaluelabelposition());
    }

    // optional int32 tschchartseriesstackedareavaluelabelposition = 96;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesstackedareavaluelabelposition());
    }

  }
  // optional int32 tschchartseriesstackedbarvaluelabelposition = 97;
  cached_has_bits = _impl_._has_bits_[3];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_tschchartseriesstackedbarvaluelabelposition());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartSeriesStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartSeriesStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartSeriesStyleArchive::GetClassData() const { return &_class_data_; }


void ChartSeriesStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartSeriesStyleArchive*>(&to_msg);
  auto& from = static_cast<const ChartSeriesStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.ChartSeriesStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_tschchartseriesdefaulterrorbarlineend()->::TSD::LineEndArchive::MergeFrom(
          from._internal_tschchartseriesdefaulterrorbarlineend());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tschchartseriesdefaulterrorbarlineendscatterx()->::TSD::LineEndArchive::MergeFrom(
          from._internal_tschchartseriesdefaulterrorbarlineendscatterx());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tschchartseriesdefaulterrorbarshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesdefaulterrorbarshadow());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tschchartseriesdefaulterrorbarstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesdefaulterrorbarstroke());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_tschchartseriesdefaulterrorbarstrokescatterx()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesdefaulterrorbarstrokescatterx());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_tschchartseries3dareafill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseries3dareafill());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_tschchartseries3dbarfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseries3dbarfill());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_tschchartseries3dcolumnfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseries3dcolumnfill());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_tschchartseries3dlinefill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseries3dlinefill());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_tschchartseries3dpiefill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseries3dpiefill());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_tschchartseriesareafill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesareafill());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_tschchartseriesbarfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesbarfill());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_tschchartseriescolumnfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriescolumnfill());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_tschchartseriesdefaultfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesdefaultfill());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_tschchartseriesmixedareafill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesmixedareafill());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_tschchartseriesmixedcolumnfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesmixedcolumnfill());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_tschchartseriespiefill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriespiefill());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_tschchartseries3dareashadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseries3dareashadow());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_tschchartseries3dbarshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseries3dbarshadow());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_tschchartseries3dcolumnshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseries3dcolumnshadow());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_mutable_tschchartseries3dlineshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseries3dlineshadow());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_mutable_tschchartseries3dpieshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseries3dpieshadow());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_mutable_tschchartseriesareashadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesareashadow());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_internal_mutable_tschchartseriesbarshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesbarshadow());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_internal_mutable_tschchartseriesbubbleshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesbubbleshadow());
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_internal_mutable_tschchartseriesdefaultshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesdefaultshadow());
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_internal_mutable_tschchartserieslineshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartserieslineshadow());
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_internal_mutable_tschchartseriesmixedareashadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesmixedareashadow());
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_internal_mutable_tschchartseriesmixedcolumnshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesmixedcolumnshadow());
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_internal_mutable_tschchartseriesmixedlineshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesmixedlineshadow());
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_internal_mutable_tschchartseriespieshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriespieshadow());
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_internal_mutable_tschchartseriesscattershadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesscattershadow());
    }
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_tschchartseriesareastroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesareastroke());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tschchartseriesbarstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesbarstroke());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tschchartseriesbubblestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesbubblestroke());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tschchartserieslinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartserieslinestroke());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_tschchartseriesmixedareastroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesmixedareastroke());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_tschchartseriesmixedcolumnstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesmixedcolumnstroke());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_tschchartseriesmixedlinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesmixedlinestroke());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_tschchartseriespiestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriespiestroke());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_tschchartseriesscatterstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesscatterstroke());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_tschchartseriesareasymbolfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesareasymbolfill());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_tschchartseriesbubblesymbolfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesbubblesymbolfill());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_tschchartserieslinesymbolfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartserieslinesymbolfill());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_tschchartseriesmixedareasymbolfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesmixedareasymbolfill());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_tschchartseriesmixedlinesymbolfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesmixedlinesymbolfill());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_tschchartseriesscattersymbolfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesscattersymbolfill());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_tschchartseriesareasymbolstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesareasymbolstroke());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_tschchartseriesbubblesymbolstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesbubblesymbolstroke());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_tschchartserieslinesymbolstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartserieslinesymbolstroke());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_tschchartseriesmixedareasymbolstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesmixedareasymbolstroke());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_tschchartseriesmixedlinesymbolstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesmixedlinesymbolstroke());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_mutable_tschchartseriesscattersymbolstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesscattersymbolstroke());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_mutable_tschchartseriesdefaulttrendlineshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesdefaulttrendlineshadow());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_mutable_tschchartseriesdefaulttrendlinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesdefaulttrendlinestroke());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.tschchartseriesarealabelparagraphstyleindex_ = from._impl_.tschchartseriesarealabelparagraphstyleindex_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.tschchartseriesbarlabelparagraphstyleindex_ = from._impl_.tschchartseriesbarlabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.tschchartseriesdefaultlabelparagraphstyleindex_ = from._impl_.tschchartseriesdefaultlabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.tschchartserieslinelabelparagraphstyleindex_ = from._impl_.tschchartserieslinelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.tschchartseriesmixedlabelparagraphstyleindex_ = from._impl_.tschchartseriesmixedlabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.tschchartseriespielabelparagraphstyleindex_ = from._impl_.tschchartseriespielabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.tschchartseriesdefaultopacity_ = from._impl_.tschchartseriesdefaultopacity_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.tschchartseriesareaoutsidelabelparagraphstyleindex_ = from._impl_.tschchartseriesareaoutsidelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.tschchartseriesbaroutsidelabelparagraphstyleindex_ = from._impl_.tschchartseriesbaroutsidelabelparagraphstyleindex_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tschchartseriesdefaultoutsidelabelparagraphstyleindex_ = from._impl_.tschchartseriesdefaultoutsidelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tschchartseriesmixedoutsidelabelparagraphstyleindex_ = from._impl_.tschchartseriesmixedoutsidelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tschchartseriespieoutsidelabelparagraphstyleindex_ = from._impl_.tschchartseriespieoutsidelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tschchartseriesareasymbolfilluseseriesfill_ = from._impl_.tschchartseriesareasymbolfilluseseriesfill_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tschchartserieslinesymbolfilluseseriesfill_ = from._impl_.tschchartserieslinesymbolfilluseseriesfill_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tschchartseriesmixedareasymbolfilluseseriesfill_ = from._impl_.tschchartseriesmixedareasymbolfilluseseriesfill_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.tschchartseriesmixedlinesymbolfilluseseriesfill_ = from._impl_.tschchartseriesmixedlinesymbolfilluseseriesfill_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.tschchartseriesareasymbolfilluseseriesstroke_ = from._impl_.tschchartseriesareasymbolfilluseseriesstroke_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.tschchartseriesbubblesymbolfilluseseriesstroke_ = from._impl_.tschchartseriesbubblesymbolfilluseseriesstroke_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.tschchartserieslinesymbolfilluseseriesstroke_ = from._impl_.tschchartserieslinesymbolfilluseseriesstroke_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.tschchartseriesmixedareasymbolfilluseseriesstroke_ = from._impl_.tschchartseriesmixedareasymbolfilluseseriesstroke_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.tschchartseriesmixedlinesymbolfilluseseriesstroke_ = from._impl_.tschchartseriesmixedlinesymbolfilluseseriesstroke_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.tschchartseriesscattersymbolfilluseseriesstroke_ = from._impl_.tschchartseriesscattersymbolfilluseseriesstroke_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tschchartseriesareasymbolsize_ = from._impl_.tschchartseriesareasymbolsize_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.tschchartserieslinesymbolsize_ = from._impl_.tschchartserieslinesymbolsize_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.tschchartseriesmixedareasymbolsize_ = from._impl_.tschchartseriesmixedareasymbolsize_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.tschchartseriesmixedlinesymbolsize_ = from._impl_.tschchartseriesmixedlinesymbolsize_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.tschchartseriesscattersymbolsize_ = from._impl_.tschchartseriesscattersymbolsize_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.tschchartseriesdefaulttrendlineequationopacity_ = from._impl_.tschchartseriesdefaulttrendlineequationopacity_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.tschchartseriesdefaulttrendlineequationparagraphstyleindex_ = from._impl_.tschchartseriesdefaulttrendlineequationparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.tschchartseriesdefaulttrendlinersquaredopacity_ = from._impl_.tschchartseriesdefaulttrendlinersquaredopacity_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_ = from._impl_.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.tschchartseriesareavaluelabelposition_ = from._impl_.tschchartseriesareavaluelabelposition_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.tschchartseriesbarvaluelabelposition_ = from._impl_.tschchartseriesbarvaluelabelposition_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.tschchartseriesbubblevaluelabelposition_ = from._impl_.tschchartseriesbubblevaluelabelposition_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.tschchartseriesdefaultvaluelabelposition_ = from._impl_.tschchartseriesdefaultvaluelabelposition_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.tschchartserieslinevaluelabelposition_ = from._impl_.tschchartserieslinevaluelabelposition_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.tschchartseriesmixedareavaluelabelposition_ = from._impl_.tschchartseriesmixedareavaluelabelposition_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.tschchartseriesmixedcolumnvaluelabelposition_ = from._impl_.tschchartseriesmixedcolumnvaluelabelposition_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.tschchartseriesmixedlinevaluelabelposition_ = from._impl_.tschchartseriesmixedlinevaluelabelposition_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.tschchartseriesscattervaluelabelposition_ = from._impl_.tschchartseriesscattervaluelabelposition_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.tschchartseriesstackedareavaluelabelposition_ = from._impl_.tschchartseriesstackedareavaluelabelposition_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  if (from._internal_has_tschchartseriesstackedbarvaluelabelposition()) {
    _this->_internal_set_tschchartseriesstackedbarvaluelabelposition(from._internal_tschchartseriesstackedbarvaluelabelposition());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartSeriesStyleArchive::CopyFrom(const ChartSeriesStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.ChartSeriesStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSeriesStyleArchive::IsInitialized() const {
  if (_internal_has_tschchartseriesdefaulterrorbarlineend()) {
    if (!_impl_.tschchartseriesdefaulterrorbarlineend_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulterrorbarlineendscatterx()) {
    if (!_impl_.tschchartseriesdefaulterrorbarlineendscatterx_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulterrorbarshadow()) {
    if (!_impl_.tschchartseriesdefaulterrorbarshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulterrorbarstroke()) {
    if (!_impl_.tschchartseriesdefaulterrorbarstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulterrorbarstrokescatterx()) {
    if (!_impl_.tschchartseriesdefaulterrorbarstrokescatterx_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dareafill()) {
    if (!_impl_.tschchartseries3dareafill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dbarfill()) {
    if (!_impl_.tschchartseries3dbarfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dcolumnfill()) {
    if (!_impl_.tschchartseries3dcolumnfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dlinefill()) {
    if (!_impl_.tschchartseries3dlinefill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dpiefill()) {
    if (!_impl_.tschchartseries3dpiefill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesareafill()) {
    if (!_impl_.tschchartseriesareafill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbarfill()) {
    if (!_impl_.tschchartseriesbarfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriescolumnfill()) {
    if (!_impl_.tschchartseriescolumnfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaultfill()) {
    if (!_impl_.tschchartseriesdefaultfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedareafill()) {
    if (!_impl_.tschchartseriesmixedareafill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedcolumnfill()) {
    if (!_impl_.tschchartseriesmixedcolumnfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriespiefill()) {
    if (!_impl_.tschchartseriespiefill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dareashadow()) {
    if (!_impl_.tschchartseries3dareashadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dbarshadow()) {
    if (!_impl_.tschchartseries3dbarshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dcolumnshadow()) {
    if (!_impl_.tschchartseries3dcolumnshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dlineshadow()) {
    if (!_impl_.tschchartseries3dlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dpieshadow()) {
    if (!_impl_.tschchartseries3dpieshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesareashadow()) {
    if (!_impl_.tschchartseriesareashadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbarshadow()) {
    if (!_impl_.tschchartseriesbarshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbubbleshadow()) {
    if (!_impl_.tschchartseriesbubbleshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaultshadow()) {
    if (!_impl_.tschchartseriesdefaultshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieslineshadow()) {
    if (!_impl_.tschchartserieslineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedareashadow()) {
    if (!_impl_.tschchartseriesmixedareashadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedcolumnshadow()) {
    if (!_impl_.tschchartseriesmixedcolumnshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedlineshadow()) {
    if (!_impl_.tschchartseriesmixedlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriespieshadow()) {
    if (!_impl_.tschchartseriespieshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesscattershadow()) {
    if (!_impl_.tschchartseriesscattershadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesareastroke()) {
    if (!_impl_.tschchartseriesareastroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbarstroke()) {
    if (!_impl_.tschchartseriesbarstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbubblestroke()) {
    if (!_impl_.tschchartseriesbubblestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieslinestroke()) {
    if (!_impl_.tschchartserieslinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedareastroke()) {
    if (!_impl_.tschchartseriesmixedareastroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedcolumnstroke()) {
    if (!_impl_.tschchartseriesmixedcolumnstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedlinestroke()) {
    if (!_impl_.tschchartseriesmixedlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriespiestroke()) {
    if (!_impl_.tschchartseriespiestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesscatterstroke()) {
    if (!_impl_.tschchartseriesscatterstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesareasymbolfill()) {
    if (!_impl_.tschchartseriesareasymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbubblesymbolfill()) {
    if (!_impl_.tschchartseriesbubblesymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieslinesymbolfill()) {
    if (!_impl_.tschchartserieslinesymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedareasymbolfill()) {
    if (!_impl_.tschchartseriesmixedareasymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedlinesymbolfill()) {
    if (!_impl_.tschchartseriesmixedlinesymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesscattersymbolfill()) {
    if (!_impl_.tschchartseriesscattersymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesareasymbolstroke()) {
    if (!_impl_.tschchartseriesareasymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbubblesymbolstroke()) {
    if (!_impl_.tschchartseriesbubblesymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieslinesymbolstroke()) {
    if (!_impl_.tschchartserieslinesymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedareasymbolstroke()) {
    if (!_impl_.tschchartseriesmixedareasymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedlinesymbolstroke()) {
    if (!_impl_.tschchartseriesmixedlinesymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesscattersymbolstroke()) {
    if (!_impl_.tschchartseriesscattersymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulttrendlineshadow()) {
    if (!_impl_.tschchartseriesdefaulttrendlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulttrendlinestroke()) {
    if (!_impl_.tschchartseriesdefaulttrendlinestroke_->IsInitialized()) return false;
  }
  return true;
}

void ChartSeriesStyleArchive::InternalSwap(ChartSeriesStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  swap(_impl_._has_bits_[2], other->_impl_._has_bits_[2]);
  swap(_impl_._has_bits_[3], other->_impl_._has_bits_[3]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartSeriesStyleArchive, _impl_.tschchartseriesstackedbarvaluelabelposition_)
      + sizeof(ChartSeriesStyleArchive::_impl_.tschchartseriesstackedbarvaluelabelposition_)
      - PROTOBUF_FIELD_OFFSET(ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulterrorbarlineend_)>(
          reinterpret_cast<char*>(&_impl_.tschchartseriesdefaulterrorbarlineend_),
          reinterpret_cast<char*>(&other->_impl_.tschchartseriesdefaulterrorbarlineend_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSeriesStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[6]);
}

// ===================================================================

class ChartSeriesNonStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartSeriesNonStyleArchive>()._impl_._has_bits_);
  static void set_has_tschchartseriesbubbleadjustmentscale(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustomnegativedata(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarcustomnegativedata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustomnegativedatascatterx(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustompositivedata(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarcustompositivedata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustompositivedatascatterx(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarcustompositivedatascatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tschchartseriesdefaulterrorbarfixedvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tschchartseriesdefaulterrorbarfixedvaluescatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tschchartseriesdefaulterrorbarpercentvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tschchartseriesdefaulterrorbarpercentvaluescatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tschchartseriesdefaulterrorbarsetting(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_tschchartseriesdefaulterrorbarsettingscatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tschchartseriesdefaulterrorbarstddevvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tschchartseriesdefaulterrorbarstddevvaluescatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tschchartseriesdefaulterrorbartype(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tschchartseriesdefaulterrorbartypescatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_tschchartseriespielabelexplosion(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_tschchartseriesbubblelinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_tschchartserieslinelinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_tschchartseriesmixedlinelinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_tschchartseriesscatterlinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::TSK::FormatStructArchive& tschchartseriesdefaultnumberformat(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefaultnumberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSK::FormatStructArchive& tschchartseriespienumberformat(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriespienumberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tschchartseriesdefaultnumberformattype(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_tschchartseriespienumberformattype(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::TSK::FormatStructArchive& tschchartseriesstackedpercentnumberformat(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesstackedpercentnumberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tschchartseriesdefaultseriestype(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_tschchartseriesdefaultshowerrorbar(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_tschchartseriesdefaultshowerrorbarscatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_tschchartseriesscattershowline(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_tschchartseriesbubbleshownegativedata(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_tschchartseriespieshowserieslabels(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_tschchartseriesareashowsymbol(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_tschchartserieslineshowsymbol(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_tschchartseriesmixedareashowsymbol(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_tschchartseriesmixedlineshowsymbol(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_tschchartseriesscattershowsymbol(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_tschchartseriesdefaultshowtrendline(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_tschchartseriesareashowvaluelabels(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_tschchartseriesbarshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_tschchartseriesbubbleshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_tschchartseriesdefaultshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_tschchartserieslineshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_tschchartseriesmixedshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_tschchartseriespieshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_tschchartseriesscattershowvaluelabels(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_tschchartseriesbubblesizedimension(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_tschchartseriesareasymboltype(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_tschchartserieslinesymboltype(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_tschchartseriesmixedareasymboltype(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_tschchartseriesmixedlinesymboltype(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_tschchartseriesscattersymboltype(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_tschchartseriesdefaulttrendlineequationoffsetx(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_tschchartseriesdefaulttrendlineequationoffsety(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_tschchartseriesdefaulttrendlinelabelstring(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschchartseriesdefaulttrendlineorder(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_tschchartseriesdefaulttrendlineperiod(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_tschchartseriesdefaulttrendlinersquaredoffsetx(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_tschchartseriesdefaulttrendlinersquaredoffsety(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_tschchartseriesdefaulttrendlineshowequation(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_tschchartseriesdefaulttrendlineshowlabel(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_tschchartseriesdefaulttrendlineshowr2value(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_tschchartseriesdefaulttrendlinetype(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_tschchartseriespiewedgeexplosion(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_tschchartseriesdefaultyaxisordinal(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static void set_has_tschchartseriesbubbleshowserieslabels(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_tschchartseriesbubblevaluelabelsaxis(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static void set_has_tschchartseriesscattershowserieslabels(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_tschchartseriesscattervaluelabelsaxis(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
};

const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefaulterrorbarcustomnegativedata(const ChartSeriesNonStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_;
}
const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefaulterrorbarcustomnegativedatascatterx(const ChartSeriesNonStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
}
const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefaulterrorbarcustompositivedata(const ChartSeriesNonStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulterrorbarcustompositivedata_;
}
const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefaulterrorbarcustompositivedatascatterx(const ChartSeriesNonStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
}
const ::TSK::FormatStructArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefaultnumberformat(const ChartSeriesNonStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaultnumberformat_;
}
const ::TSK::FormatStructArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriespienumberformat(const ChartSeriesNonStyleArchive* msg) {
  return *msg->_impl_.tschchartseriespienumberformat_;
}
const ::TSK::FormatStructArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesstackedpercentnumberformat(const ChartSeriesNonStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesstackedpercentnumberformat_;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarcustomnegativedata() {
  if (_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_ != nullptr) _impl_.tschchartseriesdefaulterrorbarcustomnegativedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() {
  if (_impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ != nullptr) _impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarcustompositivedata() {
  if (_impl_.tschchartseriesdefaulterrorbarcustompositivedata_ != nullptr) _impl_.tschchartseriesdefaulterrorbarcustompositivedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarcustompositivedatascatterx() {
  if (_impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_ != nullptr) _impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultnumberformat() {
  if (_impl_.tschchartseriesdefaultnumberformat_ != nullptr) _impl_.tschchartseriesdefaultnumberformat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriespienumberformat() {
  if (_impl_.tschchartseriespienumberformat_ != nullptr) _impl_.tschchartseriespienumberformat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesstackedpercentnumberformat() {
  if (_impl_.tschchartseriesstackedpercentnumberformat_ != nullptr) _impl_.tschchartseriesstackedpercentnumberformat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
ChartSeriesNonStyleArchive::ChartSeriesNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.ChartSeriesNonStyleArchive)
}
ChartSeriesNonStyleArchive::ChartSeriesNonStyleArchive(const ChartSeriesNonStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartSeriesNonStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartseriesdefaulttrendlinelabelstring_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarcustompositivedata_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultnumberformat_){nullptr}
    , decltype(_impl_.tschchartseriespienumberformat_){nullptr}
    , decltype(_impl_.tschchartseriesstackedpercentnumberformat_){nullptr}
    , decltype(_impl_.tschchartseriesbubbleadjustmentscale_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbarfixedvalue_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbarfixedvaluescatterx_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbarpercentvalue_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbarpercentvaluescatterx_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbarsetting_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbarsettingscatterx_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbarstddevvalue_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbarstddevvaluescatterx_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbartype_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbartypescatterx_){}
    , decltype(_impl_.tschchartseriespielabelexplosion_){}
    , decltype(_impl_.tschchartseriesbubblelinetype_){}
    , decltype(_impl_.tschchartserieslinelinetype_){}
    , decltype(_impl_.tschchartseriesmixedlinelinetype_){}
    , decltype(_impl_.tschchartseriesscatterlinetype_){}
    , decltype(_impl_.tschchartseriesdefaultnumberformattype_){}
    , decltype(_impl_.tschchartseriespienumberformattype_){}
    , decltype(_impl_.tschchartseriesdefaultseriestype_){}
    , decltype(_impl_.tschchartseriesdefaultshowerrorbar_){}
    , decltype(_impl_.tschchartseriesdefaultshowerrorbarscatterx_){}
    , decltype(_impl_.tschchartseriesscattershowline_){}
    , decltype(_impl_.tschchartseriesbubbleshownegativedata_){}
    , decltype(_impl_.tschchartseriespieshowserieslabels_){}
    , decltype(_impl_.tschchartseriesareashowsymbol_){}
    , decltype(_impl_.tschchartserieslineshowsymbol_){}
    , decltype(_impl_.tschchartseriesmixedareashowsymbol_){}
    , decltype(_impl_.tschchartseriesmixedlineshowsymbol_){}
    , decltype(_impl_.tschchartseriesscattershowsymbol_){}
    , decltype(_impl_.tschchartseriesdefaultshowtrendline_){}
    , decltype(_impl_.tschchartseriesareashowvaluelabels_){}
    , decltype(_impl_.tschchartseriesbarshowvaluelabels_){}
    , decltype(_impl_.tschchartseriesbubbleshowvaluelabels_){}
    , decltype(_impl_.tschchartseriesdefaultshowvaluelabels_){}
    , decltype(_impl_.tschchartserieslineshowvaluelabels_){}
    , decltype(_impl_.tschchartseriesbubblesizedimension_){}
    , decltype(_impl_.tschchartseriesareasymboltype_){}
    , decltype(_impl_.tschchartseriesmixedshowvaluelabels_){}
    , decltype(_impl_.tschchartseriespieshowvaluelabels_){}
    , decltype(_impl_.tschchartseriesscattershowvaluelabels_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlineshowequation_){}
    , decltype(_impl_.tschchartserieslinesymboltype_){}
    , decltype(_impl_.tschchartseriesmixedareasymboltype_){}
    , decltype(_impl_.tschchartseriesmixedlinesymboltype_){}
    , decltype(_impl_.tschchartseriesscattersymboltype_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlineequationoffsetx_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlineequationoffsety_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlineorder_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlineperiod_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlinersquaredoffsetx_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlinersquaredoffsety_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlinetype_){}
    , decltype(_impl_.tschchartseriespiewedgeexplosion_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlineshowlabel_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlineshowr2value_){}
    , decltype(_impl_.tschchartseriesbubbleshowserieslabels_){}
    , decltype(_impl_.tschchartseriesscattershowserieslabels_){}
    , decltype(_impl_.tschchartseriesdefaultyaxisordinal_){}
    , decltype(_impl_.tschchartseriesbubblevaluelabelsaxis_){}
    , decltype(_impl_.tschchartseriesscattervaluelabelsaxis_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tschchartseriesdefaulttrendlinelabelstring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartseriesdefaulttrendlinelabelstring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tschchartseriesdefaulttrendlinelabelstring()) {
    _this->_impl_.tschchartseriesdefaulttrendlinelabelstring_.Set(from._internal_tschchartseriesdefaulttrendlinelabelstring(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarcustomnegativedata()) {
    _this->_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive(*from._impl_.tschchartseriesdefaulterrorbarcustomnegativedata_);
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx()) {
    _this->_impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive(*from._impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_);
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarcustompositivedata()) {
    _this->_impl_.tschchartseriesdefaulterrorbarcustompositivedata_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive(*from._impl_.tschchartseriesdefaulterrorbarcustompositivedata_);
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarcustompositivedatascatterx()) {
    _this->_impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive(*from._impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_);
  }
  if (from._internal_has_tschchartseriesdefaultnumberformat()) {
    _this->_impl_.tschchartseriesdefaultnumberformat_ = new ::TSK::FormatStructArchive(*from._impl_.tschchartseriesdefaultnumberformat_);
  }
  if (from._internal_has_tschchartseriespienumberformat()) {
    _this->_impl_.tschchartseriespienumberformat_ = new ::TSK::FormatStructArchive(*from._impl_.tschchartseriespienumberformat_);
  }
  if (from._internal_has_tschchartseriesstackedpercentnumberformat()) {
    _this->_impl_.tschchartseriesstackedpercentnumberformat_ = new ::TSK::FormatStructArchive(*from._impl_.tschchartseriesstackedpercentnumberformat_);
  }
  ::memcpy(&_impl_.tschchartseriesbubbleadjustmentscale_, &from._impl_.tschchartseriesbubbleadjustmentscale_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tschchartseriesscattervaluelabelsaxis_) -
    reinterpret_cast<char*>(&_impl_.tschchartseriesbubbleadjustmentscale_)) + sizeof(_impl_.tschchartseriesscattervaluelabelsaxis_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.ChartSeriesNonStyleArchive)
}

inline void ChartSeriesNonStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartseriesdefaulttrendlinelabelstring_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarcustompositivedata_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultnumberformat_){nullptr}
    , decltype(_impl_.tschchartseriespienumberformat_){nullptr}
    , decltype(_impl_.tschchartseriesstackedpercentnumberformat_){nullptr}
    , decltype(_impl_.tschchartseriesbubbleadjustmentscale_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbarfixedvalue_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbarfixedvaluescatterx_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbarpercentvalue_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbarpercentvaluescatterx_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbarsetting_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbarsettingscatterx_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbarstddevvalue_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbarstddevvaluescatterx_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbartype_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbartypescatterx_){0}
    , decltype(_impl_.tschchartseriespielabelexplosion_){0}
    , decltype(_impl_.tschchartseriesbubblelinetype_){0}
    , decltype(_impl_.tschchartserieslinelinetype_){0}
    , decltype(_impl_.tschchartseriesmixedlinelinetype_){0}
    , decltype(_impl_.tschchartseriesscatterlinetype_){0}
    , decltype(_impl_.tschchartseriesdefaultnumberformattype_){0}
    , decltype(_impl_.tschchartseriespienumberformattype_){0}
    , decltype(_impl_.tschchartseriesdefaultseriestype_){0}
    , decltype(_impl_.tschchartseriesdefaultshowerrorbar_){false}
    , decltype(_impl_.tschchartseriesdefaultshowerrorbarscatterx_){false}
    , decltype(_impl_.tschchartseriesscattershowline_){false}
    , decltype(_impl_.tschchartseriesbubbleshownegativedata_){false}
    , decltype(_impl_.tschchartseriespieshowserieslabels_){false}
    , decltype(_impl_.tschchartseriesareashowsymbol_){false}
    , decltype(_impl_.tschchartserieslineshowsymbol_){false}
    , decltype(_impl_.tschchartseriesmixedareashowsymbol_){false}
    , decltype(_impl_.tschchartseriesmixedlineshowsymbol_){false}
    , decltype(_impl_.tschchartseriesscattershowsymbol_){false}
    , decltype(_impl_.tschchartseriesdefaultshowtrendline_){false}
    , decltype(_impl_.tschchartseriesareashowvaluelabels_){false}
    , decltype(_impl_.tschchartseriesbarshowvaluelabels_){false}
    , decltype(_impl_.tschchartseriesbubbleshowvaluelabels_){false}
    , decltype(_impl_.tschchartseriesdefaultshowvaluelabels_){false}
    , decltype(_impl_.tschchartserieslineshowvaluelabels_){false}
    , decltype(_impl_.tschchartseriesbubblesizedimension_){0}
    , decltype(_impl_.tschchartseriesareasymboltype_){0}
    , decltype(_impl_.tschchartseriesmixedshowvaluelabels_){false}
    , decltype(_impl_.tschchartseriespieshowvaluelabels_){false}
    , decltype(_impl_.tschchartseriesscattershowvaluelabels_){false}
    , decltype(_impl_.tschchartseriesdefaulttrendlineshowequation_){false}
    , decltype(_impl_.tschchartserieslinesymboltype_){0}
    , decltype(_impl_.tschchartseriesmixedareasymboltype_){0}
    , decltype(_impl_.tschchartseriesmixedlinesymboltype_){0}
    , decltype(_impl_.tschchartseriesscattersymboltype_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlineequationoffsetx_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlineequationoffsety_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlineorder_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlineperiod_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlinersquaredoffsetx_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlinersquaredoffsety_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlinetype_){0}
    , decltype(_impl_.tschchartseriespiewedgeexplosion_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlineshowlabel_){false}
    , decltype(_impl_.tschchartseriesdefaulttrendlineshowr2value_){false}
    , decltype(_impl_.tschchartseriesbubbleshowserieslabels_){false}
    , decltype(_impl_.tschchartseriesscattershowserieslabels_){false}
    , decltype(_impl_.tschchartseriesdefaultyaxisordinal_){0}
    , decltype(_impl_.tschchartseriesbubblevaluelabelsaxis_){0}
    , decltype(_impl_.tschchartseriesscattervaluelabelsaxis_){0}
  };
  _impl_.tschchartseriesdefaulttrendlinelabelstring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartseriesdefaulttrendlinelabelstring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChartSeriesNonStyleArchive::~ChartSeriesNonStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.ChartSeriesNonStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartSeriesNonStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tschchartseriesdefaulttrendlinelabelstring_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulterrorbarcustomnegativedata_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulterrorbarcustompositivedata_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaultnumberformat_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriespienumberformat_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesstackedpercentnumberformat_;
}

void ChartSeriesNonStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartSeriesNonStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.ChartSeriesNonStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.tschchartseriesdefaulttrendlinelabelstring_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_ != nullptr);
      _impl_.tschchartseriesdefaulterrorbarcustomnegativedata_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ != nullptr);
      _impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulterrorbarcustompositivedata_ != nullptr);
      _impl_.tschchartseriesdefaulterrorbarcustompositivedata_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_ != nullptr);
      _impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaultnumberformat_ != nullptr);
      _impl_.tschchartseriesdefaultnumberformat_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.tschchartseriespienumberformat_ != nullptr);
      _impl_.tschchartseriespienumberformat_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesstackedpercentnumberformat_ != nullptr);
      _impl_.tschchartseriesstackedpercentnumberformat_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.tschchartseriesbubbleadjustmentscale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesdefaulterrorbarstddevvalue_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesbubbleadjustmentscale_)) + sizeof(_impl_.tschchartseriesdefaulterrorbarstddevvalue_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.tschchartseriesdefaulterrorbarstddevvaluescatterx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesscatterlinetype_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesdefaulterrorbarstddevvaluescatterx_)) + sizeof(_impl_.tschchartseriesscatterlinetype_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.tschchartseriesdefaultnumberformattype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriespieshowserieslabels_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesdefaultnumberformattype_)) + sizeof(_impl_.tschchartseriespieshowserieslabels_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.tschchartseriesareashowsymbol_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesbarshowvaluelabels_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesareashowsymbol_)) + sizeof(_impl_.tschchartseriesbarshowvaluelabels_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.tschchartseriesbubbleshowvaluelabels_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesscattershowvaluelabels_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesbubbleshowvaluelabels_)) + sizeof(_impl_.tschchartseriesscattershowvaluelabels_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.tschchartseriesdefaulttrendlineshowequation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesdefaulttrendlineorder_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesdefaulttrendlineshowequation_)) + sizeof(_impl_.tschchartseriesdefaulttrendlineorder_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.tschchartseriesdefaulttrendlineperiod_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesbubbleshowserieslabels_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesdefaulttrendlineperiod_)) + sizeof(_impl_.tschchartseriesbubbleshowserieslabels_));
  }
  cached_has_bits = _impl_._has_bits_[2];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.tschchartseriesscattershowserieslabels_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesscattervaluelabelsaxis_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesscattershowserieslabels_)) + sizeof(_impl_.tschchartseriesscattervaluelabelsaxis_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSeriesNonStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float tschchartseriesbubbleadjustmentscale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_tschchartseriesbubbleadjustmentscale(&_impl_._has_bits_);
          _impl_.tschchartseriesbubbleadjustmentscale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarcustompositivedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulterrorbarfixedvalue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarfixedvalue(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbarfixedvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarfixedvaluescatterx(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbarfixedvaluescatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulterrorbarpercentvalue = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarpercentvalue(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbarpercentvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarpercentvaluescatterx(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbarpercentvaluescatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulterrorbarsetting = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarsetting(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbarsetting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarsettingscatterx(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbarsettingscatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulterrorbarstddevvalue = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarstddevvalue(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbarstddevvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarstddevvaluescatterx(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbarstddevvaluescatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulterrorbartype = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_tschchartseriesdefaulterrorbartype(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbartype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulterrorbartypescatterx = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_tschchartseriesdefaulterrorbartypescatterx(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbartypescatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriespielabelexplosion = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _Internal::set_has_tschchartseriespielabelexplosion(&_impl_._has_bits_);
          _impl_.tschchartseriespielabelexplosion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbubblelinetype = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_tschchartseriesbubblelinetype(&_impl_._has_bits_);
          _impl_.tschchartseriesbubblelinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartserieslinelinetype = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_tschchartserieslinelinetype(&_impl_._has_bits_);
          _impl_.tschchartserieslinelinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedlinelinetype = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_tschchartseriesmixedlinelinetype(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedlinelinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesscatterlinetype = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_tschchartseriesscatterlinetype(&_impl_._has_bits_);
          _impl_.tschchartseriesscatterlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartseriesdefaultnumberformat = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaultnumberformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartseriespienumberformat = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriespienumberformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultnumberformattype = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_tschchartseriesdefaultnumberformattype(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultnumberformattype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriespienumberformattype = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_tschchartseriespienumberformattype(&_impl_._has_bits_);
          _impl_.tschchartseriespienumberformattype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartseriesstackedpercentnumberformat = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesstackedpercentnumberformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultseriestype = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_tschchartseriesdefaultseriestype(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultseriestype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaultshowerrorbar = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_tschchartseriesdefaultshowerrorbar(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultshowerrorbar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaultshowerrorbarscatterx = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_tschchartseriesdefaultshowerrorbarscatterx(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultshowerrorbarscatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesscattershowline = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_tschchartseriesscattershowline(&_impl_._has_bits_);
          _impl_.tschchartseriesscattershowline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesbubbleshownegativedata = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_tschchartseriesbubbleshownegativedata(&_impl_._has_bits_);
          _impl_.tschchartseriesbubbleshownegativedata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriespieshowserieslabels = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_tschchartseriespieshowserieslabels(&_impl_._has_bits_);
          _impl_.tschchartseriespieshowserieslabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesareashowsymbol = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_tschchartseriesareashowsymbol(&_impl_._has_bits_);
          _impl_.tschchartseriesareashowsymbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartserieslineshowsymbol = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tschchartserieslineshowsymbol(&_impl_._has_bits_);
          _impl_.tschchartserieslineshowsymbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedareashowsymbol = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tschchartseriesmixedareashowsymbol(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedareashowsymbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedlineshowsymbol = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tschchartseriesmixedlineshowsymbol(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedlineshowsymbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesscattershowsymbol = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_tschchartseriesscattershowsymbol(&_impl_._has_bits_);
          _impl_.tschchartseriesscattershowsymbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaultshowtrendline = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_tschchartseriesdefaultshowtrendline(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultshowtrendline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesareashowvaluelabels = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_tschchartseriesareashowvaluelabels(&_impl_._has_bits_);
          _impl_.tschchartseriesareashowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesbarshowvaluelabels = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_tschchartseriesbarshowvaluelabels(&_impl_._has_bits_);
          _impl_.tschchartseriesbarshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesbubbleshowvaluelabels = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_tschchartseriesbubbleshowvaluelabels(&_impl_._has_bits_);
          _impl_.tschchartseriesbubbleshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaultshowvaluelabels = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_tschchartseriesdefaultshowvaluelabels(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartserieslineshowvaluelabels = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_tschchartserieslineshowvaluelabels(&_impl_._has_bits_);
          _impl_.tschchartserieslineshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedshowvaluelabels = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_tschchartseriesmixedshowvaluelabels(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriespieshowvaluelabels = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_tschchartseriespieshowvaluelabels(&_impl_._has_bits_);
          _impl_.tschchartseriespieshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesscattershowvaluelabels = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_tschchartseriesscattershowvaluelabels(&_impl_._has_bits_);
          _impl_.tschchartseriesscattershowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbubblesizedimension = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_tschchartseriesbubblesizedimension(&_impl_._has_bits_);
          _impl_.tschchartseriesbubblesizedimension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesareasymboltype = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_tschchartseriesareasymboltype(&_impl_._has_bits_);
          _impl_.tschchartseriesareasymboltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartserieslinesymboltype = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_tschchartserieslinesymboltype(&_impl_._has_bits_);
          _impl_.tschchartserieslinesymboltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedareasymboltype = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_tschchartseriesmixedareasymboltype(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedareasymboltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedlinesymboltype = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_tschchartseriesmixedlinesymboltype(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedlinesymboltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesscattersymboltype = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_tschchartseriesscattersymboltype(&_impl_._has_bits_);
          _impl_.tschchartseriesscattersymboltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulttrendlineequationoffsetx = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineequationoffsetx(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlineequationoffsetx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulttrendlineequationoffsety = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 173)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineequationoffsety(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlineequationoffsety_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string tschchartseriesdefaulttrendlinelabelstring = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_tschchartseriesdefaulttrendlinelabelstring();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinelabelstring");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulttrendlineorder = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineorder(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlineorder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulttrendlineperiod = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineperiod(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlineperiod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 205)) {
          _Internal::set_has_tschchartseriesdefaulttrendlinersquaredoffsetx(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlinersquaredoffsetx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulttrendlinersquaredoffsety = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 213)) {
          _Internal::set_has_tschchartseriesdefaulttrendlinersquaredoffsety(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlinersquaredoffsety_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaulttrendlineshowequation = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineshowequation(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlineshowequation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaulttrendlineshowlabel = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineshowlabel(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlineshowlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaulttrendlineshowr2value = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineshowr2value(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlineshowr2value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulttrendlinetype = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_tschchartseriesdefaulttrendlinetype(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriespiewedgeexplosion = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 253)) {
          _Internal::set_has_tschchartseriespiewedgeexplosion(&_impl_._has_bits_);
          _impl_.tschchartseriespiewedgeexplosion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultyaxisordinal = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_tschchartseriesdefaultyaxisordinal(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultyaxisordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesbubbleshowserieslabels = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tschchartseriesbubbleshowserieslabels(&_impl_._has_bits_);
          _impl_.tschchartseriesbubbleshowserieslabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbubblevaluelabelsaxis = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tschchartseriesbubblevaluelabelsaxis(&_impl_._has_bits_);
          _impl_.tschchartseriesbubblevaluelabelsaxis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesscattershowserieslabels = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tschchartseriesscattershowserieslabels(&_impl_._has_bits_);
          _impl_.tschchartseriesscattershowserieslabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesscattervaluelabelsaxis = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_tschchartseriesscattervaluelabelsaxis(&_impl_._has_bits_);
          _impl_.tschchartseriesscattervaluelabelsaxis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartSeriesNonStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.ChartSeriesNonStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float tschchartseriesbubbleadjustmentscale = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_tschchartseriesbubbleadjustmentscale(), target);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tschchartseriesdefaulterrorbarcustomnegativedata(this),
        _Internal::tschchartseriesdefaulterrorbarcustomnegativedata(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::tschchartseriesdefaulterrorbarcustomnegativedatascatterx(this),
        _Internal::tschchartseriesdefaulterrorbarcustomnegativedatascatterx(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::tschchartseriesdefaulterrorbarcustompositivedata(this),
        _Internal::tschchartseriesdefaulterrorbarcustompositivedata(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::tschchartseriesdefaulterrorbarcustompositivedatascatterx(this),
        _Internal::tschchartseriesdefaulterrorbarcustompositivedatascatterx(this).GetCachedSize(), target, stream);
  }

  // optional float tschchartseriesdefaulterrorbarfixedvalue = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_tschchartseriesdefaulterrorbarfixedvalue(), target);
  }

  // optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_tschchartseriesdefaulterrorbarfixedvaluescatterx(), target);
  }

  // optional float tschchartseriesdefaulterrorbarpercentvalue = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_tschchartseriesdefaulterrorbarpercentvalue(), target);
  }

  // optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_tschchartseriesdefaulterrorbarpercentvaluescatterx(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbarsetting = 10;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_tschchartseriesdefaulterrorbarsetting(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 11;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_tschchartseriesdefaulterrorbarsettingscatterx(), target);
  }

  // optional float tschchartseriesdefaulterrorbarstddevvalue = 12;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_tschchartseriesdefaulterrorbarstddevvalue(), target);
  }

  // optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 13;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_tschchartseriesdefaulterrorbarstddevvaluescatterx(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbartype = 14;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_tschchartseriesdefaulterrorbartype(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbartypescatterx = 15;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_tschchartseriesdefaulterrorbartypescatterx(), target);
  }

  // optional float tschchartseriespielabelexplosion = 16;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_tschchartseriespielabelexplosion(), target);
  }

  // optional int32 tschchartseriesbubblelinetype = 17;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_tschchartseriesbubblelinetype(), target);
  }

  // optional int32 tschchartserieslinelinetype = 18;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_tschchartserieslinelinetype(), target);
  }

  // optional int32 tschchartseriesmixedlinelinetype = 19;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_tschchartseriesmixedlinelinetype(), target);
  }

  // optional int32 tschchartseriesscatterlinetype = 20;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_tschchartseriesscatterlinetype(), target);
  }

  // optional .TSK.FormatStructArchive tschchartseriesdefaultnumberformat = 21;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::tschchartseriesdefaultnumberformat(this),
        _Internal::tschchartseriesdefaultnumberformat(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.FormatStructArchive tschchartseriespienumberformat = 22;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::tschchartseriespienumberformat(this),
        _Internal::tschchartseriespienumberformat(this).GetCachedSize(), target, stream);
  }

  // optional int32 tschchartseriesdefaultnumberformattype = 23;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(23, this->_internal_tschchartseriesdefaultnumberformattype(), target);
  }

  // optional int32 tschchartseriespienumberformattype = 24;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_tschchartseriespienumberformattype(), target);
  }

  // optional .TSK.FormatStructArchive tschchartseriesstackedpercentnumberformat = 25;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::tschchartseriesstackedpercentnumberformat(this),
        _Internal::tschchartseriesstackedpercentnumberformat(this).GetCachedSize(), target, stream);
  }

  // optional int32 tschchartseriesdefaultseriestype = 26;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(26, this->_internal_tschchartseriesdefaultseriestype(), target);
  }

  // optional bool tschchartseriesdefaultshowerrorbar = 27;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(27, this->_internal_tschchartseriesdefaultshowerrorbar(), target);
  }

  // optional bool tschchartseriesdefaultshowerrorbarscatterx = 28;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(28, this->_internal_tschchartseriesdefaultshowerrorbarscatterx(), target);
  }

  // optional bool tschchartseriesscattershowline = 29;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(29, this->_internal_tschchartseriesscattershowline(), target);
  }

  // optional bool tschchartseriesbubbleshownegativedata = 30;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(30, this->_internal_tschchartseriesbubbleshownegativedata(), target);
  }

  // optional bool tschchartseriespieshowserieslabels = 31;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(31, this->_internal_tschchartseriespieshowserieslabels(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool tschchartseriesareashowsymbol = 32;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(32, this->_internal_tschchartseriesareashowsymbol(), target);
  }

  // optional bool tschchartserieslineshowsymbol = 33;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(33, this->_internal_tschchartserieslineshowsymbol(), target);
  }

  // optional bool tschchartseriesmixedareashowsymbol = 34;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(34, this->_internal_tschchartseriesmixedareashowsymbol(), target);
  }

  // optional bool tschchartseriesmixedlineshowsymbol = 35;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(35, this->_internal_tschchartseriesmixedlineshowsymbol(), target);
  }

  // optional bool tschchartseriesscattershowsymbol = 36;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(36, this->_internal_tschchartseriesscattershowsymbol(), target);
  }

  // optional bool tschchartseriesdefaultshowtrendline = 37;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(37, this->_internal_tschchartseriesdefaultshowtrendline(), target);
  }

  // optional bool tschchartseriesareashowvaluelabels = 38;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(38, this->_internal_tschchartseriesareashowvaluelabels(), target);
  }

  // optional bool tschchartseriesbarshowvaluelabels = 39;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(39, this->_internal_tschchartseriesbarshowvaluelabels(), target);
  }

  // optional bool tschchartseriesbubbleshowvaluelabels = 40;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(40, this->_internal_tschchartseriesbubbleshowvaluelabels(), target);
  }

  // optional bool tschchartseriesdefaultshowvaluelabels = 41;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(41, this->_internal_tschchartseriesdefaultshowvaluelabels(), target);
  }

  // optional bool tschchartserieslineshowvaluelabels = 42;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(42, this->_internal_tschchartserieslineshowvaluelabels(), target);
  }

  // optional bool tschchartseriesmixedshowvaluelabels = 43;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(43, this->_internal_tschchartseriesmixedshowvaluelabels(), target);
  }

  // optional bool tschchartseriespieshowvaluelabels = 44;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(44, this->_internal_tschchartseriespieshowvaluelabels(), target);
  }

  // optional bool tschchartseriesscattershowvaluelabels = 45;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(45, this->_internal_tschchartseriesscattershowvaluelabels(), target);
  }

  // optional int32 tschchartseriesbubblesizedimension = 46;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(46, this->_internal_tschchartseriesbubblesizedimension(), target);
  }

  // optional int32 tschchartseriesareasymboltype = 47;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(47, this->_internal_tschchartseriesareasymboltype(), target);
  }

  // optional int32 tschchartserieslinesymboltype = 48;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(48, this->_internal_tschchartserieslinesymboltype(), target);
  }

  // optional int32 tschchartseriesmixedareasymboltype = 49;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(49, this->_internal_tschchartseriesmixedareasymboltype(), target);
  }

  // optional int32 tschchartseriesmixedlinesymboltype = 50;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(50, this->_internal_tschchartseriesmixedlinesymboltype(), target);
  }

  // optional int32 tschchartseriesscattersymboltype = 51;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(51, this->_internal_tschchartseriesscattersymboltype(), target);
  }

  // optional float tschchartseriesdefaulttrendlineequationoffsetx = 52;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(52, this->_internal_tschchartseriesdefaulttrendlineequationoffsetx(), target);
  }

  // optional float tschchartseriesdefaulttrendlineequationoffsety = 53;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(53, this->_internal_tschchartseriesdefaulttrendlineequationoffsety(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string tschchartseriesdefaulttrendlinelabelstring = 54;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschchartseriesdefaulttrendlinelabelstring().data(), static_cast<int>(this->_internal_tschchartseriesdefaulttrendlinelabelstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinelabelstring");
    target = stream->WriteStringMaybeAliased(
        54, this->_internal_tschchartseriesdefaulttrendlinelabelstring(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 tschchartseriesdefaulttrendlineorder = 55;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(55, this->_internal_tschchartseriesdefaulttrendlineorder(), target);
  }

  // optional int32 tschchartseriesdefaulttrendlineperiod = 56;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(56, this->_internal_tschchartseriesdefaulttrendlineperiod(), target);
  }

  // optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 57;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(57, this->_internal_tschchartseriesdefaulttrendlinersquaredoffsetx(), target);
  }

  // optional float tschchartseriesdefaulttrendlinersquaredoffsety = 58;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(58, this->_internal_tschchartseriesdefaulttrendlinersquaredoffsety(), target);
  }

  // optional bool tschchartseriesdefaulttrendlineshowequation = 59;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(59, this->_internal_tschchartseriesdefaulttrendlineshowequation(), target);
  }

  // optional bool tschchartseriesdefaulttrendlineshowlabel = 60;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(60, this->_internal_tschchartseriesdefaulttrendlineshowlabel(), target);
  }

  // optional bool tschchartseriesdefaulttrendlineshowr2value = 61;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(61, this->_internal_tschchartseriesdefaulttrendlineshowr2value(), target);
  }

  // optional int32 tschchartseriesdefaulttrendlinetype = 62;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(62, this->_internal_tschchartseriesdefaulttrendlinetype(), target);
  }

  // optional float tschchartseriespiewedgeexplosion = 63;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(63, this->_internal_tschchartseriespiewedgeexplosion(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional int32 tschchartseriesdefaultyaxisordinal = 64;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(64, this->_internal_tschchartseriesdefaultyaxisordinal(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool tschchartseriesbubbleshowserieslabels = 65;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(65, this->_internal_tschchartseriesbubbleshowserieslabels(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional int32 tschchartseriesbubblevaluelabelsaxis = 66;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(66, this->_internal_tschchartseriesbubblevaluelabelsaxis(), target);
  }

  // optional bool tschchartseriesscattershowserieslabels = 67;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(67, this->_internal_tschchartseriesscattershowserieslabels(), target);
  }

  // optional int32 tschchartseriesscattervaluelabelsaxis = 68;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(68, this->_internal_tschchartseriesscattervaluelabelsaxis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.ChartSeriesNonStyleArchive)
  return target;
}

size_t ChartSeriesNonStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.ChartSeriesNonStyleArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string tschchartseriesdefaulttrendlinelabelstring = 54;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tschchartseriesdefaulttrendlinelabelstring());
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_);
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_);
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulterrorbarcustompositivedata_);
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_);
    }

    // optional .TSK.FormatStructArchive tschchartseriesdefaultnumberformat = 21;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaultnumberformat_);
    }

    // optional .TSK.FormatStructArchive tschchartseriespienumberformat = 22;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriespienumberformat_);
    }

    // optional .TSK.FormatStructArchive tschchartseriesstackedpercentnumberformat = 25;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesstackedpercentnumberformat_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float tschchartseriesbubbleadjustmentscale = 1;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float tschchartseriesdefaulterrorbarfixedvalue = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float tschchartseriesdefaulterrorbarpercentvalue = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional int32 tschchartseriesdefaulterrorbarsetting = 10;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartseriesdefaulterrorbarsetting());
    }

    // optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 11;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartseriesdefaulterrorbarsettingscatterx());
    }

    // optional float tschchartseriesdefaulterrorbarstddevvalue = 12;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 13;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 4;
    }

    // optional int32 tschchartseriesdefaulterrorbartype = 14;
    if (cached_has_bits & 0x00020000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartseriesdefaulterrorbartype());
    }

    // optional int32 tschchartseriesdefaulterrorbartypescatterx = 15;
    if (cached_has_bits & 0x00040000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartseriesdefaulterrorbartypescatterx());
    }

    // optional float tschchartseriespielabelexplosion = 16;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesbubblelinetype = 17;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbubblelinetype());
    }

    // optional int32 tschchartserieslinelinetype = 18;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartserieslinelinetype());
    }

    // optional int32 tschchartseriesmixedlinelinetype = 19;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedlinelinetype());
    }

    // optional int32 tschchartseriesscatterlinetype = 20;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesscatterlinetype());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 tschchartseriesdefaultnumberformattype = 23;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultnumberformattype());
    }

    // optional int32 tschchartseriespienumberformattype = 24;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriespienumberformattype());
    }

    // optional int32 tschchartseriesdefaultseriestype = 26;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultseriestype());
    }

    // optional bool tschchartseriesdefaultshowerrorbar = 27;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaultshowerrorbarscatterx = 28;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesscattershowline = 29;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesbubbleshownegativedata = 30;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriespieshowserieslabels = 31;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool tschchartseriesareashowsymbol = 32;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartserieslineshowsymbol = 33;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedareashowsymbol = 34;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedlineshowsymbol = 35;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesscattershowsymbol = 36;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaultshowtrendline = 37;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesareashowvaluelabels = 38;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesbarshowvaluelabels = 39;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool tschchartseriesbubbleshowvaluelabels = 40;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaultshowvaluelabels = 41;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartserieslineshowvaluelabels = 42;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartseriesbubblesizedimension = 46;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbubblesizedimension());
    }

    // optional int32 tschchartseriesareasymboltype = 47;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesareasymboltype());
    }

    // optional bool tschchartseriesmixedshowvaluelabels = 43;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriespieshowvaluelabels = 44;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesscattershowvaluelabels = 45;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool tschchartseriesdefaulttrendlineshowequation = 59;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartserieslinesymboltype = 48;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartserieslinesymboltype());
    }

    // optional int32 tschchartseriesmixedareasymboltype = 49;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedareasymboltype());
    }

    // optional int32 tschchartseriesmixedlinesymboltype = 50;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedlinesymboltype());
    }

    // optional int32 tschchartseriesscattersymboltype = 51;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesscattersymboltype());
    }

    // optional float tschchartseriesdefaulttrendlineequationoffsetx = 52;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulttrendlineequationoffsety = 53;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesdefaulttrendlineorder = 55;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulttrendlineorder());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 tschchartseriesdefaulttrendlineperiod = 56;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulttrendlineperiod());
    }

    // optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 57;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulttrendlinersquaredoffsety = 58;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesdefaulttrendlinetype = 62;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulttrendlinetype());
    }

    // optional float tschchartseriespiewedgeexplosion = 63;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 4;
    }

    // optional bool tschchartseriesdefaulttrendlineshowlabel = 60;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaulttrendlineshowr2value = 61;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesbubbleshowserieslabels = 65;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _impl_._has_bits_[2];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool tschchartseriesscattershowserieslabels = 67;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartseriesdefaultyaxisordinal = 64;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultyaxisordinal());
    }

    // optional int32 tschchartseriesbubblevaluelabelsaxis = 66;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbubblevaluelabelsaxis());
    }

    // optional int32 tschchartseriesscattervaluelabelsaxis = 68;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesscattervaluelabelsaxis());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartSeriesNonStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartSeriesNonStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartSeriesNonStyleArchive::GetClassData() const { return &_class_data_; }


void ChartSeriesNonStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartSeriesNonStyleArchive*>(&to_msg);
  auto& from = static_cast<const ChartSeriesNonStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.ChartSeriesNonStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tschchartseriesdefaulttrendlinelabelstring(from._internal_tschchartseriesdefaulttrendlinelabelstring());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedata()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(
          from._internal_tschchartseriesdefaulterrorbarcustomnegativedata());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(
          from._internal_tschchartseriesdefaulterrorbarcustomnegativedatascatterx());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tschchartseriesdefaulterrorbarcustompositivedata()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(
          from._internal_tschchartseriesdefaulterrorbarcustompositivedata());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(
          from._internal_tschchartseriesdefaulterrorbarcustompositivedatascatterx());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_tschchartseriesdefaultnumberformat()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_tschchartseriesdefaultnumberformat());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_tschchartseriespienumberformat()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_tschchartseriespienumberformat());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_tschchartseriesstackedpercentnumberformat()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_tschchartseriesstackedpercentnumberformat());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.tschchartseriesbubbleadjustmentscale_ = from._impl_.tschchartseriesbubbleadjustmentscale_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.tschchartseriesdefaulterrorbarfixedvalue_ = from._impl_.tschchartseriesdefaulterrorbarfixedvalue_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.tschchartseriesdefaulterrorbarfixedvaluescatterx_ = from._impl_.tschchartseriesdefaulterrorbarfixedvaluescatterx_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.tschchartseriesdefaulterrorbarpercentvalue_ = from._impl_.tschchartseriesdefaulterrorbarpercentvalue_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.tschchartseriesdefaulterrorbarpercentvaluescatterx_ = from._impl_.tschchartseriesdefaulterrorbarpercentvaluescatterx_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tschchartseriesdefaulterrorbarsetting_ = from._impl_.tschchartseriesdefaulterrorbarsetting_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.tschchartseriesdefaulterrorbarsettingscatterx_ = from._impl_.tschchartseriesdefaulterrorbarsettingscatterx_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.tschchartseriesdefaulterrorbarstddevvalue_ = from._impl_.tschchartseriesdefaulterrorbarstddevvalue_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.tschchartseriesdefaulterrorbarstddevvaluescatterx_ = from._impl_.tschchartseriesdefaulterrorbarstddevvaluescatterx_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.tschchartseriesdefaulterrorbartype_ = from._impl_.tschchartseriesdefaulterrorbartype_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.tschchartseriesdefaulterrorbartypescatterx_ = from._impl_.tschchartseriesdefaulterrorbartypescatterx_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.tschchartseriespielabelexplosion_ = from._impl_.tschchartseriespielabelexplosion_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.tschchartseriesbubblelinetype_ = from._impl_.tschchartseriesbubblelinetype_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.tschchartserieslinelinetype_ = from._impl_.tschchartserieslinelinetype_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.tschchartseriesmixedlinelinetype_ = from._impl_.tschchartseriesmixedlinelinetype_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.tschchartseriesscatterlinetype_ = from._impl_.tschchartseriesscatterlinetype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.tschchartseriesdefaultnumberformattype_ = from._impl_.tschchartseriesdefaultnumberformattype_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.tschchartseriespienumberformattype_ = from._impl_.tschchartseriespienumberformattype_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.tschchartseriesdefaultseriestype_ = from._impl_.tschchartseriesdefaultseriestype_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.tschchartseriesdefaultshowerrorbar_ = from._impl_.tschchartseriesdefaultshowerrorbar_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.tschchartseriesdefaultshowerrorbarscatterx_ = from._impl_.tschchartseriesdefaultshowerrorbarscatterx_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.tschchartseriesscattershowline_ = from._impl_.tschchartseriesscattershowline_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.tschchartseriesbubbleshownegativedata_ = from._impl_.tschchartseriesbubbleshownegativedata_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.tschchartseriespieshowserieslabels_ = from._impl_.tschchartseriespieshowserieslabels_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tschchartseriesareashowsymbol_ = from._impl_.tschchartseriesareashowsymbol_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tschchartserieslineshowsymbol_ = from._impl_.tschchartserieslineshowsymbol_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tschchartseriesmixedareashowsymbol_ = from._impl_.tschchartseriesmixedareashowsymbol_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tschchartseriesmixedlineshowsymbol_ = from._impl_.tschchartseriesmixedlineshowsymbol_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tschchartseriesscattershowsymbol_ = from._impl_.tschchartseriesscattershowsymbol_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tschchartseriesdefaultshowtrendline_ = from._impl_.tschchartseriesdefaultshowtrendline_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.tschchartseriesareashowvaluelabels_ = from._impl_.tschchartseriesareashowvaluelabels_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.tschchartseriesbarshowvaluelabels_ = from._impl_.tschchartseriesbarshowvaluelabels_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.tschchartseriesbubbleshowvaluelabels_ = from._impl_.tschchartseriesbubbleshowvaluelabels_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.tschchartseriesdefaultshowvaluelabels_ = from._impl_.tschchartseriesdefaultshowvaluelabels_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.tschchartserieslineshowvaluelabels_ = from._impl_.tschchartserieslineshowvaluelabels_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.tschchartseriesbubblesizedimension_ = from._impl_.tschchartseriesbubblesizedimension_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.tschchartseriesareasymboltype_ = from._impl_.tschchartseriesareasymboltype_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tschchartseriesmixedshowvaluelabels_ = from._impl_.tschchartseriesmixedshowvaluelabels_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.tschchartseriespieshowvaluelabels_ = from._impl_.tschchartseriespieshowvaluelabels_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.tschchartseriesscattershowvaluelabels_ = from._impl_.tschchartseriesscattershowvaluelabels_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.tschchartseriesdefaulttrendlineshowequation_ = from._impl_.tschchartseriesdefaulttrendlineshowequation_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.tschchartserieslinesymboltype_ = from._impl_.tschchartserieslinesymboltype_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.tschchartseriesmixedareasymboltype_ = from._impl_.tschchartseriesmixedareasymboltype_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.tschchartseriesmixedlinesymboltype_ = from._impl_.tschchartseriesmixedlinesymboltype_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.tschchartseriesscattersymboltype_ = from._impl_.tschchartseriesscattersymboltype_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.tschchartseriesdefaulttrendlineequationoffsetx_ = from._impl_.tschchartseriesdefaulttrendlineequationoffsetx_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.tschchartseriesdefaulttrendlineequationoffsety_ = from._impl_.tschchartseriesdefaulttrendlineequationoffsety_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.tschchartseriesdefaulttrendlineorder_ = from._impl_.tschchartseriesdefaulttrendlineorder_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.tschchartseriesdefaulttrendlineperiod_ = from._impl_.tschchartseriesdefaulttrendlineperiod_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.tschchartseriesdefaulttrendlinersquaredoffsetx_ = from._impl_.tschchartseriesdefaulttrendlinersquaredoffsetx_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.tschchartseriesdefaulttrendlinersquaredoffsety_ = from._impl_.tschchartseriesdefaulttrendlinersquaredoffsety_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.tschchartseriesdefaulttrendlinetype_ = from._impl_.tschchartseriesdefaulttrendlinetype_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.tschchartseriespiewedgeexplosion_ = from._impl_.tschchartseriespiewedgeexplosion_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.tschchartseriesdefaulttrendlineshowlabel_ = from._impl_.tschchartseriesdefaulttrendlineshowlabel_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.tschchartseriesdefaulttrendlineshowr2value_ = from._impl_.tschchartseriesdefaulttrendlineshowr2value_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.tschchartseriesbubbleshowserieslabels_ = from._impl_.tschchartseriesbubbleshowserieslabels_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[2];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tschchartseriesscattershowserieslabels_ = from._impl_.tschchartseriesscattershowserieslabels_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tschchartseriesdefaultyaxisordinal_ = from._impl_.tschchartseriesdefaultyaxisordinal_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tschchartseriesbubblevaluelabelsaxis_ = from._impl_.tschchartseriesbubblevaluelabelsaxis_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tschchartseriesscattervaluelabelsaxis_ = from._impl_.tschchartseriesscattervaluelabelsaxis_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartSeriesNonStyleArchive::CopyFrom(const ChartSeriesNonStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.ChartSeriesNonStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSeriesNonStyleArchive::IsInitialized() const {
  if (_internal_has_tschchartseriesdefaultnumberformat()) {
    if (!_impl_.tschchartseriesdefaultnumberformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriespienumberformat()) {
    if (!_impl_.tschchartseriespienumberformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesstackedpercentnumberformat()) {
    if (!_impl_.tschchartseriesstackedpercentnumberformat_->IsInitialized()) return false;
  }
  return true;
}

void ChartSeriesNonStyleArchive::InternalSwap(ChartSeriesNonStyleArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  swap(_impl_._has_bits_[2], other->_impl_._has_bits_[2]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tschchartseriesdefaulttrendlinelabelstring_, lhs_arena,
      &other->_impl_.tschchartseriesdefaulttrendlinelabelstring_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartSeriesNonStyleArchive, _impl_.tschchartseriesscattervaluelabelsaxis_)
      + sizeof(ChartSeriesNonStyleArchive::_impl_.tschchartseriesscattervaluelabelsaxis_)
      - PROTOBUF_FIELD_OFFSET(ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarcustomnegativedata_)>(
          reinterpret_cast<char*>(&_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_),
          reinterpret_cast<char*>(&other->_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSeriesNonStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[7]);
}
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartStyleArchive::kCurrentFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ChartStyleArchive >, 11, false>
  ChartStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::ChartStyleArchive::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartNonStyleArchive::kCurrentFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartNonStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ChartNonStyleArchive >, 11, false>
  ChartNonStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::ChartNonStyleArchive::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int LegendStyleArchive::kCurrentFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::LegendStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::LegendStyleArchive >, 11, false>
  LegendStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::LegendStyleArchive::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int LegendNonStyleArchive::kCurrentFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::LegendNonStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::LegendNonStyleArchive >, 11, false>
  LegendNonStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::LegendNonStyleArchive::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartAxisStyleArchive::kCurrentFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartAxisStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ChartAxisStyleArchive >, 11, false>
  ChartAxisStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::ChartAxisStyleArchive::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartAxisNonStyleArchive::kCurrentFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartAxisNonStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ChartAxisNonStyleArchive >, 11, false>
  ChartAxisNonStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::ChartAxisNonStyleArchive::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartSeriesStyleArchive::kCurrentFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartSeriesStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ChartSeriesStyleArchive >, 11, false>
  ChartSeriesStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::ChartSeriesStyleArchive::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartSeriesNonStyleArchive::kCurrentFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartSeriesNonStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ChartSeriesNonStyleArchive >, 11, false>
  ChartSeriesNonStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::ChartSeriesNonStyleArchive::default_instance(), nullptr);

// @@protoc_insertion_point(namespace_scope)
}  // namespace Generated
}  // namespace TSCH
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSCH::Generated::ChartStyleArchive*
Arena::CreateMaybeMessage< ::TSCH::Generated::ChartStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::ChartStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::ChartNonStyleArchive*
Arena::CreateMaybeMessage< ::TSCH::Generated::ChartNonStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::ChartNonStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::LegendStyleArchive*
Arena::CreateMaybeMessage< ::TSCH::Generated::LegendStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::LegendStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::LegendNonStyleArchive*
Arena::CreateMaybeMessage< ::TSCH::Generated::LegendNonStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::LegendNonStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::ChartAxisStyleArchive*
Arena::CreateMaybeMessage< ::TSCH::Generated::ChartAxisStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::ChartAxisStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::ChartAxisNonStyleArchive*
Arena::CreateMaybeMessage< ::TSCH::Generated::ChartAxisNonStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::ChartAxisNonStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::ChartSeriesStyleArchive*
Arena::CreateMaybeMessage< ::TSCH::Generated::ChartSeriesStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::ChartSeriesStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::ChartSeriesNonStyleArchive*
Arena::CreateMaybeMessage< ::TSCH::Generated::ChartSeriesNonStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::ChartSeriesNonStyleArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
